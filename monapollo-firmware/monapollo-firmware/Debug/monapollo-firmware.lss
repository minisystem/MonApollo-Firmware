
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  000028d8  0000296c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b5  00800200  00800200  00002a6c  2**0
                  ALLOC
  3 .stab         00001d34  00000000  00000000  00002a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000648  00000000  00000000  000047a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a0  00000000  00000000  00004de8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043de  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001275  00000000  00000000  00009466  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a60  00000000  00000000  0000a6db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b78  00000000  00000000  0000c13c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001340  00000000  00000000  0000ccb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a6c  00000000  00000000  0000dff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00010a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_9>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e8 ed       	ldi	r30, 0xD8	; 216
      78:	f8 e2       	ldi	r31, 0x28	; 40
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	13 e0       	ldi	r17, 0x03	; 3
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a5 3b       	cpi	r26, 0xB5	; 181
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 a1 02 	call	0x542	; 0x542 <main>
      9a:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     120:	80 91 00 02 	lds	r24, 0x0200
     124:	08 95       	ret

00000126 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	18 2f       	mov	r17, r24
     130:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	ec 01       	movw	r28, r24
     138:	22 97       	sbiw	r28, 0x02	; 2
     13a:	be 01       	movw	r22, r28
     13c:	4e e0       	ldi	r20, 0x0E	; 14
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	0e 94 58 14 	call	0x28b0	; 0x28b0 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     144:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     146:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     148:	10 93 00 02 	sts	0x0200, r17
	
} 
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	08 95       	ret

00000156 <remove_note>:
void remove_note(uint8_t note){
     156:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     158:	c0 91 00 01 	lds	r28, 0x0100
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     15c:	c8 17       	cp	r28, r24
     15e:	41 f0       	breq	.+16     	; 0x170 <remove_note+0x1a>
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     168:	90 81       	ld	r25, Z
     16a:	98 17       	cp	r25, r24
     16c:	59 f4       	brne	.+22     	; 0x184 <remove_note+0x2e>
     16e:	02 c0       	rjmp	.+4      	; 0x174 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     174:	fa 01       	movw	r30, r20
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	e0 50       	subi	r30, 0x00	; 0
     17c:	ff 4f       	sbci	r31, 0xFF	; 255
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	80 83       	st	Z, r24
			free_slot = i;
			break;
     182:	07 c0       	rjmp	.+14     	; 0x192 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     184:	4f 5f       	subi	r20, 0xFF	; 255
     186:	5f 4f       	sbci	r21, 0xFF	; 255
     188:	32 96       	adiw	r30, 0x02	; 2
     18a:	48 30       	cpi	r20, 0x08	; 8
     18c:	51 05       	cpc	r21, r1
     18e:	61 f7       	brne	.-40     	; 0x168 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     190:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	ca 01       	movw	r24, r20
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	bc 01       	movw	r22, r24
     19c:	6e 5f       	subi	r22, 0xFE	; 254
     19e:	7e 4f       	sbci	r23, 0xFE	; 254
     1a0:	40 95       	com	r20
     1a2:	50 95       	com	r21
     1a4:	48 5f       	subi	r20, 0xF8	; 248
     1a6:	5f 4f       	sbci	r21, 0xFF	; 255
     1a8:	44 0f       	add	r20, r20
     1aa:	55 1f       	adc	r21, r21
     1ac:	80 50       	subi	r24, 0x00	; 0
     1ae:	9f 4f       	sbci	r25, 0xFF	; 255
     1b0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <memmove>
	note_pool[7].note = EMPTY;	
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	80 93 0e 01 	sts	0x010E, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1ba:	80 91 00 01 	lds	r24, 0x0100
     1be:	8f 3f       	cpi	r24, 0xFF	; 255
     1c0:	19 f4       	brne	.+6      	; 0x1c8 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1c2:	c0 93 00 02 	sts	0x0200, r28
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1c8:	80 93 00 02 	sts	0x0200, r24

	}	
	
}
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1d0:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1d2:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1d4:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1d6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1d8:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     1da:	8c 91       	ld	r24, X
     1dc:	82 b9       	out	0x02, r24	; 2
     1de:	8d e0       	ldi	r24, 0x0D	; 13
     1e0:	8a 95       	dec	r24
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <set_control_voltage+0x10>
     1e4:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     1e6:	ea ed       	ldi	r30, 0xDA	; 218
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	40 81       	ld	r20, Z
     1ec:	21 e0       	ldi	r18, 0x01	; 1
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	c9 01       	movw	r24, r18
     1f2:	11 96       	adiw	r26, 0x01	; 1
     1f4:	0c 90       	ld	r0, X
     1f6:	11 97       	sbiw	r26, 0x01	; 1
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_control_voltage+0x2e>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <set_control_voltage+0x2a>
     202:	84 2b       	or	r24, r20
     204:	80 83       	st	Z, r24
     206:	82 e4       	ldi	r24, 0x42	; 66
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x38>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x3e>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     20e:	80 81       	ld	r24, Z
     210:	11 96       	adiw	r26, 0x01	; 1
     212:	0c 90       	ld	r0, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	02 c0       	rjmp	.+4      	; 0x21c <set_control_voltage+0x4c>
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <set_control_voltage+0x48>
     220:	20 95       	com	r18
     222:	28 23       	and	r18, r24
     224:	20 83       	st	Z, r18
	
}	
     226:	08 95       	ret

00000228 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     228:	83 b3       	in	r24, 0x13	; 19
     22a:	83 60       	ori	r24, 0x03	; 3
     22c:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     232:	97 b1       	in	r25, 0x07	; 7
     234:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     236:	e9 ed       	ldi	r30, 0xD9	; 217
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8f 60       	ori	r24, 0x0F	; 15
     23e:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     240:	ea ed       	ldi	r30, 0xDA	; 218
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     24a:	84 b3       	in	r24, 0x14	; 20
     24c:	83 60       	ori	r24, 0x03	; 3
     24e:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     250:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     252:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     254:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     256:	a0 9a       	sbi	0x14, 0	; 20
}
     258:	08 95       	ret

0000025a <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     25a:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     25c:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     25e:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     260:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     262:	62 b9       	out	0x02, r22	; 2
     264:	2d e0       	ldi	r18, 0x0D	; 13
     266:	2a 95       	dec	r18
     268:	f1 f7       	brne	.-4      	; 0x266 <set_dac+0xc>
     26a:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     26c:	ea ed       	ldi	r30, 0xDA	; 218
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	40 81       	ld	r20, Z
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	b9 01       	movw	r22, r18
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_dac+0x24>
     27a:	66 0f       	add	r22, r22
     27c:	77 1f       	adc	r23, r23
     27e:	8a 95       	dec	r24
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_dac+0x20>
     282:	cb 01       	movw	r24, r22
     284:	94 2f       	mov	r25, r20
     286:	98 2b       	or	r25, r24
     288:	90 83       	st	Z, r25
     28a:	72 e4       	ldi	r23, 0x42	; 66
     28c:	7a 95       	dec	r23
     28e:	f1 f7       	brne	.-4      	; 0x28c <set_dac+0x32>
     290:	00 c0       	rjmp	.+0      	; 0x292 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     292:	90 81       	ld	r25, Z
     294:	80 95       	com	r24
     296:	89 23       	and	r24, r25
     298:	80 83       	st	Z, r24
	
}
     29a:	08 95       	ret

0000029c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t digit)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	2a 97       	sbiw	r28, 0x0a	; 10
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     2b0:	de 01       	movw	r26, r28
     2b2:	11 96       	adiw	r26, 0x01	; 1
     2b4:	ee e4       	ldi	r30, 0x4E	; 78
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	3a e0       	ldi	r19, 0x0A	; 10
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	31 50       	subi	r19, 0x01	; 1
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2c6:	ea ed       	ldi	r30, 0xDA	; 218
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	30 81       	ld	r19, Z
     2cc:	30 61       	ori	r19, 0x10	; 16
     2ce:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d0:	30 81       	ld	r19, Z
     2d2:	3f 7e       	andi	r19, 0xEF	; 239
     2d4:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     2d6:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2d8:	30 81       	ld	r19, Z
     2da:	30 62       	ori	r19, 0x20	; 32
     2dc:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2de:	30 81       	ld	r19, Z
     2e0:	3f 7d       	andi	r19, 0xDF	; 223
     2e2:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) { //modulo is a bad idea because it is massively time consuming. Maybe a lookup table could be used?
     2e4:	62 30       	cpi	r22, 0x02	; 2
     2e6:	f9 f0       	breq	.+62     	; 0x326 <display_dec+0x8a>
     2e8:	63 30       	cpi	r22, 0x03	; 3
     2ea:	18 f4       	brcc	.+6      	; 0x2f2 <display_dec+0x56>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	a1 f5       	brne	.+104    	; 0x358 <display_dec+0xbc>
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <display_dec+0x70>
     2f2:	64 30       	cpi	r22, 0x04	; 4
     2f4:	29 f1       	breq	.+74     	; 0x340 <display_dec+0xa4>
     2f6:	68 30       	cpi	r22, 0x08	; 8
     2f8:	79 f5       	brne	.+94     	; 0x358 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     2fa:	6a e0       	ldi	r22, 0x0A	; 10
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
     302:	fe 01       	movw	r30, r28
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     30a:	26 c0       	rjmp	.+76     	; 0x358 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     30c:	64 e6       	ldi	r22, 0x64	; 100
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
     314:	6a e0       	ldi	r22, 0x0A	; 10
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
     31c:	fe 01       	movw	r30, r28
     31e:	e6 0f       	add	r30, r22
     320:	f7 1f       	adc	r31, r23
     322:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     324:	19 c0       	rjmp	.+50     	; 0x358 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     326:	68 ee       	ldi	r22, 0xE8	; 232
     328:	73 e0       	ldi	r23, 0x03	; 3
     32a:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
     32e:	64 e6       	ldi	r22, 0x64	; 100
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
     336:	fe 01       	movw	r30, r28
     338:	e6 0f       	add	r30, r22
     33a:	f7 1f       	adc	r31, r23
     33c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     33e:	0c c0       	rjmp	.+24     	; 0x358 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     340:	60 e1       	ldi	r22, 0x10	; 16
     342:	77 e2       	ldi	r23, 0x27	; 39
     344:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
     348:	68 ee       	ldi	r22, 0xE8	; 232
     34a:	73 e0       	ldi	r23, 0x03	; 3
     34c:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
     350:	fe 01       	movw	r30, r28
     352:	e6 0f       	add	r30, r22
     354:	f7 1f       	adc	r31, r23
     356:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     358:	20 95       	com	r18
     35a:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     35c:	ea ed       	ldi	r30, 0xDA	; 218
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     366:	80 81       	ld	r24, Z
     368:	8f 7e       	andi	r24, 0xEF	; 239
     36a:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     36c:	2a 96       	adiw	r28, 0x0a	; 10
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <update_display+0x8>
     386:	00 d0       	rcall	.+0      	; 0x388 <update_display+0xa>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t place = 0;
	
	uint8_t digit[] = {
     38c:	28 e0       	ldi	r18, 0x08	; 8
     38e:	29 83       	std	Y+1, r18	; 0x01
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	2a 83       	std	Y+2, r18	; 0x02
     394:	22 e0       	ldi	r18, 0x02	; 2
     396:	2b 83       	std	Y+3, r18	; 0x03
     398:	24 e0       	ldi	r18, 0x04	; 4
     39a:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	if (type == DEC) {
     39c:	66 23       	and	r22, r22
     39e:	81 f4       	brne	.+32     	; 0x3c0 <update_display+0x42>

		
			
		display_dec(number, digit[place]);
     3a0:	10 91 05 02 	lds	r17, 0x0205
     3a4:	fe 01       	movw	r30, r28
     3a6:	e1 0f       	add	r30, r17
     3a8:	f1 1d       	adc	r31, r1
     3aa:	61 81       	ldd	r22, Z+1	; 0x01
     3ac:	0e 94 4e 01 	call	0x29c	; 0x29c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     3b0:	81 2f       	mov	r24, r17
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	80 93 05 02 	sts	0x0205, r24
     3b8:	13 30       	cpi	r17, 0x03	; 3
     3ba:	11 f4       	brne	.+4      	; 0x3c0 <update_display+0x42>
		{
			place = 0;
     3bc:	10 92 05 02 	sts	0x0205, r1
		
		
	}
	
	
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     3e2:	80 91 c2 02 	lds	r24, 0x02C2
     3e6:	81 50       	subi	r24, 0x01	; 1
     3e8:	87 bd       	out	0x27, r24	; 39
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
     3ea:	85 b1       	in	r24, 0x05	; 5
     3ec:	80 58       	subi	r24, 0x80	; 128
     3ee:	85 b9       	out	0x05, r24	; 5
	if (period_counter == 0) {
     3f0:	80 91 c3 02 	lds	r24, 0x02C3
     3f4:	88 23       	and	r24, r24
     3f6:	a1 f4       	brne	.+40     	; 0x420 <__vector_10+0x50>
		count_finished = FALSE;
     3f8:	10 92 c0 02 	sts	0x02C0, r1
		no_overflow = TRUE;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 ff 01 	sts	0x01FF, r24
		period_counter = 1; //set period counter to 1
     402:	80 93 c3 02 	sts	0x02C3, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     406:	e1 e8       	ldi	r30, 0x81	; 129
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	90 91 c1 02 	lds	r25, 0x02C1
     410:	89 2b       	or	r24, r25
     412:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     414:	ef e6       	ldi	r30, 0x6F	; 111
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	81 60       	ori	r24, 0x01	; 1
     41c:	80 83       	st	Z, r24
     41e:	11 c0       	rjmp	.+34     	; 0x442 <__vector_10+0x72>
		
	} else {
		
		osc_count = TCNT1;		
     420:	e4 e8       	ldi	r30, 0x84	; 132
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	90 93 bf 02 	sts	0x02BF, r25
     42c:	80 93 be 02 	sts	0x02BE, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     430:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 c0 02 	sts	0x02C0, r24
		period_counter = 0;
     43a:	10 92 c3 02 	sts	0x02C3, r1
		TCNT1 = 0; //reset timer/counter 1
     43e:	11 82       	std	Z+1, r1	; 0x01
     440:	10 82       	st	Z, r1
	}
	
	
	
	
}
     442:	ff 91       	pop	r31
     444:	ef 91       	pop	r30
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     45e:	10 92 ff 01 	sts	0x01FF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     46c:	84 2f       	mov	r24, r20
	remove_note(note);
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
	gate_buffer--;
     474:	80 91 07 02 	lds	r24, 0x0207
     478:	81 50       	subi	r24, 0x01	; 1
     47a:	80 93 07 02 	sts	0x0207, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     47e:	88 23       	and	r24, r24
     480:	09 f4       	brne	.+2      	; 0x484 <note_off_event+0x18>
     482:	89 98       	cbi	0x11, 1	; 17
     484:	08 95       	ret

00000486 <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     486:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     488:	40 93 46 02 	sts	0x0246, r20
	if (velocity == 0) {
     48c:	22 23       	and	r18, r18
     48e:	61 f4       	brne	.+24     	; 0x4a8 <note_on_event+0x22>
		remove_note(note);
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
		gate_buffer--;
     496:	80 91 07 02 	lds	r24, 0x0207
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	80 93 07 02 	sts	0x0207, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     4a0:	88 23       	and	r24, r24
     4a2:	69 f4       	brne	.+26     	; 0x4be <note_on_event+0x38>
     4a4:	89 98       	cbi	0x11, 1	; 17
     4a6:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	62 2f       	mov	r22, r18
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	0e 94 93 00 	call	0x126	; 0x126 <new_note>
		gate_buffer++; //increment gate_buffer
     4b2:	80 91 07 02 	lds	r24, 0x0207
     4b6:	8f 5f       	subi	r24, 0xFF	; 255
     4b8:	80 93 07 02 	sts	0x0207, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     4bc:	89 9a       	sbi	0x11, 1	; 17
     4be:	08 95       	ret

000004c0 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     4c0:	87 e2       	ldi	r24, 0x27	; 39
     4c2:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     4c6:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     4ca:	88 e9       	ldi	r24, 0x98	; 152
     4cc:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     4d0:	08 95       	ret

000004d2 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	2f 93       	push	r18
     4de:	3f 93       	push	r19
     4e0:	4f 93       	push	r20
     4e2:	5f 93       	push	r21
     4e4:	6f 93       	push	r22
     4e6:	7f 93       	push	r23
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	af 93       	push	r26
     4ee:	bf 93       	push	r27
     4f0:	ef 93       	push	r30
     4f2:	ff 93       	push	r31
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	0f 92       	push	r0
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
     4fe:	85 b1       	in	r24, 0x05	; 5
     500:	80 58       	subi	r24, 0x80	; 128
     502:	85 b9       	out	0x05, r24	; 5
	uint8_t inByte = UDR0;
     504:	80 91 c6 00 	lds	r24, 0x00C6
     508:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     50a:	88 ec       	ldi	r24, 0xC8	; 200
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	ae 01       	movw	r20, r28
     512:	4f 5f       	subi	r20, 0xFF	; 255
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	bf 91       	pop	r27
     526:	af 91       	pop	r26
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	7f 91       	pop	r23
     52e:	6f 91       	pop	r22
     530:	5f 91       	pop	r21
     532:	4f 91       	pop	r20
     534:	3f 91       	pop	r19
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     542:	80 e8       	ldi	r24, 0x80	; 128
     544:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     546:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     548:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     54a:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     54c:	9a 9a       	sbi	0x13, 2	; 19
	//PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
	PORTG |= (1<<TUNE_SELECT);
     54e:	a2 9a       	sbi	0x14, 2	; 20
	
	setup_spi(); 
     550:	0e 94 a5 04 	call	0x94a	; 0x94a <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     554:	a9 ed       	ldi	r26, 0xD9	; 217
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	8c 91       	ld	r24, X
     55a:	80 6c       	ori	r24, 0xC0	; 192
     55c:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     55e:	ea ed       	ldi	r30, 0xDA	; 218
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	80 81       	ld	r24, Z
     564:	80 6c       	ori	r24, 0xC0	; 192
     566:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     568:	81 b1       	in	r24, 0x01	; 1
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     56e:	92 b1       	in	r25, 0x02	; 2
     570:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     572:	8c 91       	ld	r24, X
     574:	80 63       	ori	r24, 0x30	; 48
     576:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     578:	80 81       	ld	r24, Z
     57a:	8f 7c       	andi	r24, 0xCF	; 207
     57c:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     57e:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     580:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     584:	0e 94 14 01 	call	0x228	; 0x228 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     588:	c8 ec       	ldi	r28, 0xC8	; 200
     58a:	d2 e0       	ldi	r29, 0x02	; 2
     58c:	ce 01       	movw	r24, r28
     58e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     592:	ce 01       	movw	r24, r28
     594:	63 e4       	ldi	r22, 0x43	; 67
     596:	72 e0       	ldi	r23, 0x02	; 2
     598:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     59c:	ce 01       	movw	r24, r28
     59e:	66 e3       	ldi	r22, 0x36	; 54
     5a0:	72 e0       	ldi	r23, 0x02	; 2
     5a2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     5a6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     5aa:	0e 94 ca 04 	call	0x994	; 0x994 <update_spi>
	//TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
	//TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms
	

		
	sei(); //enable global interrupts
     5ae:	78 94       	sei
	
	////set initial pitch offset CVs
	vco1_init_cv = set_vco_init_cv(VCO1, 24079);
     5b0:	8f e0       	ldi	r24, 0x0F	; 15
     5b2:	6f e0       	ldi	r22, 0x0F	; 15
     5b4:	7e e5       	ldi	r23, 0x5E	; 94
     5b6:	0e 94 ee 06 	call	0xddc	; 0xddc <set_vco_init_cv>
     5ba:	90 93 bc 02 	sts	0x02BC, r25
     5be:	80 93 bb 02 	sts	0x02BB, r24
	vco2_init_cv = set_vco_init_cv(VCO2, 24079);
     5c2:	80 ef       	ldi	r24, 0xF0	; 240
     5c4:	6f e0       	ldi	r22, 0x0F	; 15
     5c6:	7e e5       	ldi	r23, 0x5E	; 94
     5c8:	0e 94 ee 06 	call	0xddc	; 0xddc <set_vco_init_cv>
     5cc:	90 93 ba 02 	sts	0x02BA, r25
     5d0:	80 93 b9 02 	sts	0x02B9, r24
	//value_to_display = compare_match_counter;//vco1_init_cv;
	
	//set initial switch states
	switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
     5d4:	81 e4       	ldi	r24, 0x41	; 65
     5d6:	80 93 c4 02 	sts	0x02C4, r24
	patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
     5da:	82 e2       	ldi	r24, 0x22	; 34
     5dc:	80 93 52 02 	sts	0x0252, r24
	

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     5e0:	8e 01       	movw	r16, r28
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     5e2:	0f 2e       	mov	r0, r31
     5e4:	f6 ec       	ldi	r31, 0xC6	; 198
     5e6:	ef 2e       	mov	r14, r31
     5e8:	f2 e0       	ldi	r31, 0x02	; 2
     5ea:	ff 2e       	mov	r15, r31
     5ec:	f0 2d       	mov	r31, r0
	patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     5ee:	c8 01       	movw	r24, r16
     5f0:	0e 94 c9 10 	call	0x2192	; 0x2192 <midi_device_process>
	
		update_display(value_to_display, DEC);
     5f4:	80 91 96 01 	lds	r24, 0x0196
     5f8:	90 91 97 01 	lds	r25, 0x0197
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
			
		scan_pots_and_update_control_voltages();
     602:	0e 94 19 03 	call	0x632	; 0x632 <scan_pots_and_update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     606:	80 91 06 02 	lds	r24, 0x0206
     60a:	98 2f       	mov	r25, r24
     60c:	9f 5f       	subi	r25, 0xFF	; 255
     60e:	90 93 06 02 	sts	0x0206, r25
     612:	85 30       	cpi	r24, 0x05	; 5
     614:	61 f7       	brne	.-40     	; 0x5ee <main+0xac>
		{
			switch_timer = 0;
     616:	10 92 06 02 	sts	0x0206, r1
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     61a:	f7 01       	movw	r30, r14
     61c:	c0 81       	ld	r28, Z
     61e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <read_switch_port>
     622:	8c 27       	eor	r24, r28
     624:	f7 01       	movw	r30, r14
     626:	80 83       	st	Z, r24
			update_spi();
     628:	0e 94 ca 04 	call	0x994	; 0x994 <update_spi>
			refresh_synth();
     62c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <refresh_synth>
     630:	de cf       	rjmp	.-68     	; 0x5ee <main+0xac>

00000632 <scan_pots_and_update_control_voltages>:
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     632:	2f 92       	push	r2
     634:	3f 92       	push	r3
     636:	4f 92       	push	r4
     638:	5f 92       	push	r5
     63a:	6f 92       	push	r6
     63c:	7f 92       	push	r7
     63e:	8f 92       	push	r8
     640:	9f 92       	push	r9
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	00 d0       	rcall	.+0      	; 0x658 <scan_pots_and_update_control_voltages+0x26>
     658:	00 d0       	rcall	.+0      	; 0x65a <scan_pots_and_update_control_voltages+0x28>
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	value_to_display = note;	
     65e:	06 e2       	ldi	r16, 0x26	; 38
     660:	12 e0       	ldi	r17, 0x02	; 2
     662:	0f 2e       	mov	r0, r31
     664:	f6 e7       	ldi	r31, 0x76	; 118
     666:	ef 2e       	mov	r14, r31
     668:	f1 e0       	ldi	r31, 0x01	; 1
     66a:	ff 2e       	mov	r15, r31
     66c:	f0 2d       	mov	r31, r0
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     66e:	cc 24       	eor	r12, r12
     670:	dd 24       	eor	r13, r13
     672:	c3 94       	inc	r12
     674:	22 24       	eor	r2, r2
     676:	33 24       	eor	r3, r3
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     678:	0f 2e       	mov	r0, r31
     67a:	fa e3       	ldi	r31, 0x3A	; 58
     67c:	8f 2e       	mov	r8, r31
     67e:	f1 e0       	ldi	r31, 0x01	; 1
     680:	9f 2e       	mov	r9, r31
     682:	f0 2d       	mov	r31, r0
				break;
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     684:	aa 24       	eor	r10, r10
     686:	bb 24       	eor	r11, r11
     688:	68 94       	set
     68a:	b1 f8       	bld	r11, 1
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     68c:	0f 2e       	mov	r0, r31
     68e:	f8 e3       	ldi	r31, 0x38	; 56
     690:	6f 2e       	mov	r6, r31
     692:	f1 e0       	ldi	r31, 0x01	; 1
     694:	7f 2e       	mov	r7, r31
     696:	f0 2d       	mov	r31, r0
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     698:	0f 2e       	mov	r0, r31
     69a:	f2 e4       	ldi	r31, 0x42	; 66
     69c:	4f 2e       	mov	r4, r31
     69e:	f1 e0       	ldi	r31, 0x01	; 1
     6a0:	5f 2e       	mov	r5, r31
     6a2:	f0 2d       	mov	r31, r0
     6a4:	0a c0       	rjmp	.+20     	; 0x6ba <scan_pots_and_update_control_voltages+0x88>
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	value_to_display = note;	
     6a6:	08 94       	sec
     6a8:	21 1c       	adc	r2, r1
     6aa:	31 1c       	adc	r3, r1
     6ac:	08 94       	sec
     6ae:	c1 1c       	adc	r12, r1
     6b0:	d1 1c       	adc	r13, r1
     6b2:	22 e0       	ldi	r18, 0x02	; 2
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	e2 0e       	add	r14, r18
     6b8:	f3 1e       	adc	r15, r19

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{

		adc_value = read_pot(POTMUX_EN0, i);
     6ba:	86 e0       	ldi	r24, 0x06	; 6
     6bc:	62 2d       	mov	r22, r2
     6be:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     6c2:	90 93 4a 02 	sts	0x024A, r25
     6c6:	80 93 49 02 	sts	0x0249, r24
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
     6ca:	f8 01       	movw	r30, r16
     6cc:	60 81       	ld	r22, Z
     6ce:	71 81       	ldd	r23, Z+1	; 0x01
     6d0:	86 1b       	sub	r24, r22
     6d2:	97 0b       	sbc	r25, r23
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
     6d4:	95 95       	asr	r25
     6d6:	87 95       	ror	r24
     6d8:	95 95       	asr	r25
     6da:	87 95       	ror	r24
     6dc:	9c 01       	movw	r18, r24
     6de:	26 0f       	add	r18, r22
     6e0:	37 1f       	adc	r19, r23
     6e2:	21 93       	st	Z+, r18
     6e4:	31 93       	st	Z+, r19
     6e6:	8f 01       	movw	r16, r30
		int fine_offset = 0;
		
		switch (i)
     6e8:	f8 e0       	ldi	r31, 0x08	; 8
     6ea:	2f 16       	cp	r2, r31
     6ec:	31 04       	cpc	r3, r1
     6ee:	91 f0       	breq	.+36     	; 0x714 <scan_pots_and_update_control_voltages+0xe2>
     6f0:	89 e0       	ldi	r24, 0x09	; 9
     6f2:	28 16       	cp	r2, r24
     6f4:	31 04       	cpc	r3, r1
     6f6:	2c f4       	brge	.+10     	; 0x702 <scan_pots_and_update_control_voltages+0xd0>
     6f8:	94 e0       	ldi	r25, 0x04	; 4
     6fa:	29 16       	cp	r2, r25
     6fc:	31 04       	cpc	r3, r1
     6fe:	c1 f5       	brne	.+112    	; 0x770 <scan_pots_and_update_control_voltages+0x13e>
     700:	2c c0       	rjmp	.+88     	; 0x75a <scan_pots_and_update_control_voltages+0x128>
     702:	e9 e0       	ldi	r30, 0x09	; 9
     704:	2e 16       	cp	r2, r30
     706:	31 04       	cpc	r3, r1
     708:	b9 f0       	breq	.+46     	; 0x738 <scan_pots_and_update_control_voltages+0x106>
     70a:	fb e0       	ldi	r31, 0x0B	; 11
     70c:	2f 16       	cp	r2, r31
     70e:	31 04       	cpc	r3, r1
     710:	79 f5       	brne	.+94     	; 0x770 <scan_pots_and_update_control_voltages+0x13e>
     712:	3a c0       	rjmp	.+116    	; 0x788 <scan_pots_and_update_control_voltages+0x156>
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
     714:	60 91 b9 02 	lds	r22, 0x02B9
     718:	70 91 ba 02 	lds	r23, 0x02BA
     71c:	60 50       	subi	r22, 0x00	; 0
     71e:	7e 4f       	sbci	r23, 0xFE	; 254
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     720:	80 91 47 02 	lds	r24, 0x0247
     724:	90 91 48 02 	lds	r25, 0x0248
     728:	68 0f       	add	r22, r24
     72a:	79 1f       	adc	r23, r25
     72c:	62 1b       	sub	r22, r18
     72e:	73 0b       	sbc	r23, r19
     730:	c4 01       	movw	r24, r8
     732:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     736:	b7 cf       	rjmp	.-146    	; 0x6a6 <scan_pots_and_update_control_voltages+0x74>
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     738:	b5 01       	movw	r22, r10
     73a:	62 1b       	sub	r22, r18
     73c:	73 0b       	sbc	r23, r19
     73e:	70 93 48 02 	sts	0x0248, r23
     742:	60 93 47 02 	sts	0x0247, r22
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     746:	80 91 bb 02 	lds	r24, 0x02BB
     74a:	90 91 bc 02 	lds	r25, 0x02BC
     74e:	68 0f       	add	r22, r24
     750:	79 1f       	adc	r23, r25
     752:	c3 01       	movw	r24, r6
     754:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     758:	a6 cf       	rjmp	.-180    	; 0x6a6 <scan_pots_and_update_control_voltages+0x74>
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     75a:	b9 01       	movw	r22, r18
     75c:	66 0f       	add	r22, r22
     75e:	77 1f       	adc	r23, r23
     760:	66 0f       	add	r22, r22
     762:	77 1f       	adc	r23, r23
     764:	66 0f       	add	r22, r22
     766:	77 1f       	adc	r23, r23
     768:	c2 01       	movw	r24, r4
     76a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     76e:	9b cf       	rjmp	.-202    	; 0x6a6 <scan_pots_and_update_control_voltages+0x74>
			
			default: //set control voltage full-scale
				set_control_voltage(pot_decoder_0[i], pot_group_0[i] << 4);
     770:	b9 01       	movw	r22, r18
     772:	62 95       	swap	r22
     774:	72 95       	swap	r23
     776:	70 7f       	andi	r23, 0xF0	; 240
     778:	76 27       	eor	r23, r22
     77a:	60 7f       	andi	r22, 0xF0	; 240
     77c:	76 27       	eor	r23, r22
     77e:	f7 01       	movw	r30, r14
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	}; 
	
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     788:	f0 e1       	ldi	r31, 0x10	; 16
     78a:	cf 16       	cp	r12, r31
     78c:	d1 04       	cpc	r13, r1
     78e:	0c f4       	brge	.+2      	; 0x792 <scan_pots_and_update_control_voltages+0x160>
     790:	8a cf       	rjmp	.-236    	; 0x6a6 <scan_pots_and_update_control_voltages+0x74>
			
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
     792:	0e 94 90 00 	call	0x120	; 0x120 <get_current_note>
     796:	68 2e       	mov	r6, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     798:	27 e0       	ldi	r18, 0x07	; 7
     79a:	28 17       	cp	r18, r24
     79c:	18 f0       	brcs	.+6      	; 0x7a4 <scan_pots_and_update_control_voltages+0x172>
     79e:	66 24       	eor	r6, r6
     7a0:	68 94       	set
     7a2:	63 f8       	bld	r6, 3
	value_to_display = note;	
     7a4:	86 2d       	mov	r24, r6
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	90 93 97 01 	sts	0x0197, r25
     7ac:	80 93 96 01 	sts	0x0196, r24
     7b0:	08 e0       	ldi	r16, 0x08	; 8
     7b2:	12 e0       	ldi	r17, 0x02	; 2
     7b4:	0f 2e       	mov	r0, r31
     7b6:	f8 e5       	ldi	r31, 0x58	; 88
     7b8:	af 2e       	mov	r10, r31
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	bf 2e       	mov	r11, r31
     7be:	f0 2d       	mov	r31, r0
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	8b 83       	std	Y+3, r24	; 0x03
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
		
		switch(i) 
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f8 ef       	ldi	r31, 0xF8	; 248
     7cc:	7f 2e       	mov	r7, r31
     7ce:	f0 2d       	mov	r31, r0
     7d0:	76 0c       	add	r7, r6
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f5 e5       	ldi	r31, 0x55	; 85
     7d6:	2f 2e       	mov	r2, r31
     7d8:	f2 e0       	ldi	r31, 0x02	; 2
     7da:	3f 2e       	mov	r3, r31
     7dc:	f0 2d       	mov	r31, r0
				uint16_t divided_pitch_cv = ((pot_group_1[3]>>2)/255.0)*interpolated_pitch_cv; //reduce pot resolution to 8 bits for faster integer division. pot_group[3] is key_track pot value. Need to look into this further to see how much time it takes
     7de:	0f 2e       	mov	r0, r31
     7e0:	fe e0       	ldi	r31, 0x0E	; 14
     7e2:	4f 2e       	mov	r4, r31
     7e4:	f2 e0       	ldi	r31, 0x02	; 2
     7e6:	5f 2e       	mov	r5, r31
     7e8:	f0 2d       	mov	r31, r0
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     7ea:	f2 01       	movw	r30, r4
     7ec:	32 97       	sbiw	r30, 0x02	; 2
     7ee:	fa 83       	std	Y+2, r31	; 0x02
     7f0:	e9 83       	std	Y+1, r30	; 0x01
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <scan_pots_and_update_control_voltages+0x1d6>
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	value_to_display = note;	
     7f4:	2b 81       	ldd	r18, Y+3	; 0x03
     7f6:	3c 81       	ldd	r19, Y+4	; 0x04
     7f8:	2f 5f       	subi	r18, 0xFF	; 255
     7fa:	3f 4f       	sbci	r19, 0xFF	; 255
     7fc:	3c 83       	std	Y+4, r19	; 0x04
     7fe:	2b 83       	std	Y+3, r18	; 0x03
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	a8 0e       	add	r10, r24
     806:	b9 1e       	adc	r11, r25
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     808:	87 e0       	ldi	r24, 0x07	; 7
     80a:	6b 81       	ldd	r22, Y+3	; 0x03
     80c:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     810:	90 93 4a 02 	sts	0x024A, r25
     814:	80 93 49 02 	sts	0x0249, r24
		int adc_change = adc_value - pot_group_1[i];
     818:	f8 01       	movw	r30, r16
     81a:	20 81       	ld	r18, Z
     81c:	31 81       	ldd	r19, Z+1	; 0x01
     81e:	82 1b       	sub	r24, r18
     820:	93 0b       	sbc	r25, r19
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
     822:	95 95       	asr	r25
     824:	87 95       	ror	r24
     826:	95 95       	asr	r25
     828:	87 95       	ror	r24
     82a:	82 0f       	add	r24, r18
     82c:	93 1f       	adc	r25, r19
     82e:	81 93       	st	Z+, r24
     830:	91 93       	st	Z+, r25
     832:	8f 01       	movw	r16, r30
		
		switch(i) 
     834:	2b 81       	ldd	r18, Y+3	; 0x03
     836:	3c 81       	ldd	r19, Y+4	; 0x04
     838:	23 30       	cpi	r18, 0x03	; 3
     83a:	31 05       	cpc	r19, r1
     83c:	e9 f5       	brne	.+122    	; 0x8b8 <scan_pots_and_update_control_voltages+0x286>
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     83e:	87 2d       	mov	r24, r7
     840:	b1 01       	movw	r22, r2
     842:	0e 94 47 0b 	call	0x168e	; 0x168e <interpolate_pitch_cv>
     846:	4c 01       	movw	r8, r24
				uint16_t divided_pitch_cv = ((pot_group_1[3]>>2)/255.0)*interpolated_pitch_cv; //reduce pot resolution to 8 bits for faster integer division. pot_group[3] is key_track pot value. Need to look into this further to see how much time it takes
     848:	f2 01       	movw	r30, r4
     84a:	60 81       	ld	r22, Z
     84c:	71 81       	ldd	r23, Z+1	; 0x01
     84e:	76 95       	lsr	r23
     850:	67 95       	ror	r22
     852:	76 95       	lsr	r23
     854:	67 95       	ror	r22
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 37 13 	call	0x266e	; 0x266e <__floatunsisf>
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	4f e7       	ldi	r20, 0x7F	; 127
     864:	53 e4       	ldi	r21, 0x43	; 67
     866:	0e 94 a3 12 	call	0x2546	; 0x2546 <__divsf3>
     86a:	6b 01       	movw	r12, r22
     86c:	7c 01       	movw	r14, r24
     86e:	b4 01       	movw	r22, r8
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 37 13 	call	0x266e	; 0x266e <__floatunsisf>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	c7 01       	movw	r24, r14
     87e:	b6 01       	movw	r22, r12
     880:	0e 94 c5 13 	call	0x278a	; 0x278a <__mulsf3>
     884:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
     888:	cb 01       	movw	r24, r22
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     88a:	e9 81       	ldd	r30, Y+1	; 0x01
     88c:	fa 81       	ldd	r31, Y+2	; 0x02
     88e:	60 81       	ld	r22, Z
     890:	71 81       	ldd	r23, Z+1	; 0x01
     892:	62 95       	swap	r22
     894:	72 95       	swap	r23
     896:	70 7f       	andi	r23, 0xF0	; 240
     898:	76 27       	eor	r23, r22
     89a:	60 7f       	andi	r22, 0xF0	; 240
     89c:	76 27       	eor	r23, r22
				if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX;
				set_control_voltage(&cutoff_cv, filter_cutoff_cv);
     89e:	68 0f       	add	r22, r24
     8a0:	79 1f       	adc	r23, r25
     8a2:	f0 e4       	ldi	r31, 0x40	; 64
     8a4:	60 30       	cpi	r22, 0x00	; 0
     8a6:	7f 07       	cpc	r23, r31
     8a8:	10 f0       	brcs	.+4      	; 0x8ae <scan_pots_and_update_control_voltages+0x27c>
     8aa:	6f ef       	ldi	r22, 0xFF	; 255
     8ac:	7f e3       	ldi	r23, 0x3F	; 63
     8ae:	88 e2       	ldi	r24, 0x28	; 40
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
     8b6:	9e cf       	rjmp	.-196    	; 0x7f4 <scan_pots_and_update_control_voltages+0x1c2>
				//set_control_voltage(&cutoff_cv, pot_group_1[i] <<4);
				break;
			
			default:
				set_control_voltage(pot_decoder_1[i], pot_group_1[i] <<4);
     8b8:	bc 01       	movw	r22, r24
     8ba:	62 95       	swap	r22
     8bc:	72 95       	swap	r23
     8be:	70 7f       	andi	r23, 0xF0	; 240
     8c0:	76 27       	eor	r23, r22
     8c2:	60 7f       	andi	r22, 0xF0	; 240
     8c4:	76 27       	eor	r23, r22
     8c6:	f5 01       	movw	r30, r10
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	value_to_display = note;	
	
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     8d0:	2b 81       	ldd	r18, Y+3	; 0x03
     8d2:	3c 81       	ldd	r19, Y+4	; 0x04
     8d4:	2f 30       	cpi	r18, 0x0F	; 15
     8d6:	31 05       	cpc	r19, r1
     8d8:	0c f4       	brge	.+2      	; 0x8dc <scan_pots_and_update_control_voltages+0x2aa>
     8da:	8c cf       	rjmp	.-232    	; 0x7f4 <scan_pots_and_update_control_voltages+0x1c2>
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose 
     8dc:	86 2d       	mov	r24, r6
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	6f e0       	ldi	r22, 0x0F	; 15
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	0e 94 1c 05 	call	0xa38	; 0xa38 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     8e8:	67 e9       	ldi	r22, 0x97	; 151
     8ea:	72 e0       	ldi	r23, 0x02	; 2
     8ec:	0e 94 47 0b 	call	0x168e	; 0x168e <interpolate_pitch_cv>
     8f0:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     8f2:	8c e4       	ldi	r24, 0x4C	; 76
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     8fa:	86 2d       	mov	r24, r6
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	60 ef       	ldi	r22, 0xF0	; 240
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	0e 94 1c 05 	call	0xa38	; 0xa38 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     906:	65 e7       	ldi	r22, 0x75	; 117
     908:	72 e0       	ldi	r23, 0x02	; 2
     90a:	0e 94 47 0b 	call	0x168e	; 0x168e <interpolate_pitch_cv>
     90e:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv); 
     910:	8a e4       	ldi	r24, 0x4A	; 74
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     918:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     91a:	a1 9a       	sbi	0x14, 1	; 20
	
	
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	df 90       	pop	r13
     932:	cf 90       	pop	r12
     934:	bf 90       	pop	r11
     936:	af 90       	pop	r10
     938:	9f 90       	pop	r9
     93a:	8f 90       	pop	r8
     93c:	7f 90       	pop	r7
     93e:	6f 90       	pop	r6
     940:	5f 90       	pop	r5
     942:	4f 90       	pop	r4
     944:	3f 90       	pop	r3
     946:	2f 90       	pop	r2
     948:	08 95       	ret

0000094a <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     94a:	84 b1       	in	r24, 0x04	; 4
     94c:	87 62       	ori	r24, 0x27	; 39
     94e:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     950:	ec ed       	ldi	r30, 0xDC	; 220
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	8c 65       	ori	r24, 0x5C	; 92
     958:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     95a:	85 b1       	in	r24, 0x05	; 5
     95c:	89 7d       	andi	r24, 0xD9	; 217
     95e:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     960:	ed ed       	ldi	r30, 0xDD	; 221
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	83 7f       	andi	r24, 0xF3	; 243
     968:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     96a:	80 e5       	ldi	r24, 0x50	; 80
     96c:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     96e:	80 81       	ld	r24, Z
     970:	87 7f       	andi	r24, 0xF7	; 247
     972:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     974:	80 81       	ld	r24, Z
     976:	87 7f       	andi	r24, 0xF7	; 247
     978:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     97a:	80 81       	ld	r24, Z
     97c:	88 60       	ori	r24, 0x08	; 8
     97e:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     980:	80 81       	ld	r24, Z
     982:	8f 7e       	andi	r24, 0xEF	; 239
     984:	80 83       	st	Z, r24
	
}
     986:	08 95       	ret

00000988 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     988:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     98a:	0d b4       	in	r0, 0x2d	; 45
     98c:	07 fe       	sbrs	r0, 7
     98e:	fd cf       	rjmp	.-6      	; 0x98a <spi_shift_byte+0x2>
	return SPDR;
     990:	8e b5       	in	r24, 0x2e	; 46
	
}
     992:	08 95       	ret

00000994 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     994:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(patch.byte_5);
     996:	80 91 53 02 	lds	r24, 0x0253
     99a:	0e 94 c4 04 	call	0x988	; 0x988 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     99e:	90 91 4c 02 	lds	r25, 0x024C
     9a2:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     9a4:	98 27       	eor	r25, r24
     9a6:	90 93 4c 02 	sts	0x024C, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     9aa:	98 23       	and	r25, r24
     9ac:	90 93 4b 02 	sts	0x024B, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     9b0:	80 91 c4 02 	lds	r24, 0x02C4
     9b4:	98 27       	eor	r25, r24
     9b6:	90 93 c4 02 	sts	0x02C4, r25
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     9ba:	80 91 52 02 	lds	r24, 0x0252
     9be:	0e 94 c4 04 	call	0x988	; 0x988 <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     9c2:	90 91 4e 02 	lds	r25, 0x024E
     9c6:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     9c8:	98 27       	eor	r25, r24
     9ca:	90 93 4e 02 	sts	0x024E, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     9ce:	98 23       	and	r25, r24
     9d0:	90 93 4d 02 	sts	0x024D, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     9d4:	80 91 c5 02 	lds	r24, 0x02C5
     9d8:	98 27       	eor	r25, r24
     9da:	90 93 c5 02 	sts	0x02C5, r25
							
			//SHIFT 3th BYTE
			spi_shift_byte(patch.byte_3);
     9de:	80 91 51 02 	lds	r24, 0x0251
     9e2:	0e 94 c4 04 	call	0x988	; 0x988 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(0);
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0e 94 c4 04 	call	0x988	; 0x988 <spi_shift_byte>
			
			//SHIFT 1st BYTE			
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     9ec:	90 91 c6 02 	lds	r25, 0x02C6
     9f0:	89 2f       	mov	r24, r25
     9f2:	82 95       	swap	r24
     9f4:	8f 70       	andi	r24, 0x0F	; 15
     9f6:	87 95       	ror	r24
     9f8:	88 27       	eor	r24, r24
     9fa:	87 95       	ror	r24

			//SHIFT 2th BYTE
			spi_shift_byte(0);
			
			//SHIFT 1st BYTE			
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     9fc:	96 95       	lsr	r25
     9fe:	96 95       	lsr	r25
     a00:	96 95       	lsr	r25
     a02:	91 70       	andi	r25, 0x01	; 1
     a04:	89 2b       	or	r24, r25
     a06:	20 91 c5 02 	lds	r18, 0x02C5
     a0a:	22 95       	swap	r18
     a0c:	26 95       	lsr	r18
     a0e:	27 70       	andi	r18, 0x07	; 7
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	21 70       	andi	r18, 0x01	; 1
     a14:	30 70       	andi	r19, 0x00	; 0
     a16:	22 0f       	add	r18, r18
     a18:	33 1f       	adc	r19, r19
     a1a:	22 0f       	add	r18, r18
     a1c:	33 1f       	adc	r19, r19
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV; 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     a1e:	82 2b       	or	r24, r18
     a20:	0e 94 c4 04 	call	0x988	; 0x988 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     a24:	ed ed       	ldi	r30, 0xDD	; 221
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	87 7f       	andi	r24, 0xF7	; 247
     a2c:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     a2e:	80 81       	ld	r24, Z
     a30:	88 60       	ori	r24, 0x08	; 8
     a32:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     a34:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     a36:	08 95       	ret

00000a38 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
     a38:	90 91 54 02 	lds	r25, 0x0254
     a3c:	97 70       	andi	r25, 0x07	; 7
	if (vco == VCO2) n = octave_index.vco2;
     a3e:	60 3f       	cpi	r22, 0xF0	; 240
     a40:	31 f4       	brne	.+12     	; 0xa4e <transpose_note+0x16>
     a42:	90 91 54 02 	lds	r25, 0x0254
     a46:	96 95       	lsr	r25
     a48:	96 95       	lsr	r25
     a4a:	96 95       	lsr	r25
     a4c:	97 70       	andi	r25, 0x07	; 7

	note = (n*12) + note; //calculate MIDI note after octave addition
     a4e:	29 2f       	mov	r18, r25
     a50:	22 0f       	add	r18, r18
     a52:	92 0f       	add	r25, r18
     a54:	99 0f       	add	r25, r25
     a56:	99 0f       	add	r25, r25
     a58:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
     a5a:	89 38       	cpi	r24, 0x89	; 137
     a5c:	08 f0       	brcs	.+2      	; 0xa60 <transpose_note+0x28>
     a5e:	88 e8       	ldi	r24, 0x88	; 136
	
}
     a60:	08 95       	ret

00000a62 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
     a62:	80 91 c4 02 	lds	r24, 0x02C4
     a66:	98 2f       	mov	r25, r24
     a68:	96 95       	lsr	r25
     a6a:	96 95       	lsr	r25
     a6c:	96 95       	lsr	r25
     a6e:	90 ff       	sbrs	r25, 0
     a70:	14 c0       	rjmp	.+40     	; 0xa9a <update_octave_range+0x38>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
     a72:	20 91 54 02 	lds	r18, 0x0254
     a76:	92 2f       	mov	r25, r18
     a78:	9f 5f       	subi	r25, 0xFF	; 255
     a7a:	97 70       	andi	r25, 0x07	; 7
     a7c:	28 7f       	andi	r18, 0xF8	; 248
     a7e:	29 2b       	or	r18, r25
     a80:	20 93 54 02 	sts	0x0254, r18
     a84:	95 30       	cpi	r25, 0x05	; 5
     a86:	29 f4       	brne	.+10     	; 0xa92 <update_octave_range+0x30>
     a88:	92 2f       	mov	r25, r18
     a8a:	98 7f       	andi	r25, 0xF8	; 248
     a8c:	94 60       	ori	r25, 0x04	; 4
     a8e:	90 93 54 02 	sts	0x0254, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
     a92:	98 e0       	ldi	r25, 0x08	; 8
     a94:	89 27       	eor	r24, r25
     a96:	80 93 c4 02 	sts	0x02C4, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
     a9a:	80 91 c5 02 	lds	r24, 0x02C5
     a9e:	98 2f       	mov	r25, r24
     aa0:	96 95       	lsr	r25
     aa2:	96 95       	lsr	r25
     aa4:	96 95       	lsr	r25
     aa6:	90 ff       	sbrs	r25, 0
     aa8:	11 c0       	rjmp	.+34     	; 0xacc <update_octave_range+0x6a>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
     aaa:	90 91 54 02 	lds	r25, 0x0254
     aae:	97 70       	andi	r25, 0x07	; 7
     ab0:	49 f0       	breq	.+18     	; 0xac4 <update_octave_range+0x62>
     ab2:	90 91 54 02 	lds	r25, 0x0254
     ab6:	29 2f       	mov	r18, r25
     ab8:	29 5f       	subi	r18, 0xF9	; 249
     aba:	27 70       	andi	r18, 0x07	; 7
     abc:	98 7f       	andi	r25, 0xF8	; 248
     abe:	92 2b       	or	r25, r18
     ac0:	90 93 54 02 	sts	0x0254, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
     ac4:	98 e0       	ldi	r25, 0x08	; 8
     ac6:	89 27       	eor	r24, r25
     ac8:	80 93 c5 02 	sts	0x02C5, r24

	}
	
	patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
     acc:	80 91 54 02 	lds	r24, 0x0254
     ad0:	87 70       	andi	r24, 0x07	; 7
     ad2:	ed e9       	ldi	r30, 0x9D	; 157
     ad4:	f1 e0       	ldi	r31, 0x01	; 1
     ad6:	e8 0f       	add	r30, r24
     ad8:	f1 1d       	adc	r31, r1
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	00 80       	ld	r0, Z
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <update_octave_range+0x84>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	0a 94       	dec	r0
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <update_octave_range+0x80>
     aea:	58 2f       	mov	r21, r24
     aec:	80 93 52 02 	sts	0x0252, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
     af0:	90 91 c5 02 	lds	r25, 0x02C5
     af4:	29 2f       	mov	r18, r25
     af6:	26 95       	lsr	r18
     af8:	26 95       	lsr	r18
     afa:	20 ff       	sbrs	r18, 0
     afc:	1a c0       	rjmp	.+52     	; 0xb32 <update_octave_range+0xd0>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
     afe:	80 91 54 02 	lds	r24, 0x0254
     b02:	28 2f       	mov	r18, r24
     b04:	26 95       	lsr	r18
     b06:	26 95       	lsr	r18
     b08:	26 95       	lsr	r18
     b0a:	2f 5f       	subi	r18, 0xFF	; 255
     b0c:	27 70       	andi	r18, 0x07	; 7
     b0e:	32 2f       	mov	r19, r18
     b10:	33 0f       	add	r19, r19
     b12:	33 0f       	add	r19, r19
     b14:	33 0f       	add	r19, r19
     b16:	87 7c       	andi	r24, 0xC7	; 199
     b18:	83 2b       	or	r24, r19
     b1a:	80 93 54 02 	sts	0x0254, r24
     b1e:	25 30       	cpi	r18, 0x05	; 5
     b20:	21 f4       	brne	.+8      	; 0xb2a <update_octave_range+0xc8>
     b22:	87 7c       	andi	r24, 0xC7	; 199
     b24:	80 62       	ori	r24, 0x20	; 32
     b26:	80 93 54 02 	sts	0x0254, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
     b2a:	84 e0       	ldi	r24, 0x04	; 4
     b2c:	98 27       	eor	r25, r24
     b2e:	90 93 c5 02 	sts	0x02C5, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
     b32:	90 91 c5 02 	lds	r25, 0x02C5
     b36:	29 2f       	mov	r18, r25
     b38:	26 95       	lsr	r18
     b3a:	20 ff       	sbrs	r18, 0
     b3c:	17 c0       	rjmp	.+46     	; 0xb6c <update_octave_range+0x10a>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
     b3e:	80 91 54 02 	lds	r24, 0x0254
     b42:	88 73       	andi	r24, 0x38	; 56
     b44:	79 f0       	breq	.+30     	; 0xb64 <update_octave_range+0x102>
     b46:	80 91 54 02 	lds	r24, 0x0254
     b4a:	28 2f       	mov	r18, r24
     b4c:	26 95       	lsr	r18
     b4e:	26 95       	lsr	r18
     b50:	26 95       	lsr	r18
     b52:	29 5f       	subi	r18, 0xF9	; 249
     b54:	27 70       	andi	r18, 0x07	; 7
     b56:	22 0f       	add	r18, r18
     b58:	22 0f       	add	r18, r18
     b5a:	22 0f       	add	r18, r18
     b5c:	87 7c       	andi	r24, 0xC7	; 199
     b5e:	82 2b       	or	r24, r18
     b60:	80 93 54 02 	sts	0x0254, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	98 27       	eor	r25, r24
     b68:	90 93 c5 02 	sts	0x02C5, r25
		
	}
			
	patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
     b6c:	40 91 51 02 	lds	r20, 0x0251
     b70:	4c 7f       	andi	r20, 0xFC	; 252
     b72:	40 93 51 02 	sts	0x0251, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
     b76:	90 91 54 02 	lds	r25, 0x0254
     b7a:	96 95       	lsr	r25
     b7c:	96 95       	lsr	r25
     b7e:	96 95       	lsr	r25
     b80:	97 70       	andi	r25, 0x07	; 7
     b82:	89 2f       	mov	r24, r25
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	83 30       	cpi	r24, 0x03	; 3
     b88:	91 05       	cpc	r25, r1
     b8a:	84 f0       	brlt	.+32     	; 0xbac <update_octave_range+0x14a>

						
		patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
     b8c:	fc 01       	movw	r30, r24
     b8e:	e8 56       	subi	r30, 0x68	; 104
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	21 e0       	ldi	r18, 0x01	; 1
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	c9 01       	movw	r24, r18
     b98:	00 80       	ld	r0, Z
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <update_octave_range+0x13e>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	0a 94       	dec	r0
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <update_octave_range+0x13a>
     ba4:	84 2b       	or	r24, r20
     ba6:	80 93 51 02 	sts	0x0251, r24
     baa:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
     bac:	fc 01       	movw	r30, r24
     bae:	e8 56       	subi	r30, 0x68	; 104
     bb0:	fe 4f       	sbci	r31, 0xFE	; 254
     bb2:	21 e0       	ldi	r18, 0x01	; 1
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	c9 01       	movw	r24, r18
     bb8:	00 80       	ld	r0, Z
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <update_octave_range+0x15e>
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	0a 94       	dec	r0
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <update_octave_range+0x15a>
     bc4:	85 2b       	or	r24, r21
     bc6:	80 93 52 02 	sts	0x0252, r24
     bca:	08 95       	ret

00000bcc <refresh_synth>:
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     bcc:	90 91 c4 02 	lds	r25, 0x02C4
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
     bd0:	80 91 c6 02 	lds	r24, 0x02C6
     bd4:	86 95       	lsr	r24
     bd6:	86 95       	lsr	r24
     bd8:	68 2f       	mov	r22, r24
     bda:	67 95       	ror	r22
     bdc:	66 27       	eor	r22, r22
     bde:	67 95       	ror	r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     be0:	29 2f       	mov	r18, r25
     be2:	21 70       	andi	r18, 0x01	; 1
     be4:	26 2b       	or	r18, r22
     be6:	69 2f       	mov	r22, r25
     be8:	66 1f       	adc	r22, r22
     bea:	66 27       	eor	r22, r22
     bec:	66 1f       	adc	r22, r22
     bee:	66 0f       	add	r22, r22
     bf0:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
     bf2:	29 2f       	mov	r18, r25
     bf4:	26 95       	lsr	r18
     bf6:	26 95       	lsr	r18
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	21 70       	andi	r18, 0x01	; 1
     bfc:	30 70       	andi	r19, 0x00	; 0
     bfe:	d9 01       	movw	r26, r18
     c00:	aa 0f       	add	r26, r26
     c02:	bb 1f       	adc	r27, r27
     c04:	aa 0f       	add	r26, r26
     c06:	bb 1f       	adc	r27, r27
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c08:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
     c0a:	a9 2f       	mov	r26, r25
     c0c:	a6 95       	lsr	r26
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	a1 70       	andi	r26, 0x01	; 1
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	fd 01       	movw	r30, r26
     c16:	ee 0f       	add	r30, r30
     c18:	ff 1f       	adc	r31, r31
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c22:	a6 2f       	mov	r26, r22
     c24:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
     c26:	e9 2f       	mov	r30, r25
     c28:	e2 95       	swap	r30
     c2a:	ef 70       	andi	r30, 0x0F	; 15
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	e1 70       	andi	r30, 0x01	; 1
     c30:	f0 70       	andi	r31, 0x00	; 0
     c32:	bf 01       	movw	r22, r30
     c34:	62 95       	swap	r22
     c36:	72 95       	swap	r23
     c38:	70 7f       	andi	r23, 0xF0	; 240
     c3a:	76 27       	eor	r23, r22
     c3c:	60 7f       	andi	r22, 0xF0	; 240
     c3e:	76 27       	eor	r23, r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c40:	ea 2f       	mov	r30, r26
     c42:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
     c44:	69 2f       	mov	r22, r25
     c46:	62 95       	swap	r22
     c48:	66 95       	lsr	r22
     c4a:	67 70       	andi	r22, 0x07	; 7
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	61 70       	andi	r22, 0x01	; 1
     c50:	70 70       	andi	r23, 0x00	; 0
     c52:	ab 01       	movw	r20, r22
     c54:	44 0f       	add	r20, r20
     c56:	55 1f       	adc	r21, r21
     c58:	42 95       	swap	r20
     c5a:	52 95       	swap	r21
     c5c:	50 7f       	andi	r21, 0xF0	; 240
     c5e:	54 27       	eor	r21, r20
     c60:	40 7f       	andi	r20, 0xF0	; 240
     c62:	54 27       	eor	r21, r20
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c64:	6e 2f       	mov	r22, r30
     c66:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
     c68:	49 2f       	mov	r20, r25
     c6a:	42 95       	swap	r20
     c6c:	46 95       	lsr	r20
     c6e:	46 95       	lsr	r20
     c70:	43 70       	andi	r20, 0x03	; 3
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	41 70       	andi	r20, 0x01	; 1
     c76:	50 70       	andi	r21, 0x00	; 0
     c78:	9a 01       	movw	r18, r20
     c7a:	00 24       	eor	r0, r0
     c7c:	36 95       	lsr	r19
     c7e:	27 95       	ror	r18
     c80:	07 94       	ror	r0
     c82:	36 95       	lsr	r19
     c84:	27 95       	ror	r18
     c86:	07 94       	ror	r0
     c88:	32 2f       	mov	r19, r18
     c8a:	20 2d       	mov	r18, r0
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c8c:	26 2b       	or	r18, r22
     c8e:	20 93 53 02 	sts	0x0253, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
     c92:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
     c94:	81 95       	neg	r24
     c96:	89 27       	eor	r24, r25
     c98:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
     c9a:	89 27       	eor	r24, r25
     c9c:	0e 94 80 0b 	call	0x1700	; 0x1700 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     ca0:	ed ed       	ldi	r30, 0xDD	; 221
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	90 81       	ld	r25, Z
     ca6:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
     ca8:	80 91 c6 02 	lds	r24, 0x02C6
     cac:	86 95       	lsr	r24
     cae:	86 95       	lsr	r24
     cb0:	86 95       	lsr	r24
     cb2:	81 70       	andi	r24, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     cb4:	81 95       	neg	r24
     cb6:	82 27       	eor	r24, r18
     cb8:	80 71       	andi	r24, 0x10	; 16
     cba:	89 27       	eor	r24, r25
     cbc:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
     cbe:	0e 94 31 05 	call	0xa62	; 0xa62 <update_octave_range>
				
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) //temporary tune button hack
     cc2:	80 91 c6 02 	lds	r24, 0x02C6
     cc6:	98 2f       	mov	r25, r24
     cc8:	92 95       	swap	r25
     cca:	9f 70       	andi	r25, 0x0F	; 15
     ccc:	90 ff       	sbrs	r25, 0
     cce:	12 c0       	rjmp	.+36     	; 0xcf4 <refresh_synth+0x128>
		{ 
				
		switch_states.byte2 ^= (1<<PROG_WRITE_SW); //toggle read switch state
     cd0:	90 e1       	ldi	r25, 0x10	; 16
     cd2:	89 27       	eor	r24, r25
     cd4:	80 93 c6 02 	sts	0x02C6, r24

		tune_8ths(VCO2);
     cd8:	80 ef       	ldi	r24, 0xF0	; 240
     cda:	0e 94 30 08 	call	0x1060	; 0x1060 <tune_8ths>
		tune_8ths(VCO1);
     cde:	8f e0       	ldi	r24, 0x0F	; 15
     ce0:	0e 94 30 08 	call	0x1060	; 0x1060 <tune_8ths>
		tune_filter();
     ce4:	0e 94 b3 09 	call	0x1366	; 0x1366 <tune_filter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ce8:	8f e4       	ldi	r24, 0x4F	; 79
     cea:	93 ec       	ldi	r25, 0xC3	; 195
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <refresh_synth+0x120>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <refresh_synth+0x126>
     cf2:	00 00       	nop
     cf4:	08 95       	ret

00000cf6 <initialize_voice_for_tuning>:
uint16_t vco2_pitch_table[17] = {0};
uint16_t filter_pitch_table[16] = {0};	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     cf6:	80 e3       	ldi	r24, 0x30	; 48
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     d02:	82 e4       	ldi	r24, 0x42	; 66
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     d0e:	84 e4       	ldi	r24, 0x44	; 68
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     d26:	84 e3       	ldi	r24, 0x34	; 52
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     d32:	8e e3       	ldi	r24, 0x3E	; 62
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     d3e:	80 e4       	ldi	r24, 0x40	; 64
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     d4a:	82 e2       	ldi	r24, 0x22	; 34
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     d56:	8c e2       	ldi	r24, 0x2C	; 44
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     d62:	84 e2       	ldi	r24, 0x24	; 36
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     d6e:	86 e2       	ldi	r24, 0x26	; 38
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     d7a:	88 e2       	ldi	r24, 0x28	; 40
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	6f ef       	ldi	r22, 0xFF	; 255
     d80:	7f e3       	ldi	r23, 0x3F	; 63
     d82:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     d86:	8a e2       	ldi	r24, 0x2A	; 42
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     d92:	82 e3       	ldi	r24, 0x32	; 50
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     d9e:	8c e1       	ldi	r24, 0x1C	; 28
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     daa:	88 e1       	ldi	r24, 0x18	; 24
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     db6:	84 e1       	ldi	r24, 0x14	; 20
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	6f ef       	ldi	r22, 0xFF	; 255
     dbc:	7f e3       	ldi	r23, 0x3F	; 63
     dbe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     dc2:	80 e1       	ldi	r24, 0x10	; 16
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     dce:	80 e2       	ldi	r24, 0x20	; 32
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
}	
     dda:	08 95       	ret

00000ddc <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { //should add extra argument here to set reference count for base frequency
     ddc:	2f 92       	push	r2
     dde:	3f 92       	push	r3
     de0:	4f 92       	push	r4
     de2:	5f 92       	push	r5
     de4:	6f 92       	push	r6
     de6:	7f 92       	push	r7
     de8:	8f 92       	push	r8
     dea:	9f 92       	push	r9
     dec:	af 92       	push	r10
     dee:	bf 92       	push	r11
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	2a 97       	sbiw	r28, 0x0a	; 10
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	08 2f       	mov	r16, r24
     e12:	78 87       	std	Y+8, r23	; 0x08
     e14:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
     e16:	80 91 c1 02 	lds	r24, 0x02C1
     e1a:	83 60       	ori	r24, 0x03	; 3
     e1c:	80 93 c1 02 	sts	0x02C1, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
     e20:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
     e24:	10 92 c0 02 	sts	0x02C0, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
     e28:	0f 30       	cpi	r16, 0x0F	; 15
     e2a:	c1 f4       	brne	.+48     	; 0xe5c <set_vco_init_cv+0x80>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     e2c:	0f 2e       	mov	r0, r31
     e2e:	fc e4       	ldi	r31, 0x4C	; 76
     e30:	4f 2e       	mov	r4, r31
     e32:	f1 e0       	ldi	r31, 0x01	; 1
     e34:	5f 2e       	mov	r5, r31
     e36:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     e38:	0f 2e       	mov	r0, r31
     e3a:	fc e3       	ldi	r31, 0x3C	; 60
     e3c:	2f 2e       	mov	r2, r31
     e3e:	f1 e0       	ldi	r31, 0x01	; 1
     e40:	3f 2e       	mov	r3, r31
     e42:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     e44:	26 e4       	ldi	r18, 0x46	; 70
     e46:	31 e0       	ldi	r19, 0x01	; 1
     e48:	3a 83       	std	Y+2, r19	; 0x02
     e4a:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     e4c:	0f 2e       	mov	r0, r31
     e4e:	f8 e3       	ldi	r31, 0x38	; 56
     e50:	8f 2e       	mov	r8, r31
     e52:	f1 e0       	ldi	r31, 0x01	; 1
     e54:	9f 2e       	mov	r9, r31
     e56:	f0 2d       	mov	r31, r0

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	17 c0       	rjmp	.+46     	; 0xe8a <set_vco_init_cv+0xae>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     e5c:	0f 2e       	mov	r0, r31
     e5e:	fa e4       	ldi	r31, 0x4A	; 74
     e60:	4f 2e       	mov	r4, r31
     e62:	f1 e0       	ldi	r31, 0x01	; 1
     e64:	5f 2e       	mov	r5, r31
     e66:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     e68:	0f 2e       	mov	r0, r31
     e6a:	fe e2       	ldi	r31, 0x2E	; 46
     e6c:	2f 2e       	mov	r2, r31
     e6e:	f1 e0       	ldi	r31, 0x01	; 1
     e70:	3f 2e       	mov	r3, r31
     e72:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     e74:	88 e4       	ldi	r24, 0x48	; 72
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	89 83       	std	Y+1, r24	; 0x01
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     e7c:	0f 2e       	mov	r0, r31
     e7e:	fa e3       	ldi	r31, 0x3A	; 58
     e80:	8f 2e       	mov	r8, r31
     e82:	f1 e0       	ldi	r31, 0x01	; 1
     e84:	9f 2e       	mov	r9, r31
     e86:	f0 2d       	mov	r31, r0
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
     e88:	80 e4       	ldi	r24, 0x40	; 64
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
     e8a:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     e8c:	ed ed       	ldi	r30, 0xDD	; 221
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     e96:	80 81       	ld	r24, Z
     e98:	8f 7b       	andi	r24, 0xBF	; 191
     e9a:	80 83       	st	Z, r24
	DATA_BUS = 0;
     e9c:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
     e9e:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
     ea0:	84 b5       	in	r24, 0x24	; 36
     ea2:	8f 60       	ori	r24, 0x0F	; 15
     ea4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
     eaa:	ee e6       	ldi	r30, 0x6E	; 110
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	90 81       	ld	r25, Z
     eb0:	92 60       	ori	r25, 0x02	; 2
     eb2:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
     eb4:	80 93 c2 02 	sts	0x02C2, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     eb8:	ed e0       	ldi	r30, 0x0D	; 13
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	fc 83       	std	Y+4, r31	; 0x04
     ebe:	eb 83       	std	Y+3, r30	; 0x03
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
     ec0:	80 2f       	mov	r24, r16
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	8c 01       	movw	r16, r24
     ec6:	0f 5f       	subi	r16, 0xFF	; 255
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
     eca:	0f 2e       	mov	r0, r31
     ecc:	f0 e3       	ldi	r31, 0x30	; 48
     ece:	ef 2e       	mov	r14, r31
     ed0:	f1 e0       	ldi	r31, 0x01	; 1
     ed2:	ff 2e       	mov	r15, r31
     ed4:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
     ed6:	0f 2e       	mov	r0, r31
     ed8:	f8 e2       	ldi	r31, 0x28	; 40
     eda:	cf 2e       	mov	r12, r31
     edc:	f1 e0       	ldi	r31, 0x01	; 1
     ede:	df 2e       	mov	r13, r31
     ee0:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
     ee2:	0f 2e       	mov	r0, r31
     ee4:	f4 e1       	ldi	r31, 0x14	; 20
     ee6:	af 2e       	mov	r10, r31
     ee8:	f1 e0       	ldi	r31, 0x01	; 1
     eea:	bf 2e       	mov	r11, r31
     eec:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     eee:	0f 2e       	mov	r0, r31
     ef0:	f6 e1       	ldi	r31, 0x16	; 22
     ef2:	6f 2e       	mov	r6, r31
     ef4:	f1 e0       	ldi	r31, 0x01	; 1
     ef6:	7f 2e       	mov	r7, r31
     ef8:	f0 2d       	mov	r31, r0
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3a 87       	std	Y+10, r19	; 0x0a
     f00:	29 87       	std	Y+9, r18	; 0x09
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0b 80       	ldd	r0, Y+3	; 0x03
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <set_vco_init_cv+0x132>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <set_vco_init_cv+0x12e>
     f12:	9e 83       	std	Y+6, r25	; 0x06
     f14:	8d 83       	std	Y+5, r24	; 0x05
     f16:	e9 85       	ldd	r30, Y+9	; 0x09
     f18:	fa 85       	ldd	r31, Y+10	; 0x0a
     f1a:	e8 2b       	or	r30, r24
     f1c:	f9 2b       	or	r31, r25
     f1e:	fa 87       	std	Y+10, r31	; 0x0a
     f20:	e9 87       	std	Y+9, r30	; 0x09
		
		set_control_voltage(vco_init_cv, init_cv);
     f22:	c4 01       	movw	r24, r8
     f24:	bf 01       	movw	r22, r30
     f26:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		
		count_finished = FALSE;
     f2a:	10 92 c0 02 	sts	0x02C0, r1
		period_counter = 0;
     f2e:	10 92 c3 02 	sts	0x02C3, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     f32:	80 91 c0 02 	lds	r24, 0x02C0
     f36:	88 23       	and	r24, r24
     f38:	89 f5       	brne	.+98     	; 0xf9c <set_vco_init_cv+0x1c0>
			
			update_display(vco + 1, DEC);
     f3a:	c8 01       	movw	r24, r16
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
     f42:	c4 01       	movw	r24, r8
     f44:	69 85       	ldd	r22, Y+9	; 0x09
     f46:	7a 85       	ldd	r23, Y+10	; 0x0a
     f48:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
     f4c:	c1 01       	movw	r24, r2
     f4e:	6f ef       	ldi	r22, 0xFF	; 255
     f50:	7f e3       	ldi	r23, 0x3F	; 63
     f52:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
     f56:	c7 01       	movw	r24, r14
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
     f60:	c6 01       	movw	r24, r12
     f62:	6f ef       	ldi	r22, 0xFF	; 255
     f64:	7f e3       	ldi	r23, 0x3F	; 63
     f66:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
     f6a:	c5 01       	movw	r24, r10
     f6c:	6f ef       	ldi	r22, 0xFF	; 255
     f6e:	7f e3       	ldi	r23, 0x3F	; 63
     f70:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     f74:	c3 01       	movw	r24, r6
     f76:	6f ef       	ldi	r22, 0xFF	; 255
     f78:	7f e3       	ldi	r23, 0x3F	; 63
     f7a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	6f ef       	ldi	r22, 0xFF	; 255
     f84:	7f e3       	ldi	r23, 0x3F	; 63
     f86:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
     f8a:	c2 01       	movw	r24, r4
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		count_finished = FALSE;
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     f94:	80 91 c0 02 	lds	r24, 0x02C0
     f98:	88 23       	and	r24, r24
     f9a:	79 f2       	breq	.-98     	; 0xf3a <set_vco_init_cv+0x15e>
			set_control_voltage(vco_pitch_cv, 0);	
			
		}
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
     f9c:	80 91 be 02 	lds	r24, 0x02BE
     fa0:	90 91 bf 02 	lds	r25, 0x02BF
     fa4:	ef 81       	ldd	r30, Y+7	; 0x07
     fa6:	f8 85       	ldd	r31, Y+8	; 0x08
     fa8:	e8 17       	cp	r30, r24
     faa:	f9 07       	cpc	r31, r25
     fac:	20 f0       	brcs	.+8      	; 0xfb6 <set_vco_init_cv+0x1da>
     fae:	80 91 ff 01 	lds	r24, 0x01FF
     fb2:	88 23       	and	r24, r24
     fb4:	51 f4       	brne	.+20     	; 0xfca <set_vco_init_cv+0x1ee>
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	9e 81       	ldd	r25, Y+6	; 0x06
     fba:	80 95       	com	r24
     fbc:	90 95       	com	r25
     fbe:	29 85       	ldd	r18, Y+9	; 0x09
     fc0:	3a 85       	ldd	r19, Y+10	; 0x0a
     fc2:	28 23       	and	r18, r24
     fc4:	39 23       	and	r19, r25
     fc6:	3a 87       	std	Y+10, r19	; 0x0a
     fc8:	29 87       	std	Y+9, r18	; 0x09
		no_overflow = TRUE;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	80 93 ff 01 	sts	0x01FF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	9c 83       	std	Y+4, r25	; 0x04
     fd8:	8b 83       	std	Y+3, r24	; 0x03
     fda:	ef ef       	ldi	r30, 0xFF	; 255
     fdc:	8f 3f       	cpi	r24, 0xFF	; 255
     fde:	9e 07       	cpc	r25, r30
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <set_vco_init_cv+0x208>
     fe2:	8f cf       	rjmp	.-226    	; 0xf02 <set_vco_init_cv+0x126>
     fe4:	29 85       	ldd	r18, Y+9	; 0x09
     fe6:	3a 85       	ldd	r19, Y+10	; 0x0a
     fe8:	3e 83       	std	Y+6, r19	; 0x06
     fea:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
     fec:	80 e1       	ldi	r24, 0x10	; 16
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
     ff8:	82 e1       	ldi	r24, 0x12	; 18
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    1004:	88 e2       	ldi	r24, 0x28	; 40
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    1010:	80 e3       	ldi	r24, 0x30	; 48
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    101c:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    101e:	ee e6       	ldi	r30, 0x6E	; 110
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8d 7f       	andi	r24, 0xFD	; 253
    1026:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    1028:	14 bc       	out	0x24, r1	; 36
	
	return init_cv;
	
}
    102a:	8d 81       	ldd	r24, Y+5	; 0x05
    102c:	9e 81       	ldd	r25, Y+6	; 0x06
    102e:	2a 96       	adiw	r28, 0x0a	; 10
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	bf 90       	pop	r11
    104c:	af 90       	pop	r10
    104e:	9f 90       	pop	r9
    1050:	8f 90       	pop	r8
    1052:	7f 90       	pop	r7
    1054:	6f 90       	pop	r6
    1056:	5f 90       	pop	r5
    1058:	4f 90       	pop	r4
    105a:	3f 90       	pop	r3
    105c:	2f 90       	pop	r2
    105e:	08 95       	ret

00001060 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1060:	2f 92       	push	r2
    1062:	3f 92       	push	r3
    1064:	4f 92       	push	r4
    1066:	5f 92       	push	r5
    1068:	6f 92       	push	r6
    106a:	7f 92       	push	r7
    106c:	8f 92       	push	r8
    106e:	9f 92       	push	r9
    1070:	af 92       	push	r10
    1072:	bf 92       	push	r11
    1074:	cf 92       	push	r12
    1076:	df 92       	push	r13
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	c0 54       	subi	r28, 0x40	; 64
    108a:	d0 40       	sbci	r29, 0x00	; 0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    1098:	de 01       	movw	r26, r28
    109a:	11 96       	adiw	r26, 0x01	; 1
    109c:	e2 ea       	ldi	r30, 0xA2	; 162
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	80 e3       	ldi	r24, 0x30	; 48
    10a2:	01 90       	ld	r0, Z+
    10a4:	0d 92       	st	X+, r0
    10a6:	81 50       	subi	r24, 0x01	; 1
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    10aa:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    10ae:	0f 30       	cpi	r16, 0x0F	; 15
    10b0:	f1 f4       	brne	.+60     	; 0x10ee <tune_8ths+0x8e>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    10b2:	20 90 bb 02 	lds	r2, 0x02BB
    10b6:	30 90 bc 02 	lds	r3, 0x02BC
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    10ba:	0f 2e       	mov	r0, r31
    10bc:	fc e4       	ldi	r31, 0x4C	; 76
    10be:	af 2e       	mov	r10, r31
    10c0:	f1 e0       	ldi	r31, 0x01	; 1
    10c2:	bf 2e       	mov	r11, r31
    10c4:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    10c6:	26 e4       	ldi	r18, 0x46	; 70
    10c8:	31 e0       	ldi	r19, 0x01	; 1
    10ca:	3a ab       	sts	0x5a, r19
    10cc:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    10ce:	0f 2e       	mov	r0, r31
    10d0:	f8 e3       	ldi	r31, 0x38	; 56
    10d2:	4f 2e       	mov	r4, r31
    10d4:	f1 e0       	ldi	r31, 0x01	; 1
    10d6:	5f 2e       	mov	r5, r31
    10d8:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    10da:	07 e9       	ldi	r16, 0x97	; 151
    10dc:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
    10de:	0f 2e       	mov	r0, r31
    10e0:	fa e0       	ldi	r31, 0x0A	; 10
    10e2:	cf 2e       	mov	r12, r31
    10e4:	f0 2d       	mov	r31, r0
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    10e6:	ee 24       	eor	r14, r14
    10e8:	68 94       	set
    10ea:	e1 f8       	bld	r14, 1
    10ec:	1d c0       	rjmp	.+58     	; 0x1128 <__stack+0x29>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    10ee:	20 90 b9 02 	lds	r2, 0x02B9
    10f2:	30 90 ba 02 	lds	r3, 0x02BA
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    10f6:	0f 2e       	mov	r0, r31
    10f8:	fa e4       	ldi	r31, 0x4A	; 74
    10fa:	af 2e       	mov	r10, r31
    10fc:	f1 e0       	ldi	r31, 0x01	; 1
    10fe:	bf 2e       	mov	r11, r31
    1100:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    1102:	48 e4       	ldi	r20, 0x48	; 72
    1104:	51 e0       	ldi	r21, 0x01	; 1
    1106:	5a ab       	sts	0x5a, r21
    1108:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    110a:	0f 2e       	mov	r0, r31
    110c:	fa e3       	ldi	r31, 0x3A	; 58
    110e:	4f 2e       	mov	r4, r31
    1110:	f1 e0       	ldi	r31, 0x01	; 1
    1112:	5f 2e       	mov	r5, r31
    1114:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    1116:	05 e7       	ldi	r16, 0x75	; 117
    1118:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
    111a:	0f 2e       	mov	r0, r31
    111c:	f4 e1       	ldi	r31, 0x14	; 20
    111e:	cf 2e       	mov	r12, r31
    1120:	f0 2d       	mov	r31, r0
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    1122:	ee 24       	eor	r14, r14
    1124:	68 94       	set
    1126:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    1128:	c2 01       	movw	r24, r4
    112a:	b1 01       	movw	r22, r2
    112c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    1130:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1132:	ed ed       	ldi	r30, 0xDD	; 221
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	80 64       	ori	r24, 0x40	; 64
    113a:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    113c:	80 81       	ld	r24, Z
    113e:	8f 7b       	andi	r24, 0xBF	; 191
    1140:	80 83       	st	Z, r24
		DATA_BUS = 0;
    1142:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    1144:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	80 93 c2 02 	sts	0x02C2, r24
		
		compare_match_counter = 0;	
    114c:	10 92 bd 02 	sts	0x02BD, r1
				period_counter = 0;
			
				
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1150:	8c 2d       	mov	r24, r12
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	24 e6       	ldi	r18, 0x64	; 100
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	82 9f       	mul	r24, r18
    115a:	f0 01       	movw	r30, r0
    115c:	83 9f       	mul	r24, r19
    115e:	f0 0d       	add	r31, r0
    1160:	92 9f       	mul	r25, r18
    1162:	f0 0d       	add	r31, r0
    1164:	11 24       	eor	r1, r1
    1166:	fc ab       	sts	0x5c, r31
    1168:	eb ab       	sts	0x5b, r30
    116a:	9e 01       	movw	r18, r28
    116c:	2f 5f       	subi	r18, 0xFF	; 255
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	3c af       	sts	0x7c, r19
    1172:	2b af       	sts	0x7b, r18
	
}



void tune_8ths(uint8_t vco) {
    1174:	a8 01       	movw	r20, r16
    1176:	4e 5f       	subi	r20, 0xFE	; 254
    1178:	5f 4f       	sbci	r21, 0xFF	; 255
    117a:	21 96       	adiw	r28, 0x01	; 1
    117c:	5f af       	sts	0x7f, r21
    117e:	4e af       	sts	0x7e, r20
    1180:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1182:	1e ae       	sts	0xbe, r17
    1184:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1186:	0f 2e       	mov	r0, r31
    1188:	f0 e3       	ldi	r31, 0x30	; 48
    118a:	ef 2e       	mov	r14, r31
    118c:	f1 e0       	ldi	r31, 0x01	; 1
    118e:	ff 2e       	mov	r15, r31
    1190:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    1192:	0f 2e       	mov	r0, r31
    1194:	f8 e2       	ldi	r31, 0x28	; 40
    1196:	cf 2e       	mov	r12, r31
    1198:	f1 e0       	ldi	r31, 0x01	; 1
    119a:	df 2e       	mov	r13, r31
    119c:	f0 2d       	mov	r31, r0
					set_control_voltage(&sustain_1_cv, MAX);
    119e:	0f 2e       	mov	r0, r31
    11a0:	f4 e1       	ldi	r31, 0x14	; 20
    11a2:	8f 2e       	mov	r8, r31
    11a4:	f1 e0       	ldi	r31, 0x01	; 1
    11a6:	9f 2e       	mov	r9, r31
    11a8:	f0 2d       	mov	r31, r0
					set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    11aa:	0f 2e       	mov	r0, r31
    11ac:	fc e1       	ldi	r31, 0x1C	; 28
    11ae:	6f 2e       	mov	r6, r31
    11b0:	f1 e0       	ldi	r31, 0x01	; 1
    11b2:	7f 2e       	mov	r7, r31
    11b4:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    11b6:	ab ad       	sts	0x6b, r26
    11b8:	bc ad       	sts	0x6c, r27
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    11ba:	8c 91       	ld	r24, X
    11bc:	80 93 c2 02 	sts	0x02C2, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    11c0:	84 b5       	in	r24, 0x24	; 36
    11c2:	8f 60       	ori	r24, 0x0F	; 15
    11c4:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    11c6:	51 e0       	ldi	r21, 0x01	; 1
    11c8:	57 bd       	out	0x27, r21	; 39
			TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    11ca:	ee e6       	ldi	r30, 0x6E	; 110
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	80 83       	st	Z, r24
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    11d4:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    11d6:	8d ad       	sts	0x6d, r24
    11d8:	9e ad       	sts	0x6e, r25
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	24 f4       	brge	.+8      	; 0x11e8 <__stack+0xe9>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	80 93 c1 02 	sts	0x02C1, r24
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <__stack+0xef>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	80 93 c1 02 	sts	0x02C1, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    11ee:	11 96       	adiw	r26, 0x01	; 1
    11f0:	ed 91       	ld	r30, X+
    11f2:	fc 91       	ld	r31, X
    11f4:	12 97       	sbiw	r26, 0x02	; 2
    11f6:	fa af       	sts	0x7a, r31
    11f8:	e9 af       	sts	0x79, r30
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    11fa:	2d e0       	ldi	r18, 0x0D	; 13
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	3e ab       	sts	0x5e, r19
    1200:	2d ab       	sts	0x5d, r18
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    1202:	00 e0       	ldi	r16, 0x00	; 0
    1204:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	0d a8       	sts	0x8d, r16
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <__stack+0x113>
    120e:	44 0f       	add	r20, r20
    1210:	55 1f       	adc	r21, r21
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <__stack+0x10f>
    1216:	58 af       	sts	0x78, r21
    1218:	4f ab       	sts	0x5f, r20
    121a:	04 2b       	or	r16, r20
    121c:	15 2b       	or	r17, r21

				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    121e:	c5 01       	movw	r24, r10
    1220:	b8 01       	movw	r22, r16
    1222:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				count_finished = FALSE;
    1226:	10 92 c0 02 	sts	0x02C0, r1
				period_counter = 0;
    122a:	10 92 c3 02 	sts	0x02C3, r1
			
				
				while (count_finished == FALSE) {
    122e:	80 91 c0 02 	lds	r24, 0x02C0
    1232:	88 23       	and	r24, r24
    1234:	81 f5       	brne	.+96     	; 0x1296 <__stack+0x197>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1236:	80 91 c2 02 	lds	r24, 0x02C2
    123a:	eb a9       	sts	0x4b, r30
    123c:	fc a9       	sts	0x4c, r31
    123e:	e8 0f       	add	r30, r24
    1240:	f1 1d       	adc	r31, r1
    1242:	cf 01       	movw	r24, r30
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
					//value_to_display = TCNT0;
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    124a:	c2 01       	movw	r24, r4
    124c:	b1 01       	movw	r22, r2
    124e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1252:	c5 01       	movw	r24, r10
    1254:	b8 01       	movw	r22, r16
    1256:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    125a:	c7 01       	movw	r24, r14
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    1264:	c6 01       	movw	r24, r12
    1266:	6f ef       	ldi	r22, 0xFF	; 255
    1268:	7f e3       	ldi	r23, 0x3F	; 63
    126a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&sustain_1_cv, MAX);
    126e:	c4 01       	movw	r24, r8
    1270:	6f ef       	ldi	r22, 0xFF	; 255
    1272:	7f e3       	ldi	r23, 0x3F	; 63
    1274:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    1278:	c3 01       	movw	r24, r6
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					//set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
					set_control_voltage(vco_mix_cv, MAX);
    1282:	89 a9       	sts	0x49, r24
    1284:	9a a9       	sts	0x4a, r25
    1286:	6f ef       	ldi	r22, 0xFF	; 255
    1288:	7f e3       	ldi	r23, 0x3F	; 63
    128a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
				count_finished = FALSE;
				period_counter = 0;
			
				
				while (count_finished == FALSE) {
    128e:	80 91 c0 02 	lds	r24, 0x02C0
    1292:	88 23       	and	r24, r24
    1294:	81 f2       	breq	.-96     	; 0x1236 <__stack+0x137>
			
			
				}							
				
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    1296:	80 91 be 02 	lds	r24, 0x02BE
    129a:	90 91 bf 02 	lds	r25, 0x02BF
    129e:	29 ad       	sts	0x69, r18
    12a0:	3a ad       	sts	0x6a, r19
    12a2:	28 17       	cp	r18, r24
    12a4:	39 07       	cpc	r19, r25
    12a6:	50 f0       	brcs	.+20     	; 0x12bc <__stack+0x1bd>
    12a8:	80 91 ff 01 	lds	r24, 0x01FF
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	31 f4       	brne	.+12     	; 0x12bc <__stack+0x1bd>
    12b0:	8f a9       	sts	0x4f, r24
    12b2:	98 ad       	sts	0x68, r25
    12b4:	80 95       	com	r24
    12b6:	90 95       	com	r25
    12b8:	08 23       	and	r16, r24
    12ba:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    12bc:	80 91 be 02 	lds	r24, 0x02BE
    12c0:	90 91 bf 02 	lds	r25, 0x02BF
    12c4:	49 ad       	sts	0x69, r20
    12c6:	5a ad       	sts	0x6a, r21
    12c8:	84 17       	cp	r24, r20
    12ca:	95 07       	cpc	r25, r21
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <__stack+0x1d7>
    12ce:	80 91 ff 01 	lds	r24, 0x01FF
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	69 f0       	breq	.+26     	; 0x12f0 <__stack+0x1f1>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    12d6:	51 e0       	ldi	r21, 0x01	; 1
    12d8:	50 93 ff 01 	sts	0x01FF, r21
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    12dc:	8d a9       	sts	0x4d, r24
    12de:	9e a9       	sts	0x4e, r25
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9e ab       	sts	0x5e, r25
    12e4:	8d ab       	sts	0x5d, r24
    12e6:	ef ef       	ldi	r30, 0xFF	; 255
    12e8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ea:	9e 07       	cpc	r25, r30
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <__stack+0x1f1>
    12ee:	8b cf       	rjmp	.-234    	; 0x1206 <__stack+0x107>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    12f0:	21 96       	adiw	r28, 0x01	; 1
    12f2:	ee ad       	sts	0x6e, r30
    12f4:	ff ad       	sts	0x6f, r31
    12f6:	21 97       	sbiw	r28, 0x01	; 1
    12f8:	01 93       	st	Z+, r16
    12fa:	11 93       	st	Z+, r17
    12fc:	21 96       	adiw	r28, 0x01	; 1
    12fe:	ff af       	sts	0x7f, r31
    1300:	ee af       	sts	0x7e, r30
    1302:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    1304:	ee e6       	ldi	r30, 0x6E	; 110
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8d 7f       	andi	r24, 0xFD	; 253
    130c:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    130e:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1310:	2d ad       	sts	0x6d, r18
    1312:	3e ad       	sts	0x6e, r19
    1314:	2f 5f       	subi	r18, 0xFF	; 255
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
    1318:	3e af       	sts	0x7e, r19
    131a:	2d af       	sts	0x7d, r18
    131c:	4b ad       	sts	0x6b, r20
    131e:	5c ad       	sts	0x6c, r21
    1320:	4d 5f       	subi	r20, 0xFD	; 253
    1322:	5f 4f       	sbci	r21, 0xFF	; 255
    1324:	5c af       	sts	0x7c, r21
    1326:	4b af       	sts	0x7b, r20
    1328:	20 31       	cpi	r18, 0x10	; 16
    132a:	31 05       	cpc	r19, r1
    132c:	09 f0       	breq	.+2      	; 0x1330 <__stack+0x231>
    132e:	43 cf       	rjmp	.-378    	; 0x11b6 <__stack+0xb7>
			TCCR0A = 0; //turn off timer0
		}
	

	
		PORTF &= ~(1<<GATE); //turn gate off
    1330:	89 98       	cbi	0x11, 1	; 17
		
		//TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
	
	
	}
    1332:	c0 5c       	subi	r28, 0xC0	; 192
    1334:	df 4f       	sbci	r29, 0xFF	; 255
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	9f 90       	pop	r9
    1356:	8f 90       	pop	r8
    1358:	7f 90       	pop	r7
    135a:	6f 90       	pop	r6
    135c:	5f 90       	pop	r5
    135e:	4f 90       	pop	r4
    1360:	3f 90       	pop	r3
    1362:	2f 90       	pop	r2
    1364:	08 95       	ret

00001366 <tune_filter>:
	
void tune_filter(void) {
    1366:	2f 92       	push	r2
    1368:	3f 92       	push	r3
    136a:	4f 92       	push	r4
    136c:	5f 92       	push	r5
    136e:	6f 92       	push	r6
    1370:	7f 92       	push	r7
    1372:	8f 92       	push	r8
    1374:	9f 92       	push	r9
    1376:	af 92       	push	r10
    1378:	bf 92       	push	r11
    137a:	cf 92       	push	r12
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	e5 97       	sbiw	r28, 0x35	; 53
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    139a:	de 01       	movw	r26, r28
    139c:	11 96       	adiw	r26, 0x01	; 1
    139e:	e2 ed       	ldi	r30, 0xD2	; 210
    13a0:	f1 e0       	ldi	r31, 0x01	; 1
    13a2:	8d e2       	ldi	r24, 0x2D	; 45
    13a4:	01 90       	ld	r0, Z+
    13a6:	0d 92       	st	X+, r0
    13a8:	81 50       	subi	r24, 0x01	; 1
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    13ac:	80 e3       	ldi	r24, 0x30	; 48
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    13b8:	82 e4       	ldi	r24, 0x42	; 66
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    13c4:	84 e4       	ldi	r24, 0x44	; 68
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	92 e0       	ldi	r25, 0x02	; 2
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    13dc:	84 e3       	ldi	r24, 0x34	; 52
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    13e8:	8e e3       	ldi	r24, 0x3E	; 62
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    13f4:	80 e4       	ldi	r24, 0x40	; 64
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1400:	82 e2       	ldi	r24, 0x22	; 34
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    140c:	8c e2       	ldi	r24, 0x2C	; 44
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1418:	84 e2       	ldi	r24, 0x24	; 36
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1424:	86 e2       	ldi	r24, 0x26	; 38
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    1430:	88 e2       	ldi	r24, 0x28	; 40
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	6f ef       	ldi	r22, 0xFF	; 255
    1436:	7f e3       	ldi	r23, 0x3F	; 63
    1438:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    143c:	8a e2       	ldi	r24, 0x2A	; 42
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	6f ef       	ldi	r22, 0xFF	; 255
    1442:	7f e3       	ldi	r23, 0x3F	; 63
    1444:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1448:	82 e3       	ldi	r24, 0x32	; 50
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1454:	8c e1       	ldi	r24, 0x1C	; 28
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1460:	88 e1       	ldi	r24, 0x18	; 24
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    146c:	84 e1       	ldi	r24, 0x14	; 20
    146e:	91 e0       	ldi	r25, 0x01	; 1
    1470:	6f ef       	ldi	r22, 0xFF	; 255
    1472:	7f e3       	ldi	r23, 0x3F	; 63
    1474:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1478:	80 e1       	ldi	r24, 0x10	; 16
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    1484:	80 e2       	ldi	r24, 0x20	; 32
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1490:	86 e4       	ldi	r24, 0x46	; 70
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    149c:	88 e4       	ldi	r24, 0x48	; 72
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>

	period = 1; //need to initialize to minimum period number here
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	80 93 c2 02 	sts	0x02C2, r24
	PORTF |= (1<<GATE); //turn gate on
    14ae:	89 9a       	sbi	0x11, 1	; 17
    14b0:	9e 01       	movw	r18, r28
    14b2:	2f 5f       	subi	r18, 0xFF	; 255
    14b4:	3f 4f       	sbci	r19, 0xFF	; 255
    14b6:	39 ab       	sts	0x59, r19
    14b8:	28 ab       	sts	0x58, r18
    14ba:	87 e5       	ldi	r24, 0x57	; 87
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	9d ab       	sts	0x5d, r25
    14c0:	8c ab       	sts	0x5c, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    14c2:	1b aa       	sts	0x9b, r17
    14c4:	1a aa       	sts	0x9a, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    14c6:	0f 2e       	mov	r0, r31
    14c8:	f8 e2       	ldi	r31, 0x28	; 40
    14ca:	ef 2e       	mov	r14, r31
    14cc:	f1 e0       	ldi	r31, 0x01	; 1
    14ce:	ff 2e       	mov	r15, r31
    14d0:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				//need to have a watchdog timer here to escape while loop if it takes too long
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    14d2:	0f 2e       	mov	r0, r31
    14d4:	f0 e3       	ldi	r31, 0x30	; 48
    14d6:	cf 2e       	mov	r12, r31
    14d8:	f1 e0       	ldi	r31, 0x01	; 1
    14da:	df 2e       	mov	r13, r31
    14dc:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    14de:	0f 2e       	mov	r0, r31
    14e0:	fa e2       	ldi	r31, 0x2A	; 42
    14e2:	af 2e       	mov	r10, r31
    14e4:	f1 e0       	ldi	r31, 0x01	; 1
    14e6:	bf 2e       	mov	r11, r31
    14e8:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    14ea:	0f 2e       	mov	r0, r31
    14ec:	f4 e1       	ldi	r31, 0x14	; 20
    14ee:	8f 2e       	mov	r8, r31
    14f0:	f1 e0       	ldi	r31, 0x01	; 1
    14f2:	9f 2e       	mov	r9, r31
    14f4:	f0 2d       	mov	r31, r0
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    14f6:	0f 2e       	mov	r0, r31
    14f8:	fc e1       	ldi	r31, 0x1C	; 28
    14fa:	6f 2e       	mov	r6, r31
    14fc:	f1 e0       	ldi	r31, 0x01	; 1
    14fe:	7f 2e       	mov	r7, r31
    1500:	f0 2d       	mov	r31, r0
		//TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
	
	
	}
	
void tune_filter(void) {
    1502:	a8 a9       	sts	0x48, r26
    1504:	b9 a9       	sts	0x49, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    1506:	8c 91       	ld	r24, X
    1508:	80 93 c2 02 	sts	0x02C2, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    150c:	84 b5       	in	r24, 0x24	; 36
    150e:	8f 60       	ori	r24, 0x0F	; 15
    1510:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1516:	ee e6       	ldi	r30, 0x6E	; 110
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	82 60       	ori	r24, 0x02	; 2
    151e:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    1520:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    1522:	ea a9       	sts	0x4a, r30
    1524:	fb a9       	sts	0x4b, r31
    1526:	e2 30       	cpi	r30, 0x02	; 2
    1528:	f1 05       	cpc	r31, r1
    152a:	24 f4       	brge	.+8      	; 0x1534 <tune_filter+0x1ce>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	80 93 c1 02 	sts	0x02C1, r24
    1532:	03 c0       	rjmp	.+6      	; 0x153a <tune_filter+0x1d4>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	80 93 c1 02 	sts	0x02C1, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    153a:	11 96       	adiw	r26, 0x01	; 1
    153c:	2d 91       	ld	r18, X+
    153e:	3c 91       	ld	r19, X
    1540:	12 97       	sbiw	r26, 0x02	; 2
    1542:	3f a7       	lds	r19, 0x7f
    1544:	2e a7       	lds	r18, 0x7e
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1546:	0f 2e       	mov	r0, r31
    1548:	fd e0       	ldi	r31, 0x0D	; 13
    154a:	4f 2e       	mov	r4, r31
    154c:	55 24       	eor	r5, r5
    154e:	f0 2d       	mov	r31, r0
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    1550:	00 e0       	ldi	r16, 0x00	; 0
    1552:	10 e0       	ldi	r17, 0x00	; 0
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    1554:	22 24       	eor	r2, r2
    1556:	33 24       	eor	r3, r3
    1558:	23 94       	inc	r2
    155a:	04 2c       	mov	r0, r4
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <tune_filter+0x1fc>
    155e:	22 0c       	add	r2, r2
    1560:	33 1c       	adc	r3, r3
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <tune_filter+0x1f8>
    1566:	02 29       	or	r16, r2
    1568:	13 29       	or	r17, r3

			set_control_voltage(&cutoff_cv, pitch_cv);
    156a:	c7 01       	movw	r24, r14
    156c:	b8 01       	movw	r22, r16
    156e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			count_finished = FALSE;
    1572:	10 92 c0 02 	sts	0x02C0, r1
			period_counter = 0;
    1576:	10 92 c3 02 	sts	0x02C3, r1
		
		
			while (count_finished == FALSE) {
    157a:	80 91 c0 02 	lds	r24, 0x02C0
    157e:	88 23       	and	r24, r24
    1580:	21 f5       	brne	.+72     	; 0x15ca <tune_filter+0x264>
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    1582:	80 91 c2 02 	lds	r24, 0x02C2
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	84 5d       	subi	r24, 0xD4	; 212
    158a:	9e 4f       	sbci	r25, 0xFE	; 254
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				//need to have a watchdog timer here to escape while loop if it takes too long
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    1592:	c7 01       	movw	r24, r14
    1594:	b8 01       	movw	r22, r16
    1596:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    159a:	c6 01       	movw	r24, r12
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    15a4:	c5 01       	movw	r24, r10
    15a6:	6f ef       	ldi	r22, 0xFF	; 255
    15a8:	7f e3       	ldi	r23, 0x3F	; 63
    15aa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    15ae:	c4 01       	movw	r24, r8
    15b0:	6f ef       	ldi	r22, 0xFF	; 255
    15b2:	7f e3       	ldi	r23, 0x3F	; 63
    15b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    15b8:	c3 01       	movw	r24, r6
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&cutoff_cv, pitch_cv);
			count_finished = FALSE;
			period_counter = 0;
		
		
			while (count_finished == FALSE) {
    15c2:	80 91 c0 02 	lds	r24, 0x02C0
    15c6:	88 23       	and	r24, r24
    15c8:	e1 f2       	breq	.-72     	; 0x1582 <tune_filter+0x21c>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
						
			}
		
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    15ca:	80 91 be 02 	lds	r24, 0x02BE
    15ce:	90 91 bf 02 	lds	r25, 0x02BF
    15d2:	ee a5       	lds	r30, 0x6e
    15d4:	ff a5       	lds	r31, 0x6f
    15d6:	e8 17       	cp	r30, r24
    15d8:	f9 07       	cpc	r31, r25
    15da:	48 f0       	brcs	.+18     	; 0x15ee <tune_filter+0x288>
    15dc:	80 91 ff 01 	lds	r24, 0x01FF
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	29 f4       	brne	.+10     	; 0x15ee <tune_filter+0x288>
    15e4:	c1 01       	movw	r24, r2
    15e6:	80 95       	com	r24
    15e8:	90 95       	com	r25
    15ea:	08 23       	and	r16, r24
    15ec:	19 23       	and	r17, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    15ee:	80 91 be 02 	lds	r24, 0x02BE
    15f2:	90 91 bf 02 	lds	r25, 0x02BF
    15f6:	2e a5       	lds	r18, 0x6e
    15f8:	3f a5       	lds	r19, 0x6f
    15fa:	82 17       	cp	r24, r18
    15fc:	93 07       	cpc	r25, r19
    15fe:	21 f4       	brne	.+8      	; 0x1608 <tune_filter+0x2a2>
    1600:	80 91 ff 01 	lds	r24, 0x01FF
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	61 f0       	breq	.+24     	; 0x1620 <tune_filter+0x2ba>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    1608:	31 e0       	ldi	r19, 0x01	; 1
    160a:	30 93 ff 01 	sts	0x01FF, r19
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    160e:	08 94       	sec
    1610:	41 08       	sbc	r4, r1
    1612:	51 08       	sbc	r5, r1
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	48 16       	cp	r4, r24
    1618:	8f ef       	ldi	r24, 0xFF	; 255
    161a:	58 06       	cpc	r5, r24
    161c:	09 f0       	breq	.+2      	; 0x1620 <tune_filter+0x2ba>
    161e:	9a cf       	rjmp	.-204    	; 0x1554 <tune_filter+0x1ee>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv;
    1620:	ea a9       	sts	0x4a, r30
    1622:	fb a9       	sts	0x4b, r31
    1624:	31 96       	adiw	r30, 0x01	; 1
    1626:	fb ab       	sts	0x5b, r31
    1628:	ea ab       	sts	0x5a, r30
    162a:	ec a9       	sts	0x4c, r30
    162c:	fd a9       	sts	0x4d, r31
    162e:	01 93       	st	Z+, r16
    1630:	11 93       	st	Z+, r17
    1632:	fd ab       	sts	0x5d, r31
    1634:	ec ab       	sts	0x5c, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    1636:	ee e6       	ldi	r30, 0x6E	; 110
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8d 7f       	andi	r24, 0xFD	; 253
    163e:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    1640:	14 bc       	out	0x24, r1	; 36
    1642:	28 a9       	sts	0x48, r18
    1644:	39 a9       	sts	0x49, r19
    1646:	2d 5f       	subi	r18, 0xFD	; 253
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	39 ab       	sts	0x59, r19
    164c:	28 ab       	sts	0x58, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    164e:	8a a9       	sts	0x4a, r24
    1650:	9b a9       	sts	0x4b, r25
    1652:	8f 30       	cpi	r24, 0x0F	; 15
    1654:	91 05       	cpc	r25, r1
    1656:	09 f0       	breq	.+2      	; 0x165a <tune_filter+0x2f4>
    1658:	54 cf       	rjmp	.-344    	; 0x1502 <tune_filter+0x19c>
	TCCR0A = 0; //turn off timer0
}



PORTF &= ~(1<<GATE); //turn gate off
    165a:	89 98       	cbi	0x11, 1	; 17
	
	
}			
    165c:	e5 96       	adiw	r28, 0x35	; 53
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	7f 90       	pop	r7
    1682:	6f 90       	pop	r6
    1684:	5f 90       	pop	r5
    1686:	4f 90       	pop	r4
    1688:	3f 90       	pop	r3
    168a:	2f 90       	pop	r2
    168c:	08 95       	ret

0000168e <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    168e:	98 2f       	mov	r25, r24
    1690:	96 95       	lsr	r25
    1692:	96 95       	lsr	r25
    1694:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    1696:	29 2f       	mov	r18, r25
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	f9 01       	movw	r30, r18
    169c:	31 97       	sbiw	r30, 0x01	; 1
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	e6 0f       	add	r30, r22
    16a4:	f7 1f       	adc	r31, r23
    16a6:	01 90       	ld	r0, Z+
    16a8:	f0 81       	ld	r31, Z
    16aa:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    16ac:	22 0f       	add	r18, r18
    16ae:	33 1f       	adc	r19, r19
    16b0:	26 0f       	add	r18, r22
    16b2:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	
    16b4:	d9 01       	movw	r26, r18
    16b6:	4d 91       	ld	r20, X+
    16b8:	5c 91       	ld	r21, X
    16ba:	11 97       	sbiw	r26, 0x01	; 1
    16bc:	4e 1b       	sub	r20, r30
    16be:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    16c0:	99 0f       	add	r25, r25
    16c2:	99 0f       	add	r25, r25
    16c4:	99 0f       	add	r25, r25
    16c6:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	48 9f       	mul	r20, r24
    16cc:	90 01       	movw	r18, r0
    16ce:	49 9f       	mul	r20, r25
    16d0:	30 0d       	add	r19, r0
    16d2:	58 9f       	mul	r21, r24
    16d4:	30 0d       	add	r19, r0
    16d6:	11 24       	eor	r1, r1
    16d8:	36 95       	lsr	r19
    16da:	27 95       	ror	r18
    16dc:	36 95       	lsr	r19
    16de:	27 95       	ror	r18
    16e0:	36 95       	lsr	r19
    16e2:	27 95       	ror	r18
    16e4:	e2 0f       	add	r30, r18
    16e6:	f3 1f       	adc	r31, r19
	
	return interpolated_pitch_cv;
	
    16e8:	8e 2f       	mov	r24, r30
    16ea:	9f 2f       	mov	r25, r31
    16ec:	08 95       	ret

000016ee <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    16ee:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    16f0:	80 91 c7 02 	lds	r24, 0x02C7
    16f4:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    16f6:	89 27       	eor	r24, r25
    16f8:	80 93 c7 02 	sts	0x02C7, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    16fc:	89 23       	and	r24, r25
    16fe:	08 95       	ret

00001700 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1700:	ed ed       	ldi	r30, 0xDD	; 221
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	90 81       	ld	r25, Z
    1706:	9f 7b       	andi	r25, 0xBF	; 191
    1708:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	21 70       	andi	r18, 0x01	; 1
    1710:	30 70       	andi	r19, 0x00	; 0
    1712:	22 0f       	add	r18, r18
    1714:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    1716:	68 2f       	mov	r22, r24
    1718:	62 95       	swap	r22
    171a:	66 95       	lsr	r22
    171c:	67 70       	andi	r22, 0x07	; 7
    171e:	67 95       	ror	r22
    1720:	66 27       	eor	r22, r22
    1722:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1724:	26 2b       	or	r18, r22
    1726:	98 2f       	mov	r25, r24
    1728:	96 95       	lsr	r25
    172a:	96 95       	lsr	r25
    172c:	91 70       	andi	r25, 0x01	; 1
    172e:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    1730:	68 2f       	mov	r22, r24
    1732:	66 1f       	adc	r22, r22
    1734:	66 27       	eor	r22, r22
    1736:	66 1f       	adc	r22, r22
    1738:	66 0f       	add	r22, r22
    173a:	66 0f       	add	r22, r22
    173c:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    173e:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    1740:	a8 2f       	mov	r26, r24
    1742:	a6 95       	lsr	r26
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	a1 70       	andi	r26, 0x01	; 1
    1748:	b0 70       	andi	r27, 0x00	; 0
    174a:	bd 01       	movw	r22, r26
    174c:	66 0f       	add	r22, r22
    174e:	77 1f       	adc	r23, r23
    1750:	66 0f       	add	r22, r22
    1752:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1754:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    1756:	68 2f       	mov	r22, r24
    1758:	62 95       	swap	r22
    175a:	6f 70       	andi	r22, 0x0F	; 15
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	61 70       	andi	r22, 0x01	; 1
    1760:	70 70       	andi	r23, 0x00	; 0
    1762:	ab 01       	movw	r20, r22
    1764:	00 24       	eor	r0, r0
    1766:	56 95       	lsr	r21
    1768:	47 95       	ror	r20
    176a:	07 94       	ror	r0
    176c:	56 95       	lsr	r21
    176e:	47 95       	ror	r20
    1770:	07 94       	ror	r0
    1772:	54 2f       	mov	r21, r20
    1774:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1776:	62 2f       	mov	r22, r18
    1778:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    177a:	48 2f       	mov	r20, r24
    177c:	42 95       	swap	r20
    177e:	46 95       	lsr	r20
    1780:	46 95       	lsr	r20
    1782:	43 70       	andi	r20, 0x03	; 3
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	41 70       	andi	r20, 0x01	; 1
    1788:	50 70       	andi	r21, 0x00	; 0
    178a:	9a 01       	movw	r18, r20
    178c:	22 0f       	add	r18, r18
    178e:	33 1f       	adc	r19, r19
    1790:	22 95       	swap	r18
    1792:	32 95       	swap	r19
    1794:	30 7f       	andi	r19, 0xF0	; 240
    1796:	32 27       	eor	r19, r18
    1798:	20 7f       	andi	r18, 0xF0	; 240
    179a:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    179c:	46 2f       	mov	r20, r22
    179e:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    17a0:	86 95       	lsr	r24
    17a2:	86 95       	lsr	r24
    17a4:	86 95       	lsr	r24
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	21 70       	andi	r18, 0x01	; 1
    17ac:	30 70       	andi	r19, 0x00	; 0
    17ae:	c9 01       	movw	r24, r18
    17b0:	82 95       	swap	r24
    17b2:	92 95       	swap	r25
    17b4:	90 7f       	andi	r25, 0xF0	; 240
    17b6:	98 27       	eor	r25, r24
    17b8:	80 7f       	andi	r24, 0xF0	; 240
    17ba:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    17bc:	84 2b       	or	r24, r20
    17be:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    17c0:	80 81       	ld	r24, Z
    17c2:	80 64       	ori	r24, 0x40	; 64
    17c4:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 7b       	andi	r24, 0xBF	; 191
    17ca:	80 83       	st	Z, r24
	DATA_BUS = 0;
    17cc:	12 b8       	out	0x02, r1	; 2
	
	
    17ce:	08 95       	ret

000017d0 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    17d0:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    17d2:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    17d4:	74 83       	std	Z+4, r23	; 0x04
    17d6:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    17d8:	11 82       	std	Z+1, r1	; 0x01
    17da:	10 82       	st	Z, r1
}
    17dc:	08 95       	ret

000017de <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	ec 01       	movw	r28, r24
    17e6:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    17e8:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <store_and_clear_interrupt>
    17ec:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    17ee:	39 81       	ldd	r19, Y+1	; 0x01
    17f0:	83 2f       	mov	r24, r19
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	6a 81       	ldd	r22, Y+2	; 0x02
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	0e 94 3c 14 	call	0x2878	; 0x2878 <__divmodhi4>
    17fe:	48 81       	ld	r20, Y
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	84 17       	cp	r24, r20
    1804:	95 07       	cpc	r25, r21
    1806:	29 f4       	brne	.+10     	; 0x1812 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    1808:	82 2f       	mov	r24, r18
    180a:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <restore_interrupt_setting>
      return false;
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	11 c0       	rjmp	.+34     	; 0x1834 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    1812:	eb 81       	ldd	r30, Y+3	; 0x03
    1814:	fc 81       	ldd	r31, Y+4	; 0x04
    1816:	e3 0f       	add	r30, r19
    1818:	f1 1d       	adc	r31, r1
    181a:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	01 96       	adiw	r24, 0x01	; 1
    1822:	6a 81       	ldd	r22, Y+2	; 0x02
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	0e 94 3c 14 	call	0x2878	; 0x2878 <__divmodhi4>
    182a:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    182c:	82 2f       	mov	r24, r18
    182e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <restore_interrupt_setting>
      return true;
    1832:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	08 95       	ret

0000183c <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1842:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1846:	29 81       	ldd	r18, Y+1	; 0x01
    1848:	98 81       	ld	r25, Y
    184a:	29 17       	cp	r18, r25
    184c:	18 f0       	brcs	.+6      	; 0x1854 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    184e:	c2 2f       	mov	r28, r18
    1850:	c9 1b       	sub	r28, r25
    1852:	03 c0       	rjmp	.+6      	; 0x185a <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    1854:	ca 81       	ldd	r28, Y+2	; 0x02
    1856:	c2 0f       	add	r28, r18
    1858:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    185a:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <restore_interrupt_setting>
   return len;
}
    185e:	8c 2f       	mov	r24, r28
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	08 95       	ret

00001866 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1866:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1868:	20 81       	ld	r18, Z
    186a:	86 2f       	mov	r24, r22
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	82 0f       	add	r24, r18
    1870:	91 1d       	adc	r25, r1
    1872:	62 81       	ldd	r22, Z+2	; 0x02
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	0e 94 3c 14 	call	0x2878	; 0x2878 <__divmodhi4>
    187a:	03 80       	ldd	r0, Z+3	; 0x03
    187c:	f4 81       	ldd	r31, Z+4	; 0x04
    187e:	e0 2d       	mov	r30, r0
    1880:	e8 0f       	add	r30, r24
    1882:	f9 1f       	adc	r31, r25
}
    1884:	80 81       	ld	r24, Z
    1886:	08 95       	ret

00001888 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	ec 01       	movw	r28, r24
    1890:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1892:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <store_and_clear_interrupt>
    1896:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1898:	88 81       	ld	r24, Y
    189a:	21 2f       	mov	r18, r17
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	28 0f       	add	r18, r24
    18a0:	31 1d       	adc	r19, r1
    18a2:	6a 81       	ldd	r22, Y+2	; 0x02
    18a4:	c9 01       	movw	r24, r18
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	0e 94 3c 14 	call	0x2878	; 0x2878 <__divmodhi4>
    18ac:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    18ae:	84 2f       	mov	r24, r20
    18b0:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <restore_interrupt_setting>
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	08 95       	ret

000018bc <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    18bc:	8f b7       	in	r24, 0x3f	; 63
   cli();
    18be:	f8 94       	cli
   return sreg;
}
    18c0:	08 95       	ret

000018c2 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    18c2:	8f bf       	out	0x3f, r24	; 63
}
    18c4:	08 95       	ret

000018c6 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    18c6:	88 1f       	adc	r24, r24
    18c8:	88 27       	eor	r24, r24
    18ca:	88 1f       	adc	r24, r24
    18cc:	08 95       	ret

000018ce <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    18ce:	91 e0       	ldi	r25, 0x01	; 1
    18d0:	88 3f       	cpi	r24, 0xF8	; 248
    18d2:	08 f4       	brcc	.+2      	; 0x18d6 <midi_is_realtime+0x8>
    18d4:	90 e0       	ldi	r25, 0x00	; 0
}
    18d6:	89 2f       	mov	r24, r25
    18d8:	08 95       	ret

000018da <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	20 7f       	andi	r18, 0xF0	; 240
    18e0:	30 70       	andi	r19, 0x00	; 0
    18e2:	20 3c       	cpi	r18, 0xC0	; 192
    18e4:	31 05       	cpc	r19, r1
    18e6:	e9 f1       	breq	.+122    	; 0x1962 <midi_packet_length+0x88>
    18e8:	21 3c       	cpi	r18, 0xC1	; 193
    18ea:	31 05       	cpc	r19, r1
    18ec:	8c f4       	brge	.+34     	; 0x1910 <midi_packet_length+0x36>
    18ee:	20 39       	cpi	r18, 0x90	; 144
    18f0:	31 05       	cpc	r19, r1
    18f2:	e1 f0       	breq	.+56     	; 0x192c <midi_packet_length+0x52>
    18f4:	21 39       	cpi	r18, 0x91	; 145
    18f6:	31 05       	cpc	r19, r1
    18f8:	24 f4       	brge	.+8      	; 0x1902 <midi_packet_length+0x28>
    18fa:	20 38       	cpi	r18, 0x80	; 128
    18fc:	31 05       	cpc	r19, r1
    18fe:	79 f5       	brne	.+94     	; 0x195e <midi_packet_length+0x84>
    1900:	15 c0       	rjmp	.+42     	; 0x192c <midi_packet_length+0x52>
    1902:	20 3a       	cpi	r18, 0xA0	; 160
    1904:	31 05       	cpc	r19, r1
    1906:	91 f0       	breq	.+36     	; 0x192c <midi_packet_length+0x52>
    1908:	20 3b       	cpi	r18, 0xB0	; 176
    190a:	31 05       	cpc	r19, r1
    190c:	41 f5       	brne	.+80     	; 0x195e <midi_packet_length+0x84>
    190e:	0e c0       	rjmp	.+28     	; 0x192c <midi_packet_length+0x52>
    1910:	20 3e       	cpi	r18, 0xE0	; 224
    1912:	31 05       	cpc	r19, r1
    1914:	59 f0       	breq	.+22     	; 0x192c <midi_packet_length+0x52>
    1916:	21 3e       	cpi	r18, 0xE1	; 225
    1918:	31 05       	cpc	r19, r1
    191a:	24 f4       	brge	.+8      	; 0x1924 <midi_packet_length+0x4a>
    191c:	20 3d       	cpi	r18, 0xD0	; 208
    191e:	31 05       	cpc	r19, r1
    1920:	f1 f4       	brne	.+60     	; 0x195e <midi_packet_length+0x84>
    1922:	1f c0       	rjmp	.+62     	; 0x1962 <midi_packet_length+0x88>
    1924:	20 3f       	cpi	r18, 0xF0	; 240
    1926:	31 05       	cpc	r19, r1
    1928:	d1 f4       	brne	.+52     	; 0x195e <midi_packet_length+0x84>
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    192c:	83 e0       	ldi	r24, 0x03	; 3
    192e:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    1930:	86 3f       	cpi	r24, 0xF6	; 246
    1932:	79 f0       	breq	.+30     	; 0x1952 <midi_packet_length+0x78>
    1934:	87 3f       	cpi	r24, 0xF7	; 247
    1936:	38 f4       	brcc	.+14     	; 0x1946 <midi_packet_length+0x6c>
    1938:	82 3f       	cpi	r24, 0xF2	; 242
    193a:	a9 f0       	breq	.+42     	; 0x1966 <midi_packet_length+0x8c>
    193c:	83 3f       	cpi	r24, 0xF3	; 243
    193e:	59 f0       	breq	.+22     	; 0x1956 <midi_packet_length+0x7c>
    1940:	81 3f       	cpi	r24, 0xF1	; 241
    1942:	59 f4       	brne	.+22     	; 0x195a <midi_packet_length+0x80>
    1944:	08 c0       	rjmp	.+16     	; 0x1956 <midi_packet_length+0x7c>
    1946:	88 3f       	cpi	r24, 0xF8	; 248
    1948:	40 f0       	brcs	.+16     	; 0x195a <midi_packet_length+0x80>
    194a:	8d 3f       	cpi	r24, 0xFD	; 253
    194c:	10 f0       	brcs	.+4      	; 0x1952 <midi_packet_length+0x78>
    194e:	8e 3f       	cpi	r24, 0xFE	; 254
    1950:	20 f0       	brcs	.+8      	; 0x195a <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	08 95       	ret
         }
      default:
         return UNDEFINED;
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1966:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1968:	08 95       	ret

0000196a <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    196a:	0f 93       	push	r16
    196c:	34 2f       	mov	r19, r20
    196e:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1970:	46 2f       	mov	r20, r22
    1972:	4f 70       	andi	r20, 0x0F	; 15
    1974:	40 6b       	ori	r20, 0xB0	; 176
    1976:	23 2f       	mov	r18, r19
    1978:	2f 77       	andi	r18, 0x7F	; 127
    197a:	0f 77       	andi	r16, 0x7F	; 127
    197c:	dc 01       	movw	r26, r24
    197e:	ed 91       	ld	r30, X+
    1980:	fc 91       	ld	r31, X
    1982:	63 e0       	ldi	r22, 0x03	; 3
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1988:	0f 91       	pop	r16
    198a:	08 95       	ret

0000198c <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    198c:	0f 93       	push	r16
    198e:	34 2f       	mov	r19, r20
    1990:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1992:	46 2f       	mov	r20, r22
    1994:	4f 70       	andi	r20, 0x0F	; 15
    1996:	40 69       	ori	r20, 0x90	; 144
    1998:	23 2f       	mov	r18, r19
    199a:	2f 77       	andi	r18, 0x7F	; 127
    199c:	0f 77       	andi	r16, 0x7F	; 127
    199e:	dc 01       	movw	r26, r24
    19a0:	ed 91       	ld	r30, X+
    19a2:	fc 91       	ld	r31, X
    19a4:	63 e0       	ldi	r22, 0x03	; 3
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    19aa:	0f 91       	pop	r16
    19ac:	08 95       	ret

000019ae <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    19ae:	0f 93       	push	r16
    19b0:	34 2f       	mov	r19, r20
    19b2:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    19b4:	46 2f       	mov	r20, r22
    19b6:	4f 70       	andi	r20, 0x0F	; 15
    19b8:	40 68       	ori	r20, 0x80	; 128
    19ba:	23 2f       	mov	r18, r19
    19bc:	2f 77       	andi	r18, 0x7F	; 127
    19be:	0f 77       	andi	r16, 0x7F	; 127
    19c0:	dc 01       	movw	r26, r24
    19c2:	ed 91       	ld	r30, X+
    19c4:	fc 91       	ld	r31, X
    19c6:	63 e0       	ldi	r22, 0x03	; 3
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    19cc:	0f 91       	pop	r16
    19ce:	08 95       	ret

000019d0 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    19d0:	0f 93       	push	r16
    19d2:	34 2f       	mov	r19, r20
    19d4:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    19d6:	46 2f       	mov	r20, r22
    19d8:	4f 70       	andi	r20, 0x0F	; 15
    19da:	40 6a       	ori	r20, 0xA0	; 160
    19dc:	23 2f       	mov	r18, r19
    19de:	2f 77       	andi	r18, 0x7F	; 127
    19e0:	0f 77       	andi	r16, 0x7F	; 127
    19e2:	dc 01       	movw	r26, r24
    19e4:	ed 91       	ld	r30, X+
    19e6:	fc 91       	ld	r31, X
    19e8:	63 e0       	ldi	r22, 0x03	; 3
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    19ee:	0f 91       	pop	r16
    19f0:	08 95       	ret

000019f2 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    19f6:	20 e2       	ldi	r18, 0x20	; 32
    19f8:	40 30       	cpi	r20, 0x00	; 0
    19fa:	52 07       	cpc	r21, r18
    19fc:	44 f4       	brge	.+16     	; 0x1a0e <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    19fe:	a0 ee       	ldi	r26, 0xE0	; 224
    1a00:	40 30       	cpi	r20, 0x00	; 0
    1a02:	5a 07       	cpc	r21, r26
    1a04:	3c f0       	brlt	.+14     	; 0x1a14 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1a06:	8a 01       	movw	r16, r20
    1a08:	00 50       	subi	r16, 0x00	; 0
    1a0a:	10 4e       	sbci	r17, 0xE0	; 224
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1a0e:	0f ef       	ldi	r16, 0xFF	; 255
    1a10:	1f e3       	ldi	r17, 0x3F	; 63
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    1a14:	00 e0       	ldi	r16, 0x00	; 0
    1a16:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1a18:	46 2f       	mov	r20, r22
    1a1a:	4f 70       	andi	r20, 0x0F	; 15
    1a1c:	40 6e       	ori	r20, 0xE0	; 224
    1a1e:	20 2f       	mov	r18, r16
    1a20:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1a22:	00 0f       	add	r16, r16
    1a24:	01 2f       	mov	r16, r17
    1a26:	00 1f       	adc	r16, r16
    1a28:	11 0b       	sbc	r17, r17
    1a2a:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1a2c:	0f 77       	andi	r16, 0x7F	; 127
    1a2e:	dc 01       	movw	r26, r24
    1a30:	ed 91       	ld	r30, X+
    1a32:	fc 91       	ld	r31, X
    1a34:	63 e0       	ldi	r22, 0x03	; 3
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1a40:	0f 93       	push	r16
    1a42:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1a44:	46 2f       	mov	r20, r22
    1a46:	4f 70       	andi	r20, 0x0F	; 15
    1a48:	40 6c       	ori	r20, 0xC0	; 192
    1a4a:	2f 77       	andi	r18, 0x7F	; 127
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	ed 91       	ld	r30, X+
    1a50:	fc 91       	ld	r31, X
    1a52:	62 e0       	ldi	r22, 0x02	; 2
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	00 e0       	ldi	r16, 0x00	; 0
    1a58:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1a5a:	0f 91       	pop	r16
    1a5c:	08 95       	ret

00001a5e <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1a5e:	0f 93       	push	r16
    1a60:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1a62:	46 2f       	mov	r20, r22
    1a64:	4f 70       	andi	r20, 0x0F	; 15
    1a66:	40 6d       	ori	r20, 0xD0	; 208
    1a68:	2f 77       	andi	r18, 0x7F	; 127
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	ed 91       	ld	r30, X+
    1a6e:	fc 91       	ld	r31, X
    1a70:	62 e0       	ldi	r22, 0x02	; 2
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	00 e0       	ldi	r16, 0x00	; 0
    1a76:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1a78:	0f 91       	pop	r16
    1a7a:	08 95       	ret

00001a7c <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1a7c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1a7e:	dc 01       	movw	r26, r24
    1a80:	ed 91       	ld	r30, X+
    1a82:	fc 91       	ld	r31, X
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	48 ef       	ldi	r20, 0xF8	; 248
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	00 e0       	ldi	r16, 0x00	; 0
    1a8e:	09 95       	icall
}
    1a90:	0f 91       	pop	r16
    1a92:	08 95       	ret

00001a94 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1a94:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1a96:	dc 01       	movw	r26, r24
    1a98:	ed 91       	ld	r30, X+
    1a9a:	fc 91       	ld	r31, X
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	49 ef       	ldi	r20, 0xF9	; 249
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	00 e0       	ldi	r16, 0x00	; 0
    1aa6:	09 95       	icall
}
    1aa8:	0f 91       	pop	r16
    1aaa:	08 95       	ret

00001aac <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1aac:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1aae:	dc 01       	movw	r26, r24
    1ab0:	ed 91       	ld	r30, X+
    1ab2:	fc 91       	ld	r31, X
    1ab4:	61 e0       	ldi	r22, 0x01	; 1
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	4a ef       	ldi	r20, 0xFA	; 250
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	00 e0       	ldi	r16, 0x00	; 0
    1abe:	09 95       	icall
}
    1ac0:	0f 91       	pop	r16
    1ac2:	08 95       	ret

00001ac4 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1ac4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	ed 91       	ld	r30, X+
    1aca:	fc 91       	ld	r31, X
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	4b ef       	ldi	r20, 0xFB	; 251
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	00 e0       	ldi	r16, 0x00	; 0
    1ad6:	09 95       	icall
}
    1ad8:	0f 91       	pop	r16
    1ada:	08 95       	ret

00001adc <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1adc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1ade:	dc 01       	movw	r26, r24
    1ae0:	ed 91       	ld	r30, X+
    1ae2:	fc 91       	ld	r31, X
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	4c ef       	ldi	r20, 0xFC	; 252
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	00 e0       	ldi	r16, 0x00	; 0
    1aee:	09 95       	icall
}
    1af0:	0f 91       	pop	r16
    1af2:	08 95       	ret

00001af4 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1af4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1af6:	dc 01       	movw	r26, r24
    1af8:	ed 91       	ld	r30, X+
    1afa:	fc 91       	ld	r31, X
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	4e ef       	ldi	r20, 0xFE	; 254
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	00 e0       	ldi	r16, 0x00	; 0
    1b06:	09 95       	icall
}
    1b08:	0f 91       	pop	r16
    1b0a:	08 95       	ret

00001b0c <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1b0c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1b0e:	dc 01       	movw	r26, r24
    1b10:	ed 91       	ld	r30, X+
    1b12:	fc 91       	ld	r31, X
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	4f ef       	ldi	r20, 0xFF	; 255
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	00 e0       	ldi	r16, 0x00	; 0
    1b1e:	09 95       	icall
}
    1b20:	0f 91       	pop	r16
    1b22:	08 95       	ret

00001b24 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1b24:	0f 93       	push	r16
   device->send_func(device, 2,
    1b26:	26 2f       	mov	r18, r22
    1b28:	2f 77       	andi	r18, 0x7F	; 127
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	ed 91       	ld	r30, X+
    1b2e:	fc 91       	ld	r31, X
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	41 ef       	ldi	r20, 0xF1	; 241
    1b36:	00 e0       	ldi	r16, 0x00	; 0
    1b38:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1b3a:	0f 91       	pop	r16
    1b3c:	08 95       	ret

00001b3e <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
   device->send_func(device, 3,
    1b42:	26 2f       	mov	r18, r22
    1b44:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1b46:	8b 01       	movw	r16, r22
    1b48:	00 0f       	add	r16, r16
    1b4a:	01 2f       	mov	r16, r17
    1b4c:	00 1f       	adc	r16, r16
    1b4e:	11 0b       	sbc	r17, r17
    1b50:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1b52:	0f 77       	andi	r16, 0x7F	; 127
    1b54:	dc 01       	movw	r26, r24
    1b56:	ed 91       	ld	r30, X+
    1b58:	fc 91       	ld	r31, X
    1b5a:	63 e0       	ldi	r22, 0x03	; 3
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	42 ef       	ldi	r20, 0xF2	; 242
    1b60:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	08 95       	ret

00001b68 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1b68:	0f 93       	push	r16
   device->send_func(device, 2,
    1b6a:	26 2f       	mov	r18, r22
    1b6c:	2f 77       	andi	r18, 0x7F	; 127
    1b6e:	dc 01       	movw	r26, r24
    1b70:	ed 91       	ld	r30, X+
    1b72:	fc 91       	ld	r31, X
    1b74:	62 e0       	ldi	r22, 0x02	; 2
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	43 ef       	ldi	r20, 0xF3	; 243
    1b7a:	00 e0       	ldi	r16, 0x00	; 0
    1b7c:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1b7e:	0f 91       	pop	r16
    1b80:	08 95       	ret

00001b82 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1b82:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1b84:	dc 01       	movw	r26, r24
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	46 ef       	ldi	r20, 0xF6	; 246
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	00 e0       	ldi	r16, 0x00	; 0
    1b94:	09 95       	icall
}
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1b9a:	0f 93       	push	r16
    1b9c:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	ed 91       	ld	r30, X+
    1ba2:	fc 91       	ld	r31, X
    1ba4:	61 e0       	ldi	r22, 0x01	; 1
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	00 e0       	ldi	r16, 0x00	; 0
    1bac:	09 95       	icall
}
    1bae:	0f 91       	pop	r16
    1bb0:	08 95       	ret

00001bb2 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1bb2:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	ed 91       	ld	r30, X+
    1bb8:	fc 91       	ld	r31, X
    1bba:	09 95       	icall
}
    1bbc:	0f 91       	pop	r16
    1bbe:	08 95       	ret

00001bc0 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1bc0:	6f 92       	push	r6
    1bc2:	7f 92       	push	r7
    1bc4:	8f 92       	push	r8
    1bc6:	9f 92       	push	r9
    1bc8:	af 92       	push	r10
    1bca:	bf 92       	push	r11
    1bcc:	cf 92       	push	r12
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <midi_send_array+0x1e>
    1bde:	0f 92       	push	r0
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	4c 01       	movw	r8, r24
    1be6:	6b 01       	movw	r12, r22
    1be8:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1bea:	61 15       	cp	r22, r1
    1bec:	71 05       	cpc	r23, r1
    1bee:	41 f1       	breq	.+80     	; 0x1c40 <midi_send_array+0x80>
    1bf0:	ee 24       	eor	r14, r14
    1bf2:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    1bf4:	0f 2e       	mov	r0, r31
    1bf6:	f3 e0       	ldi	r31, 0x03	; 3
    1bf8:	6f 2e       	mov	r6, r31
    1bfa:	77 24       	eor	r7, r7
    1bfc:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    1bfe:	19 82       	std	Y+1, r1	; 0x01
    1c00:	1a 82       	std	Y+2, r1	; 0x02
    1c02:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    1c04:	86 01       	movw	r16, r12
    1c06:	0e 19       	sub	r16, r14
    1c08:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    1c0a:	04 30       	cpi	r16, 0x04	; 4
    1c0c:	11 05       	cpc	r17, r1
    1c0e:	08 f0       	brcs	.+2      	; 0x1c12 <midi_send_array+0x52>
    1c10:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1c12:	b5 01       	movw	r22, r10
    1c14:	6e 0d       	add	r22, r14
    1c16:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    1c18:	ce 01       	movw	r24, r28
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	40 2f       	mov	r20, r16
    1c1e:	51 2f       	mov	r21, r17
    1c20:	0e 94 4f 14 	call	0x289e	; 0x289e <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    1c24:	c4 01       	movw	r24, r8
    1c26:	b8 01       	movw	r22, r16
    1c28:	49 81       	ldd	r20, Y+1	; 0x01
    1c2a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c2c:	0b 81       	ldd	r16, Y+3	; 0x03
    1c2e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1c32:	83 e0       	ldi	r24, 0x03	; 3
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	e8 0e       	add	r14, r24
    1c38:	f9 1e       	adc	r15, r25
    1c3a:	ec 14       	cp	r14, r12
    1c3c:	fd 04       	cpc	r15, r13
    1c3e:	f8 f2       	brcs	.-66     	; 0x1bfe <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	df 90       	pop	r13
    1c54:	cf 90       	pop	r12
    1c56:	bf 90       	pop	r11
    1c58:	af 90       	pop	r10
    1c5a:	9f 90       	pop	r9
    1c5c:	8f 90       	pop	r8
    1c5e:	7f 90       	pop	r7
    1c60:	6f 90       	pop	r6
    1c62:	08 95       	ret

00001c64 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1c64:	fc 01       	movw	r30, r24
    1c66:	73 83       	std	Z+3, r23	; 0x03
    1c68:	62 83       	std	Z+2, r22	; 0x02
}
    1c6a:	08 95       	ret

00001c6c <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	75 83       	std	Z+5, r23	; 0x05
    1c70:	64 83       	std	Z+4, r22	; 0x04
}
    1c72:	08 95       	ret

00001c74 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1c74:	fc 01       	movw	r30, r24
    1c76:	77 83       	std	Z+7, r23	; 0x07
    1c78:	66 83       	std	Z+6, r22	; 0x06
}
    1c7a:	08 95       	ret

00001c7c <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	71 87       	std	Z+9, r23	; 0x09
    1c80:	60 87       	std	Z+8, r22	; 0x08
}
    1c82:	08 95       	ret

00001c84 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1c84:	fc 01       	movw	r30, r24
    1c86:	73 87       	std	Z+11, r23	; 0x0b
    1c88:	62 87       	std	Z+10, r22	; 0x0a
}
    1c8a:	08 95       	ret

00001c8c <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	75 87       	std	Z+13, r23	; 0x0d
    1c90:	64 87       	std	Z+12, r22	; 0x0c
}
    1c92:	08 95       	ret

00001c94 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1c94:	fc 01       	movw	r30, r24
    1c96:	77 87       	std	Z+15, r23	; 0x0f
    1c98:	66 87       	std	Z+14, r22	; 0x0e
}
    1c9a:	08 95       	ret

00001c9c <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	71 8b       	std	Z+17, r23	; 0x11
    1ca0:	60 8b       	std	Z+16, r22	; 0x10
}
    1ca2:	08 95       	ret

00001ca4 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	73 8b       	std	Z+19, r23	; 0x13
    1ca8:	62 8b       	std	Z+18, r22	; 0x12
}
    1caa:	08 95       	ret

00001cac <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1cac:	fc 01       	movw	r30, r24
    1cae:	75 8b       	std	Z+21, r23	; 0x15
    1cb0:	64 8b       	std	Z+20, r22	; 0x14
}
    1cb2:	08 95       	ret

00001cb4 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	77 8b       	std	Z+23, r23	; 0x17
    1cb8:	66 8b       	std	Z+22, r22	; 0x16
}
    1cba:	08 95       	ret

00001cbc <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	71 8f       	std	Z+25, r23	; 0x19
    1cc0:	60 8f       	std	Z+24, r22	; 0x18
}
    1cc2:	08 95       	ret

00001cc4 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	73 8f       	std	Z+27, r23	; 0x1b
    1cc8:	62 8f       	std	Z+26, r22	; 0x1a
}
    1cca:	08 95       	ret

00001ccc <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1ccc:	fc 01       	movw	r30, r24
    1cce:	75 8f       	std	Z+29, r23	; 0x1d
    1cd0:	64 8f       	std	Z+28, r22	; 0x1c
}
    1cd2:	08 95       	ret

00001cd4 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	77 8f       	std	Z+31, r23	; 0x1f
    1cd8:	66 8f       	std	Z+30, r22	; 0x1e
}
    1cda:	08 95       	ret

00001cdc <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1ce2:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    1ce4:	1f a2       	lds	r17, 0x9f
    1ce6:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1ce8:	bc 01       	movw	r22, r24
    1cea:	68 5d       	subi	r22, 0xD8	; 216
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	88 51       	subi	r24, 0x18	; 24
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	40 ec       	ldi	r20, 0xC0	; 192
    1cf4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1cf8:	1b 82       	std	Y+3, r1	; 0x03
    1cfa:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1cfc:	1d 82       	std	Y+5, r1	; 0x05
    1cfe:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1d00:	1f 82       	std	Y+7, r1	; 0x07
    1d02:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1d04:	19 86       	std	Y+9, r1	; 0x09
    1d06:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1d08:	1b 86       	std	Y+11, r1	; 0x0b
    1d0a:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1d0c:	1d 86       	std	Y+13, r1	; 0x0d
    1d0e:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1d10:	1f 86       	std	Y+15, r1	; 0x0f
    1d12:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1d14:	19 8a       	std	Y+17, r1	; 0x11
    1d16:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1d18:	1b 8a       	std	Y+19, r1	; 0x13
    1d1a:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1d1c:	1d 8a       	std	Y+21, r1	; 0x15
    1d1e:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1d20:	1f 8a       	std	Y+23, r1	; 0x17
    1d22:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1d24:	19 8e       	std	Y+25, r1	; 0x19
    1d26:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1d28:	1b 8e       	std	Y+27, r1	; 0x1b
    1d2a:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1d2c:	1d 8e       	std	Y+29, r1	; 0x1d
    1d2e:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1d30:	1f 8e       	std	Y+31, r1	; 0x1f
    1d32:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1d34:	19 a2       	lds	r17, 0x99
    1d36:	18 a2       	lds	r17, 0x98
}
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	08 95       	ret

00001d3e <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1d4c:	66 23       	and	r22, r22
    1d4e:	99 f0       	breq	.+38     	; 0x1d76 <midi_device_input+0x38>
    1d50:	04 2f       	mov	r16, r20
    1d52:	15 2f       	mov	r17, r21
    1d54:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    1d56:	0f 2e       	mov	r0, r31
    1d58:	f8 ee       	ldi	r31, 0xE8	; 232
    1d5a:	ef 2e       	mov	r14, r31
    1d5c:	ff 24       	eor	r15, r15
    1d5e:	f0 2d       	mov	r31, r0
    1d60:	e8 0e       	add	r14, r24
    1d62:	f9 1e       	adc	r15, r25
    1d64:	f8 01       	movw	r30, r16
    1d66:	61 91       	ld	r22, Z+
    1d68:	8f 01       	movw	r16, r30
    1d6a:	c7 01       	movw	r24, r14
    1d6c:	0e 94 ef 0b 	call	0x17de	; 0x17de <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1d70:	cf 5f       	subi	r28, 0xFF	; 255
    1d72:	cd 17       	cp	r28, r29
    1d74:	b9 f7       	brne	.-18     	; 0x1d64 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	08 95       	ret

00001d84 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    1d84:	fc 01       	movw	r30, r24
    1d86:	71 83       	std	Z+1, r23	; 0x01
    1d88:	60 83       	st	Z, r22
}
    1d8a:	08 95       	ret

00001d8c <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	71 a3       	lds	r23, 0x51
    1d90:	60 a3       	lds	r22, 0x50
}
    1d92:	08 95       	ret

00001d94 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1d94:	af 92       	push	r10
    1d96:	bf 92       	push	r11
    1d98:	cf 92       	push	r12
    1d9a:	df 92       	push	r13
    1d9c:	ef 92       	push	r14
    1d9e:	ff 92       	push	r15
    1da0:	0f 93       	push	r16
    1da2:	1f 93       	push	r17
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <midi_input_callbacks+0x16>
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	6c 01       	movw	r12, r24
    1db2:	5b 01       	movw	r10, r22
    1db4:	f4 2e       	mov	r15, r20
    1db6:	e2 2e       	mov	r14, r18
    1db8:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1dba:	dc 01       	movw	r26, r24
    1dbc:	95 96       	adiw	r26, 0x25	; 37
    1dbe:	8c 91       	ld	r24, X
    1dc0:	95 97       	sbiw	r26, 0x25	; 37
    1dc2:	84 30       	cpi	r24, 0x04	; 4
    1dc4:	e9 f4       	brne	.+58     	; 0x1e00 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    1dc6:	5a 96       	adiw	r26, 0x1a	; 26
    1dc8:	ed 91       	ld	r30, X+
    1dca:	fc 91       	ld	r31, X
    1dcc:	5b 97       	sbiw	r26, 0x1b	; 27
    1dce:	30 97       	sbiw	r30, 0x00	; 0
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <midi_input_callbacks+0x40>
    1dd2:	ee c0       	rjmp	.+476    	; 0x1fb0 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	63 e0       	ldi	r22, 0x03	; 3
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
    1de0:	cb 01       	movw	r24, r22
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	68 0f       	add	r22, r24
    1de8:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1dea:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1dec:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    1dee:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1df0:	4a 2d       	mov	r20, r10
    1df2:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1df4:	c6 01       	movw	r24, r12
    1df6:	9e 01       	movw	r18, r28
    1df8:	2f 5f       	subi	r18, 0xFF	; 255
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfc:	09 95       	icall
    1dfe:	c8 c0       	rjmp	.+400    	; 0x1f90 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    1e00:	62 30       	cpi	r22, 0x02	; 2
    1e02:	71 05       	cpc	r23, r1
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <midi_input_callbacks+0x74>
    1e06:	5f c0       	rjmp	.+190    	; 0x1ec6 <midi_input_callbacks+0x132>
    1e08:	63 30       	cpi	r22, 0x03	; 3
    1e0a:	71 05       	cpc	r23, r1
    1e0c:	29 f0       	breq	.+10     	; 0x1e18 <midi_input_callbacks+0x84>
    1e0e:	61 30       	cpi	r22, 0x01	; 1
    1e10:	71 05       	cpc	r23, r1
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <midi_input_callbacks+0x82>
    1e14:	b3 c0       	rjmp	.+358    	; 0x1f7c <midi_input_callbacks+0x1e8>
    1e16:	99 c0       	rjmp	.+306    	; 0x1f4a <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1e18:	84 2f       	mov	r24, r20
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	80 7f       	andi	r24, 0xF0	; 240
    1e1e:	90 70       	andi	r25, 0x00	; 0
    1e20:	80 3a       	cpi	r24, 0xA0	; 160
    1e22:	91 05       	cpc	r25, r1
    1e24:	29 f1       	breq	.+74     	; 0x1e70 <midi_input_callbacks+0xdc>
    1e26:	81 3a       	cpi	r24, 0xA1	; 161
    1e28:	91 05       	cpc	r25, r1
    1e2a:	3c f4       	brge	.+14     	; 0x1e3a <midi_input_callbacks+0xa6>
    1e2c:	80 38       	cpi	r24, 0x80	; 128
    1e2e:	91 05       	cpc	r25, r1
    1e30:	c9 f0       	breq	.+50     	; 0x1e64 <midi_input_callbacks+0xd0>
    1e32:	80 39       	cpi	r24, 0x90	; 144
    1e34:	91 05       	cpc	r25, r1
    1e36:	91 f5       	brne	.+100    	; 0x1e9c <midi_input_callbacks+0x108>
    1e38:	0f c0       	rjmp	.+30     	; 0x1e58 <midi_input_callbacks+0xc4>
    1e3a:	80 3e       	cpi	r24, 0xE0	; 224
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	f1 f0       	breq	.+60     	; 0x1e7c <midi_input_callbacks+0xe8>
    1e40:	80 3f       	cpi	r24, 0xF0	; 240
    1e42:	91 05       	cpc	r25, r1
    1e44:	09 f1       	breq	.+66     	; 0x1e88 <midi_input_callbacks+0xf4>
    1e46:	80 3b       	cpi	r24, 0xB0	; 176
    1e48:	91 05       	cpc	r25, r1
    1e4a:	41 f5       	brne	.+80     	; 0x1e9c <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    1e4c:	d6 01       	movw	r26, r12
    1e4e:	12 96       	adiw	r26, 0x02	; 2
    1e50:	ed 91       	ld	r30, X+
    1e52:	fc 91       	ld	r31, X
    1e54:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1e56:	24 c0       	rjmp	.+72     	; 0x1ea0 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1e58:	d6 01       	movw	r26, r12
    1e5a:	14 96       	adiw	r26, 0x04	; 4
    1e5c:	ed 91       	ld	r30, X+
    1e5e:	fc 91       	ld	r31, X
    1e60:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1e62:	1e c0       	rjmp	.+60     	; 0x1ea0 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1e64:	d6 01       	movw	r26, r12
    1e66:	16 96       	adiw	r26, 0x06	; 6
    1e68:	ed 91       	ld	r30, X+
    1e6a:	fc 91       	ld	r31, X
    1e6c:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1e6e:	18 c0       	rjmp	.+48     	; 0x1ea0 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1e70:	d6 01       	movw	r26, r12
    1e72:	18 96       	adiw	r26, 0x08	; 8
    1e74:	ed 91       	ld	r30, X+
    1e76:	fc 91       	ld	r31, X
    1e78:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1e7a:	12 c0       	rjmp	.+36     	; 0x1ea0 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1e7c:	d6 01       	movw	r26, r12
    1e7e:	1a 96       	adiw	r26, 0x0a	; 10
    1e80:	ed 91       	ld	r30, X+
    1e82:	fc 91       	ld	r31, X
    1e84:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1e86:	0c c0       	rjmp	.+24     	; 0x1ea0 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1e88:	b2 ef       	ldi	r27, 0xF2	; 242
    1e8a:	4b 17       	cp	r20, r27
    1e8c:	09 f0       	breq	.+2      	; 0x1e90 <midi_input_callbacks+0xfc>
    1e8e:	90 c0       	rjmp	.+288    	; 0x1fb0 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    1e90:	d6 01       	movw	r26, r12
    1e92:	1c 96       	adiw	r26, 0x0c	; 12
    1e94:	ed 91       	ld	r30, X+
    1e96:	fc 91       	ld	r31, X
    1e98:	1d 97       	sbiw	r26, 0x0d	; 13
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1e9c:	e0 e0       	ldi	r30, 0x00	; 0
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1ea0:	30 97       	sbiw	r30, 0x00	; 0
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <midi_input_callbacks+0x112>
    1ea4:	85 c0       	rjmp	.+266    	; 0x1fb0 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1ea6:	b2 ef       	ldi	r27, 0xF2	; 242
    1ea8:	fb 16       	cp	r15, r27
    1eaa:	31 f4       	brne	.+12     	; 0x1eb8 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    1eac:	c6 01       	movw	r24, r12
    1eae:	62 ef       	ldi	r22, 0xF2	; 242
    1eb0:	4e 2d       	mov	r20, r14
    1eb2:	21 2f       	mov	r18, r17
    1eb4:	09 95       	icall
    1eb6:	6c c0       	rjmp	.+216    	; 0x1f90 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1eb8:	6f 2d       	mov	r22, r15
    1eba:	6f 70       	andi	r22, 0x0F	; 15
    1ebc:	c6 01       	movw	r24, r12
    1ebe:	4e 2d       	mov	r20, r14
    1ec0:	21 2f       	mov	r18, r17
    1ec2:	09 95       	icall
    1ec4:	65 c0       	rjmp	.+202    	; 0x1f90 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1ec6:	84 2f       	mov	r24, r20
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	80 7f       	andi	r24, 0xF0	; 240
    1ecc:	90 70       	andi	r25, 0x00	; 0
    1ece:	80 3d       	cpi	r24, 0xD0	; 208
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	61 f0       	breq	.+24     	; 0x1eec <midi_input_callbacks+0x158>
    1ed4:	80 3f       	cpi	r24, 0xF0	; 240
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	79 f0       	breq	.+30     	; 0x1ef8 <midi_input_callbacks+0x164>
    1eda:	80 3c       	cpi	r24, 0xC0	; 192
    1edc:	91 05       	cpc	r25, r1
    1ede:	f9 f4       	brne	.+62     	; 0x1f1e <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1ee0:	d6 01       	movw	r26, r12
    1ee2:	1e 96       	adiw	r26, 0x0e	; 14
    1ee4:	ed 91       	ld	r30, X+
    1ee6:	fc 91       	ld	r31, X
    1ee8:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1eea:	1b c0       	rjmp	.+54     	; 0x1f22 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1eec:	d6 01       	movw	r26, r12
    1eee:	50 96       	adiw	r26, 0x10	; 16
    1ef0:	ed 91       	ld	r30, X+
    1ef2:	fc 91       	ld	r31, X
    1ef4:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1ef6:	15 c0       	rjmp	.+42     	; 0x1f22 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1ef8:	b3 ef       	ldi	r27, 0xF3	; 243
    1efa:	4b 17       	cp	r20, r27
    1efc:	31 f4       	brne	.+12     	; 0x1f0a <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    1efe:	d6 01       	movw	r26, r12
    1f00:	52 96       	adiw	r26, 0x12	; 18
    1f02:	ed 91       	ld	r30, X+
    1f04:	fc 91       	ld	r31, X
    1f06:	53 97       	sbiw	r26, 0x13	; 19
    1f08:	0c c0       	rjmp	.+24     	; 0x1f22 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1f0a:	b1 ef       	ldi	r27, 0xF1	; 241
    1f0c:	4b 17       	cp	r20, r27
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <midi_input_callbacks+0x17e>
    1f10:	4f c0       	rjmp	.+158    	; 0x1fb0 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    1f12:	d6 01       	movw	r26, r12
    1f14:	54 96       	adiw	r26, 0x14	; 20
    1f16:	ed 91       	ld	r30, X+
    1f18:	fc 91       	ld	r31, X
    1f1a:	55 97       	sbiw	r26, 0x15	; 21
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1f1e:	e0 e0       	ldi	r30, 0x00	; 0
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1f22:	30 97       	sbiw	r30, 0x00	; 0
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <midi_input_callbacks+0x194>
    1f26:	44 c0       	rjmp	.+136    	; 0x1fb0 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1f28:	b3 ef       	ldi	r27, 0xF3	; 243
    1f2a:	fb 16       	cp	r15, r27
    1f2c:	19 f0       	breq	.+6      	; 0x1f34 <midi_input_callbacks+0x1a0>
    1f2e:	81 ef       	ldi	r24, 0xF1	; 241
    1f30:	f8 16       	cp	r15, r24
    1f32:	29 f4       	brne	.+10     	; 0x1f3e <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1f34:	c6 01       	movw	r24, r12
    1f36:	6f 2d       	mov	r22, r15
    1f38:	4e 2d       	mov	r20, r14
    1f3a:	09 95       	icall
    1f3c:	29 c0       	rjmp	.+82     	; 0x1f90 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    1f3e:	6f 2d       	mov	r22, r15
    1f40:	6f 70       	andi	r22, 0x0F	; 15
    1f42:	c6 01       	movw	r24, r12
    1f44:	4e 2d       	mov	r20, r14
    1f46:	09 95       	icall
    1f48:	23 c0       	rjmp	.+70     	; 0x1f90 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1f4a:	84 2f       	mov	r24, r20
    1f4c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <midi_is_realtime>
    1f50:	88 23       	and	r24, r24
    1f52:	31 f0       	breq	.+12     	; 0x1f60 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    1f54:	d6 01       	movw	r26, r12
    1f56:	56 96       	adiw	r26, 0x16	; 22
    1f58:	ed 91       	ld	r30, X+
    1f5a:	fc 91       	ld	r31, X
    1f5c:	57 97       	sbiw	r26, 0x17	; 23
    1f5e:	08 c0       	rjmp	.+16     	; 0x1f70 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    1f60:	b6 ef       	ldi	r27, 0xF6	; 246
    1f62:	fb 16       	cp	r15, r27
    1f64:	29 f5       	brne	.+74     	; 0x1fb0 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    1f66:	d6 01       	movw	r26, r12
    1f68:	58 96       	adiw	r26, 0x18	; 24
    1f6a:	ed 91       	ld	r30, X+
    1f6c:	fc 91       	ld	r31, X
    1f6e:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1f70:	30 97       	sbiw	r30, 0x00	; 0
    1f72:	f1 f0       	breq	.+60     	; 0x1fb0 <midi_input_callbacks+0x21c>
            func(device, byte0);
    1f74:	c6 01       	movw	r24, r12
    1f76:	6f 2d       	mov	r22, r15
    1f78:	09 95       	icall
    1f7a:	0a c0       	rjmp	.+20     	; 0x1f90 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1f7c:	64 30       	cpi	r22, 0x04	; 4
    1f7e:	71 05       	cpc	r23, r1
    1f80:	a8 f4       	brcc	.+42     	; 0x1fac <midi_input_callbacks+0x218>
    1f82:	16 c0       	rjmp	.+44     	; 0x1fb0 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1f84:	c6 01       	movw	r24, r12
    1f86:	b5 01       	movw	r22, r10
    1f88:	4f 2d       	mov	r20, r15
    1f8a:	2e 2d       	mov	r18, r14
    1f8c:	01 2f       	mov	r16, r17
    1f8e:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1f90:	d6 01       	movw	r26, r12
    1f92:	5e 96       	adiw	r26, 0x1e	; 30
    1f94:	ed 91       	ld	r30, X+
    1f96:	fc 91       	ld	r31, X
    1f98:	5f 97       	sbiw	r26, 0x1f	; 31
    1f9a:	30 97       	sbiw	r30, 0x00	; 0
    1f9c:	89 f0       	breq	.+34     	; 0x1fc0 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1f9e:	c6 01       	movw	r24, r12
    1fa0:	b5 01       	movw	r22, r10
    1fa2:	4f 2d       	mov	r20, r15
    1fa4:	2e 2d       	mov	r18, r14
    1fa6:	01 2f       	mov	r16, r17
    1fa8:	09 95       	icall
    1faa:	0a c0       	rjmp	.+20     	; 0x1fc0 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    1fac:	aa 24       	eor	r10, r10
    1fae:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1fb0:	d6 01       	movw	r26, r12
    1fb2:	5c 96       	adiw	r26, 0x1c	; 28
    1fb4:	ed 91       	ld	r30, X+
    1fb6:	fc 91       	ld	r31, X
    1fb8:	5d 97       	sbiw	r26, 0x1d	; 29
    1fba:	30 97       	sbiw	r30, 0x00	; 0
    1fbc:	19 f7       	brne	.-58     	; 0x1f84 <midi_input_callbacks+0x1f0>
    1fbe:	e8 cf       	rjmp	.-48     	; 0x1f90 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	1f 91       	pop	r17
    1fcc:	0f 91       	pop	r16
    1fce:	ff 90       	pop	r15
    1fd0:	ef 90       	pop	r14
    1fd2:	df 90       	pop	r13
    1fd4:	cf 90       	pop	r12
    1fd6:	bf 90       	pop	r11
    1fd8:	af 90       	pop	r10
    1fda:	08 95       	ret

00001fdc <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1fdc:	ef 92       	push	r14
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	7c 01       	movw	r14, r24
    1fe8:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    1fea:	86 2f       	mov	r24, r22
    1fec:	0e 94 67 0c 	call	0x18ce	; 0x18ce <midi_is_realtime>
    1ff0:	88 23       	and	r24, r24
    1ff2:	91 f0       	breq	.+36     	; 0x2018 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1ff4:	d7 01       	movw	r26, r14
    1ff6:	95 96       	adiw	r26, 0x25	; 37
    1ff8:	dc 91       	ld	r29, X
    1ffa:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	95 96       	adiw	r26, 0x25	; 37
    2000:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    2002:	c7 01       	movw	r24, r14
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	4c 2f       	mov	r20, r28
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	00 e0       	ldi	r16, 0x00	; 0
    200e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <midi_input_callbacks>
    device->input_state = state;
    2012:	f7 01       	movw	r30, r14
    2014:	d5 a3       	lds	r29, 0x55
    2016:	b7 c0       	rjmp	.+366    	; 0x2186 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    2018:	8c 2f       	mov	r24, r28
    201a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <midi_is_statusbyte>
    201e:	88 23       	and	r24, r24
    2020:	09 f4       	brne	.+2      	; 0x2024 <midi_process_byte+0x48>
    2022:	73 c0       	rjmp	.+230    	; 0x210a <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    2024:	d7 01       	movw	r26, r14
    2026:	95 96       	adiw	r26, 0x25	; 37
    2028:	8c 91       	ld	r24, X
    202a:	95 97       	sbiw	r26, 0x25	; 37
    202c:	84 30       	cpi	r24, 0x04	; 4
    202e:	49 f0       	breq	.+18     	; 0x2042 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    2030:	92 96       	adiw	r26, 0x22	; 34
    2032:	cc 93       	st	X, r28
    2034:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	97 96       	adiw	r26, 0x27	; 39
    203c:	9c 93       	st	X, r25
    203e:	8e 93       	st	-X, r24
    2040:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    2042:	8c 2f       	mov	r24, r28
    2044:	0e 94 6d 0c 	call	0x18da	; 0x18da <midi_packet_length>
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	41 f0       	breq	.+16     	; 0x205c <midi_process_byte+0x80>
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	00 f1       	brcs	.+64     	; 0x2090 <midi_process_byte+0xb4>
    2050:	82 30       	cpi	r24, 0x02	; 2
    2052:	a1 f0       	breq	.+40     	; 0x207c <midi_process_byte+0xa0>
    2054:	83 30       	cpi	r24, 0x03	; 3
    2056:	09 f0       	breq	.+2      	; 0x205a <midi_process_byte+0x7e>
    2058:	4f c0       	rjmp	.+158    	; 0x20f8 <midi_process_byte+0x11c>
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	f7 01       	movw	r30, r14
    2060:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    2062:	c7 01       	movw	r24, r14
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	4c 2f       	mov	r20, r28
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	00 e0       	ldi	r16, 0x00	; 0
    206e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <midi_input_callbacks>
        device->input_state = IDLE;
    2072:	d7 01       	movw	r26, r14
    2074:	95 96       	adiw	r26, 0x25	; 37
    2076:	1c 92       	st	X, r1
    2078:	95 97       	sbiw	r26, 0x25	; 37
        break;
    207a:	85 c0       	rjmp	.+266    	; 0x2186 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	f7 01       	movw	r30, r14
    2080:	85 a3       	lds	r24, 0x55
        break;
    2082:	81 c0       	rjmp	.+258    	; 0x2186 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    2084:	83 e0       	ldi	r24, 0x03	; 3
    2086:	d7 01       	movw	r26, r14
    2088:	95 96       	adiw	r26, 0x25	; 37
    208a:	8c 93       	st	X, r24
    208c:	95 97       	sbiw	r26, 0x25	; 37
        break;
    208e:	7b c0       	rjmp	.+246    	; 0x2186 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    2090:	c0 3f       	cpi	r28, 0xF0	; 240
    2092:	19 f0       	breq	.+6      	; 0x209a <midi_process_byte+0xbe>
    2094:	c7 3f       	cpi	r28, 0xF7	; 247
    2096:	59 f5       	brne	.+86     	; 0x20ee <midi_process_byte+0x112>
    2098:	0a c0       	rjmp	.+20     	; 0x20ae <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    209a:	84 e0       	ldi	r24, 0x04	; 4
    209c:	f7 01       	movw	r30, r14
    209e:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    20a0:	80 ef       	ldi	r24, 0xF0	; 240
    20a2:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	97 a3       	lds	r25, 0x57
    20aa:	86 a3       	lds	r24, 0x56
            break;
    20ac:	6c c0       	rjmp	.+216    	; 0x2186 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    20ae:	d7 01       	movw	r26, r14
    20b0:	96 96       	adiw	r26, 0x26	; 38
    20b2:	2d 91       	ld	r18, X+
    20b4:	3c 91       	ld	r19, X
    20b6:	97 97       	sbiw	r26, 0x27	; 39
    20b8:	c9 01       	movw	r24, r18
    20ba:	63 e0       	ldi	r22, 0x03	; 3
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
    20c2:	f7 01       	movw	r30, r14
    20c4:	e8 0f       	add	r30, r24
    20c6:	f9 1f       	adc	r31, r25
    20c8:	87 ef       	ldi	r24, 0xF7	; 247
    20ca:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    20cc:	b9 01       	movw	r22, r18
    20ce:	6f 5f       	subi	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	f7 01       	movw	r30, r14
    20d4:	77 a3       	lds	r23, 0x57
    20d6:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    20d8:	c7 01       	movw	r24, r14
    20da:	42 a1       	lds	r20, 0x42
    20dc:	23 a1       	lds	r18, 0x43
    20de:	04 a1       	lds	r16, 0x44
    20e0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    20e4:	d7 01       	movw	r26, r14
    20e6:	95 96       	adiw	r26, 0x25	; 37
    20e8:	1c 92       	st	X, r1
    20ea:	95 97       	sbiw	r26, 0x25	; 37
            break;
    20ec:	4c c0       	rjmp	.+152    	; 0x2186 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    20ee:	f7 01       	movw	r30, r14
    20f0:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    20f2:	17 a2       	lds	r17, 0x97
    20f4:	16 a2       	lds	r17, 0x96
    20f6:	47 c0       	rjmp	.+142    	; 0x2186 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    20f8:	d7 01       	movw	r26, r14
    20fa:	95 96       	adiw	r26, 0x25	; 37
    20fc:	1c 92       	st	X, r1
    20fe:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    2100:	97 96       	adiw	r26, 0x27	; 39
    2102:	1c 92       	st	X, r1
    2104:	1e 92       	st	-X, r1
    2106:	96 97       	sbiw	r26, 0x26	; 38
        break;
    2108:	3e c0       	rjmp	.+124    	; 0x2186 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    210a:	f7 01       	movw	r30, r14
    210c:	25 a1       	lds	r18, 0x45
    210e:	22 23       	and	r18, r18
    2110:	d1 f1       	breq	.+116    	; 0x2186 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    2112:	06 a0       	lds	r16, 0x86
    2114:	f7 a1       	lds	r31, 0x47
    2116:	e0 2d       	mov	r30, r0
    2118:	cf 01       	movw	r24, r30
    211a:	63 e0       	ldi	r22, 0x03	; 3
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
    2122:	ac 01       	movw	r20, r24
    2124:	8e 0d       	add	r24, r14
    2126:	9f 1d       	adc	r25, r15
    2128:	dc 01       	movw	r26, r24
    212a:	92 96       	adiw	r26, 0x22	; 34
    212c:	cc 93       	st	X, r28
    212e:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    2130:	bf 01       	movw	r22, r30
    2132:	6f 5f       	subi	r22, 0xFF	; 255
    2134:	7f 4f       	sbci	r23, 0xFF	; 255
    2136:	f7 01       	movw	r30, r14
    2138:	77 a3       	lds	r23, 0x57
    213a:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    213c:	41 30       	cpi	r20, 0x01	; 1
    213e:	51 05       	cpc	r21, r1
    2140:	91 f0       	breq	.+36     	; 0x2166 <midi_process_byte+0x18a>
    2142:	42 30       	cpi	r20, 0x02	; 2
    2144:	51 05       	cpc	r21, r1
    2146:	f9 f4       	brne	.+62     	; 0x2186 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    2148:	c7 01       	movw	r24, r14
    214a:	42 a1       	lds	r20, 0x42
    214c:	23 a1       	lds	r18, 0x43
    214e:	04 a1       	lds	r16, 0x44
    2150:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    2154:	f7 01       	movw	r30, r14
    2156:	85 a1       	lds	r24, 0x45
    2158:	84 30       	cpi	r24, 0x04	; 4
    215a:	a9 f0       	breq	.+42     	; 0x2186 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	97 a3       	lds	r25, 0x57
    2162:	86 a3       	lds	r24, 0x56
    2164:	10 c0       	rjmp	.+32     	; 0x2186 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	71 f4       	brne	.+28     	; 0x2186 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    216a:	c7 01       	movw	r24, r14
    216c:	42 a1       	lds	r20, 0x42
    216e:	23 a1       	lds	r18, 0x43
    2170:	00 e0       	ldi	r16, 0x00	; 0
    2172:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    2176:	f7 01       	movw	r30, r14
    2178:	85 a1       	lds	r24, 0x45
    217a:	84 30       	cpi	r24, 0x04	; 4
    217c:	21 f0       	breq	.+8      	; 0x2186 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	97 a3       	lds	r25, 0x57
    2184:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	0f 91       	pop	r16
    218c:	ff 90       	pop	r15
    218e:	ef 90       	pop	r14
    2190:	08 95       	ret

00002192 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    2192:	cf 92       	push	r12
    2194:	df 92       	push	r13
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    21a4:	dc 01       	movw	r26, r24
    21a6:	90 96       	adiw	r26, 0x20	; 32
    21a8:	ed 91       	ld	r30, X+
    21aa:	fc 91       	ld	r31, X
    21ac:	91 97       	sbiw	r26, 0x21	; 33
    21ae:	30 97       	sbiw	r30, 0x00	; 0
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    21b2:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    21b4:	0f 2e       	mov	r0, r31
    21b6:	f8 ee       	ldi	r31, 0xE8	; 232
    21b8:	ef 2e       	mov	r14, r31
    21ba:	ff 24       	eor	r15, r15
    21bc:	f0 2d       	mov	r31, r0
    21be:	ec 0c       	add	r14, r12
    21c0:	fd 1c       	adc	r15, r13
    21c2:	c7 01       	movw	r24, r14
    21c4:	0e 94 1e 0c 	call	0x183c	; 0x183c <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    21c8:	c8 2f       	mov	r28, r24
    21ca:	d0 e0       	ldi	r29, 0x00	; 0
    21cc:	20 97       	sbiw	r28, 0x00	; 0
    21ce:	99 f0       	breq	.+38     	; 0x21f6 <midi_device_process+0x64>
    21d0:	00 e0       	ldi	r16, 0x00	; 0
    21d2:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    21d4:	c7 01       	movw	r24, r14
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	0e 94 33 0c 	call	0x1866	; 0x1866 <bytequeue_get>
    21dc:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    21de:	c6 01       	movw	r24, r12
    21e0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    21e4:	c7 01       	movw	r24, r14
    21e6:	61 e0       	ldi	r22, 0x01	; 1
    21e8:	0e 94 44 0c 	call	0x1888	; 0x1888 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    21ec:	0f 5f       	subi	r16, 0xFF	; 255
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	0c 17       	cp	r16, r28
    21f2:	1d 07       	cpc	r17, r29
    21f4:	78 f3       	brcs	.-34     	; 0x21d4 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	ff 90       	pop	r15
    2200:	ef 90       	pop	r14
    2202:	df 90       	pop	r13
    2204:	cf 90       	pop	r12
    2206:	08 95       	ret

00002208 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    2208:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    220a:	67 e0       	ldi	r22, 0x07	; 7
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
    2212:	48 2f       	mov	r20, r24
   if (remainder)
    2214:	88 23       	and	r24, r24
    2216:	81 f0       	breq	.+32     	; 0x2238 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    2218:	c9 01       	movw	r24, r18
    221a:	67 e0       	ldi	r22, 0x07	; 7
    221c:	70 e0       	ldi	r23, 0x00	; 0
    221e:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
    2222:	cb 01       	movw	r24, r22
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	84 0f       	add	r24, r20
    2234:	91 1d       	adc	r25, r1
    2236:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    2238:	c9 01       	movw	r24, r18
    223a:	67 e0       	ldi	r22, 0x07	; 7
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
    2242:	cb 01       	movw	r24, r22
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
}
    2250:	08 95       	ret

00002252 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    2252:	48 2f       	mov	r20, r24
    2254:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    2256:	a1 f0       	breq	.+40     	; 0x2280 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    2258:	9c 01       	movw	r18, r24
    225a:	36 95       	lsr	r19
    225c:	27 95       	ror	r18
    225e:	36 95       	lsr	r19
    2260:	27 95       	ror	r18
    2262:	36 95       	lsr	r19
    2264:	27 95       	ror	r18
    2266:	c9 01       	movw	r24, r18
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	82 1b       	sub	r24, r18
    2276:	93 0b       	sbc	r25, r19
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	84 0f       	add	r24, r20
    227c:	91 1d       	adc	r25, r1
    227e:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    2280:	9c 01       	movw	r18, r24
    2282:	36 95       	lsr	r19
    2284:	27 95       	ror	r18
    2286:	36 95       	lsr	r19
    2288:	27 95       	ror	r18
    228a:	36 95       	lsr	r19
    228c:	27 95       	ror	r18
    228e:	c9 01       	movw	r24, r18
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	82 1b       	sub	r24, r18
    229e:	93 0b       	sbc	r25, r19
}
    22a0:	08 95       	ret

000022a2 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    22a2:	2f 92       	push	r2
    22a4:	3f 92       	push	r3
    22a6:	4f 92       	push	r4
    22a8:	5f 92       	push	r5
    22aa:	6f 92       	push	r6
    22ac:	7f 92       	push	r7
    22ae:	8f 92       	push	r8
    22b0:	9f 92       	push	r9
    22b2:	af 92       	push	r10
    22b4:	bf 92       	push	r11
    22b6:	cf 92       	push	r12
    22b8:	df 92       	push	r13
    22ba:	ef 92       	push	r14
    22bc:	ff 92       	push	r15
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <sysex_encode+0x26>
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <sysex_encode+0x28>
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <sysex_encode+0x2a>
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	1c 01       	movw	r2, r24
    22d2:	7a 83       	std	Y+2, r23	; 0x02
    22d4:	69 83       	std	Y+1, r22	; 0x01
    22d6:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    22d8:	ca 01       	movw	r24, r20
    22da:	67 e0       	ldi	r22, 0x07	; 7
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
    22e2:	2b 01       	movw	r4, r22
    22e4:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    22e6:	61 15       	cp	r22, r1
    22e8:	71 05       	cpc	r23, r1
    22ea:	b1 f1       	breq	.+108    	; 0x2358 <sysex_encode+0xb6>
    22ec:	81 01       	movw	r16, r2
    22ee:	e9 80       	ldd	r14, Y+1	; 0x01
    22f0:	fa 80       	ldd	r15, Y+2	; 0x02
    22f2:	cc 24       	eor	r12, r12
    22f4:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    22f6:	88 24       	eor	r8, r8
    22f8:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    22fa:	1e 83       	std	Y+6, r17	; 0x06
    22fc:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    22fe:	f8 01       	movw	r30, r16
    2300:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2302:	fc 82       	std	Y+4, r15	; 0x04
    2304:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2306:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    2308:	ab 81       	ldd	r26, Y+3	; 0x03
    230a:	bc 81       	ldd	r27, Y+4	; 0x04
    230c:	2d 91       	ld	r18, X+
    230e:	bc 83       	std	Y+4, r27	; 0x04
    2310:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    2312:	4f 5f       	subi	r20, 0xFF	; 255
    2314:	5f 4f       	sbci	r21, 0xFF	; 255
    2316:	82 2f       	mov	r24, r18
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	80 78       	andi	r24, 0x80	; 128
    231c:	90 70       	andi	r25, 0x00	; 0
    231e:	bc 01       	movw	r22, r24
    2320:	04 2e       	mov	r0, r20
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <sysex_encode+0x86>
    2324:	75 95       	asr	r23
    2326:	67 95       	ror	r22
    2328:	0a 94       	dec	r0
    232a:	e2 f7       	brpl	.-8      	; 0x2324 <sysex_encode+0x82>
    232c:	ad 81       	ldd	r26, Y+5	; 0x05
    232e:	be 81       	ldd	r27, Y+6	; 0x06
    2330:	8c 91       	ld	r24, X
    2332:	86 2b       	or	r24, r22
    2334:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    2336:	2f 77       	andi	r18, 0x7F	; 127
    2338:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    233a:	47 30       	cpi	r20, 0x07	; 7
    233c:	51 05       	cpc	r21, r1
    233e:	21 f7       	brne	.-56     	; 0x2308 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2340:	08 94       	sec
    2342:	c1 1c       	adc	r12, r1
    2344:	d1 1c       	adc	r13, r1
    2346:	08 5f       	subi	r16, 0xF8	; 248
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	e7 e0       	ldi	r30, 0x07	; 7
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	ee 0e       	add	r14, r30
    2350:	ff 1e       	adc	r15, r31
    2352:	ca 14       	cp	r12, r10
    2354:	db 04       	cpc	r13, r11
    2356:	89 f6       	brne	.-94     	; 0x22fa <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    2358:	c3 01       	movw	r24, r6
    235a:	67 e0       	ldi	r22, 0x07	; 7
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
   if (remainder) {
    2362:	88 23       	and	r24, r24
    2364:	d9 f1       	breq	.+118    	; 0x23dc <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    2366:	82 01       	movw	r16, r4
    2368:	00 0f       	add	r16, r16
    236a:	11 1f       	adc	r17, r17
    236c:	00 0f       	add	r16, r16
    236e:	11 1f       	adc	r17, r17
    2370:	00 0f       	add	r16, r16
    2372:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    2374:	78 01       	movw	r14, r16
    2376:	e4 18       	sub	r14, r4
    2378:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    237a:	d1 01       	movw	r26, r2
    237c:	a0 0f       	add	r26, r16
    237e:	b1 1f       	adc	r27, r17
    2380:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    2382:	68 2f       	mov	r22, r24
    2384:	70 e0       	ldi	r23, 0x00	; 0
    2386:	61 15       	cp	r22, r1
    2388:	71 05       	cpc	r23, r1
    238a:	19 f1       	breq	.+70     	; 0x23d2 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    238c:	e9 81       	ldd	r30, Y+1	; 0x01
    238e:	fa 81       	ldd	r31, Y+2	; 0x02
    2390:	ee 0e       	add	r14, r30
    2392:	ff 1e       	adc	r15, r31
    2394:	c8 01       	movw	r24, r16
    2396:	01 96       	adiw	r24, 0x01	; 1
    2398:	28 0e       	add	r2, r24
    239a:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    23a0:	f7 01       	movw	r30, r14
    23a2:	41 91       	ld	r20, Z+
    23a4:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    23a6:	2f 5f       	subi	r18, 0xFF	; 255
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	84 2f       	mov	r24, r20
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	80 78       	andi	r24, 0x80	; 128
    23b0:	90 70       	andi	r25, 0x00	; 0
    23b2:	02 2e       	mov	r0, r18
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <sysex_encode+0x118>
    23b6:	95 95       	asr	r25
    23b8:	87 95       	ror	r24
    23ba:	0a 94       	dec	r0
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <sysex_encode+0x114>
    23be:	9c 91       	ld	r25, X
    23c0:	89 2b       	or	r24, r25
    23c2:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    23c4:	4f 77       	andi	r20, 0x7F	; 127
    23c6:	f1 01       	movw	r30, r2
    23c8:	41 93       	st	Z+, r20
    23ca:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    23cc:	26 17       	cp	r18, r22
    23ce:	37 07       	cpc	r19, r23
    23d0:	38 f3       	brcs	.-50     	; 0x23a0 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    23d2:	c8 01       	movw	r24, r16
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	86 0f       	add	r24, r22
    23d8:	97 1f       	adc	r25, r23
    23da:	07 c0       	rjmp	.+14     	; 0x23ea <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    23dc:	c2 01       	movw	r24, r4
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	88 0f       	add	r24, r24
    23e8:	99 1f       	adc	r25, r25
   }
}
    23ea:	26 96       	adiw	r28, 0x06	; 6
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	1f 91       	pop	r17
    23fc:	0f 91       	pop	r16
    23fe:	ff 90       	pop	r15
    2400:	ef 90       	pop	r14
    2402:	df 90       	pop	r13
    2404:	cf 90       	pop	r12
    2406:	bf 90       	pop	r11
    2408:	af 90       	pop	r10
    240a:	9f 90       	pop	r9
    240c:	8f 90       	pop	r8
    240e:	7f 90       	pop	r7
    2410:	6f 90       	pop	r6
    2412:	5f 90       	pop	r5
    2414:	4f 90       	pop	r4
    2416:	3f 90       	pop	r3
    2418:	2f 90       	pop	r2
    241a:	08 95       	ret

0000241c <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    241c:	6f 92       	push	r6
    241e:	7f 92       	push	r7
    2420:	8f 92       	push	r8
    2422:	9f 92       	push	r9
    2424:	af 92       	push	r10
    2426:	bf 92       	push	r11
    2428:	cf 92       	push	r12
    242a:	df 92       	push	r13
    242c:	ef 92       	push	r14
    242e:	ff 92       	push	r15
    2430:	0f 93       	push	r16
    2432:	1f 93       	push	r17
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	3c 01       	movw	r6, r24
    243a:	4b 01       	movw	r8, r22
    243c:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    243e:	42 30       	cpi	r20, 0x02	; 2
    2440:	51 05       	cpc	r21, r1
    2442:	08 f4       	brcc	.+2      	; 0x2446 <sysex_decode+0x2a>
    2444:	6f c0       	rjmp	.+222    	; 0x2524 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    2446:	7a 01       	movw	r14, r20
    2448:	f6 94       	lsr	r15
    244a:	e7 94       	ror	r14
    244c:	f6 94       	lsr	r15
    244e:	e7 94       	ror	r14
    2450:	f6 94       	lsr	r15
    2452:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    2454:	e1 14       	cp	r14, r1
    2456:	f1 04       	cpc	r15, r1
    2458:	29 f1       	breq	.+74     	; 0x24a4 <sysex_decode+0x88>
    245a:	eb 01       	movw	r28, r22
    245c:	b3 01       	movw	r22, r6
    245e:	00 e0       	ldi	r16, 0x00	; 0
    2460:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2462:	cc 24       	eor	r12, r12
    2464:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2466:	de 01       	movw	r26, r28
    2468:	11 96       	adiw	r26, 0x01	; 1
    246a:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    246c:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    246e:	2d 91       	ld	r18, X+
    2470:	2f 77       	andi	r18, 0x7F	; 127
    2472:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2474:	4f 5f       	subi	r20, 0xFF	; 255
    2476:	5f 4f       	sbci	r21, 0xFF	; 255
    2478:	88 81       	ld	r24, Y
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	04 2e       	mov	r0, r20
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <sysex_decode+0x68>
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	0a 94       	dec	r0
    2486:	e2 f7       	brpl	.-8      	; 0x2480 <sysex_decode+0x64>
    2488:	80 78       	andi	r24, 0x80	; 128
    248a:	28 2b       	or	r18, r24
    248c:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    248e:	47 30       	cpi	r20, 0x07	; 7
    2490:	51 05       	cpc	r21, r1
    2492:	69 f7       	brne	.-38     	; 0x246e <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    2494:	0f 5f       	subi	r16, 0xFF	; 255
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	28 96       	adiw	r28, 0x08	; 8
    249a:	69 5f       	subi	r22, 0xF9	; 249
    249c:	7f 4f       	sbci	r23, 0xFF	; 255
    249e:	0e 15       	cp	r16, r14
    24a0:	1f 05       	cpc	r17, r15
    24a2:	09 f7       	brne	.-62     	; 0x2466 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    24a4:	5a 2d       	mov	r21, r10
    24a6:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    24a8:	99 f1       	breq	.+102    	; 0x2510 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    24aa:	e7 01       	movw	r28, r14
    24ac:	cc 0f       	add	r28, r28
    24ae:	dd 1f       	adc	r29, r29
    24b0:	cc 0f       	add	r28, r28
    24b2:	dd 1f       	adc	r29, r29
    24b4:	cc 0f       	add	r28, r28
    24b6:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    24b8:	8e 01       	movw	r16, r28
    24ba:	0e 19       	sub	r16, r14
    24bc:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    24be:	65 2f       	mov	r22, r21
    24c0:	70 e0       	ldi	r23, 0x00	; 0
    24c2:	61 50       	subi	r22, 0x01	; 1
    24c4:	70 40       	sbci	r23, 0x00	; 0
    24c6:	f9 f0       	breq	.+62     	; 0x2506 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    24c8:	ce 01       	movw	r24, r28
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	d4 01       	movw	r26, r8
    24ce:	a8 0f       	add	r26, r24
    24d0:	b9 1f       	adc	r27, r25
    24d2:	f3 01       	movw	r30, r6
    24d4:	e0 0f       	add	r30, r16
    24d6:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    24dc:	c8 0d       	add	r28, r8
    24de:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    24e0:	4d 91       	ld	r20, X+
    24e2:	4f 77       	andi	r20, 0x7F	; 127
    24e4:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    24e6:	2f 5f       	subi	r18, 0xFF	; 255
    24e8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ea:	88 81       	ld	r24, Y
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	02 2e       	mov	r0, r18
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <sysex_decode+0xda>
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	0a 94       	dec	r0
    24f8:	e2 f7       	brpl	.-8      	; 0x24f2 <sysex_decode+0xd6>
    24fa:	80 78       	andi	r24, 0x80	; 128
    24fc:	48 2b       	or	r20, r24
    24fe:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2500:	26 17       	cp	r18, r22
    2502:	37 07       	cpc	r19, r23
    2504:	68 f3       	brcs	.-38     	; 0x24e0 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    2506:	c8 01       	movw	r24, r16
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	85 0f       	add	r24, r21
    250c:	91 1d       	adc	r25, r1
    250e:	0c c0       	rjmp	.+24     	; 0x2528 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    2510:	c7 01       	movw	r24, r14
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	8e 19       	sub	r24, r14
    2520:	9f 09       	sbc	r25, r15
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	ff 90       	pop	r15
    2532:	ef 90       	pop	r14
    2534:	df 90       	pop	r13
    2536:	cf 90       	pop	r12
    2538:	bf 90       	pop	r11
    253a:	af 90       	pop	r10
    253c:	9f 90       	pop	r9
    253e:	8f 90       	pop	r8
    2540:	7f 90       	pop	r7
    2542:	6f 90       	pop	r6
    2544:	08 95       	ret

00002546 <__divsf3>:
    2546:	0c d0       	rcall	.+24     	; 0x2560 <__divsf3x>
    2548:	e6 c0       	rjmp	.+460    	; 0x2716 <__fp_round>
    254a:	de d0       	rcall	.+444    	; 0x2708 <__fp_pscB>
    254c:	40 f0       	brcs	.+16     	; 0x255e <__divsf3+0x18>
    254e:	d5 d0       	rcall	.+426    	; 0x26fa <__fp_pscA>
    2550:	30 f0       	brcs	.+12     	; 0x255e <__divsf3+0x18>
    2552:	21 f4       	brne	.+8      	; 0x255c <__divsf3+0x16>
    2554:	5f 3f       	cpi	r21, 0xFF	; 255
    2556:	19 f0       	breq	.+6      	; 0x255e <__divsf3+0x18>
    2558:	c7 c0       	rjmp	.+398    	; 0x26e8 <__fp_inf>
    255a:	51 11       	cpse	r21, r1
    255c:	10 c1       	rjmp	.+544    	; 0x277e <__fp_szero>
    255e:	ca c0       	rjmp	.+404    	; 0x26f4 <__fp_nan>

00002560 <__divsf3x>:
    2560:	eb d0       	rcall	.+470    	; 0x2738 <__fp_split3>
    2562:	98 f3       	brcs	.-26     	; 0x254a <__divsf3+0x4>

00002564 <__divsf3_pse>:
    2564:	99 23       	and	r25, r25
    2566:	c9 f3       	breq	.-14     	; 0x255a <__divsf3+0x14>
    2568:	55 23       	and	r21, r21
    256a:	b1 f3       	breq	.-20     	; 0x2558 <__divsf3+0x12>
    256c:	95 1b       	sub	r25, r21
    256e:	55 0b       	sbc	r21, r21
    2570:	bb 27       	eor	r27, r27
    2572:	aa 27       	eor	r26, r26
    2574:	62 17       	cp	r22, r18
    2576:	73 07       	cpc	r23, r19
    2578:	84 07       	cpc	r24, r20
    257a:	38 f0       	brcs	.+14     	; 0x258a <__divsf3_pse+0x26>
    257c:	9f 5f       	subi	r25, 0xFF	; 255
    257e:	5f 4f       	sbci	r21, 0xFF	; 255
    2580:	22 0f       	add	r18, r18
    2582:	33 1f       	adc	r19, r19
    2584:	44 1f       	adc	r20, r20
    2586:	aa 1f       	adc	r26, r26
    2588:	a9 f3       	breq	.-22     	; 0x2574 <__divsf3_pse+0x10>
    258a:	33 d0       	rcall	.+102    	; 0x25f2 <__divsf3_pse+0x8e>
    258c:	0e 2e       	mov	r0, r30
    258e:	3a f0       	brmi	.+14     	; 0x259e <__divsf3_pse+0x3a>
    2590:	e0 e8       	ldi	r30, 0x80	; 128
    2592:	30 d0       	rcall	.+96     	; 0x25f4 <__divsf3_pse+0x90>
    2594:	91 50       	subi	r25, 0x01	; 1
    2596:	50 40       	sbci	r21, 0x00	; 0
    2598:	e6 95       	lsr	r30
    259a:	00 1c       	adc	r0, r0
    259c:	ca f7       	brpl	.-14     	; 0x2590 <__divsf3_pse+0x2c>
    259e:	29 d0       	rcall	.+82     	; 0x25f2 <__divsf3_pse+0x8e>
    25a0:	fe 2f       	mov	r31, r30
    25a2:	27 d0       	rcall	.+78     	; 0x25f2 <__divsf3_pse+0x8e>
    25a4:	66 0f       	add	r22, r22
    25a6:	77 1f       	adc	r23, r23
    25a8:	88 1f       	adc	r24, r24
    25aa:	bb 1f       	adc	r27, r27
    25ac:	26 17       	cp	r18, r22
    25ae:	37 07       	cpc	r19, r23
    25b0:	48 07       	cpc	r20, r24
    25b2:	ab 07       	cpc	r26, r27
    25b4:	b0 e8       	ldi	r27, 0x80	; 128
    25b6:	09 f0       	breq	.+2      	; 0x25ba <__divsf3_pse+0x56>
    25b8:	bb 0b       	sbc	r27, r27
    25ba:	80 2d       	mov	r24, r0
    25bc:	bf 01       	movw	r22, r30
    25be:	ff 27       	eor	r31, r31
    25c0:	93 58       	subi	r25, 0x83	; 131
    25c2:	5f 4f       	sbci	r21, 0xFF	; 255
    25c4:	2a f0       	brmi	.+10     	; 0x25d0 <__divsf3_pse+0x6c>
    25c6:	9e 3f       	cpi	r25, 0xFE	; 254
    25c8:	51 05       	cpc	r21, r1
    25ca:	68 f0       	brcs	.+26     	; 0x25e6 <__divsf3_pse+0x82>
    25cc:	8d c0       	rjmp	.+282    	; 0x26e8 <__fp_inf>
    25ce:	d7 c0       	rjmp	.+430    	; 0x277e <__fp_szero>
    25d0:	5f 3f       	cpi	r21, 0xFF	; 255
    25d2:	ec f3       	brlt	.-6      	; 0x25ce <__divsf3_pse+0x6a>
    25d4:	98 3e       	cpi	r25, 0xE8	; 232
    25d6:	dc f3       	brlt	.-10     	; 0x25ce <__divsf3_pse+0x6a>
    25d8:	86 95       	lsr	r24
    25da:	77 95       	ror	r23
    25dc:	67 95       	ror	r22
    25de:	b7 95       	ror	r27
    25e0:	f7 95       	ror	r31
    25e2:	9f 5f       	subi	r25, 0xFF	; 255
    25e4:	c9 f7       	brne	.-14     	; 0x25d8 <__divsf3_pse+0x74>
    25e6:	88 0f       	add	r24, r24
    25e8:	91 1d       	adc	r25, r1
    25ea:	96 95       	lsr	r25
    25ec:	87 95       	ror	r24
    25ee:	97 f9       	bld	r25, 7
    25f0:	08 95       	ret
    25f2:	e1 e0       	ldi	r30, 0x01	; 1
    25f4:	66 0f       	add	r22, r22
    25f6:	77 1f       	adc	r23, r23
    25f8:	88 1f       	adc	r24, r24
    25fa:	bb 1f       	adc	r27, r27
    25fc:	62 17       	cp	r22, r18
    25fe:	73 07       	cpc	r23, r19
    2600:	84 07       	cpc	r24, r20
    2602:	ba 07       	cpc	r27, r26
    2604:	20 f0       	brcs	.+8      	; 0x260e <__divsf3_pse+0xaa>
    2606:	62 1b       	sub	r22, r18
    2608:	73 0b       	sbc	r23, r19
    260a:	84 0b       	sbc	r24, r20
    260c:	ba 0b       	sbc	r27, r26
    260e:	ee 1f       	adc	r30, r30
    2610:	88 f7       	brcc	.-30     	; 0x25f4 <__divsf3_pse+0x90>
    2612:	e0 95       	com	r30
    2614:	08 95       	ret

00002616 <__fixunssfsi>:
    2616:	98 d0       	rcall	.+304    	; 0x2748 <__fp_splitA>
    2618:	88 f0       	brcs	.+34     	; 0x263c <__fixunssfsi+0x26>
    261a:	9f 57       	subi	r25, 0x7F	; 127
    261c:	90 f0       	brcs	.+36     	; 0x2642 <__fixunssfsi+0x2c>
    261e:	b9 2f       	mov	r27, r25
    2620:	99 27       	eor	r25, r25
    2622:	b7 51       	subi	r27, 0x17	; 23
    2624:	a0 f0       	brcs	.+40     	; 0x264e <__fixunssfsi+0x38>
    2626:	d1 f0       	breq	.+52     	; 0x265c <__fixunssfsi+0x46>
    2628:	66 0f       	add	r22, r22
    262a:	77 1f       	adc	r23, r23
    262c:	88 1f       	adc	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	1a f0       	brmi	.+6      	; 0x2638 <__fixunssfsi+0x22>
    2632:	ba 95       	dec	r27
    2634:	c9 f7       	brne	.-14     	; 0x2628 <__fixunssfsi+0x12>
    2636:	12 c0       	rjmp	.+36     	; 0x265c <__fixunssfsi+0x46>
    2638:	b1 30       	cpi	r27, 0x01	; 1
    263a:	81 f0       	breq	.+32     	; 0x265c <__fixunssfsi+0x46>
    263c:	9f d0       	rcall	.+318    	; 0x277c <__fp_zero>
    263e:	b1 e0       	ldi	r27, 0x01	; 1
    2640:	08 95       	ret
    2642:	9c c0       	rjmp	.+312    	; 0x277c <__fp_zero>
    2644:	67 2f       	mov	r22, r23
    2646:	78 2f       	mov	r23, r24
    2648:	88 27       	eor	r24, r24
    264a:	b8 5f       	subi	r27, 0xF8	; 248
    264c:	39 f0       	breq	.+14     	; 0x265c <__fixunssfsi+0x46>
    264e:	b9 3f       	cpi	r27, 0xF9	; 249
    2650:	cc f3       	brlt	.-14     	; 0x2644 <__fixunssfsi+0x2e>
    2652:	86 95       	lsr	r24
    2654:	77 95       	ror	r23
    2656:	67 95       	ror	r22
    2658:	b3 95       	inc	r27
    265a:	d9 f7       	brne	.-10     	; 0x2652 <__fixunssfsi+0x3c>
    265c:	3e f4       	brtc	.+14     	; 0x266c <__fixunssfsi+0x56>
    265e:	90 95       	com	r25
    2660:	80 95       	com	r24
    2662:	70 95       	com	r23
    2664:	61 95       	neg	r22
    2666:	7f 4f       	sbci	r23, 0xFF	; 255
    2668:	8f 4f       	sbci	r24, 0xFF	; 255
    266a:	9f 4f       	sbci	r25, 0xFF	; 255
    266c:	08 95       	ret

0000266e <__floatunsisf>:
    266e:	e8 94       	clt
    2670:	09 c0       	rjmp	.+18     	; 0x2684 <__floatsisf+0x12>

00002672 <__floatsisf>:
    2672:	97 fb       	bst	r25, 7
    2674:	3e f4       	brtc	.+14     	; 0x2684 <__floatsisf+0x12>
    2676:	90 95       	com	r25
    2678:	80 95       	com	r24
    267a:	70 95       	com	r23
    267c:	61 95       	neg	r22
    267e:	7f 4f       	sbci	r23, 0xFF	; 255
    2680:	8f 4f       	sbci	r24, 0xFF	; 255
    2682:	9f 4f       	sbci	r25, 0xFF	; 255
    2684:	99 23       	and	r25, r25
    2686:	a9 f0       	breq	.+42     	; 0x26b2 <__floatsisf+0x40>
    2688:	f9 2f       	mov	r31, r25
    268a:	96 e9       	ldi	r25, 0x96	; 150
    268c:	bb 27       	eor	r27, r27
    268e:	93 95       	inc	r25
    2690:	f6 95       	lsr	r31
    2692:	87 95       	ror	r24
    2694:	77 95       	ror	r23
    2696:	67 95       	ror	r22
    2698:	b7 95       	ror	r27
    269a:	f1 11       	cpse	r31, r1
    269c:	f8 cf       	rjmp	.-16     	; 0x268e <__floatsisf+0x1c>
    269e:	fa f4       	brpl	.+62     	; 0x26de <__floatsisf+0x6c>
    26a0:	bb 0f       	add	r27, r27
    26a2:	11 f4       	brne	.+4      	; 0x26a8 <__floatsisf+0x36>
    26a4:	60 ff       	sbrs	r22, 0
    26a6:	1b c0       	rjmp	.+54     	; 0x26de <__floatsisf+0x6c>
    26a8:	6f 5f       	subi	r22, 0xFF	; 255
    26aa:	7f 4f       	sbci	r23, 0xFF	; 255
    26ac:	8f 4f       	sbci	r24, 0xFF	; 255
    26ae:	9f 4f       	sbci	r25, 0xFF	; 255
    26b0:	16 c0       	rjmp	.+44     	; 0x26de <__floatsisf+0x6c>
    26b2:	88 23       	and	r24, r24
    26b4:	11 f0       	breq	.+4      	; 0x26ba <__floatsisf+0x48>
    26b6:	96 e9       	ldi	r25, 0x96	; 150
    26b8:	11 c0       	rjmp	.+34     	; 0x26dc <__floatsisf+0x6a>
    26ba:	77 23       	and	r23, r23
    26bc:	21 f0       	breq	.+8      	; 0x26c6 <__floatsisf+0x54>
    26be:	9e e8       	ldi	r25, 0x8E	; 142
    26c0:	87 2f       	mov	r24, r23
    26c2:	76 2f       	mov	r23, r22
    26c4:	05 c0       	rjmp	.+10     	; 0x26d0 <__floatsisf+0x5e>
    26c6:	66 23       	and	r22, r22
    26c8:	71 f0       	breq	.+28     	; 0x26e6 <__floatsisf+0x74>
    26ca:	96 e8       	ldi	r25, 0x86	; 134
    26cc:	86 2f       	mov	r24, r22
    26ce:	70 e0       	ldi	r23, 0x00	; 0
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	2a f0       	brmi	.+10     	; 0x26de <__floatsisf+0x6c>
    26d4:	9a 95       	dec	r25
    26d6:	66 0f       	add	r22, r22
    26d8:	77 1f       	adc	r23, r23
    26da:	88 1f       	adc	r24, r24
    26dc:	da f7       	brpl	.-10     	; 0x26d4 <__floatsisf+0x62>
    26de:	88 0f       	add	r24, r24
    26e0:	96 95       	lsr	r25
    26e2:	87 95       	ror	r24
    26e4:	97 f9       	bld	r25, 7
    26e6:	08 95       	ret

000026e8 <__fp_inf>:
    26e8:	97 f9       	bld	r25, 7
    26ea:	9f 67       	ori	r25, 0x7F	; 127
    26ec:	80 e8       	ldi	r24, 0x80	; 128
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	08 95       	ret

000026f4 <__fp_nan>:
    26f4:	9f ef       	ldi	r25, 0xFF	; 255
    26f6:	80 ec       	ldi	r24, 0xC0	; 192
    26f8:	08 95       	ret

000026fa <__fp_pscA>:
    26fa:	00 24       	eor	r0, r0
    26fc:	0a 94       	dec	r0
    26fe:	16 16       	cp	r1, r22
    2700:	17 06       	cpc	r1, r23
    2702:	18 06       	cpc	r1, r24
    2704:	09 06       	cpc	r0, r25
    2706:	08 95       	ret

00002708 <__fp_pscB>:
    2708:	00 24       	eor	r0, r0
    270a:	0a 94       	dec	r0
    270c:	12 16       	cp	r1, r18
    270e:	13 06       	cpc	r1, r19
    2710:	14 06       	cpc	r1, r20
    2712:	05 06       	cpc	r0, r21
    2714:	08 95       	ret

00002716 <__fp_round>:
    2716:	09 2e       	mov	r0, r25
    2718:	03 94       	inc	r0
    271a:	00 0c       	add	r0, r0
    271c:	11 f4       	brne	.+4      	; 0x2722 <__fp_round+0xc>
    271e:	88 23       	and	r24, r24
    2720:	52 f0       	brmi	.+20     	; 0x2736 <__fp_round+0x20>
    2722:	bb 0f       	add	r27, r27
    2724:	40 f4       	brcc	.+16     	; 0x2736 <__fp_round+0x20>
    2726:	bf 2b       	or	r27, r31
    2728:	11 f4       	brne	.+4      	; 0x272e <__fp_round+0x18>
    272a:	60 ff       	sbrs	r22, 0
    272c:	04 c0       	rjmp	.+8      	; 0x2736 <__fp_round+0x20>
    272e:	6f 5f       	subi	r22, 0xFF	; 255
    2730:	7f 4f       	sbci	r23, 0xFF	; 255
    2732:	8f 4f       	sbci	r24, 0xFF	; 255
    2734:	9f 4f       	sbci	r25, 0xFF	; 255
    2736:	08 95       	ret

00002738 <__fp_split3>:
    2738:	57 fd       	sbrc	r21, 7
    273a:	90 58       	subi	r25, 0x80	; 128
    273c:	44 0f       	add	r20, r20
    273e:	55 1f       	adc	r21, r21
    2740:	59 f0       	breq	.+22     	; 0x2758 <__fp_splitA+0x10>
    2742:	5f 3f       	cpi	r21, 0xFF	; 255
    2744:	71 f0       	breq	.+28     	; 0x2762 <__fp_splitA+0x1a>
    2746:	47 95       	ror	r20

00002748 <__fp_splitA>:
    2748:	88 0f       	add	r24, r24
    274a:	97 fb       	bst	r25, 7
    274c:	99 1f       	adc	r25, r25
    274e:	61 f0       	breq	.+24     	; 0x2768 <__fp_splitA+0x20>
    2750:	9f 3f       	cpi	r25, 0xFF	; 255
    2752:	79 f0       	breq	.+30     	; 0x2772 <__fp_splitA+0x2a>
    2754:	87 95       	ror	r24
    2756:	08 95       	ret
    2758:	12 16       	cp	r1, r18
    275a:	13 06       	cpc	r1, r19
    275c:	14 06       	cpc	r1, r20
    275e:	55 1f       	adc	r21, r21
    2760:	f2 cf       	rjmp	.-28     	; 0x2746 <__fp_split3+0xe>
    2762:	46 95       	lsr	r20
    2764:	f1 df       	rcall	.-30     	; 0x2748 <__fp_splitA>
    2766:	08 c0       	rjmp	.+16     	; 0x2778 <__fp_splitA+0x30>
    2768:	16 16       	cp	r1, r22
    276a:	17 06       	cpc	r1, r23
    276c:	18 06       	cpc	r1, r24
    276e:	99 1f       	adc	r25, r25
    2770:	f1 cf       	rjmp	.-30     	; 0x2754 <__fp_splitA+0xc>
    2772:	86 95       	lsr	r24
    2774:	71 05       	cpc	r23, r1
    2776:	61 05       	cpc	r22, r1
    2778:	08 94       	sec
    277a:	08 95       	ret

0000277c <__fp_zero>:
    277c:	e8 94       	clt

0000277e <__fp_szero>:
    277e:	bb 27       	eor	r27, r27
    2780:	66 27       	eor	r22, r22
    2782:	77 27       	eor	r23, r23
    2784:	cb 01       	movw	r24, r22
    2786:	97 f9       	bld	r25, 7
    2788:	08 95       	ret

0000278a <__mulsf3>:
    278a:	0b d0       	rcall	.+22     	; 0x27a2 <__mulsf3x>
    278c:	c4 cf       	rjmp	.-120    	; 0x2716 <__fp_round>
    278e:	b5 df       	rcall	.-150    	; 0x26fa <__fp_pscA>
    2790:	28 f0       	brcs	.+10     	; 0x279c <__mulsf3+0x12>
    2792:	ba df       	rcall	.-140    	; 0x2708 <__fp_pscB>
    2794:	18 f0       	brcs	.+6      	; 0x279c <__mulsf3+0x12>
    2796:	95 23       	and	r25, r21
    2798:	09 f0       	breq	.+2      	; 0x279c <__mulsf3+0x12>
    279a:	a6 cf       	rjmp	.-180    	; 0x26e8 <__fp_inf>
    279c:	ab cf       	rjmp	.-170    	; 0x26f4 <__fp_nan>
    279e:	11 24       	eor	r1, r1
    27a0:	ee cf       	rjmp	.-36     	; 0x277e <__fp_szero>

000027a2 <__mulsf3x>:
    27a2:	ca df       	rcall	.-108    	; 0x2738 <__fp_split3>
    27a4:	a0 f3       	brcs	.-24     	; 0x278e <__mulsf3+0x4>

000027a6 <__mulsf3_pse>:
    27a6:	95 9f       	mul	r25, r21
    27a8:	d1 f3       	breq	.-12     	; 0x279e <__mulsf3+0x14>
    27aa:	95 0f       	add	r25, r21
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	55 1f       	adc	r21, r21
    27b0:	62 9f       	mul	r22, r18
    27b2:	f0 01       	movw	r30, r0
    27b4:	72 9f       	mul	r23, r18
    27b6:	bb 27       	eor	r27, r27
    27b8:	f0 0d       	add	r31, r0
    27ba:	b1 1d       	adc	r27, r1
    27bc:	63 9f       	mul	r22, r19
    27be:	aa 27       	eor	r26, r26
    27c0:	f0 0d       	add	r31, r0
    27c2:	b1 1d       	adc	r27, r1
    27c4:	aa 1f       	adc	r26, r26
    27c6:	64 9f       	mul	r22, r20
    27c8:	66 27       	eor	r22, r22
    27ca:	b0 0d       	add	r27, r0
    27cc:	a1 1d       	adc	r26, r1
    27ce:	66 1f       	adc	r22, r22
    27d0:	82 9f       	mul	r24, r18
    27d2:	22 27       	eor	r18, r18
    27d4:	b0 0d       	add	r27, r0
    27d6:	a1 1d       	adc	r26, r1
    27d8:	62 1f       	adc	r22, r18
    27da:	73 9f       	mul	r23, r19
    27dc:	b0 0d       	add	r27, r0
    27de:	a1 1d       	adc	r26, r1
    27e0:	62 1f       	adc	r22, r18
    27e2:	83 9f       	mul	r24, r19
    27e4:	a0 0d       	add	r26, r0
    27e6:	61 1d       	adc	r22, r1
    27e8:	22 1f       	adc	r18, r18
    27ea:	74 9f       	mul	r23, r20
    27ec:	33 27       	eor	r19, r19
    27ee:	a0 0d       	add	r26, r0
    27f0:	61 1d       	adc	r22, r1
    27f2:	23 1f       	adc	r18, r19
    27f4:	84 9f       	mul	r24, r20
    27f6:	60 0d       	add	r22, r0
    27f8:	21 1d       	adc	r18, r1
    27fa:	82 2f       	mov	r24, r18
    27fc:	76 2f       	mov	r23, r22
    27fe:	6a 2f       	mov	r22, r26
    2800:	11 24       	eor	r1, r1
    2802:	9f 57       	subi	r25, 0x7F	; 127
    2804:	50 40       	sbci	r21, 0x00	; 0
    2806:	8a f0       	brmi	.+34     	; 0x282a <__mulsf3_pse+0x84>
    2808:	e1 f0       	breq	.+56     	; 0x2842 <__mulsf3_pse+0x9c>
    280a:	88 23       	and	r24, r24
    280c:	4a f0       	brmi	.+18     	; 0x2820 <__mulsf3_pse+0x7a>
    280e:	ee 0f       	add	r30, r30
    2810:	ff 1f       	adc	r31, r31
    2812:	bb 1f       	adc	r27, r27
    2814:	66 1f       	adc	r22, r22
    2816:	77 1f       	adc	r23, r23
    2818:	88 1f       	adc	r24, r24
    281a:	91 50       	subi	r25, 0x01	; 1
    281c:	50 40       	sbci	r21, 0x00	; 0
    281e:	a9 f7       	brne	.-22     	; 0x280a <__mulsf3_pse+0x64>
    2820:	9e 3f       	cpi	r25, 0xFE	; 254
    2822:	51 05       	cpc	r21, r1
    2824:	70 f0       	brcs	.+28     	; 0x2842 <__mulsf3_pse+0x9c>
    2826:	60 cf       	rjmp	.-320    	; 0x26e8 <__fp_inf>
    2828:	aa cf       	rjmp	.-172    	; 0x277e <__fp_szero>
    282a:	5f 3f       	cpi	r21, 0xFF	; 255
    282c:	ec f3       	brlt	.-6      	; 0x2828 <__mulsf3_pse+0x82>
    282e:	98 3e       	cpi	r25, 0xE8	; 232
    2830:	dc f3       	brlt	.-10     	; 0x2828 <__mulsf3_pse+0x82>
    2832:	86 95       	lsr	r24
    2834:	77 95       	ror	r23
    2836:	67 95       	ror	r22
    2838:	b7 95       	ror	r27
    283a:	f7 95       	ror	r31
    283c:	e7 95       	ror	r30
    283e:	9f 5f       	subi	r25, 0xFF	; 255
    2840:	c1 f7       	brne	.-16     	; 0x2832 <__mulsf3_pse+0x8c>
    2842:	fe 2b       	or	r31, r30
    2844:	88 0f       	add	r24, r24
    2846:	91 1d       	adc	r25, r1
    2848:	96 95       	lsr	r25
    284a:	87 95       	ror	r24
    284c:	97 f9       	bld	r25, 7
    284e:	08 95       	ret

00002850 <__udivmodhi4>:
    2850:	aa 1b       	sub	r26, r26
    2852:	bb 1b       	sub	r27, r27
    2854:	51 e1       	ldi	r21, 0x11	; 17
    2856:	07 c0       	rjmp	.+14     	; 0x2866 <__udivmodhi4_ep>

00002858 <__udivmodhi4_loop>:
    2858:	aa 1f       	adc	r26, r26
    285a:	bb 1f       	adc	r27, r27
    285c:	a6 17       	cp	r26, r22
    285e:	b7 07       	cpc	r27, r23
    2860:	10 f0       	brcs	.+4      	; 0x2866 <__udivmodhi4_ep>
    2862:	a6 1b       	sub	r26, r22
    2864:	b7 0b       	sbc	r27, r23

00002866 <__udivmodhi4_ep>:
    2866:	88 1f       	adc	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	5a 95       	dec	r21
    286c:	a9 f7       	brne	.-22     	; 0x2858 <__udivmodhi4_loop>
    286e:	80 95       	com	r24
    2870:	90 95       	com	r25
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	08 95       	ret

00002878 <__divmodhi4>:
    2878:	97 fb       	bst	r25, 7
    287a:	09 2e       	mov	r0, r25
    287c:	07 26       	eor	r0, r23
    287e:	0a d0       	rcall	.+20     	; 0x2894 <__divmodhi4_neg1>
    2880:	77 fd       	sbrc	r23, 7
    2882:	04 d0       	rcall	.+8      	; 0x288c <__divmodhi4_neg2>
    2884:	e5 df       	rcall	.-54     	; 0x2850 <__udivmodhi4>
    2886:	06 d0       	rcall	.+12     	; 0x2894 <__divmodhi4_neg1>
    2888:	00 20       	and	r0, r0
    288a:	1a f4       	brpl	.+6      	; 0x2892 <__divmodhi4_exit>

0000288c <__divmodhi4_neg2>:
    288c:	70 95       	com	r23
    288e:	61 95       	neg	r22
    2890:	7f 4f       	sbci	r23, 0xFF	; 255

00002892 <__divmodhi4_exit>:
    2892:	08 95       	ret

00002894 <__divmodhi4_neg1>:
    2894:	f6 f7       	brtc	.-4      	; 0x2892 <__divmodhi4_exit>
    2896:	90 95       	com	r25
    2898:	81 95       	neg	r24
    289a:	9f 4f       	sbci	r25, 0xFF	; 255
    289c:	08 95       	ret

0000289e <memcpy>:
    289e:	fb 01       	movw	r30, r22
    28a0:	dc 01       	movw	r26, r24
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <memcpy+0xa>
    28a4:	01 90       	ld	r0, Z+
    28a6:	0d 92       	st	X+, r0
    28a8:	41 50       	subi	r20, 0x01	; 1
    28aa:	50 40       	sbci	r21, 0x00	; 0
    28ac:	d8 f7       	brcc	.-10     	; 0x28a4 <memcpy+0x6>
    28ae:	08 95       	ret

000028b0 <memmove>:
    28b0:	68 17       	cp	r22, r24
    28b2:	79 07       	cpc	r23, r25
    28b4:	68 f4       	brcc	.+26     	; 0x28d0 <memmove+0x20>
    28b6:	fb 01       	movw	r30, r22
    28b8:	dc 01       	movw	r26, r24
    28ba:	e4 0f       	add	r30, r20
    28bc:	f5 1f       	adc	r31, r21
    28be:	a4 0f       	add	r26, r20
    28c0:	b5 1f       	adc	r27, r21
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <memmove+0x18>
    28c4:	02 90       	ld	r0, -Z
    28c6:	0e 92       	st	-X, r0
    28c8:	41 50       	subi	r20, 0x01	; 1
    28ca:	50 40       	sbci	r21, 0x00	; 0
    28cc:	d8 f7       	brcc	.-10     	; 0x28c4 <memmove+0x14>
    28ce:	08 95       	ret
    28d0:	0c 94 4f 14 	jmp	0x289e	; 0x289e <memcpy>

000028d4 <_exit>:
    28d4:	f8 94       	cli

000028d6 <__stop_program>:
    28d6:	ff cf       	rjmp	.-2      	; 0x28d6 <__stop_program>
