
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  0000363e  000036f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000363e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b7  008002b0  008002b0  000038a2  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  000038a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00003f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00004e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000059d3  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001531  00000000  00000000  0000aae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ddb  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c10  00000000  00000000  0000ddf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000017b9  00000000  00000000  0000ea00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002bb9  00000000  00000000  000101b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00012d72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_9>
      28:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ee e3       	ldi	r30, 0x3E	; 62
      78:	f6 e3       	ldi	r31, 0x36	; 54
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a7 36       	cpi	r26, 0x67	; 103
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <main>
      9a:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 b0 02 	lds	r24, 0x02B0
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 ce 1a 	call	0x359c	; 0x359c <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 b0 02 	sts	0x02B0, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 ce 1a 	call	0x359c	; 0x359c <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 b0 02 	sts	0x02B0, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 b0 02 	sts	0x02B0, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1f6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1f8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1fa:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1fe:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     200:	8c 91       	ld	r24, X
     202:	87 70       	andi	r24, 0x07	; 7
     204:	82 b9       	out	0x02, r24	; 2
     206:	66 e0       	ldi	r22, 0x06	; 6
     208:	6a 95       	dec	r22
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x12>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     20e:	ea ed       	ldi	r30, 0xDA	; 218
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	40 81       	ld	r20, Z
     214:	8c 91       	ld	r24, X
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	86 95       	lsr	r24
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	b9 01       	movw	r22, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <set_control_voltage+0x34>
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <set_control_voltage+0x30>
     22e:	cb 01       	movw	r24, r22
     230:	84 2b       	or	r24, r20
     232:	80 83       	st	Z, r24
     234:	76 e0       	ldi	r23, 0x06	; 6
     236:	7a 95       	dec	r23
     238:	f1 f7       	brne	.-4      	; 0x236 <set_control_voltage+0x40>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     23c:	80 81       	ld	r24, Z
     23e:	9c 91       	ld	r25, X
     240:	96 95       	lsr	r25
     242:	96 95       	lsr	r25
     244:	96 95       	lsr	r25
     246:	97 70       	andi	r25, 0x07	; 7
     248:	02 c0       	rjmp	.+4      	; 0x24e <set_control_voltage+0x58>
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	9a 95       	dec	r25
     250:	e2 f7       	brpl	.-8      	; 0x24a <set_control_voltage+0x54>
     252:	20 95       	com	r18
     254:	28 23       	and	r18, r24
     256:	20 83       	st	Z, r18
	
}	
     258:	08 95       	ret

0000025a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     25a:	83 b3       	in	r24, 0x13	; 19
     25c:	83 60       	ori	r24, 0x03	; 3
     25e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     264:	97 b1       	in	r25, 0x07	; 7
     266:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     268:	e9 ed       	ldi	r30, 0xD9	; 217
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     272:	ea ed       	ldi	r30, 0xDA	; 218
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     27c:	84 b3       	in	r24, 0x14	; 20
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     282:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     284:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     286:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     288:	a0 9a       	sbi	0x14, 0	; 20
}
     28a:	08 95       	ret

0000028c <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2e 97       	sbiw	r28, 0x0e	; 14
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ac 01       	movw	r20, r24
	
	uint8_t digit[] = {
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	8a 83       	std	Y+2, r24	; 0x02
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	8b 83       	std	Y+3, r24	; 0x03
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	8c 83       	std	Y+4, r24	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2b6:	de 01       	movw	r26, r28
     2b8:	15 96       	adiw	r26, 0x05	; 5
     2ba:	e7 ee       	ldi	r30, 0xE7	; 231
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <display_dec+0x34>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2cc:	ea ed       	ldi	r30, 0xDA	; 218
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d6:	80 81       	ld	r24, Z
     2d8:	8f 7e       	andi	r24, 0xEF	; 239
     2da:	80 83       	st	Z, r24
	
	//set anode bit
	DATA_BUS = digit[place];
     2dc:	06 2f       	mov	r16, r22
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	de 01       	movw	r26, r28
     2e2:	a0 0f       	add	r26, r16
     2e4:	b1 1f       	adc	r27, r17
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	8c 91       	ld	r24, X
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	82 b9       	out	0x02, r24	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2ee:	80 81       	ld	r24, Z
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	80 83       	st	Z, r24
	//if (number > 999) {
	//number = 999;
	//}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     2fa:	ca 01       	movw	r24, r20
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	9a 01       	movw	r18, r20
     306:	36 95       	lsr	r19
     308:	27 95       	ror	r18
     30a:	28 0f       	add	r18, r24
     30c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     30e:	c9 01       	movw	r24, r18
     310:	92 95       	swap	r25
     312:	82 95       	swap	r24
     314:	8f 70       	andi	r24, 0x0F	; 15
     316:	89 27       	eor	r24, r25
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	89 27       	eor	r24, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     320:	29 2f       	mov	r18, r25
     322:	33 27       	eor	r19, r19
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
	r = number - q2 * 10;
     334:	28 2f       	mov	r18, r24
     336:	22 0f       	add	r18, r18
     338:	32 2f       	mov	r19, r18
     33a:	33 0f       	add	r19, r19
     33c:	33 0f       	add	r19, r19
     33e:	23 0f       	add	r18, r19
     340:	e4 2f       	mov	r30, r20
     342:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	ea 30       	cpi	r30, 0x0A	; 10
     34a:	10 f4       	brcc	.+4      	; 0x350 <display_dec+0xc4>
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	68 0f       	add	r22, r24
     352:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     354:	9b 01       	movw	r18, r22
     356:	36 95       	lsr	r19
     358:	27 95       	ror	r18
     35a:	36 95       	lsr	r19
     35c:	27 95       	ror	r18
     35e:	ab 01       	movw	r20, r22
     360:	56 95       	lsr	r21
     362:	47 95       	ror	r20
     364:	24 0f       	add	r18, r20
     366:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     368:	c9 01       	movw	r24, r18
     36a:	92 95       	swap	r25
     36c:	82 95       	swap	r24
     36e:	8f 70       	andi	r24, 0x0F	; 15
     370:	89 27       	eor	r24, r25
     372:	9f 70       	andi	r25, 0x0F	; 15
     374:	89 27       	eor	r24, r25
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     37a:	29 2f       	mov	r18, r25
     37c:	33 27       	eor	r19, r19
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
	r = qa - q3 * 10;
     38e:	98 2f       	mov	r25, r24
     390:	99 0f       	add	r25, r25
     392:	29 2f       	mov	r18, r25
     394:	22 0f       	add	r18, r18
     396:	22 0f       	add	r18, r18
     398:	92 0f       	add	r25, r18
     39a:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	6a 30       	cpi	r22, 0x0A	; 10
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <display_dec+0x118>
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3a6:	41 ef       	ldi	r20, 0xF1	; 241
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	da 01       	movw	r26, r20
     3ac:	a6 0f       	add	r26, r22
     3ae:	b1 1d       	adc	r27, r1
     3b0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3b2:	28 2f       	mov	r18, r24
     3b4:	26 95       	lsr	r18
     3b6:	26 95       	lsr	r18
     3b8:	98 2f       	mov	r25, r24
     3ba:	96 95       	lsr	r25
     3bc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3be:	29 2f       	mov	r18, r25
     3c0:	22 95       	swap	r18
     3c2:	2f 70       	andi	r18, 0x0F	; 15
     3c4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 0f       	add	r18, r18
     3d0:	62 2f       	mov	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	66 0f       	add	r22, r22
     3d6:	26 0f       	add	r18, r22
     3d8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3da:	da 01       	movw	r26, r20
     3dc:	a8 0f       	add	r26, r24
     3de:	b1 1d       	adc	r27, r1
     3e0:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3e2:	4e 0f       	add	r20, r30
     3e4:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3e6:	fa 01       	movw	r30, r20
     3e8:	40 81       	ld	r20, Z
     3ea:	40 93 b3 02 	sts	0x02B3, r20
	digit_index[1] = tens_place;
     3ee:	30 93 b4 02 	sts	0x02B4, r19
	digit_index[2] = hunds_place;
     3f2:	20 93 b5 02 	sts	0x02B5, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	8a 30       	cpi	r24, 0x0A	; 10
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <display_dec+0x172>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     400:	90 93 b6 02 	sts	0x02B6, r25

	cathode_byte = dec[digit_index[place]];
     404:	f8 01       	movw	r30, r16
     406:	ed 54       	subi	r30, 0x4D	; 77
     408:	fd 4f       	sbci	r31, 0xFD	; 253
     40a:	80 81       	ld	r24, Z
     40c:	fe 01       	movw	r30, r28
     40e:	e8 0f       	add	r30, r24
     410:	f1 1d       	adc	r31, r1
     412:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     414:	90 91 03 03 	lds	r25, 0x0303
     418:	92 30       	cpi	r25, 0x02	; 2
     41a:	11 f4       	brne	.+4      	; 0x420 <display_dec+0x194>
     41c:	80 62       	ori	r24, 0x20	; 32
     41e:	03 c0       	rjmp	.+6      	; 0x426 <display_dec+0x19a>
	if (current_patch.mode == MANUAL) cathode_byte = g;
     420:	91 30       	cpi	r25, 0x01	; 1
     422:	09 f4       	brne	.+2      	; 0x426 <display_dec+0x19a>
     424:	88 e0       	ldi	r24, 0x08	; 8
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     426:	80 95       	com	r24
     428:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     42a:	ea ed       	ldi	r30, 0xDA	; 218
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	80 61       	ori	r24, 0x10	; 16
     432:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     434:	80 81       	ld	r24, Z
     436:	8f 7e       	andi	r24, 0xEF	; 239
     438:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     43a:	2e 96       	adiw	r28, 0x0e	; 14
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	08 95       	ret

00000450 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     450:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     452:	66 23       	and	r22, r22
     454:	69 f4       	brne	.+26     	; 0x470 <update_display+0x20>

		
			
		display_dec(number, place);
     456:	c0 91 b7 02 	lds	r28, 0x02B7
     45a:	6c 2f       	mov	r22, r28
     45c:	0e 94 46 01 	call	0x28c	; 0x28c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     460:	8c 2f       	mov	r24, r28
     462:	8f 5f       	subi	r24, 0xFF	; 255
     464:	80 93 b7 02 	sts	0x02B7, r24
     468:	c3 30       	cpi	r28, 0x03	; 3
     46a:	11 f4       	brne	.+4      	; 0x470 <update_display+0x20>
		{
			place = 0;
     46c:	10 92 b7 02 	sts	0x02B7, r1
		
		
	}
	
	
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     474:	1f 92       	push	r1
     476:	0f 92       	push	r0
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	0f 92       	push	r0
     47c:	11 24       	eor	r1, r1
     47e:	8f 93       	push	r24
     480:	9f 93       	push	r25
     482:	ef 93       	push	r30
     484:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     486:	80 91 74 03 	lds	r24, 0x0374
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     48e:	80 91 75 03 	lds	r24, 0x0375
     492:	88 23       	and	r24, r24
     494:	a1 f4       	brne	.+40     	; 0x4be <__vector_10+0x4a>
		count_finished = FALSE;
     496:	10 92 72 03 	sts	0x0372, r1
		no_overflow = TRUE;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     4a0:	80 93 75 03 	sts	0x0375, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     4a4:	e1 e8       	ldi	r30, 0x81	; 129
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	80 81       	ld	r24, Z
     4aa:	90 91 73 03 	lds	r25, 0x0373
     4ae:	89 2b       	or	r24, r25
     4b0:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4b2:	ef e6       	ldi	r30, 0x6F	; 111
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	81 60       	ori	r24, 0x01	; 1
     4ba:	80 83       	st	Z, r24
     4bc:	11 c0       	rjmp	.+34     	; 0x4e0 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4be:	e4 e8       	ldi	r30, 0x84	; 132
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	91 81       	ldd	r25, Z+1	; 0x01
     4c6:	90 93 71 03 	sts	0x0371, r25
     4ca:	80 93 70 03 	sts	0x0370, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4ce:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 72 03 	sts	0x0372, r24
		period_counter = 0;
     4d8:	10 92 75 03 	sts	0x0375, r1
		TCNT1 = 0; //reset timer/counter 1
     4dc:	11 82       	std	Z+1, r1	; 0x01
     4de:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4e0:	ff 91       	pop	r31
     4e2:	ef 91       	pop	r30
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti

000004f2 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     4fc:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     50a:	84 2f       	mov	r24, r20
	remove_note(note);
     50c:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     510:	80 91 b9 02 	lds	r24, 0x02B9
     514:	81 50       	subi	r24, 0x01	; 1
     516:	80 93 b9 02 	sts	0x02B9, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     51a:	88 23       	and	r24, r24
     51c:	09 f4       	brne	.+2      	; 0x520 <note_off_event+0x16>
     51e:	89 98       	cbi	0x11, 1	; 17
     520:	08 95       	ret

00000522 <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     522:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     524:	40 93 ba 02 	sts	0x02BA, r20
	if (velocity == 0) {
     528:	22 23       	and	r18, r18
     52a:	59 f4       	brne	.+22     	; 0x542 <note_on_event+0x20>
		remove_note(note);
     52c:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     530:	80 91 b9 02 	lds	r24, 0x02B9
     534:	81 50       	subi	r24, 0x01	; 1
     536:	80 93 b9 02 	sts	0x02B9, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     53a:	88 23       	and	r24, r24
     53c:	59 f4       	brne	.+22     	; 0x554 <note_on_event+0x32>
     53e:	89 98       	cbi	0x11, 1	; 17
     540:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     542:	62 2f       	mov	r22, r18
     544:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     548:	80 91 b9 02 	lds	r24, 0x02B9
     54c:	8f 5f       	subi	r24, 0xFF	; 255
     54e:	80 93 b9 02 	sts	0x02B9, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     552:	89 9a       	sbi	0x11, 1	; 17
     554:	08 95       	ret

00000556 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     556:	87 e2       	ldi	r24, 0x27	; 39
     558:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     55c:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     560:	88 e9       	ldi	r24, 0x98	; 152
     562:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     566:	08 95       	ret

00000568 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	0f 92       	push	r0
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     594:	80 91 c6 00 	lds	r24, 0x00C6
     598:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     59a:	8a e7       	ldi	r24, 0x7A	; 122
     59c:	93 e0       	ldi	r25, 0x03	; 3
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	ae 01       	movw	r20, r28
     5a2:	4f 5f       	subi	r20, 0xFF	; 255
     5a4:	5f 4f       	sbci	r21, 0xFF	; 255
     5a6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     5aa:	0f 90       	pop	r0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	0f 90       	pop	r0
     5ce:	1f 90       	pop	r1
     5d0:	18 95       	reti

000005d2 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     5d2:	c0 e8       	ldi	r28, 0x80	; 128
     5d4:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     5d6:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     5d8:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     5da:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     5dc:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     5de:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     5e0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     5e4:	a9 ed       	ldi	r26, 0xD9	; 217
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	8c 91       	ld	r24, X
     5ea:	80 6c       	ori	r24, 0xC0	; 192
     5ec:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     5ee:	ea ed       	ldi	r30, 0xDA	; 218
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	80 6c       	ori	r24, 0xC0	; 192
     5f6:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     5f8:	81 b1       	in	r24, 0x01	; 1
     5fa:	8f ef       	ldi	r24, 0xFF	; 255
     5fc:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     5fe:	92 b1       	in	r25, 0x02	; 2
     600:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     602:	8c 91       	ld	r24, X
     604:	80 63       	ori	r24, 0x30	; 48
     606:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     608:	80 81       	ld	r24, Z
     60a:	8f 7c       	andi	r24, 0xCF	; 207
     60c:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     60e:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     610:	ec ed       	ldi	r30, 0xDC	; 220
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	80 62       	ori	r24, 0x20	; 32
     618:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     61a:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     61c:	ed ed       	ldi	r30, 0xDD	; 221
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	80 62       	ori	r24, 0x20	; 32
     624:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     626:	80 81       	ld	r24, Z
     628:	8f 7d       	andi	r24, 0xDF	; 223
     62a:	80 83       	st	Z, r24
	DATA_BUS = 0;
     62c:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     62e:	c0 93 fe 02 	sts	0x02FE, r28
	
	//setup ADC
    setup_adc();		
     632:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     636:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     63a:	ca e7       	ldi	r28, 0x7A	; 122
     63c:	d3 e0       	ldi	r29, 0x03	; 3
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     644:	ce 01       	movw	r24, r28
     646:	61 e9       	ldi	r22, 0x91	; 145
     648:	72 e0       	ldi	r23, 0x02	; 2
     64a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     64e:	ce 01       	movw	r24, r28
     650:	65 e8       	ldi	r22, 0x85	; 133
     652:	72 e0       	ldi	r23, 0x02	; 2
     654:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     658:	0e 94 ab 02 	call	0x556	; 0x556 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     65c:	0e 94 11 06 	call	0xc22	; 0xc22 <update_spi>
	
	
	current_patch.number = 1;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 93 02 03 	sts	0x0302, r24
		
	sei(); //enable global interrupts
     666:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     668:	0e 94 cc 12 	call	0x2598	; 0x2598 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	0e 94 91 08 	call	0x1122	; 0x1122 <load_patch>

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     672:	8e 01       	movw	r16, r28
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     674:	0f 2e       	mov	r0, r31
     676:	f8 e7       	ldi	r31, 0x78	; 120
     678:	ef 2e       	mov	r14, r31
     67a:	f3 e0       	ldi	r31, 0x03	; 3
     67c:	ff 2e       	mov	r15, r31
     67e:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW;
     680:	0f 2e       	mov	r0, r31
     682:	f3 e0       	ldi	r31, 0x03	; 3
     684:	cf 2e       	mov	r12, r31
     686:	f3 e0       	ldi	r31, 0x03	; 3
     688:	df 2e       	mov	r13, r31
     68a:	f0 2d       	mov	r31, r0
     68c:	d0 e8       	ldi	r29, 0x80	; 128
	load_patch(1);

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     68e:	c8 01       	movw	r24, r16
     690:	0e 94 a5 18 	call	0x314a	; 0x314a <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     694:	80 91 fd 01 	lds	r24, 0x01FD
     698:	90 91 fe 01 	lds	r25, 0x01FE
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     6a2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <scan_pots>
		update_control_voltages();
     6a6:	0e 94 00 04 	call	0x800	; 0x800 <update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     6aa:	80 91 b8 02 	lds	r24, 0x02B8
     6ae:	98 2f       	mov	r25, r24
     6b0:	9f 5f       	subi	r25, 0xFF	; 255
     6b2:	90 93 b8 02 	sts	0x02B8, r25
     6b6:	85 30       	cpi	r24, 0x05	; 5
     6b8:	51 f7       	brne	.-44     	; 0x68e <main+0xbc>
		{
			switch_timer = 0;
     6ba:	10 92 b8 02 	sts	0x02B8, r1
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     6be:	f7 01       	movw	r30, r14
     6c0:	c0 81       	ld	r28, Z
     6c2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <read_switch_port>
     6c6:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW;
     6c8:	f6 01       	movw	r30, r12
     6ca:	90 81       	ld	r25, Z
     6cc:	91 30       	cpi	r25, 0x01	; 1
     6ce:	11 f4       	brne	.+4      	; 0x6d4 <main+0x102>
     6d0:	cd 2f       	mov	r28, r29
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <main+0x104>
     6d4:	c0 e0       	ldi	r28, 0x00	; 0
     6d6:	c8 2b       	or	r28, r24
     6d8:	f7 01       	movw	r30, r14
     6da:	c0 83       	st	Z, r28
			update_spi();
     6dc:	0e 94 11 06 	call	0xc22	; 0xc22 <update_spi>
			refresh_synth();
     6e0:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <refresh_synth>
     6e4:	d4 cf       	rjmp	.-88     	; 0x68e <main+0xbc>

000006e6 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     6e6:	bf 92       	push	r11
     6e8:	cf 92       	push	r12
     6ea:	df 92       	push	r13
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	c0 e0       	ldi	r28, 0x00	; 0
     6fa:	d1 e0       	ldi	r29, 0x01	; 1
     6fc:	01 ec       	ldi	r16, 0xC1	; 193
     6fe:	12 e0       	ldi	r17, 0x02	; 2
     700:	0f 2e       	mov	r0, r31
     702:	fc e3       	ldi	r31, 0x3C	; 60
     704:	cf 2e       	mov	r12, r31
     706:	dd 24       	eor	r13, r13
     708:	f0 2d       	mov	r31, r0
     70a:	cc 0e       	add	r12, r28
     70c:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     70e:	0f 2e       	mov	r0, r31
     710:	f3 e0       	ldi	r31, 0x03	; 3
     712:	ef 2e       	mov	r14, r31
     714:	f3 e0       	ldi	r31, 0x03	; 3
     716:	ff 2e       	mov	r15, r31
     718:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     71a:	bb 24       	eor	r11, r11
     71c:	68 94       	set
     71e:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     720:	88 81       	ld	r24, Y
     722:	99 81       	ldd	r25, Y+1	; 0x01
     724:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     728:	90 93 bc 02 	sts	0x02BC, r25
     72c:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     730:	e8 81       	ld	r30, Y
     732:	f9 81       	ldd	r31, Y+1	; 0x01
     734:	40 81       	ld	r20, Z
     736:	21 81       	ldd	r18, Z+1	; 0x01
     738:	52 2f       	mov	r21, r18
     73a:	53 70       	andi	r21, 0x03	; 3
     73c:	84 1b       	sub	r24, r20
     73e:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     740:	95 95       	asr	r25
     742:	87 95       	ror	r24
     744:	95 95       	asr	r25
     746:	87 95       	ror	r24
     748:	84 0f       	add	r24, r20
     74a:	95 1f       	adc	r25, r21
     74c:	80 83       	st	Z, r24
     74e:	89 2f       	mov	r24, r25
     750:	83 70       	andi	r24, 0x03	; 3
     752:	2c 7f       	andi	r18, 0xFC	; 252
     754:	28 2b       	or	r18, r24
     756:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     758:	e9 91       	ld	r30, Y+
     75a:	f9 91       	ld	r31, Y+
     75c:	92 81       	ldd	r25, Z+2	; 0x02
     75e:	20 81       	ld	r18, Z
     760:	81 81       	ldd	r24, Z+1	; 0x01
     762:	38 2f       	mov	r19, r24
     764:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     766:	d7 01       	movw	r26, r14
     768:	8c 91       	ld	r24, X
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	19 f0       	breq	.+6      	; 0x774 <scan_pots+0x8e>
     76e:	83 81       	ldd	r24, Z+3	; 0x03
     770:	88 23       	and	r24, r24
     772:	24 f0       	brlt	.+8      	; 0x77c <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     774:	f8 01       	movw	r30, r16
     776:	31 83       	std	Z+1, r19	; 0x01
     778:	20 83       	st	Z, r18
     77a:	14 c0       	rjmp	.+40     	; 0x7a4 <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     77c:	49 2f       	mov	r20, r25
     77e:	43 50       	subi	r20, 0x03	; 3
     780:	c9 01       	movw	r24, r18
     782:	95 95       	asr	r25
     784:	87 95       	ror	r24
     786:	95 95       	asr	r25
     788:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     78a:	94 2f       	mov	r25, r20
     78c:	98 1b       	sub	r25, r24
     78e:	9a 3f       	cpi	r25, 0xFA	; 250
     790:	48 f4       	brcc	.+18     	; 0x7a4 <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     792:	d8 01       	movw	r26, r16
     794:	11 96       	adiw	r26, 0x01	; 1
     796:	3c 93       	st	X, r19
     798:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     79a:	83 81       	ldd	r24, Z+3	; 0x03
     79c:	8f 77       	andi	r24, 0x7F	; 127
     79e:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     7a0:	f7 01       	movw	r30, r14
     7a2:	b0 82       	st	Z, r11
     7a4:	0e 5f       	subi	r16, 0xFE	; 254
     7a6:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     7a8:	cc 15       	cp	r28, r12
     7aa:	dd 05       	cpc	r29, r13
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <scan_pots+0xca>
     7ae:	b8 cf       	rjmp	.-144    	; 0x720 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     7b0:	8c e7       	ldi	r24, 0x7C	; 124
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     7b8:	90 93 bc 02 	sts	0x02BC, r25
     7bc:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     7c0:	20 91 7c 01 	lds	r18, 0x017C
     7c4:	40 91 7d 01 	lds	r20, 0x017D
     7c8:	34 2f       	mov	r19, r20
     7ca:	33 70       	andi	r19, 0x03	; 3
     7cc:	82 1b       	sub	r24, r18
     7ce:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     7d0:	95 95       	asr	r25
     7d2:	87 95       	ror	r24
     7d4:	95 95       	asr	r25
     7d6:	87 95       	ror	r24
     7d8:	28 0f       	add	r18, r24
     7da:	39 1f       	adc	r19, r25
     7dc:	20 93 7c 01 	sts	0x017C, r18
     7e0:	83 2f       	mov	r24, r19
     7e2:	83 70       	andi	r24, 0x03	; 3
     7e4:	4c 7f       	andi	r20, 0xFC	; 252
     7e6:	48 2b       	or	r20, r24
     7e8:	40 93 7d 01 	sts	0x017D, r20
	
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	bf 90       	pop	r11
     7fe:	08 95       	ret

00000800 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     804:	60 91 c1 02 	lds	r22, 0x02C1
     808:	70 91 c2 02 	lds	r23, 0x02C2
     80c:	62 95       	swap	r22
     80e:	72 95       	swap	r23
     810:	70 7f       	andi	r23, 0xF0	; 240
     812:	76 27       	eor	r23, r22
     814:	60 7f       	andi	r22, 0xF0	; 240
     816:	76 27       	eor	r23, r22
     818:	84 ee       	ldi	r24, 0xE4	; 228
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     820:	60 91 c3 02 	lds	r22, 0x02C3
     824:	70 91 c4 02 	lds	r23, 0x02C4
     828:	62 95       	swap	r22
     82a:	72 95       	swap	r23
     82c:	70 7f       	andi	r23, 0xF0	; 240
     82e:	76 27       	eor	r23, r22
     830:	60 7f       	andi	r22, 0xF0	; 240
     832:	76 27       	eor	r23, r22
     834:	83 ee       	ldi	r24, 0xE3	; 227
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     83c:	60 91 c5 02 	lds	r22, 0x02C5
     840:	70 91 c6 02 	lds	r23, 0x02C6
     844:	66 0f       	add	r22, r22
     846:	77 1f       	adc	r23, r23
     848:	66 0f       	add	r22, r22
     84a:	77 1f       	adc	r23, r23
     84c:	66 0f       	add	r22, r22
     84e:	77 1f       	adc	r23, r23
     850:	82 ee       	ldi	r24, 0xE2	; 226
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     858:	60 91 c7 02 	lds	r22, 0x02C7
     85c:	70 91 c8 02 	lds	r23, 0x02C8
     860:	62 95       	swap	r22
     862:	72 95       	swap	r23
     864:	70 7f       	andi	r23, 0xF0	; 240
     866:	76 27       	eor	r23, r22
     868:	60 7f       	andi	r22, 0xF0	; 240
     86a:	76 27       	eor	r23, r22
     86c:	82 eb       	ldi	r24, 0xB2	; 178
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     874:	60 91 c9 02 	lds	r22, 0x02C9
     878:	70 91 ca 02 	lds	r23, 0x02CA
     87c:	66 0f       	add	r22, r22
     87e:	77 1f       	adc	r23, r23
     880:	66 0f       	add	r22, r22
     882:	77 1f       	adc	r23, r23
     884:	66 0f       	add	r22, r22
     886:	77 1f       	adc	r23, r23
     888:	81 ee       	ldi	r24, 0xE1	; 225
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     890:	60 91 cb 02 	lds	r22, 0x02CB
     894:	70 91 cc 02 	lds	r23, 0x02CC
     898:	62 95       	swap	r22
     89a:	72 95       	swap	r23
     89c:	70 7f       	andi	r23, 0xF0	; 240
     89e:	76 27       	eor	r23, r22
     8a0:	60 7f       	andi	r22, 0xF0	; 240
     8a2:	76 27       	eor	r23, r22
     8a4:	80 ee       	ldi	r24, 0xE0	; 224
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     8ac:	60 91 cd 02 	lds	r22, 0x02CD
     8b0:	70 91 ce 02 	lds	r23, 0x02CE
     8b4:	62 95       	swap	r22
     8b6:	72 95       	swap	r23
     8b8:	70 7f       	andi	r23, 0xF0	; 240
     8ba:	76 27       	eor	r23, r22
     8bc:	60 7f       	andi	r22, 0xF0	; 240
     8be:	76 27       	eor	r23, r22
     8c0:	8f ed       	ldi	r24, 0xDF	; 223
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     8c8:	60 91 cf 02 	lds	r22, 0x02CF
     8cc:	70 91 d0 02 	lds	r23, 0x02D0
     8d0:	62 95       	swap	r22
     8d2:	72 95       	swap	r23
     8d4:	70 7f       	andi	r23, 0xF0	; 240
     8d6:	76 27       	eor	r23, r22
     8d8:	60 7f       	andi	r22, 0xF0	; 240
     8da:	76 27       	eor	r23, r22
     8dc:	8e ed       	ldi	r24, 0xDE	; 222
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     8e4:	80 91 d3 02 	lds	r24, 0x02D3
     8e8:	90 91 d4 02 	lds	r25, 0x02D4
     8ec:	c0 e0       	ldi	r28, 0x00	; 0
     8ee:	d2 e0       	ldi	r29, 0x02	; 2
     8f0:	c8 1b       	sub	r28, r24
     8f2:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     8f4:	60 91 6b 03 	lds	r22, 0x036B
     8f8:	70 91 6c 03 	lds	r23, 0x036C
     8fc:	60 50       	subi	r22, 0x00	; 0
     8fe:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     900:	80 91 d1 02 	lds	r24, 0x02D1
     904:	90 91 d2 02 	lds	r25, 0x02D2
     908:	68 1b       	sub	r22, r24
     90a:	79 0b       	sbc	r23, r25
     90c:	6c 0f       	add	r22, r28
     90e:	7d 1f       	adc	r23, r29
     910:	8d ed       	ldi	r24, 0xDD	; 221
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     918:	60 91 6d 03 	lds	r22, 0x036D
     91c:	70 91 6e 03 	lds	r23, 0x036E
     920:	6c 0f       	add	r22, r28
     922:	7d 1f       	adc	r23, r29
     924:	8c ed       	ldi	r24, 0xDC	; 220
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     92c:	60 91 d5 02 	lds	r22, 0x02D5
     930:	70 91 d6 02 	lds	r23, 0x02D6
     934:	62 95       	swap	r22
     936:	72 95       	swap	r23
     938:	70 7f       	andi	r23, 0xF0	; 240
     93a:	76 27       	eor	r23, r22
     93c:	60 7f       	andi	r22, 0xF0	; 240
     93e:	76 27       	eor	r23, r22
     940:	8b ed       	ldi	r24, 0xDB	; 219
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     948:	60 91 d9 02 	lds	r22, 0x02D9
     94c:	70 91 da 02 	lds	r23, 0x02DA
     950:	62 95       	swap	r22
     952:	72 95       	swap	r23
     954:	70 7f       	andi	r23, 0xF0	; 240
     956:	76 27       	eor	r23, r22
     958:	60 7f       	andi	r22, 0xF0	; 240
     95a:	76 27       	eor	r23, r22
     95c:	8a ed       	ldi	r24, 0xDA	; 218
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     964:	60 91 db 02 	lds	r22, 0x02DB
     968:	70 91 dc 02 	lds	r23, 0x02DC
     96c:	62 95       	swap	r22
     96e:	72 95       	swap	r23
     970:	70 7f       	andi	r23, 0xF0	; 240
     972:	76 27       	eor	r23, r22
     974:	60 7f       	andi	r22, 0xF0	; 240
     976:	76 27       	eor	r23, r22
     978:	89 ed       	ldi	r24, 0xD9	; 217
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     980:	60 91 7c 01 	lds	r22, 0x017C
     984:	80 91 7d 01 	lds	r24, 0x017D
     988:	78 2f       	mov	r23, r24
     98a:	73 70       	andi	r23, 0x03	; 3
     98c:	62 95       	swap	r22
     98e:	72 95       	swap	r23
     990:	70 7f       	andi	r23, 0xF0	; 240
     992:	76 27       	eor	r23, r22
     994:	60 7f       	andi	r22, 0xF0	; 240
     996:	76 27       	eor	r23, r22
     998:	88 ed       	ldi	r24, 0xD8	; 216
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     9a0:	60 91 dd 02 	lds	r22, 0x02DD
     9a4:	70 91 de 02 	lds	r23, 0x02DE
     9a8:	62 95       	swap	r22
     9aa:	72 95       	swap	r23
     9ac:	70 7f       	andi	r23, 0xF0	; 240
     9ae:	76 27       	eor	r23, r22
     9b0:	60 7f       	andi	r22, 0xF0	; 240
     9b2:	76 27       	eor	r23, r22
     9b4:	87 ed       	ldi	r24, 0xD7	; 215
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     9bc:	60 91 df 02 	lds	r22, 0x02DF
     9c0:	70 91 e0 02 	lds	r23, 0x02E0
     9c4:	62 95       	swap	r22
     9c6:	72 95       	swap	r23
     9c8:	70 7f       	andi	r23, 0xF0	; 240
     9ca:	76 27       	eor	r23, r22
     9cc:	60 7f       	andi	r22, 0xF0	; 240
     9ce:	76 27       	eor	r23, r22
     9d0:	86 ed       	ldi	r24, 0xD6	; 214
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     9d8:	60 91 e1 02 	lds	r22, 0x02E1
     9dc:	70 91 e2 02 	lds	r23, 0x02E2
     9e0:	62 95       	swap	r22
     9e2:	72 95       	swap	r23
     9e4:	70 7f       	andi	r23, 0xF0	; 240
     9e6:	76 27       	eor	r23, r22
     9e8:	60 7f       	andi	r22, 0xF0	; 240
     9ea:	76 27       	eor	r23, r22
     9ec:	85 ed       	ldi	r24, 0xD5	; 213
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     9f4:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     9f8:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     9fa:	88 30       	cpi	r24, 0x08	; 8
     9fc:	08 f4       	brcc	.+2      	; 0xa00 <update_control_voltages+0x200>
     9fe:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = note;
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     a00:	8c 2f       	mov	r24, r28
     a02:	88 50       	subi	r24, 0x08	; 8
     a04:	67 e0       	ldi	r22, 0x07	; 7
     a06:	73 e0       	ldi	r23, 0x03	; 3
     a08:	0e 94 f5 12 	call	0x25ea	; 0x25ea <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     a0c:	bc 01       	movw	r22, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	20 91 e5 02 	lds	r18, 0x02E5
     a16:	30 91 e6 02 	lds	r19, 0x02E6
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsi3>
     a22:	dc 01       	movw	r26, r24
     a24:	cb 01       	movw	r24, r22
     a26:	07 2e       	mov	r0, r23
     a28:	7a e0       	ldi	r23, 0x0A	; 10
     a2a:	b6 95       	lsr	r27
     a2c:	a7 95       	ror	r26
     a2e:	97 95       	ror	r25
     a30:	87 95       	ror	r24
     a32:	7a 95       	dec	r23
     a34:	d1 f7       	brne	.-12     	; 0xa2a <update_control_voltages+0x22a>
     a36:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     a38:	60 91 e3 02 	lds	r22, 0x02E3
     a3c:	70 91 e4 02 	lds	r23, 0x02E4
     a40:	62 95       	swap	r22
     a42:	72 95       	swap	r23
     a44:	70 7f       	andi	r23, 0xF0	; 240
     a46:	76 27       	eor	r23, r22
     a48:	60 7f       	andi	r22, 0xF0	; 240
     a4a:	76 27       	eor	r23, r22
     a4c:	86 0f       	add	r24, r22
     a4e:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     a50:	bc 01       	movw	r22, r24
     a52:	80 e4       	ldi	r24, 0x40	; 64
     a54:	60 30       	cpi	r22, 0x00	; 0
     a56:	78 07       	cpc	r23, r24
     a58:	10 f0       	brcs	.+4      	; 0xa5e <update_control_voltages+0x25e>
     a5a:	6f ef       	ldi	r22, 0xFF	; 255
     a5c:	7f e3       	ldi	r23, 0x3F	; 63
     a5e:	84 ed       	ldi	r24, 0xD4	; 212
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     a66:	60 91 e7 02 	lds	r22, 0x02E7
     a6a:	70 91 e8 02 	lds	r23, 0x02E8
     a6e:	62 95       	swap	r22
     a70:	72 95       	swap	r23
     a72:	70 7f       	andi	r23, 0xF0	; 240
     a74:	76 27       	eor	r23, r22
     a76:	60 7f       	andi	r22, 0xF0	; 240
     a78:	76 27       	eor	r23, r22
     a7a:	82 ed       	ldi	r24, 0xD2	; 210
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     a82:	60 91 e9 02 	lds	r22, 0x02E9
     a86:	70 91 ea 02 	lds	r23, 0x02EA
     a8a:	62 95       	swap	r22
     a8c:	72 95       	swap	r23
     a8e:	70 7f       	andi	r23, 0xF0	; 240
     a90:	76 27       	eor	r23, r22
     a92:	60 7f       	andi	r22, 0xF0	; 240
     a94:	76 27       	eor	r23, r22
     a96:	81 ed       	ldi	r24, 0xD1	; 209
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     a9e:	60 91 eb 02 	lds	r22, 0x02EB
     aa2:	70 91 ec 02 	lds	r23, 0x02EC
     aa6:	62 95       	swap	r22
     aa8:	72 95       	swap	r23
     aaa:	70 7f       	andi	r23, 0xF0	; 240
     aac:	76 27       	eor	r23, r22
     aae:	60 7f       	andi	r22, 0xF0	; 240
     ab0:	76 27       	eor	r23, r22
     ab2:	80 ed       	ldi	r24, 0xD0	; 208
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     aba:	60 91 ed 02 	lds	r22, 0x02ED
     abe:	70 91 ee 02 	lds	r23, 0x02EE
     ac2:	62 95       	swap	r22
     ac4:	72 95       	swap	r23
     ac6:	70 7f       	andi	r23, 0xF0	; 240
     ac8:	76 27       	eor	r23, r22
     aca:	60 7f       	andi	r22, 0xF0	; 240
     acc:	76 27       	eor	r23, r22
     ace:	8f ec       	ldi	r24, 0xCF	; 207
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     ad6:	60 91 ef 02 	lds	r22, 0x02EF
     ada:	70 91 f0 02 	lds	r23, 0x02F0
     ade:	62 95       	swap	r22
     ae0:	72 95       	swap	r23
     ae2:	70 7f       	andi	r23, 0xF0	; 240
     ae4:	76 27       	eor	r23, r22
     ae6:	60 7f       	andi	r22, 0xF0	; 240
     ae8:	76 27       	eor	r23, r22
     aea:	8e ec       	ldi	r24, 0xCE	; 206
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     af2:	60 91 f1 02 	lds	r22, 0x02F1
     af6:	70 91 f2 02 	lds	r23, 0x02F2
     afa:	62 95       	swap	r22
     afc:	72 95       	swap	r23
     afe:	70 7f       	andi	r23, 0xF0	; 240
     b00:	76 27       	eor	r23, r22
     b02:	60 7f       	andi	r22, 0xF0	; 240
     b04:	76 27       	eor	r23, r22
     b06:	8d ec       	ldi	r24, 0xCD	; 205
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     b0e:	60 91 f3 02 	lds	r22, 0x02F3
     b12:	70 91 f4 02 	lds	r23, 0x02F4
     b16:	62 95       	swap	r22
     b18:	72 95       	swap	r23
     b1a:	70 7f       	andi	r23, 0xF0	; 240
     b1c:	76 27       	eor	r23, r22
     b1e:	60 7f       	andi	r22, 0xF0	; 240
     b20:	76 27       	eor	r23, r22
     b22:	8c ec       	ldi	r24, 0xCC	; 204
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     b2a:	60 91 f7 02 	lds	r22, 0x02F7
     b2e:	70 91 f8 02 	lds	r23, 0x02F8
     b32:	62 95       	swap	r22
     b34:	72 95       	swap	r23
     b36:	70 7f       	andi	r23, 0xF0	; 240
     b38:	76 27       	eor	r23, r22
     b3a:	60 7f       	andi	r22, 0xF0	; 240
     b3c:	76 27       	eor	r23, r22
     b3e:	8a ec       	ldi	r24, 0xCA	; 202
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     b46:	60 91 f5 02 	lds	r22, 0x02F5
     b4a:	70 91 f6 02 	lds	r23, 0x02F6
     b4e:	62 95       	swap	r22
     b50:	72 95       	swap	r23
     b52:	70 7f       	andi	r23, 0xF0	; 240
     b54:	76 27       	eor	r23, r22
     b56:	60 7f       	andi	r22, 0xF0	; 240
     b58:	76 27       	eor	r23, r22
     b5a:	8b ec       	ldi	r24, 0xCB	; 203
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     b62:	60 91 fb 02 	lds	r22, 0x02FB
     b66:	70 91 fc 02 	lds	r23, 0x02FC
     b6a:	62 95       	swap	r22
     b6c:	72 95       	swap	r23
     b6e:	70 7f       	andi	r23, 0xF0	; 240
     b70:	76 27       	eor	r23, r22
     b72:	60 7f       	andi	r22, 0xF0	; 240
     b74:	76 27       	eor	r23, r22
     b76:	88 ec       	ldi	r24, 0xC8	; 200
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     b7e:	60 91 f9 02 	lds	r22, 0x02F9
     b82:	70 91 fa 02 	lds	r23, 0x02FA
     b86:	62 95       	swap	r22
     b88:	72 95       	swap	r23
     b8a:	70 7f       	andi	r23, 0xF0	; 240
     b8c:	76 27       	eor	r23, r22
     b8e:	60 7f       	andi	r22, 0xF0	; 240
     b90:	76 27       	eor	r23, r22
     b92:	89 ec       	ldi	r24, 0xC9	; 201
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     b9a:	8c 2f       	mov	r24, r28
     b9c:	6f e0       	ldi	r22, 0x0F	; 15
     b9e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     ba2:	69 e4       	ldi	r22, 0x49	; 73
     ba4:	73 e0       	ldi	r23, 0x03	; 3
     ba6:	0e 94 f5 12 	call	0x25ea	; 0x25ea <interpolate_pitch_cv>
     baa:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     bac:	86 ee       	ldi	r24, 0xE6	; 230
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     bb4:	8c 2f       	mov	r24, r28
     bb6:	60 ef       	ldi	r22, 0xF0	; 240
     bb8:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     bbc:	67 e2       	ldi	r22, 0x27	; 39
     bbe:	73 e0       	ldi	r23, 0x03	; 3
     bc0:	0e 94 f5 12 	call	0x25ea	; 0x25ea <interpolate_pitch_cv>
     bc4:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     bc6:	85 ee       	ldi	r24, 0xE5	; 229
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     bce:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     bd0:	a1 9a       	sbi	0x14, 1	; 20
}			
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     bd8:	84 b1       	in	r24, 0x04	; 4
     bda:	87 62       	ori	r24, 0x27	; 39
     bdc:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     bde:	ec ed       	ldi	r30, 0xDC	; 220
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8c 65       	ori	r24, 0x5C	; 92
     be6:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     be8:	85 b1       	in	r24, 0x05	; 5
     bea:	89 7d       	andi	r24, 0xD9	; 217
     bec:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     bee:	ed ed       	ldi	r30, 0xDD	; 221
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	83 7f       	andi	r24, 0xF3	; 243
     bf6:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     bf8:	80 e5       	ldi	r24, 0x50	; 80
     bfa:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     bfc:	80 81       	ld	r24, Z
     bfe:	87 7f       	andi	r24, 0xF7	; 247
     c00:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     c02:	80 81       	ld	r24, Z
     c04:	87 7f       	andi	r24, 0xF7	; 247
     c06:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     c08:	80 81       	ld	r24, Z
     c0a:	88 60       	ori	r24, 0x08	; 8
     c0c:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     c0e:	80 81       	ld	r24, Z
     c10:	8f 7e       	andi	r24, 0xEF	; 239
     c12:	80 83       	st	Z, r24
	
}
     c14:	08 95       	ret

00000c16 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     c16:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     c18:	0d b4       	in	r0, 0x2d	; 45
     c1a:	07 fe       	sbrs	r0, 7
     c1c:	fd cf       	rjmp	.-6      	; 0xc18 <spi_shift_byte+0x2>
	return SPDR;
     c1e:	8e b5       	in	r24, 0x2e	; 46
	
}
     c20:	08 95       	ret

00000c22 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     c22:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     c24:	80 91 01 03 	lds	r24, 0x0301
     c28:	0e 94 0b 06 	call	0xc16	; 0xc16 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     c2c:	90 91 bf 02 	lds	r25, 0x02BF
     c30:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     c32:	98 27       	eor	r25, r24
     c34:	90 93 bf 02 	sts	0x02BF, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     c38:	98 23       	and	r25, r24
     c3a:	90 93 c0 02 	sts	0x02C0, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     c3e:	80 91 76 03 	lds	r24, 0x0376
     c42:	98 27       	eor	r25, r24
     c44:	90 93 76 03 	sts	0x0376, r25
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     c48:	80 91 00 03 	lds	r24, 0x0300
     c4c:	0e 94 0b 06 	call	0xc16	; 0xc16 <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     c50:	90 91 bd 02 	lds	r25, 0x02BD
     c54:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     c56:	98 27       	eor	r25, r24
     c58:	90 93 bd 02 	sts	0x02BD, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     c5c:	98 23       	and	r25, r24
     c5e:	90 93 be 02 	sts	0x02BE, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     c62:	80 91 77 03 	lds	r24, 0x0377
     c66:	98 27       	eor	r25, r24
     c68:	90 93 77 03 	sts	0x0377, r25
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     c6c:	80 91 ff 02 	lds	r24, 0x02FF
     c70:	0e 94 0b 06 	call	0xc16	; 0xc16 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     c74:	80 91 fe 02 	lds	r24, 0x02FE
     c78:	0e 94 0b 06 	call	0xc16	; 0xc16 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     c7c:	90 91 78 03 	lds	r25, 0x0378
     c80:	29 2f       	mov	r18, r25
     c82:	22 95       	swap	r18
     c84:	2f 70       	andi	r18, 0x0F	; 15
     c86:	27 95       	ror	r18
     c88:	22 27       	eor	r18, r18
     c8a:	27 95       	ror	r18

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     c8c:	89 2f       	mov	r24, r25
     c8e:	86 95       	lsr	r24
     c90:	86 95       	lsr	r24
     c92:	86 95       	lsr	r24
     c94:	81 70       	andi	r24, 0x01	; 1
     c96:	82 2b       	or	r24, r18
     c98:	40 91 77 03 	lds	r20, 0x0377
     c9c:	42 95       	swap	r20
     c9e:	46 95       	lsr	r20
     ca0:	47 70       	andi	r20, 0x07	; 7
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	41 70       	andi	r20, 0x01	; 1
     ca6:	50 70       	andi	r21, 0x00	; 0
     ca8:	9a 01       	movw	r18, r20
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	22 0f       	add	r18, r18
     cb0:	33 1f       	adc	r19, r19
     cb2:	28 2b       	or	r18, r24
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     cb4:	99 1f       	adc	r25, r25
     cb6:	99 27       	eor	r25, r25
     cb8:	99 1f       	adc	r25, r25
     cba:	89 2f       	mov	r24, r25
     cbc:	82 95       	swap	r24
     cbe:	88 0f       	add	r24, r24
     cc0:	88 0f       	add	r24, r24
     cc2:	80 7c       	andi	r24, 0xC0	; 192
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     cc4:	82 2b       	or	r24, r18
     cc6:	0e 94 0b 06 	call	0xc16	; 0xc16 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     cca:	ed ed       	ldi	r30, 0xDD	; 221
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	87 7f       	andi	r24, 0xF7	; 247
     cd2:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     cd4:	80 81       	ld	r24, Z
     cd6:	88 60       	ori	r24, 0x08	; 8
     cd8:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     cda:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     cdc:	08 95       	ret

00000cde <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b1 e0       	ldi	r27, 0x01	; 1
     ce2:	9d 01       	movw	r18, r26
     ce4:	24 5c       	subi	r18, 0xC4	; 196
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= 29; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     ce8:	ed 91       	ld	r30, X+
     cea:	fc 91       	ld	r31, X
     cec:	11 97       	sbiw	r26, 0x01	; 1
     cee:	80 81       	ld	r24, Z
     cf0:	41 81       	ldd	r20, Z+1	; 0x01
     cf2:	94 2f       	mov	r25, r20
     cf4:	93 70       	andi	r25, 0x03	; 3
     cf6:	95 95       	asr	r25
     cf8:	87 95       	ror	r24
     cfa:	95 95       	asr	r25
     cfc:	87 95       	ror	r24
     cfe:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     d00:	ed 91       	ld	r30, X+
     d02:	fd 91       	ld	r31, X+
     d04:	83 81       	ldd	r24, Z+3	; 0x03
     d06:	80 68       	ori	r24, 0x80	; 128
     d08:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= 29; i++) {
     d0a:	a2 17       	cp	r26, r18
     d0c:	b3 07       	cpc	r27, r19
     d0e:	61 f7       	brne	.-40     	; 0xce8 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     d10:	08 95       	ret

00000d12 <unlock_pots>:

void unlock_pots(void) {
     d12:	e0 e0       	ldi	r30, 0x00	; 0
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	cf 01       	movw	r24, r30
     d18:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked = 0;
     d1a:	a1 91       	ld	r26, Z+
     d1c:	b1 91       	ld	r27, Z+
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	2c 91       	ld	r18, X
     d22:	13 97       	sbiw	r26, 0x03	; 3
     d24:	2f 77       	andi	r18, 0x7F	; 127
     d26:	13 96       	adiw	r26, 0x03	; 3
     d28:	2c 93       	st	X, r18
     d2a:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= 29; i++) {
     d2c:	e8 17       	cp	r30, r24
     d2e:	f9 07       	cpc	r31, r25
     d30:	a1 f7       	brne	.-24     	; 0xd1a <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
     d32:	08 95       	ret

00000d34 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	ab 97       	sbiw	r28, 0x2b	; 43
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     d4c:	ed ed       	ldi	r30, 0xDD	; 221
     d4e:	f2 e0       	ldi	r31, 0x02	; 2
     d50:	20 91 dd 02 	lds	r18, 0x02DD
     d54:	82 2f       	mov	r24, r18
     d56:	82 95       	swap	r24
     d58:	80 7f       	andi	r24, 0xF0	; 240
     d5a:	22 95       	swap	r18
     d5c:	2f 70       	andi	r18, 0x0F	; 15
     d5e:	90 91 de 02 	lds	r25, 0x02DE
     d62:	93 70       	andi	r25, 0x03	; 3
     d64:	92 95       	swap	r25
     d66:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     d68:	df 01       	movw	r26, r30
     d6a:	5a 97       	sbiw	r26, 0x1a	; 26
     d6c:	3c 91       	ld	r19, X
     d6e:	53 2f       	mov	r21, r19
     d70:	55 0f       	add	r21, r21
     d72:	55 0f       	add	r21, r21
     d74:	4a 81       	ldd	r20, Y+2	; 0x02
     d76:	43 70       	andi	r20, 0x03	; 3
     d78:	45 2b       	or	r20, r21
     d7a:	4a 83       	std	Y+2, r20	; 0x02
     d7c:	63 2f       	mov	r22, r19
     d7e:	62 95       	swap	r22
     d80:	66 95       	lsr	r22
     d82:	66 95       	lsr	r22
     d84:	63 70       	andi	r22, 0x03	; 3
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	4c 91       	ld	r20, X
     d8a:	43 70       	andi	r20, 0x03	; 3
     d8c:	44 0f       	add	r20, r20
     d8e:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     d90:	df 01       	movw	r26, r30
     d92:	58 97       	sbiw	r26, 0x18	; 24
     d94:	3c 91       	ld	r19, X
     d96:	53 2f       	mov	r21, r19
     d98:	52 95       	swap	r21
     d9a:	50 7f       	andi	r21, 0xF0	; 240
     d9c:	46 2b       	or	r20, r22
     d9e:	45 2b       	or	r20, r21
     da0:	4b 83       	std	Y+3, r20	; 0x03
     da2:	63 2f       	mov	r22, r19
     da4:	62 95       	swap	r22
     da6:	6f 70       	andi	r22, 0x0F	; 15
     da8:	11 96       	adiw	r26, 0x01	; 1
     daa:	4c 91       	ld	r20, X
     dac:	43 70       	andi	r20, 0x03	; 3
     dae:	42 95       	swap	r20
     db0:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     db2:	df 01       	movw	r26, r30
     db4:	56 97       	sbiw	r26, 0x16	; 22
     db6:	3c 91       	ld	r19, X
     db8:	53 2f       	mov	r21, r19
     dba:	52 95       	swap	r21
     dbc:	55 0f       	add	r21, r21
     dbe:	55 0f       	add	r21, r21
     dc0:	50 7c       	andi	r21, 0xC0	; 192
     dc2:	46 2b       	or	r20, r22
     dc4:	45 2b       	or	r20, r21
     dc6:	4c 83       	std	Y+4, r20	; 0x04
     dc8:	11 96       	adiw	r26, 0x01	; 1
     dca:	4c 91       	ld	r20, X
     dcc:	42 95       	swap	r20
     dce:	44 0f       	add	r20, r20
     dd0:	44 0f       	add	r20, r20
     dd2:	40 7c       	andi	r20, 0xC0	; 192
     dd4:	36 95       	lsr	r19
     dd6:	36 95       	lsr	r19
     dd8:	34 2b       	or	r19, r20
     dda:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     ddc:	df 01       	movw	r26, r30
     dde:	54 97       	sbiw	r26, 0x14	; 20
     de0:	3c 91       	ld	r19, X
     de2:	3e 83       	std	Y+6, r19	; 0x06
     de4:	11 96       	adiw	r26, 0x01	; 1
     de6:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     de8:	df 01       	movw	r26, r30
     dea:	52 97       	sbiw	r26, 0x12	; 18
     dec:	3c 91       	ld	r19, X
     dee:	53 2f       	mov	r21, r19
     df0:	55 0f       	add	r21, r21
     df2:	55 0f       	add	r21, r21
     df4:	43 70       	andi	r20, 0x03	; 3
     df6:	45 2b       	or	r20, r21
     df8:	4f 83       	std	Y+7, r20	; 0x07
     dfa:	63 2f       	mov	r22, r19
     dfc:	62 95       	swap	r22
     dfe:	66 95       	lsr	r22
     e00:	66 95       	lsr	r22
     e02:	63 70       	andi	r22, 0x03	; 3
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	4c 91       	ld	r20, X
     e08:	43 70       	andi	r20, 0x03	; 3
     e0a:	44 0f       	add	r20, r20
     e0c:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     e0e:	df 01       	movw	r26, r30
     e10:	50 97       	sbiw	r26, 0x10	; 16
     e12:	3c 91       	ld	r19, X
     e14:	53 2f       	mov	r21, r19
     e16:	52 95       	swap	r21
     e18:	50 7f       	andi	r21, 0xF0	; 240
     e1a:	46 2b       	or	r20, r22
     e1c:	45 2b       	or	r20, r21
     e1e:	48 87       	std	Y+8, r20	; 0x08
     e20:	63 2f       	mov	r22, r19
     e22:	62 95       	swap	r22
     e24:	6f 70       	andi	r22, 0x0F	; 15
     e26:	11 96       	adiw	r26, 0x01	; 1
     e28:	4c 91       	ld	r20, X
     e2a:	43 70       	andi	r20, 0x03	; 3
     e2c:	42 95       	swap	r20
     e2e:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     e30:	df 01       	movw	r26, r30
     e32:	1e 97       	sbiw	r26, 0x0e	; 14
     e34:	3c 91       	ld	r19, X
     e36:	53 2f       	mov	r21, r19
     e38:	52 95       	swap	r21
     e3a:	55 0f       	add	r21, r21
     e3c:	55 0f       	add	r21, r21
     e3e:	50 7c       	andi	r21, 0xC0	; 192
     e40:	46 2b       	or	r20, r22
     e42:	45 2b       	or	r20, r21
     e44:	49 87       	std	Y+9, r20	; 0x09
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	4c 91       	ld	r20, X
     e4a:	42 95       	swap	r20
     e4c:	44 0f       	add	r20, r20
     e4e:	44 0f       	add	r20, r20
     e50:	40 7c       	andi	r20, 0xC0	; 192
     e52:	36 95       	lsr	r19
     e54:	36 95       	lsr	r19
     e56:	34 2b       	or	r19, r20
     e58:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     e5a:	df 01       	movw	r26, r30
     e5c:	1c 97       	sbiw	r26, 0x0c	; 12
     e5e:	3c 91       	ld	r19, X
     e60:	3b 87       	std	Y+11, r19	; 0x0b
     e62:	11 96       	adiw	r26, 0x01	; 1
     e64:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     e66:	df 01       	movw	r26, r30
     e68:	1a 97       	sbiw	r26, 0x0a	; 10
     e6a:	3c 91       	ld	r19, X
     e6c:	53 2f       	mov	r21, r19
     e6e:	55 0f       	add	r21, r21
     e70:	55 0f       	add	r21, r21
     e72:	43 70       	andi	r20, 0x03	; 3
     e74:	45 2b       	or	r20, r21
     e76:	4c 87       	std	Y+12, r20	; 0x0c
     e78:	63 2f       	mov	r22, r19
     e7a:	62 95       	swap	r22
     e7c:	66 95       	lsr	r22
     e7e:	66 95       	lsr	r22
     e80:	63 70       	andi	r22, 0x03	; 3
     e82:	11 96       	adiw	r26, 0x01	; 1
     e84:	4c 91       	ld	r20, X
     e86:	43 70       	andi	r20, 0x03	; 3
     e88:	44 0f       	add	r20, r20
     e8a:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
     e8c:	df 01       	movw	r26, r30
     e8e:	18 97       	sbiw	r26, 0x08	; 8
     e90:	3c 91       	ld	r19, X
     e92:	53 2f       	mov	r21, r19
     e94:	52 95       	swap	r21
     e96:	50 7f       	andi	r21, 0xF0	; 240
     e98:	46 2b       	or	r20, r22
     e9a:	45 2b       	or	r20, r21
     e9c:	4d 87       	std	Y+13, r20	; 0x0d
     e9e:	63 2f       	mov	r22, r19
     ea0:	62 95       	swap	r22
     ea2:	6f 70       	andi	r22, 0x0F	; 15
     ea4:	11 96       	adiw	r26, 0x01	; 1
     ea6:	4c 91       	ld	r20, X
     ea8:	43 70       	andi	r20, 0x03	; 3
     eaa:	42 95       	swap	r20
     eac:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
     eae:	df 01       	movw	r26, r30
     eb0:	16 97       	sbiw	r26, 0x06	; 6
     eb2:	3c 91       	ld	r19, X
     eb4:	53 2f       	mov	r21, r19
     eb6:	52 95       	swap	r21
     eb8:	55 0f       	add	r21, r21
     eba:	55 0f       	add	r21, r21
     ebc:	50 7c       	andi	r21, 0xC0	; 192
     ebe:	46 2b       	or	r20, r22
     ec0:	45 2b       	or	r20, r21
     ec2:	4e 87       	std	Y+14, r20	; 0x0e
     ec4:	11 96       	adiw	r26, 0x01	; 1
     ec6:	4c 91       	ld	r20, X
     ec8:	42 95       	swap	r20
     eca:	44 0f       	add	r20, r20
     ecc:	44 0f       	add	r20, r20
     ece:	40 7c       	andi	r20, 0xC0	; 192
     ed0:	36 95       	lsr	r19
     ed2:	36 95       	lsr	r19
     ed4:	34 2b       	or	r19, r20
     ed6:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
     ed8:	df 01       	movw	r26, r30
     eda:	14 97       	sbiw	r26, 0x04	; 4
     edc:	3c 91       	ld	r19, X
     ede:	38 8b       	std	Y+16, r19	; 0x10
     ee0:	11 96       	adiw	r26, 0x01	; 1
     ee2:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
     ee4:	df 01       	movw	r26, r30
     ee6:	12 97       	sbiw	r26, 0x02	; 2
     ee8:	3c 91       	ld	r19, X
     eea:	53 2f       	mov	r21, r19
     eec:	55 0f       	add	r21, r21
     eee:	55 0f       	add	r21, r21
     ef0:	43 70       	andi	r20, 0x03	; 3
     ef2:	45 2b       	or	r20, r21
     ef4:	49 8b       	std	Y+17, r20	; 0x11
     ef6:	32 95       	swap	r19
     ef8:	36 95       	lsr	r19
     efa:	36 95       	lsr	r19
     efc:	33 70       	andi	r19, 0x03	; 3
     efe:	11 96       	adiw	r26, 0x01	; 1
     f00:	4c 91       	ld	r20, X
     f02:	43 70       	andi	r20, 0x03	; 3
     f04:	44 0f       	add	r20, r20
     f06:	44 0f       	add	r20, r20
     f08:	83 2b       	or	r24, r19
     f0a:	84 2b       	or	r24, r20
     f0c:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
     f0e:	80 91 df 02 	lds	r24, 0x02DF
     f12:	38 2f       	mov	r19, r24
     f14:	32 95       	swap	r19
     f16:	33 0f       	add	r19, r19
     f18:	33 0f       	add	r19, r19
     f1a:	30 7c       	andi	r19, 0xC0	; 192
     f1c:	92 2b       	or	r25, r18
     f1e:	93 2b       	or	r25, r19
     f20:	9b 8b       	std	Y+19, r25	; 0x13
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	92 95       	swap	r25
     f26:	99 0f       	add	r25, r25
     f28:	99 0f       	add	r25, r25
     f2a:	90 7c       	andi	r25, 0xC0	; 192
     f2c:	86 95       	lsr	r24
     f2e:	86 95       	lsr	r24
     f30:	89 2b       	or	r24, r25
     f32:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
     f34:	80 91 e1 02 	lds	r24, 0x02E1
     f38:	8d 8b       	std	Y+21, r24	; 0x15
     f3a:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
     f3c:	80 91 e3 02 	lds	r24, 0x02E3
     f40:	28 2f       	mov	r18, r24
     f42:	22 0f       	add	r18, r18
     f44:	22 0f       	add	r18, r18
     f46:	93 70       	andi	r25, 0x03	; 3
     f48:	92 2b       	or	r25, r18
     f4a:	9e 8b       	std	Y+22, r25	; 0x16
     f4c:	38 2f       	mov	r19, r24
     f4e:	32 95       	swap	r19
     f50:	36 95       	lsr	r19
     f52:	36 95       	lsr	r19
     f54:	33 70       	andi	r19, 0x03	; 3
     f56:	97 81       	ldd	r25, Z+7	; 0x07
     f58:	93 70       	andi	r25, 0x03	; 3
     f5a:	99 0f       	add	r25, r25
     f5c:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
     f5e:	80 91 e5 02 	lds	r24, 0x02E5
     f62:	28 2f       	mov	r18, r24
     f64:	22 95       	swap	r18
     f66:	20 7f       	andi	r18, 0xF0	; 240
     f68:	93 2b       	or	r25, r19
     f6a:	92 2b       	or	r25, r18
     f6c:	9f 8b       	std	Y+23, r25	; 0x17
     f6e:	38 2f       	mov	r19, r24
     f70:	32 95       	swap	r19
     f72:	3f 70       	andi	r19, 0x0F	; 15
     f74:	91 85       	ldd	r25, Z+9	; 0x09
     f76:	93 70       	andi	r25, 0x03	; 3
     f78:	92 95       	swap	r25
     f7a:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
     f7c:	80 91 e7 02 	lds	r24, 0x02E7
     f80:	28 2f       	mov	r18, r24
     f82:	22 95       	swap	r18
     f84:	22 0f       	add	r18, r18
     f86:	22 0f       	add	r18, r18
     f88:	20 7c       	andi	r18, 0xC0	; 192
     f8a:	93 2b       	or	r25, r19
     f8c:	92 2b       	or	r25, r18
     f8e:	98 8f       	std	Y+24, r25	; 0x18
     f90:	93 85       	ldd	r25, Z+11	; 0x0b
     f92:	92 95       	swap	r25
     f94:	99 0f       	add	r25, r25
     f96:	99 0f       	add	r25, r25
     f98:	90 7c       	andi	r25, 0xC0	; 192
     f9a:	86 95       	lsr	r24
     f9c:	86 95       	lsr	r24
     f9e:	89 2b       	or	r24, r25
     fa0:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
     fa2:	80 91 e9 02 	lds	r24, 0x02E9
     fa6:	8a 8f       	std	Y+26, r24	; 0x1a
     fa8:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
     faa:	80 91 eb 02 	lds	r24, 0x02EB
     fae:	28 2f       	mov	r18, r24
     fb0:	22 0f       	add	r18, r18
     fb2:	22 0f       	add	r18, r18
     fb4:	93 70       	andi	r25, 0x03	; 3
     fb6:	92 2b       	or	r25, r18
     fb8:	9b 8f       	std	Y+27, r25	; 0x1b
     fba:	38 2f       	mov	r19, r24
     fbc:	32 95       	swap	r19
     fbe:	36 95       	lsr	r19
     fc0:	36 95       	lsr	r19
     fc2:	33 70       	andi	r19, 0x03	; 3
     fc4:	97 85       	ldd	r25, Z+15	; 0x0f
     fc6:	93 70       	andi	r25, 0x03	; 3
     fc8:	99 0f       	add	r25, r25
     fca:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
     fcc:	80 91 ed 02 	lds	r24, 0x02ED
     fd0:	28 2f       	mov	r18, r24
     fd2:	22 95       	swap	r18
     fd4:	20 7f       	andi	r18, 0xF0	; 240
     fd6:	93 2b       	or	r25, r19
     fd8:	92 2b       	or	r25, r18
     fda:	9c 8f       	std	Y+28, r25	; 0x1c
     fdc:	38 2f       	mov	r19, r24
     fde:	32 95       	swap	r19
     fe0:	3f 70       	andi	r19, 0x0F	; 15
     fe2:	91 89       	ldd	r25, Z+17	; 0x11
     fe4:	93 70       	andi	r25, 0x03	; 3
     fe6:	92 95       	swap	r25
     fe8:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
     fea:	80 91 ef 02 	lds	r24, 0x02EF
     fee:	28 2f       	mov	r18, r24
     ff0:	22 95       	swap	r18
     ff2:	22 0f       	add	r18, r18
     ff4:	22 0f       	add	r18, r18
     ff6:	20 7c       	andi	r18, 0xC0	; 192
     ff8:	93 2b       	or	r25, r19
     ffa:	92 2b       	or	r25, r18
     ffc:	9d 8f       	std	Y+29, r25	; 0x1d
     ffe:	93 89       	ldd	r25, Z+19	; 0x13
    1000:	92 95       	swap	r25
    1002:	99 0f       	add	r25, r25
    1004:	99 0f       	add	r25, r25
    1006:	90 7c       	andi	r25, 0xC0	; 192
    1008:	86 95       	lsr	r24
    100a:	86 95       	lsr	r24
    100c:	89 2b       	or	r24, r25
    100e:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    1010:	80 91 f1 02 	lds	r24, 0x02F1
    1014:	8f 8f       	std	Y+31, r24	; 0x1f
    1016:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    1018:	80 91 f3 02 	lds	r24, 0x02F3
    101c:	28 2f       	mov	r18, r24
    101e:	22 0f       	add	r18, r18
    1020:	22 0f       	add	r18, r18
    1022:	93 70       	andi	r25, 0x03	; 3
    1024:	92 2b       	or	r25, r18
    1026:	98 a3       	lds	r25, 0x58
    1028:	38 2f       	mov	r19, r24
    102a:	32 95       	swap	r19
    102c:	36 95       	lsr	r19
    102e:	36 95       	lsr	r19
    1030:	33 70       	andi	r19, 0x03	; 3
    1032:	97 89       	ldd	r25, Z+23	; 0x17
    1034:	93 70       	andi	r25, 0x03	; 3
    1036:	99 0f       	add	r25, r25
    1038:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    103a:	80 91 f5 02 	lds	r24, 0x02F5
    103e:	28 2f       	mov	r18, r24
    1040:	22 95       	swap	r18
    1042:	20 7f       	andi	r18, 0xF0	; 240
    1044:	93 2b       	or	r25, r19
    1046:	92 2b       	or	r25, r18
    1048:	99 a3       	lds	r25, 0x59
    104a:	38 2f       	mov	r19, r24
    104c:	32 95       	swap	r19
    104e:	3f 70       	andi	r19, 0x0F	; 15
    1050:	91 8d       	ldd	r25, Z+25	; 0x19
    1052:	93 70       	andi	r25, 0x03	; 3
    1054:	92 95       	swap	r25
    1056:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    1058:	80 91 f7 02 	lds	r24, 0x02F7
    105c:	28 2f       	mov	r18, r24
    105e:	22 95       	swap	r18
    1060:	22 0f       	add	r18, r18
    1062:	22 0f       	add	r18, r18
    1064:	20 7c       	andi	r18, 0xC0	; 192
    1066:	93 2b       	or	r25, r19
    1068:	92 2b       	or	r25, r18
    106a:	9a a3       	lds	r25, 0x5a
    106c:	93 8d       	ldd	r25, Z+27	; 0x1b
    106e:	92 95       	swap	r25
    1070:	99 0f       	add	r25, r25
    1072:	99 0f       	add	r25, r25
    1074:	90 7c       	andi	r25, 0xC0	; 192
    1076:	86 95       	lsr	r24
    1078:	86 95       	lsr	r24
    107a:	89 2b       	or	r24, r25
    107c:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    107e:	80 91 f9 02 	lds	r24, 0x02F9
    1082:	8c a3       	lds	r24, 0x5c
    1084:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    1086:	80 91 fb 02 	lds	r24, 0x02FB
    108a:	28 2f       	mov	r18, r24
    108c:	22 0f       	add	r18, r18
    108e:	22 0f       	add	r18, r18
    1090:	93 70       	andi	r25, 0x03	; 3
    1092:	92 2b       	or	r25, r18
    1094:	9d a3       	lds	r25, 0x5d
    1096:	82 95       	swap	r24
    1098:	86 95       	lsr	r24
    109a:	86 95       	lsr	r24
    109c:	83 70       	andi	r24, 0x03	; 3
    109e:	2e a1       	lds	r18, 0x4e
    10a0:	20 7f       	andi	r18, 0xF0	; 240
    10a2:	97 8d       	ldd	r25, Z+31	; 0x1f
    10a4:	93 70       	andi	r25, 0x03	; 3
    10a6:	99 0f       	add	r25, r25
    10a8:	99 0f       	add	r25, r25
    10aa:	82 2b       	or	r24, r18
    10ac:	89 2b       	or	r24, r25
    10ae:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    10b0:	80 91 fd 02 	lds	r24, 0x02FD
    10b4:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    10b6:	80 91 fe 02 	lds	r24, 0x02FE
    10ba:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    10bc:	80 91 ff 02 	lds	r24, 0x02FF
    10c0:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    10c2:	80 91 00 03 	lds	r24, 0x0300
    10c6:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    10c8:	80 91 01 03 	lds	r24, 0x0301
    10cc:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    10ce:	0e 94 6f 06 	call	0xcde	; 0xcde <lock_pots>
	if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    10d2:	80 91 03 03 	lds	r24, 0x0303
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	29 f4       	brne	.+10     	; 0x10e4 <save_patch+0x3b0>
    10da:	80 91 78 03 	lds	r24, 0x0378
    10de:	8f 77       	andi	r24, 0x7F	; 127
    10e0:	80 93 78 03 	sts	0x0378, r24
	current_patch.mode = MEMORY;
    10e4:	10 92 03 03 	sts	0x0303, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    10e8:	21 2f       	mov	r18, r17
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	8b e2       	ldi	r24, 0x2B	; 43
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	28 9f       	mul	r18, r24
    10f2:	b0 01       	movw	r22, r0
    10f4:	29 9f       	mul	r18, r25
    10f6:	70 0d       	add	r23, r0
    10f8:	38 9f       	mul	r19, r24
    10fa:	70 0d       	add	r23, r0
    10fc:	11 24       	eor	r1, r1
    10fe:	60 50       	subi	r22, 0x00	; 0
    1100:	70 40       	sbci	r23, 0x00	; 0
    1102:	ce 01       	movw	r24, r28
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	4b e2       	ldi	r20, 0x2B	; 43
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__eeupd_block_m6450a>
}	
    110e:	ab 96       	adiw	r28, 0x2b	; 43
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	08 95       	ret

00001122 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	c3 54       	subi	r28, 0x43	; 67
    112e:	d0 40       	sbci	r29, 0x00	; 0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	2b e2       	ldi	r18, 0x2B	; 43
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	82 9f       	mul	r24, r18
    1142:	b0 01       	movw	r22, r0
    1144:	83 9f       	mul	r24, r19
    1146:	70 0d       	add	r23, r0
    1148:	92 9f       	mul	r25, r18
    114a:	70 0d       	add	r23, r0
    114c:	11 24       	eor	r1, r1
    114e:	60 50       	subi	r22, 0x00	; 0
    1150:	70 40       	sbci	r23, 0x00	; 0
    1152:	ce 01       	movw	r24, r28
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	4b e2       	ldi	r20, 0x2B	; 43
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    115e:	ed ed       	ldi	r30, 0xDD	; 221
    1160:	f2 e0       	ldi	r31, 0x02	; 2
    1162:	8a 89       	ldd	r24, Y+18	; 0x12
    1164:	28 2f       	mov	r18, r24
    1166:	22 95       	swap	r18
    1168:	2f 70       	andi	r18, 0x0F	; 15
    116a:	9b 89       	ldd	r25, Y+19	; 0x13
    116c:	39 2f       	mov	r19, r25
    116e:	32 95       	swap	r19
    1170:	30 7f       	andi	r19, 0xF0	; 240
    1172:	32 2b       	or	r19, r18
    1174:	29 2f       	mov	r18, r25
    1176:	22 95       	swap	r18
    1178:	2f 70       	andi	r18, 0x0F	; 15
    117a:	23 70       	andi	r18, 0x03	; 3
    117c:	30 93 dd 02 	sts	0x02DD, r19
    1180:	20 93 de 02 	sts	0x02DE, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    1184:	df 01       	movw	r26, r30
    1186:	5a 97       	sbiw	r26, 0x1a	; 26
    1188:	4a 81       	ldd	r20, Y+2	; 0x02
    118a:	46 95       	lsr	r20
    118c:	46 95       	lsr	r20
    118e:	2b 81       	ldd	r18, Y+3	; 0x03
    1190:	32 2f       	mov	r19, r18
    1192:	32 95       	swap	r19
    1194:	33 0f       	add	r19, r19
    1196:	33 0f       	add	r19, r19
    1198:	30 7c       	andi	r19, 0xC0	; 192
    119a:	43 2b       	or	r20, r19
    119c:	32 2f       	mov	r19, r18
    119e:	36 95       	lsr	r19
    11a0:	36 95       	lsr	r19
    11a2:	33 70       	andi	r19, 0x03	; 3
    11a4:	4c 93       	st	X, r20
    11a6:	11 96       	adiw	r26, 0x01	; 1
    11a8:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    11aa:	df 01       	movw	r26, r30
    11ac:	58 97       	sbiw	r26, 0x18	; 24
    11ae:	32 2f       	mov	r19, r18
    11b0:	32 95       	swap	r19
    11b2:	3f 70       	andi	r19, 0x0F	; 15
    11b4:	2c 81       	ldd	r18, Y+4	; 0x04
    11b6:	42 2f       	mov	r20, r18
    11b8:	42 95       	swap	r20
    11ba:	40 7f       	andi	r20, 0xF0	; 240
    11bc:	43 2b       	or	r20, r19
    11be:	32 2f       	mov	r19, r18
    11c0:	32 95       	swap	r19
    11c2:	3f 70       	andi	r19, 0x0F	; 15
    11c4:	33 70       	andi	r19, 0x03	; 3
    11c6:	4c 93       	st	X, r20
    11c8:	11 96       	adiw	r26, 0x01	; 1
    11ca:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    11cc:	df 01       	movw	r26, r30
    11ce:	56 97       	sbiw	r26, 0x16	; 22
    11d0:	22 95       	swap	r18
    11d2:	26 95       	lsr	r18
    11d4:	26 95       	lsr	r18
    11d6:	23 70       	andi	r18, 0x03	; 3
    11d8:	3d 81       	ldd	r19, Y+5	; 0x05
    11da:	43 2f       	mov	r20, r19
    11dc:	44 0f       	add	r20, r20
    11de:	44 0f       	add	r20, r20
    11e0:	24 2b       	or	r18, r20
    11e2:	32 95       	swap	r19
    11e4:	36 95       	lsr	r19
    11e6:	36 95       	lsr	r19
    11e8:	33 70       	andi	r19, 0x03	; 3
    11ea:	2c 93       	st	X, r18
    11ec:	11 96       	adiw	r26, 0x01	; 1
    11ee:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    11f0:	df 01       	movw	r26, r30
    11f2:	54 97       	sbiw	r26, 0x14	; 20
    11f4:	4e 81       	ldd	r20, Y+6	; 0x06
    11f6:	2f 81       	ldd	r18, Y+7	; 0x07
    11f8:	32 2f       	mov	r19, r18
    11fa:	33 70       	andi	r19, 0x03	; 3
    11fc:	4c 93       	st	X, r20
    11fe:	11 96       	adiw	r26, 0x01	; 1
    1200:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1202:	df 01       	movw	r26, r30
    1204:	52 97       	sbiw	r26, 0x12	; 18
    1206:	32 2f       	mov	r19, r18
    1208:	36 95       	lsr	r19
    120a:	36 95       	lsr	r19
    120c:	28 85       	ldd	r18, Y+8	; 0x08
    120e:	42 2f       	mov	r20, r18
    1210:	42 95       	swap	r20
    1212:	44 0f       	add	r20, r20
    1214:	44 0f       	add	r20, r20
    1216:	40 7c       	andi	r20, 0xC0	; 192
    1218:	43 2b       	or	r20, r19
    121a:	32 2f       	mov	r19, r18
    121c:	36 95       	lsr	r19
    121e:	36 95       	lsr	r19
    1220:	33 70       	andi	r19, 0x03	; 3
    1222:	4c 93       	st	X, r20
    1224:	11 96       	adiw	r26, 0x01	; 1
    1226:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1228:	df 01       	movw	r26, r30
    122a:	50 97       	sbiw	r26, 0x10	; 16
    122c:	32 2f       	mov	r19, r18
    122e:	32 95       	swap	r19
    1230:	3f 70       	andi	r19, 0x0F	; 15
    1232:	29 85       	ldd	r18, Y+9	; 0x09
    1234:	42 2f       	mov	r20, r18
    1236:	42 95       	swap	r20
    1238:	40 7f       	andi	r20, 0xF0	; 240
    123a:	43 2b       	or	r20, r19
    123c:	32 2f       	mov	r19, r18
    123e:	32 95       	swap	r19
    1240:	3f 70       	andi	r19, 0x0F	; 15
    1242:	33 70       	andi	r19, 0x03	; 3
    1244:	4c 93       	st	X, r20
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    124a:	df 01       	movw	r26, r30
    124c:	1e 97       	sbiw	r26, 0x0e	; 14
    124e:	22 95       	swap	r18
    1250:	26 95       	lsr	r18
    1252:	26 95       	lsr	r18
    1254:	23 70       	andi	r18, 0x03	; 3
    1256:	3a 85       	ldd	r19, Y+10	; 0x0a
    1258:	43 2f       	mov	r20, r19
    125a:	44 0f       	add	r20, r20
    125c:	44 0f       	add	r20, r20
    125e:	24 2b       	or	r18, r20
    1260:	32 95       	swap	r19
    1262:	36 95       	lsr	r19
    1264:	36 95       	lsr	r19
    1266:	33 70       	andi	r19, 0x03	; 3
    1268:	2c 93       	st	X, r18
    126a:	11 96       	adiw	r26, 0x01	; 1
    126c:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    126e:	df 01       	movw	r26, r30
    1270:	1c 97       	sbiw	r26, 0x0c	; 12
    1272:	4b 85       	ldd	r20, Y+11	; 0x0b
    1274:	2c 85       	ldd	r18, Y+12	; 0x0c
    1276:	32 2f       	mov	r19, r18
    1278:	33 70       	andi	r19, 0x03	; 3
    127a:	4c 93       	st	X, r20
    127c:	11 96       	adiw	r26, 0x01	; 1
    127e:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1280:	df 01       	movw	r26, r30
    1282:	1a 97       	sbiw	r26, 0x0a	; 10
    1284:	32 2f       	mov	r19, r18
    1286:	36 95       	lsr	r19
    1288:	36 95       	lsr	r19
    128a:	2d 85       	ldd	r18, Y+13	; 0x0d
    128c:	42 2f       	mov	r20, r18
    128e:	42 95       	swap	r20
    1290:	44 0f       	add	r20, r20
    1292:	44 0f       	add	r20, r20
    1294:	40 7c       	andi	r20, 0xC0	; 192
    1296:	43 2b       	or	r20, r19
    1298:	32 2f       	mov	r19, r18
    129a:	36 95       	lsr	r19
    129c:	36 95       	lsr	r19
    129e:	33 70       	andi	r19, 0x03	; 3
    12a0:	4c 93       	st	X, r20
    12a2:	11 96       	adiw	r26, 0x01	; 1
    12a4:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    12a6:	df 01       	movw	r26, r30
    12a8:	18 97       	sbiw	r26, 0x08	; 8
    12aa:	32 2f       	mov	r19, r18
    12ac:	32 95       	swap	r19
    12ae:	3f 70       	andi	r19, 0x0F	; 15
    12b0:	2e 85       	ldd	r18, Y+14	; 0x0e
    12b2:	42 2f       	mov	r20, r18
    12b4:	42 95       	swap	r20
    12b6:	40 7f       	andi	r20, 0xF0	; 240
    12b8:	43 2b       	or	r20, r19
    12ba:	32 2f       	mov	r19, r18
    12bc:	32 95       	swap	r19
    12be:	3f 70       	andi	r19, 0x0F	; 15
    12c0:	33 70       	andi	r19, 0x03	; 3
    12c2:	4c 93       	st	X, r20
    12c4:	11 96       	adiw	r26, 0x01	; 1
    12c6:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    12c8:	df 01       	movw	r26, r30
    12ca:	16 97       	sbiw	r26, 0x06	; 6
    12cc:	22 95       	swap	r18
    12ce:	26 95       	lsr	r18
    12d0:	26 95       	lsr	r18
    12d2:	23 70       	andi	r18, 0x03	; 3
    12d4:	3f 85       	ldd	r19, Y+15	; 0x0f
    12d6:	43 2f       	mov	r20, r19
    12d8:	44 0f       	add	r20, r20
    12da:	44 0f       	add	r20, r20
    12dc:	24 2b       	or	r18, r20
    12de:	32 95       	swap	r19
    12e0:	36 95       	lsr	r19
    12e2:	36 95       	lsr	r19
    12e4:	33 70       	andi	r19, 0x03	; 3
    12e6:	2c 93       	st	X, r18
    12e8:	11 96       	adiw	r26, 0x01	; 1
    12ea:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    12ec:	df 01       	movw	r26, r30
    12ee:	14 97       	sbiw	r26, 0x04	; 4
    12f0:	48 89       	ldd	r20, Y+16	; 0x10
    12f2:	29 89       	ldd	r18, Y+17	; 0x11
    12f4:	32 2f       	mov	r19, r18
    12f6:	33 70       	andi	r19, 0x03	; 3
    12f8:	4c 93       	st	X, r20
    12fa:	11 96       	adiw	r26, 0x01	; 1
    12fc:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    12fe:	df 01       	movw	r26, r30
    1300:	12 97       	sbiw	r26, 0x02	; 2
    1302:	26 95       	lsr	r18
    1304:	26 95       	lsr	r18
    1306:	38 2f       	mov	r19, r24
    1308:	32 95       	swap	r19
    130a:	33 0f       	add	r19, r19
    130c:	33 0f       	add	r19, r19
    130e:	30 7c       	andi	r19, 0xC0	; 192
    1310:	23 2b       	or	r18, r19
    1312:	86 95       	lsr	r24
    1314:	86 95       	lsr	r24
    1316:	83 70       	andi	r24, 0x03	; 3
    1318:	2c 93       	st	X, r18
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    131e:	92 95       	swap	r25
    1320:	96 95       	lsr	r25
    1322:	96 95       	lsr	r25
    1324:	93 70       	andi	r25, 0x03	; 3
    1326:	8c 89       	ldd	r24, Y+20	; 0x14
    1328:	28 2f       	mov	r18, r24
    132a:	22 0f       	add	r18, r18
    132c:	22 0f       	add	r18, r18
    132e:	92 2b       	or	r25, r18
    1330:	82 95       	swap	r24
    1332:	86 95       	lsr	r24
    1334:	86 95       	lsr	r24
    1336:	83 70       	andi	r24, 0x03	; 3
    1338:	90 93 df 02 	sts	0x02DF, r25
    133c:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    133e:	2d 89       	ldd	r18, Y+21	; 0x15
    1340:	8e 89       	ldd	r24, Y+22	; 0x16
    1342:	98 2f       	mov	r25, r24
    1344:	93 70       	andi	r25, 0x03	; 3
    1346:	20 93 e1 02 	sts	0x02E1, r18
    134a:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    134c:	98 2f       	mov	r25, r24
    134e:	96 95       	lsr	r25
    1350:	96 95       	lsr	r25
    1352:	8f 89       	ldd	r24, Y+23	; 0x17
    1354:	28 2f       	mov	r18, r24
    1356:	22 95       	swap	r18
    1358:	22 0f       	add	r18, r18
    135a:	22 0f       	add	r18, r18
    135c:	20 7c       	andi	r18, 0xC0	; 192
    135e:	29 2b       	or	r18, r25
    1360:	98 2f       	mov	r25, r24
    1362:	96 95       	lsr	r25
    1364:	96 95       	lsr	r25
    1366:	93 70       	andi	r25, 0x03	; 3
    1368:	20 93 e3 02 	sts	0x02E3, r18
    136c:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    136e:	98 2f       	mov	r25, r24
    1370:	92 95       	swap	r25
    1372:	9f 70       	andi	r25, 0x0F	; 15
    1374:	88 8d       	ldd	r24, Y+24	; 0x18
    1376:	28 2f       	mov	r18, r24
    1378:	22 95       	swap	r18
    137a:	20 7f       	andi	r18, 0xF0	; 240
    137c:	29 2b       	or	r18, r25
    137e:	98 2f       	mov	r25, r24
    1380:	92 95       	swap	r25
    1382:	9f 70       	andi	r25, 0x0F	; 15
    1384:	93 70       	andi	r25, 0x03	; 3
    1386:	20 93 e5 02 	sts	0x02E5, r18
    138a:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    138c:	82 95       	swap	r24
    138e:	86 95       	lsr	r24
    1390:	86 95       	lsr	r24
    1392:	83 70       	andi	r24, 0x03	; 3
    1394:	99 8d       	ldd	r25, Y+25	; 0x19
    1396:	29 2f       	mov	r18, r25
    1398:	22 0f       	add	r18, r18
    139a:	22 0f       	add	r18, r18
    139c:	82 2b       	or	r24, r18
    139e:	92 95       	swap	r25
    13a0:	96 95       	lsr	r25
    13a2:	96 95       	lsr	r25
    13a4:	93 70       	andi	r25, 0x03	; 3
    13a6:	80 93 e7 02 	sts	0x02E7, r24
    13aa:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    13ac:	2a 8d       	ldd	r18, Y+26	; 0x1a
    13ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b0:	98 2f       	mov	r25, r24
    13b2:	93 70       	andi	r25, 0x03	; 3
    13b4:	20 93 e9 02 	sts	0x02E9, r18
    13b8:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    13ba:	98 2f       	mov	r25, r24
    13bc:	96 95       	lsr	r25
    13be:	96 95       	lsr	r25
    13c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13c2:	28 2f       	mov	r18, r24
    13c4:	22 95       	swap	r18
    13c6:	22 0f       	add	r18, r18
    13c8:	22 0f       	add	r18, r18
    13ca:	20 7c       	andi	r18, 0xC0	; 192
    13cc:	29 2b       	or	r18, r25
    13ce:	98 2f       	mov	r25, r24
    13d0:	96 95       	lsr	r25
    13d2:	96 95       	lsr	r25
    13d4:	93 70       	andi	r25, 0x03	; 3
    13d6:	20 93 eb 02 	sts	0x02EB, r18
    13da:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    13dc:	98 2f       	mov	r25, r24
    13de:	92 95       	swap	r25
    13e0:	9f 70       	andi	r25, 0x0F	; 15
    13e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e4:	28 2f       	mov	r18, r24
    13e6:	22 95       	swap	r18
    13e8:	20 7f       	andi	r18, 0xF0	; 240
    13ea:	29 2b       	or	r18, r25
    13ec:	98 2f       	mov	r25, r24
    13ee:	92 95       	swap	r25
    13f0:	9f 70       	andi	r25, 0x0F	; 15
    13f2:	93 70       	andi	r25, 0x03	; 3
    13f4:	20 93 ed 02 	sts	0x02ED, r18
    13f8:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    13fa:	82 95       	swap	r24
    13fc:	86 95       	lsr	r24
    13fe:	86 95       	lsr	r24
    1400:	83 70       	andi	r24, 0x03	; 3
    1402:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1404:	29 2f       	mov	r18, r25
    1406:	22 0f       	add	r18, r18
    1408:	22 0f       	add	r18, r18
    140a:	82 2b       	or	r24, r18
    140c:	92 95       	swap	r25
    140e:	96 95       	lsr	r25
    1410:	96 95       	lsr	r25
    1412:	93 70       	andi	r25, 0x03	; 3
    1414:	80 93 ef 02 	sts	0x02EF, r24
    1418:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    141a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    141c:	88 a1       	lds	r24, 0x48
    141e:	98 2f       	mov	r25, r24
    1420:	93 70       	andi	r25, 0x03	; 3
    1422:	20 93 f1 02 	sts	0x02F1, r18
    1426:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1428:	98 2f       	mov	r25, r24
    142a:	96 95       	lsr	r25
    142c:	96 95       	lsr	r25
    142e:	89 a1       	lds	r24, 0x49
    1430:	28 2f       	mov	r18, r24
    1432:	22 95       	swap	r18
    1434:	22 0f       	add	r18, r18
    1436:	22 0f       	add	r18, r18
    1438:	20 7c       	andi	r18, 0xC0	; 192
    143a:	29 2b       	or	r18, r25
    143c:	98 2f       	mov	r25, r24
    143e:	96 95       	lsr	r25
    1440:	96 95       	lsr	r25
    1442:	93 70       	andi	r25, 0x03	; 3
    1444:	20 93 f3 02 	sts	0x02F3, r18
    1448:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    144a:	98 2f       	mov	r25, r24
    144c:	92 95       	swap	r25
    144e:	9f 70       	andi	r25, 0x0F	; 15
    1450:	8a a1       	lds	r24, 0x4a
    1452:	28 2f       	mov	r18, r24
    1454:	22 95       	swap	r18
    1456:	20 7f       	andi	r18, 0xF0	; 240
    1458:	29 2b       	or	r18, r25
    145a:	98 2f       	mov	r25, r24
    145c:	92 95       	swap	r25
    145e:	9f 70       	andi	r25, 0x0F	; 15
    1460:	93 70       	andi	r25, 0x03	; 3
    1462:	20 93 f5 02 	sts	0x02F5, r18
    1466:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1468:	82 95       	swap	r24
    146a:	86 95       	lsr	r24
    146c:	86 95       	lsr	r24
    146e:	83 70       	andi	r24, 0x03	; 3
    1470:	9b a1       	lds	r25, 0x4b
    1472:	29 2f       	mov	r18, r25
    1474:	22 0f       	add	r18, r18
    1476:	22 0f       	add	r18, r18
    1478:	82 2b       	or	r24, r18
    147a:	92 95       	swap	r25
    147c:	96 95       	lsr	r25
    147e:	96 95       	lsr	r25
    1480:	93 70       	andi	r25, 0x03	; 3
    1482:	80 93 f7 02 	sts	0x02F7, r24
    1486:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1488:	2c a1       	lds	r18, 0x4c
    148a:	8d a1       	lds	r24, 0x4d
    148c:	98 2f       	mov	r25, r24
    148e:	93 70       	andi	r25, 0x03	; 3
    1490:	20 93 f9 02 	sts	0x02F9, r18
    1494:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1496:	98 2f       	mov	r25, r24
    1498:	96 95       	lsr	r25
    149a:	96 95       	lsr	r25
    149c:	8e a1       	lds	r24, 0x4e
    149e:	28 2f       	mov	r18, r24
    14a0:	22 95       	swap	r18
    14a2:	22 0f       	add	r18, r18
    14a4:	22 0f       	add	r18, r18
    14a6:	20 7c       	andi	r18, 0xC0	; 192
    14a8:	29 2b       	or	r18, r25
    14aa:	86 95       	lsr	r24
    14ac:	86 95       	lsr	r24
    14ae:	98 2f       	mov	r25, r24
    14b0:	93 70       	andi	r25, 0x03	; 3
    14b2:	20 93 fb 02 	sts	0x02FB, r18
    14b6:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    14b8:	1f a1       	lds	r17, 0x4f
    14ba:	10 93 fd 02 	sts	0x02FD, r17
	current_patch.byte_2 = loaded_patch.byte_2;
    14be:	68 a5       	lds	r22, 0x68
    14c0:	60 93 fe 02 	sts	0x02FE, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    14c4:	89 a5       	lds	r24, 0x69
    14c6:	80 93 ff 02 	sts	0x02FF, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    14ca:	9a a5       	lds	r25, 0x6a
    14cc:	90 93 00 03 	sts	0x0300, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    14d0:	7b a5       	lds	r23, 0x6b
    14d2:	70 93 01 03 	sts	0x0301, r23
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    14d6:	de 01       	movw	r26, r28
    14d8:	9c 96       	adiw	r26, 0x2c	; 44
    14da:	ef ef       	ldi	r30, 0xFF	; 255
    14dc:	f1 e0       	ldi	r31, 0x01	; 1
    14de:	28 e0       	ldi	r18, 0x08	; 8
    14e0:	01 90       	ld	r0, Z+
    14e2:	0d 92       	st	X+, r0
    14e4:	21 50       	subi	r18, 0x01	; 1
    14e6:	e1 f7       	brne	.-8      	; 0x14e0 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    14e8:	e9 2f       	mov	r30, r25
    14ea:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	9f 01       	movw	r18, r30
    14f0:	22 0f       	add	r18, r18
    14f2:	33 1f       	adc	r19, r19
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	a9 01       	movw	r20, r18
    14fa:	44 0f       	add	r20, r20
    14fc:	55 1f       	adc	r21, r21
    14fe:	44 0f       	add	r20, r20
    1500:	55 1f       	adc	r21, r21
    1502:	44 0f       	add	r20, r20
    1504:	55 1f       	adc	r21, r21
    1506:	42 1b       	sub	r20, r18
    1508:	53 0b       	sbc	r21, r19
    150a:	4e 0f       	add	r20, r30
    150c:	5f 1f       	adc	r21, r31
    150e:	55 95       	asr	r21
    1510:	47 95       	ror	r20
    1512:	55 95       	asr	r21
    1514:	47 95       	ror	r20
    1516:	55 95       	asr	r21
    1518:	47 95       	ror	r20
    151a:	55 95       	asr	r21
    151c:	47 95       	ror	r20
    151e:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1520:	fe 01       	movw	r30, r28
    1522:	e4 0f       	add	r30, r20
    1524:	f1 1d       	adc	r31, r1
    1526:	24 a5       	lds	r18, 0x64
    1528:	20 93 04 03 	sts	0x0304, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    152c:	de 01       	movw	r26, r28
    152e:	d4 96       	adiw	r26, 0x34	; 52
    1530:	e7 e0       	ldi	r30, 0x07	; 7
    1532:	f2 e0       	ldi	r31, 0x02	; 2
    1534:	28 e0       	ldi	r18, 0x08	; 8
    1536:	01 90       	ld	r0, Z+
    1538:	0d 92       	st	X+, r0
    153a:	21 50       	subi	r18, 0x01	; 1
    153c:	e1 f7       	brne	.-8      	; 0x1536 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    153e:	29 2f       	mov	r18, r25
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	20 7e       	andi	r18, 0xE0	; 224
    1544:	30 70       	andi	r19, 0x00	; 0
    1546:	35 95       	asr	r19
    1548:	27 95       	ror	r18
    154a:	35 95       	asr	r19
    154c:	27 95       	ror	r18
    154e:	35 95       	asr	r19
    1550:	27 95       	ror	r18
    1552:	83 70       	andi	r24, 0x03	; 3
    1554:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    1556:	42 2f       	mov	r20, r18
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	ca 01       	movw	r24, r20
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	9c 01       	movw	r18, r24
    1566:	22 0f       	add	r18, r18
    1568:	33 1f       	adc	r19, r19
    156a:	22 0f       	add	r18, r18
    156c:	33 1f       	adc	r19, r19
    156e:	22 0f       	add	r18, r18
    1570:	33 1f       	adc	r19, r19
    1572:	28 1b       	sub	r18, r24
    1574:	39 0b       	sbc	r19, r25
    1576:	42 0f       	add	r20, r18
    1578:	53 1f       	adc	r21, r19
    157a:	ca 01       	movw	r24, r20
    157c:	95 95       	asr	r25
    157e:	87 95       	ror	r24
    1580:	95 95       	asr	r25
    1582:	87 95       	ror	r24
    1584:	95 95       	asr	r25
    1586:	87 95       	ror	r24
    1588:	95 95       	asr	r25
    158a:	87 95       	ror	r24
    158c:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    158e:	fe 01       	movw	r30, r28
    1590:	e8 0f       	add	r30, r24
    1592:	f1 1d       	adc	r31, r1
    1594:	84 a9       	sts	0x44, r24
    1596:	80 93 05 03 	sts	0x0305, r24
	
	uint8_t lfo_lookup[] = {7, 3, 5, 1, 6, 4, 0, 2}; //bits 7, 5, 4, 6 are irrelevant here
    159a:	de 01       	movw	r26, r28
    159c:	dc 96       	adiw	r26, 0x3c	; 60
    159e:	ef e0       	ldi	r30, 0x0F	; 15
    15a0:	f2 e0       	ldi	r31, 0x02	; 2
    15a2:	88 e0       	ldi	r24, 0x08	; 8
    15a4:	01 90       	ld	r0, Z+
    15a6:	0d 92       	st	X+, r0
    15a8:	81 50       	subi	r24, 0x01	; 1
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 >> 4; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    15ac:	62 95       	swap	r22
    15ae:	6f 70       	andi	r22, 0x0F	; 15
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    15b0:	46 2f       	mov	r20, r22
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	ca 01       	movw	r24, r20
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	9c 01       	movw	r18, r24
    15c0:	22 0f       	add	r18, r18
    15c2:	33 1f       	adc	r19, r19
    15c4:	22 0f       	add	r18, r18
    15c6:	33 1f       	adc	r19, r19
    15c8:	22 0f       	add	r18, r18
    15ca:	33 1f       	adc	r19, r19
    15cc:	28 1b       	sub	r18, r24
    15ce:	39 0b       	sbc	r19, r25
    15d0:	42 0f       	add	r20, r18
    15d2:	53 1f       	adc	r21, r19
    15d4:	ca 01       	movw	r24, r20
    15d6:	95 95       	asr	r25
    15d8:	87 95       	ror	r24
    15da:	95 95       	asr	r25
    15dc:	87 95       	ror	r24
    15de:	95 95       	asr	r25
    15e0:	87 95       	ror	r24
    15e2:	95 95       	asr	r25
    15e4:	87 95       	ror	r24
    15e6:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    15e8:	fe 01       	movw	r30, r28
    15ea:	e8 0f       	add	r30, r24
    15ec:	f1 1d       	adc	r31, r1
    15ee:	84 ad       	sts	0x64, r24
    15f0:	80 93 06 03 	sts	0x0306, r24
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    15f4:	27 2f       	mov	r18, r23
    15f6:	26 95       	lsr	r18
    15f8:	27 95       	ror	r18
    15fa:	22 27       	eor	r18, r18
    15fc:	27 95       	ror	r18
    15fe:	87 2f       	mov	r24, r23
    1600:	81 70       	andi	r24, 0x01	; 1
    1602:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1604:	87 2f       	mov	r24, r23
    1606:	86 95       	lsr	r24
    1608:	86 95       	lsr	r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	90 70       	andi	r25, 0x00	; 0
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
	lfo_shape_index = lfo_lookup[bit_index];
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1618:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    161a:	87 2f       	mov	r24, r23
    161c:	86 95       	lsr	r24
    161e:	86 95       	lsr	r24
    1620:	86 95       	lsr	r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	81 70       	andi	r24, 0x01	; 1
    1626:	90 70       	andi	r25, 0x00	; 0
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
	lfo_shape_index = lfo_lookup[bit_index];
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    162c:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    162e:	87 2f       	mov	r24, r23
    1630:	82 95       	swap	r24
    1632:	8f 70       	andi	r24, 0x0F	; 15
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	81 70       	andi	r24, 0x01	; 1
    1638:	90 70       	andi	r25, 0x00	; 0
    163a:	82 95       	swap	r24
    163c:	92 95       	swap	r25
    163e:	90 7f       	andi	r25, 0xF0	; 240
    1640:	98 27       	eor	r25, r24
    1642:	80 7f       	andi	r24, 0xF0	; 240
    1644:	98 27       	eor	r25, r24
	lfo_shape_index = lfo_lookup[bit_index];
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1646:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    1648:	87 2f       	mov	r24, r23
    164a:	82 95       	swap	r24
    164c:	86 95       	lsr	r24
    164e:	87 70       	andi	r24, 0x07	; 7
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	81 70       	andi	r24, 0x01	; 1
    1654:	90 70       	andi	r25, 0x00	; 0
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	82 95       	swap	r24
    165c:	92 95       	swap	r25
    165e:	90 7f       	andi	r25, 0xF0	; 240
    1660:	98 27       	eor	r25, r24
    1662:	80 7f       	andi	r24, 0xF0	; 240
    1664:	98 27       	eor	r25, r24
	lfo_shape_index = lfo_lookup[bit_index];
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1666:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1668:	87 2f       	mov	r24, r23
    166a:	82 95       	swap	r24
    166c:	86 95       	lsr	r24
    166e:	86 95       	lsr	r24
    1670:	83 70       	andi	r24, 0x03	; 3
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	81 70       	andi	r24, 0x01	; 1
    1676:	90 70       	andi	r25, 0x00	; 0
    1678:	00 24       	eor	r0, r0
    167a:	96 95       	lsr	r25
    167c:	87 95       	ror	r24
    167e:	07 94       	ror	r0
    1680:	96 95       	lsr	r25
    1682:	87 95       	ror	r24
    1684:	07 94       	ror	r0
    1686:	98 2f       	mov	r25, r24
    1688:	80 2d       	mov	r24, r0
	lfo_shape_index = lfo_lookup[bit_index];
	
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    168a:	82 2b       	or	r24, r18
    168c:	80 93 76 03 	sts	0x0376, r24
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
	
	switch_states.byte2 =	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1690:	77 1f       	adc	r23, r23
    1692:	77 27       	eor	r23, r23
    1694:	77 1f       	adc	r23, r23
    1696:	77 0f       	add	r23, r23
    1698:	77 0f       	add	r23, r23
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    169a:	81 2f       	mov	r24, r17
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	81 70       	andi	r24, 0x01	; 1
    16a0:	90 70       	andi	r25, 0x00	; 0
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
	
	switch_states.byte2 =	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    16ae:	87 2b       	or	r24, r23
    16b0:	80 93 78 03 	sts	0x0378, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    16b4:	0e 94 6f 06 	call	0xcde	; 0xcde <lock_pots>
	
	if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    16b8:	80 91 03 03 	lds	r24, 0x0303
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	29 f4       	brne	.+10     	; 0x16ca <load_patch+0x5a8>
    16c0:	80 91 78 03 	lds	r24, 0x0378
    16c4:	8f 77       	andi	r24, 0x7F	; 127
    16c6:	80 93 78 03 	sts	0x0378, r24
	
	current_patch.mode = MEMORY;
    16ca:	10 92 03 03 	sts	0x0303, r1
	
}
    16ce:	cd 5b       	subi	r28, 0xBD	; 189
    16d0:	df 4f       	sbci	r29, 0xFF	; 255
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	08 95       	ret

000016e4 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    16e4:	90 91 04 03 	lds	r25, 0x0304
	if (vco == VCO2) n = octave_index.vco2;
    16e8:	60 3f       	cpi	r22, 0xF0	; 240
    16ea:	11 f4       	brne	.+4      	; 0x16f0 <transpose_note+0xc>
    16ec:	90 91 05 03 	lds	r25, 0x0305

	note = (n*12) + note; //calculate MIDI note after octave addition
    16f0:	29 2f       	mov	r18, r25
    16f2:	22 0f       	add	r18, r18
    16f4:	92 0f       	add	r25, r18
    16f6:	99 0f       	add	r25, r25
    16f8:	99 0f       	add	r25, r25
    16fa:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    16fc:	89 38       	cpi	r24, 0x89	; 137
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <transpose_note+0x1e>
    1700:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1702:	08 95       	ret

00001704 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1704:	80 91 76 03 	lds	r24, 0x0376
    1708:	98 2f       	mov	r25, r24
    170a:	96 95       	lsr	r25
    170c:	96 95       	lsr	r25
    170e:	96 95       	lsr	r25
    1710:	90 ff       	sbrs	r25, 0
    1712:	0e c0       	rjmp	.+28     	; 0x1730 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1714:	90 91 04 03 	lds	r25, 0x0304
    1718:	9f 5f       	subi	r25, 0xFF	; 255
    171a:	90 93 04 03 	sts	0x0304, r25
    171e:	95 30       	cpi	r25, 0x05	; 5
    1720:	19 f4       	brne	.+6      	; 0x1728 <update_octave_range+0x24>
    1722:	94 e0       	ldi	r25, 0x04	; 4
    1724:	90 93 04 03 	sts	0x0304, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1728:	98 e0       	ldi	r25, 0x08	; 8
    172a:	89 27       	eor	r24, r25
    172c:	80 93 76 03 	sts	0x0376, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1730:	80 91 77 03 	lds	r24, 0x0377
    1734:	98 2f       	mov	r25, r24
    1736:	96 95       	lsr	r25
    1738:	96 95       	lsr	r25
    173a:	96 95       	lsr	r25
    173c:	90 ff       	sbrs	r25, 0
    173e:	0b c0       	rjmp	.+22     	; 0x1756 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1740:	90 91 04 03 	lds	r25, 0x0304
    1744:	99 23       	and	r25, r25
    1746:	19 f0       	breq	.+6      	; 0x174e <update_octave_range+0x4a>
    1748:	91 50       	subi	r25, 0x01	; 1
    174a:	90 93 04 03 	sts	0x0304, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    174e:	98 e0       	ldi	r25, 0x08	; 8
    1750:	89 27       	eor	r24, r25
    1752:	80 93 77 03 	sts	0x0377, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1756:	80 91 04 03 	lds	r24, 0x0304
    175a:	e1 e2       	ldi	r30, 0x21	; 33
    175c:	f2 e0       	ldi	r31, 0x02	; 2
    175e:	e8 0f       	add	r30, r24
    1760:	f1 1d       	adc	r31, r1
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	00 80       	ld	r0, Z
    1768:	02 c0       	rjmp	.+4      	; 0x176e <update_octave_range+0x6a>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <update_octave_range+0x66>
    1772:	58 2f       	mov	r21, r24
    1774:	80 93 00 03 	sts	0x0300, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1778:	90 91 77 03 	lds	r25, 0x0377
    177c:	29 2f       	mov	r18, r25
    177e:	26 95       	lsr	r18
    1780:	26 95       	lsr	r18
    1782:	20 ff       	sbrs	r18, 0
    1784:	0e c0       	rjmp	.+28     	; 0x17a2 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1786:	80 91 05 03 	lds	r24, 0x0305
    178a:	8f 5f       	subi	r24, 0xFF	; 255
    178c:	80 93 05 03 	sts	0x0305, r24
    1790:	85 30       	cpi	r24, 0x05	; 5
    1792:	19 f4       	brne	.+6      	; 0x179a <update_octave_range+0x96>
    1794:	84 e0       	ldi	r24, 0x04	; 4
    1796:	80 93 05 03 	sts	0x0305, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    179a:	84 e0       	ldi	r24, 0x04	; 4
    179c:	98 27       	eor	r25, r24
    179e:	90 93 77 03 	sts	0x0377, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    17a2:	90 91 77 03 	lds	r25, 0x0377
    17a6:	29 2f       	mov	r18, r25
    17a8:	26 95       	lsr	r18
    17aa:	20 ff       	sbrs	r18, 0
    17ac:	0b c0       	rjmp	.+22     	; 0x17c4 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    17ae:	80 91 05 03 	lds	r24, 0x0305
    17b2:	88 23       	and	r24, r24
    17b4:	19 f0       	breq	.+6      	; 0x17bc <update_octave_range+0xb8>
    17b6:	81 50       	subi	r24, 0x01	; 1
    17b8:	80 93 05 03 	sts	0x0305, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	98 27       	eor	r25, r24
    17c0:	90 93 77 03 	sts	0x0377, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    17c4:	40 91 ff 02 	lds	r20, 0x02FF
    17c8:	4c 7f       	andi	r20, 0xFC	; 252
    17ca:	40 93 ff 02 	sts	0x02FF, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    17ce:	90 91 05 03 	lds	r25, 0x0305
    17d2:	93 30       	cpi	r25, 0x03	; 3
    17d4:	88 f0       	brcs	.+34     	; 0x17f8 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    17d6:	ec e1       	ldi	r30, 0x1C	; 28
    17d8:	f2 e0       	ldi	r31, 0x02	; 2
    17da:	e9 0f       	add	r30, r25
    17dc:	f1 1d       	adc	r31, r1
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	c9 01       	movw	r24, r18
    17e4:	00 80       	ld	r0, Z
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <update_octave_range+0xe8>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <update_octave_range+0xe4>
    17f0:	84 2b       	or	r24, r20
    17f2:	80 93 ff 02 	sts	0x02FF, r24
    17f6:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    17f8:	ec e1       	ldi	r30, 0x1C	; 28
    17fa:	f2 e0       	ldi	r31, 0x02	; 2
    17fc:	e9 0f       	add	r30, r25
    17fe:	f1 1d       	adc	r31, r1
    1800:	21 e0       	ldi	r18, 0x01	; 1
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	c9 01       	movw	r24, r18
    1806:	00 80       	ld	r0, Z
    1808:	02 c0       	rjmp	.+4      	; 0x180e <update_octave_range+0x10a>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <update_octave_range+0x106>
    1812:	85 2b       	or	r24, r21
    1814:	80 93 00 03 	sts	0x0300, r24
    1818:	08 95       	ret

0000181a <update_patch_programmer>:
	
}

void update_patch_programmer(void) {
	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    181a:	80 91 78 03 	lds	r24, 0x0378
    181e:	98 2f       	mov	r25, r24
    1820:	92 95       	swap	r25
    1822:	96 95       	lsr	r25
    1824:	96 95       	lsr	r25
    1826:	93 70       	andi	r25, 0x03	; 3
    1828:	90 ff       	sbrs	r25, 0
    182a:	11 c0       	rjmp	.+34     	; 0x184e <update_patch_programmer+0x34>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    182c:	90 e4       	ldi	r25, 0x40	; 64
    182e:	89 27       	eor	r24, r25
    1830:	80 93 78 03 	sts	0x0378, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1834:	80 91 02 03 	lds	r24, 0x0302
    1838:	8f 5f       	subi	r24, 0xFF	; 255
    183a:	80 93 02 03 	sts	0x0302, r24
    183e:	85 32       	cpi	r24, 0x25	; 37
    1840:	21 f4       	brne	.+8      	; 0x184a <update_patch_programmer+0x30>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1842:	84 e2       	ldi	r24, 0x24	; 36
    1844:	80 93 02 03 	sts	0x0302, r24
    1848:	02 c0       	rjmp	.+4      	; 0x184e <update_patch_programmer+0x34>
			
		} else { //load next patch
			
			load_patch(current_patch.number);
    184a:	0e 94 91 08 	call	0x1122	; 0x1122 <load_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    184e:	80 91 78 03 	lds	r24, 0x0378
    1852:	98 2f       	mov	r25, r24
    1854:	92 95       	swap	r25
    1856:	96 95       	lsr	r25
    1858:	97 70       	andi	r25, 0x07	; 7
    185a:	90 ff       	sbrs	r25, 0
    185c:	0d c0       	rjmp	.+26     	; 0x1878 <update_patch_programmer+0x5e>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    185e:	90 e2       	ldi	r25, 0x20	; 32
    1860:	89 27       	eor	r24, r25
    1862:	80 93 78 03 	sts	0x0378, r24

		if (current_patch.number == 1) {} else {current_patch.number--; load_patch(current_patch.number);}
    1866:	80 91 02 03 	lds	r24, 0x0302
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	29 f0       	breq	.+10     	; 0x1878 <update_patch_programmer+0x5e>
    186e:	81 50       	subi	r24, 0x01	; 1
    1870:	80 93 02 03 	sts	0x0302, r24
    1874:	0e 94 91 08 	call	0x1122	; 0x1122 <load_patch>
	
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1878:	80 91 78 03 	lds	r24, 0x0378
    187c:	98 2f       	mov	r25, r24
    187e:	92 95       	swap	r25
    1880:	9f 70       	andi	r25, 0x0F	; 15
    1882:	90 ff       	sbrs	r25, 0
    1884:	08 c0       	rjmp	.+16     	; 0x1896 <update_patch_programmer+0x7c>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW); //toggle switch state bit
    1886:	90 e1       	ldi	r25, 0x10	; 16
    1888:	89 27       	eor	r24, r25
    188a:	80 93 78 03 	sts	0x0378, r24
		save_patch(current_patch.number);
    188e:	80 91 02 03 	lds	r24, 0x0302
    1892:	0e 94 9a 06 	call	0xd34	; 0xd34 <save_patch>
		
		
	}
	
	
	value_to_display = current_patch.number;	
    1896:	80 91 02 03 	lds	r24, 0x0302
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	90 93 fe 01 	sts	0x01FE, r25
    18a0:	80 93 fd 01 	sts	0x01FD, r24
	
	
}	
    18a4:	08 95       	ret

000018a6 <refresh_synth>:
	
	
void refresh_synth(void) {
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    18aa:	90 91 76 03 	lds	r25, 0x0376
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    18ae:	80 91 78 03 	lds	r24, 0x0378
    18b2:	86 95       	lsr	r24
    18b4:	86 95       	lsr	r24
    18b6:	68 2f       	mov	r22, r24
    18b8:	67 95       	ror	r22
    18ba:	66 27       	eor	r22, r22
    18bc:	67 95       	ror	r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    18be:	29 2f       	mov	r18, r25
    18c0:	21 70       	andi	r18, 0x01	; 1
    18c2:	26 2b       	or	r18, r22
    18c4:	69 2f       	mov	r22, r25
    18c6:	66 1f       	adc	r22, r22
    18c8:	66 27       	eor	r22, r22
    18ca:	66 1f       	adc	r22, r22
    18cc:	66 0f       	add	r22, r22
    18ce:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    18d0:	c9 2f       	mov	r28, r25
    18d2:	c6 95       	lsr	r28
    18d4:	c6 95       	lsr	r28
    18d6:	d0 e0       	ldi	r29, 0x00	; 0
    18d8:	c1 70       	andi	r28, 0x01	; 1
    18da:	d0 70       	andi	r29, 0x00	; 0
    18dc:	de 01       	movw	r26, r28
    18de:	aa 0f       	add	r26, r26
    18e0:	bb 1f       	adc	r27, r27
    18e2:	aa 0f       	add	r26, r26
    18e4:	bb 1f       	adc	r27, r27
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    18e6:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    18e8:	a9 2f       	mov	r26, r25
    18ea:	a6 95       	lsr	r26
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	a1 70       	andi	r26, 0x01	; 1
    18f0:	b0 70       	andi	r27, 0x00	; 0
    18f2:	fd 01       	movw	r30, r26
    18f4:	ee 0f       	add	r30, r30
    18f6:	ff 1f       	adc	r31, r31
    18f8:	ee 0f       	add	r30, r30
    18fa:	ff 1f       	adc	r31, r31
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1900:	a6 2f       	mov	r26, r22
    1902:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1904:	e9 2f       	mov	r30, r25
    1906:	e2 95       	swap	r30
    1908:	ef 70       	andi	r30, 0x0F	; 15
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	e1 70       	andi	r30, 0x01	; 1
    190e:	f0 70       	andi	r31, 0x00	; 0
    1910:	bf 01       	movw	r22, r30
    1912:	62 95       	swap	r22
    1914:	72 95       	swap	r23
    1916:	70 7f       	andi	r23, 0xF0	; 240
    1918:	76 27       	eor	r23, r22
    191a:	60 7f       	andi	r22, 0xF0	; 240
    191c:	76 27       	eor	r23, r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    191e:	ea 2f       	mov	r30, r26
    1920:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1922:	69 2f       	mov	r22, r25
    1924:	62 95       	swap	r22
    1926:	66 95       	lsr	r22
    1928:	67 70       	andi	r22, 0x07	; 7
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	61 70       	andi	r22, 0x01	; 1
    192e:	70 70       	andi	r23, 0x00	; 0
    1930:	ab 01       	movw	r20, r22
    1932:	44 0f       	add	r20, r20
    1934:	55 1f       	adc	r21, r21
    1936:	42 95       	swap	r20
    1938:	52 95       	swap	r21
    193a:	50 7f       	andi	r21, 0xF0	; 240
    193c:	54 27       	eor	r21, r20
    193e:	40 7f       	andi	r20, 0xF0	; 240
    1940:	54 27       	eor	r21, r20
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1942:	6e 2f       	mov	r22, r30
    1944:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1946:	49 2f       	mov	r20, r25
    1948:	42 95       	swap	r20
    194a:	46 95       	lsr	r20
    194c:	46 95       	lsr	r20
    194e:	43 70       	andi	r20, 0x03	; 3
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	41 70       	andi	r20, 0x01	; 1
    1954:	50 70       	andi	r21, 0x00	; 0
    1956:	9a 01       	movw	r18, r20
    1958:	00 24       	eor	r0, r0
    195a:	36 95       	lsr	r19
    195c:	27 95       	ror	r18
    195e:	07 94       	ror	r0
    1960:	36 95       	lsr	r19
    1962:	27 95       	ror	r18
    1964:	07 94       	ror	r0
    1966:	32 2f       	mov	r19, r18
    1968:	20 2d       	mov	r18, r0
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    196a:	26 2b       	or	r18, r22
    196c:	20 93 01 03 	sts	0x0301, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1970:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1972:	81 95       	neg	r24
    1974:	89 27       	eor	r24, r25
    1976:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1978:	89 27       	eor	r24, r25
    197a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    197e:	ed ed       	ldi	r30, 0xDD	; 221
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1984:	90 91 78 03 	lds	r25, 0x0378
    1988:	96 95       	lsr	r25
    198a:	96 95       	lsr	r25
    198c:	96 95       	lsr	r25
    198e:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1990:	91 95       	neg	r25
    1992:	80 81       	ld	r24, Z
    1994:	89 27       	eor	r24, r25
    1996:	80 71       	andi	r24, 0x10	; 16
    1998:	82 27       	eor	r24, r18
    199a:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    199c:	ed ef       	ldi	r30, 0xFD	; 253
    199e:	f2 e0       	ldi	r31, 0x02	; 2
    19a0:	80 81       	ld	r24, Z
    19a2:	98 27       	eor	r25, r24
    19a4:	91 70       	andi	r25, 0x01	; 1
    19a6:	89 27       	eor	r24, r25
    19a8:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    19aa:	0e 94 82 0b 	call	0x1704	; 0x1704 <update_octave_range>
	
	//parse LFO data
	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    19ae:	80 91 77 03 	lds	r24, 0x0377
    19b2:	88 23       	and	r24, r24
    19b4:	6c f5       	brge	.+90     	; 0x1a10 <refresh_synth+0x16a>
		
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    19b6:	80 58       	subi	r24, 0x80	; 128
    19b8:	80 93 77 03 	sts	0x0377, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    19bc:	80 91 06 03 	lds	r24, 0x0306
    19c0:	8f 5f       	subi	r24, 0xFF	; 255
    19c2:	80 93 06 03 	sts	0x0306, r24
    19c6:	85 30       	cpi	r24, 0x05	; 5
    19c8:	11 f4       	brne	.+4      	; 0x19ce <refresh_synth+0x128>
    19ca:	10 92 06 03 	sts	0x0306, r1
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    19ce:	a0 91 06 03 	lds	r26, 0x0306
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	aa 0f       	add	r26, r26
    19d6:	bb 1f       	adc	r27, r27
    19d8:	aa 5d       	subi	r26, 0xDA	; 218
    19da:	bd 4f       	sbci	r27, 0xFD	; 253
    19dc:	8c 91       	ld	r24, X
    19de:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    19e0:	ed ed       	ldi	r30, 0xDD	; 221
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	80 62       	ori	r24, 0x20	; 32
    19e8:	80 83       	st	Z, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    19ea:	80 81       	ld	r24, Z
    19ec:	8f 7d       	andi	r24, 0xDF	; 223
    19ee:	80 83       	st	Z, r24
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	11 96       	adiw	r26, 0x01	; 1
    19f6:	0c 90       	ld	r0, X
    19f8:	11 97       	sbiw	r26, 0x01	; 1
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <refresh_synth+0x15a>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	0a 94       	dec	r0
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <refresh_synth+0x156>
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    1a04:	90 91 fe 02 	lds	r25, 0x02FE
    1a08:	9f 70       	andi	r25, 0x0F	; 15
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1a0a:	89 2b       	or	r24, r25
    1a0c:	80 93 fe 02 	sts	0x02FE, r24
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1a10:	80 91 78 03 	lds	r24, 0x0378
    1a14:	88 23       	and	r24, r24
    1a16:	44 f4       	brge	.+16     	; 0x1a28 <refresh_synth+0x182>
		//if (current_patch.mode == MANUAL) { //if already in manual mode 
			//
			////switch_states.byte2 ^= (1<< PROG_MANUAL_SW);			
			//
		//} else {
			switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1a18:	80 68       	ori	r24, 0x80	; 128
    1a1a:	80 93 78 03 	sts	0x0378, r24
			current_patch.mode = MANUAL;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	80 93 03 03 	sts	0x0303, r24
			unlock_pots();
    1a24:	0e 94 89 06 	call	0xd12	; 0xd12 <unlock_pots>
		//}		
		
	}
	
	update_patch_programmer();		
    1a28:	0e 94 0d 0c 	call	0x181a	; 0x181a <update_patch_programmer>
				
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) //temporary tune button hack
    1a2c:	80 91 77 03 	lds	r24, 0x0377
    1a30:	98 2f       	mov	r25, r24
    1a32:	92 95       	swap	r25
    1a34:	96 95       	lsr	r25
    1a36:	97 70       	andi	r25, 0x07	; 7
    1a38:	90 ff       	sbrs	r25, 0
    1a3a:	3f c0       	rjmp	.+126    	; 0x1aba <refresh_synth+0x214>
		{ 
				
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle read switch state
    1a3c:	90 e2       	ldi	r25, 0x20	; 32
    1a3e:	89 27       	eor	r24, r25
    1a40:	80 93 77 03 	sts	0x0377, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1a44:	87 e0       	ldi	r24, 0x07	; 7
    1a46:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1a48:	cd ed       	ldi	r28, 0xDD	; 221
    1a4a:	d0 e0       	ldi	r29, 0x00	; 0
    1a4c:	88 81       	ld	r24, Y
    1a4e:	80 62       	ori	r24, 0x20	; 32
    1a50:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1a52:	88 81       	ld	r24, Y
    1a54:	8f 7d       	andi	r24, 0xDF	; 223
    1a56:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1a58:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    1a5a:	8f e0       	ldi	r24, 0x0F	; 15
    1a5c:	6f e0       	ldi	r22, 0x0F	; 15
    1a5e:	7e e5       	ldi	r23, 0x5E	; 94
    1a60:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <set_vco_init_cv>
    1a64:	90 93 6e 03 	sts	0x036E, r25
    1a68:	80 93 6d 03 	sts	0x036D, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    1a6c:	80 ef       	ldi	r24, 0xF0	; 240
    1a6e:	6f e0       	ldi	r22, 0x0F	; 15
    1a70:	7e e5       	ldi	r23, 0x5E	; 94
    1a72:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <set_vco_init_cv>
    1a76:	90 93 6c 03 	sts	0x036C, r25
    1a7a:	80 93 6b 03 	sts	0x036B, r24

		tune_8ths(VCO1);
    1a7e:	8f e0       	ldi	r24, 0x0F	; 15
    1a80:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <tune_8ths>
		tune_8ths(VCO2);
    1a84:	80 ef       	ldi	r24, 0xF0	; 240
    1a86:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <tune_8ths>
		tune_filter();
    1a8a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <tune_filter>
		save_tuning_tables();
    1a8e:	0e 94 b3 12 	call	0x2566	; 0x2566 <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a92:	8f e4       	ldi	r24, 0x4F	; 79
    1a94:	93 ec       	ldi	r25, 0xC3	; 195
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <refresh_synth+0x1f0>
    1a9a:	00 c0       	rjmp	.+0      	; 0x1a9c <refresh_synth+0x1f6>
    1a9c:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
    1a9e:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1aa0:	88 81       	ld	r24, Y
    1aa2:	80 62       	ori	r24, 0x20	; 32
    1aa4:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1aa6:	88 81       	ld	r24, Y
    1aa8:	8f 7d       	andi	r24, 0xDF	; 223
    1aaa:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1aac:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    1aae:	80 91 fe 02 	lds	r24, 0x02FE
    1ab2:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1ab4:	80 68       	ori	r24, 0x80	; 128
    1ab6:	80 93 fe 02 	sts	0x02FE, r24
				
		}
		
		
	
}
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1ac0:	88 ed       	ldi	r24, 0xD8	; 216
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1acc:	81 ee       	ldi	r24, 0xE1	; 225
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1ad8:	82 ee       	ldi	r24, 0xE2	; 226
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1ae4:	82 eb       	ldi	r24, 0xB2	; 178
    1ae6:	92 e0       	ldi	r25, 0x02	; 2
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1af0:	8a ed       	ldi	r24, 0xDA	; 218
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1afc:	8f ed       	ldi	r24, 0xDF	; 223
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1b08:	80 ee       	ldi	r24, 0xE0	; 224
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1b14:	81 ed       	ldi	r24, 0xD1	; 209
    1b16:	91 e0       	ldi	r25, 0x01	; 1
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1b20:	86 ed       	ldi	r24, 0xD6	; 214
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1b2c:	82 ed       	ldi	r24, 0xD2	; 210
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1b38:	83 ed       	ldi	r24, 0xD3	; 211
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1b44:	84 ed       	ldi	r24, 0xD4	; 212
    1b46:	91 e0       	ldi	r25, 0x01	; 1
    1b48:	6f ef       	ldi	r22, 0xFF	; 255
    1b4a:	7f e3       	ldi	r23, 0x3F	; 63
    1b4c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1b50:	85 ed       	ldi	r24, 0xD5	; 213
    1b52:	91 e0       	ldi	r25, 0x01	; 1
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1b5c:	89 ed       	ldi	r24, 0xD9	; 217
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1b68:	8e ec       	ldi	r24, 0xCE	; 206
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1b74:	8c ec       	ldi	r24, 0xCC	; 204
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1b80:	8a ec       	ldi	r24, 0xCA	; 202
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	6f ef       	ldi	r22, 0xFF	; 255
    1b86:	7f e3       	ldi	r23, 0x3F	; 63
    1b88:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1b8c:	88 ec       	ldi	r24, 0xC8	; 200
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1b98:	80 ed       	ldi	r24, 0xD0	; 208
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	70 e0       	ldi	r23, 0x00	; 0
    1ba0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1ba4:	83 ee       	ldi	r24, 0xE3	; 227
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1bb0:	84 ee       	ldi	r24, 0xE4	; 228
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}	
    1bbc:	08 95       	ret

00001bbe <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1bbe:	2f 92       	push	r2
    1bc0:	3f 92       	push	r3
    1bc2:	4f 92       	push	r4
    1bc4:	5f 92       	push	r5
    1bc6:	6f 92       	push	r6
    1bc8:	7f 92       	push	r7
    1bca:	8f 92       	push	r8
    1bcc:	9f 92       	push	r9
    1bce:	af 92       	push	r10
    1bd0:	bf 92       	push	r11
    1bd2:	cf 92       	push	r12
    1bd4:	df 92       	push	r13
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	2c 97       	sbiw	r28, 0x0c	; 12
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	08 2f       	mov	r16, r24
    1bf4:	78 87       	std	Y+8, r23	; 0x08
    1bf6:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1bf8:	80 91 73 03 	lds	r24, 0x0373
    1bfc:	83 60       	ori	r24, 0x03	; 3
    1bfe:	80 93 73 03 	sts	0x0373, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1c02:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1c06:	10 92 72 03 	sts	0x0372, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1c0a:	0f 30       	cpi	r16, 0x0F	; 15
    1c0c:	e1 f4       	brne	.+56     	; 0x1c46 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1c0e:	0f 2e       	mov	r0, r31
    1c10:	f6 ee       	ldi	r31, 0xE6	; 230
    1c12:	4f 2e       	mov	r4, r31
    1c14:	f1 e0       	ldi	r31, 0x01	; 1
    1c16:	5f 2e       	mov	r5, r31
    1c18:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1c1a:	0f 2e       	mov	r0, r31
    1c1c:	fe ed       	ldi	r31, 0xDE	; 222
    1c1e:	2f 2e       	mov	r2, r31
    1c20:	f1 e0       	ldi	r31, 0x01	; 1
    1c22:	3f 2e       	mov	r3, r31
    1c24:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1c26:	23 ee       	ldi	r18, 0xE3	; 227
    1c28:	31 e0       	ldi	r19, 0x01	; 1
    1c2a:	3a 83       	std	Y+2, r19	; 0x02
    1c2c:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1c2e:	0f 2e       	mov	r0, r31
    1c30:	fc ed       	ldi	r31, 0xDC	; 220
    1c32:	8f 2e       	mov	r8, r31
    1c34:	f1 e0       	ldi	r31, 0x01	; 1
    1c36:	9f 2e       	mov	r9, r31
    1c38:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1c3a:	82 e7       	ldi	r24, 0x72	; 114
    1c3c:	96 e0       	ldi	r25, 0x06	; 6
    1c3e:	9a 87       	std	Y+10, r25	; 0x0a
    1c40:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	1b c0       	rjmp	.+54     	; 0x1c7c <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1c46:	0f 2e       	mov	r0, r31
    1c48:	f5 ee       	ldi	r31, 0xE5	; 229
    1c4a:	4f 2e       	mov	r4, r31
    1c4c:	f1 e0       	ldi	r31, 0x01	; 1
    1c4e:	5f 2e       	mov	r5, r31
    1c50:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1c52:	0f 2e       	mov	r0, r31
    1c54:	f7 ed       	ldi	r31, 0xD7	; 215
    1c56:	2f 2e       	mov	r2, r31
    1c58:	f1 e0       	ldi	r31, 0x01	; 1
    1c5a:	3f 2e       	mov	r3, r31
    1c5c:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1c5e:	e4 ee       	ldi	r30, 0xE4	; 228
    1c60:	f1 e0       	ldi	r31, 0x01	; 1
    1c62:	fa 83       	std	Y+2, r31	; 0x02
    1c64:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1c66:	0f 2e       	mov	r0, r31
    1c68:	fd ed       	ldi	r31, 0xDD	; 221
    1c6a:	8f 2e       	mov	r8, r31
    1c6c:	f1 e0       	ldi	r31, 0x01	; 1
    1c6e:	9f 2e       	mov	r9, r31
    1c70:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1c72:	20 e7       	ldi	r18, 0x70	; 112
    1c74:	36 e0       	ldi	r19, 0x06	; 6
    1c76:	3a 87       	std	Y+10, r19	; 0x0a
    1c78:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1c7a:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1c7c:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1c7e:	ed ed       	ldi	r30, 0xDD	; 221
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 64       	ori	r24, 0x40	; 64
    1c86:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1c88:	80 81       	ld	r24, Z
    1c8a:	8f 7b       	andi	r24, 0xBF	; 191
    1c8c:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1c8e:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1c90:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1c92:	84 b5       	in	r24, 0x24	; 36
    1c94:	8f 60       	ori	r24, 0x0F	; 15
    1c96:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1c9c:	ee e6       	ldi	r30, 0x6E	; 110
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	90 81       	ld	r25, Z
    1ca2:	92 60       	ori	r25, 0x02	; 2
    1ca4:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1ca6:	80 93 74 03 	sts	0x0374, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1caa:	8d e0       	ldi	r24, 0x0D	; 13
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9c 83       	std	Y+4, r25	; 0x04
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1cb2:	80 2f       	mov	r24, r16
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	8c 01       	movw	r16, r24
    1cb8:	0f 5f       	subi	r16, 0xFF	; 255
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1cbc:	0f 2e       	mov	r0, r31
    1cbe:	f8 ed       	ldi	r31, 0xD8	; 216
    1cc0:	ef 2e       	mov	r14, r31
    1cc2:	f1 e0       	ldi	r31, 0x01	; 1
    1cc4:	ff 2e       	mov	r15, r31
    1cc6:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1cc8:	0f 2e       	mov	r0, r31
    1cca:	f4 ed       	ldi	r31, 0xD4	; 212
    1ccc:	cf 2e       	mov	r12, r31
    1cce:	f1 e0       	ldi	r31, 0x01	; 1
    1cd0:	df 2e       	mov	r13, r31
    1cd2:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1cd4:	0f 2e       	mov	r0, r31
    1cd6:	fa ec       	ldi	r31, 0xCA	; 202
    1cd8:	af 2e       	mov	r10, r31
    1cda:	f1 e0       	ldi	r31, 0x01	; 1
    1cdc:	bf 2e       	mov	r11, r31
    1cde:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1ce0:	0f 2e       	mov	r0, r31
    1ce2:	fb ec       	ldi	r31, 0xCB	; 203
    1ce4:	6f 2e       	mov	r6, r31
    1ce6:	f1 e0       	ldi	r31, 0x01	; 1
    1ce8:	7f 2e       	mov	r7, r31
    1cea:	f0 2d       	mov	r31, r0
    1cec:	e0 e0       	ldi	r30, 0x00	; 0
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	fc 87       	std	Y+12, r31	; 0x0c
    1cf2:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	0b 80       	ldd	r0, Y+3	; 0x03
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <set_vco_init_cv+0x142>
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <set_vco_init_cv+0x13e>
    1d04:	3e 83       	std	Y+6, r19	; 0x06
    1d06:	2d 83       	std	Y+5, r18	; 0x05
    1d08:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d0c:	82 2b       	or	r24, r18
    1d0e:	93 2b       	or	r25, r19
    1d10:	9c 87       	std	Y+12, r25	; 0x0c
    1d12:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1d14:	c4 01       	movw	r24, r8
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
		
		count_finished = FALSE;
    1d1e:	10 92 72 03 	sts	0x0372, r1
		period_counter = 0;
    1d22:	10 92 75 03 	sts	0x0375, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1d26:	8f e0       	ldi	r24, 0x0F	; 15
    1d28:	e8 e1       	ldi	r30, 0x18	; 24
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	a8 95       	wdr
    1d32:	e0 93 60 00 	sts	0x0060, r30
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1d3c:	80 91 72 03 	lds	r24, 0x0372
    1d40:	88 23       	and	r24, r24
    1d42:	89 f5       	brne	.+98     	; 0x1da6 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1d44:	c8 01       	movw	r24, r16
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1d4c:	c4 01       	movw	r24, r8
    1d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d52:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1d56:	c1 01       	movw	r24, r2
    1d58:	6f ef       	ldi	r22, 0xFF	; 255
    1d5a:	7f e3       	ldi	r23, 0x3F	; 63
    1d5c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1d60:	c7 01       	movw	r24, r14
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1d6a:	c6 01       	movw	r24, r12
    1d6c:	6f ef       	ldi	r22, 0xFF	; 255
    1d6e:	7f e3       	ldi	r23, 0x3F	; 63
    1d70:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1d74:	c5 01       	movw	r24, r10
    1d76:	6f ef       	ldi	r22, 0xFF	; 255
    1d78:	7f e3       	ldi	r23, 0x3F	; 63
    1d7a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1d7e:	c3 01       	movw	r24, r6
    1d80:	6f ef       	ldi	r22, 0xFF	; 255
    1d82:	7f e3       	ldi	r23, 0x3F	; 63
    1d84:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	6f ef       	ldi	r22, 0xFF	; 255
    1d8e:	7f e3       	ldi	r23, 0x3F	; 63
    1d90:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1d94:	c2 01       	movw	r24, r4
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1d9e:	80 91 72 03 	lds	r24, 0x0372
    1da2:	88 23       	and	r24, r24
    1da4:	79 f2       	breq	.-98     	; 0x1d44 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1da6:	88 e1       	ldi	r24, 0x18	; 24
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	80 93 60 00 	sts	0x0060, r24
    1db0:	10 92 60 00 	sts	0x0060, r1
    1db4:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1db6:	80 91 70 03 	lds	r24, 0x0370
    1dba:	90 91 71 03 	lds	r25, 0x0371
    1dbe:	ef 81       	ldd	r30, Y+7	; 0x07
    1dc0:	f8 85       	ldd	r31, Y+8	; 0x08
    1dc2:	e8 17       	cp	r30, r24
    1dc4:	f9 07       	cpc	r31, r25
    1dc6:	20 f0       	brcs	.+8      	; 0x1dd0 <set_vco_init_cv+0x212>
    1dc8:	80 91 af 02 	lds	r24, 0x02AF
    1dcc:	88 23       	and	r24, r24
    1dce:	51 f4       	brne	.+20     	; 0x1de4 <set_vco_init_cv+0x226>
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd4:	80 95       	com	r24
    1dd6:	90 95       	com	r25
    1dd8:	2b 85       	ldd	r18, Y+11	; 0x0b
    1dda:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ddc:	28 23       	and	r18, r24
    1dde:	39 23       	and	r19, r25
    1de0:	3c 87       	std	Y+12, r19	; 0x0c
    1de2:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	9c 83       	std	Y+4, r25	; 0x04
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	ef ef       	ldi	r30, 0xFF	; 255
    1df6:	8f 3f       	cpi	r24, 0xFF	; 255
    1df8:	9e 07       	cpc	r25, r30
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <set_vco_init_cv+0x240>
    1dfc:	7b cf       	rjmp	.-266    	; 0x1cf4 <set_vco_init_cv+0x136>
    1dfe:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e00:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e02:	3e 83       	std	Y+6, r19	; 0x06
    1e04:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1e06:	88 ec       	ldi	r24, 0xC8	; 200
    1e08:	91 e0       	ldi	r25, 0x01	; 1
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    1e12:	89 ec       	ldi	r24, 0xC9	; 201
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    1e1e:	84 ed       	ldi	r24, 0xD4	; 212
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	70 e0       	ldi	r23, 0x00	; 0
    1e26:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    1e2a:	88 ed       	ldi	r24, 0xD8	; 216
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    1e36:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1e38:	ee e6       	ldi	r30, 0x6E	; 110
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8d 7f       	andi	r24, 0xFD	; 253
    1e40:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    1e42:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	6d 81       	ldd	r22, Y+5	; 0x05
    1e4a:	7e 81       	ldd	r23, Y+6	; 0x06
    1e4c:	0e 94 17 1b 	call	0x362e	; 0x362e <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    1e50:	8d 81       	ldd	r24, Y+5	; 0x05
    1e52:	9e 81       	ldd	r25, Y+6	; 0x06
    1e54:	2c 96       	adiw	r28, 0x0c	; 12
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	ff 90       	pop	r15
    1e6a:	ef 90       	pop	r14
    1e6c:	df 90       	pop	r13
    1e6e:	cf 90       	pop	r12
    1e70:	bf 90       	pop	r11
    1e72:	af 90       	pop	r10
    1e74:	9f 90       	pop	r9
    1e76:	8f 90       	pop	r8
    1e78:	7f 90       	pop	r7
    1e7a:	6f 90       	pop	r6
    1e7c:	5f 90       	pop	r5
    1e7e:	4f 90       	pop	r4
    1e80:	3f 90       	pop	r3
    1e82:	2f 90       	pop	r2
    1e84:	08 95       	ret

00001e86 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1e86:	2f 92       	push	r2
    1e88:	3f 92       	push	r3
    1e8a:	4f 92       	push	r4
    1e8c:	5f 92       	push	r5
    1e8e:	6f 92       	push	r6
    1e90:	7f 92       	push	r7
    1e92:	8f 92       	push	r8
    1e94:	9f 92       	push	r9
    1e96:	af 92       	push	r10
    1e98:	bf 92       	push	r11
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	c0 54       	subi	r28, 0x40	; 64
    1eb0:	d0 40       	sbci	r29, 0x00	; 0
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    1ebe:	de 01       	movw	r26, r28
    1ec0:	11 96       	adiw	r26, 0x01	; 1
    1ec2:	e0 e3       	ldi	r30, 0x30	; 48
    1ec4:	f2 e0       	ldi	r31, 0x02	; 2
    1ec6:	80 e3       	ldi	r24, 0x30	; 48
    1ec8:	01 90       	ld	r0, Z+
    1eca:	0d 92       	st	X+, r0
    1ecc:	81 50       	subi	r24, 0x01	; 1
    1ece:	e1 f7       	brne	.-8      	; 0x1ec8 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    1ed0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1ed4:	0f 30       	cpi	r16, 0x0F	; 15
    1ed6:	11 f5       	brne	.+68     	; 0x1f1c <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    1ed8:	40 90 6d 03 	lds	r4, 0x036D
    1edc:	50 90 6e 03 	lds	r5, 0x036E
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1ee0:	0f 2e       	mov	r0, r31
    1ee2:	f6 ee       	ldi	r31, 0xE6	; 230
    1ee4:	8f 2e       	mov	r8, r31
    1ee6:	f1 e0       	ldi	r31, 0x01	; 1
    1ee8:	9f 2e       	mov	r9, r31
    1eea:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    1eec:	0f 2e       	mov	r0, r31
    1eee:	fe ed       	ldi	r31, 0xDE	; 222
    1ef0:	2f 2e       	mov	r2, r31
    1ef2:	f1 e0       	ldi	r31, 0x01	; 1
    1ef4:	3f 2e       	mov	r3, r31
    1ef6:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    1ef8:	23 ee       	ldi	r18, 0xE3	; 227
    1efa:	31 e0       	ldi	r19, 0x01	; 1
    1efc:	3a ab       	sts	0x5a, r19
    1efe:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1f00:	0f 2e       	mov	r0, r31
    1f02:	fc ed       	ldi	r31, 0xDC	; 220
    1f04:	6f 2e       	mov	r6, r31
    1f06:	f1 e0       	ldi	r31, 0x01	; 1
    1f08:	7f 2e       	mov	r7, r31
    1f0a:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    1f0c:	09 e4       	ldi	r16, 0x49	; 73
    1f0e:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    1f10:	cc 24       	eor	r12, r12
    1f12:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    1f14:	ee 24       	eor	r14, r14
    1f16:	68 94       	set
    1f18:	e1 f8       	bld	r14, 1
    1f1a:	22 c0       	rjmp	.+68     	; 0x1f60 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    1f1c:	40 90 6b 03 	lds	r4, 0x036B
    1f20:	50 90 6c 03 	lds	r5, 0x036C
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1f24:	0f 2e       	mov	r0, r31
    1f26:	f5 ee       	ldi	r31, 0xE5	; 229
    1f28:	8f 2e       	mov	r8, r31
    1f2a:	f1 e0       	ldi	r31, 0x01	; 1
    1f2c:	9f 2e       	mov	r9, r31
    1f2e:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    1f30:	0f 2e       	mov	r0, r31
    1f32:	f7 ed       	ldi	r31, 0xD7	; 215
    1f34:	2f 2e       	mov	r2, r31
    1f36:	f1 e0       	ldi	r31, 0x01	; 1
    1f38:	3f 2e       	mov	r3, r31
    1f3a:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    1f3c:	44 ee       	ldi	r20, 0xE4	; 228
    1f3e:	51 e0       	ldi	r21, 0x01	; 1
    1f40:	5a ab       	sts	0x5a, r21
    1f42:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1f44:	0f 2e       	mov	r0, r31
    1f46:	fd ed       	ldi	r31, 0xDD	; 221
    1f48:	6f 2e       	mov	r6, r31
    1f4a:	f1 e0       	ldi	r31, 0x01	; 1
    1f4c:	7f 2e       	mov	r7, r31
    1f4e:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    1f50:	07 e2       	ldi	r16, 0x27	; 39
    1f52:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    1f54:	cc 24       	eor	r12, r12
    1f56:	68 94       	set
    1f58:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    1f5a:	ee 24       	eor	r14, r14
    1f5c:	68 94       	set
    1f5e:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    1f60:	c3 01       	movw	r24, r6
    1f62:	b2 01       	movw	r22, r4
    1f64:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    1f68:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1f6a:	ed ed       	ldi	r30, 0xDD	; 221
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	80 64       	ori	r24, 0x40	; 64
    1f72:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1f74:	80 81       	ld	r24, Z
    1f76:	8f 7b       	andi	r24, 0xBF	; 191
    1f78:	80 83       	st	Z, r24
		DATA_BUS = 0;
    1f7a:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    1f7c:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	80 93 74 03 	sts	0x0374, r24
		
		compare_match_counter = 0;	
    1f84:	10 92 6f 03 	sts	0x036F, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1f88:	8c 2d       	mov	r24, r12
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	24 e6       	ldi	r18, 0x64	; 100
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	82 9f       	mul	r24, r18
    1f92:	d0 01       	movw	r26, r0
    1f94:	83 9f       	mul	r24, r19
    1f96:	b0 0d       	add	r27, r0
    1f98:	92 9f       	mul	r25, r18
    1f9a:	b0 0d       	add	r27, r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	bc ab       	sts	0x5c, r27
    1fa0:	ab ab       	sts	0x5b, r26
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	31 96       	adiw	r30, 0x01	; 1
    1fa6:	fc af       	sts	0x7c, r31
    1fa8:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    1faa:	98 01       	movw	r18, r16
    1fac:	2e 5f       	subi	r18, 0xFE	; 254
    1fae:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb0:	21 96       	adiw	r28, 0x01	; 1
    1fb2:	3f af       	sts	0x7f, r19
    1fb4:	2e af       	sts	0x7e, r18
    1fb6:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1fb8:	1e ae       	sts	0xbe, r17
    1fba:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1fbc:	0f 2e       	mov	r0, r31
    1fbe:	f8 ed       	ldi	r31, 0xD8	; 216
    1fc0:	ef 2e       	mov	r14, r31
    1fc2:	f1 e0       	ldi	r31, 0x01	; 1
    1fc4:	ff 2e       	mov	r15, r31
    1fc6:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    1fc8:	0f 2e       	mov	r0, r31
    1fca:	f4 ed       	ldi	r31, 0xD4	; 212
    1fcc:	cf 2e       	mov	r12, r31
    1fce:	f1 e0       	ldi	r31, 0x01	; 1
    1fd0:	df 2e       	mov	r13, r31
    1fd2:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1fd4:	0f 2e       	mov	r0, r31
    1fd6:	fa ec       	ldi	r31, 0xCA	; 202
    1fd8:	af 2e       	mov	r10, r31
    1fda:	f1 e0       	ldi	r31, 0x01	; 1
    1fdc:	bf 2e       	mov	r11, r31
    1fde:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    1fe0:	eb ad       	sts	0x6b, r30
    1fe2:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 93 74 03 	sts	0x0374, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1fea:	84 b5       	in	r24, 0x24	; 36
    1fec:	8f 60       	ori	r24, 0x0F	; 15
    1fee:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    1ff4:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    1ff6:	4d ad       	sts	0x6d, r20
    1ff8:	5e ad       	sts	0x6e, r21
    1ffa:	43 30       	cpi	r20, 0x03	; 3
    1ffc:	51 05       	cpc	r21, r1
    1ffe:	24 f4       	brge	.+8      	; 0x2008 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2000:	83 e0       	ldi	r24, 0x03	; 3
    2002:	80 93 73 03 	sts	0x0373, r24
    2006:	03 c0       	rjmp	.+6      	; 0x200e <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	80 93 73 03 	sts	0x0373, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    200e:	81 81       	ldd	r24, Z+1	; 0x01
    2010:	92 81       	ldd	r25, Z+2	; 0x02
    2012:	9a af       	sts	0x7a, r25
    2014:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2016:	ad e0       	ldi	r26, 0x0D	; 13
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	be ab       	sts	0x5e, r27
    201c:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    201e:	00 e0       	ldi	r16, 0x00	; 0
    2020:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2022:	e1 e0       	ldi	r30, 0x01	; 1
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	0d a8       	sts	0x8d, r16
    2028:	02 c0       	rjmp	.+4      	; 0x202e <tune_8ths+0x1a8>
    202a:	ee 0f       	add	r30, r30
    202c:	ff 1f       	adc	r31, r31
    202e:	0a 94       	dec	r0
    2030:	e2 f7       	brpl	.-8      	; 0x202a <tune_8ths+0x1a4>
    2032:	f8 af       	sts	0x78, r31
    2034:	ef ab       	sts	0x5f, r30
    2036:	0e 2b       	or	r16, r30
    2038:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    203a:	ae e6       	ldi	r26, 0x6E	; 110
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	8c 91       	ld	r24, X
    2040:	8d 7f       	andi	r24, 0xFD	; 253
    2042:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2044:	c4 01       	movw	r24, r8
    2046:	b8 01       	movw	r22, r16
    2048:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
    204c:	e3 ef       	ldi	r30, 0xF3	; 243
    204e:	f1 e0       	ldi	r31, 0x01	; 1
    2050:	31 97       	sbiw	r30, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <tune_8ths+0x1ca>
    2054:	00 c0       	rjmp	.+0      	; 0x2056 <tune_8ths+0x1d0>
    2056:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2058:	ae e6       	ldi	r26, 0x6E	; 110
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	8c 91       	ld	r24, X
    205e:	82 60       	ori	r24, 0x02	; 2
    2060:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    2062:	10 92 72 03 	sts	0x0372, r1
				period_counter = 0;
    2066:	10 92 75 03 	sts	0x0375, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    206a:	e8 e1       	ldi	r30, 0x18	; 24
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	2f e0       	ldi	r18, 0x0F	; 15
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	a8 95       	wdr
    2076:	e0 93 60 00 	sts	0x0060, r30
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    2080:	80 91 72 03 	lds	r24, 0x0372
    2084:	88 23       	and	r24, r24
    2086:	81 f5       	brne	.+96     	; 0x20e8 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    2088:	80 91 74 03 	lds	r24, 0x0374
    208c:	4b a9       	sts	0x4b, r20
    208e:	5c a9       	sts	0x4c, r21
    2090:	48 0f       	add	r20, r24
    2092:	51 1d       	adc	r21, r1
    2094:	ca 01       	movw	r24, r20
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    209c:	c3 01       	movw	r24, r6
    209e:	b2 01       	movw	r22, r4
    20a0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    20a4:	c4 01       	movw	r24, r8
    20a6:	b8 01       	movw	r22, r16
    20a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    20ac:	c7 01       	movw	r24, r14
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    20b6:	c6 01       	movw	r24, r12
    20b8:	6f ef       	ldi	r22, 0xFF	; 255
    20ba:	7f e3       	ldi	r23, 0x3F	; 63
    20bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    20c0:	c5 01       	movw	r24, r10
    20c2:	6f ef       	ldi	r22, 0xFF	; 255
    20c4:	7f e3       	ldi	r23, 0x3F	; 63
    20c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    20ca:	c1 01       	movw	r24, r2
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	70 e2       	ldi	r23, 0x20	; 32
    20d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    20d4:	89 a9       	sts	0x49, r24
    20d6:	9a a9       	sts	0x4a, r25
    20d8:	6f ef       	ldi	r22, 0xFF	; 255
    20da:	7f e3       	ldi	r23, 0x3F	; 63
    20dc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    20e0:	80 91 72 03 	lds	r24, 0x0372
    20e4:	88 23       	and	r24, r24
    20e6:	81 f2       	breq	.-96     	; 0x2088 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    20e8:	58 e1       	ldi	r21, 0x18	; 24
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	50 93 60 00 	sts	0x0060, r21
    20f2:	10 92 60 00 	sts	0x0060, r1
    20f6:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    20f8:	80 91 70 03 	lds	r24, 0x0370
    20fc:	90 91 71 03 	lds	r25, 0x0371
    2100:	a9 ad       	sts	0x69, r26
    2102:	ba ad       	sts	0x6a, r27
    2104:	a8 17       	cp	r26, r24
    2106:	b9 07       	cpc	r27, r25
    2108:	50 f0       	brcs	.+20     	; 0x211e <tune_8ths+0x298>
    210a:	80 91 af 02 	lds	r24, 0x02AF
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	31 f4       	brne	.+12     	; 0x211e <tune_8ths+0x298>
    2112:	8f a9       	sts	0x4f, r24
    2114:	98 ad       	sts	0x68, r25
    2116:	80 95       	com	r24
    2118:	90 95       	com	r25
    211a:	08 23       	and	r16, r24
    211c:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    211e:	80 91 70 03 	lds	r24, 0x0370
    2122:	90 91 71 03 	lds	r25, 0x0371
    2126:	e9 ad       	sts	0x69, r30
    2128:	fa ad       	sts	0x6a, r31
    212a:	8e 17       	cp	r24, r30
    212c:	9f 07       	cpc	r25, r31
    212e:	21 f4       	brne	.+8      	; 0x2138 <tune_8ths+0x2b2>
    2130:	80 91 af 02 	lds	r24, 0x02AF
    2134:	81 30       	cpi	r24, 0x01	; 1
    2136:	71 f0       	breq	.+28     	; 0x2154 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    2138:	f1 e0       	ldi	r31, 0x01	; 1
    213a:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    213e:	2d a9       	sts	0x4d, r18
    2140:	3e a9       	sts	0x4e, r19
    2142:	21 50       	subi	r18, 0x01	; 1
    2144:	30 40       	sbci	r19, 0x00	; 0
    2146:	3e ab       	sts	0x5e, r19
    2148:	2d ab       	sts	0x5d, r18
    214a:	4f ef       	ldi	r20, 0xFF	; 255
    214c:	2f 3f       	cpi	r18, 0xFF	; 255
    214e:	34 07       	cpc	r19, r20
    2150:	09 f0       	breq	.+2      	; 0x2154 <tune_8ths+0x2ce>
    2152:	67 cf       	rjmp	.-306    	; 0x2022 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    2154:	21 96       	adiw	r28, 0x01	; 1
    2156:	ae ad       	sts	0x6e, r26
    2158:	bf ad       	sts	0x6f, r27
    215a:	21 97       	sbiw	r28, 0x01	; 1
    215c:	0d 93       	st	X+, r16
    215e:	1d 93       	st	X+, r17
    2160:	21 96       	adiw	r28, 0x01	; 1
    2162:	bf af       	sts	0x7f, r27
    2164:	ae af       	sts	0x7e, r26
    2166:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2168:	ee e6       	ldi	r30, 0x6E	; 110
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	8d 7f       	andi	r24, 0xFD	; 253
    2170:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    2172:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2174:	2d ad       	sts	0x6d, r18
    2176:	3e ad       	sts	0x6e, r19
    2178:	2f 5f       	subi	r18, 0xFF	; 255
    217a:	3f 4f       	sbci	r19, 0xFF	; 255
    217c:	3e af       	sts	0x7e, r19
    217e:	2d af       	sts	0x7d, r18
    2180:	4b ad       	sts	0x6b, r20
    2182:	5c ad       	sts	0x6c, r21
    2184:	4d 5f       	subi	r20, 0xFD	; 253
    2186:	5f 4f       	sbci	r21, 0xFF	; 255
    2188:	5c af       	sts	0x7c, r21
    218a:	4b af       	sts	0x7b, r20
    218c:	20 31       	cpi	r18, 0x10	; 16
    218e:	31 05       	cpc	r19, r1
    2190:	09 f0       	breq	.+2      	; 0x2194 <tune_8ths+0x30e>
    2192:	26 cf       	rjmp	.-436    	; 0x1fe0 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		
		PORTF &= ~(1<<GATE); //turn gate off
    2194:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    2196:	c0 5c       	subi	r28, 0xC0	; 192
    2198:	df 4f       	sbci	r29, 0xFF	; 255
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	bf 90       	pop	r11
    21b6:	af 90       	pop	r10
    21b8:	9f 90       	pop	r9
    21ba:	8f 90       	pop	r8
    21bc:	7f 90       	pop	r7
    21be:	6f 90       	pop	r6
    21c0:	5f 90       	pop	r5
    21c2:	4f 90       	pop	r4
    21c4:	3f 90       	pop	r3
    21c6:	2f 90       	pop	r2
    21c8:	08 95       	ret

000021ca <tune_filter>:
	
void tune_filter(void) {
    21ca:	2f 92       	push	r2
    21cc:	3f 92       	push	r3
    21ce:	4f 92       	push	r4
    21d0:	5f 92       	push	r5
    21d2:	6f 92       	push	r6
    21d4:	7f 92       	push	r7
    21d6:	8f 92       	push	r8
    21d8:	9f 92       	push	r9
    21da:	af 92       	push	r10
    21dc:	bf 92       	push	r11
    21de:	cf 92       	push	r12
    21e0:	df 92       	push	r13
    21e2:	ef 92       	push	r14
    21e4:	ff 92       	push	r15
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	e9 97       	sbiw	r28, 0x39	; 57
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    21fe:	de 01       	movw	r26, r28
    2200:	11 96       	adiw	r26, 0x01	; 1
    2202:	e0 e6       	ldi	r30, 0x60	; 96
    2204:	f2 e0       	ldi	r31, 0x02	; 2
    2206:	8d e2       	ldi	r24, 0x2D	; 45
    2208:	01 90       	ld	r0, Z+
    220a:	0d 92       	st	X+, r0
    220c:	81 50       	subi	r24, 0x01	; 1
    220e:	e1 f7       	brne	.-8      	; 0x2208 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2210:	88 ed       	ldi	r24, 0xD8	; 216
    2212:	91 e0       	ldi	r25, 0x01	; 1
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	70 e0       	ldi	r23, 0x00	; 0
    2218:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    221c:	81 ee       	ldi	r24, 0xE1	; 225
    221e:	91 e0       	ldi	r25, 0x01	; 1
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2228:	82 ee       	ldi	r24, 0xE2	; 226
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2234:	82 eb       	ldi	r24, 0xB2	; 178
    2236:	92 e0       	ldi	r25, 0x02	; 2
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2240:	8a ed       	ldi	r24, 0xDA	; 218
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	70 e0       	ldi	r23, 0x00	; 0
    2248:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    224c:	8f ed       	ldi	r24, 0xDF	; 223
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2258:	80 ee       	ldi	r24, 0xE0	; 224
    225a:	91 e0       	ldi	r25, 0x01	; 1
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2264:	81 ed       	ldi	r24, 0xD1	; 209
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2270:	86 ed       	ldi	r24, 0xD6	; 214
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    227c:	82 ed       	ldi	r24, 0xD2	; 210
    227e:	91 e0       	ldi	r25, 0x01	; 1
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2288:	83 ed       	ldi	r24, 0xD3	; 211
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    2294:	84 ed       	ldi	r24, 0xD4	; 212
    2296:	91 e0       	ldi	r25, 0x01	; 1
    2298:	6f ef       	ldi	r22, 0xFF	; 255
    229a:	7f e3       	ldi	r23, 0x3F	; 63
    229c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    22a0:	85 ed       	ldi	r24, 0xD5	; 213
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	6f ef       	ldi	r22, 0xFF	; 255
    22a6:	7f e3       	ldi	r23, 0x3F	; 63
    22a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    22ac:	89 ed       	ldi	r24, 0xD9	; 217
    22ae:	91 e0       	ldi	r25, 0x01	; 1
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    22b8:	8e ec       	ldi	r24, 0xCE	; 206
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    22c4:	8c ec       	ldi	r24, 0xCC	; 204
    22c6:	91 e0       	ldi	r25, 0x01	; 1
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    22d0:	8a ec       	ldi	r24, 0xCA	; 202
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	6f ef       	ldi	r22, 0xFF	; 255
    22d6:	7f e3       	ldi	r23, 0x3F	; 63
    22d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    22dc:	88 ec       	ldi	r24, 0xC8	; 200
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    22e8:	80 ed       	ldi	r24, 0xD0	; 208
    22ea:	91 e0       	ldi	r25, 0x01	; 1
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    22f4:	83 ee       	ldi	r24, 0xE3	; 227
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	60 e0       	ldi	r22, 0x00	; 0
    22fa:	70 e0       	ldi	r23, 0x00	; 0
    22fc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2300:	84 ee       	ldi	r24, 0xE4	; 228
    2302:	91 e0       	ldi	r25, 0x01	; 1
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    230c:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    230e:	ed ed       	ldi	r30, 0xDD	; 221
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	80 64       	ori	r24, 0x40	; 64
    2316:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2318:	80 81       	ld	r24, Z
    231a:	8f 7b       	andi	r24, 0xBF	; 191
    231c:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	80 93 74 03 	sts	0x0374, r24
	PORTF |= (1<<GATE); //turn gate on
    2324:	89 9a       	sbi	0x11, 1	; 17
    2326:	9e 01       	movw	r18, r28
    2328:	2f 5f       	subi	r18, 0xFF	; 255
    232a:	3f 4f       	sbci	r19, 0xFF	; 255
    232c:	3d ab       	sts	0x5d, r19
    232e:	2c ab       	sts	0x5c, r18
    2330:	89 e0       	ldi	r24, 0x09	; 9
    2332:	93 e0       	ldi	r25, 0x03	; 3
    2334:	99 af       	sts	0x79, r25
    2336:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2338:	1f aa       	sts	0x9f, r17
    233a:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    233c:	0f 2e       	mov	r0, r31
    233e:	f4 ed       	ldi	r31, 0xD4	; 212
    2340:	af 2e       	mov	r10, r31
    2342:	f1 e0       	ldi	r31, 0x01	; 1
    2344:	bf 2e       	mov	r11, r31
    2346:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2348:	0f 2e       	mov	r0, r31
    234a:	f8 ed       	ldi	r31, 0xD8	; 216
    234c:	6f 2e       	mov	r6, r31
    234e:	f1 e0       	ldi	r31, 0x01	; 1
    2350:	7f 2e       	mov	r7, r31
    2352:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2354:	0f 2e       	mov	r0, r31
    2356:	f5 ed       	ldi	r31, 0xD5	; 213
    2358:	4f 2e       	mov	r4, r31
    235a:	f1 e0       	ldi	r31, 0x01	; 1
    235c:	5f 2e       	mov	r5, r31
    235e:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    2360:	0f 2e       	mov	r0, r31
    2362:	fa ec       	ldi	r31, 0xCA	; 202
    2364:	2f 2e       	mov	r2, r31
    2366:	f1 e0       	ldi	r31, 0x01	; 1
    2368:	3f 2e       	mov	r3, r31
    236a:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    236c:	ac a9       	sts	0x4c, r26
    236e:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    2370:	8c 91       	ld	r24, X
    2372:	80 93 74 03 	sts	0x0374, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2376:	84 b5       	in	r24, 0x24	; 36
    2378:	8f 60       	ori	r24, 0x0F	; 15
    237a:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2380:	ee e6       	ldi	r30, 0x6E	; 110
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	82 60       	ori	r24, 0x02	; 2
    2388:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    238a:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    238c:	ee a9       	sts	0x4e, r30
    238e:	ff a9       	sts	0x4f, r31
    2390:	e2 30       	cpi	r30, 0x02	; 2
    2392:	f1 05       	cpc	r31, r1
    2394:	24 f4       	brge	.+8      	; 0x239e <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    2396:	83 e0       	ldi	r24, 0x03	; 3
    2398:	80 93 73 03 	sts	0x0373, r24
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    239e:	82 e0       	ldi	r24, 0x02	; 2
    23a0:	80 93 73 03 	sts	0x0373, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    23a4:	11 96       	adiw	r26, 0x01	; 1
    23a6:	2d 91       	ld	r18, X+
    23a8:	3c 91       	ld	r19, X
    23aa:	12 97       	sbiw	r26, 0x02	; 2
    23ac:	3b ab       	sts	0x5b, r19
    23ae:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    23b0:	8d e0       	ldi	r24, 0x0D	; 13
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9f a7       	lds	r25, 0x7f
    23b6:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    23b8:	ee 24       	eor	r14, r14
    23ba:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    23bc:	0f 2e       	mov	r0, r31
    23be:	f1 ed       	ldi	r31, 0xD1	; 209
    23c0:	cf 2e       	mov	r12, r31
    23c2:	f1 e0       	ldi	r31, 0x01	; 1
    23c4:	df 2e       	mov	r13, r31
    23c6:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    23c8:	0f 2e       	mov	r0, r31
    23ca:	f6 ed       	ldi	r31, 0xD6	; 214
    23cc:	8f 2e       	mov	r8, r31
    23ce:	f1 e0       	ldi	r31, 0x01	; 1
    23d0:	9f 2e       	mov	r9, r31
    23d2:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	fc 01       	movw	r30, r24
    23da:	0e a4       	lds	r16, 0xae
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <tune_filter+0x218>
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	0a 94       	dec	r0
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <tune_filter+0x214>
    23e6:	f9 ab       	sts	0x59, r31
    23e8:	e8 ab       	sts	0x58, r30
    23ea:	ee 2a       	or	r14, r30
    23ec:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    23ee:	c5 01       	movw	r24, r10
    23f0:	b7 01       	movw	r22, r14
    23f2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
    23f6:	10 92 72 03 	sts	0x0372, r1
			period_counter = 0;
    23fa:	10 92 75 03 	sts	0x0375, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    23fe:	8f e0       	ldi	r24, 0x0F	; 15
    2400:	28 e1       	ldi	r18, 0x18	; 24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	a8 95       	wdr
    240a:	20 93 60 00 	sts	0x0060, r18
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2414:	80 91 72 03 	lds	r24, 0x0372
    2418:	88 23       	and	r24, r24
    241a:	b1 f5       	brne	.+108    	; 0x2488 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    241c:	02 ed       	ldi	r16, 0xD2	; 210
    241e:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2420:	80 91 74 03 	lds	r24, 0x0374
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	84 5d       	subi	r24, 0xD4	; 212
    2428:	9e 4f       	sbci	r25, 0xFE	; 254
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2430:	c5 01       	movw	r24, r10
    2432:	b7 01       	movw	r22, r14
    2434:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2438:	c3 01       	movw	r24, r6
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2442:	c2 01       	movw	r24, r4
    2444:	6f ef       	ldi	r22, 0xFF	; 255
    2446:	7f e3       	ldi	r23, 0x3F	; 63
    2448:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    244c:	c1 01       	movw	r24, r2
    244e:	6f ef       	ldi	r22, 0xFF	; 255
    2450:	7f e3       	ldi	r23, 0x3F	; 63
    2452:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    2456:	8e ec       	ldi	r24, 0xCE	; 206
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2462:	c6 01       	movw	r24, r12
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	70 e0       	ldi	r23, 0x00	; 0
    2468:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    246c:	c4 01       	movw	r24, r8
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    2476:	c8 01       	movw	r24, r16
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    2480:	80 91 72 03 	lds	r24, 0x0372
    2484:	88 23       	and	r24, r24
    2486:	61 f2       	breq	.-104    	; 0x2420 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    2488:	88 e1       	ldi	r24, 0x18	; 24
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	80 93 60 00 	sts	0x0060, r24
    2492:	10 92 60 00 	sts	0x0060, r1
    2496:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    2498:	80 91 70 03 	lds	r24, 0x0370
    249c:	90 91 71 03 	lds	r25, 0x0371
    24a0:	2a a9       	sts	0x4a, r18
    24a2:	3b a9       	sts	0x4b, r19
    24a4:	28 17       	cp	r18, r24
    24a6:	39 07       	cpc	r19, r25
    24a8:	50 f0       	brcs	.+20     	; 0x24be <tune_filter+0x2f4>
    24aa:	80 91 af 02 	lds	r24, 0x02AF
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	31 f4       	brne	.+12     	; 0x24be <tune_filter+0x2f4>
    24b2:	88 a9       	sts	0x48, r24
    24b4:	99 a9       	sts	0x49, r25
    24b6:	80 95       	com	r24
    24b8:	90 95       	com	r25
    24ba:	e8 22       	and	r14, r24
    24bc:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    24be:	80 91 70 03 	lds	r24, 0x0370
    24c2:	90 91 71 03 	lds	r25, 0x0371
    24c6:	ea a9       	sts	0x4a, r30
    24c8:	fb a9       	sts	0x4b, r31
    24ca:	8e 17       	cp	r24, r30
    24cc:	9f 07       	cpc	r25, r31
    24ce:	21 f4       	brne	.+8      	; 0x24d8 <tune_filter+0x30e>
    24d0:	80 91 af 02 	lds	r24, 0x02AF
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	71 f0       	breq	.+28     	; 0x24f4 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    24de:	2e a5       	lds	r18, 0x6e
    24e0:	3f a5       	lds	r19, 0x6f
    24e2:	21 50       	subi	r18, 0x01	; 1
    24e4:	30 40       	sbci	r19, 0x00	; 0
    24e6:	3f a7       	lds	r19, 0x7f
    24e8:	2e a7       	lds	r18, 0x7e
    24ea:	8f ef       	ldi	r24, 0xFF	; 255
    24ec:	2f 3f       	cpi	r18, 0xFF	; 255
    24ee:	38 07       	cpc	r19, r24
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <tune_filter+0x32a>
    24f2:	70 cf       	rjmp	.-288    	; 0x23d4 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    24f4:	ee a9       	sts	0x4e, r30
    24f6:	ff a9       	sts	0x4f, r31
    24f8:	31 96       	adiw	r30, 0x01	; 1
    24fa:	ff ab       	sts	0x5f, r31
    24fc:	ee ab       	sts	0x5e, r30
    24fe:	c7 01       	movw	r24, r14
    2500:	80 96       	adiw	r24, 0x20	; 32
    2502:	e8 ad       	sts	0x68, r30
    2504:	f9 ad       	sts	0x69, r31
    2506:	81 93       	st	Z+, r24
    2508:	91 93       	st	Z+, r25
    250a:	f9 af       	sts	0x79, r31
    250c:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    250e:	ee e6       	ldi	r30, 0x6E	; 110
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	8d 7f       	andi	r24, 0xFD	; 253
    2516:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2518:	14 bc       	out	0x24, r1	; 36
    251a:	2c a9       	sts	0x4c, r18
    251c:	3d a9       	sts	0x4d, r19
    251e:	2d 5f       	subi	r18, 0xFD	; 253
    2520:	3f 4f       	sbci	r19, 0xFF	; 255
    2522:	3d ab       	sts	0x5d, r19
    2524:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2526:	8e a9       	sts	0x4e, r24
    2528:	9f a9       	sts	0x4f, r25
    252a:	8f 30       	cpi	r24, 0x0F	; 15
    252c:	91 05       	cpc	r25, r1
    252e:	09 f0       	breq	.+2      	; 0x2532 <tune_filter+0x368>
    2530:	1d cf       	rjmp	.-454    	; 0x236c <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2532:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2534:	e9 96       	adiw	r28, 0x39	; 57
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	ff 90       	pop	r15
    254a:	ef 90       	pop	r14
    254c:	df 90       	pop	r13
    254e:	cf 90       	pop	r12
    2550:	bf 90       	pop	r11
    2552:	af 90       	pop	r10
    2554:	9f 90       	pop	r9
    2556:	8f 90       	pop	r8
    2558:	7f 90       	pop	r7
    255a:	6f 90       	pop	r6
    255c:	5f 90       	pop	r5
    255e:	4f 90       	pop	r4
    2560:	3f 90       	pop	r3
    2562:	2f 90       	pop	r2
    2564:	08 95       	ret

00002566 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2566:	87 e0       	ldi	r24, 0x07	; 7
    2568:	93 e0       	ldi	r25, 0x03	; 3
    256a:	6c e0       	ldi	r22, 0x0C	; 12
    256c:	76 e0       	ldi	r23, 0x06	; 6
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2576:	89 e4       	ldi	r24, 0x49	; 73
    2578:	93 e0       	ldi	r25, 0x03	; 3
    257a:	6e e4       	ldi	r22, 0x4E	; 78
    257c:	76 e0       	ldi	r23, 0x06	; 6
    257e:	42 e2       	ldi	r20, 0x22	; 34
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2586:	87 e2       	ldi	r24, 0x27	; 39
    2588:	93 e0       	ldi	r25, 0x03	; 3
    258a:	6c e2       	ldi	r22, 0x2C	; 44
    258c:	76 e0       	ldi	r23, 0x06	; 6
    258e:	42 e2       	ldi	r20, 0x22	; 34
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__eeupd_block_m6450a>
	
	
}
    2596:	08 95       	ret

00002598 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2598:	82 e7       	ldi	r24, 0x72	; 114
    259a:	96 e0       	ldi	r25, 0x06	; 6
    259c:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__eerd_word_m6450a>
    25a0:	90 93 6e 03 	sts	0x036E, r25
    25a4:	80 93 6d 03 	sts	0x036D, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    25a8:	80 e7       	ldi	r24, 0x70	; 112
    25aa:	96 e0       	ldi	r25, 0x06	; 6
    25ac:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__eerd_word_m6450a>
    25b0:	90 93 6c 03 	sts	0x036C, r25
    25b4:	80 93 6b 03 	sts	0x036B, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    25b8:	89 e4       	ldi	r24, 0x49	; 73
    25ba:	93 e0       	ldi	r25, 0x03	; 3
    25bc:	6e e4       	ldi	r22, 0x4E	; 78
    25be:	76 e0       	ldi	r23, 0x06	; 6
    25c0:	42 e2       	ldi	r20, 0x22	; 34
    25c2:	50 e0       	ldi	r21, 0x00	; 0
    25c4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    25c8:	87 e2       	ldi	r24, 0x27	; 39
    25ca:	93 e0       	ldi	r25, 0x03	; 3
    25cc:	6c e2       	ldi	r22, 0x2C	; 44
    25ce:	76 e0       	ldi	r23, 0x06	; 6
    25d0:	42 e2       	ldi	r20, 0x22	; 34
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    25d8:	87 e0       	ldi	r24, 0x07	; 7
    25da:	93 e0       	ldi	r25, 0x03	; 3
    25dc:	6c e0       	ldi	r22, 0x0C	; 12
    25de:	76 e0       	ldi	r23, 0x06	; 6
    25e0:	40 e2       	ldi	r20, 0x20	; 32
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    25e8:	08 95       	ret

000025ea <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    25ea:	98 2f       	mov	r25, r24
    25ec:	96 95       	lsr	r25
    25ee:	96 95       	lsr	r25
    25f0:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    25f2:	29 2f       	mov	r18, r25
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	f9 01       	movw	r30, r18
    25f8:	31 97       	sbiw	r30, 0x01	; 1
    25fa:	ee 0f       	add	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	e6 0f       	add	r30, r22
    2600:	f7 1f       	adc	r31, r23
    2602:	01 90       	ld	r0, Z+
    2604:	f0 81       	ld	r31, Z
    2606:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2608:	22 0f       	add	r18, r18
    260a:	33 1f       	adc	r19, r19
    260c:	26 0f       	add	r18, r22
    260e:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2610:	d9 01       	movw	r26, r18
    2612:	4d 91       	ld	r20, X+
    2614:	5c 91       	ld	r21, X
    2616:	11 97       	sbiw	r26, 0x01	; 1
    2618:	4e 1b       	sub	r20, r30
    261a:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    261c:	99 0f       	add	r25, r25
    261e:	99 0f       	add	r25, r25
    2620:	99 0f       	add	r25, r25
    2622:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	48 9f       	mul	r20, r24
    2628:	90 01       	movw	r18, r0
    262a:	49 9f       	mul	r20, r25
    262c:	30 0d       	add	r19, r0
    262e:	58 9f       	mul	r21, r24
    2630:	30 0d       	add	r19, r0
    2632:	11 24       	eor	r1, r1
    2634:	36 95       	lsr	r19
    2636:	27 95       	ror	r18
    2638:	36 95       	lsr	r19
    263a:	27 95       	ror	r18
    263c:	36 95       	lsr	r19
    263e:	27 95       	ror	r18
    2640:	e2 0f       	add	r30, r18
    2642:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2644:	8e 2f       	mov	r24, r30
    2646:	9f 2f       	mov	r25, r31
    2648:	08 95       	ret

0000264a <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	a2 97       	sbiw	r28, 0x22	; 34
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    265e:	de 01       	movw	r26, r28
    2660:	11 96       	adiw	r26, 0x01	; 1
    2662:	ed e8       	ldi	r30, 0x8D	; 141
    2664:	f2 e0       	ldi	r31, 0x02	; 2
    2666:	82 e2       	ldi	r24, 0x22	; 34
    2668:	01 90       	ld	r0, Z+
    266a:	0d 92       	st	X+, r0
    266c:	81 50       	subi	r24, 0x01	; 1
    266e:	e1 f7       	brne	.-8      	; 0x2668 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2670:	a9 e4       	ldi	r26, 0x49	; 73
    2672:	b3 e0       	ldi	r27, 0x03	; 3
    2674:	fe 01       	movw	r30, r28
    2676:	31 96       	adiw	r30, 0x01	; 1
    2678:	82 e2       	ldi	r24, 0x22	; 34
    267a:	01 90       	ld	r0, Z+
    267c:	0d 92       	st	X+, r0
    267e:	81 50       	subi	r24, 0x01	; 1
    2680:	e1 f7       	brne	.-8      	; 0x267a <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2682:	a7 e2       	ldi	r26, 0x27	; 39
    2684:	b3 e0       	ldi	r27, 0x03	; 3
    2686:	fe 01       	movw	r30, r28
    2688:	31 96       	adiw	r30, 0x01	; 1
    268a:	82 e2       	ldi	r24, 0x22	; 34
    268c:	01 90       	ld	r0, Z+
    268e:	0d 92       	st	X+, r0
    2690:	81 50       	subi	r24, 0x01	; 1
    2692:	e1 f7       	brne	.-8      	; 0x268c <set_one_volt_per_octave+0x42>
	
	
    2694:	a2 96       	adiw	r28, 0x22	; 34
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	08 95       	ret

000026a6 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    26a6:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    26a8:	80 91 79 03 	lds	r24, 0x0379
    26ac:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    26ae:	89 27       	eor	r24, r25
    26b0:	80 93 79 03 	sts	0x0379, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    26b4:	89 23       	and	r24, r25
    26b6:	08 95       	ret

000026b8 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    26b8:	ed ed       	ldi	r30, 0xDD	; 221
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	90 81       	ld	r25, Z
    26be:	9f 7b       	andi	r25, 0xBF	; 191
    26c0:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	21 70       	andi	r18, 0x01	; 1
    26c8:	30 70       	andi	r19, 0x00	; 0
    26ca:	22 0f       	add	r18, r18
    26cc:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    26ce:	68 2f       	mov	r22, r24
    26d0:	62 95       	swap	r22
    26d2:	66 95       	lsr	r22
    26d4:	67 70       	andi	r22, 0x07	; 7
    26d6:	67 95       	ror	r22
    26d8:	66 27       	eor	r22, r22
    26da:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    26dc:	26 2b       	or	r18, r22
    26de:	98 2f       	mov	r25, r24
    26e0:	96 95       	lsr	r25
    26e2:	96 95       	lsr	r25
    26e4:	91 70       	andi	r25, 0x01	; 1
    26e6:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    26e8:	68 2f       	mov	r22, r24
    26ea:	66 1f       	adc	r22, r22
    26ec:	66 27       	eor	r22, r22
    26ee:	66 1f       	adc	r22, r22
    26f0:	66 0f       	add	r22, r22
    26f2:	66 0f       	add	r22, r22
    26f4:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    26f6:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    26f8:	a8 2f       	mov	r26, r24
    26fa:	a6 95       	lsr	r26
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	a1 70       	andi	r26, 0x01	; 1
    2700:	b0 70       	andi	r27, 0x00	; 0
    2702:	bd 01       	movw	r22, r26
    2704:	66 0f       	add	r22, r22
    2706:	77 1f       	adc	r23, r23
    2708:	66 0f       	add	r22, r22
    270a:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    270c:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    270e:	68 2f       	mov	r22, r24
    2710:	62 95       	swap	r22
    2712:	6f 70       	andi	r22, 0x0F	; 15
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	61 70       	andi	r22, 0x01	; 1
    2718:	70 70       	andi	r23, 0x00	; 0
    271a:	ab 01       	movw	r20, r22
    271c:	00 24       	eor	r0, r0
    271e:	56 95       	lsr	r21
    2720:	47 95       	ror	r20
    2722:	07 94       	ror	r0
    2724:	56 95       	lsr	r21
    2726:	47 95       	ror	r20
    2728:	07 94       	ror	r0
    272a:	54 2f       	mov	r21, r20
    272c:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    272e:	62 2f       	mov	r22, r18
    2730:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2732:	48 2f       	mov	r20, r24
    2734:	42 95       	swap	r20
    2736:	46 95       	lsr	r20
    2738:	46 95       	lsr	r20
    273a:	43 70       	andi	r20, 0x03	; 3
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	41 70       	andi	r20, 0x01	; 1
    2740:	50 70       	andi	r21, 0x00	; 0
    2742:	9a 01       	movw	r18, r20
    2744:	22 0f       	add	r18, r18
    2746:	33 1f       	adc	r19, r19
    2748:	22 95       	swap	r18
    274a:	32 95       	swap	r19
    274c:	30 7f       	andi	r19, 0xF0	; 240
    274e:	32 27       	eor	r19, r18
    2750:	20 7f       	andi	r18, 0xF0	; 240
    2752:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2754:	46 2f       	mov	r20, r22
    2756:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2758:	86 95       	lsr	r24
    275a:	86 95       	lsr	r24
    275c:	86 95       	lsr	r24
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	21 70       	andi	r18, 0x01	; 1
    2764:	30 70       	andi	r19, 0x00	; 0
    2766:	c9 01       	movw	r24, r18
    2768:	82 95       	swap	r24
    276a:	92 95       	swap	r25
    276c:	90 7f       	andi	r25, 0xF0	; 240
    276e:	98 27       	eor	r25, r24
    2770:	80 7f       	andi	r24, 0xF0	; 240
    2772:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2774:	84 2b       	or	r24, r20
    2776:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2778:	80 81       	ld	r24, Z
    277a:	80 64       	ori	r24, 0x40	; 64
    277c:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    277e:	80 81       	ld	r24, Z
    2780:	8f 7b       	andi	r24, 0xBF	; 191
    2782:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2784:	12 b8       	out	0x02, r1	; 2
	
	
    2786:	08 95       	ret

00002788 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2788:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    278a:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    278c:	74 83       	std	Z+4, r23	; 0x04
    278e:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2790:	11 82       	std	Z+1, r1	; 0x01
    2792:	10 82       	st	Z, r1
}
    2794:	08 95       	ret

00002796 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2796:	1f 93       	push	r17
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
    279c:	ec 01       	movw	r28, r24
    279e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    27a0:	0e 94 3a 14 	call	0x2874	; 0x2874 <store_and_clear_interrupt>
    27a4:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    27a6:	39 81       	ldd	r19, Y+1	; 0x01
    27a8:	83 2f       	mov	r24, r19
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	01 96       	adiw	r24, 0x01	; 1
    27ae:	6a 81       	ldd	r22, Y+2	; 0x02
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__divmodhi4>
    27b6:	48 81       	ld	r20, Y
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	84 17       	cp	r24, r20
    27bc:	95 07       	cpc	r25, r21
    27be:	29 f4       	brne	.+10     	; 0x27ca <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    27c0:	82 2f       	mov	r24, r18
    27c2:	0e 94 3d 14 	call	0x287a	; 0x287a <restore_interrupt_setting>
      return false;
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	11 c0       	rjmp	.+34     	; 0x27ec <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    27ca:	eb 81       	ldd	r30, Y+3	; 0x03
    27cc:	fc 81       	ldd	r31, Y+4	; 0x04
    27ce:	e3 0f       	add	r30, r19
    27d0:	f1 1d       	adc	r31, r1
    27d2:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	6a 81       	ldd	r22, Y+2	; 0x02
    27dc:	70 e0       	ldi	r23, 0x00	; 0
    27de:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__divmodhi4>
    27e2:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    27e4:	82 2f       	mov	r24, r18
    27e6:	0e 94 3d 14 	call	0x287a	; 0x287a <restore_interrupt_setting>
      return true;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	08 95       	ret

000027f4 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
    27f8:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    27fa:	0e 94 3a 14 	call	0x2874	; 0x2874 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    27fe:	29 81       	ldd	r18, Y+1	; 0x01
    2800:	98 81       	ld	r25, Y
    2802:	29 17       	cp	r18, r25
    2804:	18 f0       	brcs	.+6      	; 0x280c <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2806:	c2 2f       	mov	r28, r18
    2808:	c9 1b       	sub	r28, r25
    280a:	03 c0       	rjmp	.+6      	; 0x2812 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    280c:	ca 81       	ldd	r28, Y+2	; 0x02
    280e:	c2 0f       	add	r28, r18
    2810:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2812:	0e 94 3d 14 	call	0x287a	; 0x287a <restore_interrupt_setting>
   return len;
}
    2816:	8c 2f       	mov	r24, r28
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	08 95       	ret

0000281e <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    281e:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2820:	20 81       	ld	r18, Z
    2822:	86 2f       	mov	r24, r22
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	82 0f       	add	r24, r18
    2828:	91 1d       	adc	r25, r1
    282a:	62 81       	ldd	r22, Z+2	; 0x02
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__divmodhi4>
    2832:	03 80       	ldd	r0, Z+3	; 0x03
    2834:	f4 81       	ldd	r31, Z+4	; 0x04
    2836:	e0 2d       	mov	r30, r0
    2838:	e8 0f       	add	r30, r24
    283a:	f9 1f       	adc	r31, r25
}
    283c:	80 81       	ld	r24, Z
    283e:	08 95       	ret

00002840 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2840:	1f 93       	push	r17
    2842:	cf 93       	push	r28
    2844:	df 93       	push	r29
    2846:	ec 01       	movw	r28, r24
    2848:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    284a:	0e 94 3a 14 	call	0x2874	; 0x2874 <store_and_clear_interrupt>
    284e:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2850:	88 81       	ld	r24, Y
    2852:	21 2f       	mov	r18, r17
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	28 0f       	add	r18, r24
    2858:	31 1d       	adc	r19, r1
    285a:	6a 81       	ldd	r22, Y+2	; 0x02
    285c:	c9 01       	movw	r24, r18
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__divmodhi4>
    2864:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2866:	84 2f       	mov	r24, r20
    2868:	0e 94 3d 14 	call	0x287a	; 0x287a <restore_interrupt_setting>
}
    286c:	df 91       	pop	r29
    286e:	cf 91       	pop	r28
    2870:	1f 91       	pop	r17
    2872:	08 95       	ret

00002874 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2874:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2876:	f8 94       	cli
   return sreg;
}
    2878:	08 95       	ret

0000287a <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    287a:	8f bf       	out	0x3f, r24	; 63
}
    287c:	08 95       	ret

0000287e <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    287e:	88 1f       	adc	r24, r24
    2880:	88 27       	eor	r24, r24
    2882:	88 1f       	adc	r24, r24
    2884:	08 95       	ret

00002886 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	88 3f       	cpi	r24, 0xF8	; 248
    288a:	08 f4       	brcc	.+2      	; 0x288e <midi_is_realtime+0x8>
    288c:	90 e0       	ldi	r25, 0x00	; 0
}
    288e:	89 2f       	mov	r24, r25
    2890:	08 95       	ret

00002892 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	20 7f       	andi	r18, 0xF0	; 240
    2898:	30 70       	andi	r19, 0x00	; 0
    289a:	20 3c       	cpi	r18, 0xC0	; 192
    289c:	31 05       	cpc	r19, r1
    289e:	e9 f1       	breq	.+122    	; 0x291a <midi_packet_length+0x88>
    28a0:	21 3c       	cpi	r18, 0xC1	; 193
    28a2:	31 05       	cpc	r19, r1
    28a4:	8c f4       	brge	.+34     	; 0x28c8 <midi_packet_length+0x36>
    28a6:	20 39       	cpi	r18, 0x90	; 144
    28a8:	31 05       	cpc	r19, r1
    28aa:	e1 f0       	breq	.+56     	; 0x28e4 <midi_packet_length+0x52>
    28ac:	21 39       	cpi	r18, 0x91	; 145
    28ae:	31 05       	cpc	r19, r1
    28b0:	24 f4       	brge	.+8      	; 0x28ba <midi_packet_length+0x28>
    28b2:	20 38       	cpi	r18, 0x80	; 128
    28b4:	31 05       	cpc	r19, r1
    28b6:	79 f5       	brne	.+94     	; 0x2916 <midi_packet_length+0x84>
    28b8:	15 c0       	rjmp	.+42     	; 0x28e4 <midi_packet_length+0x52>
    28ba:	20 3a       	cpi	r18, 0xA0	; 160
    28bc:	31 05       	cpc	r19, r1
    28be:	91 f0       	breq	.+36     	; 0x28e4 <midi_packet_length+0x52>
    28c0:	20 3b       	cpi	r18, 0xB0	; 176
    28c2:	31 05       	cpc	r19, r1
    28c4:	41 f5       	brne	.+80     	; 0x2916 <midi_packet_length+0x84>
    28c6:	0e c0       	rjmp	.+28     	; 0x28e4 <midi_packet_length+0x52>
    28c8:	20 3e       	cpi	r18, 0xE0	; 224
    28ca:	31 05       	cpc	r19, r1
    28cc:	59 f0       	breq	.+22     	; 0x28e4 <midi_packet_length+0x52>
    28ce:	21 3e       	cpi	r18, 0xE1	; 225
    28d0:	31 05       	cpc	r19, r1
    28d2:	24 f4       	brge	.+8      	; 0x28dc <midi_packet_length+0x4a>
    28d4:	20 3d       	cpi	r18, 0xD0	; 208
    28d6:	31 05       	cpc	r19, r1
    28d8:	f1 f4       	brne	.+60     	; 0x2916 <midi_packet_length+0x84>
    28da:	1f c0       	rjmp	.+62     	; 0x291a <midi_packet_length+0x88>
    28dc:	20 3f       	cpi	r18, 0xF0	; 240
    28de:	31 05       	cpc	r19, r1
    28e0:	d1 f4       	brne	.+52     	; 0x2916 <midi_packet_length+0x84>
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    28e4:	83 e0       	ldi	r24, 0x03	; 3
    28e6:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    28e8:	86 3f       	cpi	r24, 0xF6	; 246
    28ea:	79 f0       	breq	.+30     	; 0x290a <midi_packet_length+0x78>
    28ec:	87 3f       	cpi	r24, 0xF7	; 247
    28ee:	38 f4       	brcc	.+14     	; 0x28fe <midi_packet_length+0x6c>
    28f0:	82 3f       	cpi	r24, 0xF2	; 242
    28f2:	a9 f0       	breq	.+42     	; 0x291e <midi_packet_length+0x8c>
    28f4:	83 3f       	cpi	r24, 0xF3	; 243
    28f6:	59 f0       	breq	.+22     	; 0x290e <midi_packet_length+0x7c>
    28f8:	81 3f       	cpi	r24, 0xF1	; 241
    28fa:	59 f4       	brne	.+22     	; 0x2912 <midi_packet_length+0x80>
    28fc:	08 c0       	rjmp	.+16     	; 0x290e <midi_packet_length+0x7c>
    28fe:	88 3f       	cpi	r24, 0xF8	; 248
    2900:	40 f0       	brcs	.+16     	; 0x2912 <midi_packet_length+0x80>
    2902:	8d 3f       	cpi	r24, 0xFD	; 253
    2904:	10 f0       	brcs	.+4      	; 0x290a <midi_packet_length+0x78>
    2906:	8e 3f       	cpi	r24, 0xFE	; 254
    2908:	20 f0       	brcs	.+8      	; 0x2912 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    290e:	82 e0       	ldi	r24, 0x02	; 2
    2910:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    291a:	82 e0       	ldi	r24, 0x02	; 2
    291c:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    291e:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2920:	08 95       	ret

00002922 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2922:	0f 93       	push	r16
    2924:	34 2f       	mov	r19, r20
    2926:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2928:	46 2f       	mov	r20, r22
    292a:	4f 70       	andi	r20, 0x0F	; 15
    292c:	40 6b       	ori	r20, 0xB0	; 176
    292e:	23 2f       	mov	r18, r19
    2930:	2f 77       	andi	r18, 0x7F	; 127
    2932:	0f 77       	andi	r16, 0x7F	; 127
    2934:	dc 01       	movw	r26, r24
    2936:	ed 91       	ld	r30, X+
    2938:	fc 91       	ld	r31, X
    293a:	63 e0       	ldi	r22, 0x03	; 3
    293c:	70 e0       	ldi	r23, 0x00	; 0
    293e:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2940:	0f 91       	pop	r16
    2942:	08 95       	ret

00002944 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2944:	0f 93       	push	r16
    2946:	34 2f       	mov	r19, r20
    2948:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    294a:	46 2f       	mov	r20, r22
    294c:	4f 70       	andi	r20, 0x0F	; 15
    294e:	40 69       	ori	r20, 0x90	; 144
    2950:	23 2f       	mov	r18, r19
    2952:	2f 77       	andi	r18, 0x7F	; 127
    2954:	0f 77       	andi	r16, 0x7F	; 127
    2956:	dc 01       	movw	r26, r24
    2958:	ed 91       	ld	r30, X+
    295a:	fc 91       	ld	r31, X
    295c:	63 e0       	ldi	r22, 0x03	; 3
    295e:	70 e0       	ldi	r23, 0x00	; 0
    2960:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2962:	0f 91       	pop	r16
    2964:	08 95       	ret

00002966 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2966:	0f 93       	push	r16
    2968:	34 2f       	mov	r19, r20
    296a:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    296c:	46 2f       	mov	r20, r22
    296e:	4f 70       	andi	r20, 0x0F	; 15
    2970:	40 68       	ori	r20, 0x80	; 128
    2972:	23 2f       	mov	r18, r19
    2974:	2f 77       	andi	r18, 0x7F	; 127
    2976:	0f 77       	andi	r16, 0x7F	; 127
    2978:	dc 01       	movw	r26, r24
    297a:	ed 91       	ld	r30, X+
    297c:	fc 91       	ld	r31, X
    297e:	63 e0       	ldi	r22, 0x03	; 3
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2984:	0f 91       	pop	r16
    2986:	08 95       	ret

00002988 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2988:	0f 93       	push	r16
    298a:	34 2f       	mov	r19, r20
    298c:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    298e:	46 2f       	mov	r20, r22
    2990:	4f 70       	andi	r20, 0x0F	; 15
    2992:	40 6a       	ori	r20, 0xA0	; 160
    2994:	23 2f       	mov	r18, r19
    2996:	2f 77       	andi	r18, 0x7F	; 127
    2998:	0f 77       	andi	r16, 0x7F	; 127
    299a:	dc 01       	movw	r26, r24
    299c:	ed 91       	ld	r30, X+
    299e:	fc 91       	ld	r31, X
    29a0:	63 e0       	ldi	r22, 0x03	; 3
    29a2:	70 e0       	ldi	r23, 0x00	; 0
    29a4:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    29a6:	0f 91       	pop	r16
    29a8:	08 95       	ret

000029aa <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    29ae:	20 e2       	ldi	r18, 0x20	; 32
    29b0:	40 30       	cpi	r20, 0x00	; 0
    29b2:	52 07       	cpc	r21, r18
    29b4:	44 f4       	brge	.+16     	; 0x29c6 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    29b6:	a0 ee       	ldi	r26, 0xE0	; 224
    29b8:	40 30       	cpi	r20, 0x00	; 0
    29ba:	5a 07       	cpc	r21, r26
    29bc:	3c f0       	brlt	.+14     	; 0x29cc <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    29be:	8a 01       	movw	r16, r20
    29c0:	00 50       	subi	r16, 0x00	; 0
    29c2:	10 4e       	sbci	r17, 0xE0	; 224
    29c4:	05 c0       	rjmp	.+10     	; 0x29d0 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    29c6:	0f ef       	ldi	r16, 0xFF	; 255
    29c8:	1f e3       	ldi	r17, 0x3F	; 63
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    29cc:	00 e0       	ldi	r16, 0x00	; 0
    29ce:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    29d0:	46 2f       	mov	r20, r22
    29d2:	4f 70       	andi	r20, 0x0F	; 15
    29d4:	40 6e       	ori	r20, 0xE0	; 224
    29d6:	20 2f       	mov	r18, r16
    29d8:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    29da:	00 0f       	add	r16, r16
    29dc:	01 2f       	mov	r16, r17
    29de:	00 1f       	adc	r16, r16
    29e0:	11 0b       	sbc	r17, r17
    29e2:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    29e4:	0f 77       	andi	r16, 0x7F	; 127
    29e6:	dc 01       	movw	r26, r24
    29e8:	ed 91       	ld	r30, X+
    29ea:	fc 91       	ld	r31, X
    29ec:	63 e0       	ldi	r22, 0x03	; 3
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    29f2:	1f 91       	pop	r17
    29f4:	0f 91       	pop	r16
    29f6:	08 95       	ret

000029f8 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    29f8:	0f 93       	push	r16
    29fa:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    29fc:	46 2f       	mov	r20, r22
    29fe:	4f 70       	andi	r20, 0x0F	; 15
    2a00:	40 6c       	ori	r20, 0xC0	; 192
    2a02:	2f 77       	andi	r18, 0x7F	; 127
    2a04:	dc 01       	movw	r26, r24
    2a06:	ed 91       	ld	r30, X+
    2a08:	fc 91       	ld	r31, X
    2a0a:	62 e0       	ldi	r22, 0x02	; 2
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	00 e0       	ldi	r16, 0x00	; 0
    2a10:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2a12:	0f 91       	pop	r16
    2a14:	08 95       	ret

00002a16 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2a16:	0f 93       	push	r16
    2a18:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2a1a:	46 2f       	mov	r20, r22
    2a1c:	4f 70       	andi	r20, 0x0F	; 15
    2a1e:	40 6d       	ori	r20, 0xD0	; 208
    2a20:	2f 77       	andi	r18, 0x7F	; 127
    2a22:	dc 01       	movw	r26, r24
    2a24:	ed 91       	ld	r30, X+
    2a26:	fc 91       	ld	r31, X
    2a28:	62 e0       	ldi	r22, 0x02	; 2
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	00 e0       	ldi	r16, 0x00	; 0
    2a2e:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2a30:	0f 91       	pop	r16
    2a32:	08 95       	ret

00002a34 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2a34:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2a36:	dc 01       	movw	r26, r24
    2a38:	ed 91       	ld	r30, X+
    2a3a:	fc 91       	ld	r31, X
    2a3c:	61 e0       	ldi	r22, 0x01	; 1
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	48 ef       	ldi	r20, 0xF8	; 248
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	00 e0       	ldi	r16, 0x00	; 0
    2a46:	09 95       	icall
}
    2a48:	0f 91       	pop	r16
    2a4a:	08 95       	ret

00002a4c <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    2a4c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2a4e:	dc 01       	movw	r26, r24
    2a50:	ed 91       	ld	r30, X+
    2a52:	fc 91       	ld	r31, X
    2a54:	61 e0       	ldi	r22, 0x01	; 1
    2a56:	70 e0       	ldi	r23, 0x00	; 0
    2a58:	49 ef       	ldi	r20, 0xF9	; 249
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	00 e0       	ldi	r16, 0x00	; 0
    2a5e:	09 95       	icall
}
    2a60:	0f 91       	pop	r16
    2a62:	08 95       	ret

00002a64 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2a64:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2a66:	dc 01       	movw	r26, r24
    2a68:	ed 91       	ld	r30, X+
    2a6a:	fc 91       	ld	r31, X
    2a6c:	61 e0       	ldi	r22, 0x01	; 1
    2a6e:	70 e0       	ldi	r23, 0x00	; 0
    2a70:	4a ef       	ldi	r20, 0xFA	; 250
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	00 e0       	ldi	r16, 0x00	; 0
    2a76:	09 95       	icall
}
    2a78:	0f 91       	pop	r16
    2a7a:	08 95       	ret

00002a7c <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    2a7c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    2a7e:	dc 01       	movw	r26, r24
    2a80:	ed 91       	ld	r30, X+
    2a82:	fc 91       	ld	r31, X
    2a84:	61 e0       	ldi	r22, 0x01	; 1
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	4b ef       	ldi	r20, 0xFB	; 251
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	00 e0       	ldi	r16, 0x00	; 0
    2a8e:	09 95       	icall
}
    2a90:	0f 91       	pop	r16
    2a92:	08 95       	ret

00002a94 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    2a94:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    2a96:	dc 01       	movw	r26, r24
    2a98:	ed 91       	ld	r30, X+
    2a9a:	fc 91       	ld	r31, X
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	4c ef       	ldi	r20, 0xFC	; 252
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	00 e0       	ldi	r16, 0x00	; 0
    2aa6:	09 95       	icall
}
    2aa8:	0f 91       	pop	r16
    2aaa:	08 95       	ret

00002aac <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    2aac:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    2aae:	dc 01       	movw	r26, r24
    2ab0:	ed 91       	ld	r30, X+
    2ab2:	fc 91       	ld	r31, X
    2ab4:	61 e0       	ldi	r22, 0x01	; 1
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	4e ef       	ldi	r20, 0xFE	; 254
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	00 e0       	ldi	r16, 0x00	; 0
    2abe:	09 95       	icall
}
    2ac0:	0f 91       	pop	r16
    2ac2:	08 95       	ret

00002ac4 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2ac4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	ed 91       	ld	r30, X+
    2aca:	fc 91       	ld	r31, X
    2acc:	61 e0       	ldi	r22, 0x01	; 1
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	4f ef       	ldi	r20, 0xFF	; 255
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	00 e0       	ldi	r16, 0x00	; 0
    2ad6:	09 95       	icall
}
    2ad8:	0f 91       	pop	r16
    2ada:	08 95       	ret

00002adc <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    2adc:	0f 93       	push	r16
   device->send_func(device, 2,
    2ade:	26 2f       	mov	r18, r22
    2ae0:	2f 77       	andi	r18, 0x7F	; 127
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	ed 91       	ld	r30, X+
    2ae6:	fc 91       	ld	r31, X
    2ae8:	62 e0       	ldi	r22, 0x02	; 2
    2aea:	70 e0       	ldi	r23, 0x00	; 0
    2aec:	41 ef       	ldi	r20, 0xF1	; 241
    2aee:	00 e0       	ldi	r16, 0x00	; 0
    2af0:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2af2:	0f 91       	pop	r16
    2af4:	08 95       	ret

00002af6 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2af6:	0f 93       	push	r16
    2af8:	1f 93       	push	r17
   device->send_func(device, 3,
    2afa:	26 2f       	mov	r18, r22
    2afc:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2afe:	8b 01       	movw	r16, r22
    2b00:	00 0f       	add	r16, r16
    2b02:	01 2f       	mov	r16, r17
    2b04:	00 1f       	adc	r16, r16
    2b06:	11 0b       	sbc	r17, r17
    2b08:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2b0a:	0f 77       	andi	r16, 0x7F	; 127
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	ed 91       	ld	r30, X+
    2b10:	fc 91       	ld	r31, X
    2b12:	63 e0       	ldi	r22, 0x03	; 3
    2b14:	70 e0       	ldi	r23, 0x00	; 0
    2b16:	42 ef       	ldi	r20, 0xF2	; 242
    2b18:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	08 95       	ret

00002b20 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2b20:	0f 93       	push	r16
   device->send_func(device, 2,
    2b22:	26 2f       	mov	r18, r22
    2b24:	2f 77       	andi	r18, 0x7F	; 127
    2b26:	dc 01       	movw	r26, r24
    2b28:	ed 91       	ld	r30, X+
    2b2a:	fc 91       	ld	r31, X
    2b2c:	62 e0       	ldi	r22, 0x02	; 2
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	43 ef       	ldi	r20, 0xF3	; 243
    2b32:	00 e0       	ldi	r16, 0x00	; 0
    2b34:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2b36:	0f 91       	pop	r16
    2b38:	08 95       	ret

00002b3a <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2b3a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	ed 91       	ld	r30, X+
    2b40:	fc 91       	ld	r31, X
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	46 ef       	ldi	r20, 0xF6	; 246
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	00 e0       	ldi	r16, 0x00	; 0
    2b4c:	09 95       	icall
}
    2b4e:	0f 91       	pop	r16
    2b50:	08 95       	ret

00002b52 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2b52:	0f 93       	push	r16
    2b54:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2b56:	dc 01       	movw	r26, r24
    2b58:	ed 91       	ld	r30, X+
    2b5a:	fc 91       	ld	r31, X
    2b5c:	61 e0       	ldi	r22, 0x01	; 1
    2b5e:	70 e0       	ldi	r23, 0x00	; 0
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	00 e0       	ldi	r16, 0x00	; 0
    2b64:	09 95       	icall
}
    2b66:	0f 91       	pop	r16
    2b68:	08 95       	ret

00002b6a <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    2b6a:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	ed 91       	ld	r30, X+
    2b70:	fc 91       	ld	r31, X
    2b72:	09 95       	icall
}
    2b74:	0f 91       	pop	r16
    2b76:	08 95       	ret

00002b78 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2b78:	6f 92       	push	r6
    2b7a:	7f 92       	push	r7
    2b7c:	8f 92       	push	r8
    2b7e:	9f 92       	push	r9
    2b80:	af 92       	push	r10
    2b82:	bf 92       	push	r11
    2b84:	cf 92       	push	r12
    2b86:	df 92       	push	r13
    2b88:	ef 92       	push	r14
    2b8a:	ff 92       	push	r15
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
    2b90:	cf 93       	push	r28
    2b92:	df 93       	push	r29
    2b94:	00 d0       	rcall	.+0      	; 0x2b96 <midi_send_array+0x1e>
    2b96:	0f 92       	push	r0
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
    2b9c:	4c 01       	movw	r8, r24
    2b9e:	6b 01       	movw	r12, r22
    2ba0:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2ba2:	61 15       	cp	r22, r1
    2ba4:	71 05       	cpc	r23, r1
    2ba6:	41 f1       	breq	.+80     	; 0x2bf8 <midi_send_array+0x80>
    2ba8:	ee 24       	eor	r14, r14
    2baa:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2bac:	0f 2e       	mov	r0, r31
    2bae:	f3 e0       	ldi	r31, 0x03	; 3
    2bb0:	6f 2e       	mov	r6, r31
    2bb2:	77 24       	eor	r7, r7
    2bb4:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2bb6:	19 82       	std	Y+1, r1	; 0x01
    2bb8:	1a 82       	std	Y+2, r1	; 0x02
    2bba:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2bbc:	86 01       	movw	r16, r12
    2bbe:	0e 19       	sub	r16, r14
    2bc0:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2bc2:	04 30       	cpi	r16, 0x04	; 4
    2bc4:	11 05       	cpc	r17, r1
    2bc6:	08 f0       	brcs	.+2      	; 0x2bca <midi_send_array+0x52>
    2bc8:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2bca:	b5 01       	movw	r22, r10
    2bcc:	6e 0d       	add	r22, r14
    2bce:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	01 96       	adiw	r24, 0x01	; 1
    2bd4:	40 2f       	mov	r20, r16
    2bd6:	51 2f       	mov	r21, r17
    2bd8:	0e 94 c5 1a 	call	0x358a	; 0x358a <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2bdc:	c4 01       	movw	r24, r8
    2bde:	b8 01       	movw	r22, r16
    2be0:	49 81       	ldd	r20, Y+1	; 0x01
    2be2:	2a 81       	ldd	r18, Y+2	; 0x02
    2be4:	0b 81       	ldd	r16, Y+3	; 0x03
    2be6:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2bea:	83 e0       	ldi	r24, 0x03	; 3
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	e8 0e       	add	r14, r24
    2bf0:	f9 1e       	adc	r15, r25
    2bf2:	ec 14       	cp	r14, r12
    2bf4:	fd 04       	cpc	r15, r13
    2bf6:	f8 f2       	brcs	.-66     	; 0x2bb6 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	1f 91       	pop	r17
    2c04:	0f 91       	pop	r16
    2c06:	ff 90       	pop	r15
    2c08:	ef 90       	pop	r14
    2c0a:	df 90       	pop	r13
    2c0c:	cf 90       	pop	r12
    2c0e:	bf 90       	pop	r11
    2c10:	af 90       	pop	r10
    2c12:	9f 90       	pop	r9
    2c14:	8f 90       	pop	r8
    2c16:	7f 90       	pop	r7
    2c18:	6f 90       	pop	r6
    2c1a:	08 95       	ret

00002c1c <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	73 83       	std	Z+3, r23	; 0x03
    2c20:	62 83       	std	Z+2, r22	; 0x02
}
    2c22:	08 95       	ret

00002c24 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2c24:	fc 01       	movw	r30, r24
    2c26:	75 83       	std	Z+5, r23	; 0x05
    2c28:	64 83       	std	Z+4, r22	; 0x04
}
    2c2a:	08 95       	ret

00002c2c <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	77 83       	std	Z+7, r23	; 0x07
    2c30:	66 83       	std	Z+6, r22	; 0x06
}
    2c32:	08 95       	ret

00002c34 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2c34:	fc 01       	movw	r30, r24
    2c36:	71 87       	std	Z+9, r23	; 0x09
    2c38:	60 87       	std	Z+8, r22	; 0x08
}
    2c3a:	08 95       	ret

00002c3c <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	73 87       	std	Z+11, r23	; 0x0b
    2c40:	62 87       	std	Z+10, r22	; 0x0a
}
    2c42:	08 95       	ret

00002c44 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2c44:	fc 01       	movw	r30, r24
    2c46:	75 87       	std	Z+13, r23	; 0x0d
    2c48:	64 87       	std	Z+12, r22	; 0x0c
}
    2c4a:	08 95       	ret

00002c4c <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	77 87       	std	Z+15, r23	; 0x0f
    2c50:	66 87       	std	Z+14, r22	; 0x0e
}
    2c52:	08 95       	ret

00002c54 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2c54:	fc 01       	movw	r30, r24
    2c56:	71 8b       	std	Z+17, r23	; 0x11
    2c58:	60 8b       	std	Z+16, r22	; 0x10
}
    2c5a:	08 95       	ret

00002c5c <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	73 8b       	std	Z+19, r23	; 0x13
    2c60:	62 8b       	std	Z+18, r22	; 0x12
}
    2c62:	08 95       	ret

00002c64 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    2c64:	fc 01       	movw	r30, r24
    2c66:	75 8b       	std	Z+21, r23	; 0x15
    2c68:	64 8b       	std	Z+20, r22	; 0x14
}
    2c6a:	08 95       	ret

00002c6c <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	77 8b       	std	Z+23, r23	; 0x17
    2c70:	66 8b       	std	Z+22, r22	; 0x16
}
    2c72:	08 95       	ret

00002c74 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2c74:	fc 01       	movw	r30, r24
    2c76:	71 8f       	std	Z+25, r23	; 0x19
    2c78:	60 8f       	std	Z+24, r22	; 0x18
}
    2c7a:	08 95       	ret

00002c7c <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	73 8f       	std	Z+27, r23	; 0x1b
    2c80:	62 8f       	std	Z+26, r22	; 0x1a
}
    2c82:	08 95       	ret

00002c84 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2c84:	fc 01       	movw	r30, r24
    2c86:	75 8f       	std	Z+29, r23	; 0x1d
    2c88:	64 8f       	std	Z+28, r22	; 0x1c
}
    2c8a:	08 95       	ret

00002c8c <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	77 8f       	std	Z+31, r23	; 0x1f
    2c90:	66 8f       	std	Z+30, r22	; 0x1e
}
    2c92:	08 95       	ret

00002c94 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    2c9a:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    2c9c:	1f a2       	lds	r17, 0x9f
    2c9e:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	68 5d       	subi	r22, 0xD8	; 216
    2ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca6:	88 51       	subi	r24, 0x18	; 24
    2ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    2caa:	40 ec       	ldi	r20, 0xC0	; 192
    2cac:	0e 94 c4 13 	call	0x2788	; 0x2788 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2cb0:	1b 82       	std	Y+3, r1	; 0x03
    2cb2:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2cb4:	1d 82       	std	Y+5, r1	; 0x05
    2cb6:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2cb8:	1f 82       	std	Y+7, r1	; 0x07
    2cba:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    2cbc:	19 86       	std	Y+9, r1	; 0x09
    2cbe:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2cc0:	1b 86       	std	Y+11, r1	; 0x0b
    2cc2:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2cc4:	1d 86       	std	Y+13, r1	; 0x0d
    2cc6:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2cc8:	1f 86       	std	Y+15, r1	; 0x0f
    2cca:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    2ccc:	19 8a       	std	Y+17, r1	; 0x11
    2cce:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2cd0:	1b 8a       	std	Y+19, r1	; 0x13
    2cd2:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2cd4:	1d 8a       	std	Y+21, r1	; 0x15
    2cd6:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2cd8:	1f 8a       	std	Y+23, r1	; 0x17
    2cda:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    2cdc:	19 8e       	std	Y+25, r1	; 0x19
    2cde:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2ce0:	1b 8e       	std	Y+27, r1	; 0x1b
    2ce2:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2ce4:	1d 8e       	std	Y+29, r1	; 0x1d
    2ce6:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2ce8:	1f 8e       	std	Y+31, r1	; 0x1f
    2cea:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    2cec:	19 a2       	lds	r17, 0x99
    2cee:	18 a2       	lds	r17, 0x98
}
    2cf0:	df 91       	pop	r29
    2cf2:	cf 91       	pop	r28
    2cf4:	08 95       	ret

00002cf6 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2cf6:	ef 92       	push	r14
    2cf8:	ff 92       	push	r15
    2cfa:	0f 93       	push	r16
    2cfc:	1f 93       	push	r17
    2cfe:	cf 93       	push	r28
    2d00:	df 93       	push	r29
    2d02:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2d04:	66 23       	and	r22, r22
    2d06:	99 f0       	breq	.+38     	; 0x2d2e <midi_device_input+0x38>
    2d08:	04 2f       	mov	r16, r20
    2d0a:	15 2f       	mov	r17, r21
    2d0c:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    2d0e:	0f 2e       	mov	r0, r31
    2d10:	f8 ee       	ldi	r31, 0xE8	; 232
    2d12:	ef 2e       	mov	r14, r31
    2d14:	ff 24       	eor	r15, r15
    2d16:	f0 2d       	mov	r31, r0
    2d18:	e8 0e       	add	r14, r24
    2d1a:	f9 1e       	adc	r15, r25
    2d1c:	f8 01       	movw	r30, r16
    2d1e:	61 91       	ld	r22, Z+
    2d20:	8f 01       	movw	r16, r30
    2d22:	c7 01       	movw	r24, r14
    2d24:	0e 94 cb 13 	call	0x2796	; 0x2796 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2d28:	cf 5f       	subi	r28, 0xFF	; 255
    2d2a:	cd 17       	cp	r28, r29
    2d2c:	b9 f7       	brne	.-18     	; 0x2d1c <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	1f 91       	pop	r17
    2d34:	0f 91       	pop	r16
    2d36:	ff 90       	pop	r15
    2d38:	ef 90       	pop	r14
    2d3a:	08 95       	ret

00002d3c <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	71 83       	std	Z+1, r23	; 0x01
    2d40:	60 83       	st	Z, r22
}
    2d42:	08 95       	ret

00002d44 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    2d44:	fc 01       	movw	r30, r24
    2d46:	71 a3       	lds	r23, 0x51
    2d48:	60 a3       	lds	r22, 0x50
}
    2d4a:	08 95       	ret

00002d4c <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    2d4c:	af 92       	push	r10
    2d4e:	bf 92       	push	r11
    2d50:	cf 92       	push	r12
    2d52:	df 92       	push	r13
    2d54:	ef 92       	push	r14
    2d56:	ff 92       	push	r15
    2d58:	0f 93       	push	r16
    2d5a:	1f 93       	push	r17
    2d5c:	cf 93       	push	r28
    2d5e:	df 93       	push	r29
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <midi_input_callbacks+0x16>
    2d62:	0f 92       	push	r0
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	6c 01       	movw	r12, r24
    2d6a:	5b 01       	movw	r10, r22
    2d6c:	f4 2e       	mov	r15, r20
    2d6e:	e2 2e       	mov	r14, r18
    2d70:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2d72:	dc 01       	movw	r26, r24
    2d74:	95 96       	adiw	r26, 0x25	; 37
    2d76:	8c 91       	ld	r24, X
    2d78:	95 97       	sbiw	r26, 0x25	; 37
    2d7a:	84 30       	cpi	r24, 0x04	; 4
    2d7c:	e9 f4       	brne	.+58     	; 0x2db8 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    2d7e:	5a 96       	adiw	r26, 0x1a	; 26
    2d80:	ed 91       	ld	r30, X+
    2d82:	fc 91       	ld	r31, X
    2d84:	5b 97       	sbiw	r26, 0x1b	; 27
    2d86:	30 97       	sbiw	r30, 0x00	; 0
    2d88:	09 f4       	brne	.+2      	; 0x2d8c <midi_input_callbacks+0x40>
    2d8a:	ee c0       	rjmp	.+476    	; 0x2f68 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	63 e0       	ldi	r22, 0x03	; 3
    2d92:	70 e0       	ldi	r23, 0x00	; 0
    2d94:	0e 94 9e 1a 	call	0x353c	; 0x353c <__udivmodhi4>
    2d98:	cb 01       	movw	r24, r22
    2d9a:	88 0f       	add	r24, r24
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	68 0f       	add	r22, r24
    2da0:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2da2:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2da4:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    2da6:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2da8:	4a 2d       	mov	r20, r10
    2daa:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    2dac:	c6 01       	movw	r24, r12
    2dae:	9e 01       	movw	r18, r28
    2db0:	2f 5f       	subi	r18, 0xFF	; 255
    2db2:	3f 4f       	sbci	r19, 0xFF	; 255
    2db4:	09 95       	icall
    2db6:	c8 c0       	rjmp	.+400    	; 0x2f48 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    2db8:	62 30       	cpi	r22, 0x02	; 2
    2dba:	71 05       	cpc	r23, r1
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <midi_input_callbacks+0x74>
    2dbe:	5f c0       	rjmp	.+190    	; 0x2e7e <midi_input_callbacks+0x132>
    2dc0:	63 30       	cpi	r22, 0x03	; 3
    2dc2:	71 05       	cpc	r23, r1
    2dc4:	29 f0       	breq	.+10     	; 0x2dd0 <midi_input_callbacks+0x84>
    2dc6:	61 30       	cpi	r22, 0x01	; 1
    2dc8:	71 05       	cpc	r23, r1
    2dca:	09 f0       	breq	.+2      	; 0x2dce <midi_input_callbacks+0x82>
    2dcc:	b3 c0       	rjmp	.+358    	; 0x2f34 <midi_input_callbacks+0x1e8>
    2dce:	99 c0       	rjmp	.+306    	; 0x2f02 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2dd0:	84 2f       	mov	r24, r20
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	80 7f       	andi	r24, 0xF0	; 240
    2dd6:	90 70       	andi	r25, 0x00	; 0
    2dd8:	80 3a       	cpi	r24, 0xA0	; 160
    2dda:	91 05       	cpc	r25, r1
    2ddc:	29 f1       	breq	.+74     	; 0x2e28 <midi_input_callbacks+0xdc>
    2dde:	81 3a       	cpi	r24, 0xA1	; 161
    2de0:	91 05       	cpc	r25, r1
    2de2:	3c f4       	brge	.+14     	; 0x2df2 <midi_input_callbacks+0xa6>
    2de4:	80 38       	cpi	r24, 0x80	; 128
    2de6:	91 05       	cpc	r25, r1
    2de8:	c9 f0       	breq	.+50     	; 0x2e1c <midi_input_callbacks+0xd0>
    2dea:	80 39       	cpi	r24, 0x90	; 144
    2dec:	91 05       	cpc	r25, r1
    2dee:	91 f5       	brne	.+100    	; 0x2e54 <midi_input_callbacks+0x108>
    2df0:	0f c0       	rjmp	.+30     	; 0x2e10 <midi_input_callbacks+0xc4>
    2df2:	80 3e       	cpi	r24, 0xE0	; 224
    2df4:	91 05       	cpc	r25, r1
    2df6:	f1 f0       	breq	.+60     	; 0x2e34 <midi_input_callbacks+0xe8>
    2df8:	80 3f       	cpi	r24, 0xF0	; 240
    2dfa:	91 05       	cpc	r25, r1
    2dfc:	09 f1       	breq	.+66     	; 0x2e40 <midi_input_callbacks+0xf4>
    2dfe:	80 3b       	cpi	r24, 0xB0	; 176
    2e00:	91 05       	cpc	r25, r1
    2e02:	41 f5       	brne	.+80     	; 0x2e54 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2e04:	d6 01       	movw	r26, r12
    2e06:	12 96       	adiw	r26, 0x02	; 2
    2e08:	ed 91       	ld	r30, X+
    2e0a:	fc 91       	ld	r31, X
    2e0c:	13 97       	sbiw	r26, 0x03	; 3
              break;
    2e0e:	24 c0       	rjmp	.+72     	; 0x2e58 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    2e10:	d6 01       	movw	r26, r12
    2e12:	14 96       	adiw	r26, 0x04	; 4
    2e14:	ed 91       	ld	r30, X+
    2e16:	fc 91       	ld	r31, X
    2e18:	15 97       	sbiw	r26, 0x05	; 5
              break;
    2e1a:	1e c0       	rjmp	.+60     	; 0x2e58 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    2e1c:	d6 01       	movw	r26, r12
    2e1e:	16 96       	adiw	r26, 0x06	; 6
    2e20:	ed 91       	ld	r30, X+
    2e22:	fc 91       	ld	r31, X
    2e24:	17 97       	sbiw	r26, 0x07	; 7
              break;
    2e26:	18 c0       	rjmp	.+48     	; 0x2e58 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    2e28:	d6 01       	movw	r26, r12
    2e2a:	18 96       	adiw	r26, 0x08	; 8
    2e2c:	ed 91       	ld	r30, X+
    2e2e:	fc 91       	ld	r31, X
    2e30:	19 97       	sbiw	r26, 0x09	; 9
              break;
    2e32:	12 c0       	rjmp	.+36     	; 0x2e58 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    2e34:	d6 01       	movw	r26, r12
    2e36:	1a 96       	adiw	r26, 0x0a	; 10
    2e38:	ed 91       	ld	r30, X+
    2e3a:	fc 91       	ld	r31, X
    2e3c:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    2e3e:	0c c0       	rjmp	.+24     	; 0x2e58 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    2e40:	b2 ef       	ldi	r27, 0xF2	; 242
    2e42:	4b 17       	cp	r20, r27
    2e44:	09 f0       	breq	.+2      	; 0x2e48 <midi_input_callbacks+0xfc>
    2e46:	90 c0       	rjmp	.+288    	; 0x2f68 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    2e48:	d6 01       	movw	r26, r12
    2e4a:	1c 96       	adiw	r26, 0x0c	; 12
    2e4c:	ed 91       	ld	r30, X+
    2e4e:	fc 91       	ld	r31, X
    2e50:	1d 97       	sbiw	r26, 0x0d	; 13
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    2e54:	e0 e0       	ldi	r30, 0x00	; 0
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    2e58:	30 97       	sbiw	r30, 0x00	; 0
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <midi_input_callbacks+0x112>
    2e5c:	85 c0       	rjmp	.+266    	; 0x2f68 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    2e5e:	b2 ef       	ldi	r27, 0xF2	; 242
    2e60:	fb 16       	cp	r15, r27
    2e62:	31 f4       	brne	.+12     	; 0x2e70 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    2e64:	c6 01       	movw	r24, r12
    2e66:	62 ef       	ldi	r22, 0xF2	; 242
    2e68:	4e 2d       	mov	r20, r14
    2e6a:	21 2f       	mov	r18, r17
    2e6c:	09 95       	icall
    2e6e:	6c c0       	rjmp	.+216    	; 0x2f48 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    2e70:	6f 2d       	mov	r22, r15
    2e72:	6f 70       	andi	r22, 0x0F	; 15
    2e74:	c6 01       	movw	r24, r12
    2e76:	4e 2d       	mov	r20, r14
    2e78:	21 2f       	mov	r18, r17
    2e7a:	09 95       	icall
    2e7c:	65 c0       	rjmp	.+202    	; 0x2f48 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2e7e:	84 2f       	mov	r24, r20
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	80 7f       	andi	r24, 0xF0	; 240
    2e84:	90 70       	andi	r25, 0x00	; 0
    2e86:	80 3d       	cpi	r24, 0xD0	; 208
    2e88:	91 05       	cpc	r25, r1
    2e8a:	61 f0       	breq	.+24     	; 0x2ea4 <midi_input_callbacks+0x158>
    2e8c:	80 3f       	cpi	r24, 0xF0	; 240
    2e8e:	91 05       	cpc	r25, r1
    2e90:	79 f0       	breq	.+30     	; 0x2eb0 <midi_input_callbacks+0x164>
    2e92:	80 3c       	cpi	r24, 0xC0	; 192
    2e94:	91 05       	cpc	r25, r1
    2e96:	f9 f4       	brne	.+62     	; 0x2ed6 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    2e98:	d6 01       	movw	r26, r12
    2e9a:	1e 96       	adiw	r26, 0x0e	; 14
    2e9c:	ed 91       	ld	r30, X+
    2e9e:	fc 91       	ld	r31, X
    2ea0:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2ea2:	1b c0       	rjmp	.+54     	; 0x2eda <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2ea4:	d6 01       	movw	r26, r12
    2ea6:	50 96       	adiw	r26, 0x10	; 16
    2ea8:	ed 91       	ld	r30, X+
    2eaa:	fc 91       	ld	r31, X
    2eac:	51 97       	sbiw	r26, 0x11	; 17
              break;
    2eae:	15 c0       	rjmp	.+42     	; 0x2eda <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2eb0:	b3 ef       	ldi	r27, 0xF3	; 243
    2eb2:	4b 17       	cp	r20, r27
    2eb4:	31 f4       	brne	.+12     	; 0x2ec2 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    2eb6:	d6 01       	movw	r26, r12
    2eb8:	52 96       	adiw	r26, 0x12	; 18
    2eba:	ed 91       	ld	r30, X+
    2ebc:	fc 91       	ld	r31, X
    2ebe:	53 97       	sbiw	r26, 0x13	; 19
    2ec0:	0c c0       	rjmp	.+24     	; 0x2eda <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2ec2:	b1 ef       	ldi	r27, 0xF1	; 241
    2ec4:	4b 17       	cp	r20, r27
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <midi_input_callbacks+0x17e>
    2ec8:	4f c0       	rjmp	.+158    	; 0x2f68 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    2eca:	d6 01       	movw	r26, r12
    2ecc:	54 96       	adiw	r26, 0x14	; 20
    2ece:	ed 91       	ld	r30, X+
    2ed0:	fc 91       	ld	r31, X
    2ed2:	55 97       	sbiw	r26, 0x15	; 21
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    2ed6:	e0 e0       	ldi	r30, 0x00	; 0
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    2eda:	30 97       	sbiw	r30, 0x00	; 0
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <midi_input_callbacks+0x194>
    2ede:	44 c0       	rjmp	.+136    	; 0x2f68 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2ee0:	b3 ef       	ldi	r27, 0xF3	; 243
    2ee2:	fb 16       	cp	r15, r27
    2ee4:	19 f0       	breq	.+6      	; 0x2eec <midi_input_callbacks+0x1a0>
    2ee6:	81 ef       	ldi	r24, 0xF1	; 241
    2ee8:	f8 16       	cp	r15, r24
    2eea:	29 f4       	brne	.+10     	; 0x2ef6 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    2eec:	c6 01       	movw	r24, r12
    2eee:	6f 2d       	mov	r22, r15
    2ef0:	4e 2d       	mov	r20, r14
    2ef2:	09 95       	icall
    2ef4:	29 c0       	rjmp	.+82     	; 0x2f48 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    2ef6:	6f 2d       	mov	r22, r15
    2ef8:	6f 70       	andi	r22, 0x0F	; 15
    2efa:	c6 01       	movw	r24, r12
    2efc:	4e 2d       	mov	r20, r14
    2efe:	09 95       	icall
    2f00:	23 c0       	rjmp	.+70     	; 0x2f48 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2f02:	84 2f       	mov	r24, r20
    2f04:	0e 94 43 14 	call	0x2886	; 0x2886 <midi_is_realtime>
    2f08:	88 23       	and	r24, r24
    2f0a:	31 f0       	breq	.+12     	; 0x2f18 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    2f0c:	d6 01       	movw	r26, r12
    2f0e:	56 96       	adiw	r26, 0x16	; 22
    2f10:	ed 91       	ld	r30, X+
    2f12:	fc 91       	ld	r31, X
    2f14:	57 97       	sbiw	r26, 0x17	; 23
    2f16:	08 c0       	rjmp	.+16     	; 0x2f28 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    2f18:	b6 ef       	ldi	r27, 0xF6	; 246
    2f1a:	fb 16       	cp	r15, r27
    2f1c:	29 f5       	brne	.+74     	; 0x2f68 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    2f1e:	d6 01       	movw	r26, r12
    2f20:	58 96       	adiw	r26, 0x18	; 24
    2f22:	ed 91       	ld	r30, X+
    2f24:	fc 91       	ld	r31, X
    2f26:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    2f28:	30 97       	sbiw	r30, 0x00	; 0
    2f2a:	f1 f0       	breq	.+60     	; 0x2f68 <midi_input_callbacks+0x21c>
            func(device, byte0);
    2f2c:	c6 01       	movw	r24, r12
    2f2e:	6f 2d       	mov	r22, r15
    2f30:	09 95       	icall
    2f32:	0a c0       	rjmp	.+20     	; 0x2f48 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    2f34:	64 30       	cpi	r22, 0x04	; 4
    2f36:	71 05       	cpc	r23, r1
    2f38:	a8 f4       	brcc	.+42     	; 0x2f64 <midi_input_callbacks+0x218>
    2f3a:	16 c0       	rjmp	.+44     	; 0x2f68 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    2f3c:	c6 01       	movw	r24, r12
    2f3e:	b5 01       	movw	r22, r10
    2f40:	4f 2d       	mov	r20, r15
    2f42:	2e 2d       	mov	r18, r14
    2f44:	01 2f       	mov	r16, r17
    2f46:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    2f48:	d6 01       	movw	r26, r12
    2f4a:	5e 96       	adiw	r26, 0x1e	; 30
    2f4c:	ed 91       	ld	r30, X+
    2f4e:	fc 91       	ld	r31, X
    2f50:	5f 97       	sbiw	r26, 0x1f	; 31
    2f52:	30 97       	sbiw	r30, 0x00	; 0
    2f54:	89 f0       	breq	.+34     	; 0x2f78 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    2f56:	c6 01       	movw	r24, r12
    2f58:	b5 01       	movw	r22, r10
    2f5a:	4f 2d       	mov	r20, r15
    2f5c:	2e 2d       	mov	r18, r14
    2f5e:	01 2f       	mov	r16, r17
    2f60:	09 95       	icall
    2f62:	0a c0       	rjmp	.+20     	; 0x2f78 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    2f64:	aa 24       	eor	r10, r10
    2f66:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    2f68:	d6 01       	movw	r26, r12
    2f6a:	5c 96       	adiw	r26, 0x1c	; 28
    2f6c:	ed 91       	ld	r30, X+
    2f6e:	fc 91       	ld	r31, X
    2f70:	5d 97       	sbiw	r26, 0x1d	; 29
    2f72:	30 97       	sbiw	r30, 0x00	; 0
    2f74:	19 f7       	brne	.-58     	; 0x2f3c <midi_input_callbacks+0x1f0>
    2f76:	e8 cf       	rjmp	.-48     	; 0x2f48 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	df 91       	pop	r29
    2f80:	cf 91       	pop	r28
    2f82:	1f 91       	pop	r17
    2f84:	0f 91       	pop	r16
    2f86:	ff 90       	pop	r15
    2f88:	ef 90       	pop	r14
    2f8a:	df 90       	pop	r13
    2f8c:	cf 90       	pop	r12
    2f8e:	bf 90       	pop	r11
    2f90:	af 90       	pop	r10
    2f92:	08 95       	ret

00002f94 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    2f94:	ef 92       	push	r14
    2f96:	ff 92       	push	r15
    2f98:	0f 93       	push	r16
    2f9a:	cf 93       	push	r28
    2f9c:	df 93       	push	r29
    2f9e:	7c 01       	movw	r14, r24
    2fa0:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    2fa2:	86 2f       	mov	r24, r22
    2fa4:	0e 94 43 14 	call	0x2886	; 0x2886 <midi_is_realtime>
    2fa8:	88 23       	and	r24, r24
    2faa:	91 f0       	breq	.+36     	; 0x2fd0 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    2fac:	d7 01       	movw	r26, r14
    2fae:	95 96       	adiw	r26, 0x25	; 37
    2fb0:	dc 91       	ld	r29, X
    2fb2:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	95 96       	adiw	r26, 0x25	; 37
    2fb8:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    2fba:	c7 01       	movw	r24, r14
    2fbc:	61 e0       	ldi	r22, 0x01	; 1
    2fbe:	70 e0       	ldi	r23, 0x00	; 0
    2fc0:	4c 2f       	mov	r20, r28
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	00 e0       	ldi	r16, 0x00	; 0
    2fc6:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <midi_input_callbacks>
    device->input_state = state;
    2fca:	f7 01       	movw	r30, r14
    2fcc:	d5 a3       	lds	r29, 0x55
    2fce:	b7 c0       	rjmp	.+366    	; 0x313e <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    2fd0:	8c 2f       	mov	r24, r28
    2fd2:	0e 94 3f 14 	call	0x287e	; 0x287e <midi_is_statusbyte>
    2fd6:	88 23       	and	r24, r24
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <midi_process_byte+0x48>
    2fda:	73 c0       	rjmp	.+230    	; 0x30c2 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    2fdc:	d7 01       	movw	r26, r14
    2fde:	95 96       	adiw	r26, 0x25	; 37
    2fe0:	8c 91       	ld	r24, X
    2fe2:	95 97       	sbiw	r26, 0x25	; 37
    2fe4:	84 30       	cpi	r24, 0x04	; 4
    2fe6:	49 f0       	breq	.+18     	; 0x2ffa <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    2fe8:	92 96       	adiw	r26, 0x22	; 34
    2fea:	cc 93       	st	X, r28
    2fec:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	97 96       	adiw	r26, 0x27	; 39
    2ff4:	9c 93       	st	X, r25
    2ff6:	8e 93       	st	-X, r24
    2ff8:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    2ffa:	8c 2f       	mov	r24, r28
    2ffc:	0e 94 49 14 	call	0x2892	; 0x2892 <midi_packet_length>
    3000:	81 30       	cpi	r24, 0x01	; 1
    3002:	41 f0       	breq	.+16     	; 0x3014 <midi_process_byte+0x80>
    3004:	81 30       	cpi	r24, 0x01	; 1
    3006:	00 f1       	brcs	.+64     	; 0x3048 <midi_process_byte+0xb4>
    3008:	82 30       	cpi	r24, 0x02	; 2
    300a:	a1 f0       	breq	.+40     	; 0x3034 <midi_process_byte+0xa0>
    300c:	83 30       	cpi	r24, 0x03	; 3
    300e:	09 f0       	breq	.+2      	; 0x3012 <midi_process_byte+0x7e>
    3010:	4f c0       	rjmp	.+158    	; 0x30b0 <midi_process_byte+0x11c>
    3012:	14 c0       	rjmp	.+40     	; 0x303c <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	f7 01       	movw	r30, r14
    3018:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    301a:	c7 01       	movw	r24, r14
    301c:	61 e0       	ldi	r22, 0x01	; 1
    301e:	70 e0       	ldi	r23, 0x00	; 0
    3020:	4c 2f       	mov	r20, r28
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	00 e0       	ldi	r16, 0x00	; 0
    3026:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <midi_input_callbacks>
        device->input_state = IDLE;
    302a:	d7 01       	movw	r26, r14
    302c:	95 96       	adiw	r26, 0x25	; 37
    302e:	1c 92       	st	X, r1
    3030:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3032:	85 c0       	rjmp	.+266    	; 0x313e <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    3034:	82 e0       	ldi	r24, 0x02	; 2
    3036:	f7 01       	movw	r30, r14
    3038:	85 a3       	lds	r24, 0x55
        break;
    303a:	81 c0       	rjmp	.+258    	; 0x313e <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    303c:	83 e0       	ldi	r24, 0x03	; 3
    303e:	d7 01       	movw	r26, r14
    3040:	95 96       	adiw	r26, 0x25	; 37
    3042:	8c 93       	st	X, r24
    3044:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3046:	7b c0       	rjmp	.+246    	; 0x313e <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    3048:	c0 3f       	cpi	r28, 0xF0	; 240
    304a:	19 f0       	breq	.+6      	; 0x3052 <midi_process_byte+0xbe>
    304c:	c7 3f       	cpi	r28, 0xF7	; 247
    304e:	59 f5       	brne	.+86     	; 0x30a6 <midi_process_byte+0x112>
    3050:	0a c0       	rjmp	.+20     	; 0x3066 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    3052:	84 e0       	ldi	r24, 0x04	; 4
    3054:	f7 01       	movw	r30, r14
    3056:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    3058:	80 ef       	ldi	r24, 0xF0	; 240
    305a:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	97 a3       	lds	r25, 0x57
    3062:	86 a3       	lds	r24, 0x56
            break;
    3064:	6c c0       	rjmp	.+216    	; 0x313e <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    3066:	d7 01       	movw	r26, r14
    3068:	96 96       	adiw	r26, 0x26	; 38
    306a:	2d 91       	ld	r18, X+
    306c:	3c 91       	ld	r19, X
    306e:	97 97       	sbiw	r26, 0x27	; 39
    3070:	c9 01       	movw	r24, r18
    3072:	63 e0       	ldi	r22, 0x03	; 3
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	0e 94 9e 1a 	call	0x353c	; 0x353c <__udivmodhi4>
    307a:	f7 01       	movw	r30, r14
    307c:	e8 0f       	add	r30, r24
    307e:	f9 1f       	adc	r31, r25
    3080:	87 ef       	ldi	r24, 0xF7	; 247
    3082:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    3084:	b9 01       	movw	r22, r18
    3086:	6f 5f       	subi	r22, 0xFF	; 255
    3088:	7f 4f       	sbci	r23, 0xFF	; 255
    308a:	f7 01       	movw	r30, r14
    308c:	77 a3       	lds	r23, 0x57
    308e:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3090:	c7 01       	movw	r24, r14
    3092:	42 a1       	lds	r20, 0x42
    3094:	23 a1       	lds	r18, 0x43
    3096:	04 a1       	lds	r16, 0x44
    3098:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    309c:	d7 01       	movw	r26, r14
    309e:	95 96       	adiw	r26, 0x25	; 37
    30a0:	1c 92       	st	X, r1
    30a2:	95 97       	sbiw	r26, 0x25	; 37
            break;
    30a4:	4c c0       	rjmp	.+152    	; 0x313e <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    30a6:	f7 01       	movw	r30, r14
    30a8:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    30aa:	17 a2       	lds	r17, 0x97
    30ac:	16 a2       	lds	r17, 0x96
    30ae:	47 c0       	rjmp	.+142    	; 0x313e <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    30b0:	d7 01       	movw	r26, r14
    30b2:	95 96       	adiw	r26, 0x25	; 37
    30b4:	1c 92       	st	X, r1
    30b6:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    30b8:	97 96       	adiw	r26, 0x27	; 39
    30ba:	1c 92       	st	X, r1
    30bc:	1e 92       	st	-X, r1
    30be:	96 97       	sbiw	r26, 0x26	; 38
        break;
    30c0:	3e c0       	rjmp	.+124    	; 0x313e <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    30c2:	f7 01       	movw	r30, r14
    30c4:	25 a1       	lds	r18, 0x45
    30c6:	22 23       	and	r18, r18
    30c8:	d1 f1       	breq	.+116    	; 0x313e <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    30ca:	06 a0       	lds	r16, 0x86
    30cc:	f7 a1       	lds	r31, 0x47
    30ce:	e0 2d       	mov	r30, r0
    30d0:	cf 01       	movw	r24, r30
    30d2:	63 e0       	ldi	r22, 0x03	; 3
    30d4:	70 e0       	ldi	r23, 0x00	; 0
    30d6:	0e 94 9e 1a 	call	0x353c	; 0x353c <__udivmodhi4>
    30da:	ac 01       	movw	r20, r24
    30dc:	8e 0d       	add	r24, r14
    30de:	9f 1d       	adc	r25, r15
    30e0:	dc 01       	movw	r26, r24
    30e2:	92 96       	adiw	r26, 0x22	; 34
    30e4:	cc 93       	st	X, r28
    30e6:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    30e8:	bf 01       	movw	r22, r30
    30ea:	6f 5f       	subi	r22, 0xFF	; 255
    30ec:	7f 4f       	sbci	r23, 0xFF	; 255
    30ee:	f7 01       	movw	r30, r14
    30f0:	77 a3       	lds	r23, 0x57
    30f2:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    30f4:	41 30       	cpi	r20, 0x01	; 1
    30f6:	51 05       	cpc	r21, r1
    30f8:	91 f0       	breq	.+36     	; 0x311e <midi_process_byte+0x18a>
    30fa:	42 30       	cpi	r20, 0x02	; 2
    30fc:	51 05       	cpc	r21, r1
    30fe:	f9 f4       	brne	.+62     	; 0x313e <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    3100:	c7 01       	movw	r24, r14
    3102:	42 a1       	lds	r20, 0x42
    3104:	23 a1       	lds	r18, 0x43
    3106:	04 a1       	lds	r16, 0x44
    3108:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    310c:	f7 01       	movw	r30, r14
    310e:	85 a1       	lds	r24, 0x45
    3110:	84 30       	cpi	r24, 0x04	; 4
    3112:	a9 f0       	breq	.+42     	; 0x313e <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	97 a3       	lds	r25, 0x57
    311a:	86 a3       	lds	r24, 0x56
    311c:	10 c0       	rjmp	.+32     	; 0x313e <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    311e:	22 30       	cpi	r18, 0x02	; 2
    3120:	71 f4       	brne	.+28     	; 0x313e <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3122:	c7 01       	movw	r24, r14
    3124:	42 a1       	lds	r20, 0x42
    3126:	23 a1       	lds	r18, 0x43
    3128:	00 e0       	ldi	r16, 0x00	; 0
    312a:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    312e:	f7 01       	movw	r30, r14
    3130:	85 a1       	lds	r24, 0x45
    3132:	84 30       	cpi	r24, 0x04	; 4
    3134:	21 f0       	breq	.+8      	; 0x313e <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	97 a3       	lds	r25, 0x57
    313c:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    313e:	df 91       	pop	r29
    3140:	cf 91       	pop	r28
    3142:	0f 91       	pop	r16
    3144:	ff 90       	pop	r15
    3146:	ef 90       	pop	r14
    3148:	08 95       	ret

0000314a <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    314a:	cf 92       	push	r12
    314c:	df 92       	push	r13
    314e:	ef 92       	push	r14
    3150:	ff 92       	push	r15
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29
    315a:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    315c:	dc 01       	movw	r26, r24
    315e:	90 96       	adiw	r26, 0x20	; 32
    3160:	ed 91       	ld	r30, X+
    3162:	fc 91       	ld	r31, X
    3164:	91 97       	sbiw	r26, 0x21	; 33
    3166:	30 97       	sbiw	r30, 0x00	; 0
    3168:	09 f0       	breq	.+2      	; 0x316c <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    316a:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    316c:	0f 2e       	mov	r0, r31
    316e:	f8 ee       	ldi	r31, 0xE8	; 232
    3170:	ef 2e       	mov	r14, r31
    3172:	ff 24       	eor	r15, r15
    3174:	f0 2d       	mov	r31, r0
    3176:	ec 0c       	add	r14, r12
    3178:	fd 1c       	adc	r15, r13
    317a:	c7 01       	movw	r24, r14
    317c:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3180:	c8 2f       	mov	r28, r24
    3182:	d0 e0       	ldi	r29, 0x00	; 0
    3184:	20 97       	sbiw	r28, 0x00	; 0
    3186:	99 f0       	breq	.+38     	; 0x31ae <midi_device_process+0x64>
    3188:	00 e0       	ldi	r16, 0x00	; 0
    318a:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    318c:	c7 01       	movw	r24, r14
    318e:	60 e0       	ldi	r22, 0x00	; 0
    3190:	0e 94 0f 14 	call	0x281e	; 0x281e <bytequeue_get>
    3194:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    3196:	c6 01       	movw	r24, r12
    3198:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    319c:	c7 01       	movw	r24, r14
    319e:	61 e0       	ldi	r22, 0x01	; 1
    31a0:	0e 94 20 14 	call	0x2840	; 0x2840 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    31a4:	0f 5f       	subi	r16, 0xFF	; 255
    31a6:	1f 4f       	sbci	r17, 0xFF	; 255
    31a8:	0c 17       	cp	r16, r28
    31aa:	1d 07       	cpc	r17, r29
    31ac:	78 f3       	brcs	.-34     	; 0x318c <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	1f 91       	pop	r17
    31b4:	0f 91       	pop	r16
    31b6:	ff 90       	pop	r15
    31b8:	ef 90       	pop	r14
    31ba:	df 90       	pop	r13
    31bc:	cf 90       	pop	r12
    31be:	08 95       	ret

000031c0 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    31c0:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    31c2:	67 e0       	ldi	r22, 0x07	; 7
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	0e 94 9e 1a 	call	0x353c	; 0x353c <__udivmodhi4>
    31ca:	48 2f       	mov	r20, r24
   if (remainder)
    31cc:	88 23       	and	r24, r24
    31ce:	81 f0       	breq	.+32     	; 0x31f0 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    31d0:	c9 01       	movw	r24, r18
    31d2:	67 e0       	ldi	r22, 0x07	; 7
    31d4:	70 e0       	ldi	r23, 0x00	; 0
    31d6:	0e 94 9e 1a 	call	0x353c	; 0x353c <__udivmodhi4>
    31da:	cb 01       	movw	r24, r22
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	01 96       	adiw	r24, 0x01	; 1
    31ea:	84 0f       	add	r24, r20
    31ec:	91 1d       	adc	r25, r1
    31ee:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    31f0:	c9 01       	movw	r24, r18
    31f2:	67 e0       	ldi	r22, 0x07	; 7
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	0e 94 9e 1a 	call	0x353c	; 0x353c <__udivmodhi4>
    31fa:	cb 01       	movw	r24, r22
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
}
    3208:	08 95       	ret

0000320a <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    320a:	48 2f       	mov	r20, r24
    320c:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    320e:	a1 f0       	breq	.+40     	; 0x3238 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3210:	9c 01       	movw	r18, r24
    3212:	36 95       	lsr	r19
    3214:	27 95       	ror	r18
    3216:	36 95       	lsr	r19
    3218:	27 95       	ror	r18
    321a:	36 95       	lsr	r19
    321c:	27 95       	ror	r18
    321e:	c9 01       	movw	r24, r18
    3220:	88 0f       	add	r24, r24
    3222:	99 1f       	adc	r25, r25
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	82 1b       	sub	r24, r18
    322e:	93 0b       	sbc	r25, r19
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	84 0f       	add	r24, r20
    3234:	91 1d       	adc	r25, r1
    3236:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    3238:	9c 01       	movw	r18, r24
    323a:	36 95       	lsr	r19
    323c:	27 95       	ror	r18
    323e:	36 95       	lsr	r19
    3240:	27 95       	ror	r18
    3242:	36 95       	lsr	r19
    3244:	27 95       	ror	r18
    3246:	c9 01       	movw	r24, r18
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	88 0f       	add	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	82 1b       	sub	r24, r18
    3256:	93 0b       	sbc	r25, r19
}
    3258:	08 95       	ret

0000325a <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    325a:	2f 92       	push	r2
    325c:	3f 92       	push	r3
    325e:	4f 92       	push	r4
    3260:	5f 92       	push	r5
    3262:	6f 92       	push	r6
    3264:	7f 92       	push	r7
    3266:	8f 92       	push	r8
    3268:	9f 92       	push	r9
    326a:	af 92       	push	r10
    326c:	bf 92       	push	r11
    326e:	cf 92       	push	r12
    3270:	df 92       	push	r13
    3272:	ef 92       	push	r14
    3274:	ff 92       	push	r15
    3276:	0f 93       	push	r16
    3278:	1f 93       	push	r17
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	00 d0       	rcall	.+0      	; 0x3280 <sysex_encode+0x26>
    3280:	00 d0       	rcall	.+0      	; 0x3282 <sysex_encode+0x28>
    3282:	00 d0       	rcall	.+0      	; 0x3284 <sysex_encode+0x2a>
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	1c 01       	movw	r2, r24
    328a:	7a 83       	std	Y+2, r23	; 0x02
    328c:	69 83       	std	Y+1, r22	; 0x01
    328e:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3290:	ca 01       	movw	r24, r20
    3292:	67 e0       	ldi	r22, 0x07	; 7
    3294:	70 e0       	ldi	r23, 0x00	; 0
    3296:	0e 94 9e 1a 	call	0x353c	; 0x353c <__udivmodhi4>
    329a:	2b 01       	movw	r4, r22
    329c:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    329e:	61 15       	cp	r22, r1
    32a0:	71 05       	cpc	r23, r1
    32a2:	b1 f1       	breq	.+108    	; 0x3310 <sysex_encode+0xb6>
    32a4:	81 01       	movw	r16, r2
    32a6:	e9 80       	ldd	r14, Y+1	; 0x01
    32a8:	fa 80       	ldd	r15, Y+2	; 0x02
    32aa:	cc 24       	eor	r12, r12
    32ac:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    32ae:	88 24       	eor	r8, r8
    32b0:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    32b2:	1e 83       	std	Y+6, r17	; 0x06
    32b4:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    32b6:	f8 01       	movw	r30, r16
    32b8:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    32ba:	fc 82       	std	Y+4, r15	; 0x04
    32bc:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    32be:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    32c0:	ab 81       	ldd	r26, Y+3	; 0x03
    32c2:	bc 81       	ldd	r27, Y+4	; 0x04
    32c4:	2d 91       	ld	r18, X+
    32c6:	bc 83       	std	Y+4, r27	; 0x04
    32c8:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    32ca:	4f 5f       	subi	r20, 0xFF	; 255
    32cc:	5f 4f       	sbci	r21, 0xFF	; 255
    32ce:	82 2f       	mov	r24, r18
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	80 78       	andi	r24, 0x80	; 128
    32d4:	90 70       	andi	r25, 0x00	; 0
    32d6:	bc 01       	movw	r22, r24
    32d8:	04 2e       	mov	r0, r20
    32da:	02 c0       	rjmp	.+4      	; 0x32e0 <sysex_encode+0x86>
    32dc:	75 95       	asr	r23
    32de:	67 95       	ror	r22
    32e0:	0a 94       	dec	r0
    32e2:	e2 f7       	brpl	.-8      	; 0x32dc <sysex_encode+0x82>
    32e4:	ad 81       	ldd	r26, Y+5	; 0x05
    32e6:	be 81       	ldd	r27, Y+6	; 0x06
    32e8:	8c 91       	ld	r24, X
    32ea:	86 2b       	or	r24, r22
    32ec:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    32ee:	2f 77       	andi	r18, 0x7F	; 127
    32f0:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    32f2:	47 30       	cpi	r20, 0x07	; 7
    32f4:	51 05       	cpc	r21, r1
    32f6:	21 f7       	brne	.-56     	; 0x32c0 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    32f8:	08 94       	sec
    32fa:	c1 1c       	adc	r12, r1
    32fc:	d1 1c       	adc	r13, r1
    32fe:	08 5f       	subi	r16, 0xF8	; 248
    3300:	1f 4f       	sbci	r17, 0xFF	; 255
    3302:	e7 e0       	ldi	r30, 0x07	; 7
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	ee 0e       	add	r14, r30
    3308:	ff 1e       	adc	r15, r31
    330a:	ca 14       	cp	r12, r10
    330c:	db 04       	cpc	r13, r11
    330e:	89 f6       	brne	.-94     	; 0x32b2 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3310:	c3 01       	movw	r24, r6
    3312:	67 e0       	ldi	r22, 0x07	; 7
    3314:	70 e0       	ldi	r23, 0x00	; 0
    3316:	0e 94 9e 1a 	call	0x353c	; 0x353c <__udivmodhi4>
   if (remainder) {
    331a:	88 23       	and	r24, r24
    331c:	d9 f1       	breq	.+118    	; 0x3394 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    331e:	82 01       	movw	r16, r4
    3320:	00 0f       	add	r16, r16
    3322:	11 1f       	adc	r17, r17
    3324:	00 0f       	add	r16, r16
    3326:	11 1f       	adc	r17, r17
    3328:	00 0f       	add	r16, r16
    332a:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    332c:	78 01       	movw	r14, r16
    332e:	e4 18       	sub	r14, r4
    3330:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3332:	d1 01       	movw	r26, r2
    3334:	a0 0f       	add	r26, r16
    3336:	b1 1f       	adc	r27, r17
    3338:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    333a:	68 2f       	mov	r22, r24
    333c:	70 e0       	ldi	r23, 0x00	; 0
    333e:	61 15       	cp	r22, r1
    3340:	71 05       	cpc	r23, r1
    3342:	19 f1       	breq	.+70     	; 0x338a <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3344:	e9 81       	ldd	r30, Y+1	; 0x01
    3346:	fa 81       	ldd	r31, Y+2	; 0x02
    3348:	ee 0e       	add	r14, r30
    334a:	ff 1e       	adc	r15, r31
    334c:	c8 01       	movw	r24, r16
    334e:	01 96       	adiw	r24, 0x01	; 1
    3350:	28 0e       	add	r2, r24
    3352:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    3358:	f7 01       	movw	r30, r14
    335a:	41 91       	ld	r20, Z+
    335c:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    335e:	2f 5f       	subi	r18, 0xFF	; 255
    3360:	3f 4f       	sbci	r19, 0xFF	; 255
    3362:	84 2f       	mov	r24, r20
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	80 78       	andi	r24, 0x80	; 128
    3368:	90 70       	andi	r25, 0x00	; 0
    336a:	02 2e       	mov	r0, r18
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <sysex_encode+0x118>
    336e:	95 95       	asr	r25
    3370:	87 95       	ror	r24
    3372:	0a 94       	dec	r0
    3374:	e2 f7       	brpl	.-8      	; 0x336e <sysex_encode+0x114>
    3376:	9c 91       	ld	r25, X
    3378:	89 2b       	or	r24, r25
    337a:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    337c:	4f 77       	andi	r20, 0x7F	; 127
    337e:	f1 01       	movw	r30, r2
    3380:	41 93       	st	Z+, r20
    3382:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3384:	26 17       	cp	r18, r22
    3386:	37 07       	cpc	r19, r23
    3388:	38 f3       	brcs	.-50     	; 0x3358 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    338a:	c8 01       	movw	r24, r16
    338c:	01 96       	adiw	r24, 0x01	; 1
    338e:	86 0f       	add	r24, r22
    3390:	97 1f       	adc	r25, r23
    3392:	07 c0       	rjmp	.+14     	; 0x33a2 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    3394:	c2 01       	movw	r24, r4
    3396:	88 0f       	add	r24, r24
    3398:	99 1f       	adc	r25, r25
    339a:	88 0f       	add	r24, r24
    339c:	99 1f       	adc	r25, r25
    339e:	88 0f       	add	r24, r24
    33a0:	99 1f       	adc	r25, r25
   }
}
    33a2:	26 96       	adiw	r28, 0x06	; 6
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	f8 94       	cli
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	0f be       	out	0x3f, r0	; 63
    33ac:	cd bf       	out	0x3d, r28	; 61
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	1f 91       	pop	r17
    33b4:	0f 91       	pop	r16
    33b6:	ff 90       	pop	r15
    33b8:	ef 90       	pop	r14
    33ba:	df 90       	pop	r13
    33bc:	cf 90       	pop	r12
    33be:	bf 90       	pop	r11
    33c0:	af 90       	pop	r10
    33c2:	9f 90       	pop	r9
    33c4:	8f 90       	pop	r8
    33c6:	7f 90       	pop	r7
    33c8:	6f 90       	pop	r6
    33ca:	5f 90       	pop	r5
    33cc:	4f 90       	pop	r4
    33ce:	3f 90       	pop	r3
    33d0:	2f 90       	pop	r2
    33d2:	08 95       	ret

000033d4 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    33d4:	6f 92       	push	r6
    33d6:	7f 92       	push	r7
    33d8:	8f 92       	push	r8
    33da:	9f 92       	push	r9
    33dc:	af 92       	push	r10
    33de:	bf 92       	push	r11
    33e0:	cf 92       	push	r12
    33e2:	df 92       	push	r13
    33e4:	ef 92       	push	r14
    33e6:	ff 92       	push	r15
    33e8:	0f 93       	push	r16
    33ea:	1f 93       	push	r17
    33ec:	cf 93       	push	r28
    33ee:	df 93       	push	r29
    33f0:	3c 01       	movw	r6, r24
    33f2:	4b 01       	movw	r8, r22
    33f4:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    33f6:	42 30       	cpi	r20, 0x02	; 2
    33f8:	51 05       	cpc	r21, r1
    33fa:	08 f4       	brcc	.+2      	; 0x33fe <sysex_decode+0x2a>
    33fc:	6f c0       	rjmp	.+222    	; 0x34dc <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    33fe:	7a 01       	movw	r14, r20
    3400:	f6 94       	lsr	r15
    3402:	e7 94       	ror	r14
    3404:	f6 94       	lsr	r15
    3406:	e7 94       	ror	r14
    3408:	f6 94       	lsr	r15
    340a:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    340c:	e1 14       	cp	r14, r1
    340e:	f1 04       	cpc	r15, r1
    3410:	29 f1       	breq	.+74     	; 0x345c <sysex_decode+0x88>
    3412:	eb 01       	movw	r28, r22
    3414:	b3 01       	movw	r22, r6
    3416:	00 e0       	ldi	r16, 0x00	; 0
    3418:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    341a:	cc 24       	eor	r12, r12
    341c:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    341e:	de 01       	movw	r26, r28
    3420:	11 96       	adiw	r26, 0x01	; 1
    3422:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3424:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3426:	2d 91       	ld	r18, X+
    3428:	2f 77       	andi	r18, 0x7F	; 127
    342a:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    342c:	4f 5f       	subi	r20, 0xFF	; 255
    342e:	5f 4f       	sbci	r21, 0xFF	; 255
    3430:	88 81       	ld	r24, Y
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	04 2e       	mov	r0, r20
    3436:	02 c0       	rjmp	.+4      	; 0x343c <sysex_decode+0x68>
    3438:	88 0f       	add	r24, r24
    343a:	99 1f       	adc	r25, r25
    343c:	0a 94       	dec	r0
    343e:	e2 f7       	brpl	.-8      	; 0x3438 <sysex_decode+0x64>
    3440:	80 78       	andi	r24, 0x80	; 128
    3442:	28 2b       	or	r18, r24
    3444:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3446:	47 30       	cpi	r20, 0x07	; 7
    3448:	51 05       	cpc	r21, r1
    344a:	69 f7       	brne	.-38     	; 0x3426 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    344c:	0f 5f       	subi	r16, 0xFF	; 255
    344e:	1f 4f       	sbci	r17, 0xFF	; 255
    3450:	28 96       	adiw	r28, 0x08	; 8
    3452:	69 5f       	subi	r22, 0xF9	; 249
    3454:	7f 4f       	sbci	r23, 0xFF	; 255
    3456:	0e 15       	cp	r16, r14
    3458:	1f 05       	cpc	r17, r15
    345a:	09 f7       	brne	.-62     	; 0x341e <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    345c:	5a 2d       	mov	r21, r10
    345e:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3460:	99 f1       	breq	.+102    	; 0x34c8 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3462:	e7 01       	movw	r28, r14
    3464:	cc 0f       	add	r28, r28
    3466:	dd 1f       	adc	r29, r29
    3468:	cc 0f       	add	r28, r28
    346a:	dd 1f       	adc	r29, r29
    346c:	cc 0f       	add	r28, r28
    346e:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3470:	8e 01       	movw	r16, r28
    3472:	0e 19       	sub	r16, r14
    3474:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3476:	65 2f       	mov	r22, r21
    3478:	70 e0       	ldi	r23, 0x00	; 0
    347a:	61 50       	subi	r22, 0x01	; 1
    347c:	70 40       	sbci	r23, 0x00	; 0
    347e:	f9 f0       	breq	.+62     	; 0x34be <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3480:	ce 01       	movw	r24, r28
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	d4 01       	movw	r26, r8
    3486:	a8 0f       	add	r26, r24
    3488:	b9 1f       	adc	r27, r25
    348a:	f3 01       	movw	r30, r6
    348c:	e0 0f       	add	r30, r16
    348e:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3494:	c8 0d       	add	r28, r8
    3496:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3498:	4d 91       	ld	r20, X+
    349a:	4f 77       	andi	r20, 0x7F	; 127
    349c:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    349e:	2f 5f       	subi	r18, 0xFF	; 255
    34a0:	3f 4f       	sbci	r19, 0xFF	; 255
    34a2:	88 81       	ld	r24, Y
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	02 2e       	mov	r0, r18
    34a8:	02 c0       	rjmp	.+4      	; 0x34ae <sysex_decode+0xda>
    34aa:	88 0f       	add	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	0a 94       	dec	r0
    34b0:	e2 f7       	brpl	.-8      	; 0x34aa <sysex_decode+0xd6>
    34b2:	80 78       	andi	r24, 0x80	; 128
    34b4:	48 2b       	or	r20, r24
    34b6:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    34b8:	26 17       	cp	r18, r22
    34ba:	37 07       	cpc	r19, r23
    34bc:	68 f3       	brcs	.-38     	; 0x3498 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    34be:	c8 01       	movw	r24, r16
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	85 0f       	add	r24, r21
    34c4:	91 1d       	adc	r25, r1
    34c6:	0c c0       	rjmp	.+24     	; 0x34e0 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    34c8:	c7 01       	movw	r24, r14
    34ca:	88 0f       	add	r24, r24
    34cc:	99 1f       	adc	r25, r25
    34ce:	88 0f       	add	r24, r24
    34d0:	99 1f       	adc	r25, r25
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	8e 19       	sub	r24, r14
    34d8:	9f 09       	sbc	r25, r15
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    34e0:	df 91       	pop	r29
    34e2:	cf 91       	pop	r28
    34e4:	1f 91       	pop	r17
    34e6:	0f 91       	pop	r16
    34e8:	ff 90       	pop	r15
    34ea:	ef 90       	pop	r14
    34ec:	df 90       	pop	r13
    34ee:	cf 90       	pop	r12
    34f0:	bf 90       	pop	r11
    34f2:	af 90       	pop	r10
    34f4:	9f 90       	pop	r9
    34f6:	8f 90       	pop	r8
    34f8:	7f 90       	pop	r7
    34fa:	6f 90       	pop	r6
    34fc:	08 95       	ret

000034fe <__mulsi3>:
    34fe:	62 9f       	mul	r22, r18
    3500:	d0 01       	movw	r26, r0
    3502:	73 9f       	mul	r23, r19
    3504:	f0 01       	movw	r30, r0
    3506:	82 9f       	mul	r24, r18
    3508:	e0 0d       	add	r30, r0
    350a:	f1 1d       	adc	r31, r1
    350c:	64 9f       	mul	r22, r20
    350e:	e0 0d       	add	r30, r0
    3510:	f1 1d       	adc	r31, r1
    3512:	92 9f       	mul	r25, r18
    3514:	f0 0d       	add	r31, r0
    3516:	83 9f       	mul	r24, r19
    3518:	f0 0d       	add	r31, r0
    351a:	74 9f       	mul	r23, r20
    351c:	f0 0d       	add	r31, r0
    351e:	65 9f       	mul	r22, r21
    3520:	f0 0d       	add	r31, r0
    3522:	99 27       	eor	r25, r25
    3524:	72 9f       	mul	r23, r18
    3526:	b0 0d       	add	r27, r0
    3528:	e1 1d       	adc	r30, r1
    352a:	f9 1f       	adc	r31, r25
    352c:	63 9f       	mul	r22, r19
    352e:	b0 0d       	add	r27, r0
    3530:	e1 1d       	adc	r30, r1
    3532:	f9 1f       	adc	r31, r25
    3534:	bd 01       	movw	r22, r26
    3536:	cf 01       	movw	r24, r30
    3538:	11 24       	eor	r1, r1
    353a:	08 95       	ret

0000353c <__udivmodhi4>:
    353c:	aa 1b       	sub	r26, r26
    353e:	bb 1b       	sub	r27, r27
    3540:	51 e1       	ldi	r21, 0x11	; 17
    3542:	07 c0       	rjmp	.+14     	; 0x3552 <__udivmodhi4_ep>

00003544 <__udivmodhi4_loop>:
    3544:	aa 1f       	adc	r26, r26
    3546:	bb 1f       	adc	r27, r27
    3548:	a6 17       	cp	r26, r22
    354a:	b7 07       	cpc	r27, r23
    354c:	10 f0       	brcs	.+4      	; 0x3552 <__udivmodhi4_ep>
    354e:	a6 1b       	sub	r26, r22
    3550:	b7 0b       	sbc	r27, r23

00003552 <__udivmodhi4_ep>:
    3552:	88 1f       	adc	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	5a 95       	dec	r21
    3558:	a9 f7       	brne	.-22     	; 0x3544 <__udivmodhi4_loop>
    355a:	80 95       	com	r24
    355c:	90 95       	com	r25
    355e:	bc 01       	movw	r22, r24
    3560:	cd 01       	movw	r24, r26
    3562:	08 95       	ret

00003564 <__divmodhi4>:
    3564:	97 fb       	bst	r25, 7
    3566:	09 2e       	mov	r0, r25
    3568:	07 26       	eor	r0, r23
    356a:	0a d0       	rcall	.+20     	; 0x3580 <__divmodhi4_neg1>
    356c:	77 fd       	sbrc	r23, 7
    356e:	04 d0       	rcall	.+8      	; 0x3578 <__divmodhi4_neg2>
    3570:	e5 df       	rcall	.-54     	; 0x353c <__udivmodhi4>
    3572:	06 d0       	rcall	.+12     	; 0x3580 <__divmodhi4_neg1>
    3574:	00 20       	and	r0, r0
    3576:	1a f4       	brpl	.+6      	; 0x357e <__divmodhi4_exit>

00003578 <__divmodhi4_neg2>:
    3578:	70 95       	com	r23
    357a:	61 95       	neg	r22
    357c:	7f 4f       	sbci	r23, 0xFF	; 255

0000357e <__divmodhi4_exit>:
    357e:	08 95       	ret

00003580 <__divmodhi4_neg1>:
    3580:	f6 f7       	brtc	.-4      	; 0x357e <__divmodhi4_exit>
    3582:	90 95       	com	r25
    3584:	81 95       	neg	r24
    3586:	9f 4f       	sbci	r25, 0xFF	; 255
    3588:	08 95       	ret

0000358a <memcpy>:
    358a:	fb 01       	movw	r30, r22
    358c:	dc 01       	movw	r26, r24
    358e:	02 c0       	rjmp	.+4      	; 0x3594 <memcpy+0xa>
    3590:	01 90       	ld	r0, Z+
    3592:	0d 92       	st	X+, r0
    3594:	41 50       	subi	r20, 0x01	; 1
    3596:	50 40       	sbci	r21, 0x00	; 0
    3598:	d8 f7       	brcc	.-10     	; 0x3590 <memcpy+0x6>
    359a:	08 95       	ret

0000359c <memmove>:
    359c:	68 17       	cp	r22, r24
    359e:	79 07       	cpc	r23, r25
    35a0:	68 f4       	brcc	.+26     	; 0x35bc <memmove+0x20>
    35a2:	fb 01       	movw	r30, r22
    35a4:	dc 01       	movw	r26, r24
    35a6:	e4 0f       	add	r30, r20
    35a8:	f5 1f       	adc	r31, r21
    35aa:	a4 0f       	add	r26, r20
    35ac:	b5 1f       	adc	r27, r21
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <memmove+0x18>
    35b0:	02 90       	ld	r0, -Z
    35b2:	0e 92       	st	-X, r0
    35b4:	41 50       	subi	r20, 0x01	; 1
    35b6:	50 40       	sbci	r21, 0x00	; 0
    35b8:	d8 f7       	brcc	.-10     	; 0x35b0 <memmove+0x14>
    35ba:	08 95       	ret
    35bc:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <memcpy>

000035c0 <__eerd_block_m6450a>:
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22

000035c4 <__eerd_blraw_m6450a>:
    35c4:	fc 01       	movw	r30, r24
    35c6:	f9 99       	sbic	0x1f, 1	; 31
    35c8:	fe cf       	rjmp	.-4      	; 0x35c6 <__eerd_blraw_m6450a+0x2>
    35ca:	06 c0       	rjmp	.+12     	; 0x35d8 <__eerd_blraw_m6450a+0x14>
    35cc:	f2 bd       	out	0x22, r31	; 34
    35ce:	e1 bd       	out	0x21, r30	; 33
    35d0:	f8 9a       	sbi	0x1f, 0	; 31
    35d2:	31 96       	adiw	r30, 0x01	; 1
    35d4:	00 b4       	in	r0, 0x20	; 32
    35d6:	0d 92       	st	X+, r0
    35d8:	41 50       	subi	r20, 0x01	; 1
    35da:	50 40       	sbci	r21, 0x00	; 0
    35dc:	b8 f7       	brcc	.-18     	; 0x35cc <__eerd_blraw_m6450a+0x8>
    35de:	08 95       	ret

000035e0 <__eerd_word_m6450a>:
    35e0:	a8 e1       	ldi	r26, 0x18	; 24
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	42 e0       	ldi	r20, 0x02	; 2
    35e6:	50 e0       	ldi	r21, 0x00	; 0
    35e8:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__eerd_blraw_m6450a>

000035ec <__eeupd_block_m6450a>:
    35ec:	dc 01       	movw	r26, r24
    35ee:	a4 0f       	add	r26, r20
    35f0:	b5 1f       	adc	r27, r21
    35f2:	41 50       	subi	r20, 0x01	; 1
    35f4:	50 40       	sbci	r21, 0x00	; 0
    35f6:	48 f0       	brcs	.+18     	; 0x360a <__eeupd_block_m6450a+0x1e>
    35f8:	cb 01       	movw	r24, r22
    35fa:	84 0f       	add	r24, r20
    35fc:	95 1f       	adc	r25, r21
    35fe:	2e 91       	ld	r18, -X
    3600:	0e 94 07 1b 	call	0x360e	; 0x360e <__eeupd_r18_m6450a>
    3604:	41 50       	subi	r20, 0x01	; 1
    3606:	50 40       	sbci	r21, 0x00	; 0
    3608:	d0 f7       	brcc	.-12     	; 0x35fe <__eeupd_block_m6450a+0x12>
    360a:	08 95       	ret

0000360c <__eeupd_byte_m6450a>:
    360c:	26 2f       	mov	r18, r22

0000360e <__eeupd_r18_m6450a>:
    360e:	f9 99       	sbic	0x1f, 1	; 31
    3610:	fe cf       	rjmp	.-4      	; 0x360e <__eeupd_r18_m6450a>
    3612:	92 bd       	out	0x22, r25	; 34
    3614:	81 bd       	out	0x21, r24	; 33
    3616:	f8 9a       	sbi	0x1f, 0	; 31
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	00 b4       	in	r0, 0x20	; 32
    361c:	02 16       	cp	r0, r18
    361e:	31 f0       	breq	.+12     	; 0x362c <__eeupd_r18_m6450a+0x1e>
    3620:	20 bd       	out	0x20, r18	; 32
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	fa 9a       	sbi	0x1f, 2	; 31
    3628:	f9 9a       	sbi	0x1f, 1	; 31
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	08 95       	ret

0000362e <__eeupd_word_m6450a>:
    362e:	01 96       	adiw	r24, 0x01	; 1
    3630:	27 2f       	mov	r18, r23
    3632:	0e 94 07 1b 	call	0x360e	; 0x360e <__eeupd_r18_m6450a>
    3636:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__eeupd_byte_m6450a>

0000363a <_exit>:
    363a:	f8 94       	cli

0000363c <__stop_program>:
    363c:	ff cf       	rjmp	.-2      	; 0x363c <__stop_program>
