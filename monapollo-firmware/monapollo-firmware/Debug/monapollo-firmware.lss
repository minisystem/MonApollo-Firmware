
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000138  00800100  000029be  00002a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029be  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ba  00800238  00800238  00002baa  2**0
                  ALLOC
  3 .eeprom       00000068  00810000  00810000  00002baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00002c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00003b48  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000478a  00000000  00000000  00003e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001347  00000000  00000000  00008592  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001cbc  00000000  00000000  000098d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bb8  00000000  00000000  0000b598  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001472  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002c61  00000000  00000000  0000d5c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  00010223  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_9>
      28:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ee eb       	ldi	r30, 0xBE	; 190
      78:	f9 e2       	ldi	r31, 0x29	; 41
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a8 33       	cpi	r26, 0x38	; 56
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	13 e0       	ldi	r17, 0x03	; 3
      88:	a8 e3       	ldi	r26, 0x38	; 56
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a2 3f       	cpi	r26, 0xF2	; 242
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
      9a:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexor channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     120:	80 91 38 02 	lds	r24, 0x0238
     124:	08 95       	ret

00000126 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	18 2f       	mov	r17, r24
     130:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	ec 01       	movw	r28, r24
     138:	22 97       	sbiw	r28, 0x02	; 2
     13a:	be 01       	movw	r22, r28
     13c:	4e e0       	ldi	r20, 0x0E	; 14
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	0e 94 8e 14 	call	0x291c	; 0x291c <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     144:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     146:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     148:	10 93 38 02 	sts	0x0238, r17
	
} 
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	08 95       	ret

00000156 <remove_note>:
void remove_note(uint8_t note){
     156:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     158:	c0 91 00 01 	lds	r28, 0x0100
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     15c:	c8 17       	cp	r28, r24
     15e:	41 f0       	breq	.+16     	; 0x170 <remove_note+0x1a>
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     168:	90 81       	ld	r25, Z
     16a:	98 17       	cp	r25, r24
     16c:	59 f4       	brne	.+22     	; 0x184 <remove_note+0x2e>
     16e:	02 c0       	rjmp	.+4      	; 0x174 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     174:	fa 01       	movw	r30, r20
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	e0 50       	subi	r30, 0x00	; 0
     17c:	ff 4f       	sbci	r31, 0xFF	; 255
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	80 83       	st	Z, r24
			free_slot = i;
			break;
     182:	07 c0       	rjmp	.+14     	; 0x192 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     184:	4f 5f       	subi	r20, 0xFF	; 255
     186:	5f 4f       	sbci	r21, 0xFF	; 255
     188:	32 96       	adiw	r30, 0x02	; 2
     18a:	48 30       	cpi	r20, 0x08	; 8
     18c:	51 05       	cpc	r21, r1
     18e:	61 f7       	brne	.-40     	; 0x168 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     190:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	ca 01       	movw	r24, r20
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	bc 01       	movw	r22, r24
     19c:	6e 5f       	subi	r22, 0xFE	; 254
     19e:	7e 4f       	sbci	r23, 0xFE	; 254
     1a0:	40 95       	com	r20
     1a2:	50 95       	com	r21
     1a4:	48 5f       	subi	r20, 0xF8	; 248
     1a6:	5f 4f       	sbci	r21, 0xFF	; 255
     1a8:	44 0f       	add	r20, r20
     1aa:	55 1f       	adc	r21, r21
     1ac:	80 50       	subi	r24, 0x00	; 0
     1ae:	9f 4f       	sbci	r25, 0xFF	; 255
     1b0:	0e 94 8e 14 	call	0x291c	; 0x291c <memmove>
	note_pool[7].note = EMPTY;	
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	80 93 0e 01 	sts	0x010E, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1ba:	80 91 00 01 	lds	r24, 0x0100
     1be:	8f 3f       	cpi	r24, 0xFF	; 255
     1c0:	19 f4       	brne	.+6      	; 0x1c8 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1c2:	c0 93 38 02 	sts	0x0238, r28
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1c8:	80 93 38 02 	sts	0x0238, r24

	}	
	
}
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1d0:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1d2:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1d4:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1d6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1d8:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     1da:	8c 91       	ld	r24, X
     1dc:	82 b9       	out	0x02, r24	; 2
     1de:	8d e0       	ldi	r24, 0x0D	; 13
     1e0:	8a 95       	dec	r24
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <set_control_voltage+0x10>
     1e4:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     1e6:	ea ed       	ldi	r30, 0xDA	; 218
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	40 81       	ld	r20, Z
     1ec:	21 e0       	ldi	r18, 0x01	; 1
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	c9 01       	movw	r24, r18
     1f2:	11 96       	adiw	r26, 0x01	; 1
     1f4:	0c 90       	ld	r0, X
     1f6:	11 97       	sbiw	r26, 0x01	; 1
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_control_voltage+0x2e>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <set_control_voltage+0x2a>
     202:	84 2b       	or	r24, r20
     204:	80 83       	st	Z, r24
     206:	82 e4       	ldi	r24, 0x42	; 66
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x38>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x3e>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     20e:	80 81       	ld	r24, Z
     210:	11 96       	adiw	r26, 0x01	; 1
     212:	0c 90       	ld	r0, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	02 c0       	rjmp	.+4      	; 0x21c <set_control_voltage+0x4c>
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <set_control_voltage+0x48>
     220:	20 95       	com	r18
     222:	28 23       	and	r18, r24
     224:	20 83       	st	Z, r18
	
}	
     226:	08 95       	ret

00000228 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     228:	83 b3       	in	r24, 0x13	; 19
     22a:	83 60       	ori	r24, 0x03	; 3
     22c:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     232:	97 b1       	in	r25, 0x07	; 7
     234:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     236:	e9 ed       	ldi	r30, 0xD9	; 217
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8f 60       	ori	r24, 0x0F	; 15
     23e:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     240:	ea ed       	ldi	r30, 0xDA	; 218
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     24a:	84 b3       	in	r24, 0x14	; 20
     24c:	83 60       	ori	r24, 0x03	; 3
     24e:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     250:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     252:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     254:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     256:	a0 9a       	sbi	0x14, 0	; 20
}
     258:	08 95       	ret

0000025a <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     25a:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     25c:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     25e:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     260:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     262:	62 b9       	out	0x02, r22	; 2
     264:	2d e0       	ldi	r18, 0x0D	; 13
     266:	2a 95       	dec	r18
     268:	f1 f7       	brne	.-4      	; 0x266 <set_dac+0xc>
     26a:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     26c:	ea ed       	ldi	r30, 0xDA	; 218
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	40 81       	ld	r20, Z
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	b9 01       	movw	r22, r18
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_dac+0x24>
     27a:	66 0f       	add	r22, r22
     27c:	77 1f       	adc	r23, r23
     27e:	8a 95       	dec	r24
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_dac+0x20>
     282:	cb 01       	movw	r24, r22
     284:	94 2f       	mov	r25, r20
     286:	98 2b       	or	r25, r24
     288:	90 83       	st	Z, r25
     28a:	72 e4       	ldi	r23, 0x42	; 66
     28c:	7a 95       	dec	r23
     28e:	f1 f7       	brne	.-4      	; 0x28c <set_dac+0x32>
     290:	00 c0       	rjmp	.+0      	; 0x292 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     292:	90 81       	ld	r25, Z
     294:	80 95       	com	r24
     296:	89 23       	and	r24, r25
     298:	80 83       	st	Z, r24
	
}
     29a:	08 95       	ret

0000029c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t place)
{
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	2e 97       	sbiw	r28, 0x0e	; 14
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	ac 01       	movw	r20, r24
	
	uint8_t digit[] = {
     2b6:	88 e0       	ldi	r24, 0x08	; 8
     2b8:	89 83       	std	Y+1, r24	; 0x01
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	8a 83       	std	Y+2, r24	; 0x02
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	8b 83       	std	Y+3, r24	; 0x03
     2c2:	84 e0       	ldi	r24, 0x04	; 4
     2c4:	8c 83       	std	Y+4, r24	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2c6:	de 01       	movw	r26, r28
     2c8:	15 96       	adiw	r26, 0x05	; 5
     2ca:	ee e4       	ldi	r30, 0x4E	; 78
     2cc:	f1 e0       	ldi	r31, 0x01	; 1
     2ce:	8a e0       	ldi	r24, 0x0A	; 10
     2d0:	01 90       	ld	r0, Z+
     2d2:	0d 92       	st	X+, r0
     2d4:	81 50       	subi	r24, 0x01	; 1
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <display_dec+0x34>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2d8:	8f ef       	ldi	r24, 0xFF	; 255
     2da:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2dc:	ea ed       	ldi	r30, 0xDA	; 218
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	80 81       	ld	r24, Z
     2e2:	80 61       	ori	r24, 0x10	; 16
     2e4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2e6:	80 81       	ld	r24, Z
     2e8:	8f 7e       	andi	r24, 0xEF	; 239
     2ea:	80 83       	st	Z, r24
	
	//set anode bit
	DATA_BUS = digit[place];
     2ec:	06 2f       	mov	r16, r22
     2ee:	10 e0       	ldi	r17, 0x00	; 0
     2f0:	de 01       	movw	r26, r28
     2f2:	a0 0f       	add	r26, r16
     2f4:	b1 1f       	adc	r27, r17
     2f6:	11 96       	adiw	r26, 0x01	; 1
     2f8:	8c 91       	ld	r24, X
     2fa:	11 97       	sbiw	r26, 0x01	; 1
     2fc:	82 b9       	out	0x02, r24	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2fe:	80 81       	ld	r24, Z
     300:	80 62       	ori	r24, 0x20	; 32
     302:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     304:	80 81       	ld	r24, Z
     306:	8f 7d       	andi	r24, 0xDF	; 223
     308:	80 83       	st	Z, r24
	//if (number > 999) {
	//number = 999;
	//}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     30a:	ca 01       	movw	r24, r20
     30c:	96 95       	lsr	r25
     30e:	87 95       	ror	r24
     310:	96 95       	lsr	r25
     312:	87 95       	ror	r24
     314:	9a 01       	movw	r18, r20
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	28 0f       	add	r18, r24
     31c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     31e:	c9 01       	movw	r24, r18
     320:	92 95       	swap	r25
     322:	82 95       	swap	r24
     324:	8f 70       	andi	r24, 0x0F	; 15
     326:	89 27       	eor	r24, r25
     328:	9f 70       	andi	r25, 0x0F	; 15
     32a:	89 27       	eor	r24, r25
     32c:	82 0f       	add	r24, r18
     32e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     330:	29 2f       	mov	r18, r25
     332:	33 27       	eor	r19, r19
     334:	82 0f       	add	r24, r18
     336:	93 1f       	adc	r25, r19
	q1 += q1 >> 16;
	q2 = q1 >> 3;
     338:	96 95       	lsr	r25
     33a:	87 95       	ror	r24
     33c:	96 95       	lsr	r25
     33e:	87 95       	ror	r24
     340:	96 95       	lsr	r25
     342:	87 95       	ror	r24
	r = number - q2 * 10;
     344:	28 2f       	mov	r18, r24
     346:	22 0f       	add	r18, r18
     348:	32 2f       	mov	r19, r18
     34a:	33 0f       	add	r19, r19
     34c:	33 0f       	add	r19, r19
     34e:	23 0f       	add	r18, r19
     350:	e4 2f       	mov	r30, r20
     352:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     354:	61 e0       	ldi	r22, 0x01	; 1
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	ea 30       	cpi	r30, 0x0A	; 10
     35a:	10 f4       	brcc	.+4      	; 0x360 <display_dec+0xc4>
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	68 0f       	add	r22, r24
     362:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     364:	9b 01       	movw	r18, r22
     366:	36 95       	lsr	r19
     368:	27 95       	ror	r18
     36a:	36 95       	lsr	r19
     36c:	27 95       	ror	r18
     36e:	ab 01       	movw	r20, r22
     370:	56 95       	lsr	r21
     372:	47 95       	ror	r20
     374:	24 0f       	add	r18, r20
     376:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     378:	c9 01       	movw	r24, r18
     37a:	92 95       	swap	r25
     37c:	82 95       	swap	r24
     37e:	8f 70       	andi	r24, 0x0F	; 15
     380:	89 27       	eor	r24, r25
     382:	9f 70       	andi	r25, 0x0F	; 15
     384:	89 27       	eor	r24, r25
     386:	82 0f       	add	r24, r18
     388:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     38a:	29 2f       	mov	r18, r25
     38c:	33 27       	eor	r19, r19
     38e:	82 0f       	add	r24, r18
     390:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     392:	96 95       	lsr	r25
     394:	87 95       	ror	r24
     396:	96 95       	lsr	r25
     398:	87 95       	ror	r24
     39a:	96 95       	lsr	r25
     39c:	87 95       	ror	r24
	r = qa - q3 * 10;
     39e:	98 2f       	mov	r25, r24
     3a0:	99 0f       	add	r25, r25
     3a2:	29 2f       	mov	r18, r25
     3a4:	22 0f       	add	r18, r18
     3a6:	22 0f       	add	r18, r18
     3a8:	92 0f       	add	r25, r18
     3aa:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	6a 30       	cpi	r22, 0x0A	; 10
     3b0:	08 f4       	brcc	.+2      	; 0x3b4 <display_dec+0x118>
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3b6:	48 e5       	ldi	r20, 0x58	; 88
     3b8:	51 e0       	ldi	r21, 0x01	; 1
     3ba:	da 01       	movw	r26, r20
     3bc:	a6 0f       	add	r26, r22
     3be:	b1 1d       	adc	r27, r1
     3c0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3c2:	28 2f       	mov	r18, r24
     3c4:	26 95       	lsr	r18
     3c6:	26 95       	lsr	r18
     3c8:	98 2f       	mov	r25, r24
     3ca:	96 95       	lsr	r25
     3cc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3ce:	29 2f       	mov	r18, r25
     3d0:	22 95       	swap	r18
     3d2:	2f 70       	andi	r18, 0x0F	; 15
     3d4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3d6:	96 95       	lsr	r25
     3d8:	96 95       	lsr	r25
     3da:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3dc:	29 2f       	mov	r18, r25
     3de:	22 0f       	add	r18, r18
     3e0:	62 2f       	mov	r22, r18
     3e2:	66 0f       	add	r22, r22
     3e4:	66 0f       	add	r22, r22
     3e6:	26 0f       	add	r18, r22
     3e8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3ea:	da 01       	movw	r26, r20
     3ec:	a8 0f       	add	r26, r24
     3ee:	b1 1d       	adc	r27, r1
     3f0:	2c 91       	ld	r18, X
	q1 += q1 >> 16;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3f2:	4e 0f       	add	r20, r30
     3f4:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3f6:	fa 01       	movw	r30, r20
     3f8:	40 81       	ld	r20, Z
     3fa:	40 93 3d 02 	sts	0x023D, r20
	digit_index[1] = tens_place;
     3fe:	30 93 3e 02 	sts	0x023E, r19
	digit_index[2] = hunds_place;
     402:	20 93 3f 02 	sts	0x023F, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     406:	21 e0       	ldi	r18, 0x01	; 1
     408:	8a 30       	cpi	r24, 0x0A	; 10
     40a:	08 f4       	brcc	.+2      	; 0x40e <display_dec+0x172>
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     410:	90 93 40 02 	sts	0x0240, r25

	cathode_byte = dec[digit_index[place]];
     414:	f8 01       	movw	r30, r16
     416:	e3 5c       	subi	r30, 0xC3	; 195
     418:	fd 4f       	sbci	r31, 0xFD	; 253
     41a:	80 81       	ld	r24, Z
     41c:	fe 01       	movw	r30, r28
     41e:	e8 0f       	add	r30, r24
     420:	f1 1d       	adc	r31, r1
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     422:	85 81       	ldd	r24, Z+5	; 0x05
     424:	80 95       	com	r24
     426:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     428:	ea ed       	ldi	r30, 0xDA	; 218
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	80 61       	ori	r24, 0x10	; 16
     430:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     432:	80 81       	ld	r24, Z
     434:	8f 7e       	andi	r24, 0xEF	; 239
     436:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     438:	2e 96       	adiw	r28, 0x0e	; 14
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	08 95       	ret

0000044e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     44e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     450:	66 23       	and	r22, r22
     452:	69 f4       	brne	.+26     	; 0x46e <update_display+0x20>

		
			
		display_dec(number, place);
     454:	c0 91 41 02 	lds	r28, 0x0241
     458:	6c 2f       	mov	r22, r28
     45a:	0e 94 4e 01 	call	0x29c	; 0x29c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     45e:	8c 2f       	mov	r24, r28
     460:	8f 5f       	subi	r24, 0xFF	; 255
     462:	80 93 41 02 	sts	0x0241, r24
     466:	c3 30       	cpi	r28, 0x03	; 3
     468:	11 f4       	brne	.+4      	; 0x46e <update_display+0x20>
		{
			place = 0;
     46a:	10 92 41 02 	sts	0x0241, r1
		
		
	}
	
	
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     472:	1f 92       	push	r1
     474:	0f 92       	push	r0
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	0f 92       	push	r0
     47a:	11 24       	eor	r1, r1
     47c:	8f 93       	push	r24
     47e:	9f 93       	push	r25
     480:	ef 93       	push	r30
     482:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     484:	80 91 ff 02 	lds	r24, 0x02FF
     488:	81 50       	subi	r24, 0x01	; 1
     48a:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     48c:	80 91 00 03 	lds	r24, 0x0300
     490:	88 23       	and	r24, r24
     492:	a1 f4       	brne	.+40     	; 0x4bc <__vector_10+0x4a>
		count_finished = FALSE;
     494:	10 92 fd 02 	sts	0x02FD, r1
		no_overflow = TRUE;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	80 93 37 02 	sts	0x0237, r24
		period_counter = 1; //set period counter to 1
     49e:	80 93 00 03 	sts	0x0300, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     4a2:	e1 e8       	ldi	r30, 0x81	; 129
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	90 91 fe 02 	lds	r25, 0x02FE
     4ac:	89 2b       	or	r24, r25
     4ae:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4b0:	ef e6       	ldi	r30, 0x6F	; 111
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	81 60       	ori	r24, 0x01	; 1
     4b8:	80 83       	st	Z, r24
     4ba:	11 c0       	rjmp	.+34     	; 0x4de <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4bc:	e4 e8       	ldi	r30, 0x84	; 132
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	91 81       	ldd	r25, Z+1	; 0x01
     4c4:	90 93 fc 02 	sts	0x02FC, r25
     4c8:	80 93 fb 02 	sts	0x02FB, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4cc:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 fd 02 	sts	0x02FD, r24
		period_counter = 0;
     4d6:	10 92 00 03 	sts	0x0300, r1
		TCNT1 = 0; //reset timer/counter 1
     4da:	11 82       	std	Z+1, r1	; 0x01
     4dc:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4de:	ff 91       	pop	r31
     4e0:	ef 91       	pop	r30
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	0f 90       	pop	r0
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	0f 90       	pop	r0
     4ec:	1f 90       	pop	r1
     4ee:	18 95       	reti

000004f0 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     4f0:	1f 92       	push	r1
     4f2:	0f 92       	push	r0
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	0f 92       	push	r0
     4f8:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     4fa:	10 92 37 02 	sts	0x0237, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     508:	84 2f       	mov	r24, r20
	remove_note(note);
     50a:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
	gate_buffer--;
     50e:	80 91 43 02 	lds	r24, 0x0243
     512:	81 50       	subi	r24, 0x01	; 1
     514:	80 93 43 02 	sts	0x0243, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     518:	88 23       	and	r24, r24
     51a:	09 f4       	brne	.+2      	; 0x51e <note_off_event+0x16>
     51c:	89 98       	cbi	0x11, 1	; 17
     51e:	08 95       	ret

00000520 <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     520:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     522:	40 93 82 02 	sts	0x0282, r20
	if (velocity == 0) {
     526:	22 23       	and	r18, r18
     528:	59 f4       	brne	.+22     	; 0x540 <note_on_event+0x20>
		remove_note(note);
     52a:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
		gate_buffer--;
     52e:	80 91 43 02 	lds	r24, 0x0243
     532:	81 50       	subi	r24, 0x01	; 1
     534:	80 93 43 02 	sts	0x0243, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     538:	88 23       	and	r24, r24
     53a:	59 f4       	brne	.+22     	; 0x552 <note_on_event+0x32>
     53c:	89 98       	cbi	0x11, 1	; 17
     53e:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     540:	62 2f       	mov	r22, r18
     542:	0e 94 93 00 	call	0x126	; 0x126 <new_note>
		gate_buffer++; //increment gate_buffer
     546:	80 91 43 02 	lds	r24, 0x0243
     54a:	8f 5f       	subi	r24, 0xFF	; 255
     54c:	80 93 43 02 	sts	0x0243, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     550:	89 9a       	sbi	0x11, 1	; 17
     552:	08 95       	ret

00000554 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     554:	87 e2       	ldi	r24, 0x27	; 39
     556:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     55a:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     55e:	88 e9       	ldi	r24, 0x98	; 152
     560:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     564:	08 95       	ret

00000566 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     566:	1f 92       	push	r1
     568:	0f 92       	push	r0
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	0f 92       	push	r0
     56e:	11 24       	eor	r1, r1
     570:	2f 93       	push	r18
     572:	3f 93       	push	r19
     574:	4f 93       	push	r20
     576:	5f 93       	push	r21
     578:	6f 93       	push	r22
     57a:	7f 93       	push	r23
     57c:	8f 93       	push	r24
     57e:	9f 93       	push	r25
     580:	af 93       	push	r26
     582:	bf 93       	push	r27
     584:	ef 93       	push	r30
     586:	ff 93       	push	r31
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	0f 92       	push	r0
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     592:	80 91 c6 00 	lds	r24, 0x00C6
     596:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     598:	85 e0       	ldi	r24, 0x05	; 5
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	ae 01       	movw	r20, r28
     5a0:	4f 5f       	subi	r20, 0xFF	; 255
     5a2:	5f 4f       	sbci	r21, 0xFF	; 255
     5a4:	0e 94 3b 10 	call	0x2076	; 0x2076 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     5a8:	0f 90       	pop	r0
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	ff 91       	pop	r31
     5b0:	ef 91       	pop	r30
     5b2:	bf 91       	pop	r27
     5b4:	af 91       	pop	r26
     5b6:	9f 91       	pop	r25
     5b8:	8f 91       	pop	r24
     5ba:	7f 91       	pop	r23
     5bc:	6f 91       	pop	r22
     5be:	5f 91       	pop	r21
     5c0:	4f 91       	pop	r20
     5c2:	3f 91       	pop	r19
     5c4:	2f 91       	pop	r18
     5c6:	0f 90       	pop	r0
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	0f 90       	pop	r0
     5cc:	1f 90       	pop	r1
     5ce:	18 95       	reti

000005d0 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     5d0:	c0 e8       	ldi	r28, 0x80	; 128
     5d2:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     5d4:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     5d6:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     5d8:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     5da:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     5dc:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     5de:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     5e2:	a9 ed       	ldi	r26, 0xD9	; 217
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	8c 91       	ld	r24, X
     5e8:	80 6c       	ori	r24, 0xC0	; 192
     5ea:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     5ec:	ea ed       	ldi	r30, 0xDA	; 218
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	80 6c       	ori	r24, 0xC0	; 192
     5f4:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     5f6:	81 b1       	in	r24, 0x01	; 1
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     5fc:	92 b1       	in	r25, 0x02	; 2
     5fe:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     600:	8c 91       	ld	r24, X
     602:	80 63       	ori	r24, 0x30	; 48
     604:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     606:	80 81       	ld	r24, Z
     608:	8f 7c       	andi	r24, 0xCF	; 207
     60a:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     60c:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     60e:	ec ed       	ldi	r30, 0xDC	; 220
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	80 62       	ori	r24, 0x20	; 32
     616:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     618:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     61a:	ed ed       	ldi	r30, 0xDD	; 221
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	80 62       	ori	r24, 0x20	; 32
     622:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     624:	80 81       	ld	r24, Z
     626:	8f 7d       	andi	r24, 0xDF	; 223
     628:	80 83       	st	Z, r24
	DATA_BUS = 0;
     62a:	12 b8       	out	0x02, r1	; 2
	patch.byte_2 = (1<<LFO_TRI);
     62c:	c0 93 8c 02 	sts	0x028C, r28
	
	//setup ADC
    setup_adc();		
     630:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     634:	0e 94 14 01 	call	0x228	; 0x228 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     638:	c5 e0       	ldi	r28, 0x05	; 5
     63a:	d3 e0       	ldi	r29, 0x03	; 3
     63c:	ce 01       	movw	r24, r28
     63e:	0e 94 0a 10 	call	0x2014	; 0x2014 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     642:	ce 01       	movw	r24, r28
     644:	60 e9       	ldi	r22, 0x90	; 144
     646:	72 e0       	ldi	r23, 0x02	; 2
     648:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     64c:	ce 01       	movw	r24, r28
     64e:	64 e8       	ldi	r22, 0x84	; 132
     650:	72 e0       	ldi	r23, 0x02	; 2
     652:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     656:	0e 94 aa 02 	call	0x554	; 0x554 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     65a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <update_spi>
	
	
	
		
	sei(); //enable global interrupts
     65e:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     660:	0e 94 8c 0c 	call	0x1918	; 0x1918 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
     664:	81 e4       	ldi	r24, 0x41	; 65
     666:	80 93 01 03 	sts	0x0301, r24
	patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
     66a:	82 e2       	ldi	r24, 0x22	; 34
     66c:	80 93 8e 02 	sts	0x028E, r24
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     670:	8e 01       	movw	r16, r28
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     672:	0f 2e       	mov	r0, r31
     674:	f3 e0       	ldi	r31, 0x03	; 3
     676:	ef 2e       	mov	r14, r31
     678:	f3 e0       	ldi	r31, 0x03	; 3
     67a:	ff 2e       	mov	r15, r31
     67c:	f0 2d       	mov	r31, r0
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     67e:	c8 01       	movw	r24, r16
     680:	0e 94 65 12 	call	0x24ca	; 0x24ca <midi_device_process>
		//value_to_display = vco1_init_cv;
		PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
     684:	2f 9a       	sbi	0x05, 7	; 5
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     686:	80 91 a2 01 	lds	r24, 0x01A2
     68a:	90 91 a3 01 	lds	r25, 0x01A3
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	0e 94 27 02 	call	0x44e	; 0x44e <update_display>
		PORTB &= ~(1<<ARP_SYNC_LED);
     694:	2f 98       	cbi	0x05, 7	; 5
		 	
		scan_pots_and_update_control_voltages();
     696:	0e 94 63 03 	call	0x6c6	; 0x6c6 <scan_pots_and_update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     69a:	80 91 42 02 	lds	r24, 0x0242
     69e:	98 2f       	mov	r25, r24
     6a0:	9f 5f       	subi	r25, 0xFF	; 255
     6a2:	90 93 42 02 	sts	0x0242, r25
     6a6:	85 30       	cpi	r24, 0x05	; 5
     6a8:	51 f7       	brne	.-44     	; 0x67e <main+0xae>
		{
			switch_timer = 0;
     6aa:	10 92 42 02 	sts	0x0242, r1
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     6ae:	f7 01       	movw	r30, r14
     6b0:	c0 81       	ld	r28, Z
     6b2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <read_switch_port>
     6b6:	8c 27       	eor	r24, r28
     6b8:	f7 01       	movw	r30, r14
     6ba:	80 83       	st	Z, r24
			update_spi();
     6bc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <update_spi>
			refresh_synth();
     6c0:	0e 94 26 06 	call	0xc4c	; 0xc4c <refresh_synth>
     6c4:	dc cf       	rjmp	.-72     	; 0x67e <main+0xae>

000006c6 <scan_pots_and_update_control_voltages>:
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     6c6:	2f 92       	push	r2
     6c8:	3f 92       	push	r3
     6ca:	4f 92       	push	r4
     6cc:	5f 92       	push	r5
     6ce:	6f 92       	push	r6
     6d0:	7f 92       	push	r7
     6d2:	8f 92       	push	r8
     6d4:	9f 92       	push	r9
     6d6:	af 92       	push	r10
     6d8:	bf 92       	push	r11
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     6ea:	02 e6       	ldi	r16, 0x62	; 98
     6ec:	12 e0       	ldi	r17, 0x02	; 2
     6ee:	0f 2e       	mov	r0, r31
     6f0:	f2 e8       	ldi	r31, 0x82	; 130
     6f2:	ef 2e       	mov	r14, r31
     6f4:	f1 e0       	ldi	r31, 0x01	; 1
     6f6:	ff 2e       	mov	r15, r31
     6f8:	f0 2d       	mov	r31, r0
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     6fa:	cc 24       	eor	r12, r12
     6fc:	dd 24       	eor	r13, r13
     6fe:	c3 94       	inc	r12
     700:	c0 e0       	ldi	r28, 0x00	; 0
     702:	d0 e0       	ldi	r29, 0x00	; 0
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     704:	0f 2e       	mov	r0, r31
     706:	fa e3       	ldi	r31, 0x3A	; 58
     708:	8f 2e       	mov	r8, r31
     70a:	f1 e0       	ldi	r31, 0x01	; 1
     70c:	9f 2e       	mov	r9, r31
     70e:	f0 2d       	mov	r31, r0
				break;
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     710:	aa 24       	eor	r10, r10
     712:	bb 24       	eor	r11, r11
     714:	68 94       	set
     716:	b1 f8       	bld	r11, 1
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     718:	0f 2e       	mov	r0, r31
     71a:	f8 e3       	ldi	r31, 0x38	; 56
     71c:	6f 2e       	mov	r6, r31
     71e:	f1 e0       	ldi	r31, 0x01	; 1
     720:	7f 2e       	mov	r7, r31
     722:	f0 2d       	mov	r31, r0
				break;
			
			case 11: //handle ARP_RATE pot
				value_to_display = pot_group_0[11];
     724:	0f 2e       	mov	r0, r31
     726:	f8 e7       	ldi	r31, 0x78	; 120
     728:	4f 2e       	mov	r4, r31
     72a:	f2 e0       	ldi	r31, 0x02	; 2
     72c:	5f 2e       	mov	r5, r31
     72e:	f0 2d       	mov	r31, r0
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     730:	0f 2e       	mov	r0, r31
     732:	f2 e4       	ldi	r31, 0x42	; 66
     734:	2f 2e       	mov	r2, r31
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	3f 2e       	mov	r3, r31
     73a:	f0 2d       	mov	r31, r0
     73c:	08 c0       	rjmp	.+16     	; 0x74e <scan_pots_and_update_control_voltages+0x88>
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     73e:	21 96       	adiw	r28, 0x01	; 1
     740:	08 94       	sec
     742:	c1 1c       	adc	r12, r1
     744:	d1 1c       	adc	r13, r1
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	e8 0e       	add	r14, r24
     74c:	f9 1e       	adc	r15, r25

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{

		adc_value = read_pot(POTMUX_EN0, i);
     74e:	86 e0       	ldi	r24, 0x06	; 6
     750:	6c 2f       	mov	r22, r28
     752:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     756:	90 93 86 02 	sts	0x0286, r25
     75a:	80 93 85 02 	sts	0x0285, r24
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
     75e:	f8 01       	movw	r30, r16
     760:	60 81       	ld	r22, Z
     762:	71 81       	ldd	r23, Z+1	; 0x01
     764:	86 1b       	sub	r24, r22
     766:	97 0b       	sbc	r25, r23
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
     768:	95 95       	asr	r25
     76a:	87 95       	ror	r24
     76c:	95 95       	asr	r25
     76e:	87 95       	ror	r24
     770:	9c 01       	movw	r18, r24
     772:	26 0f       	add	r18, r22
     774:	37 1f       	adc	r19, r23
     776:	21 93       	st	Z+, r18
     778:	31 93       	st	Z+, r19
     77a:	8f 01       	movw	r16, r30
		int fine_offset = 0;
		
		switch (i)
     77c:	c8 30       	cpi	r28, 0x08	; 8
     77e:	d1 05       	cpc	r29, r1
     780:	71 f0       	breq	.+28     	; 0x79e <scan_pots_and_update_control_voltages+0xd8>
     782:	c9 30       	cpi	r28, 0x09	; 9
     784:	d1 05       	cpc	r29, r1
     786:	24 f4       	brge	.+8      	; 0x790 <scan_pots_and_update_control_voltages+0xca>
     788:	c4 30       	cpi	r28, 0x04	; 4
     78a:	d1 05       	cpc	r29, r1
     78c:	f1 f5       	brne	.+124    	; 0x80a <scan_pots_and_update_control_voltages+0x144>
     78e:	32 c0       	rjmp	.+100    	; 0x7f4 <scan_pots_and_update_control_voltages+0x12e>
     790:	c9 30       	cpi	r28, 0x09	; 9
     792:	d1 05       	cpc	r29, r1
     794:	b1 f0       	breq	.+44     	; 0x7c2 <scan_pots_and_update_control_voltages+0xfc>
     796:	cb 30       	cpi	r28, 0x0B	; 11
     798:	d1 05       	cpc	r29, r1
     79a:	b9 f5       	brne	.+110    	; 0x80a <scan_pots_and_update_control_voltages+0x144>
     79c:	23 c0       	rjmp	.+70     	; 0x7e4 <scan_pots_and_update_control_voltages+0x11e>
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
     79e:	60 91 f6 02 	lds	r22, 0x02F6
     7a2:	70 91 f7 02 	lds	r23, 0x02F7
     7a6:	60 50       	subi	r22, 0x00	; 0
     7a8:	7e 4f       	sbci	r23, 0xFE	; 254
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     7aa:	80 91 83 02 	lds	r24, 0x0283
     7ae:	90 91 84 02 	lds	r25, 0x0284
     7b2:	68 0f       	add	r22, r24
     7b4:	79 1f       	adc	r23, r25
     7b6:	62 1b       	sub	r22, r18
     7b8:	73 0b       	sbc	r23, r19
     7ba:	c4 01       	movw	r24, r8
     7bc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     7c0:	be cf       	rjmp	.-132    	; 0x73e <scan_pots_and_update_control_voltages+0x78>
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     7c2:	b5 01       	movw	r22, r10
     7c4:	62 1b       	sub	r22, r18
     7c6:	73 0b       	sbc	r23, r19
     7c8:	70 93 84 02 	sts	0x0284, r23
     7cc:	60 93 83 02 	sts	0x0283, r22
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     7d0:	80 91 f8 02 	lds	r24, 0x02F8
     7d4:	90 91 f9 02 	lds	r25, 0x02F9
     7d8:	68 0f       	add	r22, r24
     7da:	79 1f       	adc	r23, r25
     7dc:	c3 01       	movw	r24, r6
     7de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     7e2:	ad cf       	rjmp	.-166    	; 0x73e <scan_pots_and_update_control_voltages+0x78>
			
			case 11: //handle ARP_RATE pot
				value_to_display = pot_group_0[11];
     7e4:	f2 01       	movw	r30, r4
     7e6:	80 81       	ld	r24, Z
     7e8:	91 81       	ldd	r25, Z+1	; 0x01
     7ea:	90 93 a3 01 	sts	0x01A3, r25
     7ee:	80 93 a2 01 	sts	0x01A2, r24
				break;
     7f2:	a5 cf       	rjmp	.-182    	; 0x73e <scan_pots_and_update_control_voltages+0x78>
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     7f4:	b9 01       	movw	r22, r18
     7f6:	66 0f       	add	r22, r22
     7f8:	77 1f       	adc	r23, r23
     7fa:	66 0f       	add	r22, r22
     7fc:	77 1f       	adc	r23, r23
     7fe:	66 0f       	add	r22, r22
     800:	77 1f       	adc	r23, r23
     802:	c1 01       	movw	r24, r2
     804:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     808:	9a cf       	rjmp	.-204    	; 0x73e <scan_pots_and_update_control_voltages+0x78>
			
			default: //set control voltage full-scale
				set_control_voltage(pot_decoder_0[i], pot_group_0[i] << 4);
     80a:	b9 01       	movw	r22, r18
     80c:	62 95       	swap	r22
     80e:	72 95       	swap	r23
     810:	70 7f       	andi	r23, 0xF0	; 240
     812:	76 27       	eor	r23, r22
     814:	60 7f       	andi	r22, 0xF0	; 240
     816:	76 27       	eor	r23, r22
     818:	f7 01       	movw	r30, r14
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	}; 
	
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     822:	f0 e1       	ldi	r31, 0x10	; 16
     824:	cf 16       	cp	r12, r31
     826:	d1 04       	cpc	r13, r1
     828:	0c f4       	brge	.+2      	; 0x82c <scan_pots_and_update_control_voltages+0x166>
     82a:	89 cf       	rjmp	.-238    	; 0x73e <scan_pots_and_update_control_voltages+0x78>
			
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
     82c:	0e 94 90 00 	call	0x120	; 0x120 <get_current_note>
     830:	d8 2e       	mov	r13, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     832:	87 e0       	ldi	r24, 0x07	; 7
     834:	8d 15       	cp	r24, r13
     836:	18 f0       	brcs	.+6      	; 0x83e <scan_pots_and_update_control_voltages+0x178>
     838:	dd 24       	eor	r13, r13
     83a:	68 94       	set
     83c:	d3 f8       	bld	r13, 3
     83e:	04 e4       	ldi	r16, 0x44	; 68
     840:	12 e0       	ldi	r17, 0x02	; 2
     842:	0f 2e       	mov	r0, r31
     844:	f4 e6       	ldi	r31, 0x64	; 100
     846:	ef 2e       	mov	r14, r31
     848:	f1 e0       	ldi	r31, 0x01	; 1
     84a:	ff 2e       	mov	r15, r31
     84c:	f0 2d       	mov	r31, r0
     84e:	c1 e0       	ldi	r28, 0x01	; 1
     850:	d0 e0       	ldi	r29, 0x00	; 0
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
		
		switch(i) 
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     852:	0f 2e       	mov	r0, r31
     854:	f8 ef       	ldi	r31, 0xF8	; 248
     856:	cf 2e       	mov	r12, r31
     858:	f0 2d       	mov	r31, r0
     85a:	cd 0c       	add	r12, r13
     85c:	0f 2e       	mov	r0, r31
     85e:	f2 e9       	ldi	r31, 0x92	; 146
     860:	8f 2e       	mov	r8, r31
     862:	f2 e0       	ldi	r31, 0x02	; 2
     864:	9f 2e       	mov	r9, r31
     866:	f0 2d       	mov	r31, r0
				uint16_t key_track_byte = (pot_group_1[3]); //
     868:	0f 2e       	mov	r0, r31
     86a:	fa e4       	ldi	r31, 0x4A	; 74
     86c:	af 2e       	mov	r10, r31
     86e:	f2 e0       	ldi	r31, 0x02	; 2
     870:	bf 2e       	mov	r11, r31
     872:	f0 2d       	mov	r31, r0
				//if (key_track_byte > 1020) key_track_byte = 1024;			 
				uint16_t divided_pitch_cv = ((uint32_t)key_track_byte*interpolated_pitch_cv) >> 10; //note that produce of key_track_byte and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly

				//value_to_display = divided_pitch_cv;
							
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     874:	0f 2e       	mov	r0, r31
     876:	fe ef       	ldi	r31, 0xFE	; 254
     878:	6f 2e       	mov	r6, r31
     87a:	ff ef       	ldi	r31, 0xFF	; 255
     87c:	7f 2e       	mov	r7, r31
     87e:	f0 2d       	mov	r31, r0
     880:	6a 0c       	add	r6, r10
     882:	7b 1c       	adc	r7, r11
				if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
				set_control_voltage(&cutoff_cv, filter_cutoff_cv);
     884:	0f 2e       	mov	r0, r31
     886:	f8 e2       	ldi	r31, 0x28	; 40
     888:	4f 2e       	mov	r4, r31
     88a:	f1 e0       	ldi	r31, 0x01	; 1
     88c:	5f 2e       	mov	r5, r31
     88e:	f0 2d       	mov	r31, r0
     890:	0f 2e       	mov	r0, r31
     892:	ff ef       	ldi	r31, 0xFF	; 255
     894:	2f 2e       	mov	r2, r31
     896:	ff e3       	ldi	r31, 0x3F	; 63
     898:	3f 2e       	mov	r3, r31
     89a:	f0 2d       	mov	r31, r0
     89c:	05 c0       	rjmp	.+10     	; 0x8a8 <scan_pots_and_update_control_voltages+0x1e2>
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     89e:	21 96       	adiw	r28, 0x01	; 1
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	ee 0e       	add	r14, r30
     8a6:	ff 1e       	adc	r15, r31
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     8a8:	87 e0       	ldi	r24, 0x07	; 7
     8aa:	6c 2f       	mov	r22, r28
     8ac:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     8b0:	90 93 86 02 	sts	0x0286, r25
     8b4:	80 93 85 02 	sts	0x0285, r24
		int adc_change = adc_value - pot_group_1[i];
     8b8:	f8 01       	movw	r30, r16
     8ba:	20 81       	ld	r18, Z
     8bc:	31 81       	ldd	r19, Z+1	; 0x01
     8be:	82 1b       	sub	r24, r18
     8c0:	93 0b       	sbc	r25, r19
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
     8c2:	95 95       	asr	r25
     8c4:	87 95       	ror	r24
     8c6:	95 95       	asr	r25
     8c8:	87 95       	ror	r24
     8ca:	82 0f       	add	r24, r18
     8cc:	93 1f       	adc	r25, r19
     8ce:	81 93       	st	Z+, r24
     8d0:	91 93       	st	Z+, r25
     8d2:	8f 01       	movw	r16, r30
		
		switch(i) 
     8d4:	c3 30       	cpi	r28, 0x03	; 3
     8d6:	d1 05       	cpc	r29, r1
     8d8:	69 f5       	brne	.+90     	; 0x934 <scan_pots_and_update_control_voltages+0x26e>
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     8da:	8c 2d       	mov	r24, r12
     8dc:	b4 01       	movw	r22, r8
     8de:	0e 94 b5 0c 	call	0x196a	; 0x196a <interpolate_pitch_cv>
				uint16_t key_track_byte = (pot_group_1[3]); //
				//if (key_track_byte > 1020) key_track_byte = 1024;			 
				uint16_t divided_pitch_cv = ((uint32_t)key_track_byte*interpolated_pitch_cv) >> 10; //note that produce of key_track_byte and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
     8e2:	bc 01       	movw	r22, r24
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	f5 01       	movw	r30, r10
     8ea:	20 81       	ld	r18, Z
     8ec:	31 81       	ldd	r19, Z+1	; 0x01
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	0e 94 3f 14 	call	0x287e	; 0x287e <__mulsi3>
     8f6:	dc 01       	movw	r26, r24
     8f8:	cb 01       	movw	r24, r22
     8fa:	07 2e       	mov	r0, r23
     8fc:	7a e0       	ldi	r23, 0x0A	; 10
     8fe:	b6 95       	lsr	r27
     900:	a7 95       	ror	r26
     902:	97 95       	ror	r25
     904:	87 95       	ror	r24
     906:	7a 95       	dec	r23
     908:	d1 f7       	brne	.-12     	; 0x8fe <scan_pots_and_update_control_voltages+0x238>
     90a:	70 2d       	mov	r23, r0

				//value_to_display = divided_pitch_cv;
							
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     90c:	f3 01       	movw	r30, r6
     90e:	60 81       	ld	r22, Z
     910:	71 81       	ldd	r23, Z+1	; 0x01
     912:	62 95       	swap	r22
     914:	72 95       	swap	r23
     916:	70 7f       	andi	r23, 0xF0	; 240
     918:	76 27       	eor	r23, r22
     91a:	60 7f       	andi	r22, 0xF0	; 240
     91c:	76 27       	eor	r23, r22
     91e:	68 0f       	add	r22, r24
     920:	79 1f       	adc	r23, r25
				if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
				set_control_voltage(&cutoff_cv, filter_cutoff_cv);
     922:	f0 e4       	ldi	r31, 0x40	; 64
     924:	60 30       	cpi	r22, 0x00	; 0
     926:	7f 07       	cpc	r23, r31
     928:	08 f0       	brcs	.+2      	; 0x92c <scan_pots_and_update_control_voltages+0x266>
     92a:	b1 01       	movw	r22, r2
     92c:	c2 01       	movw	r24, r4
     92e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
     932:	b5 cf       	rjmp	.-150    	; 0x89e <scan_pots_and_update_control_voltages+0x1d8>
				//value_to_display = filter_cutoff_cv;
				break;
			
			default:
				set_control_voltage(pot_decoder_1[i], pot_group_1[i] <<4);
     934:	bc 01       	movw	r22, r24
     936:	62 95       	swap	r22
     938:	72 95       	swap	r23
     93a:	70 7f       	andi	r23, 0xF0	; 240
     93c:	76 27       	eor	r23, r22
     93e:	60 7f       	andi	r22, 0xF0	; 240
     940:	76 27       	eor	r23, r22
     942:	f7 01       	movw	r30, r14
     944:	80 81       	ld	r24, Z
     946:	91 81       	ldd	r25, Z+1	; 0x01
     948:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//value_to_display = 1234;	
	
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     94c:	cf 30       	cpi	r28, 0x0F	; 15
     94e:	d1 05       	cpc	r29, r1
     950:	0c f4       	brge	.+2      	; 0x954 <scan_pots_and_update_control_voltages+0x28e>
     952:	a5 cf       	rjmp	.-182    	; 0x89e <scan_pots_and_update_control_voltages+0x1d8>
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose 
     954:	8d 2d       	mov	r24, r13
     956:	6f e0       	ldi	r22, 0x0F	; 15
     958:	0e 94 5c 05 	call	0xab8	; 0xab8 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     95c:	64 ed       	ldi	r22, 0xD4	; 212
     95e:	72 e0       	ldi	r23, 0x02	; 2
     960:	0e 94 b5 0c 	call	0x196a	; 0x196a <interpolate_pitch_cv>
     964:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     966:	8c e4       	ldi	r24, 0x4C	; 76
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     96e:	8d 2d       	mov	r24, r13
     970:	60 ef       	ldi	r22, 0xF0	; 240
     972:	0e 94 5c 05 	call	0xab8	; 0xab8 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     976:	62 eb       	ldi	r22, 0xB2	; 178
     978:	72 e0       	ldi	r23, 0x02	; 2
     97a:	0e 94 b5 0c 	call	0x196a	; 0x196a <interpolate_pitch_cv>
     97e:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv); 
     980:	8a e4       	ldi	r24, 0x4A	; 74
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     988:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     98a:	a1 9a       	sbi	0x14, 1	; 20
	
	
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	bf 90       	pop	r11
     99e:	af 90       	pop	r10
     9a0:	9f 90       	pop	r9
     9a2:	8f 90       	pop	r8
     9a4:	7f 90       	pop	r7
     9a6:	6f 90       	pop	r6
     9a8:	5f 90       	pop	r5
     9aa:	4f 90       	pop	r4
     9ac:	3f 90       	pop	r3
     9ae:	2f 90       	pop	r2
     9b0:	08 95       	ret

000009b2 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     9b2:	84 b1       	in	r24, 0x04	; 4
     9b4:	87 62       	ori	r24, 0x27	; 39
     9b6:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     9b8:	ec ed       	ldi	r30, 0xDC	; 220
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	8c 65       	ori	r24, 0x5C	; 92
     9c0:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     9c2:	85 b1       	in	r24, 0x05	; 5
     9c4:	89 7d       	andi	r24, 0xD9	; 217
     9c6:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     9c8:	ed ed       	ldi	r30, 0xDD	; 221
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	83 7f       	andi	r24, 0xF3	; 243
     9d0:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     9d2:	80 e5       	ldi	r24, 0x50	; 80
     9d4:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     9d6:	80 81       	ld	r24, Z
     9d8:	87 7f       	andi	r24, 0xF7	; 247
     9da:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     9dc:	80 81       	ld	r24, Z
     9de:	87 7f       	andi	r24, 0xF7	; 247
     9e0:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     9e2:	80 81       	ld	r24, Z
     9e4:	88 60       	ori	r24, 0x08	; 8
     9e6:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     9e8:	80 81       	ld	r24, Z
     9ea:	8f 7e       	andi	r24, 0xEF	; 239
     9ec:	80 83       	st	Z, r24
	
}
     9ee:	08 95       	ret

000009f0 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     9f0:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     9f2:	0d b4       	in	r0, 0x2d	; 45
     9f4:	07 fe       	sbrs	r0, 7
     9f6:	fd cf       	rjmp	.-6      	; 0x9f2 <spi_shift_byte+0x2>
	return SPDR;
     9f8:	8e b5       	in	r24, 0x2e	; 46
	
}
     9fa:	08 95       	ret

000009fc <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     9fc:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(patch.byte_5);
     9fe:	80 91 8f 02 	lds	r24, 0x028F
     a02:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     a06:	90 91 88 02 	lds	r25, 0x0288
     a0a:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     a0c:	98 27       	eor	r25, r24
     a0e:	90 93 88 02 	sts	0x0288, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     a12:	98 23       	and	r25, r24
     a14:	90 93 87 02 	sts	0x0287, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     a18:	80 91 01 03 	lds	r24, 0x0301
     a1c:	98 27       	eor	r25, r24
     a1e:	90 93 01 03 	sts	0x0301, r25
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     a22:	80 91 8e 02 	lds	r24, 0x028E
     a26:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     a2a:	90 91 8a 02 	lds	r25, 0x028A
     a2e:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     a30:	98 27       	eor	r25, r24
     a32:	90 93 8a 02 	sts	0x028A, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     a36:	98 23       	and	r25, r24
     a38:	90 93 89 02 	sts	0x0289, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     a3c:	80 91 02 03 	lds	r24, 0x0302
     a40:	98 27       	eor	r25, r24
     a42:	90 93 02 03 	sts	0x0302, r25
							
			//SHIFT 3th BYTE
			spi_shift_byte(patch.byte_3);
     a46:	80 91 8d 02 	lds	r24, 0x028D
     a4a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(patch.byte_2);
     a4e:	80 91 8c 02 	lds	r24, 0x028C
     a52:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     a56:	90 91 03 03 	lds	r25, 0x0303
     a5a:	29 2f       	mov	r18, r25
     a5c:	22 95       	swap	r18
     a5e:	2f 70       	andi	r18, 0x0F	; 15
     a60:	27 95       	ror	r18
     a62:	22 27       	eor	r18, r18
     a64:	27 95       	ror	r18

			//SHIFT 2th BYTE
			spi_shift_byte(patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     a66:	89 2f       	mov	r24, r25
     a68:	86 95       	lsr	r24
     a6a:	86 95       	lsr	r24
     a6c:	86 95       	lsr	r24
     a6e:	81 70       	andi	r24, 0x01	; 1
     a70:	82 2b       	or	r24, r18
     a72:	40 91 02 03 	lds	r20, 0x0302
     a76:	42 95       	swap	r20
     a78:	46 95       	lsr	r20
     a7a:	47 70       	andi	r20, 0x07	; 7
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	41 70       	andi	r20, 0x01	; 1
     a80:	50 70       	andi	r21, 0x00	; 0
     a82:	9a 01       	movw	r18, r20
     a84:	22 0f       	add	r18, r18
     a86:	33 1f       	adc	r19, r19
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	28 2b       	or	r18, r24
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     a8e:	99 1f       	adc	r25, r25
     a90:	99 27       	eor	r25, r25
     a92:	99 1f       	adc	r25, r25
     a94:	89 2f       	mov	r24, r25
     a96:	82 95       	swap	r24
     a98:	88 0f       	add	r24, r24
     a9a:	88 0f       	add	r24, r24
     a9c:	80 7c       	andi	r24, 0xC0	; 192
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     a9e:	82 2b       	or	r24, r18
     aa0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     aa4:	ed ed       	ldi	r30, 0xDD	; 221
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	87 7f       	andi	r24, 0xF7	; 247
     aac:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     aae:	80 81       	ld	r24, Z
     ab0:	88 60       	ori	r24, 0x08	; 8
     ab2:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     ab4:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     ab6:	08 95       	ret

00000ab8 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
     ab8:	90 91 90 02 	lds	r25, 0x0290
     abc:	97 70       	andi	r25, 0x07	; 7
	if (vco == VCO2) n = octave_index.vco2;
     abe:	60 3f       	cpi	r22, 0xF0	; 240
     ac0:	31 f4       	brne	.+12     	; 0xace <transpose_note+0x16>
     ac2:	90 91 90 02 	lds	r25, 0x0290
     ac6:	96 95       	lsr	r25
     ac8:	96 95       	lsr	r25
     aca:	96 95       	lsr	r25
     acc:	97 70       	andi	r25, 0x07	; 7

	note = (n*12) + note; //calculate MIDI note after octave addition
     ace:	29 2f       	mov	r18, r25
     ad0:	22 0f       	add	r18, r18
     ad2:	92 0f       	add	r25, r18
     ad4:	99 0f       	add	r25, r25
     ad6:	99 0f       	add	r25, r25
     ad8:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
     ada:	89 38       	cpi	r24, 0x89	; 137
     adc:	08 f0       	brcs	.+2      	; 0xae0 <transpose_note+0x28>
     ade:	88 e8       	ldi	r24, 0x88	; 136
	
}
     ae0:	08 95       	ret

00000ae2 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
     ae2:	80 91 01 03 	lds	r24, 0x0301
     ae6:	98 2f       	mov	r25, r24
     ae8:	96 95       	lsr	r25
     aea:	96 95       	lsr	r25
     aec:	96 95       	lsr	r25
     aee:	90 ff       	sbrs	r25, 0
     af0:	14 c0       	rjmp	.+40     	; 0xb1a <update_octave_range+0x38>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
     af2:	20 91 90 02 	lds	r18, 0x0290
     af6:	92 2f       	mov	r25, r18
     af8:	9f 5f       	subi	r25, 0xFF	; 255
     afa:	97 70       	andi	r25, 0x07	; 7
     afc:	28 7f       	andi	r18, 0xF8	; 248
     afe:	29 2b       	or	r18, r25
     b00:	20 93 90 02 	sts	0x0290, r18
     b04:	95 30       	cpi	r25, 0x05	; 5
     b06:	29 f4       	brne	.+10     	; 0xb12 <update_octave_range+0x30>
     b08:	92 2f       	mov	r25, r18
     b0a:	98 7f       	andi	r25, 0xF8	; 248
     b0c:	94 60       	ori	r25, 0x04	; 4
     b0e:	90 93 90 02 	sts	0x0290, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
     b12:	98 e0       	ldi	r25, 0x08	; 8
     b14:	89 27       	eor	r24, r25
     b16:	80 93 01 03 	sts	0x0301, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
     b1a:	80 91 02 03 	lds	r24, 0x0302
     b1e:	98 2f       	mov	r25, r24
     b20:	96 95       	lsr	r25
     b22:	96 95       	lsr	r25
     b24:	96 95       	lsr	r25
     b26:	90 ff       	sbrs	r25, 0
     b28:	11 c0       	rjmp	.+34     	; 0xb4c <update_octave_range+0x6a>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
     b2a:	90 91 90 02 	lds	r25, 0x0290
     b2e:	97 70       	andi	r25, 0x07	; 7
     b30:	49 f0       	breq	.+18     	; 0xb44 <update_octave_range+0x62>
     b32:	90 91 90 02 	lds	r25, 0x0290
     b36:	29 2f       	mov	r18, r25
     b38:	29 5f       	subi	r18, 0xF9	; 249
     b3a:	27 70       	andi	r18, 0x07	; 7
     b3c:	98 7f       	andi	r25, 0xF8	; 248
     b3e:	92 2b       	or	r25, r18
     b40:	90 93 90 02 	sts	0x0290, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
     b44:	98 e0       	ldi	r25, 0x08	; 8
     b46:	89 27       	eor	r24, r25
     b48:	80 93 02 03 	sts	0x0302, r24

	}
	
	patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
     b4c:	80 91 90 02 	lds	r24, 0x0290
     b50:	87 70       	andi	r24, 0x07	; 7
     b52:	ee ea       	ldi	r30, 0xAE	; 174
     b54:	f1 e0       	ldi	r31, 0x01	; 1
     b56:	e8 0f       	add	r30, r24
     b58:	f1 1d       	adc	r31, r1
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	00 80       	ld	r0, Z
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <update_octave_range+0x84>
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	0a 94       	dec	r0
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <update_octave_range+0x80>
     b6a:	58 2f       	mov	r21, r24
     b6c:	80 93 8e 02 	sts	0x028E, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
     b70:	90 91 02 03 	lds	r25, 0x0302
     b74:	29 2f       	mov	r18, r25
     b76:	26 95       	lsr	r18
     b78:	26 95       	lsr	r18
     b7a:	20 ff       	sbrs	r18, 0
     b7c:	1a c0       	rjmp	.+52     	; 0xbb2 <update_octave_range+0xd0>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
     b7e:	80 91 90 02 	lds	r24, 0x0290
     b82:	28 2f       	mov	r18, r24
     b84:	26 95       	lsr	r18
     b86:	26 95       	lsr	r18
     b88:	26 95       	lsr	r18
     b8a:	2f 5f       	subi	r18, 0xFF	; 255
     b8c:	27 70       	andi	r18, 0x07	; 7
     b8e:	32 2f       	mov	r19, r18
     b90:	33 0f       	add	r19, r19
     b92:	33 0f       	add	r19, r19
     b94:	33 0f       	add	r19, r19
     b96:	87 7c       	andi	r24, 0xC7	; 199
     b98:	83 2b       	or	r24, r19
     b9a:	80 93 90 02 	sts	0x0290, r24
     b9e:	25 30       	cpi	r18, 0x05	; 5
     ba0:	21 f4       	brne	.+8      	; 0xbaa <update_octave_range+0xc8>
     ba2:	87 7c       	andi	r24, 0xC7	; 199
     ba4:	80 62       	ori	r24, 0x20	; 32
     ba6:	80 93 90 02 	sts	0x0290, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	98 27       	eor	r25, r24
     bae:	90 93 02 03 	sts	0x0302, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
     bb2:	90 91 02 03 	lds	r25, 0x0302
     bb6:	29 2f       	mov	r18, r25
     bb8:	26 95       	lsr	r18
     bba:	20 ff       	sbrs	r18, 0
     bbc:	17 c0       	rjmp	.+46     	; 0xbec <update_octave_range+0x10a>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
     bbe:	80 91 90 02 	lds	r24, 0x0290
     bc2:	88 73       	andi	r24, 0x38	; 56
     bc4:	79 f0       	breq	.+30     	; 0xbe4 <update_octave_range+0x102>
     bc6:	80 91 90 02 	lds	r24, 0x0290
     bca:	28 2f       	mov	r18, r24
     bcc:	26 95       	lsr	r18
     bce:	26 95       	lsr	r18
     bd0:	26 95       	lsr	r18
     bd2:	29 5f       	subi	r18, 0xF9	; 249
     bd4:	27 70       	andi	r18, 0x07	; 7
     bd6:	22 0f       	add	r18, r18
     bd8:	22 0f       	add	r18, r18
     bda:	22 0f       	add	r18, r18
     bdc:	87 7c       	andi	r24, 0xC7	; 199
     bde:	82 2b       	or	r24, r18
     be0:	80 93 90 02 	sts	0x0290, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	98 27       	eor	r25, r24
     be8:	90 93 02 03 	sts	0x0302, r25
		
	}
			
	patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
     bec:	40 91 8d 02 	lds	r20, 0x028D
     bf0:	4c 7f       	andi	r20, 0xFC	; 252
     bf2:	40 93 8d 02 	sts	0x028D, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
     bf6:	90 91 90 02 	lds	r25, 0x0290
     bfa:	96 95       	lsr	r25
     bfc:	96 95       	lsr	r25
     bfe:	96 95       	lsr	r25
     c00:	97 70       	andi	r25, 0x07	; 7
     c02:	89 2f       	mov	r24, r25
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	83 30       	cpi	r24, 0x03	; 3
     c08:	91 05       	cpc	r25, r1
     c0a:	84 f0       	brlt	.+32     	; 0xc2c <update_octave_range+0x14a>

						
		patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
     c0c:	fc 01       	movw	r30, r24
     c0e:	e7 55       	subi	r30, 0x57	; 87
     c10:	fe 4f       	sbci	r31, 0xFE	; 254
     c12:	21 e0       	ldi	r18, 0x01	; 1
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	c9 01       	movw	r24, r18
     c18:	00 80       	ld	r0, Z
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <update_octave_range+0x13e>
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	0a 94       	dec	r0
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <update_octave_range+0x13a>
     c24:	84 2b       	or	r24, r20
     c26:	80 93 8d 02 	sts	0x028D, r24
     c2a:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
     c2c:	fc 01       	movw	r30, r24
     c2e:	e7 55       	subi	r30, 0x57	; 87
     c30:	fe 4f       	sbci	r31, 0xFE	; 254
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	c9 01       	movw	r24, r18
     c38:	00 80       	ld	r0, Z
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <update_octave_range+0x15e>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <update_octave_range+0x15a>
     c44:	85 2b       	or	r24, r21
     c46:	80 93 8e 02 	sts	0x028E, r24
     c4a:	08 95       	ret

00000c4c <refresh_synth>:
	}	
	
}
	
	
void refresh_synth(void) {
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c50:	90 91 01 03 	lds	r25, 0x0301
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
     c54:	80 91 03 03 	lds	r24, 0x0303
     c58:	86 95       	lsr	r24
     c5a:	86 95       	lsr	r24
     c5c:	68 2f       	mov	r22, r24
     c5e:	67 95       	ror	r22
     c60:	66 27       	eor	r22, r22
     c62:	67 95       	ror	r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c64:	29 2f       	mov	r18, r25
     c66:	21 70       	andi	r18, 0x01	; 1
     c68:	26 2b       	or	r18, r22
     c6a:	69 2f       	mov	r22, r25
     c6c:	66 1f       	adc	r22, r22
     c6e:	66 27       	eor	r22, r22
     c70:	66 1f       	adc	r22, r22
     c72:	66 0f       	add	r22, r22
     c74:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
     c76:	c9 2f       	mov	r28, r25
     c78:	c6 95       	lsr	r28
     c7a:	c6 95       	lsr	r28
     c7c:	d0 e0       	ldi	r29, 0x00	; 0
     c7e:	c1 70       	andi	r28, 0x01	; 1
     c80:	d0 70       	andi	r29, 0x00	; 0
     c82:	de 01       	movw	r26, r28
     c84:	aa 0f       	add	r26, r26
     c86:	bb 1f       	adc	r27, r27
     c88:	aa 0f       	add	r26, r26
     c8a:	bb 1f       	adc	r27, r27
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     c8c:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
     c8e:	a9 2f       	mov	r26, r25
     c90:	a6 95       	lsr	r26
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	a1 70       	andi	r26, 0x01	; 1
     c96:	b0 70       	andi	r27, 0x00	; 0
     c98:	fd 01       	movw	r30, r26
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	ee 0f       	add	r30, r30
     ca4:	ff 1f       	adc	r31, r31
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     ca6:	a6 2f       	mov	r26, r22
     ca8:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
     caa:	e9 2f       	mov	r30, r25
     cac:	e2 95       	swap	r30
     cae:	ef 70       	andi	r30, 0x0F	; 15
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	e1 70       	andi	r30, 0x01	; 1
     cb4:	f0 70       	andi	r31, 0x00	; 0
     cb6:	bf 01       	movw	r22, r30
     cb8:	62 95       	swap	r22
     cba:	72 95       	swap	r23
     cbc:	70 7f       	andi	r23, 0xF0	; 240
     cbe:	76 27       	eor	r23, r22
     cc0:	60 7f       	andi	r22, 0xF0	; 240
     cc2:	76 27       	eor	r23, r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     cc4:	ea 2f       	mov	r30, r26
     cc6:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
     cc8:	69 2f       	mov	r22, r25
     cca:	62 95       	swap	r22
     ccc:	66 95       	lsr	r22
     cce:	67 70       	andi	r22, 0x07	; 7
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	61 70       	andi	r22, 0x01	; 1
     cd4:	70 70       	andi	r23, 0x00	; 0
     cd6:	ab 01       	movw	r20, r22
     cd8:	44 0f       	add	r20, r20
     cda:	55 1f       	adc	r21, r21
     cdc:	42 95       	swap	r20
     cde:	52 95       	swap	r21
     ce0:	50 7f       	andi	r21, 0xF0	; 240
     ce2:	54 27       	eor	r21, r20
     ce4:	40 7f       	andi	r20, 0xF0	; 240
     ce6:	54 27       	eor	r21, r20
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     ce8:	6e 2f       	mov	r22, r30
     cea:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
     cec:	49 2f       	mov	r20, r25
     cee:	42 95       	swap	r20
     cf0:	46 95       	lsr	r20
     cf2:	46 95       	lsr	r20
     cf4:	43 70       	andi	r20, 0x03	; 3
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	41 70       	andi	r20, 0x01	; 1
     cfa:	50 70       	andi	r21, 0x00	; 0
     cfc:	9a 01       	movw	r18, r20
     cfe:	00 24       	eor	r0, r0
     d00:	36 95       	lsr	r19
     d02:	27 95       	ror	r18
     d04:	07 94       	ror	r0
     d06:	36 95       	lsr	r19
     d08:	27 95       	ror	r18
     d0a:	07 94       	ror	r0
     d0c:	32 2f       	mov	r19, r18
     d0e:	20 2d       	mov	r18, r0
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
     d10:	26 2b       	or	r18, r22
     d12:	20 93 8f 02 	sts	0x028F, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
     d16:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
     d18:	81 95       	neg	r24
     d1a:	89 27       	eor	r24, r25
     d1c:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
     d1e:	89 27       	eor	r24, r25
     d20:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     d24:	ed ed       	ldi	r30, 0xDD	; 221
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	90 81       	ld	r25, Z
     d2a:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
     d2c:	80 91 03 03 	lds	r24, 0x0303
     d30:	86 95       	lsr	r24
     d32:	86 95       	lsr	r24
     d34:	86 95       	lsr	r24
     d36:	81 70       	andi	r24, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     d38:	81 95       	neg	r24
     d3a:	82 27       	eor	r24, r18
     d3c:	80 71       	andi	r24, 0x10	; 16
     d3e:	89 27       	eor	r24, r25
     d40:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
     d42:	0e 94 71 05 	call	0xae2	; 0xae2 <update_octave_range>
	
	//parse LFO data
	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
     d46:	80 91 02 03 	lds	r24, 0x0302
     d4a:	88 23       	and	r24, r24
     d4c:	84 f5       	brge	.+96     	; 0xdae <refresh_synth+0x162>
		
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
     d4e:	80 58       	subi	r24, 0x80	; 128
     d50:	80 93 02 03 	sts	0x0302, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
     d54:	80 91 91 02 	lds	r24, 0x0291
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	80 93 91 02 	sts	0x0291, r24
     d5e:	85 30       	cpi	r24, 0x05	; 5
     d60:	11 f4       	brne	.+4      	; 0xd66 <refresh_synth+0x11a>
     d62:	10 92 91 02 	sts	0x0291, r1
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
     d66:	a0 91 91 02 	lds	r26, 0x0291
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	ad 54       	subi	r26, 0x4D	; 77
     d6e:	be 4f       	sbci	r27, 0xFE	; 254
     d70:	8c 91       	ld	r24, X
     d72:	87 70       	andi	r24, 0x07	; 7
     d74:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     d76:	ed ed       	ldi	r30, 0xDD	; 221
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 62       	ori	r24, 0x20	; 32
     d7e:	80 83       	st	Z, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     d80:	80 81       	ld	r24, Z
     d82:	8f 7d       	andi	r24, 0xDF	; 223
     d84:	80 83       	st	Z, r24
		patch.byte_2 &= 0b00001111; //clear top 4 bits 
		patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
     d86:	8c 91       	ld	r24, X
     d88:	86 95       	lsr	r24
     d8a:	86 95       	lsr	r24
     d8c:	86 95       	lsr	r24
     d8e:	87 70       	andi	r24, 0x07	; 7
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	a9 01       	movw	r20, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <refresh_synth+0x150>
     d98:	44 0f       	add	r20, r20
     d9a:	55 1f       	adc	r21, r21
     d9c:	8a 95       	dec	r24
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <refresh_synth+0x14c>
     da0:	ca 01       	movw	r24, r20
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
		patch.byte_2 &= 0b00001111; //clear top 4 bits 
     da2:	90 91 8c 02 	lds	r25, 0x028C
     da6:	9f 70       	andi	r25, 0x0F	; 15
		patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
     da8:	89 2b       	or	r24, r25
     daa:	80 93 8c 02 	sts	0x028C, r24
		
		
	}		
				
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) //temporary tune button hack
     dae:	80 91 03 03 	lds	r24, 0x0303
     db2:	98 2f       	mov	r25, r24
     db4:	92 95       	swap	r25
     db6:	9f 70       	andi	r25, 0x0F	; 15
     db8:	90 ff       	sbrs	r25, 0
     dba:	3f c0       	rjmp	.+126    	; 0xe3a <refresh_synth+0x1ee>
		{ 
				
		switch_states.byte2 ^= (1<<PROG_WRITE_SW); //toggle read switch state
     dbc:	90 e1       	ldi	r25, 0x10	; 16
     dbe:	89 27       	eor	r24, r25
     dc0:	80 93 03 03 	sts	0x0303, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
     dc4:	87 e0       	ldi	r24, 0x07	; 7
     dc6:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     dc8:	cd ed       	ldi	r28, 0xDD	; 221
     dca:	d0 e0       	ldi	r29, 0x00	; 0
     dcc:	88 81       	ld	r24, Y
     dce:	80 62       	ori	r24, 0x20	; 32
     dd0:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     dd2:	88 81       	ld	r24, Y
     dd4:	8f 7d       	andi	r24, 0xDF	; 223
     dd6:	88 83       	st	Y, r24
		DATA_BUS = 0;
     dd8:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
     dda:	8f e0       	ldi	r24, 0x0F	; 15
     ddc:	6f e0       	ldi	r22, 0x0F	; 15
     dde:	7e e5       	ldi	r23, 0x5E	; 94
     de0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <set_vco_init_cv>
     de4:	90 93 f9 02 	sts	0x02F9, r25
     de8:	80 93 f8 02 	sts	0x02F8, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
     dec:	80 ef       	ldi	r24, 0xF0	; 240
     dee:	6f e0       	ldi	r22, 0x0F	; 15
     df0:	7e e5       	ldi	r23, 0x5E	; 94
     df2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <set_vco_init_cv>
     df6:	90 93 f7 02 	sts	0x02F7, r25
     dfa:	80 93 f6 02 	sts	0x02F6, r24

		tune_8ths(VCO1);
     dfe:	8f e0       	ldi	r24, 0x0F	; 15
     e00:	0e 94 03 09 	call	0x1206	; 0x1206 <tune_8ths>
		tune_8ths(VCO2);
     e04:	80 ef       	ldi	r24, 0xF0	; 240
     e06:	0e 94 03 09 	call	0x1206	; 0x1206 <tune_8ths>
		tune_filter();
     e0a:	0e 94 a5 0a 	call	0x154a	; 0x154a <tune_filter>
		save_tuning_tables();
     e0e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e12:	8f e4       	ldi	r24, 0x4F	; 79
     e14:	93 ec       	ldi	r25, 0xC3	; 195
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <refresh_synth+0x1ca>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <refresh_synth+0x1d0>
     e1c:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
     e1e:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     e20:	88 81       	ld	r24, Y
     e22:	80 62       	ori	r24, 0x20	; 32
     e24:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     e26:	88 81       	ld	r24, Y
     e28:	8f 7d       	andi	r24, 0xDF	; 223
     e2a:	88 83       	st	Y, r24
		DATA_BUS = 0;
     e2c:	12 b8       	out	0x02, r1	; 2
		patch.byte_2 &= 0b00001111; //clear top 4 bits 
     e2e:	80 91 8c 02 	lds	r24, 0x028C
     e32:	8f 70       	andi	r24, 0x0F	; 15
		patch.byte_2 |= (1<<LFO_TRI);
     e34:	80 68       	ori	r24, 0x80	; 128
     e36:	80 93 8c 02 	sts	0x028C, r24
				
		}
		
		
	
}
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     e40:	80 e3       	ldi	r24, 0x30	; 48
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     e4c:	82 e4       	ldi	r24, 0x42	; 66
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     e58:	84 e4       	ldi	r24, 0x44	; 68
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     e64:	8b e3       	ldi	r24, 0x3B	; 59
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     e70:	84 e3       	ldi	r24, 0x34	; 52
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     e7c:	8e e3       	ldi	r24, 0x3E	; 62
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     e88:	80 e4       	ldi	r24, 0x40	; 64
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     e94:	82 e2       	ldi	r24, 0x22	; 34
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     ea0:	8c e2       	ldi	r24, 0x2C	; 44
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     eac:	84 e2       	ldi	r24, 0x24	; 36
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     eb8:	86 e2       	ldi	r24, 0x26	; 38
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     ec4:	88 e2       	ldi	r24, 0x28	; 40
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	6f ef       	ldi	r22, 0xFF	; 255
     eca:	7f e3       	ldi	r23, 0x3F	; 63
     ecc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     ed0:	8a e2       	ldi	r24, 0x2A	; 42
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     edc:	82 e3       	ldi	r24, 0x32	; 50
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     ee8:	8c e1       	ldi	r24, 0x1C	; 28
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     ef4:	88 e1       	ldi	r24, 0x18	; 24
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     f00:	84 e1       	ldi	r24, 0x14	; 20
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	6f ef       	ldi	r22, 0xFF	; 255
     f06:	7f e3       	ldi	r23, 0x3F	; 63
     f08:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     f0c:	80 e1       	ldi	r24, 0x10	; 16
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     f18:	80 e2       	ldi	r24, 0x20	; 32
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
     f24:	86 e4       	ldi	r24, 0x46	; 70
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
     f30:	88 e4       	ldi	r24, 0x48	; 72
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
}	
     f3c:	08 95       	ret

00000f3e <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
     f3e:	2f 92       	push	r2
     f40:	3f 92       	push	r3
     f42:	4f 92       	push	r4
     f44:	5f 92       	push	r5
     f46:	6f 92       	push	r6
     f48:	7f 92       	push	r7
     f4a:	8f 92       	push	r8
     f4c:	9f 92       	push	r9
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	2c 97       	sbiw	r28, 0x0c	; 12
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	08 2f       	mov	r16, r24
     f74:	78 87       	std	Y+8, r23	; 0x08
     f76:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
     f78:	80 91 fe 02 	lds	r24, 0x02FE
     f7c:	83 60       	ori	r24, 0x03	; 3
     f7e:	80 93 fe 02 	sts	0x02FE, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
     f82:	0e 94 20 07 	call	0xe40	; 0xe40 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
     f86:	10 92 fd 02 	sts	0x02FD, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
     f8a:	0f 30       	cpi	r16, 0x0F	; 15
     f8c:	e1 f4       	brne	.+56     	; 0xfc6 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     f8e:	0f 2e       	mov	r0, r31
     f90:	fc e4       	ldi	r31, 0x4C	; 76
     f92:	4f 2e       	mov	r4, r31
     f94:	f1 e0       	ldi	r31, 0x01	; 1
     f96:	5f 2e       	mov	r5, r31
     f98:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     f9a:	0f 2e       	mov	r0, r31
     f9c:	fc e3       	ldi	r31, 0x3C	; 60
     f9e:	2f 2e       	mov	r2, r31
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	3f 2e       	mov	r3, r31
     fa4:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     fa6:	26 e4       	ldi	r18, 0x46	; 70
     fa8:	31 e0       	ldi	r19, 0x01	; 1
     faa:	3a 83       	std	Y+2, r19	; 0x02
     fac:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     fae:	0f 2e       	mov	r0, r31
     fb0:	f8 e3       	ldi	r31, 0x38	; 56
     fb2:	8f 2e       	mov	r8, r31
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
     fb6:	9f 2e       	mov	r9, r31
     fb8:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
     fba:	86 e6       	ldi	r24, 0x66	; 102
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9a 87       	std	Y+10, r25	; 0x0a
     fc0:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	1b c0       	rjmp	.+54     	; 0xffc <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     fc6:	0f 2e       	mov	r0, r31
     fc8:	fa e4       	ldi	r31, 0x4A	; 74
     fca:	4f 2e       	mov	r4, r31
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	5f 2e       	mov	r5, r31
     fd0:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     fd2:	0f 2e       	mov	r0, r31
     fd4:	fe e2       	ldi	r31, 0x2E	; 46
     fd6:	2f 2e       	mov	r2, r31
     fd8:	f1 e0       	ldi	r31, 0x01	; 1
     fda:	3f 2e       	mov	r3, r31
     fdc:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     fde:	e8 e4       	ldi	r30, 0x48	; 72
     fe0:	f1 e0       	ldi	r31, 0x01	; 1
     fe2:	fa 83       	std	Y+2, r31	; 0x02
     fe4:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     fe6:	0f 2e       	mov	r0, r31
     fe8:	fa e3       	ldi	r31, 0x3A	; 58
     fea:	8f 2e       	mov	r8, r31
     fec:	f1 e0       	ldi	r31, 0x01	; 1
     fee:	9f 2e       	mov	r9, r31
     ff0:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
     ff2:	24 e6       	ldi	r18, 0x64	; 100
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	3a 87       	std	Y+10, r19	; 0x0a
     ff8:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
     ffa:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
     ffc:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     ffe:	ed ed       	ldi	r30, 0xDD	; 221
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 64       	ori	r24, 0x40	; 64
    1006:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1008:	80 81       	ld	r24, Z
    100a:	8f 7b       	andi	r24, 0xBF	; 191
    100c:	80 83       	st	Z, r24
	DATA_BUS = 0;
    100e:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1010:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1012:	84 b5       	in	r24, 0x24	; 36
    1014:	8f 60       	ori	r24, 0x0F	; 15
    1016:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    101c:	ee e6       	ldi	r30, 0x6E	; 110
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	90 81       	ld	r25, Z
    1022:	92 60       	ori	r25, 0x02	; 2
    1024:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1026:	80 93 ff 02 	sts	0x02FF, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    102a:	8d e0       	ldi	r24, 0x0D	; 13
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9c 83       	std	Y+4, r25	; 0x04
    1030:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1032:	80 2f       	mov	r24, r16
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	8c 01       	movw	r16, r24
    1038:	0f 5f       	subi	r16, 0xFF	; 255
    103a:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    103c:	0f 2e       	mov	r0, r31
    103e:	f0 e3       	ldi	r31, 0x30	; 48
    1040:	ef 2e       	mov	r14, r31
    1042:	f1 e0       	ldi	r31, 0x01	; 1
    1044:	ff 2e       	mov	r15, r31
    1046:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1048:	0f 2e       	mov	r0, r31
    104a:	f8 e2       	ldi	r31, 0x28	; 40
    104c:	cf 2e       	mov	r12, r31
    104e:	f1 e0       	ldi	r31, 0x01	; 1
    1050:	df 2e       	mov	r13, r31
    1052:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1054:	0f 2e       	mov	r0, r31
    1056:	f4 e1       	ldi	r31, 0x14	; 20
    1058:	af 2e       	mov	r10, r31
    105a:	f1 e0       	ldi	r31, 0x01	; 1
    105c:	bf 2e       	mov	r11, r31
    105e:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1060:	0f 2e       	mov	r0, r31
    1062:	f6 e1       	ldi	r31, 0x16	; 22
    1064:	6f 2e       	mov	r6, r31
    1066:	f1 e0       	ldi	r31, 0x01	; 1
    1068:	7f 2e       	mov	r7, r31
    106a:	f0 2d       	mov	r31, r0
    106c:	e0 e0       	ldi	r30, 0x00	; 0
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	fc 87       	std	Y+12, r31	; 0x0c
    1072:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	0b 80       	ldd	r0, Y+3	; 0x03
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <set_vco_init_cv+0x142>
    107c:	22 0f       	add	r18, r18
    107e:	33 1f       	adc	r19, r19
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <set_vco_init_cv+0x13e>
    1084:	3e 83       	std	Y+6, r19	; 0x06
    1086:	2d 83       	std	Y+5, r18	; 0x05
    1088:	8b 85       	ldd	r24, Y+11	; 0x0b
    108a:	9c 85       	ldd	r25, Y+12	; 0x0c
    108c:	82 2b       	or	r24, r18
    108e:	93 2b       	or	r25, r19
    1090:	9c 87       	std	Y+12, r25	; 0x0c
    1092:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1094:	c4 01       	movw	r24, r8
    1096:	6b 85       	ldd	r22, Y+11	; 0x0b
    1098:	7c 85       	ldd	r23, Y+12	; 0x0c
    109a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		
		count_finished = FALSE;
    109e:	10 92 fd 02 	sts	0x02FD, r1
		period_counter = 0;
    10a2:	10 92 00 03 	sts	0x0300, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    10a6:	8f e0       	ldi	r24, 0x0F	; 15
    10a8:	e8 e1       	ldi	r30, 0x18	; 24
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	a8 95       	wdr
    10b2:	e0 93 60 00 	sts	0x0060, r30
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    10bc:	80 91 fd 02 	lds	r24, 0x02FD
    10c0:	88 23       	and	r24, r24
    10c2:	89 f5       	brne	.+98     	; 0x1126 <__stack+0x27>
			
			update_display(vco + 1, DEC);
    10c4:	c8 01       	movw	r24, r16
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	0e 94 27 02 	call	0x44e	; 0x44e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    10cc:	c4 01       	movw	r24, r8
    10ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    10d6:	c1 01       	movw	r24, r2
    10d8:	6f ef       	ldi	r22, 0xFF	; 255
    10da:	7f e3       	ldi	r23, 0x3F	; 63
    10dc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    10e0:	c7 01       	movw	r24, r14
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    10ea:	c6 01       	movw	r24, r12
    10ec:	6f ef       	ldi	r22, 0xFF	; 255
    10ee:	7f e3       	ldi	r23, 0x3F	; 63
    10f0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    10f4:	c5 01       	movw	r24, r10
    10f6:	6f ef       	ldi	r22, 0xFF	; 255
    10f8:	7f e3       	ldi	r23, 0x3F	; 63
    10fa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    10fe:	c3 01       	movw	r24, r6
    1100:	6f ef       	ldi	r22, 0xFF	; 255
    1102:	7f e3       	ldi	r23, 0x3F	; 63
    1104:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	9a 81       	ldd	r25, Y+2	; 0x02
    110c:	6f ef       	ldi	r22, 0xFF	; 255
    110e:	7f e3       	ldi	r23, 0x3F	; 63
    1110:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1114:	c2 01       	movw	r24, r4
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    111e:	80 91 fd 02 	lds	r24, 0x02FD
    1122:	88 23       	and	r24, r24
    1124:	79 f2       	breq	.-98     	; 0x10c4 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1126:	88 e1       	ldi	r24, 0x18	; 24
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	80 93 60 00 	sts	0x0060, r24
    1130:	10 92 60 00 	sts	0x0060, r1
    1134:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1136:	80 91 fb 02 	lds	r24, 0x02FB
    113a:	90 91 fc 02 	lds	r25, 0x02FC
    113e:	ef 81       	ldd	r30, Y+7	; 0x07
    1140:	f8 85       	ldd	r31, Y+8	; 0x08
    1142:	e8 17       	cp	r30, r24
    1144:	f9 07       	cpc	r31, r25
    1146:	20 f0       	brcs	.+8      	; 0x1150 <__stack+0x51>
    1148:	80 91 37 02 	lds	r24, 0x0237
    114c:	88 23       	and	r24, r24
    114e:	51 f4       	brne	.+20     	; 0x1164 <__stack+0x65>
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	80 95       	com	r24
    1156:	90 95       	com	r25
    1158:	2b 85       	ldd	r18, Y+11	; 0x0b
    115a:	3c 85       	ldd	r19, Y+12	; 0x0c
    115c:	28 23       	and	r18, r24
    115e:	39 23       	and	r19, r25
    1160:	3c 87       	std	Y+12, r19	; 0x0c
    1162:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	80 93 37 02 	sts	0x0237, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9c 83       	std	Y+4, r25	; 0x04
    1172:	8b 83       	std	Y+3, r24	; 0x03
    1174:	ef ef       	ldi	r30, 0xFF	; 255
    1176:	8f 3f       	cpi	r24, 0xFF	; 255
    1178:	9e 07       	cpc	r25, r30
    117a:	09 f0       	breq	.+2      	; 0x117e <__stack+0x7f>
    117c:	7b cf       	rjmp	.-266    	; 0x1074 <set_vco_init_cv+0x136>
    117e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1180:	3c 85       	ldd	r19, Y+12	; 0x0c
    1182:	3e 83       	std	Y+6, r19	; 0x06
    1184:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1186:	80 e1       	ldi	r24, 0x10	; 16
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    1192:	82 e1       	ldi	r24, 0x12	; 18
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    119e:	88 e2       	ldi	r24, 0x28	; 40
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    11aa:	80 e3       	ldi	r24, 0x30	; 48
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    11b6:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    11b8:	ee e6       	ldi	r30, 0x6E	; 110
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8d 7f       	andi	r24, 0xFD	; 253
    11c0:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    11c2:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    11c4:	89 85       	ldd	r24, Y+9	; 0x09
    11c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c8:	6d 81       	ldd	r22, Y+5	; 0x05
    11ca:	7e 81       	ldd	r23, Y+6	; 0x06
    11cc:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	2c 96       	adiw	r28, 0x0c	; 12
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	df 90       	pop	r13
    11ee:	cf 90       	pop	r12
    11f0:	bf 90       	pop	r11
    11f2:	af 90       	pop	r10
    11f4:	9f 90       	pop	r9
    11f6:	8f 90       	pop	r8
    11f8:	7f 90       	pop	r7
    11fa:	6f 90       	pop	r6
    11fc:	5f 90       	pop	r5
    11fe:	4f 90       	pop	r4
    1200:	3f 90       	pop	r3
    1202:	2f 90       	pop	r2
    1204:	08 95       	ret

00001206 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1206:	2f 92       	push	r2
    1208:	3f 92       	push	r3
    120a:	4f 92       	push	r4
    120c:	5f 92       	push	r5
    120e:	6f 92       	push	r6
    1210:	7f 92       	push	r7
    1212:	8f 92       	push	r8
    1214:	9f 92       	push	r9
    1216:	af 92       	push	r10
    1218:	bf 92       	push	r11
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	c0 54       	subi	r28, 0x40	; 64
    1230:	d0 40       	sbci	r29, 0x00	; 0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    123e:	de 01       	movw	r26, r28
    1240:	11 96       	adiw	r26, 0x01	; 1
    1242:	e8 eb       	ldi	r30, 0xB8	; 184
    1244:	f1 e0       	ldi	r31, 0x01	; 1
    1246:	80 e3       	ldi	r24, 0x30	; 48
    1248:	01 90       	ld	r0, Z+
    124a:	0d 92       	st	X+, r0
    124c:	81 50       	subi	r24, 0x01	; 1
    124e:	e1 f7       	brne	.-8      	; 0x1248 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    1250:	0e 94 20 07 	call	0xe40	; 0xe40 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1254:	0f 30       	cpi	r16, 0x0F	; 15
    1256:	11 f5       	brne	.+68     	; 0x129c <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    1258:	40 90 f8 02 	lds	r4, 0x02F8
    125c:	50 90 f9 02 	lds	r5, 0x02F9
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1260:	0f 2e       	mov	r0, r31
    1262:	fc e4       	ldi	r31, 0x4C	; 76
    1264:	8f 2e       	mov	r8, r31
    1266:	f1 e0       	ldi	r31, 0x01	; 1
    1268:	9f 2e       	mov	r9, r31
    126a:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    126c:	0f 2e       	mov	r0, r31
    126e:	fc e3       	ldi	r31, 0x3C	; 60
    1270:	2f 2e       	mov	r2, r31
    1272:	f1 e0       	ldi	r31, 0x01	; 1
    1274:	3f 2e       	mov	r3, r31
    1276:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    1278:	26 e4       	ldi	r18, 0x46	; 70
    127a:	31 e0       	ldi	r19, 0x01	; 1
    127c:	3a ab       	sts	0x5a, r19
    127e:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1280:	0f 2e       	mov	r0, r31
    1282:	f8 e3       	ldi	r31, 0x38	; 56
    1284:	6f 2e       	mov	r6, r31
    1286:	f1 e0       	ldi	r31, 0x01	; 1
    1288:	7f 2e       	mov	r7, r31
    128a:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    128c:	04 ed       	ldi	r16, 0xD4	; 212
    128e:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    1290:	cc 24       	eor	r12, r12
    1292:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    1294:	ee 24       	eor	r14, r14
    1296:	68 94       	set
    1298:	e1 f8       	bld	r14, 1
    129a:	22 c0       	rjmp	.+68     	; 0x12e0 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    129c:	40 90 f6 02 	lds	r4, 0x02F6
    12a0:	50 90 f7 02 	lds	r5, 0x02F7
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    12a4:	0f 2e       	mov	r0, r31
    12a6:	fa e4       	ldi	r31, 0x4A	; 74
    12a8:	8f 2e       	mov	r8, r31
    12aa:	f1 e0       	ldi	r31, 0x01	; 1
    12ac:	9f 2e       	mov	r9, r31
    12ae:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    12b0:	0f 2e       	mov	r0, r31
    12b2:	fe e2       	ldi	r31, 0x2E	; 46
    12b4:	2f 2e       	mov	r2, r31
    12b6:	f1 e0       	ldi	r31, 0x01	; 1
    12b8:	3f 2e       	mov	r3, r31
    12ba:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    12bc:	48 e4       	ldi	r20, 0x48	; 72
    12be:	51 e0       	ldi	r21, 0x01	; 1
    12c0:	5a ab       	sts	0x5a, r21
    12c2:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    12c4:	0f 2e       	mov	r0, r31
    12c6:	fa e3       	ldi	r31, 0x3A	; 58
    12c8:	6f 2e       	mov	r6, r31
    12ca:	f1 e0       	ldi	r31, 0x01	; 1
    12cc:	7f 2e       	mov	r7, r31
    12ce:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    12d0:	02 eb       	ldi	r16, 0xB2	; 178
    12d2:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    12d4:	cc 24       	eor	r12, r12
    12d6:	68 94       	set
    12d8:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    12da:	ee 24       	eor	r14, r14
    12dc:	68 94       	set
    12de:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    12e0:	c3 01       	movw	r24, r6
    12e2:	b2 01       	movw	r22, r4
    12e4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    12e8:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    12ea:	ed ed       	ldi	r30, 0xDD	; 221
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 64       	ori	r24, 0x40	; 64
    12f2:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    12f4:	80 81       	ld	r24, Z
    12f6:	8f 7b       	andi	r24, 0xBF	; 191
    12f8:	80 83       	st	Z, r24
		DATA_BUS = 0;
    12fa:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    12fc:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	80 93 ff 02 	sts	0x02FF, r24
		
		compare_match_counter = 0;	
    1304:	10 92 fa 02 	sts	0x02FA, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1308:	8c 2d       	mov	r24, r12
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	24 e6       	ldi	r18, 0x64	; 100
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	82 9f       	mul	r24, r18
    1312:	d0 01       	movw	r26, r0
    1314:	83 9f       	mul	r24, r19
    1316:	b0 0d       	add	r27, r0
    1318:	92 9f       	mul	r25, r18
    131a:	b0 0d       	add	r27, r0
    131c:	11 24       	eor	r1, r1
    131e:	bc ab       	sts	0x5c, r27
    1320:	ab ab       	sts	0x5b, r26
    1322:	fe 01       	movw	r30, r28
    1324:	31 96       	adiw	r30, 0x01	; 1
    1326:	fc af       	sts	0x7c, r31
    1328:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    132a:	98 01       	movw	r18, r16
    132c:	2e 5f       	subi	r18, 0xFE	; 254
    132e:	3f 4f       	sbci	r19, 0xFF	; 255
    1330:	21 96       	adiw	r28, 0x01	; 1
    1332:	3f af       	sts	0x7f, r19
    1334:	2e af       	sts	0x7e, r18
    1336:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1338:	1e ae       	sts	0xbe, r17
    133a:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    133c:	0f 2e       	mov	r0, r31
    133e:	f0 e3       	ldi	r31, 0x30	; 48
    1340:	ef 2e       	mov	r14, r31
    1342:	f1 e0       	ldi	r31, 0x01	; 1
    1344:	ff 2e       	mov	r15, r31
    1346:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    1348:	0f 2e       	mov	r0, r31
    134a:	f8 e2       	ldi	r31, 0x28	; 40
    134c:	cf 2e       	mov	r12, r31
    134e:	f1 e0       	ldi	r31, 0x01	; 1
    1350:	df 2e       	mov	r13, r31
    1352:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1354:	0f 2e       	mov	r0, r31
    1356:	f4 e1       	ldi	r31, 0x14	; 20
    1358:	af 2e       	mov	r10, r31
    135a:	f1 e0       	ldi	r31, 0x01	; 1
    135c:	bf 2e       	mov	r11, r31
    135e:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    1360:	eb ad       	sts	0x6b, r30
    1362:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    1364:	80 81       	ld	r24, Z
    1366:	80 93 ff 02 	sts	0x02FF, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    136a:	84 b5       	in	r24, 0x24	; 36
    136c:	8f 60       	ori	r24, 0x0F	; 15
    136e:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    1374:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    1376:	4d ad       	sts	0x6d, r20
    1378:	5e ad       	sts	0x6e, r21
    137a:	43 30       	cpi	r20, 0x03	; 3
    137c:	51 05       	cpc	r21, r1
    137e:	24 f4       	brge	.+8      	; 0x1388 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	80 93 fe 02 	sts	0x02FE, r24
    1386:	03 c0       	rjmp	.+6      	; 0x138e <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	80 93 fe 02 	sts	0x02FE, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    138e:	81 81       	ldd	r24, Z+1	; 0x01
    1390:	92 81       	ldd	r25, Z+2	; 0x02
    1392:	9a af       	sts	0x7a, r25
    1394:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1396:	ad e0       	ldi	r26, 0x0D	; 13
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	be ab       	sts	0x5e, r27
    139c:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    139e:	00 e0       	ldi	r16, 0x00	; 0
    13a0:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    13a2:	e1 e0       	ldi	r30, 0x01	; 1
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	0d a8       	sts	0x8d, r16
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <tune_8ths+0x1a8>
    13aa:	ee 0f       	add	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <tune_8ths+0x1a4>
    13b2:	f8 af       	sts	0x78, r31
    13b4:	ef ab       	sts	0x5f, r30
    13b6:	0e 2b       	or	r16, r30
    13b8:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    13ba:	ae e6       	ldi	r26, 0x6E	; 110
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	8c 91       	ld	r24, X
    13c0:	8d 7f       	andi	r24, 0xFD	; 253
    13c2:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    13c4:	c4 01       	movw	r24, r8
    13c6:	b8 01       	movw	r22, r16
    13c8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
    13cc:	e3 ef       	ldi	r30, 0xF3	; 243
    13ce:	f1 e0       	ldi	r31, 0x01	; 1
    13d0:	31 97       	sbiw	r30, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <tune_8ths+0x1ca>
    13d4:	00 c0       	rjmp	.+0      	; 0x13d6 <tune_8ths+0x1d0>
    13d6:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    13d8:	ae e6       	ldi	r26, 0x6E	; 110
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	8c 91       	ld	r24, X
    13de:	82 60       	ori	r24, 0x02	; 2
    13e0:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    13e2:	10 92 fd 02 	sts	0x02FD, r1
				period_counter = 0;
    13e6:	10 92 00 03 	sts	0x0300, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    13ea:	e8 e1       	ldi	r30, 0x18	; 24
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	2f e0       	ldi	r18, 0x0F	; 15
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	a8 95       	wdr
    13f6:	e0 93 60 00 	sts	0x0060, r30
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    1400:	80 91 fd 02 	lds	r24, 0x02FD
    1404:	88 23       	and	r24, r24
    1406:	81 f5       	brne	.+96     	; 0x1468 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1408:	80 91 ff 02 	lds	r24, 0x02FF
    140c:	4b a9       	sts	0x4b, r20
    140e:	5c a9       	sts	0x4c, r21
    1410:	48 0f       	add	r20, r24
    1412:	51 1d       	adc	r21, r1
    1414:	ca 01       	movw	r24, r20
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	0e 94 27 02 	call	0x44e	; 0x44e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    141c:	c3 01       	movw	r24, r6
    141e:	b2 01       	movw	r22, r4
    1420:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1424:	c4 01       	movw	r24, r8
    1426:	b8 01       	movw	r22, r16
    1428:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    142c:	c7 01       	movw	r24, r14
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    1436:	c6 01       	movw	r24, r12
    1438:	6f ef       	ldi	r22, 0xFF	; 255
    143a:	7f e3       	ldi	r23, 0x3F	; 63
    143c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    1440:	c5 01       	movw	r24, r10
    1442:	6f ef       	ldi	r22, 0xFF	; 255
    1444:	7f e3       	ldi	r23, 0x3F	; 63
    1446:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    144a:	c1 01       	movw	r24, r2
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e2       	ldi	r23, 0x20	; 32
    1450:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    1454:	89 a9       	sts	0x49, r24
    1456:	9a a9       	sts	0x4a, r25
    1458:	6f ef       	ldi	r22, 0xFF	; 255
    145a:	7f e3       	ldi	r23, 0x3F	; 63
    145c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    1460:	80 91 fd 02 	lds	r24, 0x02FD
    1464:	88 23       	and	r24, r24
    1466:	81 f2       	breq	.-96     	; 0x1408 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    1468:	58 e1       	ldi	r21, 0x18	; 24
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	50 93 60 00 	sts	0x0060, r21
    1472:	10 92 60 00 	sts	0x0060, r1
    1476:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    1478:	80 91 fb 02 	lds	r24, 0x02FB
    147c:	90 91 fc 02 	lds	r25, 0x02FC
    1480:	a9 ad       	sts	0x69, r26
    1482:	ba ad       	sts	0x6a, r27
    1484:	a8 17       	cp	r26, r24
    1486:	b9 07       	cpc	r27, r25
    1488:	50 f0       	brcs	.+20     	; 0x149e <tune_8ths+0x298>
    148a:	80 91 37 02 	lds	r24, 0x0237
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	31 f4       	brne	.+12     	; 0x149e <tune_8ths+0x298>
    1492:	8f a9       	sts	0x4f, r24
    1494:	98 ad       	sts	0x68, r25
    1496:	80 95       	com	r24
    1498:	90 95       	com	r25
    149a:	08 23       	and	r16, r24
    149c:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    149e:	80 91 fb 02 	lds	r24, 0x02FB
    14a2:	90 91 fc 02 	lds	r25, 0x02FC
    14a6:	e9 ad       	sts	0x69, r30
    14a8:	fa ad       	sts	0x6a, r31
    14aa:	8e 17       	cp	r24, r30
    14ac:	9f 07       	cpc	r25, r31
    14ae:	21 f4       	brne	.+8      	; 0x14b8 <tune_8ths+0x2b2>
    14b0:	80 91 37 02 	lds	r24, 0x0237
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	71 f0       	breq	.+28     	; 0x14d4 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    14b8:	f1 e0       	ldi	r31, 0x01	; 1
    14ba:	f0 93 37 02 	sts	0x0237, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    14be:	2d a9       	sts	0x4d, r18
    14c0:	3e a9       	sts	0x4e, r19
    14c2:	21 50       	subi	r18, 0x01	; 1
    14c4:	30 40       	sbci	r19, 0x00	; 0
    14c6:	3e ab       	sts	0x5e, r19
    14c8:	2d ab       	sts	0x5d, r18
    14ca:	4f ef       	ldi	r20, 0xFF	; 255
    14cc:	2f 3f       	cpi	r18, 0xFF	; 255
    14ce:	34 07       	cpc	r19, r20
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <tune_8ths+0x2ce>
    14d2:	67 cf       	rjmp	.-306    	; 0x13a2 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    14d4:	21 96       	adiw	r28, 0x01	; 1
    14d6:	ae ad       	sts	0x6e, r26
    14d8:	bf ad       	sts	0x6f, r27
    14da:	21 97       	sbiw	r28, 0x01	; 1
    14dc:	0d 93       	st	X+, r16
    14de:	1d 93       	st	X+, r17
    14e0:	21 96       	adiw	r28, 0x01	; 1
    14e2:	bf af       	sts	0x7f, r27
    14e4:	ae af       	sts	0x7e, r26
    14e6:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    14e8:	ee e6       	ldi	r30, 0x6E	; 110
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8d 7f       	andi	r24, 0xFD	; 253
    14f0:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    14f2:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    14f4:	2d ad       	sts	0x6d, r18
    14f6:	3e ad       	sts	0x6e, r19
    14f8:	2f 5f       	subi	r18, 0xFF	; 255
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
    14fc:	3e af       	sts	0x7e, r19
    14fe:	2d af       	sts	0x7d, r18
    1500:	4b ad       	sts	0x6b, r20
    1502:	5c ad       	sts	0x6c, r21
    1504:	4d 5f       	subi	r20, 0xFD	; 253
    1506:	5f 4f       	sbci	r21, 0xFF	; 255
    1508:	5c af       	sts	0x7c, r21
    150a:	4b af       	sts	0x7b, r20
    150c:	20 31       	cpi	r18, 0x10	; 16
    150e:	31 05       	cpc	r19, r1
    1510:	09 f0       	breq	.+2      	; 0x1514 <tune_8ths+0x30e>
    1512:	26 cf       	rjmp	.-436    	; 0x1360 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		
		PORTF &= ~(1<<GATE); //turn gate off
    1514:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    1516:	c0 5c       	subi	r28, 0xC0	; 192
    1518:	df 4f       	sbci	r29, 0xFF	; 255
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
    1532:	cf 90       	pop	r12
    1534:	bf 90       	pop	r11
    1536:	af 90       	pop	r10
    1538:	9f 90       	pop	r9
    153a:	8f 90       	pop	r8
    153c:	7f 90       	pop	r7
    153e:	6f 90       	pop	r6
    1540:	5f 90       	pop	r5
    1542:	4f 90       	pop	r4
    1544:	3f 90       	pop	r3
    1546:	2f 90       	pop	r2
    1548:	08 95       	ret

0000154a <tune_filter>:
	
void tune_filter(void) {
    154a:	2f 92       	push	r2
    154c:	3f 92       	push	r3
    154e:	4f 92       	push	r4
    1550:	5f 92       	push	r5
    1552:	6f 92       	push	r6
    1554:	7f 92       	push	r7
    1556:	8f 92       	push	r8
    1558:	9f 92       	push	r9
    155a:	af 92       	push	r10
    155c:	bf 92       	push	r11
    155e:	cf 92       	push	r12
    1560:	df 92       	push	r13
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	e9 97       	sbiw	r28, 0x39	; 57
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    157e:	de 01       	movw	r26, r28
    1580:	11 96       	adiw	r26, 0x01	; 1
    1582:	e8 ee       	ldi	r30, 0xE8	; 232
    1584:	f1 e0       	ldi	r31, 0x01	; 1
    1586:	8d e2       	ldi	r24, 0x2D	; 45
    1588:	01 90       	ld	r0, Z+
    158a:	0d 92       	st	X+, r0
    158c:	81 50       	subi	r24, 0x01	; 1
    158e:	e1 f7       	brne	.-8      	; 0x1588 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1590:	80 e3       	ldi	r24, 0x30	; 48
    1592:	91 e0       	ldi	r25, 0x01	; 1
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    159c:	82 e4       	ldi	r24, 0x42	; 66
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    15a8:	84 e4       	ldi	r24, 0x44	; 68
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    15b4:	8b e3       	ldi	r24, 0x3B	; 59
    15b6:	92 e0       	ldi	r25, 0x02	; 2
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    15c0:	84 e3       	ldi	r24, 0x34	; 52
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    15cc:	8e e3       	ldi	r24, 0x3E	; 62
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    15d8:	80 e4       	ldi	r24, 0x40	; 64
    15da:	91 e0       	ldi	r25, 0x01	; 1
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    15e4:	82 e2       	ldi	r24, 0x22	; 34
    15e6:	91 e0       	ldi	r25, 0x01	; 1
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    15f0:	8c e2       	ldi	r24, 0x2C	; 44
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    15fc:	84 e2       	ldi	r24, 0x24	; 36
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1608:	86 e2       	ldi	r24, 0x26	; 38
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    1614:	88 e2       	ldi	r24, 0x28	; 40
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	6f ef       	ldi	r22, 0xFF	; 255
    161a:	7f e3       	ldi	r23, 0x3F	; 63
    161c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    1620:	8a e2       	ldi	r24, 0x2A	; 42
    1622:	91 e0       	ldi	r25, 0x01	; 1
    1624:	6f ef       	ldi	r22, 0xFF	; 255
    1626:	7f e3       	ldi	r23, 0x3F	; 63
    1628:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    162c:	82 e3       	ldi	r24, 0x32	; 50
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1638:	8c e1       	ldi	r24, 0x1C	; 28
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1644:	88 e1       	ldi	r24, 0x18	; 24
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1650:	84 e1       	ldi	r24, 0x14	; 20
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	6f ef       	ldi	r22, 0xFF	; 255
    1656:	7f e3       	ldi	r23, 0x3F	; 63
    1658:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    165c:	80 e1       	ldi	r24, 0x10	; 16
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    1668:	80 e2       	ldi	r24, 0x20	; 32
    166a:	91 e0       	ldi	r25, 0x01	; 1
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1674:	86 e4       	ldi	r24, 0x46	; 70
    1676:	91 e0       	ldi	r25, 0x01	; 1
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1680:	88 e4       	ldi	r24, 0x48	; 72
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    168c:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    168e:	ed ed       	ldi	r30, 0xDD	; 221
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	80 64       	ori	r24, 0x40	; 64
    1696:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1698:	80 81       	ld	r24, Z
    169a:	8f 7b       	andi	r24, 0xBF	; 191
    169c:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 ff 02 	sts	0x02FF, r24
	PORTF |= (1<<GATE); //turn gate on
    16a4:	89 9a       	sbi	0x11, 1	; 17
    16a6:	9e 01       	movw	r18, r28
    16a8:	2f 5f       	subi	r18, 0xFF	; 255
    16aa:	3f 4f       	sbci	r19, 0xFF	; 255
    16ac:	3d ab       	sts	0x5d, r19
    16ae:	2c ab       	sts	0x5c, r18
    16b0:	84 e9       	ldi	r24, 0x94	; 148
    16b2:	92 e0       	ldi	r25, 0x02	; 2
    16b4:	99 af       	sts	0x79, r25
    16b6:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    16b8:	1f aa       	sts	0x9f, r17
    16ba:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    16bc:	0f 2e       	mov	r0, r31
    16be:	f8 e2       	ldi	r31, 0x28	; 40
    16c0:	af 2e       	mov	r10, r31
    16c2:	f1 e0       	ldi	r31, 0x01	; 1
    16c4:	bf 2e       	mov	r11, r31
    16c6:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    16c8:	0f 2e       	mov	r0, r31
    16ca:	f0 e3       	ldi	r31, 0x30	; 48
    16cc:	6f 2e       	mov	r6, r31
    16ce:	f1 e0       	ldi	r31, 0x01	; 1
    16d0:	7f 2e       	mov	r7, r31
    16d2:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    16d4:	0f 2e       	mov	r0, r31
    16d6:	fa e2       	ldi	r31, 0x2A	; 42
    16d8:	4f 2e       	mov	r4, r31
    16da:	f1 e0       	ldi	r31, 0x01	; 1
    16dc:	5f 2e       	mov	r5, r31
    16de:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    16e0:	0f 2e       	mov	r0, r31
    16e2:	f4 e1       	ldi	r31, 0x14	; 20
    16e4:	2f 2e       	mov	r2, r31
    16e6:	f1 e0       	ldi	r31, 0x01	; 1
    16e8:	3f 2e       	mov	r3, r31
    16ea:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    16ec:	ac a9       	sts	0x4c, r26
    16ee:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    16f0:	8c 91       	ld	r24, X
    16f2:	80 93 ff 02 	sts	0x02FF, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    16f6:	84 b5       	in	r24, 0x24	; 36
    16f8:	8f 60       	ori	r24, 0x0F	; 15
    16fa:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1700:	ee e6       	ldi	r30, 0x6E	; 110
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	82 60       	ori	r24, 0x02	; 2
    1708:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    170a:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    170c:	ee a9       	sts	0x4e, r30
    170e:	ff a9       	sts	0x4f, r31
    1710:	e2 30       	cpi	r30, 0x02	; 2
    1712:	f1 05       	cpc	r31, r1
    1714:	24 f4       	brge	.+8      	; 0x171e <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    1716:	83 e0       	ldi	r24, 0x03	; 3
    1718:	80 93 fe 02 	sts	0x02FE, r24
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    171e:	82 e0       	ldi	r24, 0x02	; 2
    1720:	80 93 fe 02 	sts	0x02FE, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    1724:	11 96       	adiw	r26, 0x01	; 1
    1726:	2d 91       	ld	r18, X+
    1728:	3c 91       	ld	r19, X
    172a:	12 97       	sbiw	r26, 0x02	; 2
    172c:	3b ab       	sts	0x5b, r19
    172e:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1730:	8d e0       	ldi	r24, 0x0D	; 13
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9f a7       	lds	r25, 0x7f
    1736:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    1738:	ee 24       	eor	r14, r14
    173a:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    173c:	0f 2e       	mov	r0, r31
    173e:	f2 e2       	ldi	r31, 0x22	; 34
    1740:	cf 2e       	mov	r12, r31
    1742:	f1 e0       	ldi	r31, 0x01	; 1
    1744:	df 2e       	mov	r13, r31
    1746:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    1748:	0f 2e       	mov	r0, r31
    174a:	fc e2       	ldi	r31, 0x2C	; 44
    174c:	8f 2e       	mov	r8, r31
    174e:	f1 e0       	ldi	r31, 0x01	; 1
    1750:	9f 2e       	mov	r9, r31
    1752:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	fc 01       	movw	r30, r24
    175a:	0e a4       	lds	r16, 0xae
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <tune_filter+0x218>
    175e:	ee 0f       	add	r30, r30
    1760:	ff 1f       	adc	r31, r31
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <tune_filter+0x214>
    1766:	f9 ab       	sts	0x59, r31
    1768:	e8 ab       	sts	0x58, r30
    176a:	ee 2a       	or	r14, r30
    176c:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    176e:	c5 01       	movw	r24, r10
    1770:	b7 01       	movw	r22, r14
    1772:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			count_finished = FALSE;
    1776:	10 92 fd 02 	sts	0x02FD, r1
			period_counter = 0;
    177a:	10 92 00 03 	sts	0x0300, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    177e:	8f e0       	ldi	r24, 0x0F	; 15
    1780:	28 e1       	ldi	r18, 0x18	; 24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	a8 95       	wdr
    178a:	20 93 60 00 	sts	0x0060, r18
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    1794:	80 91 fd 02 	lds	r24, 0x02FD
    1798:	88 23       	and	r24, r24
    179a:	b1 f5       	brne	.+108    	; 0x1808 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    179c:	04 e2       	ldi	r16, 0x24	; 36
    179e:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    17a0:	80 91 ff 02 	lds	r24, 0x02FF
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	84 5d       	subi	r24, 0xD4	; 212
    17a8:	9e 4f       	sbci	r25, 0xFE	; 254
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	0e 94 27 02 	call	0x44e	; 0x44e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    17b0:	c5 01       	movw	r24, r10
    17b2:	b7 01       	movw	r22, r14
    17b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    17b8:	c3 01       	movw	r24, r6
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    17c2:	c2 01       	movw	r24, r4
    17c4:	6f ef       	ldi	r22, 0xFF	; 255
    17c6:	7f e3       	ldi	r23, 0x3F	; 63
    17c8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    17cc:	c1 01       	movw	r24, r2
    17ce:	6f ef       	ldi	r22, 0xFF	; 255
    17d0:	7f e3       	ldi	r23, 0x3F	; 63
    17d2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    17d6:	8c e1       	ldi	r24, 0x1C	; 28
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    17e2:	c6 01       	movw	r24, r12
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    17ec:	c4 01       	movw	r24, r8
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    17f6:	c8 01       	movw	r24, r16
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    1800:	80 91 fd 02 	lds	r24, 0x02FD
    1804:	88 23       	and	r24, r24
    1806:	61 f2       	breq	.-104    	; 0x17a0 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    1808:	88 e1       	ldi	r24, 0x18	; 24
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	80 93 60 00 	sts	0x0060, r24
    1812:	10 92 60 00 	sts	0x0060, r1
    1816:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    1818:	80 91 fb 02 	lds	r24, 0x02FB
    181c:	90 91 fc 02 	lds	r25, 0x02FC
    1820:	2a a9       	sts	0x4a, r18
    1822:	3b a9       	sts	0x4b, r19
    1824:	28 17       	cp	r18, r24
    1826:	39 07       	cpc	r19, r25
    1828:	50 f0       	brcs	.+20     	; 0x183e <tune_filter+0x2f4>
    182a:	80 91 37 02 	lds	r24, 0x0237
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	31 f4       	brne	.+12     	; 0x183e <tune_filter+0x2f4>
    1832:	88 a9       	sts	0x48, r24
    1834:	99 a9       	sts	0x49, r25
    1836:	80 95       	com	r24
    1838:	90 95       	com	r25
    183a:	e8 22       	and	r14, r24
    183c:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    183e:	80 91 fb 02 	lds	r24, 0x02FB
    1842:	90 91 fc 02 	lds	r25, 0x02FC
    1846:	ea a9       	sts	0x4a, r30
    1848:	fb a9       	sts	0x4b, r31
    184a:	8e 17       	cp	r24, r30
    184c:	9f 07       	cpc	r25, r31
    184e:	21 f4       	brne	.+8      	; 0x1858 <tune_filter+0x30e>
    1850:	80 91 37 02 	lds	r24, 0x0237
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	71 f0       	breq	.+28     	; 0x1874 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	80 93 37 02 	sts	0x0237, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    185e:	2e a5       	lds	r18, 0x6e
    1860:	3f a5       	lds	r19, 0x6f
    1862:	21 50       	subi	r18, 0x01	; 1
    1864:	30 40       	sbci	r19, 0x00	; 0
    1866:	3f a7       	lds	r19, 0x7f
    1868:	2e a7       	lds	r18, 0x7e
    186a:	8f ef       	ldi	r24, 0xFF	; 255
    186c:	2f 3f       	cpi	r18, 0xFF	; 255
    186e:	38 07       	cpc	r19, r24
    1870:	09 f0       	breq	.+2      	; 0x1874 <tune_filter+0x32a>
    1872:	70 cf       	rjmp	.-288    	; 0x1754 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    1874:	ee a9       	sts	0x4e, r30
    1876:	ff a9       	sts	0x4f, r31
    1878:	31 96       	adiw	r30, 0x01	; 1
    187a:	ff ab       	sts	0x5f, r31
    187c:	ee ab       	sts	0x5e, r30
    187e:	c7 01       	movw	r24, r14
    1880:	80 96       	adiw	r24, 0x20	; 32
    1882:	e8 ad       	sts	0x68, r30
    1884:	f9 ad       	sts	0x69, r31
    1886:	81 93       	st	Z+, r24
    1888:	91 93       	st	Z+, r25
    188a:	f9 af       	sts	0x79, r31
    188c:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    188e:	ee e6       	ldi	r30, 0x6E	; 110
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8d 7f       	andi	r24, 0xFD	; 253
    1896:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    1898:	14 bc       	out	0x24, r1	; 36
    189a:	2c a9       	sts	0x4c, r18
    189c:	3d a9       	sts	0x4d, r19
    189e:	2d 5f       	subi	r18, 0xFD	; 253
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	3d ab       	sts	0x5d, r19
    18a4:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    18a6:	8e a9       	sts	0x4e, r24
    18a8:	9f a9       	sts	0x4f, r25
    18aa:	8f 30       	cpi	r24, 0x0F	; 15
    18ac:	91 05       	cpc	r25, r1
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <tune_filter+0x368>
    18b0:	1d cf       	rjmp	.-454    	; 0x16ec <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    18b2:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    18b4:	e9 96       	adiw	r28, 0x39	; 57
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	df 90       	pop	r13
    18ce:	cf 90       	pop	r12
    18d0:	bf 90       	pop	r11
    18d2:	af 90       	pop	r10
    18d4:	9f 90       	pop	r9
    18d6:	8f 90       	pop	r8
    18d8:	7f 90       	pop	r7
    18da:	6f 90       	pop	r6
    18dc:	5f 90       	pop	r5
    18de:	4f 90       	pop	r4
    18e0:	3f 90       	pop	r3
    18e2:	2f 90       	pop	r2
    18e4:	08 95       	ret

000018e6 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    18e6:	82 e9       	ldi	r24, 0x92	; 146
    18e8:	92 e0       	ldi	r25, 0x02	; 2
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	40 e2       	ldi	r20, 0x20	; 32
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	0e 94 b6 14 	call	0x296c	; 0x296c <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    18f6:	84 ed       	ldi	r24, 0xD4	; 212
    18f8:	92 e0       	ldi	r25, 0x02	; 2
    18fa:	62 e4       	ldi	r22, 0x42	; 66
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	42 e2       	ldi	r20, 0x22	; 34
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	0e 94 b6 14 	call	0x296c	; 0x296c <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    1906:	82 eb       	ldi	r24, 0xB2	; 178
    1908:	92 e0       	ldi	r25, 0x02	; 2
    190a:	60 e2       	ldi	r22, 0x20	; 32
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	42 e2       	ldi	r20, 0x22	; 34
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	0e 94 b6 14 	call	0x296c	; 0x296c <__eeupd_block_m6450a>
	
	
}
    1916:	08 95       	ret

00001918 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    1918:	86 e6       	ldi	r24, 0x66	; 102
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 b0 14 	call	0x2960	; 0x2960 <__eerd_word_m6450a>
    1920:	90 93 f9 02 	sts	0x02F9, r25
    1924:	80 93 f8 02 	sts	0x02F8, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    1928:	84 e6       	ldi	r24, 0x64	; 100
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 b0 14 	call	0x2960	; 0x2960 <__eerd_word_m6450a>
    1930:	90 93 f7 02 	sts	0x02F7, r25
    1934:	80 93 f6 02 	sts	0x02F6, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    1938:	84 ed       	ldi	r24, 0xD4	; 212
    193a:	92 e0       	ldi	r25, 0x02	; 2
    193c:	62 e4       	ldi	r22, 0x42	; 66
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	42 e2       	ldi	r20, 0x22	; 34
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	0e 94 a0 14 	call	0x2940	; 0x2940 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    1948:	82 eb       	ldi	r24, 0xB2	; 178
    194a:	92 e0       	ldi	r25, 0x02	; 2
    194c:	60 e2       	ldi	r22, 0x20	; 32
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	42 e2       	ldi	r20, 0x22	; 34
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	0e 94 a0 14 	call	0x2940	; 0x2940 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    1958:	82 e9       	ldi	r24, 0x92	; 146
    195a:	92 e0       	ldi	r25, 0x02	; 2
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	0e 94 a0 14 	call	0x2940	; 0x2940 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    1968:	08 95       	ret

0000196a <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    196a:	98 2f       	mov	r25, r24
    196c:	96 95       	lsr	r25
    196e:	96 95       	lsr	r25
    1970:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    1972:	29 2f       	mov	r18, r25
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	f9 01       	movw	r30, r18
    1978:	31 97       	sbiw	r30, 0x01	; 1
    197a:	ee 0f       	add	r30, r30
    197c:	ff 1f       	adc	r31, r31
    197e:	e6 0f       	add	r30, r22
    1980:	f7 1f       	adc	r31, r23
    1982:	01 90       	ld	r0, Z+
    1984:	f0 81       	ld	r31, Z
    1986:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    1988:	22 0f       	add	r18, r18
    198a:	33 1f       	adc	r19, r19
    198c:	26 0f       	add	r18, r22
    198e:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    1990:	d9 01       	movw	r26, r18
    1992:	4d 91       	ld	r20, X+
    1994:	5c 91       	ld	r21, X
    1996:	11 97       	sbiw	r26, 0x01	; 1
    1998:	4e 1b       	sub	r20, r30
    199a:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    199c:	99 0f       	add	r25, r25
    199e:	99 0f       	add	r25, r25
    19a0:	99 0f       	add	r25, r25
    19a2:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	48 9f       	mul	r20, r24
    19a8:	90 01       	movw	r18, r0
    19aa:	49 9f       	mul	r20, r25
    19ac:	30 0d       	add	r19, r0
    19ae:	58 9f       	mul	r21, r24
    19b0:	30 0d       	add	r19, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	36 95       	lsr	r19
    19b6:	27 95       	ror	r18
    19b8:	36 95       	lsr	r19
    19ba:	27 95       	ror	r18
    19bc:	36 95       	lsr	r19
    19be:	27 95       	ror	r18
    19c0:	e2 0f       	add	r30, r18
    19c2:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    19c4:	8e 2f       	mov	r24, r30
    19c6:	9f 2f       	mov	r25, r31
    19c8:	08 95       	ret

000019ca <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	a2 97       	sbiw	r28, 0x22	; 34
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    19de:	de 01       	movw	r26, r28
    19e0:	11 96       	adiw	r26, 0x01	; 1
    19e2:	e5 e1       	ldi	r30, 0x15	; 21
    19e4:	f2 e0       	ldi	r31, 0x02	; 2
    19e6:	82 e2       	ldi	r24, 0x22	; 34
    19e8:	01 90       	ld	r0, Z+
    19ea:	0d 92       	st	X+, r0
    19ec:	81 50       	subi	r24, 0x01	; 1
    19ee:	e1 f7       	brne	.-8      	; 0x19e8 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    19f0:	a4 ed       	ldi	r26, 0xD4	; 212
    19f2:	b2 e0       	ldi	r27, 0x02	; 2
    19f4:	fe 01       	movw	r30, r28
    19f6:	31 96       	adiw	r30, 0x01	; 1
    19f8:	82 e2       	ldi	r24, 0x22	; 34
    19fa:	01 90       	ld	r0, Z+
    19fc:	0d 92       	st	X+, r0
    19fe:	81 50       	subi	r24, 0x01	; 1
    1a00:	e1 f7       	brne	.-8      	; 0x19fa <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    1a02:	a2 eb       	ldi	r26, 0xB2	; 178
    1a04:	b2 e0       	ldi	r27, 0x02	; 2
    1a06:	fe 01       	movw	r30, r28
    1a08:	31 96       	adiw	r30, 0x01	; 1
    1a0a:	82 e2       	ldi	r24, 0x22	; 34
    1a0c:	01 90       	ld	r0, Z+
    1a0e:	0d 92       	st	X+, r0
    1a10:	81 50       	subi	r24, 0x01	; 1
    1a12:	e1 f7       	brne	.-8      	; 0x1a0c <set_one_volt_per_octave+0x42>
	
	
    1a14:	a2 96       	adiw	r28, 0x22	; 34
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    1a26:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    1a28:	80 91 04 03 	lds	r24, 0x0304
    1a2c:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    1a2e:	89 27       	eor	r24, r25
    1a30:	80 93 04 03 	sts	0x0304, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    1a34:	89 23       	and	r24, r25
    1a36:	08 95       	ret

00001a38 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1a38:	ed ed       	ldi	r30, 0xDD	; 221
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	90 81       	ld	r25, Z
    1a3e:	9f 7b       	andi	r25, 0xBF	; 191
    1a40:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	21 70       	andi	r18, 0x01	; 1
    1a48:	30 70       	andi	r19, 0x00	; 0
    1a4a:	22 0f       	add	r18, r18
    1a4c:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    1a4e:	68 2f       	mov	r22, r24
    1a50:	62 95       	swap	r22
    1a52:	66 95       	lsr	r22
    1a54:	67 70       	andi	r22, 0x07	; 7
    1a56:	67 95       	ror	r22
    1a58:	66 27       	eor	r22, r22
    1a5a:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1a5c:	26 2b       	or	r18, r22
    1a5e:	98 2f       	mov	r25, r24
    1a60:	96 95       	lsr	r25
    1a62:	96 95       	lsr	r25
    1a64:	91 70       	andi	r25, 0x01	; 1
    1a66:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    1a68:	68 2f       	mov	r22, r24
    1a6a:	66 1f       	adc	r22, r22
    1a6c:	66 27       	eor	r22, r22
    1a6e:	66 1f       	adc	r22, r22
    1a70:	66 0f       	add	r22, r22
    1a72:	66 0f       	add	r22, r22
    1a74:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1a76:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    1a78:	a8 2f       	mov	r26, r24
    1a7a:	a6 95       	lsr	r26
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	a1 70       	andi	r26, 0x01	; 1
    1a80:	b0 70       	andi	r27, 0x00	; 0
    1a82:	bd 01       	movw	r22, r26
    1a84:	66 0f       	add	r22, r22
    1a86:	77 1f       	adc	r23, r23
    1a88:	66 0f       	add	r22, r22
    1a8a:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1a8c:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    1a8e:	68 2f       	mov	r22, r24
    1a90:	62 95       	swap	r22
    1a92:	6f 70       	andi	r22, 0x0F	; 15
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	61 70       	andi	r22, 0x01	; 1
    1a98:	70 70       	andi	r23, 0x00	; 0
    1a9a:	ab 01       	movw	r20, r22
    1a9c:	00 24       	eor	r0, r0
    1a9e:	56 95       	lsr	r21
    1aa0:	47 95       	ror	r20
    1aa2:	07 94       	ror	r0
    1aa4:	56 95       	lsr	r21
    1aa6:	47 95       	ror	r20
    1aa8:	07 94       	ror	r0
    1aaa:	54 2f       	mov	r21, r20
    1aac:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1aae:	62 2f       	mov	r22, r18
    1ab0:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	42 95       	swap	r20
    1ab6:	46 95       	lsr	r20
    1ab8:	46 95       	lsr	r20
    1aba:	43 70       	andi	r20, 0x03	; 3
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	41 70       	andi	r20, 0x01	; 1
    1ac0:	50 70       	andi	r21, 0x00	; 0
    1ac2:	9a 01       	movw	r18, r20
    1ac4:	22 0f       	add	r18, r18
    1ac6:	33 1f       	adc	r19, r19
    1ac8:	22 95       	swap	r18
    1aca:	32 95       	swap	r19
    1acc:	30 7f       	andi	r19, 0xF0	; 240
    1ace:	32 27       	eor	r19, r18
    1ad0:	20 7f       	andi	r18, 0xF0	; 240
    1ad2:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1ad4:	46 2f       	mov	r20, r22
    1ad6:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    1ad8:	86 95       	lsr	r24
    1ada:	86 95       	lsr	r24
    1adc:	86 95       	lsr	r24
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	21 70       	andi	r18, 0x01	; 1
    1ae4:	30 70       	andi	r19, 0x00	; 0
    1ae6:	c9 01       	movw	r24, r18
    1ae8:	82 95       	swap	r24
    1aea:	92 95       	swap	r25
    1aec:	90 7f       	andi	r25, 0xF0	; 240
    1aee:	98 27       	eor	r25, r24
    1af0:	80 7f       	andi	r24, 0xF0	; 240
    1af2:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1af4:	84 2b       	or	r24, r20
    1af6:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1af8:	80 81       	ld	r24, Z
    1afa:	80 64       	ori	r24, 0x40	; 64
    1afc:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1afe:	80 81       	ld	r24, Z
    1b00:	8f 7b       	andi	r24, 0xBF	; 191
    1b02:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1b04:	12 b8       	out	0x02, r1	; 2
	
	
    1b06:	08 95       	ret

00001b08 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1b08:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1b0a:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1b0c:	74 83       	std	Z+4, r23	; 0x04
    1b0e:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    1b10:	11 82       	std	Z+1, r1	; 0x01
    1b12:	10 82       	st	Z, r1
}
    1b14:	08 95       	ret

00001b16 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ec 01       	movw	r28, r24
    1b1e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1b20:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <store_and_clear_interrupt>
    1b24:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1b26:	39 81       	ldd	r19, Y+1	; 0x01
    1b28:	83 2f       	mov	r24, r19
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	6a 81       	ldd	r22, Y+2	; 0x02
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__divmodhi4>
    1b36:	48 81       	ld	r20, Y
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	84 17       	cp	r24, r20
    1b3c:	95 07       	cpc	r25, r21
    1b3e:	29 f4       	brne	.+10     	; 0x1b4a <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    1b40:	82 2f       	mov	r24, r18
    1b42:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <restore_interrupt_setting>
      return false;
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	11 c0       	rjmp	.+34     	; 0x1b6c <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    1b4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4e:	e3 0f       	add	r30, r19
    1b50:	f1 1d       	adc	r31, r1
    1b52:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	6a 81       	ldd	r22, Y+2	; 0x02
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__divmodhi4>
    1b62:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1b64:	82 2f       	mov	r24, r18
    1b66:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <restore_interrupt_setting>
      return true;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	08 95       	ret

00001b74 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1b7a:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1b7e:	29 81       	ldd	r18, Y+1	; 0x01
    1b80:	98 81       	ld	r25, Y
    1b82:	29 17       	cp	r18, r25
    1b84:	18 f0       	brcs	.+6      	; 0x1b8c <bytequeue_length+0x18>
      len = queue->end - queue->start;
    1b86:	c2 2f       	mov	r28, r18
    1b88:	c9 1b       	sub	r28, r25
    1b8a:	03 c0       	rjmp	.+6      	; 0x1b92 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    1b8c:	ca 81       	ldd	r28, Y+2	; 0x02
    1b8e:	c2 0f       	add	r28, r18
    1b90:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    1b92:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <restore_interrupt_setting>
   return len;
}
    1b96:	8c 2f       	mov	r24, r28
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1b9e:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1ba0:	20 81       	ld	r18, Z
    1ba2:	86 2f       	mov	r24, r22
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	82 0f       	add	r24, r18
    1ba8:	91 1d       	adc	r25, r1
    1baa:	62 81       	ldd	r22, Z+2	; 0x02
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__divmodhi4>
    1bb2:	03 80       	ldd	r0, Z+3	; 0x03
    1bb4:	f4 81       	ldd	r31, Z+4	; 0x04
    1bb6:	e0 2d       	mov	r30, r0
    1bb8:	e8 0f       	add	r30, r24
    1bba:	f9 1f       	adc	r31, r25
}
    1bbc:	80 81       	ld	r24, Z
    1bbe:	08 95       	ret

00001bc0 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	ec 01       	movw	r28, r24
    1bc8:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1bca:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <store_and_clear_interrupt>
    1bce:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1bd0:	88 81       	ld	r24, Y
    1bd2:	21 2f       	mov	r18, r17
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	28 0f       	add	r18, r24
    1bd8:	31 1d       	adc	r19, r1
    1bda:	6a 81       	ldd	r22, Y+2	; 0x02
    1bdc:	c9 01       	movw	r24, r18
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__divmodhi4>
    1be4:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    1be6:	84 2f       	mov	r24, r20
    1be8:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <restore_interrupt_setting>
}
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	1f 91       	pop	r17
    1bf2:	08 95       	ret

00001bf4 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    1bf4:	8f b7       	in	r24, 0x3f	; 63
   cli();
    1bf6:	f8 94       	cli
   return sreg;
}
    1bf8:	08 95       	ret

00001bfa <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1bfa:	8f bf       	out	0x3f, r24	; 63
}
    1bfc:	08 95       	ret

00001bfe <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1bfe:	88 1f       	adc	r24, r24
    1c00:	88 27       	eor	r24, r24
    1c02:	88 1f       	adc	r24, r24
    1c04:	08 95       	ret

00001c06 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	88 3f       	cpi	r24, 0xF8	; 248
    1c0a:	08 f4       	brcc	.+2      	; 0x1c0e <midi_is_realtime+0x8>
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
}
    1c0e:	89 2f       	mov	r24, r25
    1c10:	08 95       	ret

00001c12 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	20 7f       	andi	r18, 0xF0	; 240
    1c18:	30 70       	andi	r19, 0x00	; 0
    1c1a:	20 3c       	cpi	r18, 0xC0	; 192
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	e9 f1       	breq	.+122    	; 0x1c9a <midi_packet_length+0x88>
    1c20:	21 3c       	cpi	r18, 0xC1	; 193
    1c22:	31 05       	cpc	r19, r1
    1c24:	8c f4       	brge	.+34     	; 0x1c48 <midi_packet_length+0x36>
    1c26:	20 39       	cpi	r18, 0x90	; 144
    1c28:	31 05       	cpc	r19, r1
    1c2a:	e1 f0       	breq	.+56     	; 0x1c64 <midi_packet_length+0x52>
    1c2c:	21 39       	cpi	r18, 0x91	; 145
    1c2e:	31 05       	cpc	r19, r1
    1c30:	24 f4       	brge	.+8      	; 0x1c3a <midi_packet_length+0x28>
    1c32:	20 38       	cpi	r18, 0x80	; 128
    1c34:	31 05       	cpc	r19, r1
    1c36:	79 f5       	brne	.+94     	; 0x1c96 <midi_packet_length+0x84>
    1c38:	15 c0       	rjmp	.+42     	; 0x1c64 <midi_packet_length+0x52>
    1c3a:	20 3a       	cpi	r18, 0xA0	; 160
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	91 f0       	breq	.+36     	; 0x1c64 <midi_packet_length+0x52>
    1c40:	20 3b       	cpi	r18, 0xB0	; 176
    1c42:	31 05       	cpc	r19, r1
    1c44:	41 f5       	brne	.+80     	; 0x1c96 <midi_packet_length+0x84>
    1c46:	0e c0       	rjmp	.+28     	; 0x1c64 <midi_packet_length+0x52>
    1c48:	20 3e       	cpi	r18, 0xE0	; 224
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	59 f0       	breq	.+22     	; 0x1c64 <midi_packet_length+0x52>
    1c4e:	21 3e       	cpi	r18, 0xE1	; 225
    1c50:	31 05       	cpc	r19, r1
    1c52:	24 f4       	brge	.+8      	; 0x1c5c <midi_packet_length+0x4a>
    1c54:	20 3d       	cpi	r18, 0xD0	; 208
    1c56:	31 05       	cpc	r19, r1
    1c58:	f1 f4       	brne	.+60     	; 0x1c96 <midi_packet_length+0x84>
    1c5a:	1f c0       	rjmp	.+62     	; 0x1c9a <midi_packet_length+0x88>
    1c5c:	20 3f       	cpi	r18, 0xF0	; 240
    1c5e:	31 05       	cpc	r19, r1
    1c60:	d1 f4       	brne	.+52     	; 0x1c96 <midi_packet_length+0x84>
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    1c68:	86 3f       	cpi	r24, 0xF6	; 246
    1c6a:	79 f0       	breq	.+30     	; 0x1c8a <midi_packet_length+0x78>
    1c6c:	87 3f       	cpi	r24, 0xF7	; 247
    1c6e:	38 f4       	brcc	.+14     	; 0x1c7e <midi_packet_length+0x6c>
    1c70:	82 3f       	cpi	r24, 0xF2	; 242
    1c72:	a9 f0       	breq	.+42     	; 0x1c9e <midi_packet_length+0x8c>
    1c74:	83 3f       	cpi	r24, 0xF3	; 243
    1c76:	59 f0       	breq	.+22     	; 0x1c8e <midi_packet_length+0x7c>
    1c78:	81 3f       	cpi	r24, 0xF1	; 241
    1c7a:	59 f4       	brne	.+22     	; 0x1c92 <midi_packet_length+0x80>
    1c7c:	08 c0       	rjmp	.+16     	; 0x1c8e <midi_packet_length+0x7c>
    1c7e:	88 3f       	cpi	r24, 0xF8	; 248
    1c80:	40 f0       	brcs	.+16     	; 0x1c92 <midi_packet_length+0x80>
    1c82:	8d 3f       	cpi	r24, 0xFD	; 253
    1c84:	10 f0       	brcs	.+4      	; 0x1c8a <midi_packet_length+0x78>
    1c86:	8e 3f       	cpi	r24, 0xFE	; 254
    1c88:	20 f0       	brcs	.+8      	; 0x1c92 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	08 95       	ret
         }
      default:
         return UNDEFINED;
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1c9a:	82 e0       	ldi	r24, 0x02	; 2
    1c9c:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1c9e:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1ca0:	08 95       	ret

00001ca2 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    1ca2:	0f 93       	push	r16
    1ca4:	34 2f       	mov	r19, r20
    1ca6:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1ca8:	46 2f       	mov	r20, r22
    1caa:	4f 70       	andi	r20, 0x0F	; 15
    1cac:	40 6b       	ori	r20, 0xB0	; 176
    1cae:	23 2f       	mov	r18, r19
    1cb0:	2f 77       	andi	r18, 0x7F	; 127
    1cb2:	0f 77       	andi	r16, 0x7F	; 127
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	ed 91       	ld	r30, X+
    1cb8:	fc 91       	ld	r31, X
    1cba:	63 e0       	ldi	r22, 0x03	; 3
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1cc0:	0f 91       	pop	r16
    1cc2:	08 95       	ret

00001cc4 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1cc4:	0f 93       	push	r16
    1cc6:	34 2f       	mov	r19, r20
    1cc8:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1cca:	46 2f       	mov	r20, r22
    1ccc:	4f 70       	andi	r20, 0x0F	; 15
    1cce:	40 69       	ori	r20, 0x90	; 144
    1cd0:	23 2f       	mov	r18, r19
    1cd2:	2f 77       	andi	r18, 0x7F	; 127
    1cd4:	0f 77       	andi	r16, 0x7F	; 127
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	ed 91       	ld	r30, X+
    1cda:	fc 91       	ld	r31, X
    1cdc:	63 e0       	ldi	r22, 0x03	; 3
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1ce2:	0f 91       	pop	r16
    1ce4:	08 95       	ret

00001ce6 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    1ce6:	0f 93       	push	r16
    1ce8:	34 2f       	mov	r19, r20
    1cea:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1cec:	46 2f       	mov	r20, r22
    1cee:	4f 70       	andi	r20, 0x0F	; 15
    1cf0:	40 68       	ori	r20, 0x80	; 128
    1cf2:	23 2f       	mov	r18, r19
    1cf4:	2f 77       	andi	r18, 0x7F	; 127
    1cf6:	0f 77       	andi	r16, 0x7F	; 127
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	ed 91       	ld	r30, X+
    1cfc:	fc 91       	ld	r31, X
    1cfe:	63 e0       	ldi	r22, 0x03	; 3
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    1d04:	0f 91       	pop	r16
    1d06:	08 95       	ret

00001d08 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1d08:	0f 93       	push	r16
    1d0a:	34 2f       	mov	r19, r20
    1d0c:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    1d0e:	46 2f       	mov	r20, r22
    1d10:	4f 70       	andi	r20, 0x0F	; 15
    1d12:	40 6a       	ori	r20, 0xA0	; 160
    1d14:	23 2f       	mov	r18, r19
    1d16:	2f 77       	andi	r18, 0x7F	; 127
    1d18:	0f 77       	andi	r16, 0x7F	; 127
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	ed 91       	ld	r30, X+
    1d1e:	fc 91       	ld	r31, X
    1d20:	63 e0       	ldi	r22, 0x03	; 3
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    1d26:	0f 91       	pop	r16
    1d28:	08 95       	ret

00001d2a <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    1d2e:	20 e2       	ldi	r18, 0x20	; 32
    1d30:	40 30       	cpi	r20, 0x00	; 0
    1d32:	52 07       	cpc	r21, r18
    1d34:	44 f4       	brge	.+16     	; 0x1d46 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    1d36:	a0 ee       	ldi	r26, 0xE0	; 224
    1d38:	40 30       	cpi	r20, 0x00	; 0
    1d3a:	5a 07       	cpc	r21, r26
    1d3c:	3c f0       	brlt	.+14     	; 0x1d4c <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    1d3e:	8a 01       	movw	r16, r20
    1d40:	00 50       	subi	r16, 0x00	; 0
    1d42:	10 4e       	sbci	r17, 0xE0	; 224
    1d44:	05 c0       	rjmp	.+10     	; 0x1d50 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    1d46:	0f ef       	ldi	r16, 0xFF	; 255
    1d48:	1f e3       	ldi	r17, 0x3F	; 63
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    1d4c:	00 e0       	ldi	r16, 0x00	; 0
    1d4e:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1d50:	46 2f       	mov	r20, r22
    1d52:	4f 70       	andi	r20, 0x0F	; 15
    1d54:	40 6e       	ori	r20, 0xE0	; 224
    1d56:	20 2f       	mov	r18, r16
    1d58:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    1d5a:	00 0f       	add	r16, r16
    1d5c:	01 2f       	mov	r16, r17
    1d5e:	00 1f       	adc	r16, r16
    1d60:	11 0b       	sbc	r17, r17
    1d62:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    1d64:	0f 77       	andi	r16, 0x7F	; 127
    1d66:	dc 01       	movw	r26, r24
    1d68:	ed 91       	ld	r30, X+
    1d6a:	fc 91       	ld	r31, X
    1d6c:	63 e0       	ldi	r22, 0x03	; 3
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	08 95       	ret

00001d78 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1d78:	0f 93       	push	r16
    1d7a:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1d7c:	46 2f       	mov	r20, r22
    1d7e:	4f 70       	andi	r20, 0x0F	; 15
    1d80:	40 6c       	ori	r20, 0xC0	; 192
    1d82:	2f 77       	andi	r18, 0x7F	; 127
    1d84:	dc 01       	movw	r26, r24
    1d86:	ed 91       	ld	r30, X+
    1d88:	fc 91       	ld	r31, X
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	00 e0       	ldi	r16, 0x00	; 0
    1d90:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1d92:	0f 91       	pop	r16
    1d94:	08 95       	ret

00001d96 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1d96:	0f 93       	push	r16
    1d98:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1d9a:	46 2f       	mov	r20, r22
    1d9c:	4f 70       	andi	r20, 0x0F	; 15
    1d9e:	40 6d       	ori	r20, 0xD0	; 208
    1da0:	2f 77       	andi	r18, 0x7F	; 127
    1da2:	dc 01       	movw	r26, r24
    1da4:	ed 91       	ld	r30, X+
    1da6:	fc 91       	ld	r31, X
    1da8:	62 e0       	ldi	r22, 0x02	; 2
    1daa:	70 e0       	ldi	r23, 0x00	; 0
    1dac:	00 e0       	ldi	r16, 0x00	; 0
    1dae:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1db0:	0f 91       	pop	r16
    1db2:	08 95       	ret

00001db4 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1db4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1db6:	dc 01       	movw	r26, r24
    1db8:	ed 91       	ld	r30, X+
    1dba:	fc 91       	ld	r31, X
    1dbc:	61 e0       	ldi	r22, 0x01	; 1
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	48 ef       	ldi	r20, 0xF8	; 248
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	00 e0       	ldi	r16, 0x00	; 0
    1dc6:	09 95       	icall
}
    1dc8:	0f 91       	pop	r16
    1dca:	08 95       	ret

00001dcc <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1dcc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1dce:	dc 01       	movw	r26, r24
    1dd0:	ed 91       	ld	r30, X+
    1dd2:	fc 91       	ld	r31, X
    1dd4:	61 e0       	ldi	r22, 0x01	; 1
    1dd6:	70 e0       	ldi	r23, 0x00	; 0
    1dd8:	49 ef       	ldi	r20, 0xF9	; 249
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	00 e0       	ldi	r16, 0x00	; 0
    1dde:	09 95       	icall
}
    1de0:	0f 91       	pop	r16
    1de2:	08 95       	ret

00001de4 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1de4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1de6:	dc 01       	movw	r26, r24
    1de8:	ed 91       	ld	r30, X+
    1dea:	fc 91       	ld	r31, X
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	4a ef       	ldi	r20, 0xFA	; 250
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	00 e0       	ldi	r16, 0x00	; 0
    1df6:	09 95       	icall
}
    1df8:	0f 91       	pop	r16
    1dfa:	08 95       	ret

00001dfc <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1dfc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1dfe:	dc 01       	movw	r26, r24
    1e00:	ed 91       	ld	r30, X+
    1e02:	fc 91       	ld	r31, X
    1e04:	61 e0       	ldi	r22, 0x01	; 1
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	4b ef       	ldi	r20, 0xFB	; 251
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	00 e0       	ldi	r16, 0x00	; 0
    1e0e:	09 95       	icall
}
    1e10:	0f 91       	pop	r16
    1e12:	08 95       	ret

00001e14 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1e14:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1e16:	dc 01       	movw	r26, r24
    1e18:	ed 91       	ld	r30, X+
    1e1a:	fc 91       	ld	r31, X
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	4c ef       	ldi	r20, 0xFC	; 252
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	00 e0       	ldi	r16, 0x00	; 0
    1e26:	09 95       	icall
}
    1e28:	0f 91       	pop	r16
    1e2a:	08 95       	ret

00001e2c <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1e2c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1e2e:	dc 01       	movw	r26, r24
    1e30:	ed 91       	ld	r30, X+
    1e32:	fc 91       	ld	r31, X
    1e34:	61 e0       	ldi	r22, 0x01	; 1
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	4e ef       	ldi	r20, 0xFE	; 254
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	00 e0       	ldi	r16, 0x00	; 0
    1e3e:	09 95       	icall
}
    1e40:	0f 91       	pop	r16
    1e42:	08 95       	ret

00001e44 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1e44:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1e46:	dc 01       	movw	r26, r24
    1e48:	ed 91       	ld	r30, X+
    1e4a:	fc 91       	ld	r31, X
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	4f ef       	ldi	r20, 0xFF	; 255
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	00 e0       	ldi	r16, 0x00	; 0
    1e56:	09 95       	icall
}
    1e58:	0f 91       	pop	r16
    1e5a:	08 95       	ret

00001e5c <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1e5c:	0f 93       	push	r16
   device->send_func(device, 2,
    1e5e:	26 2f       	mov	r18, r22
    1e60:	2f 77       	andi	r18, 0x7F	; 127
    1e62:	dc 01       	movw	r26, r24
    1e64:	ed 91       	ld	r30, X+
    1e66:	fc 91       	ld	r31, X
    1e68:	62 e0       	ldi	r22, 0x02	; 2
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	41 ef       	ldi	r20, 0xF1	; 241
    1e6e:	00 e0       	ldi	r16, 0x00	; 0
    1e70:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1e72:	0f 91       	pop	r16
    1e74:	08 95       	ret

00001e76 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1e76:	0f 93       	push	r16
    1e78:	1f 93       	push	r17
   device->send_func(device, 3,
    1e7a:	26 2f       	mov	r18, r22
    1e7c:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1e7e:	8b 01       	movw	r16, r22
    1e80:	00 0f       	add	r16, r16
    1e82:	01 2f       	mov	r16, r17
    1e84:	00 1f       	adc	r16, r16
    1e86:	11 0b       	sbc	r17, r17
    1e88:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1e8a:	0f 77       	andi	r16, 0x7F	; 127
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	ed 91       	ld	r30, X+
    1e90:	fc 91       	ld	r31, X
    1e92:	63 e0       	ldi	r22, 0x03	; 3
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	42 ef       	ldi	r20, 0xF2	; 242
    1e98:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	08 95       	ret

00001ea0 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1ea0:	0f 93       	push	r16
   device->send_func(device, 2,
    1ea2:	26 2f       	mov	r18, r22
    1ea4:	2f 77       	andi	r18, 0x7F	; 127
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	ed 91       	ld	r30, X+
    1eaa:	fc 91       	ld	r31, X
    1eac:	62 e0       	ldi	r22, 0x02	; 2
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	43 ef       	ldi	r20, 0xF3	; 243
    1eb2:	00 e0       	ldi	r16, 0x00	; 0
    1eb4:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1eb6:	0f 91       	pop	r16
    1eb8:	08 95       	ret

00001eba <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1eba:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	ed 91       	ld	r30, X+
    1ec0:	fc 91       	ld	r31, X
    1ec2:	61 e0       	ldi	r22, 0x01	; 1
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	46 ef       	ldi	r20, 0xF6	; 246
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	00 e0       	ldi	r16, 0x00	; 0
    1ecc:	09 95       	icall
}
    1ece:	0f 91       	pop	r16
    1ed0:	08 95       	ret

00001ed2 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1ed2:	0f 93       	push	r16
    1ed4:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	ed 91       	ld	r30, X+
    1eda:	fc 91       	ld	r31, X
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	00 e0       	ldi	r16, 0x00	; 0
    1ee4:	09 95       	icall
}
    1ee6:	0f 91       	pop	r16
    1ee8:	08 95       	ret

00001eea <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1eea:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1eec:	dc 01       	movw	r26, r24
    1eee:	ed 91       	ld	r30, X+
    1ef0:	fc 91       	ld	r31, X
    1ef2:	09 95       	icall
}
    1ef4:	0f 91       	pop	r16
    1ef6:	08 95       	ret

00001ef8 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1ef8:	6f 92       	push	r6
    1efa:	7f 92       	push	r7
    1efc:	8f 92       	push	r8
    1efe:	9f 92       	push	r9
    1f00:	af 92       	push	r10
    1f02:	bf 92       	push	r11
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <midi_send_array+0x1e>
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	4c 01       	movw	r8, r24
    1f1e:	6b 01       	movw	r12, r22
    1f20:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1f22:	61 15       	cp	r22, r1
    1f24:	71 05       	cpc	r23, r1
    1f26:	41 f1       	breq	.+80     	; 0x1f78 <midi_send_array+0x80>
    1f28:	ee 24       	eor	r14, r14
    1f2a:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    1f2c:	0f 2e       	mov	r0, r31
    1f2e:	f3 e0       	ldi	r31, 0x03	; 3
    1f30:	6f 2e       	mov	r6, r31
    1f32:	77 24       	eor	r7, r7
    1f34:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    1f36:	19 82       	std	Y+1, r1	; 0x01
    1f38:	1a 82       	std	Y+2, r1	; 0x02
    1f3a:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    1f3c:	86 01       	movw	r16, r12
    1f3e:	0e 19       	sub	r16, r14
    1f40:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    1f42:	04 30       	cpi	r16, 0x04	; 4
    1f44:	11 05       	cpc	r17, r1
    1f46:	08 f0       	brcs	.+2      	; 0x1f4a <midi_send_array+0x52>
    1f48:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1f4a:	b5 01       	movw	r22, r10
    1f4c:	6e 0d       	add	r22, r14
    1f4e:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    1f50:	ce 01       	movw	r24, r28
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	40 2f       	mov	r20, r16
    1f56:	51 2f       	mov	r21, r17
    1f58:	0e 94 85 14 	call	0x290a	; 0x290a <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    1f5c:	c4 01       	movw	r24, r8
    1f5e:	b8 01       	movw	r22, r16
    1f60:	49 81       	ldd	r20, Y+1	; 0x01
    1f62:	2a 81       	ldd	r18, Y+2	; 0x02
    1f64:	0b 81       	ldd	r16, Y+3	; 0x03
    1f66:	0e 94 75 0f 	call	0x1eea	; 0x1eea <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1f6a:	83 e0       	ldi	r24, 0x03	; 3
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	e8 0e       	add	r14, r24
    1f70:	f9 1e       	adc	r15, r25
    1f72:	ec 14       	cp	r14, r12
    1f74:	fd 04       	cpc	r15, r13
    1f76:	f8 f2       	brcs	.-66     	; 0x1f36 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	cf 90       	pop	r12
    1f8e:	bf 90       	pop	r11
    1f90:	af 90       	pop	r10
    1f92:	9f 90       	pop	r9
    1f94:	8f 90       	pop	r8
    1f96:	7f 90       	pop	r7
    1f98:	6f 90       	pop	r6
    1f9a:	08 95       	ret

00001f9c <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	73 83       	std	Z+3, r23	; 0x03
    1fa0:	62 83       	std	Z+2, r22	; 0x02
}
    1fa2:	08 95       	ret

00001fa4 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	75 83       	std	Z+5, r23	; 0x05
    1fa8:	64 83       	std	Z+4, r22	; 0x04
}
    1faa:	08 95       	ret

00001fac <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1fac:	fc 01       	movw	r30, r24
    1fae:	77 83       	std	Z+7, r23	; 0x07
    1fb0:	66 83       	std	Z+6, r22	; 0x06
}
    1fb2:	08 95       	ret

00001fb4 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	71 87       	std	Z+9, r23	; 0x09
    1fb8:	60 87       	std	Z+8, r22	; 0x08
}
    1fba:	08 95       	ret

00001fbc <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	73 87       	std	Z+11, r23	; 0x0b
    1fc0:	62 87       	std	Z+10, r22	; 0x0a
}
    1fc2:	08 95       	ret

00001fc4 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	75 87       	std	Z+13, r23	; 0x0d
    1fc8:	64 87       	std	Z+12, r22	; 0x0c
}
    1fca:	08 95       	ret

00001fcc <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1fcc:	fc 01       	movw	r30, r24
    1fce:	77 87       	std	Z+15, r23	; 0x0f
    1fd0:	66 87       	std	Z+14, r22	; 0x0e
}
    1fd2:	08 95       	ret

00001fd4 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	71 8b       	std	Z+17, r23	; 0x11
    1fd8:	60 8b       	std	Z+16, r22	; 0x10
}
    1fda:	08 95       	ret

00001fdc <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1fdc:	fc 01       	movw	r30, r24
    1fde:	73 8b       	std	Z+19, r23	; 0x13
    1fe0:	62 8b       	std	Z+18, r22	; 0x12
}
    1fe2:	08 95       	ret

00001fe4 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	75 8b       	std	Z+21, r23	; 0x15
    1fe8:	64 8b       	std	Z+20, r22	; 0x14
}
    1fea:	08 95       	ret

00001fec <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1fec:	fc 01       	movw	r30, r24
    1fee:	77 8b       	std	Z+23, r23	; 0x17
    1ff0:	66 8b       	std	Z+22, r22	; 0x16
}
    1ff2:	08 95       	ret

00001ff4 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	71 8f       	std	Z+25, r23	; 0x19
    1ff8:	60 8f       	std	Z+24, r22	; 0x18
}
    1ffa:	08 95       	ret

00001ffc <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	73 8f       	std	Z+27, r23	; 0x1b
    2000:	62 8f       	std	Z+26, r22	; 0x1a
}
    2002:	08 95       	ret

00002004 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2004:	fc 01       	movw	r30, r24
    2006:	75 8f       	std	Z+29, r23	; 0x1d
    2008:	64 8f       	std	Z+28, r22	; 0x1c
}
    200a:	08 95       	ret

0000200c <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    200c:	fc 01       	movw	r30, r24
    200e:	77 8f       	std	Z+31, r23	; 0x1f
    2010:	66 8f       	std	Z+30, r22	; 0x1e
}
    2012:	08 95       	ret

00002014 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    201a:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    201c:	1f a2       	lds	r17, 0x9f
    201e:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2020:	bc 01       	movw	r22, r24
    2022:	68 5d       	subi	r22, 0xD8	; 216
    2024:	7f 4f       	sbci	r23, 0xFF	; 255
    2026:	88 51       	subi	r24, 0x18	; 24
    2028:	9f 4f       	sbci	r25, 0xFF	; 255
    202a:	40 ec       	ldi	r20, 0xC0	; 192
    202c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2030:	1b 82       	std	Y+3, r1	; 0x03
    2032:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2034:	1d 82       	std	Y+5, r1	; 0x05
    2036:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2038:	1f 82       	std	Y+7, r1	; 0x07
    203a:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    203c:	19 86       	std	Y+9, r1	; 0x09
    203e:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2040:	1b 86       	std	Y+11, r1	; 0x0b
    2042:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2044:	1d 86       	std	Y+13, r1	; 0x0d
    2046:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2048:	1f 86       	std	Y+15, r1	; 0x0f
    204a:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    204c:	19 8a       	std	Y+17, r1	; 0x11
    204e:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2050:	1b 8a       	std	Y+19, r1	; 0x13
    2052:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2054:	1d 8a       	std	Y+21, r1	; 0x15
    2056:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2058:	1f 8a       	std	Y+23, r1	; 0x17
    205a:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    205c:	19 8e       	std	Y+25, r1	; 0x19
    205e:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2060:	1b 8e       	std	Y+27, r1	; 0x1b
    2062:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2064:	1d 8e       	std	Y+29, r1	; 0x1d
    2066:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2068:	1f 8e       	std	Y+31, r1	; 0x1f
    206a:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    206c:	19 a2       	lds	r17, 0x99
    206e:	18 a2       	lds	r17, 0x98
}
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	08 95       	ret

00002076 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2084:	66 23       	and	r22, r22
    2086:	99 f0       	breq	.+38     	; 0x20ae <midi_device_input+0x38>
    2088:	04 2f       	mov	r16, r20
    208a:	15 2f       	mov	r17, r21
    208c:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    208e:	0f 2e       	mov	r0, r31
    2090:	f8 ee       	ldi	r31, 0xE8	; 232
    2092:	ef 2e       	mov	r14, r31
    2094:	ff 24       	eor	r15, r15
    2096:	f0 2d       	mov	r31, r0
    2098:	e8 0e       	add	r14, r24
    209a:	f9 1e       	adc	r15, r25
    209c:	f8 01       	movw	r30, r16
    209e:	61 91       	ld	r22, Z+
    20a0:	8f 01       	movw	r16, r30
    20a2:	c7 01       	movw	r24, r14
    20a4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    20a8:	cf 5f       	subi	r28, 0xFF	; 255
    20aa:	cd 17       	cp	r28, r29
    20ac:	b9 f7       	brne	.-18     	; 0x209c <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	ff 90       	pop	r15
    20b8:	ef 90       	pop	r14
    20ba:	08 95       	ret

000020bc <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    20bc:	fc 01       	movw	r30, r24
    20be:	71 83       	std	Z+1, r23	; 0x01
    20c0:	60 83       	st	Z, r22
}
    20c2:	08 95       	ret

000020c4 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    20c4:	fc 01       	movw	r30, r24
    20c6:	71 a3       	lds	r23, 0x51
    20c8:	60 a3       	lds	r22, 0x50
}
    20ca:	08 95       	ret

000020cc <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    20cc:	af 92       	push	r10
    20ce:	bf 92       	push	r11
    20d0:	cf 92       	push	r12
    20d2:	df 92       	push	r13
    20d4:	ef 92       	push	r14
    20d6:	ff 92       	push	r15
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	cf 93       	push	r28
    20de:	df 93       	push	r29
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <midi_input_callbacks+0x16>
    20e2:	0f 92       	push	r0
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	6c 01       	movw	r12, r24
    20ea:	5b 01       	movw	r10, r22
    20ec:	f4 2e       	mov	r15, r20
    20ee:	e2 2e       	mov	r14, r18
    20f0:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    20f2:	dc 01       	movw	r26, r24
    20f4:	95 96       	adiw	r26, 0x25	; 37
    20f6:	8c 91       	ld	r24, X
    20f8:	95 97       	sbiw	r26, 0x25	; 37
    20fa:	84 30       	cpi	r24, 0x04	; 4
    20fc:	e9 f4       	brne	.+58     	; 0x2138 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    20fe:	5a 96       	adiw	r26, 0x1a	; 26
    2100:	ed 91       	ld	r30, X+
    2102:	fc 91       	ld	r31, X
    2104:	5b 97       	sbiw	r26, 0x1b	; 27
    2106:	30 97       	sbiw	r30, 0x00	; 0
    2108:	09 f4       	brne	.+2      	; 0x210c <midi_input_callbacks+0x40>
    210a:	ee c0       	rjmp	.+476    	; 0x22e8 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    210c:	cb 01       	movw	r24, r22
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	63 e0       	ldi	r22, 0x03	; 3
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__udivmodhi4>
    2118:	cb 01       	movw	r24, r22
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	68 0f       	add	r22, r24
    2120:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2122:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2124:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    2126:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2128:	4a 2d       	mov	r20, r10
    212a:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    212c:	c6 01       	movw	r24, r12
    212e:	9e 01       	movw	r18, r28
    2130:	2f 5f       	subi	r18, 0xFF	; 255
    2132:	3f 4f       	sbci	r19, 0xFF	; 255
    2134:	09 95       	icall
    2136:	c8 c0       	rjmp	.+400    	; 0x22c8 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    2138:	62 30       	cpi	r22, 0x02	; 2
    213a:	71 05       	cpc	r23, r1
    213c:	09 f4       	brne	.+2      	; 0x2140 <midi_input_callbacks+0x74>
    213e:	5f c0       	rjmp	.+190    	; 0x21fe <midi_input_callbacks+0x132>
    2140:	63 30       	cpi	r22, 0x03	; 3
    2142:	71 05       	cpc	r23, r1
    2144:	29 f0       	breq	.+10     	; 0x2150 <midi_input_callbacks+0x84>
    2146:	61 30       	cpi	r22, 0x01	; 1
    2148:	71 05       	cpc	r23, r1
    214a:	09 f0       	breq	.+2      	; 0x214e <midi_input_callbacks+0x82>
    214c:	b3 c0       	rjmp	.+358    	; 0x22b4 <midi_input_callbacks+0x1e8>
    214e:	99 c0       	rjmp	.+306    	; 0x2282 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2150:	84 2f       	mov	r24, r20
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	80 7f       	andi	r24, 0xF0	; 240
    2156:	90 70       	andi	r25, 0x00	; 0
    2158:	80 3a       	cpi	r24, 0xA0	; 160
    215a:	91 05       	cpc	r25, r1
    215c:	29 f1       	breq	.+74     	; 0x21a8 <midi_input_callbacks+0xdc>
    215e:	81 3a       	cpi	r24, 0xA1	; 161
    2160:	91 05       	cpc	r25, r1
    2162:	3c f4       	brge	.+14     	; 0x2172 <midi_input_callbacks+0xa6>
    2164:	80 38       	cpi	r24, 0x80	; 128
    2166:	91 05       	cpc	r25, r1
    2168:	c9 f0       	breq	.+50     	; 0x219c <midi_input_callbacks+0xd0>
    216a:	80 39       	cpi	r24, 0x90	; 144
    216c:	91 05       	cpc	r25, r1
    216e:	91 f5       	brne	.+100    	; 0x21d4 <midi_input_callbacks+0x108>
    2170:	0f c0       	rjmp	.+30     	; 0x2190 <midi_input_callbacks+0xc4>
    2172:	80 3e       	cpi	r24, 0xE0	; 224
    2174:	91 05       	cpc	r25, r1
    2176:	f1 f0       	breq	.+60     	; 0x21b4 <midi_input_callbacks+0xe8>
    2178:	80 3f       	cpi	r24, 0xF0	; 240
    217a:	91 05       	cpc	r25, r1
    217c:	09 f1       	breq	.+66     	; 0x21c0 <midi_input_callbacks+0xf4>
    217e:	80 3b       	cpi	r24, 0xB0	; 176
    2180:	91 05       	cpc	r25, r1
    2182:	41 f5       	brne	.+80     	; 0x21d4 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2184:	d6 01       	movw	r26, r12
    2186:	12 96       	adiw	r26, 0x02	; 2
    2188:	ed 91       	ld	r30, X+
    218a:	fc 91       	ld	r31, X
    218c:	13 97       	sbiw	r26, 0x03	; 3
              break;
    218e:	24 c0       	rjmp	.+72     	; 0x21d8 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    2190:	d6 01       	movw	r26, r12
    2192:	14 96       	adiw	r26, 0x04	; 4
    2194:	ed 91       	ld	r30, X+
    2196:	fc 91       	ld	r31, X
    2198:	15 97       	sbiw	r26, 0x05	; 5
              break;
    219a:	1e c0       	rjmp	.+60     	; 0x21d8 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    219c:	d6 01       	movw	r26, r12
    219e:	16 96       	adiw	r26, 0x06	; 6
    21a0:	ed 91       	ld	r30, X+
    21a2:	fc 91       	ld	r31, X
    21a4:	17 97       	sbiw	r26, 0x07	; 7
              break;
    21a6:	18 c0       	rjmp	.+48     	; 0x21d8 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    21a8:	d6 01       	movw	r26, r12
    21aa:	18 96       	adiw	r26, 0x08	; 8
    21ac:	ed 91       	ld	r30, X+
    21ae:	fc 91       	ld	r31, X
    21b0:	19 97       	sbiw	r26, 0x09	; 9
              break;
    21b2:	12 c0       	rjmp	.+36     	; 0x21d8 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    21b4:	d6 01       	movw	r26, r12
    21b6:	1a 96       	adiw	r26, 0x0a	; 10
    21b8:	ed 91       	ld	r30, X+
    21ba:	fc 91       	ld	r31, X
    21bc:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    21be:	0c c0       	rjmp	.+24     	; 0x21d8 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    21c0:	b2 ef       	ldi	r27, 0xF2	; 242
    21c2:	4b 17       	cp	r20, r27
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <midi_input_callbacks+0xfc>
    21c6:	90 c0       	rjmp	.+288    	; 0x22e8 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    21c8:	d6 01       	movw	r26, r12
    21ca:	1c 96       	adiw	r26, 0x0c	; 12
    21cc:	ed 91       	ld	r30, X+
    21ce:	fc 91       	ld	r31, X
    21d0:	1d 97       	sbiw	r26, 0x0d	; 13
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    21d4:	e0 e0       	ldi	r30, 0x00	; 0
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    21d8:	30 97       	sbiw	r30, 0x00	; 0
    21da:	09 f4       	brne	.+2      	; 0x21de <midi_input_callbacks+0x112>
    21dc:	85 c0       	rjmp	.+266    	; 0x22e8 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    21de:	b2 ef       	ldi	r27, 0xF2	; 242
    21e0:	fb 16       	cp	r15, r27
    21e2:	31 f4       	brne	.+12     	; 0x21f0 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    21e4:	c6 01       	movw	r24, r12
    21e6:	62 ef       	ldi	r22, 0xF2	; 242
    21e8:	4e 2d       	mov	r20, r14
    21ea:	21 2f       	mov	r18, r17
    21ec:	09 95       	icall
    21ee:	6c c0       	rjmp	.+216    	; 0x22c8 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    21f0:	6f 2d       	mov	r22, r15
    21f2:	6f 70       	andi	r22, 0x0F	; 15
    21f4:	c6 01       	movw	r24, r12
    21f6:	4e 2d       	mov	r20, r14
    21f8:	21 2f       	mov	r18, r17
    21fa:	09 95       	icall
    21fc:	65 c0       	rjmp	.+202    	; 0x22c8 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    21fe:	84 2f       	mov	r24, r20
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	80 7f       	andi	r24, 0xF0	; 240
    2204:	90 70       	andi	r25, 0x00	; 0
    2206:	80 3d       	cpi	r24, 0xD0	; 208
    2208:	91 05       	cpc	r25, r1
    220a:	61 f0       	breq	.+24     	; 0x2224 <midi_input_callbacks+0x158>
    220c:	80 3f       	cpi	r24, 0xF0	; 240
    220e:	91 05       	cpc	r25, r1
    2210:	79 f0       	breq	.+30     	; 0x2230 <midi_input_callbacks+0x164>
    2212:	80 3c       	cpi	r24, 0xC0	; 192
    2214:	91 05       	cpc	r25, r1
    2216:	f9 f4       	brne	.+62     	; 0x2256 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    2218:	d6 01       	movw	r26, r12
    221a:	1e 96       	adiw	r26, 0x0e	; 14
    221c:	ed 91       	ld	r30, X+
    221e:	fc 91       	ld	r31, X
    2220:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2222:	1b c0       	rjmp	.+54     	; 0x225a <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2224:	d6 01       	movw	r26, r12
    2226:	50 96       	adiw	r26, 0x10	; 16
    2228:	ed 91       	ld	r30, X+
    222a:	fc 91       	ld	r31, X
    222c:	51 97       	sbiw	r26, 0x11	; 17
              break;
    222e:	15 c0       	rjmp	.+42     	; 0x225a <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2230:	b3 ef       	ldi	r27, 0xF3	; 243
    2232:	4b 17       	cp	r20, r27
    2234:	31 f4       	brne	.+12     	; 0x2242 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    2236:	d6 01       	movw	r26, r12
    2238:	52 96       	adiw	r26, 0x12	; 18
    223a:	ed 91       	ld	r30, X+
    223c:	fc 91       	ld	r31, X
    223e:	53 97       	sbiw	r26, 0x13	; 19
    2240:	0c c0       	rjmp	.+24     	; 0x225a <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2242:	b1 ef       	ldi	r27, 0xF1	; 241
    2244:	4b 17       	cp	r20, r27
    2246:	09 f0       	breq	.+2      	; 0x224a <midi_input_callbacks+0x17e>
    2248:	4f c0       	rjmp	.+158    	; 0x22e8 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    224a:	d6 01       	movw	r26, r12
    224c:	54 96       	adiw	r26, 0x14	; 20
    224e:	ed 91       	ld	r30, X+
    2250:	fc 91       	ld	r31, X
    2252:	55 97       	sbiw	r26, 0x15	; 21
    2254:	02 c0       	rjmp	.+4      	; 0x225a <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    2256:	e0 e0       	ldi	r30, 0x00	; 0
    2258:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    225a:	30 97       	sbiw	r30, 0x00	; 0
    225c:	09 f4       	brne	.+2      	; 0x2260 <midi_input_callbacks+0x194>
    225e:	44 c0       	rjmp	.+136    	; 0x22e8 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2260:	b3 ef       	ldi	r27, 0xF3	; 243
    2262:	fb 16       	cp	r15, r27
    2264:	19 f0       	breq	.+6      	; 0x226c <midi_input_callbacks+0x1a0>
    2266:	81 ef       	ldi	r24, 0xF1	; 241
    2268:	f8 16       	cp	r15, r24
    226a:	29 f4       	brne	.+10     	; 0x2276 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    226c:	c6 01       	movw	r24, r12
    226e:	6f 2d       	mov	r22, r15
    2270:	4e 2d       	mov	r20, r14
    2272:	09 95       	icall
    2274:	29 c0       	rjmp	.+82     	; 0x22c8 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    2276:	6f 2d       	mov	r22, r15
    2278:	6f 70       	andi	r22, 0x0F	; 15
    227a:	c6 01       	movw	r24, r12
    227c:	4e 2d       	mov	r20, r14
    227e:	09 95       	icall
    2280:	23 c0       	rjmp	.+70     	; 0x22c8 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2282:	84 2f       	mov	r24, r20
    2284:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <midi_is_realtime>
    2288:	88 23       	and	r24, r24
    228a:	31 f0       	breq	.+12     	; 0x2298 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    228c:	d6 01       	movw	r26, r12
    228e:	56 96       	adiw	r26, 0x16	; 22
    2290:	ed 91       	ld	r30, X+
    2292:	fc 91       	ld	r31, X
    2294:	57 97       	sbiw	r26, 0x17	; 23
    2296:	08 c0       	rjmp	.+16     	; 0x22a8 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    2298:	b6 ef       	ldi	r27, 0xF6	; 246
    229a:	fb 16       	cp	r15, r27
    229c:	29 f5       	brne	.+74     	; 0x22e8 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    229e:	d6 01       	movw	r26, r12
    22a0:	58 96       	adiw	r26, 0x18	; 24
    22a2:	ed 91       	ld	r30, X+
    22a4:	fc 91       	ld	r31, X
    22a6:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    22a8:	30 97       	sbiw	r30, 0x00	; 0
    22aa:	f1 f0       	breq	.+60     	; 0x22e8 <midi_input_callbacks+0x21c>
            func(device, byte0);
    22ac:	c6 01       	movw	r24, r12
    22ae:	6f 2d       	mov	r22, r15
    22b0:	09 95       	icall
    22b2:	0a c0       	rjmp	.+20     	; 0x22c8 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    22b4:	64 30       	cpi	r22, 0x04	; 4
    22b6:	71 05       	cpc	r23, r1
    22b8:	a8 f4       	brcc	.+42     	; 0x22e4 <midi_input_callbacks+0x218>
    22ba:	16 c0       	rjmp	.+44     	; 0x22e8 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    22bc:	c6 01       	movw	r24, r12
    22be:	b5 01       	movw	r22, r10
    22c0:	4f 2d       	mov	r20, r15
    22c2:	2e 2d       	mov	r18, r14
    22c4:	01 2f       	mov	r16, r17
    22c6:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    22c8:	d6 01       	movw	r26, r12
    22ca:	5e 96       	adiw	r26, 0x1e	; 30
    22cc:	ed 91       	ld	r30, X+
    22ce:	fc 91       	ld	r31, X
    22d0:	5f 97       	sbiw	r26, 0x1f	; 31
    22d2:	30 97       	sbiw	r30, 0x00	; 0
    22d4:	89 f0       	breq	.+34     	; 0x22f8 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    22d6:	c6 01       	movw	r24, r12
    22d8:	b5 01       	movw	r22, r10
    22da:	4f 2d       	mov	r20, r15
    22dc:	2e 2d       	mov	r18, r14
    22de:	01 2f       	mov	r16, r17
    22e0:	09 95       	icall
    22e2:	0a c0       	rjmp	.+20     	; 0x22f8 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    22e4:	aa 24       	eor	r10, r10
    22e6:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    22e8:	d6 01       	movw	r26, r12
    22ea:	5c 96       	adiw	r26, 0x1c	; 28
    22ec:	ed 91       	ld	r30, X+
    22ee:	fc 91       	ld	r31, X
    22f0:	5d 97       	sbiw	r26, 0x1d	; 29
    22f2:	30 97       	sbiw	r30, 0x00	; 0
    22f4:	19 f7       	brne	.-58     	; 0x22bc <midi_input_callbacks+0x1f0>
    22f6:	e8 cf       	rjmp	.-48     	; 0x22c8 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	ff 90       	pop	r15
    2308:	ef 90       	pop	r14
    230a:	df 90       	pop	r13
    230c:	cf 90       	pop	r12
    230e:	bf 90       	pop	r11
    2310:	af 90       	pop	r10
    2312:	08 95       	ret

00002314 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    2314:	ef 92       	push	r14
    2316:	ff 92       	push	r15
    2318:	0f 93       	push	r16
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	7c 01       	movw	r14, r24
    2320:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    2322:	86 2f       	mov	r24, r22
    2324:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <midi_is_realtime>
    2328:	88 23       	and	r24, r24
    232a:	91 f0       	breq	.+36     	; 0x2350 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    232c:	d7 01       	movw	r26, r14
    232e:	95 96       	adiw	r26, 0x25	; 37
    2330:	dc 91       	ld	r29, X
    2332:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	95 96       	adiw	r26, 0x25	; 37
    2338:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    233a:	c7 01       	movw	r24, r14
    233c:	61 e0       	ldi	r22, 0x01	; 1
    233e:	70 e0       	ldi	r23, 0x00	; 0
    2340:	4c 2f       	mov	r20, r28
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	00 e0       	ldi	r16, 0x00	; 0
    2346:	0e 94 66 10 	call	0x20cc	; 0x20cc <midi_input_callbacks>
    device->input_state = state;
    234a:	f7 01       	movw	r30, r14
    234c:	d5 a3       	lds	r29, 0x55
    234e:	b7 c0       	rjmp	.+366    	; 0x24be <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    2350:	8c 2f       	mov	r24, r28
    2352:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <midi_is_statusbyte>
    2356:	88 23       	and	r24, r24
    2358:	09 f4       	brne	.+2      	; 0x235c <midi_process_byte+0x48>
    235a:	73 c0       	rjmp	.+230    	; 0x2442 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    235c:	d7 01       	movw	r26, r14
    235e:	95 96       	adiw	r26, 0x25	; 37
    2360:	8c 91       	ld	r24, X
    2362:	95 97       	sbiw	r26, 0x25	; 37
    2364:	84 30       	cpi	r24, 0x04	; 4
    2366:	49 f0       	breq	.+18     	; 0x237a <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    2368:	92 96       	adiw	r26, 0x22	; 34
    236a:	cc 93       	st	X, r28
    236c:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	97 96       	adiw	r26, 0x27	; 39
    2374:	9c 93       	st	X, r25
    2376:	8e 93       	st	-X, r24
    2378:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    237a:	8c 2f       	mov	r24, r28
    237c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <midi_packet_length>
    2380:	81 30       	cpi	r24, 0x01	; 1
    2382:	41 f0       	breq	.+16     	; 0x2394 <midi_process_byte+0x80>
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	00 f1       	brcs	.+64     	; 0x23c8 <midi_process_byte+0xb4>
    2388:	82 30       	cpi	r24, 0x02	; 2
    238a:	a1 f0       	breq	.+40     	; 0x23b4 <midi_process_byte+0xa0>
    238c:	83 30       	cpi	r24, 0x03	; 3
    238e:	09 f0       	breq	.+2      	; 0x2392 <midi_process_byte+0x7e>
    2390:	4f c0       	rjmp	.+158    	; 0x2430 <midi_process_byte+0x11c>
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	f7 01       	movw	r30, r14
    2398:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    239a:	c7 01       	movw	r24, r14
    239c:	61 e0       	ldi	r22, 0x01	; 1
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	4c 2f       	mov	r20, r28
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	00 e0       	ldi	r16, 0x00	; 0
    23a6:	0e 94 66 10 	call	0x20cc	; 0x20cc <midi_input_callbacks>
        device->input_state = IDLE;
    23aa:	d7 01       	movw	r26, r14
    23ac:	95 96       	adiw	r26, 0x25	; 37
    23ae:	1c 92       	st	X, r1
    23b0:	95 97       	sbiw	r26, 0x25	; 37
        break;
    23b2:	85 c0       	rjmp	.+266    	; 0x24be <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	f7 01       	movw	r30, r14
    23b8:	85 a3       	lds	r24, 0x55
        break;
    23ba:	81 c0       	rjmp	.+258    	; 0x24be <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    23bc:	83 e0       	ldi	r24, 0x03	; 3
    23be:	d7 01       	movw	r26, r14
    23c0:	95 96       	adiw	r26, 0x25	; 37
    23c2:	8c 93       	st	X, r24
    23c4:	95 97       	sbiw	r26, 0x25	; 37
        break;
    23c6:	7b c0       	rjmp	.+246    	; 0x24be <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    23c8:	c0 3f       	cpi	r28, 0xF0	; 240
    23ca:	19 f0       	breq	.+6      	; 0x23d2 <midi_process_byte+0xbe>
    23cc:	c7 3f       	cpi	r28, 0xF7	; 247
    23ce:	59 f5       	brne	.+86     	; 0x2426 <midi_process_byte+0x112>
    23d0:	0a c0       	rjmp	.+20     	; 0x23e6 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    23d2:	84 e0       	ldi	r24, 0x04	; 4
    23d4:	f7 01       	movw	r30, r14
    23d6:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    23d8:	80 ef       	ldi	r24, 0xF0	; 240
    23da:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	97 a3       	lds	r25, 0x57
    23e2:	86 a3       	lds	r24, 0x56
            break;
    23e4:	6c c0       	rjmp	.+216    	; 0x24be <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    23e6:	d7 01       	movw	r26, r14
    23e8:	96 96       	adiw	r26, 0x26	; 38
    23ea:	2d 91       	ld	r18, X+
    23ec:	3c 91       	ld	r19, X
    23ee:	97 97       	sbiw	r26, 0x27	; 39
    23f0:	c9 01       	movw	r24, r18
    23f2:	63 e0       	ldi	r22, 0x03	; 3
    23f4:	70 e0       	ldi	r23, 0x00	; 0
    23f6:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__udivmodhi4>
    23fa:	f7 01       	movw	r30, r14
    23fc:	e8 0f       	add	r30, r24
    23fe:	f9 1f       	adc	r31, r25
    2400:	87 ef       	ldi	r24, 0xF7	; 247
    2402:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    2404:	b9 01       	movw	r22, r18
    2406:	6f 5f       	subi	r22, 0xFF	; 255
    2408:	7f 4f       	sbci	r23, 0xFF	; 255
    240a:	f7 01       	movw	r30, r14
    240c:	77 a3       	lds	r23, 0x57
    240e:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    2410:	c7 01       	movw	r24, r14
    2412:	42 a1       	lds	r20, 0x42
    2414:	23 a1       	lds	r18, 0x43
    2416:	04 a1       	lds	r16, 0x44
    2418:	0e 94 66 10 	call	0x20cc	; 0x20cc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    241c:	d7 01       	movw	r26, r14
    241e:	95 96       	adiw	r26, 0x25	; 37
    2420:	1c 92       	st	X, r1
    2422:	95 97       	sbiw	r26, 0x25	; 37
            break;
    2424:	4c c0       	rjmp	.+152    	; 0x24be <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    2426:	f7 01       	movw	r30, r14
    2428:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    242a:	17 a2       	lds	r17, 0x97
    242c:	16 a2       	lds	r17, 0x96
    242e:	47 c0       	rjmp	.+142    	; 0x24be <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    2430:	d7 01       	movw	r26, r14
    2432:	95 96       	adiw	r26, 0x25	; 37
    2434:	1c 92       	st	X, r1
    2436:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    2438:	97 96       	adiw	r26, 0x27	; 39
    243a:	1c 92       	st	X, r1
    243c:	1e 92       	st	-X, r1
    243e:	96 97       	sbiw	r26, 0x26	; 38
        break;
    2440:	3e c0       	rjmp	.+124    	; 0x24be <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    2442:	f7 01       	movw	r30, r14
    2444:	25 a1       	lds	r18, 0x45
    2446:	22 23       	and	r18, r18
    2448:	d1 f1       	breq	.+116    	; 0x24be <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    244a:	06 a0       	lds	r16, 0x86
    244c:	f7 a1       	lds	r31, 0x47
    244e:	e0 2d       	mov	r30, r0
    2450:	cf 01       	movw	r24, r30
    2452:	63 e0       	ldi	r22, 0x03	; 3
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__udivmodhi4>
    245a:	ac 01       	movw	r20, r24
    245c:	8e 0d       	add	r24, r14
    245e:	9f 1d       	adc	r25, r15
    2460:	dc 01       	movw	r26, r24
    2462:	92 96       	adiw	r26, 0x22	; 34
    2464:	cc 93       	st	X, r28
    2466:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    2468:	bf 01       	movw	r22, r30
    246a:	6f 5f       	subi	r22, 0xFF	; 255
    246c:	7f 4f       	sbci	r23, 0xFF	; 255
    246e:	f7 01       	movw	r30, r14
    2470:	77 a3       	lds	r23, 0x57
    2472:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    2474:	41 30       	cpi	r20, 0x01	; 1
    2476:	51 05       	cpc	r21, r1
    2478:	91 f0       	breq	.+36     	; 0x249e <midi_process_byte+0x18a>
    247a:	42 30       	cpi	r20, 0x02	; 2
    247c:	51 05       	cpc	r21, r1
    247e:	f9 f4       	brne	.+62     	; 0x24be <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    2480:	c7 01       	movw	r24, r14
    2482:	42 a1       	lds	r20, 0x42
    2484:	23 a1       	lds	r18, 0x43
    2486:	04 a1       	lds	r16, 0x44
    2488:	0e 94 66 10 	call	0x20cc	; 0x20cc <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    248c:	f7 01       	movw	r30, r14
    248e:	85 a1       	lds	r24, 0x45
    2490:	84 30       	cpi	r24, 0x04	; 4
    2492:	a9 f0       	breq	.+42     	; 0x24be <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	97 a3       	lds	r25, 0x57
    249a:	86 a3       	lds	r24, 0x56
    249c:	10 c0       	rjmp	.+32     	; 0x24be <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    249e:	22 30       	cpi	r18, 0x02	; 2
    24a0:	71 f4       	brne	.+28     	; 0x24be <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    24a2:	c7 01       	movw	r24, r14
    24a4:	42 a1       	lds	r20, 0x42
    24a6:	23 a1       	lds	r18, 0x43
    24a8:	00 e0       	ldi	r16, 0x00	; 0
    24aa:	0e 94 66 10 	call	0x20cc	; 0x20cc <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    24ae:	f7 01       	movw	r30, r14
    24b0:	85 a1       	lds	r24, 0x45
    24b2:	84 30       	cpi	r24, 0x04	; 4
    24b4:	21 f0       	breq	.+8      	; 0x24be <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	97 a3       	lds	r25, 0x57
    24bc:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	0f 91       	pop	r16
    24c4:	ff 90       	pop	r15
    24c6:	ef 90       	pop	r14
    24c8:	08 95       	ret

000024ca <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    24ca:	cf 92       	push	r12
    24cc:	df 92       	push	r13
    24ce:	ef 92       	push	r14
    24d0:	ff 92       	push	r15
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    24dc:	dc 01       	movw	r26, r24
    24de:	90 96       	adiw	r26, 0x20	; 32
    24e0:	ed 91       	ld	r30, X+
    24e2:	fc 91       	ld	r31, X
    24e4:	91 97       	sbiw	r26, 0x21	; 33
    24e6:	30 97       	sbiw	r30, 0x00	; 0
    24e8:	09 f0       	breq	.+2      	; 0x24ec <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    24ea:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    24ec:	0f 2e       	mov	r0, r31
    24ee:	f8 ee       	ldi	r31, 0xE8	; 232
    24f0:	ef 2e       	mov	r14, r31
    24f2:	ff 24       	eor	r15, r15
    24f4:	f0 2d       	mov	r31, r0
    24f6:	ec 0c       	add	r14, r12
    24f8:	fd 1c       	adc	r15, r13
    24fa:	c7 01       	movw	r24, r14
    24fc:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2500:	c8 2f       	mov	r28, r24
    2502:	d0 e0       	ldi	r29, 0x00	; 0
    2504:	20 97       	sbiw	r28, 0x00	; 0
    2506:	99 f0       	breq	.+38     	; 0x252e <midi_device_process+0x64>
    2508:	00 e0       	ldi	r16, 0x00	; 0
    250a:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    250c:	c7 01       	movw	r24, r14
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <bytequeue_get>
    2514:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    2516:	c6 01       	movw	r24, r12
    2518:	0e 94 8a 11 	call	0x2314	; 0x2314 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    251c:	c7 01       	movw	r24, r14
    251e:	61 e0       	ldi	r22, 0x01	; 1
    2520:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2524:	0f 5f       	subi	r16, 0xFF	; 255
    2526:	1f 4f       	sbci	r17, 0xFF	; 255
    2528:	0c 17       	cp	r16, r28
    252a:	1d 07       	cpc	r17, r29
    252c:	78 f3       	brcs	.-34     	; 0x250c <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	1f 91       	pop	r17
    2534:	0f 91       	pop	r16
    2536:	ff 90       	pop	r15
    2538:	ef 90       	pop	r14
    253a:	df 90       	pop	r13
    253c:	cf 90       	pop	r12
    253e:	08 95       	ret

00002540 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    2540:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    2542:	67 e0       	ldi	r22, 0x07	; 7
    2544:	70 e0       	ldi	r23, 0x00	; 0
    2546:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__udivmodhi4>
    254a:	48 2f       	mov	r20, r24
   if (remainder)
    254c:	88 23       	and	r24, r24
    254e:	81 f0       	breq	.+32     	; 0x2570 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    2550:	c9 01       	movw	r24, r18
    2552:	67 e0       	ldi	r22, 0x07	; 7
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__udivmodhi4>
    255a:	cb 01       	movw	r24, r22
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	01 96       	adiw	r24, 0x01	; 1
    256a:	84 0f       	add	r24, r20
    256c:	91 1d       	adc	r25, r1
    256e:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    2570:	c9 01       	movw	r24, r18
    2572:	67 e0       	ldi	r22, 0x07	; 7
    2574:	70 e0       	ldi	r23, 0x00	; 0
    2576:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__udivmodhi4>
    257a:	cb 01       	movw	r24, r22
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
}
    2588:	08 95       	ret

0000258a <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    258a:	48 2f       	mov	r20, r24
    258c:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    258e:	a1 f0       	breq	.+40     	; 0x25b8 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    2590:	9c 01       	movw	r18, r24
    2592:	36 95       	lsr	r19
    2594:	27 95       	ror	r18
    2596:	36 95       	lsr	r19
    2598:	27 95       	ror	r18
    259a:	36 95       	lsr	r19
    259c:	27 95       	ror	r18
    259e:	c9 01       	movw	r24, r18
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	82 1b       	sub	r24, r18
    25ae:	93 0b       	sbc	r25, r19
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	84 0f       	add	r24, r20
    25b4:	91 1d       	adc	r25, r1
    25b6:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    25b8:	9c 01       	movw	r18, r24
    25ba:	36 95       	lsr	r19
    25bc:	27 95       	ror	r18
    25be:	36 95       	lsr	r19
    25c0:	27 95       	ror	r18
    25c2:	36 95       	lsr	r19
    25c4:	27 95       	ror	r18
    25c6:	c9 01       	movw	r24, r18
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	82 1b       	sub	r24, r18
    25d6:	93 0b       	sbc	r25, r19
}
    25d8:	08 95       	ret

000025da <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    25da:	2f 92       	push	r2
    25dc:	3f 92       	push	r3
    25de:	4f 92       	push	r4
    25e0:	5f 92       	push	r5
    25e2:	6f 92       	push	r6
    25e4:	7f 92       	push	r7
    25e6:	8f 92       	push	r8
    25e8:	9f 92       	push	r9
    25ea:	af 92       	push	r10
    25ec:	bf 92       	push	r11
    25ee:	cf 92       	push	r12
    25f0:	df 92       	push	r13
    25f2:	ef 92       	push	r14
    25f4:	ff 92       	push	r15
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <sysex_encode+0x26>
    2600:	00 d0       	rcall	.+0      	; 0x2602 <sysex_encode+0x28>
    2602:	00 d0       	rcall	.+0      	; 0x2604 <sysex_encode+0x2a>
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	1c 01       	movw	r2, r24
    260a:	7a 83       	std	Y+2, r23	; 0x02
    260c:	69 83       	std	Y+1, r22	; 0x01
    260e:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    2610:	ca 01       	movw	r24, r20
    2612:	67 e0       	ldi	r22, 0x07	; 7
    2614:	70 e0       	ldi	r23, 0x00	; 0
    2616:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__udivmodhi4>
    261a:	2b 01       	movw	r4, r22
    261c:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    261e:	61 15       	cp	r22, r1
    2620:	71 05       	cpc	r23, r1
    2622:	b1 f1       	breq	.+108    	; 0x2690 <sysex_encode+0xb6>
    2624:	81 01       	movw	r16, r2
    2626:	e9 80       	ldd	r14, Y+1	; 0x01
    2628:	fa 80       	ldd	r15, Y+2	; 0x02
    262a:	cc 24       	eor	r12, r12
    262c:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    262e:	88 24       	eor	r8, r8
    2630:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2632:	1e 83       	std	Y+6, r17	; 0x06
    2634:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    2636:	f8 01       	movw	r30, r16
    2638:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    263a:	fc 82       	std	Y+4, r15	; 0x04
    263c:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    263e:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    2640:	ab 81       	ldd	r26, Y+3	; 0x03
    2642:	bc 81       	ldd	r27, Y+4	; 0x04
    2644:	2d 91       	ld	r18, X+
    2646:	bc 83       	std	Y+4, r27	; 0x04
    2648:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    264a:	4f 5f       	subi	r20, 0xFF	; 255
    264c:	5f 4f       	sbci	r21, 0xFF	; 255
    264e:	82 2f       	mov	r24, r18
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	80 78       	andi	r24, 0x80	; 128
    2654:	90 70       	andi	r25, 0x00	; 0
    2656:	bc 01       	movw	r22, r24
    2658:	04 2e       	mov	r0, r20
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <sysex_encode+0x86>
    265c:	75 95       	asr	r23
    265e:	67 95       	ror	r22
    2660:	0a 94       	dec	r0
    2662:	e2 f7       	brpl	.-8      	; 0x265c <sysex_encode+0x82>
    2664:	ad 81       	ldd	r26, Y+5	; 0x05
    2666:	be 81       	ldd	r27, Y+6	; 0x06
    2668:	8c 91       	ld	r24, X
    266a:	86 2b       	or	r24, r22
    266c:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    266e:	2f 77       	andi	r18, 0x7F	; 127
    2670:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2672:	47 30       	cpi	r20, 0x07	; 7
    2674:	51 05       	cpc	r21, r1
    2676:	21 f7       	brne	.-56     	; 0x2640 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2678:	08 94       	sec
    267a:	c1 1c       	adc	r12, r1
    267c:	d1 1c       	adc	r13, r1
    267e:	08 5f       	subi	r16, 0xF8	; 248
    2680:	1f 4f       	sbci	r17, 0xFF	; 255
    2682:	e7 e0       	ldi	r30, 0x07	; 7
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	ee 0e       	add	r14, r30
    2688:	ff 1e       	adc	r15, r31
    268a:	ca 14       	cp	r12, r10
    268c:	db 04       	cpc	r13, r11
    268e:	89 f6       	brne	.-94     	; 0x2632 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    2690:	c3 01       	movw	r24, r6
    2692:	67 e0       	ldi	r22, 0x07	; 7
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__udivmodhi4>
   if (remainder) {
    269a:	88 23       	and	r24, r24
    269c:	d9 f1       	breq	.+118    	; 0x2714 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    269e:	82 01       	movw	r16, r4
    26a0:	00 0f       	add	r16, r16
    26a2:	11 1f       	adc	r17, r17
    26a4:	00 0f       	add	r16, r16
    26a6:	11 1f       	adc	r17, r17
    26a8:	00 0f       	add	r16, r16
    26aa:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    26ac:	78 01       	movw	r14, r16
    26ae:	e4 18       	sub	r14, r4
    26b0:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    26b2:	d1 01       	movw	r26, r2
    26b4:	a0 0f       	add	r26, r16
    26b6:	b1 1f       	adc	r27, r17
    26b8:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    26ba:	68 2f       	mov	r22, r24
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	61 15       	cp	r22, r1
    26c0:	71 05       	cpc	r23, r1
    26c2:	19 f1       	breq	.+70     	; 0x270a <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    26c4:	e9 81       	ldd	r30, Y+1	; 0x01
    26c6:	fa 81       	ldd	r31, Y+2	; 0x02
    26c8:	ee 0e       	add	r14, r30
    26ca:	ff 1e       	adc	r15, r31
    26cc:	c8 01       	movw	r24, r16
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	28 0e       	add	r2, r24
    26d2:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    26d8:	f7 01       	movw	r30, r14
    26da:	41 91       	ld	r20, Z+
    26dc:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    26de:	2f 5f       	subi	r18, 0xFF	; 255
    26e0:	3f 4f       	sbci	r19, 0xFF	; 255
    26e2:	84 2f       	mov	r24, r20
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	80 78       	andi	r24, 0x80	; 128
    26e8:	90 70       	andi	r25, 0x00	; 0
    26ea:	02 2e       	mov	r0, r18
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <sysex_encode+0x118>
    26ee:	95 95       	asr	r25
    26f0:	87 95       	ror	r24
    26f2:	0a 94       	dec	r0
    26f4:	e2 f7       	brpl	.-8      	; 0x26ee <sysex_encode+0x114>
    26f6:	9c 91       	ld	r25, X
    26f8:	89 2b       	or	r24, r25
    26fa:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    26fc:	4f 77       	andi	r20, 0x7F	; 127
    26fe:	f1 01       	movw	r30, r2
    2700:	41 93       	st	Z+, r20
    2702:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    2704:	26 17       	cp	r18, r22
    2706:	37 07       	cpc	r19, r23
    2708:	38 f3       	brcs	.-50     	; 0x26d8 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    270a:	c8 01       	movw	r24, r16
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	86 0f       	add	r24, r22
    2710:	97 1f       	adc	r25, r23
    2712:	07 c0       	rjmp	.+14     	; 0x2722 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    2714:	c2 01       	movw	r24, r4
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	88 0f       	add	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
   }
}
    2722:	26 96       	adiw	r28, 0x06	; 6
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	ff 90       	pop	r15
    2738:	ef 90       	pop	r14
    273a:	df 90       	pop	r13
    273c:	cf 90       	pop	r12
    273e:	bf 90       	pop	r11
    2740:	af 90       	pop	r10
    2742:	9f 90       	pop	r9
    2744:	8f 90       	pop	r8
    2746:	7f 90       	pop	r7
    2748:	6f 90       	pop	r6
    274a:	5f 90       	pop	r5
    274c:	4f 90       	pop	r4
    274e:	3f 90       	pop	r3
    2750:	2f 90       	pop	r2
    2752:	08 95       	ret

00002754 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2754:	6f 92       	push	r6
    2756:	7f 92       	push	r7
    2758:	8f 92       	push	r8
    275a:	9f 92       	push	r9
    275c:	af 92       	push	r10
    275e:	bf 92       	push	r11
    2760:	cf 92       	push	r12
    2762:	df 92       	push	r13
    2764:	ef 92       	push	r14
    2766:	ff 92       	push	r15
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	3c 01       	movw	r6, r24
    2772:	4b 01       	movw	r8, r22
    2774:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    2776:	42 30       	cpi	r20, 0x02	; 2
    2778:	51 05       	cpc	r21, r1
    277a:	08 f4       	brcc	.+2      	; 0x277e <sysex_decode+0x2a>
    277c:	6f c0       	rjmp	.+222    	; 0x285c <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    277e:	7a 01       	movw	r14, r20
    2780:	f6 94       	lsr	r15
    2782:	e7 94       	ror	r14
    2784:	f6 94       	lsr	r15
    2786:	e7 94       	ror	r14
    2788:	f6 94       	lsr	r15
    278a:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    278c:	e1 14       	cp	r14, r1
    278e:	f1 04       	cpc	r15, r1
    2790:	29 f1       	breq	.+74     	; 0x27dc <sysex_decode+0x88>
    2792:	eb 01       	movw	r28, r22
    2794:	b3 01       	movw	r22, r6
    2796:	00 e0       	ldi	r16, 0x00	; 0
    2798:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    279a:	cc 24       	eor	r12, r12
    279c:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    279e:	de 01       	movw	r26, r28
    27a0:	11 96       	adiw	r26, 0x01	; 1
    27a2:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    27a4:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    27a6:	2d 91       	ld	r18, X+
    27a8:	2f 77       	andi	r18, 0x7F	; 127
    27aa:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    27ac:	4f 5f       	subi	r20, 0xFF	; 255
    27ae:	5f 4f       	sbci	r21, 0xFF	; 255
    27b0:	88 81       	ld	r24, Y
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	04 2e       	mov	r0, r20
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <sysex_decode+0x68>
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	0a 94       	dec	r0
    27be:	e2 f7       	brpl	.-8      	; 0x27b8 <sysex_decode+0x64>
    27c0:	80 78       	andi	r24, 0x80	; 128
    27c2:	28 2b       	or	r18, r24
    27c4:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    27c6:	47 30       	cpi	r20, 0x07	; 7
    27c8:	51 05       	cpc	r21, r1
    27ca:	69 f7       	brne	.-38     	; 0x27a6 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    27cc:	0f 5f       	subi	r16, 0xFF	; 255
    27ce:	1f 4f       	sbci	r17, 0xFF	; 255
    27d0:	28 96       	adiw	r28, 0x08	; 8
    27d2:	69 5f       	subi	r22, 0xF9	; 249
    27d4:	7f 4f       	sbci	r23, 0xFF	; 255
    27d6:	0e 15       	cp	r16, r14
    27d8:	1f 05       	cpc	r17, r15
    27da:	09 f7       	brne	.-62     	; 0x279e <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    27dc:	5a 2d       	mov	r21, r10
    27de:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    27e0:	99 f1       	breq	.+102    	; 0x2848 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    27e2:	e7 01       	movw	r28, r14
    27e4:	cc 0f       	add	r28, r28
    27e6:	dd 1f       	adc	r29, r29
    27e8:	cc 0f       	add	r28, r28
    27ea:	dd 1f       	adc	r29, r29
    27ec:	cc 0f       	add	r28, r28
    27ee:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    27f0:	8e 01       	movw	r16, r28
    27f2:	0e 19       	sub	r16, r14
    27f4:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    27f6:	65 2f       	mov	r22, r21
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	61 50       	subi	r22, 0x01	; 1
    27fc:	70 40       	sbci	r23, 0x00	; 0
    27fe:	f9 f0       	breq	.+62     	; 0x283e <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2800:	ce 01       	movw	r24, r28
    2802:	01 96       	adiw	r24, 0x01	; 1
    2804:	d4 01       	movw	r26, r8
    2806:	a8 0f       	add	r26, r24
    2808:	b9 1f       	adc	r27, r25
    280a:	f3 01       	movw	r30, r6
    280c:	e0 0f       	add	r30, r16
    280e:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2814:	c8 0d       	add	r28, r8
    2816:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    2818:	4d 91       	ld	r20, X+
    281a:	4f 77       	andi	r20, 0x7F	; 127
    281c:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    281e:	2f 5f       	subi	r18, 0xFF	; 255
    2820:	3f 4f       	sbci	r19, 0xFF	; 255
    2822:	88 81       	ld	r24, Y
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	02 2e       	mov	r0, r18
    2828:	02 c0       	rjmp	.+4      	; 0x282e <sysex_decode+0xda>
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	0a 94       	dec	r0
    2830:	e2 f7       	brpl	.-8      	; 0x282a <sysex_decode+0xd6>
    2832:	80 78       	andi	r24, 0x80	; 128
    2834:	48 2b       	or	r20, r24
    2836:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2838:	26 17       	cp	r18, r22
    283a:	37 07       	cpc	r19, r23
    283c:	68 f3       	brcs	.-38     	; 0x2818 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    283e:	c8 01       	movw	r24, r16
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	85 0f       	add	r24, r21
    2844:	91 1d       	adc	r25, r1
    2846:	0c c0       	rjmp	.+24     	; 0x2860 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    2848:	c7 01       	movw	r24, r14
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	88 0f       	add	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	88 0f       	add	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	8e 19       	sub	r24, r14
    2858:	9f 09       	sbc	r25, r15
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	1f 91       	pop	r17
    2866:	0f 91       	pop	r16
    2868:	ff 90       	pop	r15
    286a:	ef 90       	pop	r14
    286c:	df 90       	pop	r13
    286e:	cf 90       	pop	r12
    2870:	bf 90       	pop	r11
    2872:	af 90       	pop	r10
    2874:	9f 90       	pop	r9
    2876:	8f 90       	pop	r8
    2878:	7f 90       	pop	r7
    287a:	6f 90       	pop	r6
    287c:	08 95       	ret

0000287e <__mulsi3>:
    287e:	62 9f       	mul	r22, r18
    2880:	d0 01       	movw	r26, r0
    2882:	73 9f       	mul	r23, r19
    2884:	f0 01       	movw	r30, r0
    2886:	82 9f       	mul	r24, r18
    2888:	e0 0d       	add	r30, r0
    288a:	f1 1d       	adc	r31, r1
    288c:	64 9f       	mul	r22, r20
    288e:	e0 0d       	add	r30, r0
    2890:	f1 1d       	adc	r31, r1
    2892:	92 9f       	mul	r25, r18
    2894:	f0 0d       	add	r31, r0
    2896:	83 9f       	mul	r24, r19
    2898:	f0 0d       	add	r31, r0
    289a:	74 9f       	mul	r23, r20
    289c:	f0 0d       	add	r31, r0
    289e:	65 9f       	mul	r22, r21
    28a0:	f0 0d       	add	r31, r0
    28a2:	99 27       	eor	r25, r25
    28a4:	72 9f       	mul	r23, r18
    28a6:	b0 0d       	add	r27, r0
    28a8:	e1 1d       	adc	r30, r1
    28aa:	f9 1f       	adc	r31, r25
    28ac:	63 9f       	mul	r22, r19
    28ae:	b0 0d       	add	r27, r0
    28b0:	e1 1d       	adc	r30, r1
    28b2:	f9 1f       	adc	r31, r25
    28b4:	bd 01       	movw	r22, r26
    28b6:	cf 01       	movw	r24, r30
    28b8:	11 24       	eor	r1, r1
    28ba:	08 95       	ret

000028bc <__udivmodhi4>:
    28bc:	aa 1b       	sub	r26, r26
    28be:	bb 1b       	sub	r27, r27
    28c0:	51 e1       	ldi	r21, 0x11	; 17
    28c2:	07 c0       	rjmp	.+14     	; 0x28d2 <__udivmodhi4_ep>

000028c4 <__udivmodhi4_loop>:
    28c4:	aa 1f       	adc	r26, r26
    28c6:	bb 1f       	adc	r27, r27
    28c8:	a6 17       	cp	r26, r22
    28ca:	b7 07       	cpc	r27, r23
    28cc:	10 f0       	brcs	.+4      	; 0x28d2 <__udivmodhi4_ep>
    28ce:	a6 1b       	sub	r26, r22
    28d0:	b7 0b       	sbc	r27, r23

000028d2 <__udivmodhi4_ep>:
    28d2:	88 1f       	adc	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	5a 95       	dec	r21
    28d8:	a9 f7       	brne	.-22     	; 0x28c4 <__udivmodhi4_loop>
    28da:	80 95       	com	r24
    28dc:	90 95       	com	r25
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	08 95       	ret

000028e4 <__divmodhi4>:
    28e4:	97 fb       	bst	r25, 7
    28e6:	09 2e       	mov	r0, r25
    28e8:	07 26       	eor	r0, r23
    28ea:	0a d0       	rcall	.+20     	; 0x2900 <__divmodhi4_neg1>
    28ec:	77 fd       	sbrc	r23, 7
    28ee:	04 d0       	rcall	.+8      	; 0x28f8 <__divmodhi4_neg2>
    28f0:	e5 df       	rcall	.-54     	; 0x28bc <__udivmodhi4>
    28f2:	06 d0       	rcall	.+12     	; 0x2900 <__divmodhi4_neg1>
    28f4:	00 20       	and	r0, r0
    28f6:	1a f4       	brpl	.+6      	; 0x28fe <__divmodhi4_exit>

000028f8 <__divmodhi4_neg2>:
    28f8:	70 95       	com	r23
    28fa:	61 95       	neg	r22
    28fc:	7f 4f       	sbci	r23, 0xFF	; 255

000028fe <__divmodhi4_exit>:
    28fe:	08 95       	ret

00002900 <__divmodhi4_neg1>:
    2900:	f6 f7       	brtc	.-4      	; 0x28fe <__divmodhi4_exit>
    2902:	90 95       	com	r25
    2904:	81 95       	neg	r24
    2906:	9f 4f       	sbci	r25, 0xFF	; 255
    2908:	08 95       	ret

0000290a <memcpy>:
    290a:	fb 01       	movw	r30, r22
    290c:	dc 01       	movw	r26, r24
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <memcpy+0xa>
    2910:	01 90       	ld	r0, Z+
    2912:	0d 92       	st	X+, r0
    2914:	41 50       	subi	r20, 0x01	; 1
    2916:	50 40       	sbci	r21, 0x00	; 0
    2918:	d8 f7       	brcc	.-10     	; 0x2910 <memcpy+0x6>
    291a:	08 95       	ret

0000291c <memmove>:
    291c:	68 17       	cp	r22, r24
    291e:	79 07       	cpc	r23, r25
    2920:	68 f4       	brcc	.+26     	; 0x293c <memmove+0x20>
    2922:	fb 01       	movw	r30, r22
    2924:	dc 01       	movw	r26, r24
    2926:	e4 0f       	add	r30, r20
    2928:	f5 1f       	adc	r31, r21
    292a:	a4 0f       	add	r26, r20
    292c:	b5 1f       	adc	r27, r21
    292e:	02 c0       	rjmp	.+4      	; 0x2934 <memmove+0x18>
    2930:	02 90       	ld	r0, -Z
    2932:	0e 92       	st	-X, r0
    2934:	41 50       	subi	r20, 0x01	; 1
    2936:	50 40       	sbci	r21, 0x00	; 0
    2938:	d8 f7       	brcc	.-10     	; 0x2930 <memmove+0x14>
    293a:	08 95       	ret
    293c:	0c 94 85 14 	jmp	0x290a	; 0x290a <memcpy>

00002940 <__eerd_block_m6450a>:
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22

00002944 <__eerd_blraw_m6450a>:
    2944:	fc 01       	movw	r30, r24
    2946:	f9 99       	sbic	0x1f, 1	; 31
    2948:	fe cf       	rjmp	.-4      	; 0x2946 <__eerd_blraw_m6450a+0x2>
    294a:	06 c0       	rjmp	.+12     	; 0x2958 <__eerd_blraw_m6450a+0x14>
    294c:	f2 bd       	out	0x22, r31	; 34
    294e:	e1 bd       	out	0x21, r30	; 33
    2950:	f8 9a       	sbi	0x1f, 0	; 31
    2952:	31 96       	adiw	r30, 0x01	; 1
    2954:	00 b4       	in	r0, 0x20	; 32
    2956:	0d 92       	st	X+, r0
    2958:	41 50       	subi	r20, 0x01	; 1
    295a:	50 40       	sbci	r21, 0x00	; 0
    295c:	b8 f7       	brcc	.-18     	; 0x294c <__eerd_blraw_m6450a+0x8>
    295e:	08 95       	ret

00002960 <__eerd_word_m6450a>:
    2960:	a8 e1       	ldi	r26, 0x18	; 24
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	42 e0       	ldi	r20, 0x02	; 2
    2966:	50 e0       	ldi	r21, 0x00	; 0
    2968:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__eerd_blraw_m6450a>

0000296c <__eeupd_block_m6450a>:
    296c:	dc 01       	movw	r26, r24
    296e:	a4 0f       	add	r26, r20
    2970:	b5 1f       	adc	r27, r21
    2972:	41 50       	subi	r20, 0x01	; 1
    2974:	50 40       	sbci	r21, 0x00	; 0
    2976:	48 f0       	brcs	.+18     	; 0x298a <__eeupd_block_m6450a+0x1e>
    2978:	cb 01       	movw	r24, r22
    297a:	84 0f       	add	r24, r20
    297c:	95 1f       	adc	r25, r21
    297e:	2e 91       	ld	r18, -X
    2980:	0e 94 c7 14 	call	0x298e	; 0x298e <__eeupd_r18_m6450a>
    2984:	41 50       	subi	r20, 0x01	; 1
    2986:	50 40       	sbci	r21, 0x00	; 0
    2988:	d0 f7       	brcc	.-12     	; 0x297e <__eeupd_block_m6450a+0x12>
    298a:	08 95       	ret

0000298c <__eeupd_byte_m6450a>:
    298c:	26 2f       	mov	r18, r22

0000298e <__eeupd_r18_m6450a>:
    298e:	f9 99       	sbic	0x1f, 1	; 31
    2990:	fe cf       	rjmp	.-4      	; 0x298e <__eeupd_r18_m6450a>
    2992:	92 bd       	out	0x22, r25	; 34
    2994:	81 bd       	out	0x21, r24	; 33
    2996:	f8 9a       	sbi	0x1f, 0	; 31
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	00 b4       	in	r0, 0x20	; 32
    299c:	02 16       	cp	r0, r18
    299e:	31 f0       	breq	.+12     	; 0x29ac <__eeupd_r18_m6450a+0x1e>
    29a0:	20 bd       	out	0x20, r18	; 32
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	fa 9a       	sbi	0x1f, 2	; 31
    29a8:	f9 9a       	sbi	0x1f, 1	; 31
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	08 95       	ret

000029ae <__eeupd_word_m6450a>:
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	27 2f       	mov	r18, r23
    29b2:	0e 94 c7 14 	call	0x298e	; 0x298e <__eeupd_r18_m6450a>
    29b6:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__eeupd_byte_m6450a>

000029ba <_exit>:
    29ba:	f8 94       	cli

000029bc <__stop_program>:
    29bc:	ff cf       	rjmp	.-2      	; 0x29bc <__stop_program>
