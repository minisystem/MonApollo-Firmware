
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d4  00800100  00002e50  00002f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e50  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f2  008002d4  008002d4  000030d8  2**0
                  ALLOC
  3 .eeprom       00000776  00810000  00810000  000030d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00003850  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00004788  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000056dc  00000000  00000000  00004a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001445  00000000  00000000  0000a124  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d33  00000000  00000000  0000b569  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c1c  00000000  00000000  0000d29c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000174c  00000000  00000000  0000deb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002e18  00000000  00000000  0000f604  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  0001241c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_9>
      28:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e0 e5       	ldi	r30, 0x50	; 80
      78:	fe e2       	ldi	r31, 0x2E	; 46
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a4 ed       	ldi	r26, 0xD4	; 212
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a6 3c       	cpi	r26, 0xC6	; 198
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <main>
      9a:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 d4 02 	lds	r24, 0x02D4
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8c eb       	ldi	r24, 0xBC	; 188
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 d7 16 	call	0x2dae	; 0x2dae <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 d4 02 	sts	0x02D4, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 ba 01 	lds	r28, 0x01BA
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ec eb       	ldi	r30, 0xBC	; 188
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e6 54       	subi	r30, 0x46	; 70
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	64 54       	subi	r22, 0x44	; 68
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	86 54       	subi	r24, 0x46	; 70
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 d7 16 	call	0x2dae	; 0x2dae <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c8 01 	sts	0x01C8, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 ba 01 	lds	r24, 0x01BA
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 d4 02 	sts	0x02D4, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 d4 02 	sts	0x02D4, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1f6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1f8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1fa:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1fe:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     200:	8c 91       	ld	r24, X
     202:	87 70       	andi	r24, 0x07	; 7
     204:	82 b9       	out	0x02, r24	; 2
     206:	66 e0       	ldi	r22, 0x06	; 6
     208:	6a 95       	dec	r22
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x12>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     20e:	ea ed       	ldi	r30, 0xDA	; 218
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	40 81       	ld	r20, Z
     214:	8c 91       	ld	r24, X
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	86 95       	lsr	r24
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	b9 01       	movw	r22, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <set_control_voltage+0x34>
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <set_control_voltage+0x30>
     22e:	cb 01       	movw	r24, r22
     230:	84 2b       	or	r24, r20
     232:	80 83       	st	Z, r24
     234:	76 e0       	ldi	r23, 0x06	; 6
     236:	7a 95       	dec	r23
     238:	f1 f7       	brne	.-4      	; 0x236 <set_control_voltage+0x40>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     23c:	80 81       	ld	r24, Z
     23e:	9c 91       	ld	r25, X
     240:	96 95       	lsr	r25
     242:	96 95       	lsr	r25
     244:	96 95       	lsr	r25
     246:	97 70       	andi	r25, 0x07	; 7
     248:	02 c0       	rjmp	.+4      	; 0x24e <set_control_voltage+0x58>
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	9a 95       	dec	r25
     250:	e2 f7       	brpl	.-8      	; 0x24a <set_control_voltage+0x54>
     252:	20 95       	com	r18
     254:	28 23       	and	r18, r24
     256:	20 83       	st	Z, r18
	
}	
     258:	08 95       	ret

0000025a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     25a:	83 b3       	in	r24, 0x13	; 19
     25c:	83 60       	ori	r24, 0x03	; 3
     25e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     264:	97 b1       	in	r25, 0x07	; 7
     266:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     268:	e9 ed       	ldi	r30, 0xD9	; 217
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     272:	ea ed       	ldi	r30, 0xDA	; 218
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     27c:	84 b3       	in	r24, 0x14	; 20
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     282:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     284:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     286:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     288:	a0 9a       	sbi	0x14, 0	; 20
}
     28a:	08 95       	ret

0000028c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t place)
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2e 97       	sbiw	r28, 0x0e	; 14
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ac 01       	movw	r20, r24
	
	uint8_t digit[] = {
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	8a 83       	std	Y+2, r24	; 0x02
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	8b 83       	std	Y+3, r24	; 0x03
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	8c 83       	std	Y+4, r24	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2b6:	de 01       	movw	r26, r28
     2b8:	15 96       	adiw	r26, 0x05	; 5
     2ba:	e9 ee       	ldi	r30, 0xE9	; 233
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <display_dec+0x34>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2cc:	ea ed       	ldi	r30, 0xDA	; 218
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d6:	80 81       	ld	r24, Z
     2d8:	8f 7e       	andi	r24, 0xEF	; 239
     2da:	80 83       	st	Z, r24
	
	//set anode bit
	DATA_BUS = digit[place];
     2dc:	06 2f       	mov	r16, r22
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	de 01       	movw	r26, r28
     2e2:	a0 0f       	add	r26, r16
     2e4:	b1 1f       	adc	r27, r17
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	8c 91       	ld	r24, X
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	82 b9       	out	0x02, r24	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2ee:	80 81       	ld	r24, Z
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	80 83       	st	Z, r24
	//if (number > 999) {
	//number = 999;
	//}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     2fa:	ca 01       	movw	r24, r20
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	9a 01       	movw	r18, r20
     306:	36 95       	lsr	r19
     308:	27 95       	ror	r18
     30a:	28 0f       	add	r18, r24
     30c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     30e:	c9 01       	movw	r24, r18
     310:	92 95       	swap	r25
     312:	82 95       	swap	r24
     314:	8f 70       	andi	r24, 0x0F	; 15
     316:	89 27       	eor	r24, r25
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	89 27       	eor	r24, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     320:	29 2f       	mov	r18, r25
     322:	33 27       	eor	r19, r19
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
	r = number - q2 * 10;
     334:	28 2f       	mov	r18, r24
     336:	22 0f       	add	r18, r18
     338:	32 2f       	mov	r19, r18
     33a:	33 0f       	add	r19, r19
     33c:	33 0f       	add	r19, r19
     33e:	23 0f       	add	r18, r19
     340:	e4 2f       	mov	r30, r20
     342:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	ea 30       	cpi	r30, 0x0A	; 10
     34a:	10 f4       	brcc	.+4      	; 0x350 <display_dec+0xc4>
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	68 0f       	add	r22, r24
     352:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     354:	9b 01       	movw	r18, r22
     356:	36 95       	lsr	r19
     358:	27 95       	ror	r18
     35a:	36 95       	lsr	r19
     35c:	27 95       	ror	r18
     35e:	ab 01       	movw	r20, r22
     360:	56 95       	lsr	r21
     362:	47 95       	ror	r20
     364:	24 0f       	add	r18, r20
     366:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     368:	c9 01       	movw	r24, r18
     36a:	92 95       	swap	r25
     36c:	82 95       	swap	r24
     36e:	8f 70       	andi	r24, 0x0F	; 15
     370:	89 27       	eor	r24, r25
     372:	9f 70       	andi	r25, 0x0F	; 15
     374:	89 27       	eor	r24, r25
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     37a:	29 2f       	mov	r18, r25
     37c:	33 27       	eor	r19, r19
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
	r = qa - q3 * 10;
     38e:	98 2f       	mov	r25, r24
     390:	99 0f       	add	r25, r25
     392:	29 2f       	mov	r18, r25
     394:	22 0f       	add	r18, r18
     396:	22 0f       	add	r18, r18
     398:	92 0f       	add	r25, r18
     39a:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	6a 30       	cpi	r22, 0x0A	; 10
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <display_dec+0x118>
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3a6:	43 ef       	ldi	r20, 0xF3	; 243
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	da 01       	movw	r26, r20
     3ac:	a6 0f       	add	r26, r22
     3ae:	b1 1d       	adc	r27, r1
     3b0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3b2:	28 2f       	mov	r18, r24
     3b4:	26 95       	lsr	r18
     3b6:	26 95       	lsr	r18
     3b8:	98 2f       	mov	r25, r24
     3ba:	96 95       	lsr	r25
     3bc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3be:	29 2f       	mov	r18, r25
     3c0:	22 95       	swap	r18
     3c2:	2f 70       	andi	r18, 0x0F	; 15
     3c4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 0f       	add	r18, r18
     3d0:	62 2f       	mov	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	66 0f       	add	r22, r22
     3d6:	26 0f       	add	r18, r22
     3d8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3da:	da 01       	movw	r26, r20
     3dc:	a8 0f       	add	r26, r24
     3de:	b1 1d       	adc	r27, r1
     3e0:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3e2:	4e 0f       	add	r20, r30
     3e4:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3e6:	fa 01       	movw	r30, r20
     3e8:	40 81       	ld	r20, Z
     3ea:	40 93 d7 02 	sts	0x02D7, r20
	digit_index[1] = tens_place;
     3ee:	30 93 d8 02 	sts	0x02D8, r19
	digit_index[2] = hunds_place;
     3f2:	20 93 d9 02 	sts	0x02D9, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	8a 30       	cpi	r24, 0x0A	; 10
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <display_dec+0x172>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     400:	90 93 da 02 	sts	0x02DA, r25

	cathode_byte = dec[digit_index[place]];
     404:	f8 01       	movw	r30, r16
     406:	e9 52       	subi	r30, 0x29	; 41
     408:	fd 4f       	sbci	r31, 0xFD	; 253
     40a:	80 81       	ld	r24, Z
     40c:	fe 01       	movw	r30, r28
     40e:	e8 0f       	add	r30, r24
     410:	f1 1d       	adc	r31, r1
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     412:	85 81       	ldd	r24, Z+5	; 0x05
     414:	80 95       	com	r24
     416:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     418:	ea ed       	ldi	r30, 0xDA	; 218
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     422:	80 81       	ld	r24, Z
     424:	8f 7e       	andi	r24, 0xEF	; 239
     426:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     428:	2e 96       	adiw	r28, 0x0e	; 14
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret

0000043e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     43e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     440:	66 23       	and	r22, r22
     442:	69 f4       	brne	.+26     	; 0x45e <update_display+0x20>

		
			
		display_dec(number, place);
     444:	c0 91 db 02 	lds	r28, 0x02DB
     448:	6c 2f       	mov	r22, r28
     44a:	0e 94 46 01 	call	0x28c	; 0x28c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     44e:	8c 2f       	mov	r24, r28
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	80 93 db 02 	sts	0x02DB, r24
     456:	c3 30       	cpi	r28, 0x03	; 3
     458:	11 f4       	brne	.+4      	; 0x45e <update_display+0x20>
		{
			place = 0;
     45a:	10 92 db 02 	sts	0x02DB, r1
		
		
	}
	
	
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	8f 93       	push	r24
     46e:	9f 93       	push	r25
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     474:	80 91 d3 03 	lds	r24, 0x03D3
     478:	81 50       	subi	r24, 0x01	; 1
     47a:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     47c:	80 91 d4 03 	lds	r24, 0x03D4
     480:	88 23       	and	r24, r24
     482:	a1 f4       	brne	.+40     	; 0x4ac <__vector_10+0x4a>
		count_finished = FALSE;
     484:	10 92 d1 03 	sts	0x03D1, r1
		no_overflow = TRUE;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 d2 02 	sts	0x02D2, r24
		period_counter = 1; //set period counter to 1
     48e:	80 93 d4 03 	sts	0x03D4, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     492:	e1 e8       	ldi	r30, 0x81	; 129
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	90 91 d2 03 	lds	r25, 0x03D2
     49c:	89 2b       	or	r24, r25
     49e:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4a0:	ef e6       	ldi	r30, 0x6F	; 111
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	81 60       	ori	r24, 0x01	; 1
     4a8:	80 83       	st	Z, r24
     4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4ac:	e4 e8       	ldi	r30, 0x84	; 132
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	90 93 d0 03 	sts	0x03D0, r25
     4b8:	80 93 cf 03 	sts	0x03CF, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4bc:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 d1 03 	sts	0x03D1, r24
		period_counter = 0;
     4c6:	10 92 d4 03 	sts	0x03D4, r1
		TCNT1 = 0; //reset timer/counter 1
     4ca:	11 82       	std	Z+1, r1	; 0x01
     4cc:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	9f 91       	pop	r25
     4d4:	8f 91       	pop	r24
     4d6:	0f 90       	pop	r0
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	0f 90       	pop	r0
     4dc:	1f 90       	pop	r1
     4de:	18 95       	reti

000004e0 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     4ea:	10 92 d2 02 	sts	0x02D2, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     4f8:	84 2f       	mov	r24, r20
	remove_note(note);
     4fa:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     4fe:	80 91 dd 02 	lds	r24, 0x02DD
     502:	81 50       	subi	r24, 0x01	; 1
     504:	80 93 dd 02 	sts	0x02DD, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     508:	88 23       	and	r24, r24
     50a:	09 f4       	brne	.+2      	; 0x50e <note_off_event+0x16>
     50c:	89 98       	cbi	0x11, 1	; 17
     50e:	08 95       	ret

00000510 <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     510:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     512:	40 93 1c 03 	sts	0x031C, r20
	if (velocity == 0) {
     516:	22 23       	and	r18, r18
     518:	59 f4       	brne	.+22     	; 0x530 <note_on_event+0x20>
		remove_note(note);
     51a:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     51e:	80 91 dd 02 	lds	r24, 0x02DD
     522:	81 50       	subi	r24, 0x01	; 1
     524:	80 93 dd 02 	sts	0x02DD, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     528:	88 23       	and	r24, r24
     52a:	59 f4       	brne	.+22     	; 0x542 <note_on_event+0x32>
     52c:	89 98       	cbi	0x11, 1	; 17
     52e:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     530:	62 2f       	mov	r22, r18
     532:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     536:	80 91 dd 02 	lds	r24, 0x02DD
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 93 dd 02 	sts	0x02DD, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     540:	89 9a       	sbi	0x11, 1	; 17
     542:	08 95       	ret

00000544 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     544:	87 e2       	ldi	r24, 0x27	; 39
     546:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     54a:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     54e:	88 e9       	ldi	r24, 0x98	; 152
     550:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     554:	08 95       	ret

00000556 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	3f 93       	push	r19
     564:	4f 93       	push	r20
     566:	5f 93       	push	r21
     568:	6f 93       	push	r22
     56a:	7f 93       	push	r23
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
     570:	af 93       	push	r26
     572:	bf 93       	push	r27
     574:	ef 93       	push	r30
     576:	ff 93       	push	r31
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	0f 92       	push	r0
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     582:	80 91 c6 00 	lds	r24, 0x00C6
     586:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     588:	89 ed       	ldi	r24, 0xD9	; 217
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	ae 01       	movw	r20, r28
     590:	4f 5f       	subi	r20, 0xFF	; 255
     592:	5f 4f       	sbci	r21, 0xFF	; 255
     594:	0e 94 84 12 	call	0x2508	; 0x2508 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	ff 91       	pop	r31
     5a0:	ef 91       	pop	r30
     5a2:	bf 91       	pop	r27
     5a4:	af 91       	pop	r26
     5a6:	9f 91       	pop	r25
     5a8:	8f 91       	pop	r24
     5aa:	7f 91       	pop	r23
     5ac:	6f 91       	pop	r22
     5ae:	5f 91       	pop	r21
     5b0:	4f 91       	pop	r20
     5b2:	3f 91       	pop	r19
     5b4:	2f 91       	pop	r18
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     5c0:	c0 e8       	ldi	r28, 0x80	; 128
     5c2:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     5c4:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     5c6:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     5c8:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     5ca:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     5cc:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     5ce:	0e 94 f5 06 	call	0xdea	; 0xdea <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     5d2:	a9 ed       	ldi	r26, 0xD9	; 217
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	8c 91       	ld	r24, X
     5d8:	80 6c       	ori	r24, 0xC0	; 192
     5da:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     5dc:	ea ed       	ldi	r30, 0xDA	; 218
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	80 6c       	ori	r24, 0xC0	; 192
     5e4:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     5e6:	81 b1       	in	r24, 0x01	; 1
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     5ec:	92 b1       	in	r25, 0x02	; 2
     5ee:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     5f0:	8c 91       	ld	r24, X
     5f2:	80 63       	ori	r24, 0x30	; 48
     5f4:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     5f6:	80 81       	ld	r24, Z
     5f8:	8f 7c       	andi	r24, 0xCF	; 207
     5fa:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     5fc:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     5fe:	ec ed       	ldi	r30, 0xDC	; 220
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	80 62       	ori	r24, 0x20	; 32
     606:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     608:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     60a:	ed ed       	ldi	r30, 0xDD	; 221
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	80 62       	ori	r24, 0x20	; 32
     612:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     614:	80 81       	ld	r24, Z
     616:	8f 7d       	andi	r24, 0xDF	; 223
     618:	80 83       	st	Z, r24
	DATA_BUS = 0;
     61a:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     61c:	c0 93 60 03 	sts	0x0360, r28
	
	//setup ADC
    setup_adc();		
     620:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     624:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     628:	c9 ed       	ldi	r28, 0xD9	; 217
     62a:	d3 e0       	ldi	r29, 0x03	; 3
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     632:	ce 01       	movw	r24, r28
     634:	68 e8       	ldi	r22, 0x88	; 136
     636:	72 e0       	ldi	r23, 0x02	; 2
     638:	0e 94 1b 12 	call	0x2436	; 0x2436 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     63c:	ce 01       	movw	r24, r28
     63e:	6c e7       	ldi	r22, 0x7C	; 124
     640:	72 e0       	ldi	r23, 0x02	; 2
     642:	0e 94 1f 12 	call	0x243e	; 0x243e <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     646:	0e 94 a2 02 	call	0x544	; 0x544 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     64a:	0e 94 1a 07 	call	0xe34	; 0xe34 <update_spi>
	
	
	
		
	sei(); //enable global interrupts
     64e:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     650:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
     654:	81 e4       	ldi	r24, 0x41	; 65
     656:	80 93 d5 03 	sts	0x03D5, r24
	current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
     65a:	82 e2       	ldi	r24, 0x22	; 34
     65c:	80 93 62 03 	sts	0x0362, r24
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     660:	8e 01       	movw	r16, r28
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     662:	0f 2e       	mov	r0, r31
     664:	f7 ed       	ldi	r31, 0xD7	; 215
     666:	ef 2e       	mov	r14, r31
     668:	f3 e0       	ldi	r31, 0x03	; 3
     66a:	ff 2e       	mov	r15, r31
     66c:	f0 2d       	mov	r31, r0
	

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     66e:	c8 01       	movw	r24, r16
     670:	0e 94 ae 14 	call	0x295c	; 0x295c <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     674:	80 91 3d 02 	lds	r24, 0x023D
     678:	90 91 3e 02 	lds	r25, 0x023E
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		scan_pots_and_update_control_voltages();
     682:	0e 94 85 05 	call	0xb0a	; 0xb0a <scan_pots_and_update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     686:	80 91 dc 02 	lds	r24, 0x02DC
     68a:	98 2f       	mov	r25, r24
     68c:	9f 5f       	subi	r25, 0xFF	; 255
     68e:	90 93 dc 02 	sts	0x02DC, r25
     692:	85 30       	cpi	r24, 0x05	; 5
     694:	61 f7       	brne	.-40     	; 0x66e <main+0xae>
		{
			switch_timer = 0;
     696:	10 92 dc 02 	sts	0x02DC, r1
			//read switches directly connected to MCU				
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     69a:	f7 01       	movw	r30, r14
     69c:	c0 81       	ld	r28, Z
     69e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <read_switch_port>
     6a2:	8c 27       	eor	r24, r28
     6a4:	f7 01       	movw	r30, r14
     6a6:	80 83       	st	Z, r24
			update_spi();
     6a8:	0e 94 1a 07 	call	0xe34	; 0xe34 <update_spi>
			refresh_synth();
     6ac:	0e 94 6f 08 	call	0x10de	; 0x10de <refresh_synth>
     6b0:	de cf       	rjmp	.-68     	; 0x66e <main+0xae>

000006b2 <scan_pots>:
	&release_2_cv,
	&release_1_cv
	}; 
	
	
void scan_pots(void) { //should probably move this to adc.c
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	c0 e0       	ldi	r28, 0x00	; 0
     6c4:	d1 e0       	ldi	r29, 0x01	; 1
     6c6:	03 e2       	ldi	r16, 0x23	; 35
     6c8:	13 e0       	ldi	r17, 0x03	; 3
     6ca:	0f 2e       	mov	r0, r31
     6cc:	fc e3       	ldi	r31, 0x3C	; 60
     6ce:	cf 2e       	mov	r12, r31
     6d0:	dd 24       	eor	r13, r13
     6d2:	f0 2d       	mov	r31, r0
     6d4:	cc 0e       	add	r12, r28
     6d6:	dd 1e       	adc	r13, r29
     6d8:	7e 01       	movw	r14, r28
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     6da:	88 81       	ld	r24, Y
     6dc:	99 81       	ldd	r25, Y+1	; 0x01
     6de:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     6e2:	90 93 1e 03 	sts	0x031E, r25
     6e6:	80 93 1d 03 	sts	0x031D, r24
		adc_change = adc_value - pot_id[i]->value;
     6ea:	e9 91       	ld	r30, Y+
     6ec:	f9 91       	ld	r31, Y+
     6ee:	40 81       	ld	r20, Z
     6f0:	21 81       	ldd	r18, Z+1	; 0x01
     6f2:	52 2f       	mov	r21, r18
     6f4:	53 70       	andi	r21, 0x03	; 3
     6f6:	84 1b       	sub	r24, r20
     6f8:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     6fa:	95 95       	asr	r25
     6fc:	87 95       	ror	r24
     6fe:	95 95       	asr	r25
     700:	87 95       	ror	r24
     702:	84 0f       	add	r24, r20
     704:	95 1f       	adc	r25, r21
     706:	80 83       	st	Z, r24
     708:	89 2f       	mov	r24, r25
     70a:	83 70       	andi	r24, 0x03	; 3
     70c:	2c 7f       	andi	r18, 0xFC	; 252
     70e:	28 2b       	or	r18, r24
     710:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		//otherwise, the pot value is assigned to it's corresponding parameter in the current_patch struct:
		*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     712:	d7 01       	movw	r26, r14
     714:	ed 91       	ld	r30, X+
     716:	fc 91       	ld	r31, X
     718:	11 97       	sbiw	r26, 0x01	; 1
     71a:	90 81       	ld	r25, Z
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	83 70       	andi	r24, 0x03	; 3
     720:	f8 01       	movw	r30, r16
     722:	90 83       	st	Z, r25
     724:	81 83       	std	Z+1, r24	; 0x01
     726:	0e 5f       	subi	r16, 0xFE	; 254
     728:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     72a:	cc 15       	cp	r28, r12
     72c:	dd 05       	cpc	r29, r13
     72e:	a1 f6       	brne	.-88     	; 0x6d8 <scan_pots+0x26>
		//otherwise, the pot value is assigned to it's corresponding parameter in the current_patch struct:
		*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
	}

	//scan volume pot
	adc_value = read_pot(&volume_pot);
     730:	8e e7       	ldi	r24, 0x7E	; 126
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     738:	90 93 1e 03 	sts	0x031E, r25
     73c:	80 93 1d 03 	sts	0x031D, r24
	adc_change = adc_value - volume_pot.value;
     740:	20 91 7e 01 	lds	r18, 0x017E
     744:	40 91 7f 01 	lds	r20, 0x017F
     748:	34 2f       	mov	r19, r20
     74a:	33 70       	andi	r19, 0x03	; 3
     74c:	82 1b       	sub	r24, r18
     74e:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     750:	95 95       	asr	r25
     752:	87 95       	ror	r24
     754:	95 95       	asr	r25
     756:	87 95       	ror	r24
     758:	28 0f       	add	r18, r24
     75a:	39 1f       	adc	r19, r25
     75c:	20 93 7e 01 	sts	0x017E, r18
     760:	83 2f       	mov	r24, r19
     762:	83 70       	andi	r24, 0x03	; 3
     764:	4c 7f       	andi	r20, 0xFC	; 252
     766:	48 2b       	or	r20, r24
     768:	40 93 7f 01 	sts	0x017F, r20
	
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	08 95       	ret

0000077e <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     782:	60 91 23 03 	lds	r22, 0x0323
     786:	70 91 24 03 	lds	r23, 0x0324
     78a:	62 95       	swap	r22
     78c:	72 95       	swap	r23
     78e:	70 7f       	andi	r23, 0xF0	; 240
     790:	76 27       	eor	r23, r22
     792:	60 7f       	andi	r22, 0xF0	; 240
     794:	76 27       	eor	r23, r22
     796:	86 ee       	ldi	r24, 0xE6	; 230
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     79e:	60 91 25 03 	lds	r22, 0x0325
     7a2:	70 91 26 03 	lds	r23, 0x0326
     7a6:	62 95       	swap	r22
     7a8:	72 95       	swap	r23
     7aa:	70 7f       	andi	r23, 0xF0	; 240
     7ac:	76 27       	eor	r23, r22
     7ae:	60 7f       	andi	r22, 0xF0	; 240
     7b0:	76 27       	eor	r23, r22
     7b2:	85 ee       	ldi	r24, 0xE5	; 229
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     7ba:	60 91 27 03 	lds	r22, 0x0327
     7be:	70 91 28 03 	lds	r23, 0x0328
     7c2:	66 0f       	add	r22, r22
     7c4:	77 1f       	adc	r23, r23
     7c6:	66 0f       	add	r22, r22
     7c8:	77 1f       	adc	r23, r23
     7ca:	66 0f       	add	r22, r22
     7cc:	77 1f       	adc	r23, r23
     7ce:	84 ee       	ldi	r24, 0xE4	; 228
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     7d6:	60 91 29 03 	lds	r22, 0x0329
     7da:	70 91 2a 03 	lds	r23, 0x032A
     7de:	62 95       	swap	r22
     7e0:	72 95       	swap	r23
     7e2:	70 7f       	andi	r23, 0xF0	; 240
     7e4:	76 27       	eor	r23, r22
     7e6:	60 7f       	andi	r22, 0xF0	; 240
     7e8:	76 27       	eor	r23, r22
     7ea:	86 ed       	ldi	r24, 0xD6	; 214
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     7f2:	60 91 2b 03 	lds	r22, 0x032B
     7f6:	70 91 2c 03 	lds	r23, 0x032C
     7fa:	66 0f       	add	r22, r22
     7fc:	77 1f       	adc	r23, r23
     7fe:	66 0f       	add	r22, r22
     800:	77 1f       	adc	r23, r23
     802:	66 0f       	add	r22, r22
     804:	77 1f       	adc	r23, r23
     806:	83 ee       	ldi	r24, 0xE3	; 227
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     80e:	60 91 2d 03 	lds	r22, 0x032D
     812:	70 91 2e 03 	lds	r23, 0x032E
     816:	62 95       	swap	r22
     818:	72 95       	swap	r23
     81a:	70 7f       	andi	r23, 0xF0	; 240
     81c:	76 27       	eor	r23, r22
     81e:	60 7f       	andi	r22, 0xF0	; 240
     820:	76 27       	eor	r23, r22
     822:	82 ee       	ldi	r24, 0xE2	; 226
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     82a:	60 91 2f 03 	lds	r22, 0x032F
     82e:	70 91 30 03 	lds	r23, 0x0330
     832:	62 95       	swap	r22
     834:	72 95       	swap	r23
     836:	70 7f       	andi	r23, 0xF0	; 240
     838:	76 27       	eor	r23, r22
     83a:	60 7f       	andi	r22, 0xF0	; 240
     83c:	76 27       	eor	r23, r22
     83e:	81 ee       	ldi	r24, 0xE1	; 225
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     846:	60 91 31 03 	lds	r22, 0x0331
     84a:	70 91 32 03 	lds	r23, 0x0332
     84e:	62 95       	swap	r22
     850:	72 95       	swap	r23
     852:	70 7f       	andi	r23, 0xF0	; 240
     854:	76 27       	eor	r23, r22
     856:	60 7f       	andi	r22, 0xF0	; 240
     858:	76 27       	eor	r23, r22
     85a:	80 ee       	ldi	r24, 0xE0	; 224
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     862:	80 91 35 03 	lds	r24, 0x0335
     866:	90 91 36 03 	lds	r25, 0x0336
     86a:	c0 e0       	ldi	r28, 0x00	; 0
     86c:	d2 e0       	ldi	r29, 0x02	; 2
     86e:	c8 1b       	sub	r28, r24
     870:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     872:	60 91 ca 03 	lds	r22, 0x03CA
     876:	70 91 cb 03 	lds	r23, 0x03CB
     87a:	60 50       	subi	r22, 0x00	; 0
     87c:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     87e:	80 91 33 03 	lds	r24, 0x0333
     882:	90 91 34 03 	lds	r25, 0x0334
     886:	68 1b       	sub	r22, r24
     888:	79 0b       	sbc	r23, r25
     88a:	6c 0f       	add	r22, r28
     88c:	7d 1f       	adc	r23, r29
     88e:	8f ed       	ldi	r24, 0xDF	; 223
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     896:	60 91 cc 03 	lds	r22, 0x03CC
     89a:	70 91 cd 03 	lds	r23, 0x03CD
     89e:	6c 0f       	add	r22, r28
     8a0:	7d 1f       	adc	r23, r29
     8a2:	8e ed       	ldi	r24, 0xDE	; 222
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     8aa:	60 91 37 03 	lds	r22, 0x0337
     8ae:	70 91 38 03 	lds	r23, 0x0338
     8b2:	62 95       	swap	r22
     8b4:	72 95       	swap	r23
     8b6:	70 7f       	andi	r23, 0xF0	; 240
     8b8:	76 27       	eor	r23, r22
     8ba:	60 7f       	andi	r22, 0xF0	; 240
     8bc:	76 27       	eor	r23, r22
     8be:	8d ed       	ldi	r24, 0xDD	; 221
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     8c6:	60 91 3b 03 	lds	r22, 0x033B
     8ca:	70 91 3c 03 	lds	r23, 0x033C
     8ce:	62 95       	swap	r22
     8d0:	72 95       	swap	r23
     8d2:	70 7f       	andi	r23, 0xF0	; 240
     8d4:	76 27       	eor	r23, r22
     8d6:	60 7f       	andi	r22, 0xF0	; 240
     8d8:	76 27       	eor	r23, r22
     8da:	8c ed       	ldi	r24, 0xDC	; 220
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     8e2:	60 91 3d 03 	lds	r22, 0x033D
     8e6:	70 91 3e 03 	lds	r23, 0x033E
     8ea:	62 95       	swap	r22
     8ec:	72 95       	swap	r23
     8ee:	70 7f       	andi	r23, 0xF0	; 240
     8f0:	76 27       	eor	r23, r22
     8f2:	60 7f       	andi	r22, 0xF0	; 240
     8f4:	76 27       	eor	r23, r22
     8f6:	8b ed       	ldi	r24, 0xDB	; 219
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     8fe:	60 91 7e 01 	lds	r22, 0x017E
     902:	80 91 7f 01 	lds	r24, 0x017F
     906:	78 2f       	mov	r23, r24
     908:	73 70       	andi	r23, 0x03	; 3
     90a:	62 95       	swap	r22
     90c:	72 95       	swap	r23
     90e:	70 7f       	andi	r23, 0xF0	; 240
     910:	76 27       	eor	r23, r22
     912:	60 7f       	andi	r22, 0xF0	; 240
     914:	76 27       	eor	r23, r22
     916:	8a ed       	ldi	r24, 0xDA	; 218
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     91e:	60 91 41 03 	lds	r22, 0x0341
     922:	70 91 42 03 	lds	r23, 0x0342
     926:	62 95       	swap	r22
     928:	72 95       	swap	r23
     92a:	70 7f       	andi	r23, 0xF0	; 240
     92c:	76 27       	eor	r23, r22
     92e:	60 7f       	andi	r22, 0xF0	; 240
     930:	76 27       	eor	r23, r22
     932:	88 ed       	ldi	r24, 0xD8	; 216
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     93a:	60 91 43 03 	lds	r22, 0x0343
     93e:	70 91 44 03 	lds	r23, 0x0344
     942:	62 95       	swap	r22
     944:	72 95       	swap	r23
     946:	70 7f       	andi	r23, 0xF0	; 240
     948:	76 27       	eor	r23, r22
     94a:	60 7f       	andi	r22, 0xF0	; 240
     94c:	76 27       	eor	r23, r22
     94e:	87 ed       	ldi	r24, 0xD7	; 215
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     956:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     95a:	88 30       	cpi	r24, 0x08	; 8
     95c:	08 f4       	brcc	.+2      	; 0x960 <update_control_voltages+0x1e2>
     95e:	88 e0       	ldi	r24, 0x08	; 8
	value_to_display = note;
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	30 93 3e 02 	sts	0x023E, r19
     968:	20 93 3d 02 	sts	0x023D, r18
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     96c:	88 50       	subi	r24, 0x08	; 8
     96e:	66 e6       	ldi	r22, 0x66	; 102
     970:	73 e0       	ldi	r23, 0x03	; 3
     972:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     976:	bc 01       	movw	r22, r24
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	20 91 47 03 	lds	r18, 0x0347
     980:	30 91 48 03 	lds	r19, 0x0348
     984:	40 e0       	ldi	r20, 0x00	; 0
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__mulsi3>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
     990:	07 2e       	mov	r0, r23
     992:	7a e0       	ldi	r23, 0x0A	; 10
     994:	b6 95       	lsr	r27
     996:	a7 95       	ror	r26
     998:	97 95       	ror	r25
     99a:	87 95       	ror	r24
     99c:	7a 95       	dec	r23
     99e:	d1 f7       	brne	.-12     	; 0x994 <update_control_voltages+0x216>
     9a0:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     9a2:	60 91 45 03 	lds	r22, 0x0345
     9a6:	70 91 46 03 	lds	r23, 0x0346
     9aa:	62 95       	swap	r22
     9ac:	72 95       	swap	r23
     9ae:	70 7f       	andi	r23, 0xF0	; 240
     9b0:	76 27       	eor	r23, r22
     9b2:	60 7f       	andi	r22, 0xF0	; 240
     9b4:	76 27       	eor	r23, r22
     9b6:	86 0f       	add	r24, r22
     9b8:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     9ba:	bc 01       	movw	r22, r24
     9bc:	80 e4       	ldi	r24, 0x40	; 64
     9be:	60 30       	cpi	r22, 0x00	; 0
     9c0:	78 07       	cpc	r23, r24
     9c2:	10 f0       	brcs	.+4      	; 0x9c8 <update_control_voltages+0x24a>
     9c4:	6f ef       	ldi	r22, 0xFF	; 255
     9c6:	7f e3       	ldi	r23, 0x3F	; 63
     9c8:	86 ed       	ldi	r24, 0xD6	; 214
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     9d0:	60 91 49 03 	lds	r22, 0x0349
     9d4:	70 91 4a 03 	lds	r23, 0x034A
     9d8:	62 95       	swap	r22
     9da:	72 95       	swap	r23
     9dc:	70 7f       	andi	r23, 0xF0	; 240
     9de:	76 27       	eor	r23, r22
     9e0:	60 7f       	andi	r22, 0xF0	; 240
     9e2:	76 27       	eor	r23, r22
     9e4:	84 ed       	ldi	r24, 0xD4	; 212
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     9ec:	60 91 4b 03 	lds	r22, 0x034B
     9f0:	70 91 4c 03 	lds	r23, 0x034C
     9f4:	62 95       	swap	r22
     9f6:	72 95       	swap	r23
     9f8:	70 7f       	andi	r23, 0xF0	; 240
     9fa:	76 27       	eor	r23, r22
     9fc:	60 7f       	andi	r22, 0xF0	; 240
     9fe:	76 27       	eor	r23, r22
     a00:	83 ed       	ldi	r24, 0xD3	; 211
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     a08:	60 91 4d 03 	lds	r22, 0x034D
     a0c:	70 91 4e 03 	lds	r23, 0x034E
     a10:	62 95       	swap	r22
     a12:	72 95       	swap	r23
     a14:	70 7f       	andi	r23, 0xF0	; 240
     a16:	76 27       	eor	r23, r22
     a18:	60 7f       	andi	r22, 0xF0	; 240
     a1a:	76 27       	eor	r23, r22
     a1c:	82 ed       	ldi	r24, 0xD2	; 210
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     a24:	60 91 4f 03 	lds	r22, 0x034F
     a28:	70 91 50 03 	lds	r23, 0x0350
     a2c:	62 95       	swap	r22
     a2e:	72 95       	swap	r23
     a30:	70 7f       	andi	r23, 0xF0	; 240
     a32:	76 27       	eor	r23, r22
     a34:	60 7f       	andi	r22, 0xF0	; 240
     a36:	76 27       	eor	r23, r22
     a38:	81 ed       	ldi	r24, 0xD1	; 209
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     a40:	60 91 51 03 	lds	r22, 0x0351
     a44:	70 91 52 03 	lds	r23, 0x0352
     a48:	62 95       	swap	r22
     a4a:	72 95       	swap	r23
     a4c:	70 7f       	andi	r23, 0xF0	; 240
     a4e:	76 27       	eor	r23, r22
     a50:	60 7f       	andi	r22, 0xF0	; 240
     a52:	76 27       	eor	r23, r22
     a54:	80 ed       	ldi	r24, 0xD0	; 208
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     a5c:	60 91 53 03 	lds	r22, 0x0353
     a60:	70 91 54 03 	lds	r23, 0x0354
     a64:	62 95       	swap	r22
     a66:	72 95       	swap	r23
     a68:	70 7f       	andi	r23, 0xF0	; 240
     a6a:	76 27       	eor	r23, r22
     a6c:	60 7f       	andi	r22, 0xF0	; 240
     a6e:	76 27       	eor	r23, r22
     a70:	8f ec       	ldi	r24, 0xCF	; 207
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     a78:	60 91 55 03 	lds	r22, 0x0355
     a7c:	70 91 56 03 	lds	r23, 0x0356
     a80:	62 95       	swap	r22
     a82:	72 95       	swap	r23
     a84:	70 7f       	andi	r23, 0xF0	; 240
     a86:	76 27       	eor	r23, r22
     a88:	60 7f       	andi	r22, 0xF0	; 240
     a8a:	76 27       	eor	r23, r22
     a8c:	8e ec       	ldi	r24, 0xCE	; 206
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     a94:	60 91 59 03 	lds	r22, 0x0359
     a98:	70 91 5a 03 	lds	r23, 0x035A
     a9c:	62 95       	swap	r22
     a9e:	72 95       	swap	r23
     aa0:	70 7f       	andi	r23, 0xF0	; 240
     aa2:	76 27       	eor	r23, r22
     aa4:	60 7f       	andi	r22, 0xF0	; 240
     aa6:	76 27       	eor	r23, r22
     aa8:	8c ec       	ldi	r24, 0xCC	; 204
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     ab0:	60 91 57 03 	lds	r22, 0x0357
     ab4:	70 91 58 03 	lds	r23, 0x0358
     ab8:	62 95       	swap	r22
     aba:	72 95       	swap	r23
     abc:	70 7f       	andi	r23, 0xF0	; 240
     abe:	76 27       	eor	r23, r22
     ac0:	60 7f       	andi	r22, 0xF0	; 240
     ac2:	76 27       	eor	r23, r22
     ac4:	8d ec       	ldi	r24, 0xCD	; 205
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     acc:	60 91 5d 03 	lds	r22, 0x035D
     ad0:	70 91 5e 03 	lds	r23, 0x035E
     ad4:	62 95       	swap	r22
     ad6:	72 95       	swap	r23
     ad8:	70 7f       	andi	r23, 0xF0	; 240
     ada:	76 27       	eor	r23, r22
     adc:	60 7f       	andi	r22, 0xF0	; 240
     ade:	76 27       	eor	r23, r22
     ae0:	8a ec       	ldi	r24, 0xCA	; 202
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     ae8:	60 91 5b 03 	lds	r22, 0x035B
     aec:	70 91 5c 03 	lds	r23, 0x035C
     af0:	62 95       	swap	r22
     af2:	72 95       	swap	r23
     af4:	70 7f       	andi	r23, 0xF0	; 240
     af6:	76 27       	eor	r23, r22
     af8:	60 7f       	andi	r22, 0xF0	; 240
     afa:	76 27       	eor	r23, r22
     afc:	8b ec       	ldi	r24, 0xCB	; 203
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	
}			
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <scan_pots_and_update_control_voltages>:
	
void scan_pots_and_update_control_voltages(void) {
     b0a:	2f 92       	push	r2
     b0c:	3f 92       	push	r3
     b0e:	4f 92       	push	r4
     b10:	5f 92       	push	r5
     b12:	6f 92       	push	r6
     b14:	7f 92       	push	r7
     b16:	8f 92       	push	r8
     b18:	9f 92       	push	r9
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	value_to_display = note + 8965;	
     b2e:	0f 2e       	mov	r0, r31
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	cf 2e       	mov	r12, r31
     b34:	f1 e0       	ldi	r31, 0x01	; 1
     b36:	df 2e       	mov	r13, r31
     b38:	f0 2d       	mov	r31, r0
     b3a:	0c ef       	ldi	r16, 0xFC	; 252
     b3c:	12 e0       	ldi	r17, 0x02	; 2
     b3e:	0f 2e       	mov	r0, r31
     b40:	fd e1       	ldi	r31, 0x1D	; 29
     b42:	ef 2e       	mov	r14, r31
     b44:	f2 e0       	ldi	r31, 0x02	; 2
     b46:	ff 2e       	mov	r15, r31
     b48:	f0 2d       	mov	r31, r0
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
	
	
}			
	
void scan_pots_and_update_control_voltages(void) {
     b4a:	c1 e0       	ldi	r28, 0x01	; 1
     b4c:	d0 e0       	ldi	r29, 0x00	; 0
	int tune_offset = 0;
     b4e:	aa 24       	eor	r10, r10
     b50:	bb 24       	eor	r11, r11
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     b52:	0f 2e       	mov	r0, r31
     b54:	ff ed       	ldi	r31, 0xDF	; 223
     b56:	6f 2e       	mov	r6, r31
     b58:	f1 e0       	ldi	r31, 0x01	; 1
     b5a:	7f 2e       	mov	r7, r31
     b5c:	f0 2d       	mov	r31, r0
				break;
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     b5e:	88 24       	eor	r8, r8
     b60:	99 24       	eor	r9, r9
     b62:	68 94       	set
     b64:	91 f8       	bld	r9, 1
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     b66:	0f 2e       	mov	r0, r31
     b68:	fe ed       	ldi	r31, 0xDE	; 222
     b6a:	4f 2e       	mov	r4, r31
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	5f 2e       	mov	r5, r31
     b70:	f0 2d       	mov	r31, r0
				//value_to_display = pot_group_0[11];
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     b72:	0f 2e       	mov	r0, r31
     b74:	f3 ee       	ldi	r31, 0xE3	; 227
     b76:	2f 2e       	mov	r2, r31
     b78:	f1 e0       	ldi	r31, 0x01	; 1
     b7a:	3f 2e       	mov	r3, r31
     b7c:	f0 2d       	mov	r31, r0
     b7e:	05 c0       	rjmp	.+10     	; 0xb8a <scan_pots_and_update_control_voltages+0x80>
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	value_to_display = note + 8965;	
     b80:	21 96       	adiw	r28, 0x01	; 1
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	e8 0e       	add	r14, r24
     b88:	f9 1e       	adc	r15, r25
	int tune_offset = 0;
	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{

		adc_value = read_pot(pot_id[i]);
     b8a:	f6 01       	movw	r30, r12
     b8c:	81 91       	ld	r24, Z+
     b8e:	91 91       	ld	r25, Z+
     b90:	6f 01       	movw	r12, r30
     b92:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     b96:	90 93 1e 03 	sts	0x031E, r25
     b9a:	80 93 1d 03 	sts	0x031D, r24
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
     b9e:	f8 01       	movw	r30, r16
     ba0:	60 81       	ld	r22, Z
     ba2:	71 81       	ldd	r23, Z+1	; 0x01
     ba4:	86 1b       	sub	r24, r22
     ba6:	97 0b       	sbc	r25, r23
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
     ba8:	95 95       	asr	r25
     baa:	87 95       	ror	r24
     bac:	95 95       	asr	r25
     bae:	87 95       	ror	r24
     bb0:	9c 01       	movw	r18, r24
     bb2:	26 0f       	add	r18, r22
     bb4:	37 1f       	adc	r19, r23
     bb6:	21 93       	st	Z+, r18
     bb8:	31 93       	st	Z+, r19
     bba:	8f 01       	movw	r16, r30
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
	
	
}			
	
void scan_pots_and_update_control_voltages(void) {
     bbc:	ce 01       	movw	r24, r28
     bbe:	01 97       	sbiw	r24, 0x01	; 1
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
		int fine_offset = 0;
		
		switch (i)
     bc0:	88 30       	cpi	r24, 0x08	; 8
     bc2:	91 05       	cpc	r25, r1
     bc4:	71 f0       	breq	.+28     	; 0xbe2 <scan_pots_and_update_control_voltages+0xd8>
     bc6:	89 30       	cpi	r24, 0x09	; 9
     bc8:	91 05       	cpc	r25, r1
     bca:	24 f4       	brge	.+8      	; 0xbd4 <scan_pots_and_update_control_voltages+0xca>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	91 05       	cpc	r25, r1
     bd0:	71 f5       	brne	.+92     	; 0xc2e <scan_pots_and_update_control_voltages+0x124>
     bd2:	22 c0       	rjmp	.+68     	; 0xc18 <scan_pots_and_update_control_voltages+0x10e>
     bd4:	89 30       	cpi	r24, 0x09	; 9
     bd6:	91 05       	cpc	r25, r1
     bd8:	91 f0       	breq	.+36     	; 0xbfe <scan_pots_and_update_control_voltages+0xf4>
     bda:	8b 30       	cpi	r24, 0x0B	; 11
     bdc:	91 05       	cpc	r25, r1
     bde:	39 f5       	brne	.+78     	; 0xc2e <scan_pots_and_update_control_voltages+0x124>
     be0:	32 c0       	rjmp	.+100    	; 0xc46 <scan_pots_and_update_control_voltages+0x13c>
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
     be2:	60 91 ca 03 	lds	r22, 0x03CA
     be6:	70 91 cb 03 	lds	r23, 0x03CB
     bea:	60 50       	subi	r22, 0x00	; 0
     bec:	7e 4f       	sbci	r23, 0xFE	; 254
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);			
     bee:	6a 0d       	add	r22, r10
     bf0:	7b 1d       	adc	r23, r11
     bf2:	62 1b       	sub	r22, r18
     bf4:	73 0b       	sbc	r23, r19
     bf6:	c3 01       	movw	r24, r6
     bf8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				break;
     bfc:	c1 cf       	rjmp	.-126    	; 0xb80 <scan_pots_and_update_control_voltages+0x76>
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     bfe:	54 01       	movw	r10, r8
     c00:	a2 1a       	sub	r10, r18
     c02:	b3 0a       	sbc	r11, r19
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     c04:	60 91 cc 03 	lds	r22, 0x03CC
     c08:	70 91 cd 03 	lds	r23, 0x03CD
     c0c:	6a 0d       	add	r22, r10
     c0e:	7b 1d       	adc	r23, r11
     c10:	c2 01       	movw	r24, r4
     c12:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				break;
     c16:	b4 cf       	rjmp	.-152    	; 0xb80 <scan_pots_and_update_control_voltages+0x76>
				//value_to_display = pot_group_0[11];
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     c18:	b9 01       	movw	r22, r18
     c1a:	66 0f       	add	r22, r22
     c1c:	77 1f       	adc	r23, r23
     c1e:	66 0f       	add	r22, r22
     c20:	77 1f       	adc	r23, r23
     c22:	66 0f       	add	r22, r22
     c24:	77 1f       	adc	r23, r23
     c26:	c1 01       	movw	r24, r2
     c28:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				break;
     c2c:	a9 cf       	rjmp	.-174    	; 0xb80 <scan_pots_and_update_control_voltages+0x76>
			
			default: //set control voltage full-scale
				set_control_voltage(pot_decoder_0[i], pot_group_0[i] << 4);
     c2e:	b9 01       	movw	r22, r18
     c30:	62 95       	swap	r22
     c32:	72 95       	swap	r23
     c34:	70 7f       	andi	r23, 0xF0	; 240
     c36:	76 27       	eor	r23, r22
     c38:	60 7f       	andi	r22, 0xF0	; 240
     c3a:	76 27       	eor	r23, r22
     c3c:	f7 01       	movw	r30, r14
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}			
	
void scan_pots_and_update_control_voltages(void) {
	int tune_offset = 0;
	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     c46:	c0 31       	cpi	r28, 0x10	; 16
     c48:	d1 05       	cpc	r29, r1
     c4a:	0c f4       	brge	.+2      	; 0xc4e <scan_pots_and_update_control_voltages+0x144>
     c4c:	99 cf       	rjmp	.-206    	; 0xb80 <scan_pots_and_update_control_voltages+0x76>
			
		}
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
     c4e:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     c52:	b8 2e       	mov	r11, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     c54:	f7 e0       	ldi	r31, 0x07	; 7
     c56:	f8 17       	cp	r31, r24
     c58:	18 f0       	brcs	.+6      	; 0xc60 <scan_pots_and_update_control_voltages+0x156>
     c5a:	bb 24       	eor	r11, r11
     c5c:	68 94       	set
     c5e:	b3 f8       	bld	r11, 3
	value_to_display = note + 8965;	
     c60:	8b 2d       	mov	r24, r11
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	8b 5f       	subi	r24, 0xFB	; 251
     c66:	9c 4d       	sbci	r25, 0xDC	; 220
     c68:	90 93 3e 02 	sts	0x023E, r25
     c6c:	80 93 3d 02 	sts	0x023D, r24
     c70:	0f 2e       	mov	r0, r31
     c72:	f0 e2       	ldi	r31, 0x20	; 32
     c74:	cf 2e       	mov	r12, r31
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	df 2e       	mov	r13, r31
     c7a:	f0 2d       	mov	r31, r0
     c7c:	0e ed       	ldi	r16, 0xDE	; 222
     c7e:	12 e0       	ldi	r17, 0x02	; 2
     c80:	0f 2e       	mov	r0, r31
     c82:	ff ef       	ldi	r31, 0xFF	; 255
     c84:	ef 2e       	mov	r14, r31
     c86:	f1 e0       	ldi	r31, 0x01	; 1
     c88:	ff 2e       	mov	r15, r31
     c8a:	f0 2d       	mov	r31, r0
     c8c:	c1 e0       	ldi	r28, 0x01	; 1
     c8e:	d0 e0       	ldi	r29, 0x00	; 0
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
		
		switch(i) 
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     c90:	0f 2e       	mov	r0, r31
     c92:	f8 ef       	ldi	r31, 0xF8	; 248
     c94:	af 2e       	mov	r10, r31
     c96:	f0 2d       	mov	r31, r0
     c98:	ab 0c       	add	r10, r11
     c9a:	0f 2e       	mov	r0, r31
     c9c:	f6 e6       	ldi	r31, 0x66	; 102
     c9e:	6f 2e       	mov	r6, r31
     ca0:	f3 e0       	ldi	r31, 0x03	; 3
     ca2:	7f 2e       	mov	r7, r31
     ca4:	f0 2d       	mov	r31, r0
				uint16_t key_track_byte = (pot_group_1[3]); //
     ca6:	0f 2e       	mov	r0, r31
     ca8:	f4 ee       	ldi	r31, 0xE4	; 228
     caa:	8f 2e       	mov	r8, r31
     cac:	f2 e0       	ldi	r31, 0x02	; 2
     cae:	9f 2e       	mov	r9, r31
     cb0:	f0 2d       	mov	r31, r0
				//if (key_track_byte > 1020) key_track_byte = 1024;			 
				uint16_t divided_pitch_cv = ((uint32_t)key_track_byte*interpolated_pitch_cv) >> 10; //note that product of key_track_byte and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly

				//value_to_display = divided_pitch_cv;
							
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     cb2:	0f 2e       	mov	r0, r31
     cb4:	fe ef       	ldi	r31, 0xFE	; 254
     cb6:	4f 2e       	mov	r4, r31
     cb8:	ff ef       	ldi	r31, 0xFF	; 255
     cba:	5f 2e       	mov	r5, r31
     cbc:	f0 2d       	mov	r31, r0
     cbe:	48 0c       	add	r4, r8
     cc0:	59 1c       	adc	r5, r9
				if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
				set_control_voltage(&cutoff_cv, filter_cutoff_cv);
     cc2:	0f 2e       	mov	r0, r31
     cc4:	f6 ed       	ldi	r31, 0xD6	; 214
     cc6:	2f 2e       	mov	r2, r31
     cc8:	f1 e0       	ldi	r31, 0x01	; 1
     cca:	3f 2e       	mov	r3, r31
     ccc:	f0 2d       	mov	r31, r0
     cce:	05 c0       	rjmp	.+10     	; 0xcda <scan_pots_and_update_control_voltages+0x1d0>
		
	}
	
	uint8_t note = get_current_note(); //get current note from assigner
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	value_to_display = note + 8965;	
     cd0:	21 96       	adiw	r28, 0x01	; 1
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	e8 0e       	add	r14, r24
     cd8:	f9 1e       	adc	r15, r25
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(pot_id[i+16]);
     cda:	f6 01       	movw	r30, r12
     cdc:	81 91       	ld	r24, Z+
     cde:	91 91       	ld	r25, Z+
     ce0:	6f 01       	movw	r12, r30
     ce2:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     ce6:	90 93 1e 03 	sts	0x031E, r25
     cea:	80 93 1d 03 	sts	0x031D, r24
		int adc_change = adc_value - pot_group_1[i];
     cee:	f8 01       	movw	r30, r16
     cf0:	20 81       	ld	r18, Z
     cf2:	31 81       	ldd	r19, Z+1	; 0x01
     cf4:	82 1b       	sub	r24, r18
     cf6:	93 0b       	sbc	r25, r19
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);
     cf8:	95 95       	asr	r25
     cfa:	87 95       	ror	r24
     cfc:	95 95       	asr	r25
     cfe:	87 95       	ror	r24
     d00:	82 0f       	add	r24, r18
     d02:	93 1f       	adc	r25, r19
     d04:	81 93       	st	Z+, r24
     d06:	91 93       	st	Z+, r25
     d08:	8f 01       	movw	r16, r30
		
		switch(i) 
     d0a:	c3 30       	cpi	r28, 0x03	; 3
     d0c:	d1 05       	cpc	r29, r1
     d0e:	71 f5       	brne	.+92     	; 0xd6c <scan_pots_and_update_control_voltages+0x262>
		{
			case 2: //exception to handle filter key tracking: use key_track pot setting to determine how much pitch cv contributes to filter cutoff
				interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     d10:	8a 2d       	mov	r24, r10
     d12:	b3 01       	movw	r22, r6
     d14:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <interpolate_pitch_cv>
				uint16_t key_track_byte = (pot_group_1[3]); //
				//if (key_track_byte > 1020) key_track_byte = 1024;			 
				uint16_t divided_pitch_cv = ((uint32_t)key_track_byte*interpolated_pitch_cv) >> 10; //note that product of key_track_byte and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
     d18:	bc 01       	movw	r22, r24
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	f4 01       	movw	r30, r8
     d20:	20 81       	ld	r18, Z
     d22:	31 81       	ldd	r19, Z+1	; 0x01
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__mulsi3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	07 2e       	mov	r0, r23
     d32:	7a e0       	ldi	r23, 0x0A	; 10
     d34:	b6 95       	lsr	r27
     d36:	a7 95       	ror	r26
     d38:	97 95       	ror	r25
     d3a:	87 95       	ror	r24
     d3c:	7a 95       	dec	r23
     d3e:	d1 f7       	brne	.-12     	; 0xd34 <scan_pots_and_update_control_voltages+0x22a>
     d40:	70 2d       	mov	r23, r0

				//value_to_display = divided_pitch_cv;
							
				uint16_t filter_cutoff_cv = divided_pitch_cv + (pot_group_1[i] << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     d42:	f2 01       	movw	r30, r4
     d44:	60 81       	ld	r22, Z
     d46:	71 81       	ldd	r23, Z+1	; 0x01
     d48:	62 95       	swap	r22
     d4a:	72 95       	swap	r23
     d4c:	70 7f       	andi	r23, 0xF0	; 240
     d4e:	76 27       	eor	r23, r22
     d50:	60 7f       	andi	r22, 0xF0	; 240
     d52:	76 27       	eor	r23, r22
     d54:	68 0f       	add	r22, r24
     d56:	79 1f       	adc	r23, r25
				if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
				set_control_voltage(&cutoff_cv, filter_cutoff_cv);
     d58:	f0 e4       	ldi	r31, 0x40	; 64
     d5a:	60 30       	cpi	r22, 0x00	; 0
     d5c:	7f 07       	cpc	r23, r31
     d5e:	10 f0       	brcs	.+4      	; 0xd64 <scan_pots_and_update_control_voltages+0x25a>
     d60:	6f ef       	ldi	r22, 0xFF	; 255
     d62:	7f e3       	ldi	r23, 0x3F	; 63
     d64:	c1 01       	movw	r24, r2
     d66:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
     d6a:	b2 cf       	rjmp	.-156    	; 0xcd0 <scan_pots_and_update_control_voltages+0x1c6>
				//value_to_display = filter_cutoff_cv;
				break;
			
			default:
				set_control_voltage(pot_decoder_1[i], pot_group_1[i] <<4);
     d6c:	bc 01       	movw	r22, r24
     d6e:	62 95       	swap	r22
     d70:	72 95       	swap	r23
     d72:	70 7f       	andi	r23, 0xF0	; 240
     d74:	76 27       	eor	r23, r22
     d76:	60 7f       	andi	r22, 0xF0	; 240
     d78:	76 27       	eor	r23, r22
     d7a:	f7 01       	movw	r30, r14
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	value_to_display = note + 8965;	
	
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     d84:	cf 30       	cpi	r28, 0x0F	; 15
     d86:	d1 05       	cpc	r29, r1
     d88:	0c f4       	brge	.+2      	; 0xd8c <scan_pots_and_update_control_voltages+0x282>
     d8a:	a2 cf       	rjmp	.-188    	; 0xcd0 <scan_pots_and_update_control_voltages+0x1c6>
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose 
     d8c:	8b 2d       	mov	r24, r11
     d8e:	6f e0       	ldi	r22, 0x0F	; 15
     d90:	0e 94 a5 07 	call	0xf4a	; 0xf4a <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     d94:	68 ea       	ldi	r22, 0xA8	; 168
     d96:	73 e0       	ldi	r23, 0x03	; 3
     d98:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <interpolate_pitch_cv>
     d9c:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     d9e:	88 ee       	ldi	r24, 0xE8	; 232
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     da6:	8b 2d       	mov	r24, r11
     da8:	60 ef       	ldi	r22, 0xF0	; 240
     daa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     dae:	66 e8       	ldi	r22, 0x86	; 134
     db0:	73 e0       	ldi	r23, 0x03	; 3
     db2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <interpolate_pitch_cv>
     db6:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv); 
     db8:	87 ee       	ldi	r24, 0xE7	; 231
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     dc0:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     dc2:	a1 9a       	sbi	0x14, 1	; 20
	
	
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	bf 90       	pop	r11
     dd6:	af 90       	pop	r10
     dd8:	9f 90       	pop	r9
     dda:	8f 90       	pop	r8
     ddc:	7f 90       	pop	r7
     dde:	6f 90       	pop	r6
     de0:	5f 90       	pop	r5
     de2:	4f 90       	pop	r4
     de4:	3f 90       	pop	r3
     de6:	2f 90       	pop	r2
     de8:	08 95       	ret

00000dea <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     dea:	84 b1       	in	r24, 0x04	; 4
     dec:	87 62       	ori	r24, 0x27	; 39
     dee:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     df0:	ec ed       	ldi	r30, 0xDC	; 220
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8c 65       	ori	r24, 0x5C	; 92
     df8:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     dfa:	85 b1       	in	r24, 0x05	; 5
     dfc:	89 7d       	andi	r24, 0xD9	; 217
     dfe:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     e00:	ed ed       	ldi	r30, 0xDD	; 221
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	83 7f       	andi	r24, 0xF3	; 243
     e08:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     e0a:	80 e5       	ldi	r24, 0x50	; 80
     e0c:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     e0e:	80 81       	ld	r24, Z
     e10:	87 7f       	andi	r24, 0xF7	; 247
     e12:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     e14:	80 81       	ld	r24, Z
     e16:	87 7f       	andi	r24, 0xF7	; 247
     e18:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     e1a:	80 81       	ld	r24, Z
     e1c:	88 60       	ori	r24, 0x08	; 8
     e1e:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     e20:	80 81       	ld	r24, Z
     e22:	8f 7e       	andi	r24, 0xEF	; 239
     e24:	80 83       	st	Z, r24
	
}
     e26:	08 95       	ret

00000e28 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     e28:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     e2a:	0d b4       	in	r0, 0x2d	; 45
     e2c:	07 fe       	sbrs	r0, 7
     e2e:	fd cf       	rjmp	.-6      	; 0xe2a <spi_shift_byte+0x2>
	return SPDR;
     e30:	8e b5       	in	r24, 0x2e	; 46
	
}
     e32:	08 95       	ret

00000e34 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     e34:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     e36:	80 91 63 03 	lds	r24, 0x0363
     e3a:	0e 94 14 07 	call	0xe28	; 0xe28 <spi_shift_byte>
			
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     e3e:	90 91 20 03 	lds	r25, 0x0320
     e42:	89 27       	eor	r24, r25
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     e44:	98 27       	eor	r25, r24
     e46:	90 93 20 03 	sts	0x0320, r25
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     e4a:	98 23       	and	r25, r24
     e4c:	90 93 1f 03 	sts	0x031F, r25
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     e50:	80 91 d5 03 	lds	r24, 0x03D5
     e54:	98 27       	eor	r25, r24
     e56:	90 93 d5 03 	sts	0x03D5, r25
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     e5a:	80 91 62 03 	lds	r24, 0x0362
     e5e:	0e 94 14 07 	call	0xe28	; 0xe28 <spi_shift_byte>
	
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     e62:	90 91 22 03 	lds	r25, 0x0322
     e66:	89 27       	eor	r24, r25
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     e68:	98 27       	eor	r25, r24
     e6a:	90 93 22 03 	sts	0x0322, r25
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     e6e:	98 23       	and	r25, r24
     e70:	90 93 21 03 	sts	0x0321, r25
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     e74:	80 91 d6 03 	lds	r24, 0x03D6
     e78:	98 27       	eor	r25, r24
     e7a:	90 93 d6 03 	sts	0x03D6, r25
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     e7e:	80 91 61 03 	lds	r24, 0x0361
     e82:	0e 94 14 07 	call	0xe28	; 0xe28 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     e86:	80 91 60 03 	lds	r24, 0x0360
     e8a:	0e 94 14 07 	call	0xe28	; 0xe28 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     e8e:	90 91 d7 03 	lds	r25, 0x03D7
     e92:	29 2f       	mov	r18, r25
     e94:	22 95       	swap	r18
     e96:	2f 70       	andi	r18, 0x0F	; 15
     e98:	27 95       	ror	r18
     e9a:	22 27       	eor	r18, r18
     e9c:	27 95       	ror	r18

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     e9e:	89 2f       	mov	r24, r25
     ea0:	86 95       	lsr	r24
     ea2:	86 95       	lsr	r24
     ea4:	86 95       	lsr	r24
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	82 2b       	or	r24, r18
     eaa:	40 91 d6 03 	lds	r20, 0x03D6
     eae:	42 95       	swap	r20
     eb0:	46 95       	lsr	r20
     eb2:	47 70       	andi	r20, 0x07	; 7
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	41 70       	andi	r20, 0x01	; 1
     eb8:	50 70       	andi	r21, 0x00	; 0
     eba:	9a 01       	movw	r18, r20
     ebc:	22 0f       	add	r18, r18
     ebe:	33 1f       	adc	r19, r19
     ec0:	22 0f       	add	r18, r18
     ec2:	33 1f       	adc	r19, r19
     ec4:	28 2b       	or	r18, r24
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     ec6:	99 1f       	adc	r25, r25
     ec8:	99 27       	eor	r25, r25
     eca:	99 1f       	adc	r25, r25
     ecc:	89 2f       	mov	r24, r25
     ece:	82 95       	swap	r24
     ed0:	88 0f       	add	r24, r24
     ed2:	88 0f       	add	r24, r24
     ed4:	80 7c       	andi	r24, 0xC0	; 192
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     ed6:	82 2b       	or	r24, r18
     ed8:	0e 94 14 07 	call	0xe28	; 0xe28 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     edc:	ed ed       	ldi	r30, 0xDD	; 221
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	87 7f       	andi	r24, 0xF7	; 247
     ee4:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     ee6:	80 81       	ld	r24, Z
     ee8:	88 60       	ori	r24, 0x08	; 8
     eea:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     eec:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     eee:	08 95       	ret

00000ef0 <save_patch>:
	};
	
	
void save_patch(uint8_t patch_number) {

	eeprom_update_block((const void*)&current_patch, (void*)&patch_memory[patch_number], sizeof(current_patch));
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	2b e2       	ldi	r18, 0x2B	; 43
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	82 9f       	mul	r24, r18
     ef8:	b0 01       	movw	r22, r0
     efa:	83 9f       	mul	r24, r19
     efc:	70 0d       	add	r23, r0
     efe:	92 9f       	mul	r25, r18
     f00:	70 0d       	add	r23, r0
     f02:	11 24       	eor	r1, r1
     f04:	60 50       	subi	r22, 0x00	; 0
     f06:	70 40       	sbci	r23, 0x00	; 0
     f08:	83 e2       	ldi	r24, 0x23	; 35
     f0a:	93 e0       	ldi	r25, 0x03	; 3
     f0c:	41 e4       	ldi	r20, 0x41	; 65
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__eeupd_block_m6450a>
}	
     f14:	08 95       	ret

00000f16 <set_memory_mode>:
	
	
void set_memory_mode() { //run this every time new patch is loaded to lock pots and store locked values
     f16:	a0 e0       	ldi	r26, 0x00	; 0
     f18:	b1 e0       	ldi	r27, 0x01	; 1
     f1a:	9d 01       	movw	r18, r26
     f1c:	24 5c       	subi	r18, 0xC4	; 196
     f1e:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     f20:	ed 91       	ld	r30, X+
     f22:	fc 91       	ld	r31, X
     f24:	11 97       	sbiw	r26, 0x01	; 1
     f26:	80 81       	ld	r24, Z
     f28:	41 81       	ldd	r20, Z+1	; 0x01
     f2a:	94 2f       	mov	r25, r20
     f2c:	93 70       	andi	r25, 0x03	; 3
     f2e:	95 95       	asr	r25
     f30:	87 95       	ror	r24
     f32:	95 95       	asr	r25
     f34:	87 95       	ror	r24
     f36:	82 83       	std	Z+2, r24	; 0x02
		pot_id[i]->locked = 1; 
     f38:	ed 91       	ld	r30, X+
     f3a:	fd 91       	ld	r31, X+
     f3c:	83 81       	ldd	r24, Z+3	; 0x03
     f3e:	80 68       	ori	r24, 0x80	; 128
     f40:	83 83       	std	Z+3, r24	; 0x03
}	
	
	
void set_memory_mode() { //run this every time new patch is loaded to lock pots and store locked values
	
	for (int i = 0; i <= 29; i++) {
     f42:	a2 17       	cp	r26, r18
     f44:	b3 07       	cpc	r27, r19
     f46:	61 f7       	brne	.-40     	; 0xf20 <set_memory_mode+0xa>
		pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
		pot_id[i]->locked = 1; 
		
	}
	
}	
     f48:	08 95       	ret

00000f4a <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
     f4a:	90 91 64 03 	lds	r25, 0x0364
     f4e:	97 70       	andi	r25, 0x07	; 7
	if (vco == VCO2) n = octave_index.vco2;
     f50:	60 3f       	cpi	r22, 0xF0	; 240
     f52:	31 f4       	brne	.+12     	; 0xf60 <transpose_note+0x16>
     f54:	90 91 64 03 	lds	r25, 0x0364
     f58:	96 95       	lsr	r25
     f5a:	96 95       	lsr	r25
     f5c:	96 95       	lsr	r25
     f5e:	97 70       	andi	r25, 0x07	; 7

	note = (n*12) + note; //calculate MIDI note after octave addition
     f60:	29 2f       	mov	r18, r25
     f62:	22 0f       	add	r18, r18
     f64:	92 0f       	add	r25, r18
     f66:	99 0f       	add	r25, r25
     f68:	99 0f       	add	r25, r25
     f6a:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
     f6c:	89 38       	cpi	r24, 0x89	; 137
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <transpose_note+0x28>
     f70:	88 e8       	ldi	r24, 0x88	; 136
	
}
     f72:	08 95       	ret

00000f74 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
     f74:	80 91 d5 03 	lds	r24, 0x03D5
     f78:	98 2f       	mov	r25, r24
     f7a:	96 95       	lsr	r25
     f7c:	96 95       	lsr	r25
     f7e:	96 95       	lsr	r25
     f80:	90 ff       	sbrs	r25, 0
     f82:	14 c0       	rjmp	.+40     	; 0xfac <update_octave_range+0x38>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
     f84:	20 91 64 03 	lds	r18, 0x0364
     f88:	92 2f       	mov	r25, r18
     f8a:	9f 5f       	subi	r25, 0xFF	; 255
     f8c:	97 70       	andi	r25, 0x07	; 7
     f8e:	28 7f       	andi	r18, 0xF8	; 248
     f90:	29 2b       	or	r18, r25
     f92:	20 93 64 03 	sts	0x0364, r18
     f96:	95 30       	cpi	r25, 0x05	; 5
     f98:	29 f4       	brne	.+10     	; 0xfa4 <update_octave_range+0x30>
     f9a:	92 2f       	mov	r25, r18
     f9c:	98 7f       	andi	r25, 0xF8	; 248
     f9e:	94 60       	ori	r25, 0x04	; 4
     fa0:	90 93 64 03 	sts	0x0364, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
     fa4:	98 e0       	ldi	r25, 0x08	; 8
     fa6:	89 27       	eor	r24, r25
     fa8:	80 93 d5 03 	sts	0x03D5, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
     fac:	80 91 d6 03 	lds	r24, 0x03D6
     fb0:	98 2f       	mov	r25, r24
     fb2:	96 95       	lsr	r25
     fb4:	96 95       	lsr	r25
     fb6:	96 95       	lsr	r25
     fb8:	90 ff       	sbrs	r25, 0
     fba:	11 c0       	rjmp	.+34     	; 0xfde <update_octave_range+0x6a>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
     fbc:	90 91 64 03 	lds	r25, 0x0364
     fc0:	97 70       	andi	r25, 0x07	; 7
     fc2:	49 f0       	breq	.+18     	; 0xfd6 <update_octave_range+0x62>
     fc4:	90 91 64 03 	lds	r25, 0x0364
     fc8:	29 2f       	mov	r18, r25
     fca:	29 5f       	subi	r18, 0xF9	; 249
     fcc:	27 70       	andi	r18, 0x07	; 7
     fce:	98 7f       	andi	r25, 0xF8	; 248
     fd0:	92 2b       	or	r25, r18
     fd2:	90 93 64 03 	sts	0x0364, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
     fd6:	98 e0       	ldi	r25, 0x08	; 8
     fd8:	89 27       	eor	r24, r25
     fda:	80 93 d6 03 	sts	0x03D6, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
     fde:	80 91 64 03 	lds	r24, 0x0364
     fe2:	87 70       	andi	r24, 0x07	; 7
     fe4:	e9 e4       	ldi	r30, 0x49	; 73
     fe6:	f2 e0       	ldi	r31, 0x02	; 2
     fe8:	e8 0f       	add	r30, r24
     fea:	f1 1d       	adc	r31, r1
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	00 80       	ld	r0, Z
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <update_octave_range+0x84>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <update_octave_range+0x80>
     ffc:	58 2f       	mov	r21, r24
     ffe:	80 93 62 03 	sts	0x0362, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1002:	90 91 d6 03 	lds	r25, 0x03D6
    1006:	29 2f       	mov	r18, r25
    1008:	26 95       	lsr	r18
    100a:	26 95       	lsr	r18
    100c:	20 ff       	sbrs	r18, 0
    100e:	1a c0       	rjmp	.+52     	; 0x1044 <update_octave_range+0xd0>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1010:	80 91 64 03 	lds	r24, 0x0364
    1014:	28 2f       	mov	r18, r24
    1016:	26 95       	lsr	r18
    1018:	26 95       	lsr	r18
    101a:	26 95       	lsr	r18
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	27 70       	andi	r18, 0x07	; 7
    1020:	32 2f       	mov	r19, r18
    1022:	33 0f       	add	r19, r19
    1024:	33 0f       	add	r19, r19
    1026:	33 0f       	add	r19, r19
    1028:	87 7c       	andi	r24, 0xC7	; 199
    102a:	83 2b       	or	r24, r19
    102c:	80 93 64 03 	sts	0x0364, r24
    1030:	25 30       	cpi	r18, 0x05	; 5
    1032:	21 f4       	brne	.+8      	; 0x103c <update_octave_range+0xc8>
    1034:	87 7c       	andi	r24, 0xC7	; 199
    1036:	80 62       	ori	r24, 0x20	; 32
    1038:	80 93 64 03 	sts	0x0364, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    103c:	84 e0       	ldi	r24, 0x04	; 4
    103e:	98 27       	eor	r25, r24
    1040:	90 93 d6 03 	sts	0x03D6, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1044:	90 91 d6 03 	lds	r25, 0x03D6
    1048:	29 2f       	mov	r18, r25
    104a:	26 95       	lsr	r18
    104c:	20 ff       	sbrs	r18, 0
    104e:	17 c0       	rjmp	.+46     	; 0x107e <update_octave_range+0x10a>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1050:	80 91 64 03 	lds	r24, 0x0364
    1054:	88 73       	andi	r24, 0x38	; 56
    1056:	79 f0       	breq	.+30     	; 0x1076 <update_octave_range+0x102>
    1058:	80 91 64 03 	lds	r24, 0x0364
    105c:	28 2f       	mov	r18, r24
    105e:	26 95       	lsr	r18
    1060:	26 95       	lsr	r18
    1062:	26 95       	lsr	r18
    1064:	29 5f       	subi	r18, 0xF9	; 249
    1066:	27 70       	andi	r18, 0x07	; 7
    1068:	22 0f       	add	r18, r18
    106a:	22 0f       	add	r18, r18
    106c:	22 0f       	add	r18, r18
    106e:	87 7c       	andi	r24, 0xC7	; 199
    1070:	82 2b       	or	r24, r18
    1072:	80 93 64 03 	sts	0x0364, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	98 27       	eor	r25, r24
    107a:	90 93 d6 03 	sts	0x03D6, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    107e:	40 91 61 03 	lds	r20, 0x0361
    1082:	4c 7f       	andi	r20, 0xFC	; 252
    1084:	40 93 61 03 	sts	0x0361, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1088:	90 91 64 03 	lds	r25, 0x0364
    108c:	96 95       	lsr	r25
    108e:	96 95       	lsr	r25
    1090:	96 95       	lsr	r25
    1092:	97 70       	andi	r25, 0x07	; 7
    1094:	89 2f       	mov	r24, r25
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	91 05       	cpc	r25, r1
    109c:	84 f0       	brlt	.+32     	; 0x10be <update_octave_range+0x14a>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    109e:	fc 01       	movw	r30, r24
    10a0:	ec 5b       	subi	r30, 0xBC	; 188
    10a2:	fd 4f       	sbci	r31, 0xFD	; 253
    10a4:	21 e0       	ldi	r18, 0x01	; 1
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	c9 01       	movw	r24, r18
    10aa:	00 80       	ld	r0, Z
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <update_octave_range+0x13e>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <update_octave_range+0x13a>
    10b6:	84 2b       	or	r24, r20
    10b8:	80 93 61 03 	sts	0x0361, r24
    10bc:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    10be:	fc 01       	movw	r30, r24
    10c0:	ec 5b       	subi	r30, 0xBC	; 188
    10c2:	fd 4f       	sbci	r31, 0xFD	; 253
    10c4:	21 e0       	ldi	r18, 0x01	; 1
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	c9 01       	movw	r24, r18
    10ca:	00 80       	ld	r0, Z
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <update_octave_range+0x15e>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <update_octave_range+0x15a>
    10d6:	85 2b       	or	r24, r21
    10d8:	80 93 62 03 	sts	0x0362, r24
    10dc:	08 95       	ret

000010de <refresh_synth>:
	}	
	
}
	
	
void refresh_synth(void) {
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    10e2:	90 91 d5 03 	lds	r25, 0x03D5
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    10e6:	80 91 d7 03 	lds	r24, 0x03D7
    10ea:	86 95       	lsr	r24
    10ec:	86 95       	lsr	r24
    10ee:	68 2f       	mov	r22, r24
    10f0:	67 95       	ror	r22
    10f2:	66 27       	eor	r22, r22
    10f4:	67 95       	ror	r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    10f6:	29 2f       	mov	r18, r25
    10f8:	21 70       	andi	r18, 0x01	; 1
    10fa:	26 2b       	or	r18, r22
    10fc:	69 2f       	mov	r22, r25
    10fe:	66 1f       	adc	r22, r22
    1100:	66 27       	eor	r22, r22
    1102:	66 1f       	adc	r22, r22
    1104:	66 0f       	add	r22, r22
    1106:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1108:	c9 2f       	mov	r28, r25
    110a:	c6 95       	lsr	r28
    110c:	c6 95       	lsr	r28
    110e:	d0 e0       	ldi	r29, 0x00	; 0
    1110:	c1 70       	andi	r28, 0x01	; 1
    1112:	d0 70       	andi	r29, 0x00	; 0
    1114:	de 01       	movw	r26, r28
    1116:	aa 0f       	add	r26, r26
    1118:	bb 1f       	adc	r27, r27
    111a:	aa 0f       	add	r26, r26
    111c:	bb 1f       	adc	r27, r27
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    111e:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1120:	a9 2f       	mov	r26, r25
    1122:	a6 95       	lsr	r26
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	a1 70       	andi	r26, 0x01	; 1
    1128:	b0 70       	andi	r27, 0x00	; 0
    112a:	fd 01       	movw	r30, r26
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	ee 0f       	add	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1138:	a6 2f       	mov	r26, r22
    113a:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    113c:	e9 2f       	mov	r30, r25
    113e:	e2 95       	swap	r30
    1140:	ef 70       	andi	r30, 0x0F	; 15
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	e1 70       	andi	r30, 0x01	; 1
    1146:	f0 70       	andi	r31, 0x00	; 0
    1148:	bf 01       	movw	r22, r30
    114a:	62 95       	swap	r22
    114c:	72 95       	swap	r23
    114e:	70 7f       	andi	r23, 0xF0	; 240
    1150:	76 27       	eor	r23, r22
    1152:	60 7f       	andi	r22, 0xF0	; 240
    1154:	76 27       	eor	r23, r22
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1156:	ea 2f       	mov	r30, r26
    1158:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    115a:	69 2f       	mov	r22, r25
    115c:	62 95       	swap	r22
    115e:	66 95       	lsr	r22
    1160:	67 70       	andi	r22, 0x07	; 7
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	61 70       	andi	r22, 0x01	; 1
    1166:	70 70       	andi	r23, 0x00	; 0
    1168:	ab 01       	movw	r20, r22
    116a:	44 0f       	add	r20, r20
    116c:	55 1f       	adc	r21, r21
    116e:	42 95       	swap	r20
    1170:	52 95       	swap	r21
    1172:	50 7f       	andi	r21, 0xF0	; 240
    1174:	54 27       	eor	r21, r20
    1176:	40 7f       	andi	r20, 0xF0	; 240
    1178:	54 27       	eor	r21, r20
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    117a:	6e 2f       	mov	r22, r30
    117c:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    117e:	49 2f       	mov	r20, r25
    1180:	42 95       	swap	r20
    1182:	46 95       	lsr	r20
    1184:	46 95       	lsr	r20
    1186:	43 70       	andi	r20, 0x03	; 3
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	41 70       	andi	r20, 0x01	; 1
    118c:	50 70       	andi	r21, 0x00	; 0
    118e:	9a 01       	movw	r18, r20
    1190:	00 24       	eor	r0, r0
    1192:	36 95       	lsr	r19
    1194:	27 95       	ror	r18
    1196:	07 94       	ror	r0
    1198:	36 95       	lsr	r19
    119a:	27 95       	ror	r18
    119c:	07 94       	ror	r0
    119e:	32 2f       	mov	r19, r18
    11a0:	20 2d       	mov	r18, r0
	
	
void refresh_synth(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    11a2:	26 2b       	or	r18, r22
    11a4:	20 93 63 03 	sts	0x0363, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    11a8:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    11aa:	81 95       	neg	r24
    11ac:	89 27       	eor	r24, r25
    11ae:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    11b0:	89 27       	eor	r24, r25
    11b2:	0e 94 65 0f 	call	0x1eca	; 0x1eca <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    11b6:	ed ed       	ldi	r30, 0xDD	; 221
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	90 81       	ld	r25, Z
    11bc:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;
    11be:	80 91 d7 03 	lds	r24, 0x03D7
    11c2:	86 95       	lsr	r24
    11c4:	86 95       	lsr	r24
    11c6:	86 95       	lsr	r24
    11c8:	81 70       	andi	r24, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    11ca:	81 95       	neg	r24
    11cc:	82 27       	eor	r24, r18
    11ce:	80 71       	andi	r24, 0x10	; 16
    11d0:	89 27       	eor	r24, r25
    11d2:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    11d4:	0e 94 ba 07 	call	0xf74	; 0xf74 <update_octave_range>
	
	//parse LFO data
	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    11d8:	80 91 d6 03 	lds	r24, 0x03D6
    11dc:	88 23       	and	r24, r24
    11de:	84 f5       	brge	.+96     	; 0x1240 <__stack+0x141>
		
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    11e0:	80 58       	subi	r24, 0x80	; 128
    11e2:	80 93 d6 03 	sts	0x03D6, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    11e6:	80 91 65 03 	lds	r24, 0x0365
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	80 93 65 03 	sts	0x0365, r24
    11f0:	85 30       	cpi	r24, 0x05	; 5
    11f2:	11 f4       	brne	.+4      	; 0x11f8 <__stack+0xf9>
    11f4:	10 92 65 03 	sts	0x0365, r1
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    11f8:	a0 91 65 03 	lds	r26, 0x0365
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	a2 5b       	subi	r26, 0xB2	; 178
    1200:	bd 4f       	sbci	r27, 0xFD	; 253
    1202:	8c 91       	ld	r24, X
    1204:	87 70       	andi	r24, 0x07	; 7
    1206:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1208:	ed ed       	ldi	r30, 0xDD	; 221
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	80 62       	ori	r24, 0x20	; 32
    1210:	80 83       	st	Z, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1212:	80 81       	ld	r24, Z
    1214:	8f 7d       	andi	r24, 0xDF	; 223
    1216:	80 83       	st	Z, r24
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1218:	8c 91       	ld	r24, X
    121a:	86 95       	lsr	r24
    121c:	86 95       	lsr	r24
    121e:	86 95       	lsr	r24
    1220:	87 70       	andi	r24, 0x07	; 7
    1222:	21 e0       	ldi	r18, 0x01	; 1
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	a9 01       	movw	r20, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <__stack+0x12f>
    122a:	44 0f       	add	r20, r20
    122c:	55 1f       	adc	r21, r21
    122e:	8a 95       	dec	r24
    1230:	e2 f7       	brpl	.-8      	; 0x122a <__stack+0x12b>
    1232:	ca 01       	movw	r24, r20
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
		DATA_BUS = lfo[lfo_shape_index].waveform_addr;
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    1234:	90 91 60 03 	lds	r25, 0x0360
    1238:	9f 70       	andi	r25, 0x0F	; 15
		current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    123a:	89 2b       	or	r24, r25
    123c:	80 93 60 03 	sts	0x0360, r24
		
		
	}		
				
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) //temporary tune button hack
    1240:	80 91 d7 03 	lds	r24, 0x03D7
    1244:	98 2f       	mov	r25, r24
    1246:	92 95       	swap	r25
    1248:	9f 70       	andi	r25, 0x0F	; 15
    124a:	90 ff       	sbrs	r25, 0
    124c:	3f c0       	rjmp	.+126    	; 0x12cc <__stack+0x1cd>
		{ 
				
		switch_states.byte2 ^= (1<<PROG_WRITE_SW); //toggle read switch state
    124e:	90 e1       	ldi	r25, 0x10	; 16
    1250:	89 27       	eor	r24, r25
    1252:	80 93 d7 03 	sts	0x03D7, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1256:	87 e0       	ldi	r24, 0x07	; 7
    1258:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    125a:	cd ed       	ldi	r28, 0xDD	; 221
    125c:	d0 e0       	ldi	r29, 0x00	; 0
    125e:	88 81       	ld	r24, Y
    1260:	80 62       	ori	r24, 0x20	; 32
    1262:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1264:	88 81       	ld	r24, Y
    1266:	8f 7d       	andi	r24, 0xDF	; 223
    1268:	88 83       	st	Y, r24
		DATA_BUS = 0;
    126a:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    126c:	8f e0       	ldi	r24, 0x0F	; 15
    126e:	6f e0       	ldi	r22, 0x0F	; 15
    1270:	7e e5       	ldi	r23, 0x5E	; 94
    1272:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <set_vco_init_cv>
    1276:	90 93 cd 03 	sts	0x03CD, r25
    127a:	80 93 cc 03 	sts	0x03CC, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    127e:	80 ef       	ldi	r24, 0xF0	; 240
    1280:	6f e0       	ldi	r22, 0x0F	; 15
    1282:	7e e5       	ldi	r23, 0x5E	; 94
    1284:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <set_vco_init_cv>
    1288:	90 93 cb 03 	sts	0x03CB, r25
    128c:	80 93 ca 03 	sts	0x03CA, r24

		tune_8ths(VCO1);
    1290:	8f e0       	ldi	r24, 0x0F	; 15
    1292:	0e 94 4c 0b 	call	0x1698	; 0x1698 <tune_8ths>
		tune_8ths(VCO2);
    1296:	80 ef       	ldi	r24, 0xF0	; 240
    1298:	0e 94 4c 0b 	call	0x1698	; 0x1698 <tune_8ths>
		tune_filter();
    129c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <tune_filter>
		save_tuning_tables();
    12a0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12a4:	8f e4       	ldi	r24, 0x4F	; 79
    12a6:	93 ec       	ldi	r25, 0xC3	; 195
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <__stack+0x1a9>
    12ac:	00 c0       	rjmp	.+0      	; 0x12ae <__stack+0x1af>
    12ae:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
    12b0:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    12b2:	88 81       	ld	r24, Y
    12b4:	80 62       	ori	r24, 0x20	; 32
    12b6:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    12b8:	88 81       	ld	r24, Y
    12ba:	8f 7d       	andi	r24, 0xDF	; 223
    12bc:	88 83       	st	Y, r24
		DATA_BUS = 0;
    12be:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    12c0:	80 91 60 03 	lds	r24, 0x0360
    12c4:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    12c6:	80 68       	ori	r24, 0x80	; 128
    12c8:	80 93 60 03 	sts	0x0360, r24
				
		}
		
		
	
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	08 95       	ret

000012d2 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    12d2:	8a ed       	ldi	r24, 0xDA	; 218
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    12de:	83 ee       	ldi	r24, 0xE3	; 227
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    12ea:	84 ee       	ldi	r24, 0xE4	; 228
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    12f6:	86 ed       	ldi	r24, 0xD6	; 214
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1302:	8c ed       	ldi	r24, 0xDC	; 220
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    130e:	81 ee       	ldi	r24, 0xE1	; 225
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    131a:	82 ee       	ldi	r24, 0xE2	; 226
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1326:	83 ed       	ldi	r24, 0xD3	; 211
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1332:	88 ed       	ldi	r24, 0xD8	; 216
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    133e:	84 ed       	ldi	r24, 0xD4	; 212
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    134a:	85 ed       	ldi	r24, 0xD5	; 213
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1356:	86 ed       	ldi	r24, 0xD6	; 214
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	6f ef       	ldi	r22, 0xFF	; 255
    135c:	7f e3       	ldi	r23, 0x3F	; 63
    135e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1362:	87 ed       	ldi	r24, 0xD7	; 215
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    136e:	8b ed       	ldi	r24, 0xDB	; 219
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    137a:	80 ed       	ldi	r24, 0xD0	; 208
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1386:	8e ec       	ldi	r24, 0xCE	; 206
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1392:	8c ec       	ldi	r24, 0xCC	; 204
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	6f ef       	ldi	r22, 0xFF	; 255
    1398:	7f e3       	ldi	r23, 0x3F	; 63
    139a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    139e:	8a ec       	ldi	r24, 0xCA	; 202
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    13aa:	82 ed       	ldi	r24, 0xD2	; 210
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    13b6:	85 ee       	ldi	r24, 0xE5	; 229
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    13c2:	86 ee       	ldi	r24, 0xE6	; 230
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}	
    13ce:	08 95       	ret

000013d0 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    13d0:	2f 92       	push	r2
    13d2:	3f 92       	push	r3
    13d4:	4f 92       	push	r4
    13d6:	5f 92       	push	r5
    13d8:	6f 92       	push	r6
    13da:	7f 92       	push	r7
    13dc:	8f 92       	push	r8
    13de:	9f 92       	push	r9
    13e0:	af 92       	push	r10
    13e2:	bf 92       	push	r11
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	2c 97       	sbiw	r28, 0x0c	; 12
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	08 2f       	mov	r16, r24
    1406:	78 87       	std	Y+8, r23	; 0x08
    1408:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    140a:	80 91 d2 03 	lds	r24, 0x03D2
    140e:	83 60       	ori	r24, 0x03	; 3
    1410:	80 93 d2 03 	sts	0x03D2, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1414:	0e 94 69 09 	call	0x12d2	; 0x12d2 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1418:	10 92 d1 03 	sts	0x03D1, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    141c:	0f 30       	cpi	r16, 0x0F	; 15
    141e:	e1 f4       	brne	.+56     	; 0x1458 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1420:	0f 2e       	mov	r0, r31
    1422:	f8 ee       	ldi	r31, 0xE8	; 232
    1424:	4f 2e       	mov	r4, r31
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	5f 2e       	mov	r5, r31
    142a:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    142c:	0f 2e       	mov	r0, r31
    142e:	f0 ee       	ldi	r31, 0xE0	; 224
    1430:	2f 2e       	mov	r2, r31
    1432:	f1 e0       	ldi	r31, 0x01	; 1
    1434:	3f 2e       	mov	r3, r31
    1436:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1438:	25 ee       	ldi	r18, 0xE5	; 229
    143a:	31 e0       	ldi	r19, 0x01	; 1
    143c:	3a 83       	std	Y+2, r19	; 0x02
    143e:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1440:	0f 2e       	mov	r0, r31
    1442:	fe ed       	ldi	r31, 0xDE	; 222
    1444:	8f 2e       	mov	r8, r31
    1446:	f1 e0       	ldi	r31, 0x01	; 1
    1448:	9f 2e       	mov	r9, r31
    144a:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    144c:	84 e7       	ldi	r24, 0x74	; 116
    144e:	97 e0       	ldi	r25, 0x07	; 7
    1450:	9a 87       	std	Y+10, r25	; 0x0a
    1452:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	1b c0       	rjmp	.+54     	; 0x148e <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1458:	0f 2e       	mov	r0, r31
    145a:	f7 ee       	ldi	r31, 0xE7	; 231
    145c:	4f 2e       	mov	r4, r31
    145e:	f1 e0       	ldi	r31, 0x01	; 1
    1460:	5f 2e       	mov	r5, r31
    1462:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1464:	0f 2e       	mov	r0, r31
    1466:	f9 ed       	ldi	r31, 0xD9	; 217
    1468:	2f 2e       	mov	r2, r31
    146a:	f1 e0       	ldi	r31, 0x01	; 1
    146c:	3f 2e       	mov	r3, r31
    146e:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1470:	e6 ee       	ldi	r30, 0xE6	; 230
    1472:	f1 e0       	ldi	r31, 0x01	; 1
    1474:	fa 83       	std	Y+2, r31	; 0x02
    1476:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1478:	0f 2e       	mov	r0, r31
    147a:	ff ed       	ldi	r31, 0xDF	; 223
    147c:	8f 2e       	mov	r8, r31
    147e:	f1 e0       	ldi	r31, 0x01	; 1
    1480:	9f 2e       	mov	r9, r31
    1482:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1484:	22 e7       	ldi	r18, 0x72	; 114
    1486:	37 e0       	ldi	r19, 0x07	; 7
    1488:	3a 87       	std	Y+10, r19	; 0x0a
    148a:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    148c:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    148e:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1490:	ed ed       	ldi	r30, 0xDD	; 221
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	80 64       	ori	r24, 0x40	; 64
    1498:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    149a:	80 81       	ld	r24, Z
    149c:	8f 7b       	andi	r24, 0xBF	; 191
    149e:	80 83       	st	Z, r24
	DATA_BUS = 0;
    14a0:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    14a2:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    14a4:	84 b5       	in	r24, 0x24	; 36
    14a6:	8f 60       	ori	r24, 0x0F	; 15
    14a8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    14ae:	ee e6       	ldi	r30, 0x6E	; 110
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	90 81       	ld	r25, Z
    14b4:	92 60       	ori	r25, 0x02	; 2
    14b6:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    14b8:	80 93 d3 03 	sts	0x03D3, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    14bc:	8d e0       	ldi	r24, 0x0D	; 13
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	9c 83       	std	Y+4, r25	; 0x04
    14c2:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    14c4:	80 2f       	mov	r24, r16
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	8c 01       	movw	r16, r24
    14ca:	0f 5f       	subi	r16, 0xFF	; 255
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    14ce:	0f 2e       	mov	r0, r31
    14d0:	fa ed       	ldi	r31, 0xDA	; 218
    14d2:	ef 2e       	mov	r14, r31
    14d4:	f1 e0       	ldi	r31, 0x01	; 1
    14d6:	ff 2e       	mov	r15, r31
    14d8:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    14da:	0f 2e       	mov	r0, r31
    14dc:	f6 ed       	ldi	r31, 0xD6	; 214
    14de:	cf 2e       	mov	r12, r31
    14e0:	f1 e0       	ldi	r31, 0x01	; 1
    14e2:	df 2e       	mov	r13, r31
    14e4:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    14e6:	0f 2e       	mov	r0, r31
    14e8:	fc ec       	ldi	r31, 0xCC	; 204
    14ea:	af 2e       	mov	r10, r31
    14ec:	f1 e0       	ldi	r31, 0x01	; 1
    14ee:	bf 2e       	mov	r11, r31
    14f0:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    14f2:	0f 2e       	mov	r0, r31
    14f4:	fd ec       	ldi	r31, 0xCD	; 205
    14f6:	6f 2e       	mov	r6, r31
    14f8:	f1 e0       	ldi	r31, 0x01	; 1
    14fa:	7f 2e       	mov	r7, r31
    14fc:	f0 2d       	mov	r31, r0
    14fe:	e0 e0       	ldi	r30, 0x00	; 0
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	fc 87       	std	Y+12, r31	; 0x0c
    1504:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1506:	21 e0       	ldi	r18, 0x01	; 1
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	0b 80       	ldd	r0, Y+3	; 0x03
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <set_vco_init_cv+0x142>
    150e:	22 0f       	add	r18, r18
    1510:	33 1f       	adc	r19, r19
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <set_vco_init_cv+0x13e>
    1516:	3e 83       	std	Y+6, r19	; 0x06
    1518:	2d 83       	std	Y+5, r18	; 0x05
    151a:	8b 85       	ldd	r24, Y+11	; 0x0b
    151c:	9c 85       	ldd	r25, Y+12	; 0x0c
    151e:	82 2b       	or	r24, r18
    1520:	93 2b       	or	r25, r19
    1522:	9c 87       	std	Y+12, r25	; 0x0c
    1524:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1526:	c4 01       	movw	r24, r8
    1528:	6b 85       	ldd	r22, Y+11	; 0x0b
    152a:	7c 85       	ldd	r23, Y+12	; 0x0c
    152c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
		
		count_finished = FALSE;
    1530:	10 92 d1 03 	sts	0x03D1, r1
		period_counter = 0;
    1534:	10 92 d4 03 	sts	0x03D4, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1538:	8f e0       	ldi	r24, 0x0F	; 15
    153a:	e8 e1       	ldi	r30, 0x18	; 24
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	a8 95       	wdr
    1544:	e0 93 60 00 	sts	0x0060, r30
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    154e:	80 91 d1 03 	lds	r24, 0x03D1
    1552:	88 23       	and	r24, r24
    1554:	89 f5       	brne	.+98     	; 0x15b8 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1556:	c8 01       	movw	r24, r16
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    155e:	c4 01       	movw	r24, r8
    1560:	6b 85       	ldd	r22, Y+11	; 0x0b
    1562:	7c 85       	ldd	r23, Y+12	; 0x0c
    1564:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1568:	c1 01       	movw	r24, r2
    156a:	6f ef       	ldi	r22, 0xFF	; 255
    156c:	7f e3       	ldi	r23, 0x3F	; 63
    156e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1572:	c7 01       	movw	r24, r14
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    157c:	c6 01       	movw	r24, r12
    157e:	6f ef       	ldi	r22, 0xFF	; 255
    1580:	7f e3       	ldi	r23, 0x3F	; 63
    1582:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1586:	c5 01       	movw	r24, r10
    1588:	6f ef       	ldi	r22, 0xFF	; 255
    158a:	7f e3       	ldi	r23, 0x3F	; 63
    158c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1590:	c3 01       	movw	r24, r6
    1592:	6f ef       	ldi	r22, 0xFF	; 255
    1594:	7f e3       	ldi	r23, 0x3F	; 63
    1596:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	6f ef       	ldi	r22, 0xFF	; 255
    15a0:	7f e3       	ldi	r23, 0x3F	; 63
    15a2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    15a6:	c2 01       	movw	r24, r4
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    15b0:	80 91 d1 03 	lds	r24, 0x03D1
    15b4:	88 23       	and	r24, r24
    15b6:	79 f2       	breq	.-98     	; 0x1556 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    15b8:	88 e1       	ldi	r24, 0x18	; 24
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	80 93 60 00 	sts	0x0060, r24
    15c2:	10 92 60 00 	sts	0x0060, r1
    15c6:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    15c8:	80 91 cf 03 	lds	r24, 0x03CF
    15cc:	90 91 d0 03 	lds	r25, 0x03D0
    15d0:	ef 81       	ldd	r30, Y+7	; 0x07
    15d2:	f8 85       	ldd	r31, Y+8	; 0x08
    15d4:	e8 17       	cp	r30, r24
    15d6:	f9 07       	cpc	r31, r25
    15d8:	20 f0       	brcs	.+8      	; 0x15e2 <set_vco_init_cv+0x212>
    15da:	80 91 d2 02 	lds	r24, 0x02D2
    15de:	88 23       	and	r24, r24
    15e0:	51 f4       	brne	.+20     	; 0x15f6 <set_vco_init_cv+0x226>
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	80 95       	com	r24
    15e8:	90 95       	com	r25
    15ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    15ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    15ee:	28 23       	and	r18, r24
    15f0:	39 23       	and	r19, r25
    15f2:	3c 87       	std	Y+12, r19	; 0x0c
    15f4:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	80 93 d2 02 	sts	0x02D2, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
    1606:	ef ef       	ldi	r30, 0xFF	; 255
    1608:	8f 3f       	cpi	r24, 0xFF	; 255
    160a:	9e 07       	cpc	r25, r30
    160c:	09 f0       	breq	.+2      	; 0x1610 <set_vco_init_cv+0x240>
    160e:	7b cf       	rjmp	.-266    	; 0x1506 <set_vco_init_cv+0x136>
    1610:	2b 85       	ldd	r18, Y+11	; 0x0b
    1612:	3c 85       	ldd	r19, Y+12	; 0x0c
    1614:	3e 83       	std	Y+6, r19	; 0x06
    1616:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1618:	8a ec       	ldi	r24, 0xCA	; 202
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    1624:	8b ec       	ldi	r24, 0xCB	; 203
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    1630:	86 ed       	ldi	r24, 0xD6	; 214
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    163c:	8a ed       	ldi	r24, 0xDA	; 218
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    1648:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    164a:	ee e6       	ldi	r30, 0x6E	; 110
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8d 7f       	andi	r24, 0xFD	; 253
    1652:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    1654:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	6d 81       	ldd	r22, Y+5	; 0x05
    165c:	7e 81       	ldd	r23, Y+6	; 0x06
    165e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	2c 96       	adiw	r28, 0x0c	; 12
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	bf 90       	pop	r11
    1684:	af 90       	pop	r10
    1686:	9f 90       	pop	r9
    1688:	8f 90       	pop	r8
    168a:	7f 90       	pop	r7
    168c:	6f 90       	pop	r6
    168e:	5f 90       	pop	r5
    1690:	4f 90       	pop	r4
    1692:	3f 90       	pop	r3
    1694:	2f 90       	pop	r2
    1696:	08 95       	ret

00001698 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1698:	2f 92       	push	r2
    169a:	3f 92       	push	r3
    169c:	4f 92       	push	r4
    169e:	5f 92       	push	r5
    16a0:	6f 92       	push	r6
    16a2:	7f 92       	push	r7
    16a4:	8f 92       	push	r8
    16a6:	9f 92       	push	r9
    16a8:	af 92       	push	r10
    16aa:	bf 92       	push	r11
    16ac:	cf 92       	push	r12
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	c0 54       	subi	r28, 0x40	; 64
    16c2:	d0 40       	sbci	r29, 0x00	; 0
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    16d0:	de 01       	movw	r26, r28
    16d2:	11 96       	adiw	r26, 0x01	; 1
    16d4:	e3 e5       	ldi	r30, 0x53	; 83
    16d6:	f2 e0       	ldi	r31, 0x02	; 2
    16d8:	80 e3       	ldi	r24, 0x30	; 48
    16da:	01 90       	ld	r0, Z+
    16dc:	0d 92       	st	X+, r0
    16de:	81 50       	subi	r24, 0x01	; 1
    16e0:	e1 f7       	brne	.-8      	; 0x16da <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    16e2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    16e6:	0f 30       	cpi	r16, 0x0F	; 15
    16e8:	11 f5       	brne	.+68     	; 0x172e <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    16ea:	40 90 cc 03 	lds	r4, 0x03CC
    16ee:	50 90 cd 03 	lds	r5, 0x03CD
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    16f2:	0f 2e       	mov	r0, r31
    16f4:	f8 ee       	ldi	r31, 0xE8	; 232
    16f6:	8f 2e       	mov	r8, r31
    16f8:	f1 e0       	ldi	r31, 0x01	; 1
    16fa:	9f 2e       	mov	r9, r31
    16fc:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    16fe:	0f 2e       	mov	r0, r31
    1700:	f0 ee       	ldi	r31, 0xE0	; 224
    1702:	2f 2e       	mov	r2, r31
    1704:	f1 e0       	ldi	r31, 0x01	; 1
    1706:	3f 2e       	mov	r3, r31
    1708:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    170a:	25 ee       	ldi	r18, 0xE5	; 229
    170c:	31 e0       	ldi	r19, 0x01	; 1
    170e:	3a ab       	sts	0x5a, r19
    1710:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1712:	0f 2e       	mov	r0, r31
    1714:	fe ed       	ldi	r31, 0xDE	; 222
    1716:	6f 2e       	mov	r6, r31
    1718:	f1 e0       	ldi	r31, 0x01	; 1
    171a:	7f 2e       	mov	r7, r31
    171c:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    171e:	08 ea       	ldi	r16, 0xA8	; 168
    1720:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    1722:	cc 24       	eor	r12, r12
    1724:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    1726:	ee 24       	eor	r14, r14
    1728:	68 94       	set
    172a:	e1 f8       	bld	r14, 1
    172c:	22 c0       	rjmp	.+68     	; 0x1772 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    172e:	40 90 ca 03 	lds	r4, 0x03CA
    1732:	50 90 cb 03 	lds	r5, 0x03CB
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1736:	0f 2e       	mov	r0, r31
    1738:	f7 ee       	ldi	r31, 0xE7	; 231
    173a:	8f 2e       	mov	r8, r31
    173c:	f1 e0       	ldi	r31, 0x01	; 1
    173e:	9f 2e       	mov	r9, r31
    1740:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    1742:	0f 2e       	mov	r0, r31
    1744:	f9 ed       	ldi	r31, 0xD9	; 217
    1746:	2f 2e       	mov	r2, r31
    1748:	f1 e0       	ldi	r31, 0x01	; 1
    174a:	3f 2e       	mov	r3, r31
    174c:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    174e:	46 ee       	ldi	r20, 0xE6	; 230
    1750:	51 e0       	ldi	r21, 0x01	; 1
    1752:	5a ab       	sts	0x5a, r21
    1754:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1756:	0f 2e       	mov	r0, r31
    1758:	ff ed       	ldi	r31, 0xDF	; 223
    175a:	6f 2e       	mov	r6, r31
    175c:	f1 e0       	ldi	r31, 0x01	; 1
    175e:	7f 2e       	mov	r7, r31
    1760:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    1762:	06 e8       	ldi	r16, 0x86	; 134
    1764:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    1766:	cc 24       	eor	r12, r12
    1768:	68 94       	set
    176a:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    176c:	ee 24       	eor	r14, r14
    176e:	68 94       	set
    1770:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    1772:	c3 01       	movw	r24, r6
    1774:	b2 01       	movw	r22, r4
    1776:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    177a:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    177c:	ed ed       	ldi	r30, 0xDD	; 221
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	80 64       	ori	r24, 0x40	; 64
    1784:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1786:	80 81       	ld	r24, Z
    1788:	8f 7b       	andi	r24, 0xBF	; 191
    178a:	80 83       	st	Z, r24
		DATA_BUS = 0;
    178c:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    178e:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	80 93 d3 03 	sts	0x03D3, r24
		
		compare_match_counter = 0;	
    1796:	10 92 ce 03 	sts	0x03CE, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    179a:	8c 2d       	mov	r24, r12
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	24 e6       	ldi	r18, 0x64	; 100
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	82 9f       	mul	r24, r18
    17a4:	d0 01       	movw	r26, r0
    17a6:	83 9f       	mul	r24, r19
    17a8:	b0 0d       	add	r27, r0
    17aa:	92 9f       	mul	r25, r18
    17ac:	b0 0d       	add	r27, r0
    17ae:	11 24       	eor	r1, r1
    17b0:	bc ab       	sts	0x5c, r27
    17b2:	ab ab       	sts	0x5b, r26
    17b4:	fe 01       	movw	r30, r28
    17b6:	31 96       	adiw	r30, 0x01	; 1
    17b8:	fc af       	sts	0x7c, r31
    17ba:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    17bc:	98 01       	movw	r18, r16
    17be:	2e 5f       	subi	r18, 0xFE	; 254
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	21 96       	adiw	r28, 0x01	; 1
    17c4:	3f af       	sts	0x7f, r19
    17c6:	2e af       	sts	0x7e, r18
    17c8:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    17ca:	1e ae       	sts	0xbe, r17
    17cc:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    17ce:	0f 2e       	mov	r0, r31
    17d0:	fa ed       	ldi	r31, 0xDA	; 218
    17d2:	ef 2e       	mov	r14, r31
    17d4:	f1 e0       	ldi	r31, 0x01	; 1
    17d6:	ff 2e       	mov	r15, r31
    17d8:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    17da:	0f 2e       	mov	r0, r31
    17dc:	f6 ed       	ldi	r31, 0xD6	; 214
    17de:	cf 2e       	mov	r12, r31
    17e0:	f1 e0       	ldi	r31, 0x01	; 1
    17e2:	df 2e       	mov	r13, r31
    17e4:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    17e6:	0f 2e       	mov	r0, r31
    17e8:	fc ec       	ldi	r31, 0xCC	; 204
    17ea:	af 2e       	mov	r10, r31
    17ec:	f1 e0       	ldi	r31, 0x01	; 1
    17ee:	bf 2e       	mov	r11, r31
    17f0:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    17f2:	eb ad       	sts	0x6b, r30
    17f4:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    17f6:	80 81       	ld	r24, Z
    17f8:	80 93 d3 03 	sts	0x03D3, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    17fc:	84 b5       	in	r24, 0x24	; 36
    17fe:	8f 60       	ori	r24, 0x0F	; 15
    1800:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    1806:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    1808:	4d ad       	sts	0x6d, r20
    180a:	5e ad       	sts	0x6e, r21
    180c:	43 30       	cpi	r20, 0x03	; 3
    180e:	51 05       	cpc	r21, r1
    1810:	24 f4       	brge	.+8      	; 0x181a <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    1812:	83 e0       	ldi	r24, 0x03	; 3
    1814:	80 93 d2 03 	sts	0x03D2, r24
    1818:	03 c0       	rjmp	.+6      	; 0x1820 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	80 93 d2 03 	sts	0x03D2, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    1820:	81 81       	ldd	r24, Z+1	; 0x01
    1822:	92 81       	ldd	r25, Z+2	; 0x02
    1824:	9a af       	sts	0x7a, r25
    1826:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1828:	ad e0       	ldi	r26, 0x0D	; 13
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	be ab       	sts	0x5e, r27
    182e:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    1830:	00 e0       	ldi	r16, 0x00	; 0
    1832:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    1834:	e1 e0       	ldi	r30, 0x01	; 1
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	0d a8       	sts	0x8d, r16
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <tune_8ths+0x1a8>
    183c:	ee 0f       	add	r30, r30
    183e:	ff 1f       	adc	r31, r31
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <tune_8ths+0x1a4>
    1844:	f8 af       	sts	0x78, r31
    1846:	ef ab       	sts	0x5f, r30
    1848:	0e 2b       	or	r16, r30
    184a:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    184c:	ae e6       	ldi	r26, 0x6E	; 110
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	8c 91       	ld	r24, X
    1852:	8d 7f       	andi	r24, 0xFD	; 253
    1854:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1856:	c4 01       	movw	r24, r8
    1858:	b8 01       	movw	r22, r16
    185a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
    185e:	e3 ef       	ldi	r30, 0xF3	; 243
    1860:	f1 e0       	ldi	r31, 0x01	; 1
    1862:	31 97       	sbiw	r30, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <tune_8ths+0x1ca>
    1866:	00 c0       	rjmp	.+0      	; 0x1868 <tune_8ths+0x1d0>
    1868:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    186a:	ae e6       	ldi	r26, 0x6E	; 110
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	8c 91       	ld	r24, X
    1870:	82 60       	ori	r24, 0x02	; 2
    1872:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    1874:	10 92 d1 03 	sts	0x03D1, r1
				period_counter = 0;
    1878:	10 92 d4 03 	sts	0x03D4, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    187c:	e8 e1       	ldi	r30, 0x18	; 24
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	2f e0       	ldi	r18, 0x0F	; 15
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	a8 95       	wdr
    1888:	e0 93 60 00 	sts	0x0060, r30
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    1892:	80 91 d1 03 	lds	r24, 0x03D1
    1896:	88 23       	and	r24, r24
    1898:	81 f5       	brne	.+96     	; 0x18fa <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    189a:	80 91 d3 03 	lds	r24, 0x03D3
    189e:	4b a9       	sts	0x4b, r20
    18a0:	5c a9       	sts	0x4c, r21
    18a2:	48 0f       	add	r20, r24
    18a4:	51 1d       	adc	r21, r1
    18a6:	ca 01       	movw	r24, r20
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    18ae:	c3 01       	movw	r24, r6
    18b0:	b2 01       	movw	r22, r4
    18b2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    18b6:	c4 01       	movw	r24, r8
    18b8:	b8 01       	movw	r22, r16
    18ba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    18be:	c7 01       	movw	r24, r14
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    18c8:	c6 01       	movw	r24, r12
    18ca:	6f ef       	ldi	r22, 0xFF	; 255
    18cc:	7f e3       	ldi	r23, 0x3F	; 63
    18ce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    18d2:	c5 01       	movw	r24, r10
    18d4:	6f ef       	ldi	r22, 0xFF	; 255
    18d6:	7f e3       	ldi	r23, 0x3F	; 63
    18d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    18dc:	c1 01       	movw	r24, r2
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	70 e2       	ldi	r23, 0x20	; 32
    18e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    18e6:	89 a9       	sts	0x49, r24
    18e8:	9a a9       	sts	0x4a, r25
    18ea:	6f ef       	ldi	r22, 0xFF	; 255
    18ec:	7f e3       	ldi	r23, 0x3F	; 63
    18ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    18f2:	80 91 d1 03 	lds	r24, 0x03D1
    18f6:	88 23       	and	r24, r24
    18f8:	81 f2       	breq	.-96     	; 0x189a <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    18fa:	58 e1       	ldi	r21, 0x18	; 24
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	50 93 60 00 	sts	0x0060, r21
    1904:	10 92 60 00 	sts	0x0060, r1
    1908:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    190a:	80 91 cf 03 	lds	r24, 0x03CF
    190e:	90 91 d0 03 	lds	r25, 0x03D0
    1912:	a9 ad       	sts	0x69, r26
    1914:	ba ad       	sts	0x6a, r27
    1916:	a8 17       	cp	r26, r24
    1918:	b9 07       	cpc	r27, r25
    191a:	50 f0       	brcs	.+20     	; 0x1930 <tune_8ths+0x298>
    191c:	80 91 d2 02 	lds	r24, 0x02D2
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	31 f4       	brne	.+12     	; 0x1930 <tune_8ths+0x298>
    1924:	8f a9       	sts	0x4f, r24
    1926:	98 ad       	sts	0x68, r25
    1928:	80 95       	com	r24
    192a:	90 95       	com	r25
    192c:	08 23       	and	r16, r24
    192e:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    1930:	80 91 cf 03 	lds	r24, 0x03CF
    1934:	90 91 d0 03 	lds	r25, 0x03D0
    1938:	e9 ad       	sts	0x69, r30
    193a:	fa ad       	sts	0x6a, r31
    193c:	8e 17       	cp	r24, r30
    193e:	9f 07       	cpc	r25, r31
    1940:	21 f4       	brne	.+8      	; 0x194a <tune_8ths+0x2b2>
    1942:	80 91 d2 02 	lds	r24, 0x02D2
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	71 f0       	breq	.+28     	; 0x1966 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    194a:	f1 e0       	ldi	r31, 0x01	; 1
    194c:	f0 93 d2 02 	sts	0x02D2, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1950:	2d a9       	sts	0x4d, r18
    1952:	3e a9       	sts	0x4e, r19
    1954:	21 50       	subi	r18, 0x01	; 1
    1956:	30 40       	sbci	r19, 0x00	; 0
    1958:	3e ab       	sts	0x5e, r19
    195a:	2d ab       	sts	0x5d, r18
    195c:	4f ef       	ldi	r20, 0xFF	; 255
    195e:	2f 3f       	cpi	r18, 0xFF	; 255
    1960:	34 07       	cpc	r19, r20
    1962:	09 f0       	breq	.+2      	; 0x1966 <tune_8ths+0x2ce>
    1964:	67 cf       	rjmp	.-306    	; 0x1834 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    1966:	21 96       	adiw	r28, 0x01	; 1
    1968:	ae ad       	sts	0x6e, r26
    196a:	bf ad       	sts	0x6f, r27
    196c:	21 97       	sbiw	r28, 0x01	; 1
    196e:	0d 93       	st	X+, r16
    1970:	1d 93       	st	X+, r17
    1972:	21 96       	adiw	r28, 0x01	; 1
    1974:	bf af       	sts	0x7f, r27
    1976:	ae af       	sts	0x7e, r26
    1978:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    197a:	ee e6       	ldi	r30, 0x6E	; 110
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8d 7f       	andi	r24, 0xFD	; 253
    1982:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    1984:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1986:	2d ad       	sts	0x6d, r18
    1988:	3e ad       	sts	0x6e, r19
    198a:	2f 5f       	subi	r18, 0xFF	; 255
    198c:	3f 4f       	sbci	r19, 0xFF	; 255
    198e:	3e af       	sts	0x7e, r19
    1990:	2d af       	sts	0x7d, r18
    1992:	4b ad       	sts	0x6b, r20
    1994:	5c ad       	sts	0x6c, r21
    1996:	4d 5f       	subi	r20, 0xFD	; 253
    1998:	5f 4f       	sbci	r21, 0xFF	; 255
    199a:	5c af       	sts	0x7c, r21
    199c:	4b af       	sts	0x7b, r20
    199e:	20 31       	cpi	r18, 0x10	; 16
    19a0:	31 05       	cpc	r19, r1
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <tune_8ths+0x30e>
    19a4:	26 cf       	rjmp	.-436    	; 0x17f2 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		
		PORTF &= ~(1<<GATE); //turn gate off
    19a6:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    19a8:	c0 5c       	subi	r28, 0xC0	; 192
    19aa:	df 4f       	sbci	r29, 0xFF	; 255
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	ff 90       	pop	r15
    19c0:	ef 90       	pop	r14
    19c2:	df 90       	pop	r13
    19c4:	cf 90       	pop	r12
    19c6:	bf 90       	pop	r11
    19c8:	af 90       	pop	r10
    19ca:	9f 90       	pop	r9
    19cc:	8f 90       	pop	r8
    19ce:	7f 90       	pop	r7
    19d0:	6f 90       	pop	r6
    19d2:	5f 90       	pop	r5
    19d4:	4f 90       	pop	r4
    19d6:	3f 90       	pop	r3
    19d8:	2f 90       	pop	r2
    19da:	08 95       	ret

000019dc <tune_filter>:
	
void tune_filter(void) {
    19dc:	2f 92       	push	r2
    19de:	3f 92       	push	r3
    19e0:	4f 92       	push	r4
    19e2:	5f 92       	push	r5
    19e4:	6f 92       	push	r6
    19e6:	7f 92       	push	r7
    19e8:	8f 92       	push	r8
    19ea:	9f 92       	push	r9
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	e9 97       	sbiw	r28, 0x39	; 57
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    1a10:	de 01       	movw	r26, r28
    1a12:	11 96       	adiw	r26, 0x01	; 1
    1a14:	e3 e8       	ldi	r30, 0x83	; 131
    1a16:	f2 e0       	ldi	r31, 0x02	; 2
    1a18:	8d e2       	ldi	r24, 0x2D	; 45
    1a1a:	01 90       	ld	r0, Z+
    1a1c:	0d 92       	st	X+, r0
    1a1e:	81 50       	subi	r24, 0x01	; 1
    1a20:	e1 f7       	brne	.-8      	; 0x1a1a <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1a22:	8a ed       	ldi	r24, 0xDA	; 218
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1a2e:	83 ee       	ldi	r24, 0xE3	; 227
    1a30:	91 e0       	ldi	r25, 0x01	; 1
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1a3a:	84 ee       	ldi	r24, 0xE4	; 228
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1a46:	86 ed       	ldi	r24, 0xD6	; 214
    1a48:	92 e0       	ldi	r25, 0x02	; 2
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1a52:	8c ed       	ldi	r24, 0xDC	; 220
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1a5e:	81 ee       	ldi	r24, 0xE1	; 225
    1a60:	91 e0       	ldi	r25, 0x01	; 1
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1a6a:	82 ee       	ldi	r24, 0xE2	; 226
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1a76:	83 ed       	ldi	r24, 0xD3	; 211
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1a82:	88 ed       	ldi	r24, 0xD8	; 216
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1a8e:	84 ed       	ldi	r24, 0xD4	; 212
    1a90:	91 e0       	ldi	r25, 0x01	; 1
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1a9a:	85 ed       	ldi	r24, 0xD5	; 213
    1a9c:	91 e0       	ldi	r25, 0x01	; 1
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    1aa6:	86 ed       	ldi	r24, 0xD6	; 214
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	6f ef       	ldi	r22, 0xFF	; 255
    1aac:	7f e3       	ldi	r23, 0x3F	; 63
    1aae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    1ab2:	87 ed       	ldi	r24, 0xD7	; 215
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	6f ef       	ldi	r22, 0xFF	; 255
    1ab8:	7f e3       	ldi	r23, 0x3F	; 63
    1aba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1abe:	8b ed       	ldi	r24, 0xDB	; 219
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1aca:	80 ed       	ldi	r24, 0xD0	; 208
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1ad6:	8e ec       	ldi	r24, 0xCE	; 206
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	70 e0       	ldi	r23, 0x00	; 0
    1ade:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1ae2:	8c ec       	ldi	r24, 0xCC	; 204
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	6f ef       	ldi	r22, 0xFF	; 255
    1ae8:	7f e3       	ldi	r23, 0x3F	; 63
    1aea:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1aee:	8a ec       	ldi	r24, 0xCA	; 202
    1af0:	91 e0       	ldi	r25, 0x01	; 1
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    1afa:	82 ed       	ldi	r24, 0xD2	; 210
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1b06:	85 ee       	ldi	r24, 0xE5	; 229
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1b12:	86 ee       	ldi	r24, 0xE6	; 230
    1b14:	91 e0       	ldi	r25, 0x01	; 1
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    1b1e:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1b20:	ed ed       	ldi	r30, 0xDD	; 221
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	80 64       	ori	r24, 0x40	; 64
    1b28:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8f 7b       	andi	r24, 0xBF	; 191
    1b2e:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	80 93 d3 03 	sts	0x03D3, r24
	PORTF |= (1<<GATE); //turn gate on
    1b36:	89 9a       	sbi	0x11, 1	; 17
    1b38:	9e 01       	movw	r18, r28
    1b3a:	2f 5f       	subi	r18, 0xFF	; 255
    1b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3e:	3d ab       	sts	0x5d, r19
    1b40:	2c ab       	sts	0x5c, r18
    1b42:	88 e6       	ldi	r24, 0x68	; 104
    1b44:	93 e0       	ldi	r25, 0x03	; 3
    1b46:	99 af       	sts	0x79, r25
    1b48:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    1b4a:	1f aa       	sts	0x9f, r17
    1b4c:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    1b4e:	0f 2e       	mov	r0, r31
    1b50:	f6 ed       	ldi	r31, 0xD6	; 214
    1b52:	af 2e       	mov	r10, r31
    1b54:	f1 e0       	ldi	r31, 0x01	; 1
    1b56:	bf 2e       	mov	r11, r31
    1b58:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1b5a:	0f 2e       	mov	r0, r31
    1b5c:	fa ed       	ldi	r31, 0xDA	; 218
    1b5e:	6f 2e       	mov	r6, r31
    1b60:	f1 e0       	ldi	r31, 0x01	; 1
    1b62:	7f 2e       	mov	r7, r31
    1b64:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    1b66:	0f 2e       	mov	r0, r31
    1b68:	f7 ed       	ldi	r31, 0xD7	; 215
    1b6a:	4f 2e       	mov	r4, r31
    1b6c:	f1 e0       	ldi	r31, 0x01	; 1
    1b6e:	5f 2e       	mov	r5, r31
    1b70:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    1b72:	0f 2e       	mov	r0, r31
    1b74:	fc ec       	ldi	r31, 0xCC	; 204
    1b76:	2f 2e       	mov	r2, r31
    1b78:	f1 e0       	ldi	r31, 0x01	; 1
    1b7a:	3f 2e       	mov	r3, r31
    1b7c:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    1b7e:	ac a9       	sts	0x4c, r26
    1b80:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    1b82:	8c 91       	ld	r24, X
    1b84:	80 93 d3 03 	sts	0x03D3, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1b88:	84 b5       	in	r24, 0x24	; 36
    1b8a:	8f 60       	ori	r24, 0x0F	; 15
    1b8c:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1b92:	ee e6       	ldi	r30, 0x6E	; 110
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	82 60       	ori	r24, 0x02	; 2
    1b9a:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    1b9c:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    1b9e:	ee a9       	sts	0x4e, r30
    1ba0:	ff a9       	sts	0x4f, r31
    1ba2:	e2 30       	cpi	r30, 0x02	; 2
    1ba4:	f1 05       	cpc	r31, r1
    1ba6:	24 f4       	brge	.+8      	; 0x1bb0 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	80 93 d2 03 	sts	0x03D2, r24
    1bae:	03 c0       	rjmp	.+6      	; 0x1bb6 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	80 93 d2 03 	sts	0x03D2, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    1bb6:	11 96       	adiw	r26, 0x01	; 1
    1bb8:	2d 91       	ld	r18, X+
    1bba:	3c 91       	ld	r19, X
    1bbc:	12 97       	sbiw	r26, 0x02	; 2
    1bbe:	3b ab       	sts	0x5b, r19
    1bc0:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1bc2:	8d e0       	ldi	r24, 0x0D	; 13
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9f a7       	lds	r25, 0x7f
    1bc8:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    1bca:	ee 24       	eor	r14, r14
    1bcc:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    1bce:	0f 2e       	mov	r0, r31
    1bd0:	f3 ed       	ldi	r31, 0xD3	; 211
    1bd2:	cf 2e       	mov	r12, r31
    1bd4:	f1 e0       	ldi	r31, 0x01	; 1
    1bd6:	df 2e       	mov	r13, r31
    1bd8:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    1bda:	0f 2e       	mov	r0, r31
    1bdc:	f8 ed       	ldi	r31, 0xD8	; 216
    1bde:	8f 2e       	mov	r8, r31
    1be0:	f1 e0       	ldi	r31, 0x01	; 1
    1be2:	9f 2e       	mov	r9, r31
    1be4:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	fc 01       	movw	r30, r24
    1bec:	0e a4       	lds	r16, 0xae
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <tune_filter+0x218>
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <tune_filter+0x214>
    1bf8:	f9 ab       	sts	0x59, r31
    1bfa:	e8 ab       	sts	0x58, r30
    1bfc:	ee 2a       	or	r14, r30
    1bfe:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    1c00:	c5 01       	movw	r24, r10
    1c02:	b7 01       	movw	r22, r14
    1c04:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
    1c08:	10 92 d1 03 	sts	0x03D1, r1
			period_counter = 0;
    1c0c:	10 92 d4 03 	sts	0x03D4, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    1c10:	8f e0       	ldi	r24, 0x0F	; 15
    1c12:	28 e1       	ldi	r18, 0x18	; 24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	a8 95       	wdr
    1c1c:	20 93 60 00 	sts	0x0060, r18
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    1c26:	80 91 d1 03 	lds	r24, 0x03D1
    1c2a:	88 23       	and	r24, r24
    1c2c:	b1 f5       	brne	.+108    	; 0x1c9a <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    1c2e:	04 ed       	ldi	r16, 0xD4	; 212
    1c30:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    1c32:	80 91 d3 03 	lds	r24, 0x03D3
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	84 5d       	subi	r24, 0xD4	; 212
    1c3a:	9e 4f       	sbci	r25, 0xFE	; 254
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    1c42:	c5 01       	movw	r24, r10
    1c44:	b7 01       	movw	r22, r14
    1c46:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    1c4a:	c3 01       	movw	r24, r6
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    1c54:	c2 01       	movw	r24, r4
    1c56:	6f ef       	ldi	r22, 0xFF	; 255
    1c58:	7f e3       	ldi	r23, 0x3F	; 63
    1c5a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    1c5e:	c1 01       	movw	r24, r2
    1c60:	6f ef       	ldi	r22, 0xFF	; 255
    1c62:	7f e3       	ldi	r23, 0x3F	; 63
    1c64:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    1c68:	80 ed       	ldi	r24, 0xD0	; 208
    1c6a:	91 e0       	ldi	r25, 0x01	; 1
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    1c74:	c6 01       	movw	r24, r12
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    1c7e:	c4 01       	movw	r24, r8
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    1c88:	c8 01       	movw	r24, r16
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    1c92:	80 91 d1 03 	lds	r24, 0x03D1
    1c96:	88 23       	and	r24, r24
    1c98:	61 f2       	breq	.-104    	; 0x1c32 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    1c9a:	88 e1       	ldi	r24, 0x18	; 24
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	80 93 60 00 	sts	0x0060, r24
    1ca4:	10 92 60 00 	sts	0x0060, r1
    1ca8:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    1caa:	80 91 cf 03 	lds	r24, 0x03CF
    1cae:	90 91 d0 03 	lds	r25, 0x03D0
    1cb2:	2a a9       	sts	0x4a, r18
    1cb4:	3b a9       	sts	0x4b, r19
    1cb6:	28 17       	cp	r18, r24
    1cb8:	39 07       	cpc	r19, r25
    1cba:	50 f0       	brcs	.+20     	; 0x1cd0 <tune_filter+0x2f4>
    1cbc:	80 91 d2 02 	lds	r24, 0x02D2
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	31 f4       	brne	.+12     	; 0x1cd0 <tune_filter+0x2f4>
    1cc4:	88 a9       	sts	0x48, r24
    1cc6:	99 a9       	sts	0x49, r25
    1cc8:	80 95       	com	r24
    1cca:	90 95       	com	r25
    1ccc:	e8 22       	and	r14, r24
    1cce:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    1cd0:	80 91 cf 03 	lds	r24, 0x03CF
    1cd4:	90 91 d0 03 	lds	r25, 0x03D0
    1cd8:	ea a9       	sts	0x4a, r30
    1cda:	fb a9       	sts	0x4b, r31
    1cdc:	8e 17       	cp	r24, r30
    1cde:	9f 07       	cpc	r25, r31
    1ce0:	21 f4       	brne	.+8      	; 0x1cea <tune_filter+0x30e>
    1ce2:	80 91 d2 02 	lds	r24, 0x02D2
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	71 f0       	breq	.+28     	; 0x1d06 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	80 93 d2 02 	sts	0x02D2, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    1cf0:	2e a5       	lds	r18, 0x6e
    1cf2:	3f a5       	lds	r19, 0x6f
    1cf4:	21 50       	subi	r18, 0x01	; 1
    1cf6:	30 40       	sbci	r19, 0x00	; 0
    1cf8:	3f a7       	lds	r19, 0x7f
    1cfa:	2e a7       	lds	r18, 0x7e
    1cfc:	8f ef       	ldi	r24, 0xFF	; 255
    1cfe:	2f 3f       	cpi	r18, 0xFF	; 255
    1d00:	38 07       	cpc	r19, r24
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <tune_filter+0x32a>
    1d04:	70 cf       	rjmp	.-288    	; 0x1be6 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    1d06:	ee a9       	sts	0x4e, r30
    1d08:	ff a9       	sts	0x4f, r31
    1d0a:	31 96       	adiw	r30, 0x01	; 1
    1d0c:	ff ab       	sts	0x5f, r31
    1d0e:	ee ab       	sts	0x5e, r30
    1d10:	c7 01       	movw	r24, r14
    1d12:	80 96       	adiw	r24, 0x20	; 32
    1d14:	e8 ad       	sts	0x68, r30
    1d16:	f9 ad       	sts	0x69, r31
    1d18:	81 93       	st	Z+, r24
    1d1a:	91 93       	st	Z+, r25
    1d1c:	f9 af       	sts	0x79, r31
    1d1e:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    1d20:	ee e6       	ldi	r30, 0x6E	; 110
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8d 7f       	andi	r24, 0xFD	; 253
    1d28:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    1d2a:	14 bc       	out	0x24, r1	; 36
    1d2c:	2c a9       	sts	0x4c, r18
    1d2e:	3d a9       	sts	0x4d, r19
    1d30:	2d 5f       	subi	r18, 0xFD	; 253
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	3d ab       	sts	0x5d, r19
    1d36:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    1d38:	8e a9       	sts	0x4e, r24
    1d3a:	9f a9       	sts	0x4f, r25
    1d3c:	8f 30       	cpi	r24, 0x0F	; 15
    1d3e:	91 05       	cpc	r25, r1
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <tune_filter+0x368>
    1d42:	1d cf       	rjmp	.-454    	; 0x1b7e <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    1d44:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    1d46:	e9 96       	adiw	r28, 0x39	; 57
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	ff 90       	pop	r15
    1d5c:	ef 90       	pop	r14
    1d5e:	df 90       	pop	r13
    1d60:	cf 90       	pop	r12
    1d62:	bf 90       	pop	r11
    1d64:	af 90       	pop	r10
    1d66:	9f 90       	pop	r9
    1d68:	8f 90       	pop	r8
    1d6a:	7f 90       	pop	r7
    1d6c:	6f 90       	pop	r6
    1d6e:	5f 90       	pop	r5
    1d70:	4f 90       	pop	r4
    1d72:	3f 90       	pop	r3
    1d74:	2f 90       	pop	r2
    1d76:	08 95       	ret

00001d78 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    1d78:	86 e6       	ldi	r24, 0x66	; 102
    1d7a:	93 e0       	ldi	r25, 0x03	; 3
    1d7c:	6e e0       	ldi	r22, 0x0E	; 14
    1d7e:	77 e0       	ldi	r23, 0x07	; 7
    1d80:	40 e2       	ldi	r20, 0x20	; 32
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    1d88:	88 ea       	ldi	r24, 0xA8	; 168
    1d8a:	93 e0       	ldi	r25, 0x03	; 3
    1d8c:	60 e5       	ldi	r22, 0x50	; 80
    1d8e:	77 e0       	ldi	r23, 0x07	; 7
    1d90:	42 e2       	ldi	r20, 0x22	; 34
    1d92:	50 e0       	ldi	r21, 0x00	; 0
    1d94:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    1d98:	86 e8       	ldi	r24, 0x86	; 134
    1d9a:	93 e0       	ldi	r25, 0x03	; 3
    1d9c:	6e e2       	ldi	r22, 0x2E	; 46
    1d9e:	77 e0       	ldi	r23, 0x07	; 7
    1da0:	42 e2       	ldi	r20, 0x22	; 34
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__eeupd_block_m6450a>
	
	
}
    1da8:	08 95       	ret

00001daa <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    1daa:	84 e7       	ldi	r24, 0x74	; 116
    1dac:	97 e0       	ldi	r25, 0x07	; 7
    1dae:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__eerd_word_m6450a>
    1db2:	90 93 cd 03 	sts	0x03CD, r25
    1db6:	80 93 cc 03 	sts	0x03CC, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    1dba:	82 e7       	ldi	r24, 0x72	; 114
    1dbc:	97 e0       	ldi	r25, 0x07	; 7
    1dbe:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__eerd_word_m6450a>
    1dc2:	90 93 cb 03 	sts	0x03CB, r25
    1dc6:	80 93 ca 03 	sts	0x03CA, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    1dca:	88 ea       	ldi	r24, 0xA8	; 168
    1dcc:	93 e0       	ldi	r25, 0x03	; 3
    1dce:	60 e5       	ldi	r22, 0x50	; 80
    1dd0:	77 e0       	ldi	r23, 0x07	; 7
    1dd2:	42 e2       	ldi	r20, 0x22	; 34
    1dd4:	50 e0       	ldi	r21, 0x00	; 0
    1dd6:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    1dda:	86 e8       	ldi	r24, 0x86	; 134
    1ddc:	93 e0       	ldi	r25, 0x03	; 3
    1dde:	6e e2       	ldi	r22, 0x2E	; 46
    1de0:	77 e0       	ldi	r23, 0x07	; 7
    1de2:	42 e2       	ldi	r20, 0x22	; 34
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    1dea:	86 e6       	ldi	r24, 0x66	; 102
    1dec:	93 e0       	ldi	r25, 0x03	; 3
    1dee:	6e e0       	ldi	r22, 0x0E	; 14
    1df0:	77 e0       	ldi	r23, 0x07	; 7
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	50 e0       	ldi	r21, 0x00	; 0
    1df6:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    1dfa:	08 95       	ret

00001dfc <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    1dfc:	98 2f       	mov	r25, r24
    1dfe:	96 95       	lsr	r25
    1e00:	96 95       	lsr	r25
    1e02:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    1e04:	29 2f       	mov	r18, r25
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	f9 01       	movw	r30, r18
    1e0a:	31 97       	sbiw	r30, 0x01	; 1
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	e6 0f       	add	r30, r22
    1e12:	f7 1f       	adc	r31, r23
    1e14:	01 90       	ld	r0, Z+
    1e16:	f0 81       	ld	r31, Z
    1e18:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    1e1a:	22 0f       	add	r18, r18
    1e1c:	33 1f       	adc	r19, r19
    1e1e:	26 0f       	add	r18, r22
    1e20:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    1e22:	d9 01       	movw	r26, r18
    1e24:	4d 91       	ld	r20, X+
    1e26:	5c 91       	ld	r21, X
    1e28:	11 97       	sbiw	r26, 0x01	; 1
    1e2a:	4e 1b       	sub	r20, r30
    1e2c:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    1e2e:	99 0f       	add	r25, r25
    1e30:	99 0f       	add	r25, r25
    1e32:	99 0f       	add	r25, r25
    1e34:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	48 9f       	mul	r20, r24
    1e3a:	90 01       	movw	r18, r0
    1e3c:	49 9f       	mul	r20, r25
    1e3e:	30 0d       	add	r19, r0
    1e40:	58 9f       	mul	r21, r24
    1e42:	30 0d       	add	r19, r0
    1e44:	11 24       	eor	r1, r1
    1e46:	36 95       	lsr	r19
    1e48:	27 95       	ror	r18
    1e4a:	36 95       	lsr	r19
    1e4c:	27 95       	ror	r18
    1e4e:	36 95       	lsr	r19
    1e50:	27 95       	ror	r18
    1e52:	e2 0f       	add	r30, r18
    1e54:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    1e56:	8e 2f       	mov	r24, r30
    1e58:	9f 2f       	mov	r25, r31
    1e5a:	08 95       	ret

00001e5c <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	a2 97       	sbiw	r28, 0x22	; 34
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    1e70:	de 01       	movw	r26, r28
    1e72:	11 96       	adiw	r26, 0x01	; 1
    1e74:	e0 eb       	ldi	r30, 0xB0	; 176
    1e76:	f2 e0       	ldi	r31, 0x02	; 2
    1e78:	82 e2       	ldi	r24, 0x22	; 34
    1e7a:	01 90       	ld	r0, Z+
    1e7c:	0d 92       	st	X+, r0
    1e7e:	81 50       	subi	r24, 0x01	; 1
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    1e82:	a8 ea       	ldi	r26, 0xA8	; 168
    1e84:	b3 e0       	ldi	r27, 0x03	; 3
    1e86:	fe 01       	movw	r30, r28
    1e88:	31 96       	adiw	r30, 0x01	; 1
    1e8a:	82 e2       	ldi	r24, 0x22	; 34
    1e8c:	01 90       	ld	r0, Z+
    1e8e:	0d 92       	st	X+, r0
    1e90:	81 50       	subi	r24, 0x01	; 1
    1e92:	e1 f7       	brne	.-8      	; 0x1e8c <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    1e94:	a6 e8       	ldi	r26, 0x86	; 134
    1e96:	b3 e0       	ldi	r27, 0x03	; 3
    1e98:	fe 01       	movw	r30, r28
    1e9a:	31 96       	adiw	r30, 0x01	; 1
    1e9c:	82 e2       	ldi	r24, 0x22	; 34
    1e9e:	01 90       	ld	r0, Z+
    1ea0:	0d 92       	st	X+, r0
    1ea2:	81 50       	subi	r24, 0x01	; 1
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <set_one_volt_per_octave+0x42>
	
	
    1ea6:	a2 96       	adiw	r28, 0x22	; 34
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	08 95       	ret

00001eb8 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    1eb8:	9f b1       	in	r25, 0x0f	; 15
	
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    1eba:	80 91 d8 03 	lds	r24, 0x03D8
    1ebe:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    1ec0:	89 27       	eor	r24, r25
    1ec2:	80 93 d8 03 	sts	0x03D8, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    1ec6:	89 23       	and	r24, r25
    1ec8:	08 95       	ret

00001eca <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1eca:	ed ed       	ldi	r30, 0xDD	; 221
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	90 81       	ld	r25, Z
    1ed0:	9f 7b       	andi	r25, 0xBF	; 191
    1ed2:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	21 70       	andi	r18, 0x01	; 1
    1eda:	30 70       	andi	r19, 0x00	; 0
    1edc:	22 0f       	add	r18, r18
    1ede:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    1ee0:	68 2f       	mov	r22, r24
    1ee2:	62 95       	swap	r22
    1ee4:	66 95       	lsr	r22
    1ee6:	67 70       	andi	r22, 0x07	; 7
    1ee8:	67 95       	ror	r22
    1eea:	66 27       	eor	r22, r22
    1eec:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1eee:	26 2b       	or	r18, r22
    1ef0:	98 2f       	mov	r25, r24
    1ef2:	96 95       	lsr	r25
    1ef4:	96 95       	lsr	r25
    1ef6:	91 70       	andi	r25, 0x01	; 1
    1ef8:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    1efa:	68 2f       	mov	r22, r24
    1efc:	66 1f       	adc	r22, r22
    1efe:	66 27       	eor	r22, r22
    1f00:	66 1f       	adc	r22, r22
    1f02:	66 0f       	add	r22, r22
    1f04:	66 0f       	add	r22, r22
    1f06:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1f08:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    1f0a:	a8 2f       	mov	r26, r24
    1f0c:	a6 95       	lsr	r26
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	a1 70       	andi	r26, 0x01	; 1
    1f12:	b0 70       	andi	r27, 0x00	; 0
    1f14:	bd 01       	movw	r22, r26
    1f16:	66 0f       	add	r22, r22
    1f18:	77 1f       	adc	r23, r23
    1f1a:	66 0f       	add	r22, r22
    1f1c:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1f1e:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    1f20:	68 2f       	mov	r22, r24
    1f22:	62 95       	swap	r22
    1f24:	6f 70       	andi	r22, 0x0F	; 15
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	61 70       	andi	r22, 0x01	; 1
    1f2a:	70 70       	andi	r23, 0x00	; 0
    1f2c:	ab 01       	movw	r20, r22
    1f2e:	00 24       	eor	r0, r0
    1f30:	56 95       	lsr	r21
    1f32:	47 95       	ror	r20
    1f34:	07 94       	ror	r0
    1f36:	56 95       	lsr	r21
    1f38:	47 95       	ror	r20
    1f3a:	07 94       	ror	r0
    1f3c:	54 2f       	mov	r21, r20
    1f3e:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1f40:	62 2f       	mov	r22, r18
    1f42:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    1f44:	48 2f       	mov	r20, r24
    1f46:	42 95       	swap	r20
    1f48:	46 95       	lsr	r20
    1f4a:	46 95       	lsr	r20
    1f4c:	43 70       	andi	r20, 0x03	; 3
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	41 70       	andi	r20, 0x01	; 1
    1f52:	50 70       	andi	r21, 0x00	; 0
    1f54:	9a 01       	movw	r18, r20
    1f56:	22 0f       	add	r18, r18
    1f58:	33 1f       	adc	r19, r19
    1f5a:	22 95       	swap	r18
    1f5c:	32 95       	swap	r19
    1f5e:	30 7f       	andi	r19, 0xF0	; 240
    1f60:	32 27       	eor	r19, r18
    1f62:	20 7f       	andi	r18, 0xF0	; 240
    1f64:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1f66:	46 2f       	mov	r20, r22
    1f68:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    1f6a:	86 95       	lsr	r24
    1f6c:	86 95       	lsr	r24
    1f6e:	86 95       	lsr	r24
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	21 70       	andi	r18, 0x01	; 1
    1f76:	30 70       	andi	r19, 0x00	; 0
    1f78:	c9 01       	movw	r24, r18
    1f7a:	82 95       	swap	r24
    1f7c:	92 95       	swap	r25
    1f7e:	90 7f       	andi	r25, 0xF0	; 240
    1f80:	98 27       	eor	r25, r24
    1f82:	80 7f       	andi	r24, 0xF0	; 240
    1f84:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    1f86:	84 2b       	or	r24, r20
    1f88:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1f8a:	80 81       	ld	r24, Z
    1f8c:	80 64       	ori	r24, 0x40	; 64
    1f8e:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1f90:	80 81       	ld	r24, Z
    1f92:	8f 7b       	andi	r24, 0xBF	; 191
    1f94:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1f96:	12 b8       	out	0x02, r1	; 2
	
	
    1f98:	08 95       	ret

00001f9a <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1f9a:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1f9c:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1f9e:	74 83       	std	Z+4, r23	; 0x04
    1fa0:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    1fa2:	11 82       	std	Z+1, r1	; 0x01
    1fa4:	10 82       	st	Z, r1
}
    1fa6:	08 95       	ret

00001fa8 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	ec 01       	movw	r28, r24
    1fb0:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1fb2:	0e 94 43 10 	call	0x2086	; 0x2086 <store_and_clear_interrupt>
    1fb6:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    1fb8:	39 81       	ldd	r19, Y+1	; 0x01
    1fba:	83 2f       	mov	r24, r19
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	01 96       	adiw	r24, 0x01	; 1
    1fc0:	6a 81       	ldd	r22, Y+2	; 0x02
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__divmodhi4>
    1fc8:	48 81       	ld	r20, Y
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	84 17       	cp	r24, r20
    1fce:	95 07       	cpc	r25, r21
    1fd0:	29 f4       	brne	.+10     	; 0x1fdc <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    1fd2:	82 2f       	mov	r24, r18
    1fd4:	0e 94 46 10 	call	0x208c	; 0x208c <restore_interrupt_setting>
      return false;
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	11 c0       	rjmp	.+34     	; 0x1ffe <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    1fdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fde:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe0:	e3 0f       	add	r30, r19
    1fe2:	f1 1d       	adc	r31, r1
    1fe4:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	01 96       	adiw	r24, 0x01	; 1
    1fec:	6a 81       	ldd	r22, Y+2	; 0x02
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__divmodhi4>
    1ff4:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    1ff6:	82 2f       	mov	r24, r18
    1ff8:	0e 94 46 10 	call	0x208c	; 0x208c <restore_interrupt_setting>
      return true;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	08 95       	ret

00002006 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    200c:	0e 94 43 10 	call	0x2086	; 0x2086 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2010:	29 81       	ldd	r18, Y+1	; 0x01
    2012:	98 81       	ld	r25, Y
    2014:	29 17       	cp	r18, r25
    2016:	18 f0       	brcs	.+6      	; 0x201e <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2018:	c2 2f       	mov	r28, r18
    201a:	c9 1b       	sub	r28, r25
    201c:	03 c0       	rjmp	.+6      	; 0x2024 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    201e:	ca 81       	ldd	r28, Y+2	; 0x02
    2020:	c2 0f       	add	r28, r18
    2022:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2024:	0e 94 46 10 	call	0x208c	; 0x208c <restore_interrupt_setting>
   return len;
}
    2028:	8c 2f       	mov	r24, r28
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	08 95       	ret

00002030 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2030:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2032:	20 81       	ld	r18, Z
    2034:	86 2f       	mov	r24, r22
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	82 0f       	add	r24, r18
    203a:	91 1d       	adc	r25, r1
    203c:	62 81       	ldd	r22, Z+2	; 0x02
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__divmodhi4>
    2044:	03 80       	ldd	r0, Z+3	; 0x03
    2046:	f4 81       	ldd	r31, Z+4	; 0x04
    2048:	e0 2d       	mov	r30, r0
    204a:	e8 0f       	add	r30, r24
    204c:	f9 1f       	adc	r31, r25
}
    204e:	80 81       	ld	r24, Z
    2050:	08 95       	ret

00002052 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2052:	1f 93       	push	r17
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	ec 01       	movw	r28, r24
    205a:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    205c:	0e 94 43 10 	call	0x2086	; 0x2086 <store_and_clear_interrupt>
    2060:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2062:	88 81       	ld	r24, Y
    2064:	21 2f       	mov	r18, r17
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	28 0f       	add	r18, r24
    206a:	31 1d       	adc	r19, r1
    206c:	6a 81       	ldd	r22, Y+2	; 0x02
    206e:	c9 01       	movw	r24, r18
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__divmodhi4>
    2076:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2078:	84 2f       	mov	r24, r20
    207a:	0e 94 46 10 	call	0x208c	; 0x208c <restore_interrupt_setting>
}
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	08 95       	ret

00002086 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2086:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2088:	f8 94       	cli
   return sreg;
}
    208a:	08 95       	ret

0000208c <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    208c:	8f bf       	out	0x3f, r24	; 63
}
    208e:	08 95       	ret

00002090 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2090:	88 1f       	adc	r24, r24
    2092:	88 27       	eor	r24, r24
    2094:	88 1f       	adc	r24, r24
    2096:	08 95       	ret

00002098 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	88 3f       	cpi	r24, 0xF8	; 248
    209c:	08 f4       	brcc	.+2      	; 0x20a0 <midi_is_realtime+0x8>
    209e:	90 e0       	ldi	r25, 0x00	; 0
}
    20a0:	89 2f       	mov	r24, r25
    20a2:	08 95       	ret

000020a4 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	20 7f       	andi	r18, 0xF0	; 240
    20aa:	30 70       	andi	r19, 0x00	; 0
    20ac:	20 3c       	cpi	r18, 0xC0	; 192
    20ae:	31 05       	cpc	r19, r1
    20b0:	e9 f1       	breq	.+122    	; 0x212c <midi_packet_length+0x88>
    20b2:	21 3c       	cpi	r18, 0xC1	; 193
    20b4:	31 05       	cpc	r19, r1
    20b6:	8c f4       	brge	.+34     	; 0x20da <midi_packet_length+0x36>
    20b8:	20 39       	cpi	r18, 0x90	; 144
    20ba:	31 05       	cpc	r19, r1
    20bc:	e1 f0       	breq	.+56     	; 0x20f6 <midi_packet_length+0x52>
    20be:	21 39       	cpi	r18, 0x91	; 145
    20c0:	31 05       	cpc	r19, r1
    20c2:	24 f4       	brge	.+8      	; 0x20cc <midi_packet_length+0x28>
    20c4:	20 38       	cpi	r18, 0x80	; 128
    20c6:	31 05       	cpc	r19, r1
    20c8:	79 f5       	brne	.+94     	; 0x2128 <midi_packet_length+0x84>
    20ca:	15 c0       	rjmp	.+42     	; 0x20f6 <midi_packet_length+0x52>
    20cc:	20 3a       	cpi	r18, 0xA0	; 160
    20ce:	31 05       	cpc	r19, r1
    20d0:	91 f0       	breq	.+36     	; 0x20f6 <midi_packet_length+0x52>
    20d2:	20 3b       	cpi	r18, 0xB0	; 176
    20d4:	31 05       	cpc	r19, r1
    20d6:	41 f5       	brne	.+80     	; 0x2128 <midi_packet_length+0x84>
    20d8:	0e c0       	rjmp	.+28     	; 0x20f6 <midi_packet_length+0x52>
    20da:	20 3e       	cpi	r18, 0xE0	; 224
    20dc:	31 05       	cpc	r19, r1
    20de:	59 f0       	breq	.+22     	; 0x20f6 <midi_packet_length+0x52>
    20e0:	21 3e       	cpi	r18, 0xE1	; 225
    20e2:	31 05       	cpc	r19, r1
    20e4:	24 f4       	brge	.+8      	; 0x20ee <midi_packet_length+0x4a>
    20e6:	20 3d       	cpi	r18, 0xD0	; 208
    20e8:	31 05       	cpc	r19, r1
    20ea:	f1 f4       	brne	.+60     	; 0x2128 <midi_packet_length+0x84>
    20ec:	1f c0       	rjmp	.+62     	; 0x212c <midi_packet_length+0x88>
    20ee:	20 3f       	cpi	r18, 0xF0	; 240
    20f0:	31 05       	cpc	r19, r1
    20f2:	d1 f4       	brne	.+52     	; 0x2128 <midi_packet_length+0x84>
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    20f6:	83 e0       	ldi	r24, 0x03	; 3
    20f8:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    20fa:	86 3f       	cpi	r24, 0xF6	; 246
    20fc:	79 f0       	breq	.+30     	; 0x211c <midi_packet_length+0x78>
    20fe:	87 3f       	cpi	r24, 0xF7	; 247
    2100:	38 f4       	brcc	.+14     	; 0x2110 <midi_packet_length+0x6c>
    2102:	82 3f       	cpi	r24, 0xF2	; 242
    2104:	a9 f0       	breq	.+42     	; 0x2130 <midi_packet_length+0x8c>
    2106:	83 3f       	cpi	r24, 0xF3	; 243
    2108:	59 f0       	breq	.+22     	; 0x2120 <midi_packet_length+0x7c>
    210a:	81 3f       	cpi	r24, 0xF1	; 241
    210c:	59 f4       	brne	.+22     	; 0x2124 <midi_packet_length+0x80>
    210e:	08 c0       	rjmp	.+16     	; 0x2120 <midi_packet_length+0x7c>
    2110:	88 3f       	cpi	r24, 0xF8	; 248
    2112:	40 f0       	brcs	.+16     	; 0x2124 <midi_packet_length+0x80>
    2114:	8d 3f       	cpi	r24, 0xFD	; 253
    2116:	10 f0       	brcs	.+4      	; 0x211c <midi_packet_length+0x78>
    2118:	8e 3f       	cpi	r24, 0xFE	; 254
    211a:	20 f0       	brcs	.+8      	; 0x2124 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    212c:	82 e0       	ldi	r24, 0x02	; 2
    212e:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2130:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2132:	08 95       	ret

00002134 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2134:	0f 93       	push	r16
    2136:	34 2f       	mov	r19, r20
    2138:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    213a:	46 2f       	mov	r20, r22
    213c:	4f 70       	andi	r20, 0x0F	; 15
    213e:	40 6b       	ori	r20, 0xB0	; 176
    2140:	23 2f       	mov	r18, r19
    2142:	2f 77       	andi	r18, 0x7F	; 127
    2144:	0f 77       	andi	r16, 0x7F	; 127
    2146:	dc 01       	movw	r26, r24
    2148:	ed 91       	ld	r30, X+
    214a:	fc 91       	ld	r31, X
    214c:	63 e0       	ldi	r22, 0x03	; 3
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2152:	0f 91       	pop	r16
    2154:	08 95       	ret

00002156 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2156:	0f 93       	push	r16
    2158:	34 2f       	mov	r19, r20
    215a:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    215c:	46 2f       	mov	r20, r22
    215e:	4f 70       	andi	r20, 0x0F	; 15
    2160:	40 69       	ori	r20, 0x90	; 144
    2162:	23 2f       	mov	r18, r19
    2164:	2f 77       	andi	r18, 0x7F	; 127
    2166:	0f 77       	andi	r16, 0x7F	; 127
    2168:	dc 01       	movw	r26, r24
    216a:	ed 91       	ld	r30, X+
    216c:	fc 91       	ld	r31, X
    216e:	63 e0       	ldi	r22, 0x03	; 3
    2170:	70 e0       	ldi	r23, 0x00	; 0
    2172:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2174:	0f 91       	pop	r16
    2176:	08 95       	ret

00002178 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2178:	0f 93       	push	r16
    217a:	34 2f       	mov	r19, r20
    217c:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    217e:	46 2f       	mov	r20, r22
    2180:	4f 70       	andi	r20, 0x0F	; 15
    2182:	40 68       	ori	r20, 0x80	; 128
    2184:	23 2f       	mov	r18, r19
    2186:	2f 77       	andi	r18, 0x7F	; 127
    2188:	0f 77       	andi	r16, 0x7F	; 127
    218a:	dc 01       	movw	r26, r24
    218c:	ed 91       	ld	r30, X+
    218e:	fc 91       	ld	r31, X
    2190:	63 e0       	ldi	r22, 0x03	; 3
    2192:	70 e0       	ldi	r23, 0x00	; 0
    2194:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2196:	0f 91       	pop	r16
    2198:	08 95       	ret

0000219a <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    219a:	0f 93       	push	r16
    219c:	34 2f       	mov	r19, r20
    219e:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    21a0:	46 2f       	mov	r20, r22
    21a2:	4f 70       	andi	r20, 0x0F	; 15
    21a4:	40 6a       	ori	r20, 0xA0	; 160
    21a6:	23 2f       	mov	r18, r19
    21a8:	2f 77       	andi	r18, 0x7F	; 127
    21aa:	0f 77       	andi	r16, 0x7F	; 127
    21ac:	dc 01       	movw	r26, r24
    21ae:	ed 91       	ld	r30, X+
    21b0:	fc 91       	ld	r31, X
    21b2:	63 e0       	ldi	r22, 0x03	; 3
    21b4:	70 e0       	ldi	r23, 0x00	; 0
    21b6:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    21b8:	0f 91       	pop	r16
    21ba:	08 95       	ret

000021bc <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    21bc:	0f 93       	push	r16
    21be:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    21c0:	20 e2       	ldi	r18, 0x20	; 32
    21c2:	40 30       	cpi	r20, 0x00	; 0
    21c4:	52 07       	cpc	r21, r18
    21c6:	44 f4       	brge	.+16     	; 0x21d8 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    21c8:	a0 ee       	ldi	r26, 0xE0	; 224
    21ca:	40 30       	cpi	r20, 0x00	; 0
    21cc:	5a 07       	cpc	r21, r26
    21ce:	3c f0       	brlt	.+14     	; 0x21de <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    21d0:	8a 01       	movw	r16, r20
    21d2:	00 50       	subi	r16, 0x00	; 0
    21d4:	10 4e       	sbci	r17, 0xE0	; 224
    21d6:	05 c0       	rjmp	.+10     	; 0x21e2 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    21d8:	0f ef       	ldi	r16, 0xFF	; 255
    21da:	1f e3       	ldi	r17, 0x3F	; 63
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    21de:	00 e0       	ldi	r16, 0x00	; 0
    21e0:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    21e2:	46 2f       	mov	r20, r22
    21e4:	4f 70       	andi	r20, 0x0F	; 15
    21e6:	40 6e       	ori	r20, 0xE0	; 224
    21e8:	20 2f       	mov	r18, r16
    21ea:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    21ec:	00 0f       	add	r16, r16
    21ee:	01 2f       	mov	r16, r17
    21f0:	00 1f       	adc	r16, r16
    21f2:	11 0b       	sbc	r17, r17
    21f4:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    21f6:	0f 77       	andi	r16, 0x7F	; 127
    21f8:	dc 01       	movw	r26, r24
    21fa:	ed 91       	ld	r30, X+
    21fc:	fc 91       	ld	r31, X
    21fe:	63 e0       	ldi	r22, 0x03	; 3
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	08 95       	ret

0000220a <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    220a:	0f 93       	push	r16
    220c:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    220e:	46 2f       	mov	r20, r22
    2210:	4f 70       	andi	r20, 0x0F	; 15
    2212:	40 6c       	ori	r20, 0xC0	; 192
    2214:	2f 77       	andi	r18, 0x7F	; 127
    2216:	dc 01       	movw	r26, r24
    2218:	ed 91       	ld	r30, X+
    221a:	fc 91       	ld	r31, X
    221c:	62 e0       	ldi	r22, 0x02	; 2
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	00 e0       	ldi	r16, 0x00	; 0
    2222:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2224:	0f 91       	pop	r16
    2226:	08 95       	ret

00002228 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2228:	0f 93       	push	r16
    222a:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    222c:	46 2f       	mov	r20, r22
    222e:	4f 70       	andi	r20, 0x0F	; 15
    2230:	40 6d       	ori	r20, 0xD0	; 208
    2232:	2f 77       	andi	r18, 0x7F	; 127
    2234:	dc 01       	movw	r26, r24
    2236:	ed 91       	ld	r30, X+
    2238:	fc 91       	ld	r31, X
    223a:	62 e0       	ldi	r22, 0x02	; 2
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	00 e0       	ldi	r16, 0x00	; 0
    2240:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2242:	0f 91       	pop	r16
    2244:	08 95       	ret

00002246 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2246:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2248:	dc 01       	movw	r26, r24
    224a:	ed 91       	ld	r30, X+
    224c:	fc 91       	ld	r31, X
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	70 e0       	ldi	r23, 0x00	; 0
    2252:	48 ef       	ldi	r20, 0xF8	; 248
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	00 e0       	ldi	r16, 0x00	; 0
    2258:	09 95       	icall
}
    225a:	0f 91       	pop	r16
    225c:	08 95       	ret

0000225e <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    225e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2260:	dc 01       	movw	r26, r24
    2262:	ed 91       	ld	r30, X+
    2264:	fc 91       	ld	r31, X
    2266:	61 e0       	ldi	r22, 0x01	; 1
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	49 ef       	ldi	r20, 0xF9	; 249
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	00 e0       	ldi	r16, 0x00	; 0
    2270:	09 95       	icall
}
    2272:	0f 91       	pop	r16
    2274:	08 95       	ret

00002276 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2276:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2278:	dc 01       	movw	r26, r24
    227a:	ed 91       	ld	r30, X+
    227c:	fc 91       	ld	r31, X
    227e:	61 e0       	ldi	r22, 0x01	; 1
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	4a ef       	ldi	r20, 0xFA	; 250
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	00 e0       	ldi	r16, 0x00	; 0
    2288:	09 95       	icall
}
    228a:	0f 91       	pop	r16
    228c:	08 95       	ret

0000228e <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    228e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    2290:	dc 01       	movw	r26, r24
    2292:	ed 91       	ld	r30, X+
    2294:	fc 91       	ld	r31, X
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	4b ef       	ldi	r20, 0xFB	; 251
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	00 e0       	ldi	r16, 0x00	; 0
    22a0:	09 95       	icall
}
    22a2:	0f 91       	pop	r16
    22a4:	08 95       	ret

000022a6 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    22a6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    22a8:	dc 01       	movw	r26, r24
    22aa:	ed 91       	ld	r30, X+
    22ac:	fc 91       	ld	r31, X
    22ae:	61 e0       	ldi	r22, 0x01	; 1
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	4c ef       	ldi	r20, 0xFC	; 252
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	00 e0       	ldi	r16, 0x00	; 0
    22b8:	09 95       	icall
}
    22ba:	0f 91       	pop	r16
    22bc:	08 95       	ret

000022be <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    22be:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    22c0:	dc 01       	movw	r26, r24
    22c2:	ed 91       	ld	r30, X+
    22c4:	fc 91       	ld	r31, X
    22c6:	61 e0       	ldi	r22, 0x01	; 1
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	4e ef       	ldi	r20, 0xFE	; 254
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	00 e0       	ldi	r16, 0x00	; 0
    22d0:	09 95       	icall
}
    22d2:	0f 91       	pop	r16
    22d4:	08 95       	ret

000022d6 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    22d6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    22d8:	dc 01       	movw	r26, r24
    22da:	ed 91       	ld	r30, X+
    22dc:	fc 91       	ld	r31, X
    22de:	61 e0       	ldi	r22, 0x01	; 1
    22e0:	70 e0       	ldi	r23, 0x00	; 0
    22e2:	4f ef       	ldi	r20, 0xFF	; 255
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	00 e0       	ldi	r16, 0x00	; 0
    22e8:	09 95       	icall
}
    22ea:	0f 91       	pop	r16
    22ec:	08 95       	ret

000022ee <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    22ee:	0f 93       	push	r16
   device->send_func(device, 2,
    22f0:	26 2f       	mov	r18, r22
    22f2:	2f 77       	andi	r18, 0x7F	; 127
    22f4:	dc 01       	movw	r26, r24
    22f6:	ed 91       	ld	r30, X+
    22f8:	fc 91       	ld	r31, X
    22fa:	62 e0       	ldi	r22, 0x02	; 2
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	41 ef       	ldi	r20, 0xF1	; 241
    2300:	00 e0       	ldi	r16, 0x00	; 0
    2302:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2304:	0f 91       	pop	r16
    2306:	08 95       	ret

00002308 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2308:	0f 93       	push	r16
    230a:	1f 93       	push	r17
   device->send_func(device, 3,
    230c:	26 2f       	mov	r18, r22
    230e:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2310:	8b 01       	movw	r16, r22
    2312:	00 0f       	add	r16, r16
    2314:	01 2f       	mov	r16, r17
    2316:	00 1f       	adc	r16, r16
    2318:	11 0b       	sbc	r17, r17
    231a:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    231c:	0f 77       	andi	r16, 0x7F	; 127
    231e:	dc 01       	movw	r26, r24
    2320:	ed 91       	ld	r30, X+
    2322:	fc 91       	ld	r31, X
    2324:	63 e0       	ldi	r22, 0x03	; 3
    2326:	70 e0       	ldi	r23, 0x00	; 0
    2328:	42 ef       	ldi	r20, 0xF2	; 242
    232a:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    232c:	1f 91       	pop	r17
    232e:	0f 91       	pop	r16
    2330:	08 95       	ret

00002332 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2332:	0f 93       	push	r16
   device->send_func(device, 2,
    2334:	26 2f       	mov	r18, r22
    2336:	2f 77       	andi	r18, 0x7F	; 127
    2338:	dc 01       	movw	r26, r24
    233a:	ed 91       	ld	r30, X+
    233c:	fc 91       	ld	r31, X
    233e:	62 e0       	ldi	r22, 0x02	; 2
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	43 ef       	ldi	r20, 0xF3	; 243
    2344:	00 e0       	ldi	r16, 0x00	; 0
    2346:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2348:	0f 91       	pop	r16
    234a:	08 95       	ret

0000234c <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    234c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    234e:	dc 01       	movw	r26, r24
    2350:	ed 91       	ld	r30, X+
    2352:	fc 91       	ld	r31, X
    2354:	61 e0       	ldi	r22, 0x01	; 1
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	46 ef       	ldi	r20, 0xF6	; 246
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	00 e0       	ldi	r16, 0x00	; 0
    235e:	09 95       	icall
}
    2360:	0f 91       	pop	r16
    2362:	08 95       	ret

00002364 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2364:	0f 93       	push	r16
    2366:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2368:	dc 01       	movw	r26, r24
    236a:	ed 91       	ld	r30, X+
    236c:	fc 91       	ld	r31, X
    236e:	61 e0       	ldi	r22, 0x01	; 1
    2370:	70 e0       	ldi	r23, 0x00	; 0
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	00 e0       	ldi	r16, 0x00	; 0
    2376:	09 95       	icall
}
    2378:	0f 91       	pop	r16
    237a:	08 95       	ret

0000237c <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    237c:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    237e:	dc 01       	movw	r26, r24
    2380:	ed 91       	ld	r30, X+
    2382:	fc 91       	ld	r31, X
    2384:	09 95       	icall
}
    2386:	0f 91       	pop	r16
    2388:	08 95       	ret

0000238a <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    238a:	6f 92       	push	r6
    238c:	7f 92       	push	r7
    238e:	8f 92       	push	r8
    2390:	9f 92       	push	r9
    2392:	af 92       	push	r10
    2394:	bf 92       	push	r11
    2396:	cf 92       	push	r12
    2398:	df 92       	push	r13
    239a:	ef 92       	push	r14
    239c:	ff 92       	push	r15
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <midi_send_array+0x1e>
    23a8:	0f 92       	push	r0
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	4c 01       	movw	r8, r24
    23b0:	6b 01       	movw	r12, r22
    23b2:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    23b4:	61 15       	cp	r22, r1
    23b6:	71 05       	cpc	r23, r1
    23b8:	41 f1       	breq	.+80     	; 0x240a <midi_send_array+0x80>
    23ba:	ee 24       	eor	r14, r14
    23bc:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    23be:	0f 2e       	mov	r0, r31
    23c0:	f3 e0       	ldi	r31, 0x03	; 3
    23c2:	6f 2e       	mov	r6, r31
    23c4:	77 24       	eor	r7, r7
    23c6:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    23c8:	19 82       	std	Y+1, r1	; 0x01
    23ca:	1a 82       	std	Y+2, r1	; 0x02
    23cc:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    23ce:	86 01       	movw	r16, r12
    23d0:	0e 19       	sub	r16, r14
    23d2:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    23d4:	04 30       	cpi	r16, 0x04	; 4
    23d6:	11 05       	cpc	r17, r1
    23d8:	08 f0       	brcs	.+2      	; 0x23dc <midi_send_array+0x52>
    23da:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    23dc:	b5 01       	movw	r22, r10
    23de:	6e 0d       	add	r22, r14
    23e0:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    23e2:	ce 01       	movw	r24, r28
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	40 2f       	mov	r20, r16
    23e8:	51 2f       	mov	r21, r17
    23ea:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    23ee:	c4 01       	movw	r24, r8
    23f0:	b8 01       	movw	r22, r16
    23f2:	49 81       	ldd	r20, Y+1	; 0x01
    23f4:	2a 81       	ldd	r18, Y+2	; 0x02
    23f6:	0b 81       	ldd	r16, Y+3	; 0x03
    23f8:	0e 94 be 11 	call	0x237c	; 0x237c <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    23fc:	83 e0       	ldi	r24, 0x03	; 3
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	e8 0e       	add	r14, r24
    2402:	f9 1e       	adc	r15, r25
    2404:	ec 14       	cp	r14, r12
    2406:	fd 04       	cpc	r15, r13
    2408:	f8 f2       	brcs	.-66     	; 0x23c8 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	ff 90       	pop	r15
    241a:	ef 90       	pop	r14
    241c:	df 90       	pop	r13
    241e:	cf 90       	pop	r12
    2420:	bf 90       	pop	r11
    2422:	af 90       	pop	r10
    2424:	9f 90       	pop	r9
    2426:	8f 90       	pop	r8
    2428:	7f 90       	pop	r7
    242a:	6f 90       	pop	r6
    242c:	08 95       	ret

0000242e <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    242e:	fc 01       	movw	r30, r24
    2430:	73 83       	std	Z+3, r23	; 0x03
    2432:	62 83       	std	Z+2, r22	; 0x02
}
    2434:	08 95       	ret

00002436 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2436:	fc 01       	movw	r30, r24
    2438:	75 83       	std	Z+5, r23	; 0x05
    243a:	64 83       	std	Z+4, r22	; 0x04
}
    243c:	08 95       	ret

0000243e <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    243e:	fc 01       	movw	r30, r24
    2440:	77 83       	std	Z+7, r23	; 0x07
    2442:	66 83       	std	Z+6, r22	; 0x06
}
    2444:	08 95       	ret

00002446 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2446:	fc 01       	movw	r30, r24
    2448:	71 87       	std	Z+9, r23	; 0x09
    244a:	60 87       	std	Z+8, r22	; 0x08
}
    244c:	08 95       	ret

0000244e <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    244e:	fc 01       	movw	r30, r24
    2450:	73 87       	std	Z+11, r23	; 0x0b
    2452:	62 87       	std	Z+10, r22	; 0x0a
}
    2454:	08 95       	ret

00002456 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2456:	fc 01       	movw	r30, r24
    2458:	75 87       	std	Z+13, r23	; 0x0d
    245a:	64 87       	std	Z+12, r22	; 0x0c
}
    245c:	08 95       	ret

0000245e <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    245e:	fc 01       	movw	r30, r24
    2460:	77 87       	std	Z+15, r23	; 0x0f
    2462:	66 87       	std	Z+14, r22	; 0x0e
}
    2464:	08 95       	ret

00002466 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2466:	fc 01       	movw	r30, r24
    2468:	71 8b       	std	Z+17, r23	; 0x11
    246a:	60 8b       	std	Z+16, r22	; 0x10
}
    246c:	08 95       	ret

0000246e <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    246e:	fc 01       	movw	r30, r24
    2470:	73 8b       	std	Z+19, r23	; 0x13
    2472:	62 8b       	std	Z+18, r22	; 0x12
}
    2474:	08 95       	ret

00002476 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    2476:	fc 01       	movw	r30, r24
    2478:	75 8b       	std	Z+21, r23	; 0x15
    247a:	64 8b       	std	Z+20, r22	; 0x14
}
    247c:	08 95       	ret

0000247e <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    247e:	fc 01       	movw	r30, r24
    2480:	77 8b       	std	Z+23, r23	; 0x17
    2482:	66 8b       	std	Z+22, r22	; 0x16
}
    2484:	08 95       	ret

00002486 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2486:	fc 01       	movw	r30, r24
    2488:	71 8f       	std	Z+25, r23	; 0x19
    248a:	60 8f       	std	Z+24, r22	; 0x18
}
    248c:	08 95       	ret

0000248e <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    248e:	fc 01       	movw	r30, r24
    2490:	73 8f       	std	Z+27, r23	; 0x1b
    2492:	62 8f       	std	Z+26, r22	; 0x1a
}
    2494:	08 95       	ret

00002496 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2496:	fc 01       	movw	r30, r24
    2498:	75 8f       	std	Z+29, r23	; 0x1d
    249a:	64 8f       	std	Z+28, r22	; 0x1c
}
    249c:	08 95       	ret

0000249e <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    249e:	fc 01       	movw	r30, r24
    24a0:	77 8f       	std	Z+31, r23	; 0x1f
    24a2:	66 8f       	std	Z+30, r22	; 0x1e
}
    24a4:	08 95       	ret

000024a6 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    24ac:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    24ae:	1f a2       	lds	r17, 0x9f
    24b0:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    24b2:	bc 01       	movw	r22, r24
    24b4:	68 5d       	subi	r22, 0xD8	; 216
    24b6:	7f 4f       	sbci	r23, 0xFF	; 255
    24b8:	88 51       	subi	r24, 0x18	; 24
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
    24bc:	40 ec       	ldi	r20, 0xC0	; 192
    24be:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    24c2:	1b 82       	std	Y+3, r1	; 0x03
    24c4:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    24c6:	1d 82       	std	Y+5, r1	; 0x05
    24c8:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    24ca:	1f 82       	std	Y+7, r1	; 0x07
    24cc:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    24ce:	19 86       	std	Y+9, r1	; 0x09
    24d0:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    24d2:	1b 86       	std	Y+11, r1	; 0x0b
    24d4:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    24d6:	1d 86       	std	Y+13, r1	; 0x0d
    24d8:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    24da:	1f 86       	std	Y+15, r1	; 0x0f
    24dc:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    24de:	19 8a       	std	Y+17, r1	; 0x11
    24e0:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    24e2:	1b 8a       	std	Y+19, r1	; 0x13
    24e4:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    24e6:	1d 8a       	std	Y+21, r1	; 0x15
    24e8:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    24ea:	1f 8a       	std	Y+23, r1	; 0x17
    24ec:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    24ee:	19 8e       	std	Y+25, r1	; 0x19
    24f0:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    24f2:	1b 8e       	std	Y+27, r1	; 0x1b
    24f4:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    24f6:	1d 8e       	std	Y+29, r1	; 0x1d
    24f8:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    24fa:	1f 8e       	std	Y+31, r1	; 0x1f
    24fc:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    24fe:	19 a2       	lds	r17, 0x99
    2500:	18 a2       	lds	r17, 0x98
}
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	08 95       	ret

00002508 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2516:	66 23       	and	r22, r22
    2518:	99 f0       	breq	.+38     	; 0x2540 <midi_device_input+0x38>
    251a:	04 2f       	mov	r16, r20
    251c:	15 2f       	mov	r17, r21
    251e:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    2520:	0f 2e       	mov	r0, r31
    2522:	f8 ee       	ldi	r31, 0xE8	; 232
    2524:	ef 2e       	mov	r14, r31
    2526:	ff 24       	eor	r15, r15
    2528:	f0 2d       	mov	r31, r0
    252a:	e8 0e       	add	r14, r24
    252c:	f9 1e       	adc	r15, r25
    252e:	f8 01       	movw	r30, r16
    2530:	61 91       	ld	r22, Z+
    2532:	8f 01       	movw	r16, r30
    2534:	c7 01       	movw	r24, r14
    2536:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    253a:	cf 5f       	subi	r28, 0xFF	; 255
    253c:	cd 17       	cp	r28, r29
    253e:	b9 f7       	brne	.-18     	; 0x252e <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	ff 90       	pop	r15
    254a:	ef 90       	pop	r14
    254c:	08 95       	ret

0000254e <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    254e:	fc 01       	movw	r30, r24
    2550:	71 83       	std	Z+1, r23	; 0x01
    2552:	60 83       	st	Z, r22
}
    2554:	08 95       	ret

00002556 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    2556:	fc 01       	movw	r30, r24
    2558:	71 a3       	lds	r23, 0x51
    255a:	60 a3       	lds	r22, 0x50
}
    255c:	08 95       	ret

0000255e <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    255e:	af 92       	push	r10
    2560:	bf 92       	push	r11
    2562:	cf 92       	push	r12
    2564:	df 92       	push	r13
    2566:	ef 92       	push	r14
    2568:	ff 92       	push	r15
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	00 d0       	rcall	.+0      	; 0x2574 <midi_input_callbacks+0x16>
    2574:	0f 92       	push	r0
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	6c 01       	movw	r12, r24
    257c:	5b 01       	movw	r10, r22
    257e:	f4 2e       	mov	r15, r20
    2580:	e2 2e       	mov	r14, r18
    2582:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2584:	dc 01       	movw	r26, r24
    2586:	95 96       	adiw	r26, 0x25	; 37
    2588:	8c 91       	ld	r24, X
    258a:	95 97       	sbiw	r26, 0x25	; 37
    258c:	84 30       	cpi	r24, 0x04	; 4
    258e:	e9 f4       	brne	.+58     	; 0x25ca <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    2590:	5a 96       	adiw	r26, 0x1a	; 26
    2592:	ed 91       	ld	r30, X+
    2594:	fc 91       	ld	r31, X
    2596:	5b 97       	sbiw	r26, 0x1b	; 27
    2598:	30 97       	sbiw	r30, 0x00	; 0
    259a:	09 f4       	brne	.+2      	; 0x259e <midi_input_callbacks+0x40>
    259c:	ee c0       	rjmp	.+476    	; 0x277a <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    259e:	cb 01       	movw	r24, r22
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	63 e0       	ldi	r22, 0x03	; 3
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodhi4>
    25aa:	cb 01       	movw	r24, r22
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	68 0f       	add	r22, r24
    25b2:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    25b4:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    25b6:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    25b8:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    25ba:	4a 2d       	mov	r20, r10
    25bc:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    25be:	c6 01       	movw	r24, r12
    25c0:	9e 01       	movw	r18, r28
    25c2:	2f 5f       	subi	r18, 0xFF	; 255
    25c4:	3f 4f       	sbci	r19, 0xFF	; 255
    25c6:	09 95       	icall
    25c8:	c8 c0       	rjmp	.+400    	; 0x275a <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    25ca:	62 30       	cpi	r22, 0x02	; 2
    25cc:	71 05       	cpc	r23, r1
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <midi_input_callbacks+0x74>
    25d0:	5f c0       	rjmp	.+190    	; 0x2690 <midi_input_callbacks+0x132>
    25d2:	63 30       	cpi	r22, 0x03	; 3
    25d4:	71 05       	cpc	r23, r1
    25d6:	29 f0       	breq	.+10     	; 0x25e2 <midi_input_callbacks+0x84>
    25d8:	61 30       	cpi	r22, 0x01	; 1
    25da:	71 05       	cpc	r23, r1
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <midi_input_callbacks+0x82>
    25de:	b3 c0       	rjmp	.+358    	; 0x2746 <midi_input_callbacks+0x1e8>
    25e0:	99 c0       	rjmp	.+306    	; 0x2714 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    25e2:	84 2f       	mov	r24, r20
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	80 7f       	andi	r24, 0xF0	; 240
    25e8:	90 70       	andi	r25, 0x00	; 0
    25ea:	80 3a       	cpi	r24, 0xA0	; 160
    25ec:	91 05       	cpc	r25, r1
    25ee:	29 f1       	breq	.+74     	; 0x263a <midi_input_callbacks+0xdc>
    25f0:	81 3a       	cpi	r24, 0xA1	; 161
    25f2:	91 05       	cpc	r25, r1
    25f4:	3c f4       	brge	.+14     	; 0x2604 <midi_input_callbacks+0xa6>
    25f6:	80 38       	cpi	r24, 0x80	; 128
    25f8:	91 05       	cpc	r25, r1
    25fa:	c9 f0       	breq	.+50     	; 0x262e <midi_input_callbacks+0xd0>
    25fc:	80 39       	cpi	r24, 0x90	; 144
    25fe:	91 05       	cpc	r25, r1
    2600:	91 f5       	brne	.+100    	; 0x2666 <midi_input_callbacks+0x108>
    2602:	0f c0       	rjmp	.+30     	; 0x2622 <midi_input_callbacks+0xc4>
    2604:	80 3e       	cpi	r24, 0xE0	; 224
    2606:	91 05       	cpc	r25, r1
    2608:	f1 f0       	breq	.+60     	; 0x2646 <midi_input_callbacks+0xe8>
    260a:	80 3f       	cpi	r24, 0xF0	; 240
    260c:	91 05       	cpc	r25, r1
    260e:	09 f1       	breq	.+66     	; 0x2652 <midi_input_callbacks+0xf4>
    2610:	80 3b       	cpi	r24, 0xB0	; 176
    2612:	91 05       	cpc	r25, r1
    2614:	41 f5       	brne	.+80     	; 0x2666 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2616:	d6 01       	movw	r26, r12
    2618:	12 96       	adiw	r26, 0x02	; 2
    261a:	ed 91       	ld	r30, X+
    261c:	fc 91       	ld	r31, X
    261e:	13 97       	sbiw	r26, 0x03	; 3
              break;
    2620:	24 c0       	rjmp	.+72     	; 0x266a <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    2622:	d6 01       	movw	r26, r12
    2624:	14 96       	adiw	r26, 0x04	; 4
    2626:	ed 91       	ld	r30, X+
    2628:	fc 91       	ld	r31, X
    262a:	15 97       	sbiw	r26, 0x05	; 5
              break;
    262c:	1e c0       	rjmp	.+60     	; 0x266a <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    262e:	d6 01       	movw	r26, r12
    2630:	16 96       	adiw	r26, 0x06	; 6
    2632:	ed 91       	ld	r30, X+
    2634:	fc 91       	ld	r31, X
    2636:	17 97       	sbiw	r26, 0x07	; 7
              break;
    2638:	18 c0       	rjmp	.+48     	; 0x266a <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    263a:	d6 01       	movw	r26, r12
    263c:	18 96       	adiw	r26, 0x08	; 8
    263e:	ed 91       	ld	r30, X+
    2640:	fc 91       	ld	r31, X
    2642:	19 97       	sbiw	r26, 0x09	; 9
              break;
    2644:	12 c0       	rjmp	.+36     	; 0x266a <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    2646:	d6 01       	movw	r26, r12
    2648:	1a 96       	adiw	r26, 0x0a	; 10
    264a:	ed 91       	ld	r30, X+
    264c:	fc 91       	ld	r31, X
    264e:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    2650:	0c c0       	rjmp	.+24     	; 0x266a <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    2652:	b2 ef       	ldi	r27, 0xF2	; 242
    2654:	4b 17       	cp	r20, r27
    2656:	09 f0       	breq	.+2      	; 0x265a <midi_input_callbacks+0xfc>
    2658:	90 c0       	rjmp	.+288    	; 0x277a <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    265a:	d6 01       	movw	r26, r12
    265c:	1c 96       	adiw	r26, 0x0c	; 12
    265e:	ed 91       	ld	r30, X+
    2660:	fc 91       	ld	r31, X
    2662:	1d 97       	sbiw	r26, 0x0d	; 13
    2664:	02 c0       	rjmp	.+4      	; 0x266a <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    2666:	e0 e0       	ldi	r30, 0x00	; 0
    2668:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    266a:	30 97       	sbiw	r30, 0x00	; 0
    266c:	09 f4       	brne	.+2      	; 0x2670 <midi_input_callbacks+0x112>
    266e:	85 c0       	rjmp	.+266    	; 0x277a <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    2670:	b2 ef       	ldi	r27, 0xF2	; 242
    2672:	fb 16       	cp	r15, r27
    2674:	31 f4       	brne	.+12     	; 0x2682 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    2676:	c6 01       	movw	r24, r12
    2678:	62 ef       	ldi	r22, 0xF2	; 242
    267a:	4e 2d       	mov	r20, r14
    267c:	21 2f       	mov	r18, r17
    267e:	09 95       	icall
    2680:	6c c0       	rjmp	.+216    	; 0x275a <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    2682:	6f 2d       	mov	r22, r15
    2684:	6f 70       	andi	r22, 0x0F	; 15
    2686:	c6 01       	movw	r24, r12
    2688:	4e 2d       	mov	r20, r14
    268a:	21 2f       	mov	r18, r17
    268c:	09 95       	icall
    268e:	65 c0       	rjmp	.+202    	; 0x275a <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2690:	84 2f       	mov	r24, r20
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	80 7f       	andi	r24, 0xF0	; 240
    2696:	90 70       	andi	r25, 0x00	; 0
    2698:	80 3d       	cpi	r24, 0xD0	; 208
    269a:	91 05       	cpc	r25, r1
    269c:	61 f0       	breq	.+24     	; 0x26b6 <midi_input_callbacks+0x158>
    269e:	80 3f       	cpi	r24, 0xF0	; 240
    26a0:	91 05       	cpc	r25, r1
    26a2:	79 f0       	breq	.+30     	; 0x26c2 <midi_input_callbacks+0x164>
    26a4:	80 3c       	cpi	r24, 0xC0	; 192
    26a6:	91 05       	cpc	r25, r1
    26a8:	f9 f4       	brne	.+62     	; 0x26e8 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    26aa:	d6 01       	movw	r26, r12
    26ac:	1e 96       	adiw	r26, 0x0e	; 14
    26ae:	ed 91       	ld	r30, X+
    26b0:	fc 91       	ld	r31, X
    26b2:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    26b4:	1b c0       	rjmp	.+54     	; 0x26ec <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    26b6:	d6 01       	movw	r26, r12
    26b8:	50 96       	adiw	r26, 0x10	; 16
    26ba:	ed 91       	ld	r30, X+
    26bc:	fc 91       	ld	r31, X
    26be:	51 97       	sbiw	r26, 0x11	; 17
              break;
    26c0:	15 c0       	rjmp	.+42     	; 0x26ec <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    26c2:	b3 ef       	ldi	r27, 0xF3	; 243
    26c4:	4b 17       	cp	r20, r27
    26c6:	31 f4       	brne	.+12     	; 0x26d4 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    26c8:	d6 01       	movw	r26, r12
    26ca:	52 96       	adiw	r26, 0x12	; 18
    26cc:	ed 91       	ld	r30, X+
    26ce:	fc 91       	ld	r31, X
    26d0:	53 97       	sbiw	r26, 0x13	; 19
    26d2:	0c c0       	rjmp	.+24     	; 0x26ec <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    26d4:	b1 ef       	ldi	r27, 0xF1	; 241
    26d6:	4b 17       	cp	r20, r27
    26d8:	09 f0       	breq	.+2      	; 0x26dc <midi_input_callbacks+0x17e>
    26da:	4f c0       	rjmp	.+158    	; 0x277a <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    26dc:	d6 01       	movw	r26, r12
    26de:	54 96       	adiw	r26, 0x14	; 20
    26e0:	ed 91       	ld	r30, X+
    26e2:	fc 91       	ld	r31, X
    26e4:	55 97       	sbiw	r26, 0x15	; 21
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    26e8:	e0 e0       	ldi	r30, 0x00	; 0
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    26ec:	30 97       	sbiw	r30, 0x00	; 0
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <midi_input_callbacks+0x194>
    26f0:	44 c0       	rjmp	.+136    	; 0x277a <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    26f2:	b3 ef       	ldi	r27, 0xF3	; 243
    26f4:	fb 16       	cp	r15, r27
    26f6:	19 f0       	breq	.+6      	; 0x26fe <midi_input_callbacks+0x1a0>
    26f8:	81 ef       	ldi	r24, 0xF1	; 241
    26fa:	f8 16       	cp	r15, r24
    26fc:	29 f4       	brne	.+10     	; 0x2708 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    26fe:	c6 01       	movw	r24, r12
    2700:	6f 2d       	mov	r22, r15
    2702:	4e 2d       	mov	r20, r14
    2704:	09 95       	icall
    2706:	29 c0       	rjmp	.+82     	; 0x275a <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    2708:	6f 2d       	mov	r22, r15
    270a:	6f 70       	andi	r22, 0x0F	; 15
    270c:	c6 01       	movw	r24, r12
    270e:	4e 2d       	mov	r20, r14
    2710:	09 95       	icall
    2712:	23 c0       	rjmp	.+70     	; 0x275a <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2714:	84 2f       	mov	r24, r20
    2716:	0e 94 4c 10 	call	0x2098	; 0x2098 <midi_is_realtime>
    271a:	88 23       	and	r24, r24
    271c:	31 f0       	breq	.+12     	; 0x272a <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    271e:	d6 01       	movw	r26, r12
    2720:	56 96       	adiw	r26, 0x16	; 22
    2722:	ed 91       	ld	r30, X+
    2724:	fc 91       	ld	r31, X
    2726:	57 97       	sbiw	r26, 0x17	; 23
    2728:	08 c0       	rjmp	.+16     	; 0x273a <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    272a:	b6 ef       	ldi	r27, 0xF6	; 246
    272c:	fb 16       	cp	r15, r27
    272e:	29 f5       	brne	.+74     	; 0x277a <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    2730:	d6 01       	movw	r26, r12
    2732:	58 96       	adiw	r26, 0x18	; 24
    2734:	ed 91       	ld	r30, X+
    2736:	fc 91       	ld	r31, X
    2738:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    273a:	30 97       	sbiw	r30, 0x00	; 0
    273c:	f1 f0       	breq	.+60     	; 0x277a <midi_input_callbacks+0x21c>
            func(device, byte0);
    273e:	c6 01       	movw	r24, r12
    2740:	6f 2d       	mov	r22, r15
    2742:	09 95       	icall
    2744:	0a c0       	rjmp	.+20     	; 0x275a <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    2746:	64 30       	cpi	r22, 0x04	; 4
    2748:	71 05       	cpc	r23, r1
    274a:	a8 f4       	brcc	.+42     	; 0x2776 <midi_input_callbacks+0x218>
    274c:	16 c0       	rjmp	.+44     	; 0x277a <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    274e:	c6 01       	movw	r24, r12
    2750:	b5 01       	movw	r22, r10
    2752:	4f 2d       	mov	r20, r15
    2754:	2e 2d       	mov	r18, r14
    2756:	01 2f       	mov	r16, r17
    2758:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    275a:	d6 01       	movw	r26, r12
    275c:	5e 96       	adiw	r26, 0x1e	; 30
    275e:	ed 91       	ld	r30, X+
    2760:	fc 91       	ld	r31, X
    2762:	5f 97       	sbiw	r26, 0x1f	; 31
    2764:	30 97       	sbiw	r30, 0x00	; 0
    2766:	89 f0       	breq	.+34     	; 0x278a <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    2768:	c6 01       	movw	r24, r12
    276a:	b5 01       	movw	r22, r10
    276c:	4f 2d       	mov	r20, r15
    276e:	2e 2d       	mov	r18, r14
    2770:	01 2f       	mov	r16, r17
    2772:	09 95       	icall
    2774:	0a c0       	rjmp	.+20     	; 0x278a <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    2776:	aa 24       	eor	r10, r10
    2778:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    277a:	d6 01       	movw	r26, r12
    277c:	5c 96       	adiw	r26, 0x1c	; 28
    277e:	ed 91       	ld	r30, X+
    2780:	fc 91       	ld	r31, X
    2782:	5d 97       	sbiw	r26, 0x1d	; 29
    2784:	30 97       	sbiw	r30, 0x00	; 0
    2786:	19 f7       	brne	.-58     	; 0x274e <midi_input_callbacks+0x1f0>
    2788:	e8 cf       	rjmp	.-48     	; 0x275a <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	ff 90       	pop	r15
    279a:	ef 90       	pop	r14
    279c:	df 90       	pop	r13
    279e:	cf 90       	pop	r12
    27a0:	bf 90       	pop	r11
    27a2:	af 90       	pop	r10
    27a4:	08 95       	ret

000027a6 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    27a6:	ef 92       	push	r14
    27a8:	ff 92       	push	r15
    27aa:	0f 93       	push	r16
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	7c 01       	movw	r14, r24
    27b2:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    27b4:	86 2f       	mov	r24, r22
    27b6:	0e 94 4c 10 	call	0x2098	; 0x2098 <midi_is_realtime>
    27ba:	88 23       	and	r24, r24
    27bc:	91 f0       	breq	.+36     	; 0x27e2 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    27be:	d7 01       	movw	r26, r14
    27c0:	95 96       	adiw	r26, 0x25	; 37
    27c2:	dc 91       	ld	r29, X
    27c4:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	95 96       	adiw	r26, 0x25	; 37
    27ca:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    27cc:	c7 01       	movw	r24, r14
    27ce:	61 e0       	ldi	r22, 0x01	; 1
    27d0:	70 e0       	ldi	r23, 0x00	; 0
    27d2:	4c 2f       	mov	r20, r28
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	00 e0       	ldi	r16, 0x00	; 0
    27d8:	0e 94 af 12 	call	0x255e	; 0x255e <midi_input_callbacks>
    device->input_state = state;
    27dc:	f7 01       	movw	r30, r14
    27de:	d5 a3       	lds	r29, 0x55
    27e0:	b7 c0       	rjmp	.+366    	; 0x2950 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    27e2:	8c 2f       	mov	r24, r28
    27e4:	0e 94 48 10 	call	0x2090	; 0x2090 <midi_is_statusbyte>
    27e8:	88 23       	and	r24, r24
    27ea:	09 f4       	brne	.+2      	; 0x27ee <midi_process_byte+0x48>
    27ec:	73 c0       	rjmp	.+230    	; 0x28d4 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    27ee:	d7 01       	movw	r26, r14
    27f0:	95 96       	adiw	r26, 0x25	; 37
    27f2:	8c 91       	ld	r24, X
    27f4:	95 97       	sbiw	r26, 0x25	; 37
    27f6:	84 30       	cpi	r24, 0x04	; 4
    27f8:	49 f0       	breq	.+18     	; 0x280c <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    27fa:	92 96       	adiw	r26, 0x22	; 34
    27fc:	cc 93       	st	X, r28
    27fe:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	97 96       	adiw	r26, 0x27	; 39
    2806:	9c 93       	st	X, r25
    2808:	8e 93       	st	-X, r24
    280a:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    280c:	8c 2f       	mov	r24, r28
    280e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <midi_packet_length>
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	41 f0       	breq	.+16     	; 0x2826 <midi_process_byte+0x80>
    2816:	81 30       	cpi	r24, 0x01	; 1
    2818:	00 f1       	brcs	.+64     	; 0x285a <midi_process_byte+0xb4>
    281a:	82 30       	cpi	r24, 0x02	; 2
    281c:	a1 f0       	breq	.+40     	; 0x2846 <midi_process_byte+0xa0>
    281e:	83 30       	cpi	r24, 0x03	; 3
    2820:	09 f0       	breq	.+2      	; 0x2824 <midi_process_byte+0x7e>
    2822:	4f c0       	rjmp	.+158    	; 0x28c2 <midi_process_byte+0x11c>
    2824:	14 c0       	rjmp	.+40     	; 0x284e <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	f7 01       	movw	r30, r14
    282a:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    282c:	c7 01       	movw	r24, r14
    282e:	61 e0       	ldi	r22, 0x01	; 1
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	4c 2f       	mov	r20, r28
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	00 e0       	ldi	r16, 0x00	; 0
    2838:	0e 94 af 12 	call	0x255e	; 0x255e <midi_input_callbacks>
        device->input_state = IDLE;
    283c:	d7 01       	movw	r26, r14
    283e:	95 96       	adiw	r26, 0x25	; 37
    2840:	1c 92       	st	X, r1
    2842:	95 97       	sbiw	r26, 0x25	; 37
        break;
    2844:	85 c0       	rjmp	.+266    	; 0x2950 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	f7 01       	movw	r30, r14
    284a:	85 a3       	lds	r24, 0x55
        break;
    284c:	81 c0       	rjmp	.+258    	; 0x2950 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    284e:	83 e0       	ldi	r24, 0x03	; 3
    2850:	d7 01       	movw	r26, r14
    2852:	95 96       	adiw	r26, 0x25	; 37
    2854:	8c 93       	st	X, r24
    2856:	95 97       	sbiw	r26, 0x25	; 37
        break;
    2858:	7b c0       	rjmp	.+246    	; 0x2950 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    285a:	c0 3f       	cpi	r28, 0xF0	; 240
    285c:	19 f0       	breq	.+6      	; 0x2864 <midi_process_byte+0xbe>
    285e:	c7 3f       	cpi	r28, 0xF7	; 247
    2860:	59 f5       	brne	.+86     	; 0x28b8 <midi_process_byte+0x112>
    2862:	0a c0       	rjmp	.+20     	; 0x2878 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    2864:	84 e0       	ldi	r24, 0x04	; 4
    2866:	f7 01       	movw	r30, r14
    2868:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    286a:	80 ef       	ldi	r24, 0xF0	; 240
    286c:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	97 a3       	lds	r25, 0x57
    2874:	86 a3       	lds	r24, 0x56
            break;
    2876:	6c c0       	rjmp	.+216    	; 0x2950 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    2878:	d7 01       	movw	r26, r14
    287a:	96 96       	adiw	r26, 0x26	; 38
    287c:	2d 91       	ld	r18, X+
    287e:	3c 91       	ld	r19, X
    2880:	97 97       	sbiw	r26, 0x27	; 39
    2882:	c9 01       	movw	r24, r18
    2884:	63 e0       	ldi	r22, 0x03	; 3
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodhi4>
    288c:	f7 01       	movw	r30, r14
    288e:	e8 0f       	add	r30, r24
    2890:	f9 1f       	adc	r31, r25
    2892:	87 ef       	ldi	r24, 0xF7	; 247
    2894:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    2896:	b9 01       	movw	r22, r18
    2898:	6f 5f       	subi	r22, 0xFF	; 255
    289a:	7f 4f       	sbci	r23, 0xFF	; 255
    289c:	f7 01       	movw	r30, r14
    289e:	77 a3       	lds	r23, 0x57
    28a0:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    28a2:	c7 01       	movw	r24, r14
    28a4:	42 a1       	lds	r20, 0x42
    28a6:	23 a1       	lds	r18, 0x43
    28a8:	04 a1       	lds	r16, 0x44
    28aa:	0e 94 af 12 	call	0x255e	; 0x255e <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    28ae:	d7 01       	movw	r26, r14
    28b0:	95 96       	adiw	r26, 0x25	; 37
    28b2:	1c 92       	st	X, r1
    28b4:	95 97       	sbiw	r26, 0x25	; 37
            break;
    28b6:	4c c0       	rjmp	.+152    	; 0x2950 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    28b8:	f7 01       	movw	r30, r14
    28ba:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    28bc:	17 a2       	lds	r17, 0x97
    28be:	16 a2       	lds	r17, 0x96
    28c0:	47 c0       	rjmp	.+142    	; 0x2950 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    28c2:	d7 01       	movw	r26, r14
    28c4:	95 96       	adiw	r26, 0x25	; 37
    28c6:	1c 92       	st	X, r1
    28c8:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    28ca:	97 96       	adiw	r26, 0x27	; 39
    28cc:	1c 92       	st	X, r1
    28ce:	1e 92       	st	-X, r1
    28d0:	96 97       	sbiw	r26, 0x26	; 38
        break;
    28d2:	3e c0       	rjmp	.+124    	; 0x2950 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    28d4:	f7 01       	movw	r30, r14
    28d6:	25 a1       	lds	r18, 0x45
    28d8:	22 23       	and	r18, r18
    28da:	d1 f1       	breq	.+116    	; 0x2950 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    28dc:	06 a0       	lds	r16, 0x86
    28de:	f7 a1       	lds	r31, 0x47
    28e0:	e0 2d       	mov	r30, r0
    28e2:	cf 01       	movw	r24, r30
    28e4:	63 e0       	ldi	r22, 0x03	; 3
    28e6:	70 e0       	ldi	r23, 0x00	; 0
    28e8:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodhi4>
    28ec:	ac 01       	movw	r20, r24
    28ee:	8e 0d       	add	r24, r14
    28f0:	9f 1d       	adc	r25, r15
    28f2:	dc 01       	movw	r26, r24
    28f4:	92 96       	adiw	r26, 0x22	; 34
    28f6:	cc 93       	st	X, r28
    28f8:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    28fa:	bf 01       	movw	r22, r30
    28fc:	6f 5f       	subi	r22, 0xFF	; 255
    28fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2900:	f7 01       	movw	r30, r14
    2902:	77 a3       	lds	r23, 0x57
    2904:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    2906:	41 30       	cpi	r20, 0x01	; 1
    2908:	51 05       	cpc	r21, r1
    290a:	91 f0       	breq	.+36     	; 0x2930 <midi_process_byte+0x18a>
    290c:	42 30       	cpi	r20, 0x02	; 2
    290e:	51 05       	cpc	r21, r1
    2910:	f9 f4       	brne	.+62     	; 0x2950 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    2912:	c7 01       	movw	r24, r14
    2914:	42 a1       	lds	r20, 0x42
    2916:	23 a1       	lds	r18, 0x43
    2918:	04 a1       	lds	r16, 0x44
    291a:	0e 94 af 12 	call	0x255e	; 0x255e <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    291e:	f7 01       	movw	r30, r14
    2920:	85 a1       	lds	r24, 0x45
    2922:	84 30       	cpi	r24, 0x04	; 4
    2924:	a9 f0       	breq	.+42     	; 0x2950 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	97 a3       	lds	r25, 0x57
    292c:	86 a3       	lds	r24, 0x56
    292e:	10 c0       	rjmp	.+32     	; 0x2950 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    2930:	22 30       	cpi	r18, 0x02	; 2
    2932:	71 f4       	brne	.+28     	; 0x2950 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    2934:	c7 01       	movw	r24, r14
    2936:	42 a1       	lds	r20, 0x42
    2938:	23 a1       	lds	r18, 0x43
    293a:	00 e0       	ldi	r16, 0x00	; 0
    293c:	0e 94 af 12 	call	0x255e	; 0x255e <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    2940:	f7 01       	movw	r30, r14
    2942:	85 a1       	lds	r24, 0x45
    2944:	84 30       	cpi	r24, 0x04	; 4
    2946:	21 f0       	breq	.+8      	; 0x2950 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	97 a3       	lds	r25, 0x57
    294e:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	0f 91       	pop	r16
    2956:	ff 90       	pop	r15
    2958:	ef 90       	pop	r14
    295a:	08 95       	ret

0000295c <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    295c:	cf 92       	push	r12
    295e:	df 92       	push	r13
    2960:	ef 92       	push	r14
    2962:	ff 92       	push	r15
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    296e:	dc 01       	movw	r26, r24
    2970:	90 96       	adiw	r26, 0x20	; 32
    2972:	ed 91       	ld	r30, X+
    2974:	fc 91       	ld	r31, X
    2976:	91 97       	sbiw	r26, 0x21	; 33
    2978:	30 97       	sbiw	r30, 0x00	; 0
    297a:	09 f0       	breq	.+2      	; 0x297e <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    297c:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    297e:	0f 2e       	mov	r0, r31
    2980:	f8 ee       	ldi	r31, 0xE8	; 232
    2982:	ef 2e       	mov	r14, r31
    2984:	ff 24       	eor	r15, r15
    2986:	f0 2d       	mov	r31, r0
    2988:	ec 0c       	add	r14, r12
    298a:	fd 1c       	adc	r15, r13
    298c:	c7 01       	movw	r24, r14
    298e:	0e 94 03 10 	call	0x2006	; 0x2006 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2992:	c8 2f       	mov	r28, r24
    2994:	d0 e0       	ldi	r29, 0x00	; 0
    2996:	20 97       	sbiw	r28, 0x00	; 0
    2998:	99 f0       	breq	.+38     	; 0x29c0 <midi_device_process+0x64>
    299a:	00 e0       	ldi	r16, 0x00	; 0
    299c:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    299e:	c7 01       	movw	r24, r14
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	0e 94 18 10 	call	0x2030	; 0x2030 <bytequeue_get>
    29a6:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    29a8:	c6 01       	movw	r24, r12
    29aa:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    29ae:	c7 01       	movw	r24, r14
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	0e 94 29 10 	call	0x2052	; 0x2052 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    29b6:	0f 5f       	subi	r16, 0xFF	; 255
    29b8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ba:	0c 17       	cp	r16, r28
    29bc:	1d 07       	cpc	r17, r29
    29be:	78 f3       	brcs	.-34     	; 0x299e <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	ff 90       	pop	r15
    29ca:	ef 90       	pop	r14
    29cc:	df 90       	pop	r13
    29ce:	cf 90       	pop	r12
    29d0:	08 95       	ret

000029d2 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    29d2:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    29d4:	67 e0       	ldi	r22, 0x07	; 7
    29d6:	70 e0       	ldi	r23, 0x00	; 0
    29d8:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodhi4>
    29dc:	48 2f       	mov	r20, r24
   if (remainder)
    29de:	88 23       	and	r24, r24
    29e0:	81 f0       	breq	.+32     	; 0x2a02 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    29e2:	c9 01       	movw	r24, r18
    29e4:	67 e0       	ldi	r22, 0x07	; 7
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodhi4>
    29ec:	cb 01       	movw	r24, r22
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	84 0f       	add	r24, r20
    29fe:	91 1d       	adc	r25, r1
    2a00:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    2a02:	c9 01       	movw	r24, r18
    2a04:	67 e0       	ldi	r22, 0x07	; 7
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodhi4>
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	88 0f       	add	r24, r24
    2a10:	99 1f       	adc	r25, r25
    2a12:	88 0f       	add	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
}
    2a1a:	08 95       	ret

00002a1c <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    2a1c:	48 2f       	mov	r20, r24
    2a1e:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    2a20:	a1 f0       	breq	.+40     	; 0x2a4a <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    2a22:	9c 01       	movw	r18, r24
    2a24:	36 95       	lsr	r19
    2a26:	27 95       	ror	r18
    2a28:	36 95       	lsr	r19
    2a2a:	27 95       	ror	r18
    2a2c:	36 95       	lsr	r19
    2a2e:	27 95       	ror	r18
    2a30:	c9 01       	movw	r24, r18
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	82 1b       	sub	r24, r18
    2a40:	93 0b       	sbc	r25, r19
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	84 0f       	add	r24, r20
    2a46:	91 1d       	adc	r25, r1
    2a48:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    2a4a:	9c 01       	movw	r18, r24
    2a4c:	36 95       	lsr	r19
    2a4e:	27 95       	ror	r18
    2a50:	36 95       	lsr	r19
    2a52:	27 95       	ror	r18
    2a54:	36 95       	lsr	r19
    2a56:	27 95       	ror	r18
    2a58:	c9 01       	movw	r24, r18
    2a5a:	88 0f       	add	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	82 1b       	sub	r24, r18
    2a68:	93 0b       	sbc	r25, r19
}
    2a6a:	08 95       	ret

00002a6c <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2a6c:	2f 92       	push	r2
    2a6e:	3f 92       	push	r3
    2a70:	4f 92       	push	r4
    2a72:	5f 92       	push	r5
    2a74:	6f 92       	push	r6
    2a76:	7f 92       	push	r7
    2a78:	8f 92       	push	r8
    2a7a:	9f 92       	push	r9
    2a7c:	af 92       	push	r10
    2a7e:	bf 92       	push	r11
    2a80:	cf 92       	push	r12
    2a82:	df 92       	push	r13
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <sysex_encode+0x26>
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <sysex_encode+0x28>
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <sysex_encode+0x2a>
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	1c 01       	movw	r2, r24
    2a9c:	7a 83       	std	Y+2, r23	; 0x02
    2a9e:	69 83       	std	Y+1, r22	; 0x01
    2aa0:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    2aa2:	ca 01       	movw	r24, r20
    2aa4:	67 e0       	ldi	r22, 0x07	; 7
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodhi4>
    2aac:	2b 01       	movw	r4, r22
    2aae:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2ab0:	61 15       	cp	r22, r1
    2ab2:	71 05       	cpc	r23, r1
    2ab4:	b1 f1       	breq	.+108    	; 0x2b22 <sysex_encode+0xb6>
    2ab6:	81 01       	movw	r16, r2
    2ab8:	e9 80       	ldd	r14, Y+1	; 0x01
    2aba:	fa 80       	ldd	r15, Y+2	; 0x02
    2abc:	cc 24       	eor	r12, r12
    2abe:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2ac0:	88 24       	eor	r8, r8
    2ac2:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2ac4:	1e 83       	std	Y+6, r17	; 0x06
    2ac6:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    2ac8:	f8 01       	movw	r30, r16
    2aca:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2acc:	fc 82       	std	Y+4, r15	; 0x04
    2ace:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2ad0:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    2ad2:	ab 81       	ldd	r26, Y+3	; 0x03
    2ad4:	bc 81       	ldd	r27, Y+4	; 0x04
    2ad6:	2d 91       	ld	r18, X+
    2ad8:	bc 83       	std	Y+4, r27	; 0x04
    2ada:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    2adc:	4f 5f       	subi	r20, 0xFF	; 255
    2ade:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae0:	82 2f       	mov	r24, r18
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	80 78       	andi	r24, 0x80	; 128
    2ae6:	90 70       	andi	r25, 0x00	; 0
    2ae8:	bc 01       	movw	r22, r24
    2aea:	04 2e       	mov	r0, r20
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <sysex_encode+0x86>
    2aee:	75 95       	asr	r23
    2af0:	67 95       	ror	r22
    2af2:	0a 94       	dec	r0
    2af4:	e2 f7       	brpl	.-8      	; 0x2aee <sysex_encode+0x82>
    2af6:	ad 81       	ldd	r26, Y+5	; 0x05
    2af8:	be 81       	ldd	r27, Y+6	; 0x06
    2afa:	8c 91       	ld	r24, X
    2afc:	86 2b       	or	r24, r22
    2afe:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    2b00:	2f 77       	andi	r18, 0x7F	; 127
    2b02:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    2b04:	47 30       	cpi	r20, 0x07	; 7
    2b06:	51 05       	cpc	r21, r1
    2b08:	21 f7       	brne	.-56     	; 0x2ad2 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2b0a:	08 94       	sec
    2b0c:	c1 1c       	adc	r12, r1
    2b0e:	d1 1c       	adc	r13, r1
    2b10:	08 5f       	subi	r16, 0xF8	; 248
    2b12:	1f 4f       	sbci	r17, 0xFF	; 255
    2b14:	e7 e0       	ldi	r30, 0x07	; 7
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	ee 0e       	add	r14, r30
    2b1a:	ff 1e       	adc	r15, r31
    2b1c:	ca 14       	cp	r12, r10
    2b1e:	db 04       	cpc	r13, r11
    2b20:	89 f6       	brne	.-94     	; 0x2ac4 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    2b22:	c3 01       	movw	r24, r6
    2b24:	67 e0       	ldi	r22, 0x07	; 7
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodhi4>
   if (remainder) {
    2b2c:	88 23       	and	r24, r24
    2b2e:	d9 f1       	breq	.+118    	; 0x2ba6 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    2b30:	82 01       	movw	r16, r4
    2b32:	00 0f       	add	r16, r16
    2b34:	11 1f       	adc	r17, r17
    2b36:	00 0f       	add	r16, r16
    2b38:	11 1f       	adc	r17, r17
    2b3a:	00 0f       	add	r16, r16
    2b3c:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    2b3e:	78 01       	movw	r14, r16
    2b40:	e4 18       	sub	r14, r4
    2b42:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    2b44:	d1 01       	movw	r26, r2
    2b46:	a0 0f       	add	r26, r16
    2b48:	b1 1f       	adc	r27, r17
    2b4a:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    2b4c:	68 2f       	mov	r22, r24
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	61 15       	cp	r22, r1
    2b52:	71 05       	cpc	r23, r1
    2b54:	19 f1       	breq	.+70     	; 0x2b9c <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2b56:	e9 81       	ldd	r30, Y+1	; 0x01
    2b58:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5a:	ee 0e       	add	r14, r30
    2b5c:	ff 1e       	adc	r15, r31
    2b5e:	c8 01       	movw	r24, r16
    2b60:	01 96       	adiw	r24, 0x01	; 1
    2b62:	28 0e       	add	r2, r24
    2b64:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    2b6a:	f7 01       	movw	r30, r14
    2b6c:	41 91       	ld	r20, Z+
    2b6e:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    2b70:	2f 5f       	subi	r18, 0xFF	; 255
    2b72:	3f 4f       	sbci	r19, 0xFF	; 255
    2b74:	84 2f       	mov	r24, r20
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	80 78       	andi	r24, 0x80	; 128
    2b7a:	90 70       	andi	r25, 0x00	; 0
    2b7c:	02 2e       	mov	r0, r18
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <sysex_encode+0x118>
    2b80:	95 95       	asr	r25
    2b82:	87 95       	ror	r24
    2b84:	0a 94       	dec	r0
    2b86:	e2 f7       	brpl	.-8      	; 0x2b80 <sysex_encode+0x114>
    2b88:	9c 91       	ld	r25, X
    2b8a:	89 2b       	or	r24, r25
    2b8c:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    2b8e:	4f 77       	andi	r20, 0x7F	; 127
    2b90:	f1 01       	movw	r30, r2
    2b92:	41 93       	st	Z+, r20
    2b94:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    2b96:	26 17       	cp	r18, r22
    2b98:	37 07       	cpc	r19, r23
    2b9a:	38 f3       	brcs	.-50     	; 0x2b6a <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    2b9c:	c8 01       	movw	r24, r16
    2b9e:	01 96       	adiw	r24, 0x01	; 1
    2ba0:	86 0f       	add	r24, r22
    2ba2:	97 1f       	adc	r25, r23
    2ba4:	07 c0       	rjmp	.+14     	; 0x2bb4 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    2ba6:	c2 01       	movw	r24, r4
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	88 0f       	add	r24, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	88 0f       	add	r24, r24
    2bb2:	99 1f       	adc	r25, r25
   }
}
    2bb4:	26 96       	adiw	r28, 0x06	; 6
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	de bf       	out	0x3e, r29	; 62
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	cd bf       	out	0x3d, r28	; 61
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	ff 90       	pop	r15
    2bca:	ef 90       	pop	r14
    2bcc:	df 90       	pop	r13
    2bce:	cf 90       	pop	r12
    2bd0:	bf 90       	pop	r11
    2bd2:	af 90       	pop	r10
    2bd4:	9f 90       	pop	r9
    2bd6:	8f 90       	pop	r8
    2bd8:	7f 90       	pop	r7
    2bda:	6f 90       	pop	r6
    2bdc:	5f 90       	pop	r5
    2bde:	4f 90       	pop	r4
    2be0:	3f 90       	pop	r3
    2be2:	2f 90       	pop	r2
    2be4:	08 95       	ret

00002be6 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2be6:	6f 92       	push	r6
    2be8:	7f 92       	push	r7
    2bea:	8f 92       	push	r8
    2bec:	9f 92       	push	r9
    2bee:	af 92       	push	r10
    2bf0:	bf 92       	push	r11
    2bf2:	cf 92       	push	r12
    2bf4:	df 92       	push	r13
    2bf6:	ef 92       	push	r14
    2bf8:	ff 92       	push	r15
    2bfa:	0f 93       	push	r16
    2bfc:	1f 93       	push	r17
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	3c 01       	movw	r6, r24
    2c04:	4b 01       	movw	r8, r22
    2c06:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    2c08:	42 30       	cpi	r20, 0x02	; 2
    2c0a:	51 05       	cpc	r21, r1
    2c0c:	08 f4       	brcc	.+2      	; 0x2c10 <sysex_decode+0x2a>
    2c0e:	6f c0       	rjmp	.+222    	; 0x2cee <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    2c10:	7a 01       	movw	r14, r20
    2c12:	f6 94       	lsr	r15
    2c14:	e7 94       	ror	r14
    2c16:	f6 94       	lsr	r15
    2c18:	e7 94       	ror	r14
    2c1a:	f6 94       	lsr	r15
    2c1c:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    2c1e:	e1 14       	cp	r14, r1
    2c20:	f1 04       	cpc	r15, r1
    2c22:	29 f1       	breq	.+74     	; 0x2c6e <sysex_decode+0x88>
    2c24:	eb 01       	movw	r28, r22
    2c26:	b3 01       	movw	r22, r6
    2c28:	00 e0       	ldi	r16, 0x00	; 0
    2c2a:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2c2c:	cc 24       	eor	r12, r12
    2c2e:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2c30:	de 01       	movw	r26, r28
    2c32:	11 96       	adiw	r26, 0x01	; 1
    2c34:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2c36:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    2c38:	2d 91       	ld	r18, X+
    2c3a:	2f 77       	andi	r18, 0x7F	; 127
    2c3c:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2c3e:	4f 5f       	subi	r20, 0xFF	; 255
    2c40:	5f 4f       	sbci	r21, 0xFF	; 255
    2c42:	88 81       	ld	r24, Y
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	04 2e       	mov	r0, r20
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <sysex_decode+0x68>
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	0a 94       	dec	r0
    2c50:	e2 f7       	brpl	.-8      	; 0x2c4a <sysex_decode+0x64>
    2c52:	80 78       	andi	r24, 0x80	; 128
    2c54:	28 2b       	or	r18, r24
    2c56:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2c58:	47 30       	cpi	r20, 0x07	; 7
    2c5a:	51 05       	cpc	r21, r1
    2c5c:	69 f7       	brne	.-38     	; 0x2c38 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    2c5e:	0f 5f       	subi	r16, 0xFF	; 255
    2c60:	1f 4f       	sbci	r17, 0xFF	; 255
    2c62:	28 96       	adiw	r28, 0x08	; 8
    2c64:	69 5f       	subi	r22, 0xF9	; 249
    2c66:	7f 4f       	sbci	r23, 0xFF	; 255
    2c68:	0e 15       	cp	r16, r14
    2c6a:	1f 05       	cpc	r17, r15
    2c6c:	09 f7       	brne	.-62     	; 0x2c30 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    2c6e:	5a 2d       	mov	r21, r10
    2c70:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    2c72:	99 f1       	breq	.+102    	; 0x2cda <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    2c74:	e7 01       	movw	r28, r14
    2c76:	cc 0f       	add	r28, r28
    2c78:	dd 1f       	adc	r29, r29
    2c7a:	cc 0f       	add	r28, r28
    2c7c:	dd 1f       	adc	r29, r29
    2c7e:	cc 0f       	add	r28, r28
    2c80:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    2c82:	8e 01       	movw	r16, r28
    2c84:	0e 19       	sub	r16, r14
    2c86:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    2c88:	65 2f       	mov	r22, r21
    2c8a:	70 e0       	ldi	r23, 0x00	; 0
    2c8c:	61 50       	subi	r22, 0x01	; 1
    2c8e:	70 40       	sbci	r23, 0x00	; 0
    2c90:	f9 f0       	breq	.+62     	; 0x2cd0 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2c92:	ce 01       	movw	r24, r28
    2c94:	01 96       	adiw	r24, 0x01	; 1
    2c96:	d4 01       	movw	r26, r8
    2c98:	a8 0f       	add	r26, r24
    2c9a:	b9 1f       	adc	r27, r25
    2c9c:	f3 01       	movw	r30, r6
    2c9e:	e0 0f       	add	r30, r16
    2ca0:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2ca6:	c8 0d       	add	r28, r8
    2ca8:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    2caa:	4d 91       	ld	r20, X+
    2cac:	4f 77       	andi	r20, 0x7F	; 127
    2cae:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2cb0:	2f 5f       	subi	r18, 0xFF	; 255
    2cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb4:	88 81       	ld	r24, Y
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	02 2e       	mov	r0, r18
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <sysex_decode+0xda>
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	0a 94       	dec	r0
    2cc2:	e2 f7       	brpl	.-8      	; 0x2cbc <sysex_decode+0xd6>
    2cc4:	80 78       	andi	r24, 0x80	; 128
    2cc6:	48 2b       	or	r20, r24
    2cc8:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2cca:	26 17       	cp	r18, r22
    2ccc:	37 07       	cpc	r19, r23
    2cce:	68 f3       	brcs	.-38     	; 0x2caa <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    2cd0:	c8 01       	movw	r24, r16
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	85 0f       	add	r24, r21
    2cd6:	91 1d       	adc	r25, r1
    2cd8:	0c c0       	rjmp	.+24     	; 0x2cf2 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    2cda:	c7 01       	movw	r24, r14
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	8e 19       	sub	r24, r14
    2cea:	9f 09       	sbc	r25, r15
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    2cf2:	df 91       	pop	r29
    2cf4:	cf 91       	pop	r28
    2cf6:	1f 91       	pop	r17
    2cf8:	0f 91       	pop	r16
    2cfa:	ff 90       	pop	r15
    2cfc:	ef 90       	pop	r14
    2cfe:	df 90       	pop	r13
    2d00:	cf 90       	pop	r12
    2d02:	bf 90       	pop	r11
    2d04:	af 90       	pop	r10
    2d06:	9f 90       	pop	r9
    2d08:	8f 90       	pop	r8
    2d0a:	7f 90       	pop	r7
    2d0c:	6f 90       	pop	r6
    2d0e:	08 95       	ret

00002d10 <__mulsi3>:
    2d10:	62 9f       	mul	r22, r18
    2d12:	d0 01       	movw	r26, r0
    2d14:	73 9f       	mul	r23, r19
    2d16:	f0 01       	movw	r30, r0
    2d18:	82 9f       	mul	r24, r18
    2d1a:	e0 0d       	add	r30, r0
    2d1c:	f1 1d       	adc	r31, r1
    2d1e:	64 9f       	mul	r22, r20
    2d20:	e0 0d       	add	r30, r0
    2d22:	f1 1d       	adc	r31, r1
    2d24:	92 9f       	mul	r25, r18
    2d26:	f0 0d       	add	r31, r0
    2d28:	83 9f       	mul	r24, r19
    2d2a:	f0 0d       	add	r31, r0
    2d2c:	74 9f       	mul	r23, r20
    2d2e:	f0 0d       	add	r31, r0
    2d30:	65 9f       	mul	r22, r21
    2d32:	f0 0d       	add	r31, r0
    2d34:	99 27       	eor	r25, r25
    2d36:	72 9f       	mul	r23, r18
    2d38:	b0 0d       	add	r27, r0
    2d3a:	e1 1d       	adc	r30, r1
    2d3c:	f9 1f       	adc	r31, r25
    2d3e:	63 9f       	mul	r22, r19
    2d40:	b0 0d       	add	r27, r0
    2d42:	e1 1d       	adc	r30, r1
    2d44:	f9 1f       	adc	r31, r25
    2d46:	bd 01       	movw	r22, r26
    2d48:	cf 01       	movw	r24, r30
    2d4a:	11 24       	eor	r1, r1
    2d4c:	08 95       	ret

00002d4e <__udivmodhi4>:
    2d4e:	aa 1b       	sub	r26, r26
    2d50:	bb 1b       	sub	r27, r27
    2d52:	51 e1       	ldi	r21, 0x11	; 17
    2d54:	07 c0       	rjmp	.+14     	; 0x2d64 <__udivmodhi4_ep>

00002d56 <__udivmodhi4_loop>:
    2d56:	aa 1f       	adc	r26, r26
    2d58:	bb 1f       	adc	r27, r27
    2d5a:	a6 17       	cp	r26, r22
    2d5c:	b7 07       	cpc	r27, r23
    2d5e:	10 f0       	brcs	.+4      	; 0x2d64 <__udivmodhi4_ep>
    2d60:	a6 1b       	sub	r26, r22
    2d62:	b7 0b       	sbc	r27, r23

00002d64 <__udivmodhi4_ep>:
    2d64:	88 1f       	adc	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	5a 95       	dec	r21
    2d6a:	a9 f7       	brne	.-22     	; 0x2d56 <__udivmodhi4_loop>
    2d6c:	80 95       	com	r24
    2d6e:	90 95       	com	r25
    2d70:	bc 01       	movw	r22, r24
    2d72:	cd 01       	movw	r24, r26
    2d74:	08 95       	ret

00002d76 <__divmodhi4>:
    2d76:	97 fb       	bst	r25, 7
    2d78:	09 2e       	mov	r0, r25
    2d7a:	07 26       	eor	r0, r23
    2d7c:	0a d0       	rcall	.+20     	; 0x2d92 <__divmodhi4_neg1>
    2d7e:	77 fd       	sbrc	r23, 7
    2d80:	04 d0       	rcall	.+8      	; 0x2d8a <__divmodhi4_neg2>
    2d82:	e5 df       	rcall	.-54     	; 0x2d4e <__udivmodhi4>
    2d84:	06 d0       	rcall	.+12     	; 0x2d92 <__divmodhi4_neg1>
    2d86:	00 20       	and	r0, r0
    2d88:	1a f4       	brpl	.+6      	; 0x2d90 <__divmodhi4_exit>

00002d8a <__divmodhi4_neg2>:
    2d8a:	70 95       	com	r23
    2d8c:	61 95       	neg	r22
    2d8e:	7f 4f       	sbci	r23, 0xFF	; 255

00002d90 <__divmodhi4_exit>:
    2d90:	08 95       	ret

00002d92 <__divmodhi4_neg1>:
    2d92:	f6 f7       	brtc	.-4      	; 0x2d90 <__divmodhi4_exit>
    2d94:	90 95       	com	r25
    2d96:	81 95       	neg	r24
    2d98:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9a:	08 95       	ret

00002d9c <memcpy>:
    2d9c:	fb 01       	movw	r30, r22
    2d9e:	dc 01       	movw	r26, r24
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <memcpy+0xa>
    2da2:	01 90       	ld	r0, Z+
    2da4:	0d 92       	st	X+, r0
    2da6:	41 50       	subi	r20, 0x01	; 1
    2da8:	50 40       	sbci	r21, 0x00	; 0
    2daa:	d8 f7       	brcc	.-10     	; 0x2da2 <memcpy+0x6>
    2dac:	08 95       	ret

00002dae <memmove>:
    2dae:	68 17       	cp	r22, r24
    2db0:	79 07       	cpc	r23, r25
    2db2:	68 f4       	brcc	.+26     	; 0x2dce <memmove+0x20>
    2db4:	fb 01       	movw	r30, r22
    2db6:	dc 01       	movw	r26, r24
    2db8:	e4 0f       	add	r30, r20
    2dba:	f5 1f       	adc	r31, r21
    2dbc:	a4 0f       	add	r26, r20
    2dbe:	b5 1f       	adc	r27, r21
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <memmove+0x18>
    2dc2:	02 90       	ld	r0, -Z
    2dc4:	0e 92       	st	-X, r0
    2dc6:	41 50       	subi	r20, 0x01	; 1
    2dc8:	50 40       	sbci	r21, 0x00	; 0
    2dca:	d8 f7       	brcc	.-10     	; 0x2dc2 <memmove+0x14>
    2dcc:	08 95       	ret
    2dce:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <memcpy>

00002dd2 <__eerd_block_m6450a>:
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22

00002dd6 <__eerd_blraw_m6450a>:
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	f9 99       	sbic	0x1f, 1	; 31
    2dda:	fe cf       	rjmp	.-4      	; 0x2dd8 <__eerd_blraw_m6450a+0x2>
    2ddc:	06 c0       	rjmp	.+12     	; 0x2dea <__eerd_blraw_m6450a+0x14>
    2dde:	f2 bd       	out	0x22, r31	; 34
    2de0:	e1 bd       	out	0x21, r30	; 33
    2de2:	f8 9a       	sbi	0x1f, 0	; 31
    2de4:	31 96       	adiw	r30, 0x01	; 1
    2de6:	00 b4       	in	r0, 0x20	; 32
    2de8:	0d 92       	st	X+, r0
    2dea:	41 50       	subi	r20, 0x01	; 1
    2dec:	50 40       	sbci	r21, 0x00	; 0
    2dee:	b8 f7       	brcc	.-18     	; 0x2dde <__eerd_blraw_m6450a+0x8>
    2df0:	08 95       	ret

00002df2 <__eerd_word_m6450a>:
    2df2:	a8 e1       	ldi	r26, 0x18	; 24
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	42 e0       	ldi	r20, 0x02	; 2
    2df8:	50 e0       	ldi	r21, 0x00	; 0
    2dfa:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__eerd_blraw_m6450a>

00002dfe <__eeupd_block_m6450a>:
    2dfe:	dc 01       	movw	r26, r24
    2e00:	a4 0f       	add	r26, r20
    2e02:	b5 1f       	adc	r27, r21
    2e04:	41 50       	subi	r20, 0x01	; 1
    2e06:	50 40       	sbci	r21, 0x00	; 0
    2e08:	48 f0       	brcs	.+18     	; 0x2e1c <__eeupd_block_m6450a+0x1e>
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	84 0f       	add	r24, r20
    2e0e:	95 1f       	adc	r25, r21
    2e10:	2e 91       	ld	r18, -X
    2e12:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__eeupd_r18_m6450a>
    2e16:	41 50       	subi	r20, 0x01	; 1
    2e18:	50 40       	sbci	r21, 0x00	; 0
    2e1a:	d0 f7       	brcc	.-12     	; 0x2e10 <__eeupd_block_m6450a+0x12>
    2e1c:	08 95       	ret

00002e1e <__eeupd_byte_m6450a>:
    2e1e:	26 2f       	mov	r18, r22

00002e20 <__eeupd_r18_m6450a>:
    2e20:	f9 99       	sbic	0x1f, 1	; 31
    2e22:	fe cf       	rjmp	.-4      	; 0x2e20 <__eeupd_r18_m6450a>
    2e24:	92 bd       	out	0x22, r25	; 34
    2e26:	81 bd       	out	0x21, r24	; 33
    2e28:	f8 9a       	sbi	0x1f, 0	; 31
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	00 b4       	in	r0, 0x20	; 32
    2e2e:	02 16       	cp	r0, r18
    2e30:	31 f0       	breq	.+12     	; 0x2e3e <__eeupd_r18_m6450a+0x1e>
    2e32:	20 bd       	out	0x20, r18	; 32
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	fa 9a       	sbi	0x1f, 2	; 31
    2e3a:	f9 9a       	sbi	0x1f, 1	; 31
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	08 95       	ret

00002e40 <__eeupd_word_m6450a>:
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	27 2f       	mov	r18, r23
    2e44:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__eeupd_r18_m6450a>
    2e48:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__eeupd_byte_m6450a>

00002e4c <_exit>:
    2e4c:	f8 94       	cli

00002e4e <__stop_program>:
    2e4e:	ff cf       	rjmp	.-2      	; 0x2e4e <__stop_program>
