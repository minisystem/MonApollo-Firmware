
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003c3c  00003cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c3c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000214  008002b0  008002b0  00003ea0  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00004514  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00005108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000300  00000000  00000000  00005448  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a38  00000000  00000000  00005748  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018b0  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002157  00000000  00000000  0000da30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d8c  00000000  00000000  0000fb88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001990  00000000  00000000  00010914  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002ea6  00000000  00000000  000122a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  0001514a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__vector_9>
      28:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ec e3       	ldi	r30, 0x3C	; 60
      78:	fc e3       	ldi	r31, 0x3C	; 60
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a4 3c       	cpi	r26, 0xC4	; 196
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 20 04 	call	0x840	; 0x840 <main>
      9a:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:
struct arp arp;


//static struct midi_note arp_sequence[24] = {0,0};

void update_arp_sequence(void) {
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
		//arp.current_note = arp.sequence[arp.last_step].note; //temp note to store for release phase
		//arp.step_position = 0; //reset step position
		////return;
	//}

	arp.step_number = gate_buffer*(arp.range + 1);
     15e:	80 91 84 03 	lds	r24, 0x0384
     162:	8f 5f       	subi	r24, 0xFF	; 255
     164:	90 91 b0 02 	lds	r25, 0x02B0
     168:	89 9f       	mul	r24, r25
     16a:	80 2d       	mov	r24, r0
     16c:	11 24       	eor	r1, r1
     16e:	80 93 85 03 	sts	0x0385, r24
     172:	00 e0       	ldi	r16, 0x00	; 0
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     174:	aa 24       	eor	r10, r10
     176:	bb 24       	eor	r11, r11
	
	
	//if ((arp.mode == UP_DOWN) && (arp.range > 0)) arp.step_number = arp.step_number << 1;//twice as many steps
	
	//set arp sequence
	uint8_t step = 0;
     178:	10 e0       	ldi	r17, 0x00	; 0
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     17a:	88 24       	eor	r8, r8
     17c:	99 24       	eor	r9, r9
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     17e:	0f 2e       	mov	r0, r31
     180:	fa e8       	ldi	r31, 0x8A	; 138
     182:	ef 2e       	mov	r14, r31
     184:	f3 e0       	ldi	r31, 0x03	; 3
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
				
				case UP:
				
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     18a:	0f 2e       	mov	r0, r31
     18c:	f4 e8       	ldi	r31, 0x84	; 132
     18e:	cf 2e       	mov	r12, r31
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	df 2e       	mov	r13, r31
     194:	f0 2d       	mov	r31, r0
     196:	34 c0       	rjmp	.+104    	; 0x200 <update_arp_sequence+0xba>
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     198:	e4 01       	movw	r28, r8
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
     19a:	81 50       	subi	r24, 0x01	; 1
     19c:	8c 1b       	sub	r24, r28
     19e:	0e 94 2a 01 	call	0x254	; 0x254 <get_indexed_note>
     1a2:	28 2f       	mov	r18, r24
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     1a4:	f7 01       	movw	r30, r14
     1a6:	80 81       	ld	r24, Z
     1a8:	88 23       	and	r24, r24
     1aa:	19 f0       	breq	.+6      	; 0x1b2 <update_arp_sequence+0x6c>
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	b1 f4       	brne	.+44     	; 0x1dc <update_arp_sequence+0x96>
     1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <update_arp_sequence+0x82>
				
				case UP:
				
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1b2:	81 2f       	mov	r24, r17
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	8c 0d       	add	r24, r12
     1bc:	9d 1d       	adc	r25, r13
     1be:	20 0f       	add	r18, r16
     1c0:	fc 01       	movw	r30, r24
     1c2:	27 83       	std	Z+7, r18	; 0x07
     1c4:	1f 5f       	subi	r17, 0xFF	; 255
				
					break;
     1c6:	0a c0       	rjmp	.+20     	; 0x1dc <update_arp_sequence+0x96>
					
				case DOWN:
					
					//int temp_note = int (root_note - (range*12));
					//if (temp_note < 8)  temp_note = root_note; //handle min note out of range here
					arp.sequence[step++].note = root_note - (range*12);
     1c8:	81 2f       	mov	r24, r17
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	8c 0d       	add	r24, r12
     1d2:	9d 1d       	adc	r25, r13
     1d4:	20 1b       	sub	r18, r16
     1d6:	fc 01       	movw	r30, r24
     1d8:	27 83       	std	Z+7, r18	; 0x07
     1da:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     1dc:	21 96       	adiw	r28, 0x01	; 1
     1de:	80 91 b0 02 	lds	r24, 0x02B0
     1e2:	28 2f       	mov	r18, r24
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	c2 17       	cp	r28, r18
     1e8:	d3 07       	cpc	r29, r19
     1ea:	bc f2       	brlt	.-82     	; 0x19a <update_arp_sequence+0x54>
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     1ec:	08 94       	sec
     1ee:	a1 1c       	adc	r10, r1
     1f0:	b1 1c       	adc	r11, r1
     1f2:	04 5f       	subi	r16, 0xF4	; 244
     1f4:	f6 01       	movw	r30, r12
     1f6:	80 81       	ld	r24, Z
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	8a 15       	cp	r24, r10
     1fc:	9b 05       	cpc	r25, r11
     1fe:	2c f0       	brlt	.+10     	; 0x20a <update_arp_sequence+0xc4>
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     200:	80 91 b0 02 	lds	r24, 0x02B0
     204:	88 23       	and	r24, r24
     206:	41 f6       	brne	.-112    	; 0x198 <update_arp_sequence+0x52>
     208:	f1 cf       	rjmp	.-30     	; 0x1ec <update_arp_sequence+0xa6>
	

		
	
	
}
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	df 90       	pop	r13
     218:	cf 90       	pop	r12
     21a:	bf 90       	pop	r11
     21c:	af 90       	pop	r10
     21e:	9f 90       	pop	r9
     220:	8f 90       	pop	r8
     222:	08 95       	ret

00000224 <step_arp_note>:

void step_arp_note(void) { //updates arp note according to step position in sequence
	
	arp.current_note = arp.sequence[arp.step_position].note;
     224:	80 91 86 03 	lds	r24, 0x0386
     228:	a8 2f       	mov	r26, r24
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	e4 e8       	ldi	r30, 0x84	; 132
     22e:	f3 e0       	ldi	r31, 0x03	; 3
     230:	aa 0f       	add	r26, r26
     232:	bb 1f       	adc	r27, r27
     234:	ae 0f       	add	r26, r30
     236:	bf 1f       	adc	r27, r31
     238:	17 96       	adiw	r26, 0x07	; 7
     23a:	9c 91       	ld	r25, X
     23c:	17 97       	sbiw	r26, 0x07	; 7
     23e:	94 83       	std	Z+4, r25	; 0x04
	arp.previous_note = arp.current_note;
     240:	93 83       	std	Z+3, r25	; 0x03
	if (++arp.step_position >= arp.step_number) arp.step_position  = 0; //reset step position when at end of sequence 
     242:	8f 5f       	subi	r24, 0xFF	; 255
     244:	80 93 86 03 	sts	0x0386, r24
     248:	91 81       	ldd	r25, Z+1	; 0x01
     24a:	89 17       	cp	r24, r25
     24c:	10 f0       	brcs	.+4      	; 0x252 <step_arp_note+0x2e>
     24e:	10 92 86 03 	sts	0x0386, r1
     252:	08 95       	ret

00000254 <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     254:	e8 2f       	mov	r30, r24
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ee 0f       	add	r30, r30
     25a:	ff 1f       	adc	r31, r31
     25c:	e8 54       	subi	r30, 0x48	; 72
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     260:	80 81       	ld	r24, Z
     262:	08 95       	ret

00000264 <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.clock_source == OFF) {
     264:	80 91 89 03 	lds	r24, 0x0389
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	19 f4       	brne	.+6      	; 0x272 <get_current_note+0xe>
		
		note = current_note;
     26c:	80 91 b1 02 	lds	r24, 0x02B1
     270:	08 95       	ret

		
	} else {
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     272:	80 91 88 03 	lds	r24, 0x0388
		//if (gate_buffer) note = arp.current_note;
		
	}
	return note;
	
}
     276:	08 95       	ret

00000278 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	18 2f       	mov	r17, r24
     282:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     284:	8a eb       	ldi	r24, 0xBA	; 186
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	ec 01       	movw	r28, r24
     28a:	22 97       	sbiw	r28, 0x02	; 2
     28c:	be 01       	movw	r22, r28
     28e:	4e e0       	ldi	r20, 0x0E	; 14
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     296:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     298:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     29a:	10 93 b1 02 	sts	0x02B1, r17
	
} 
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	08 95       	ret

000002a8 <remove_note>:
void remove_note(uint8_t note){
     2a8:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     2aa:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     2ae:	c8 17       	cp	r28, r24
     2b0:	41 f0       	breq	.+16     	; 0x2c2 <remove_note+0x1a>
     2b2:	ea eb       	ldi	r30, 0xBA	; 186
     2b4:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     2ba:	90 81       	ld	r25, Z
     2bc:	98 17       	cp	r25, r24
     2be:	59 f4       	brne	.+22     	; 0x2d6 <remove_note+0x2e>
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     2c6:	fa 01       	movw	r30, r20
     2c8:	ee 0f       	add	r30, r30
     2ca:	ff 1f       	adc	r31, r31
     2cc:	e8 54       	subi	r30, 0x48	; 72
     2ce:	fe 4f       	sbci	r31, 0xFE	; 254
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	80 83       	st	Z, r24
			free_slot = i;
			break;
     2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2d6:	4f 5f       	subi	r20, 0xFF	; 255
     2d8:	5f 4f       	sbci	r21, 0xFF	; 255
     2da:	32 96       	adiw	r30, 0x02	; 2
     2dc:	48 30       	cpi	r20, 0x08	; 8
     2de:	51 05       	cpc	r21, r1
     2e0:	61 f7       	brne	.-40     	; 0x2ba <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     2e2:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	ca 01       	movw	r24, r20
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	bc 01       	movw	r22, r24
     2ee:	66 54       	subi	r22, 0x46	; 70
     2f0:	7e 4f       	sbci	r23, 0xFE	; 254
     2f2:	40 95       	com	r20
     2f4:	50 95       	com	r21
     2f6:	48 5f       	subi	r20, 0xF8	; 248
     2f8:	5f 4f       	sbci	r21, 0xFF	; 255
     2fa:	44 0f       	add	r20, r20
     2fc:	55 1f       	adc	r21, r21
     2fe:	88 54       	subi	r24, 0x48	; 72
     300:	9e 4f       	sbci	r25, 0xFE	; 254
     302:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <memmove>
	note_pool[7].note = EMPTY;	
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     30c:	80 91 b8 01 	lds	r24, 0x01B8
     310:	8f 3f       	cpi	r24, 0xFF	; 255
     312:	19 f4       	brne	.+6      	; 0x31a <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     314:	c0 93 b1 02 	sts	0x02B1, r28
     318:	02 c0       	rjmp	.+4      	; 0x31e <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     31a:	80 93 b1 02 	sts	0x02B1, r24

	}	
	
}
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     322:	8d e0       	ldi	r24, 0x0D	; 13
     324:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     32e:	08 95       	ret

00000330 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     330:	90 93 89 00 	sts	0x0089, r25
     334:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     338:	20 91 84 00 	lds	r18, 0x0084
     33c:	30 91 85 00 	lds	r19, 0x0085
     340:	82 17       	cp	r24, r18
     342:	93 07       	cpc	r25, r19
     344:	28 f4       	brcc	.+10     	; 0x350 <update_clock_rate+0x20>
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	90 93 85 00 	sts	0x0085, r25
     34c:	80 93 84 00 	sts	0x0084, r24
     350:	08 95       	ret

00000352 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     352:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     354:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     356:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     358:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     35a:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     35c:	8c 91       	ld	r24, X
     35e:	87 70       	andi	r24, 0x07	; 7
     360:	82 b9       	out	0x02, r24	; 2
     362:	66 e0       	ldi	r22, 0x06	; 6
     364:	6a 95       	dec	r22
     366:	f1 f7       	brne	.-4      	; 0x364 <set_control_voltage+0x12>
     368:	00 c0       	rjmp	.+0      	; 0x36a <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     36a:	ea ed       	ldi	r30, 0xDA	; 218
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	40 81       	ld	r20, Z
     370:	8c 91       	ld	r24, X
     372:	86 95       	lsr	r24
     374:	86 95       	lsr	r24
     376:	86 95       	lsr	r24
     378:	87 70       	andi	r24, 0x07	; 7
     37a:	21 e0       	ldi	r18, 0x01	; 1
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	b9 01       	movw	r22, r18
     380:	02 c0       	rjmp	.+4      	; 0x386 <set_control_voltage+0x34>
     382:	66 0f       	add	r22, r22
     384:	77 1f       	adc	r23, r23
     386:	8a 95       	dec	r24
     388:	e2 f7       	brpl	.-8      	; 0x382 <set_control_voltage+0x30>
     38a:	cb 01       	movw	r24, r22
     38c:	84 2b       	or	r24, r20
     38e:	80 83       	st	Z, r24
     390:	76 e0       	ldi	r23, 0x06	; 6
     392:	7a 95       	dec	r23
     394:	f1 f7       	brne	.-4      	; 0x392 <set_control_voltage+0x40>
     396:	00 c0       	rjmp	.+0      	; 0x398 <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     398:	80 81       	ld	r24, Z
     39a:	9c 91       	ld	r25, X
     39c:	96 95       	lsr	r25
     39e:	96 95       	lsr	r25
     3a0:	96 95       	lsr	r25
     3a2:	97 70       	andi	r25, 0x07	; 7
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <set_control_voltage+0x58>
     3a6:	22 0f       	add	r18, r18
     3a8:	33 1f       	adc	r19, r19
     3aa:	9a 95       	dec	r25
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <set_control_voltage+0x54>
     3ae:	20 95       	com	r18
     3b0:	28 23       	and	r18, r24
     3b2:	20 83       	st	Z, r18
	
}	
     3b4:	08 95       	ret

000003b6 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     3b6:	83 b3       	in	r24, 0x13	; 19
     3b8:	83 60       	ori	r24, 0x03	; 3
     3ba:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     3c0:	97 b1       	in	r25, 0x07	; 7
     3c2:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     3c4:	e9 ed       	ldi	r30, 0xD9	; 217
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 60       	ori	r24, 0x0F	; 15
     3cc:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     3ce:	ea ed       	ldi	r30, 0xDA	; 218
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	80 7f       	andi	r24, 0xF0	; 240
     3d6:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     3d8:	84 b3       	in	r24, 0x14	; 20
     3da:	83 60       	ori	r24, 0x03	; 3
     3dc:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     3de:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     3e0:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     3e2:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     3e4:	a0 9a       	sbi	0x14, 0	; 20
}
     3e6:	08 95       	ret

000003e8 <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	2e 97       	sbiw	r28, 0x0e	; 14
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     400:	28 e0       	ldi	r18, 0x08	; 8
     402:	29 83       	std	Y+1, r18	; 0x01
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	2a 83       	std	Y+2, r18	; 0x02
     408:	22 e0       	ldi	r18, 0x02	; 2
     40a:	2b 83       	std	Y+3, r18	; 0x03
     40c:	24 e0       	ldi	r18, 0x04	; 4
     40e:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     410:	de 01       	movw	r26, r28
     412:	15 96       	adiw	r26, 0x05	; 5
     414:	e7 ee       	ldi	r30, 0xE7	; 231
     416:	f1 e0       	ldi	r31, 0x01	; 1
     418:	2a e0       	ldi	r18, 0x0A	; 10
     41a:	01 90       	ld	r0, Z+
     41c:	0d 92       	st	X+, r0
     41e:	21 50       	subi	r18, 0x01	; 1
     420:	e1 f7       	brne	.-8      	; 0x41a <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     422:	2f ef       	ldi	r18, 0xFF	; 255
     424:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     426:	ea ed       	ldi	r30, 0xDA	; 218
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	20 81       	ld	r18, Z
     42c:	20 61       	ori	r18, 0x10	; 16
     42e:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     430:	20 81       	ld	r18, Z
     432:	2f 7e       	andi	r18, 0xEF	; 239
     434:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     436:	06 2f       	mov	r16, r22
     438:	10 e0       	ldi	r17, 0x00	; 0
     43a:	de 01       	movw	r26, r28
     43c:	a0 0f       	add	r26, r16
     43e:	b1 1f       	adc	r27, r17
     440:	11 96       	adiw	r26, 0x01	; 1
     442:	2c 91       	ld	r18, X
     444:	11 97       	sbiw	r26, 0x01	; 1
     446:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     448:	20 81       	ld	r18, Z
     44a:	20 62       	ori	r18, 0x20	; 32
     44c:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     44e:	20 81       	ld	r18, Z
     450:	2f 7d       	andi	r18, 0xDF	; 223
     452:	20 83       	st	Z, r18
     454:	48 2f       	mov	r20, r24
     456:	59 2f       	mov	r21, r25
     458:	87 e2       	ldi	r24, 0x27	; 39
     45a:	40 31       	cpi	r20, 0x10	; 16
     45c:	58 07       	cpc	r21, r24
     45e:	10 f0       	brcs	.+4      	; 0x464 <display_dec+0x7c>
     460:	4f e0       	ldi	r20, 0x0F	; 15
     462:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     464:	ca 01       	movw	r24, r20
     466:	96 95       	lsr	r25
     468:	87 95       	ror	r24
     46a:	96 95       	lsr	r25
     46c:	87 95       	ror	r24
     46e:	9a 01       	movw	r18, r20
     470:	36 95       	lsr	r19
     472:	27 95       	ror	r18
     474:	28 0f       	add	r18, r24
     476:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     478:	c9 01       	movw	r24, r18
     47a:	92 95       	swap	r25
     47c:	82 95       	swap	r24
     47e:	8f 70       	andi	r24, 0x0F	; 15
     480:	89 27       	eor	r24, r25
     482:	9f 70       	andi	r25, 0x0F	; 15
     484:	89 27       	eor	r24, r25
     486:	82 0f       	add	r24, r18
     488:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     48a:	29 2f       	mov	r18, r25
     48c:	33 27       	eor	r19, r19
     48e:	82 0f       	add	r24, r18
     490:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     492:	96 95       	lsr	r25
     494:	87 95       	ror	r24
     496:	96 95       	lsr	r25
     498:	87 95       	ror	r24
     49a:	96 95       	lsr	r25
     49c:	87 95       	ror	r24
	r = number - q2 * 10;
     49e:	28 2f       	mov	r18, r24
     4a0:	22 0f       	add	r18, r18
     4a2:	32 2f       	mov	r19, r18
     4a4:	33 0f       	add	r19, r19
     4a6:	33 0f       	add	r19, r19
     4a8:	23 0f       	add	r18, r19
     4aa:	e4 2f       	mov	r30, r20
     4ac:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	ea 30       	cpi	r30, 0x0A	; 10
     4b4:	10 f4       	brcc	.+4      	; 0x4ba <display_dec+0xd2>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	68 0f       	add	r22, r24
     4bc:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     4be:	9b 01       	movw	r18, r22
     4c0:	36 95       	lsr	r19
     4c2:	27 95       	ror	r18
     4c4:	36 95       	lsr	r19
     4c6:	27 95       	ror	r18
     4c8:	ab 01       	movw	r20, r22
     4ca:	56 95       	lsr	r21
     4cc:	47 95       	ror	r20
     4ce:	24 0f       	add	r18, r20
     4d0:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     4d2:	c9 01       	movw	r24, r18
     4d4:	92 95       	swap	r25
     4d6:	82 95       	swap	r24
     4d8:	8f 70       	andi	r24, 0x0F	; 15
     4da:	89 27       	eor	r24, r25
     4dc:	9f 70       	andi	r25, 0x0F	; 15
     4de:	89 27       	eor	r24, r25
     4e0:	82 0f       	add	r24, r18
     4e2:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     4e4:	29 2f       	mov	r18, r25
     4e6:	33 27       	eor	r19, r19
     4e8:	82 0f       	add	r24, r18
     4ea:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     4ec:	96 95       	lsr	r25
     4ee:	87 95       	ror	r24
     4f0:	96 95       	lsr	r25
     4f2:	87 95       	ror	r24
     4f4:	96 95       	lsr	r25
     4f6:	87 95       	ror	r24
	r = qa - q3 * 10;
     4f8:	98 2f       	mov	r25, r24
     4fa:	99 0f       	add	r25, r25
     4fc:	29 2f       	mov	r18, r25
     4fe:	22 0f       	add	r18, r18
     500:	22 0f       	add	r18, r18
     502:	92 0f       	add	r25, r18
     504:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	6a 30       	cpi	r22, 0x0A	; 10
     50a:	08 f4       	brcc	.+2      	; 0x50e <display_dec+0x126>
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	89 0f       	add	r24, r25
	tens_place = rem[r];
     510:	41 ef       	ldi	r20, 0xF1	; 241
     512:	51 e0       	ldi	r21, 0x01	; 1
     514:	da 01       	movw	r26, r20
     516:	a6 0f       	add	r26, r22
     518:	b1 1d       	adc	r27, r1
     51a:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     51c:	28 2f       	mov	r18, r24
     51e:	26 95       	lsr	r18
     520:	26 95       	lsr	r18
     522:	98 2f       	mov	r25, r24
     524:	96 95       	lsr	r25
     526:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     528:	29 2f       	mov	r18, r25
     52a:	22 95       	swap	r18
     52c:	2f 70       	andi	r18, 0x0F	; 15
     52e:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     530:	96 95       	lsr	r25
     532:	96 95       	lsr	r25
     534:	96 95       	lsr	r25
	r = qb - q4 * 10;
     536:	29 2f       	mov	r18, r25
     538:	22 0f       	add	r18, r18
     53a:	62 2f       	mov	r22, r18
     53c:	66 0f       	add	r22, r22
     53e:	66 0f       	add	r22, r22
     540:	26 0f       	add	r18, r22
     542:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     544:	da 01       	movw	r26, r20
     546:	a8 0f       	add	r26, r24
     548:	b1 1d       	adc	r27, r1
     54a:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     54c:	4e 0f       	add	r20, r30
     54e:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     550:	fa 01       	movw	r30, r20
     552:	40 81       	ld	r20, Z
     554:	40 93 b4 02 	sts	0x02B4, r20
	digit_index[1] = tens_place;
     558:	30 93 b5 02 	sts	0x02B5, r19
	digit_index[2] = hunds_place;
     55c:	20 93 b6 02 	sts	0x02B6, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	8a 30       	cpi	r24, 0x0A	; 10
     564:	08 f4       	brcc	.+2      	; 0x568 <display_dec+0x180>
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     56a:	90 93 b7 02 	sts	0x02B7, r25

	cathode_byte = dec[digit_index[place]];
     56e:	f8 01       	movw	r30, r16
     570:	ec 54       	subi	r30, 0x4C	; 76
     572:	fd 4f       	sbci	r31, 0xFD	; 253
     574:	80 81       	ld	r24, Z
     576:	fe 01       	movw	r30, r28
     578:	e8 0f       	add	r30, r24
     57a:	f1 1d       	adc	r31, r1
     57c:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     57e:	90 91 07 03 	lds	r25, 0x0307
     582:	92 30       	cpi	r25, 0x02	; 2
     584:	11 f4       	brne	.+4      	; 0x58a <display_dec+0x1a2>
     586:	80 62       	ori	r24, 0x20	; 32
     588:	03 c0       	rjmp	.+6      	; 0x590 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     58a:	91 30       	cpi	r25, 0x01	; 1
     58c:	09 f4       	brne	.+2      	; 0x590 <display_dec+0x1a8>
     58e:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     590:	80 95       	com	r24
     592:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     594:	ea ed       	ldi	r30, 0xDA	; 218
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	80 61       	ori	r24, 0x10	; 16
     59c:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     59e:	80 81       	ld	r24, Z
     5a0:	8f 7e       	andi	r24, 0xEF	; 239
     5a2:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     5a4:	2e 96       	adiw	r28, 0x0e	; 14
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	08 95       	ret

000005ba <update_display>:

void update_display(uint16_t number, uint8_t type) {
     5ba:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     5bc:	66 23       	and	r22, r22
     5be:	69 f4       	brne	.+26     	; 0x5da <update_display+0x20>

		
			
		display_dec(number, place);
     5c0:	c0 91 b8 02 	lds	r28, 0x02B8
     5c4:	6c 2f       	mov	r22, r28
     5c6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     5ca:	8c 2f       	mov	r24, r28
     5cc:	8f 5f       	subi	r24, 0xFF	; 255
     5ce:	80 93 b8 02 	sts	0x02B8, r24
     5d2:	c3 30       	cpi	r28, 0x03	; 3
     5d4:	11 f4       	brne	.+4      	; 0x5da <update_display+0x20>
		{
			place = 0;
     5d6:	10 92 b8 02 	sts	0x02B8, r1
		
		
	}
	
	
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	8f 93       	push	r24
     5ea:	9f 93       	push	r25
     5ec:	ef 93       	push	r30
     5ee:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     5f0:	80 91 7c 03 	lds	r24, 0x037C
     5f4:	81 50       	subi	r24, 0x01	; 1
     5f6:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     5f8:	80 91 7d 03 	lds	r24, 0x037D
     5fc:	88 23       	and	r24, r24
     5fe:	a1 f4       	brne	.+40     	; 0x628 <__vector_10+0x4a>
		count_finished = FALSE;
     600:	10 92 7a 03 	sts	0x037A, r1
		no_overflow = TRUE;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     60a:	80 93 7d 03 	sts	0x037D, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     60e:	e1 e8       	ldi	r30, 0x81	; 129
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	90 91 7b 03 	lds	r25, 0x037B
     618:	89 2b       	or	r24, r25
     61a:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     61c:	ef e6       	ldi	r30, 0x6F	; 111
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	81 60       	ori	r24, 0x01	; 1
     624:	80 83       	st	Z, r24
     626:	11 c0       	rjmp	.+34     	; 0x64a <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     628:	e4 e8       	ldi	r30, 0x84	; 132
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	91 81       	ldd	r25, Z+1	; 0x01
     630:	90 93 79 03 	sts	0x0379, r25
     634:	80 93 78 03 	sts	0x0378, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     638:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 7a 03 	sts	0x037A, r24
		period_counter = 0;
     642:	10 92 7d 03 	sts	0x037D, r1
		TCNT1 = 0; //reset timer/counter 1
     646:	11 82       	std	Z+1, r1	; 0x01
     648:	10 82       	st	Z, r1
	}
	
	
	
	
}
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <__vector_9>:



ISR (TIMER1_OVF_vect) {
     65c:	1f 92       	push	r1
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	0f 92       	push	r0
     664:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     666:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     674:	1f 92       	push	r1
     676:	0f 92       	push	r0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	2f 93       	push	r18
     680:	3f 93       	push	r19
     682:	4f 93       	push	r20
     684:	5f 93       	push	r21
     686:	6f 93       	push	r22
     688:	7f 93       	push	r23
     68a:	8f 93       	push	r24
     68c:	9f 93       	push	r25
     68e:	af 93       	push	r26
     690:	bf 93       	push	r27
     692:	ef 93       	push	r30
     694:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     696:	80 91 cb 03 	lds	r24, 0x03CB
     69a:	86 95       	lsr	r24
     69c:	90 91 cc 03 	lds	r25, 0x03CC
     6a0:	98 17       	cp	r25, r24
     6a2:	31 f4       	brne	.+12     	; 0x6b0 <__vector_7+0x3c>
				
		PORTB &= ~ (1<<ARP_SYNC_LED);
     6a4:	2f 98       	cbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     6a6:	80 91 89 03 	lds	r24, 0x0389
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <__vector_7+0x3c>
     6ae:	89 98       	cbi	0x11, 1	; 17
	}	
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     6b0:	80 91 cc 03 	lds	r24, 0x03CC
     6b4:	8f 5f       	subi	r24, 0xFF	; 255
     6b6:	80 93 cc 03 	sts	0x03CC, r24
     6ba:	90 91 cb 03 	lds	r25, 0x03CB
     6be:	89 17       	cp	r24, r25
     6c0:	71 f4       	brne	.+28     	; 0x6de <__vector_7+0x6a>
		
		system_clock.ppqn_counter = 0;
     6c2:	10 92 cc 03 	sts	0x03CC, r1
		PORTB |= (1<<ARP_SYNC_LED);
     6c6:	2f 9a       	sbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) {
     6c8:	80 91 89 03 	lds	r24, 0x0389
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	39 f4       	brne	.+14     	; 0x6de <__vector_7+0x6a>
			
			//step arp note here based on range and note sequence from assigner	

			
			if (gate_buffer) { //if there are still notes in gate buffer
     6d0:	80 91 b0 02 	lds	r24, 0x02B0
     6d4:	88 23       	and	r24, r24
     6d6:	19 f0       	breq	.+6      	; 0x6de <__vector_7+0x6a>
				step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
     6d8:	0e 94 12 01 	call	0x224	; 0x224 <step_arp_note>
				PORTF |= (1<<GATE);
     6dc:	89 9a       	sbi	0x11, 1	; 17
				
			//if (gate_buffer != 0) PORTF |= (1<<GATE); //if arp is running and there are notes to be played, turn gate ON
		}			
	}
	
     6de:	ff 91       	pop	r31
     6e0:	ef 91       	pop	r30
     6e2:	bf 91       	pop	r27
     6e4:	af 91       	pop	r26
     6e6:	9f 91       	pop	r25
     6e8:	8f 91       	pop	r24
     6ea:	7f 91       	pop	r23
     6ec:	6f 91       	pop	r22
     6ee:	5f 91       	pop	r21
     6f0:	4f 91       	pop	r20
     6f2:	3f 91       	pop	r19
     6f4:	2f 91       	pop	r18
     6f6:	0f 90       	pop	r0
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	0f 90       	pop	r0
     6fc:	1f 90       	pop	r1
     6fe:	18 95       	reti

00000700 <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     700:	68 3f       	cpi	r22, 0xF8	; 248
     702:	19 f0       	breq	.+6      	; 0x70a <real_time_event+0xa>
     704:	6a 3f       	cpi	r22, 0xFA	; 250
     706:	c1 f4       	brne	.+48     	; 0x738 <real_time_event+0x38>
     708:	15 c0       	rjmp	.+42     	; 0x734 <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     70a:	80 91 d2 03 	lds	r24, 0x03D2
     70e:	8f 5f       	subi	r24, 0xFF	; 255
     710:	80 93 d2 03 	sts	0x03D2, r24
     714:	90 91 d1 03 	lds	r25, 0x03D1
     718:	89 17       	cp	r24, r25
     71a:	71 f4       	brne	.+28     	; 0x738 <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     71c:	2c 9a       	sbi	0x05, 4	; 5
     71e:	86 e0       	ldi	r24, 0x06	; 6
     720:	8a 95       	dec	r24
     722:	f1 f7       	brne	.-4      	; 0x720 <real_time_event+0x20>
     724:	00 c0       	rjmp	.+0      	; 0x726 <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     726:	85 b1       	in	r24, 0x05	; 5
     728:	80 58       	subi	r24, 0x80	; 128
     72a:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     72c:	10 92 d2 03 	sts	0x03D2, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     730:	2c 98       	cbi	0x05, 4	; 5
     732:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     734:	10 92 d2 03 	sts	0x03D2, r1
     738:	08 95       	ret

0000073a <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     73a:	84 2f       	mov	r24, r20
	
	remove_note(note);
     73c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <remove_note>
	gate_buffer--;
     740:	80 91 b0 02 	lds	r24, 0x02B0
     744:	81 50       	subi	r24, 0x01	; 1
     746:	80 93 b0 02 	sts	0x02B0, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     74a:	88 23       	and	r24, r24
     74c:	09 f4       	brne	.+2      	; 0x750 <note_off_event+0x16>
     74e:	89 98       	cbi	0x11, 1	; 17
	if (arp.clock_source != OFF) {	//if arp on, update arp sequence
     750:	80 91 89 03 	lds	r24, 0x0389
     754:	82 30       	cpi	r24, 0x02	; 2
     756:	51 f0       	breq	.+20     	; 0x76c <note_off_event+0x32>
		//gate_buffer--;
		if (gate_buffer == 0) arp.current_note = arp.previous_note;
     758:	80 91 b0 02 	lds	r24, 0x02B0
     75c:	88 23       	and	r24, r24
     75e:	21 f4       	brne	.+8      	; 0x768 <note_off_event+0x2e>
     760:	80 91 87 03 	lds	r24, 0x0387
     764:	80 93 88 03 	sts	0x0388, r24
		update_arp_sequence();
     768:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     76c:	08 95       	ret

0000076e <note_on_event>:





void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     76e:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     770:	90 91 ff 02 	lds	r25, 0x02FF
     774:	90 ff       	sbrs	r25, 0
     776:	06 c0       	rjmp	.+12     	; 0x784 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     778:	2c 9a       	sbi	0x05, 4	; 5
     77a:	96 e0       	ldi	r25, 0x06	; 6
     77c:	9a 95       	dec	r25
     77e:	f1 f7       	brne	.-4      	; 0x77c <note_on_event+0xe>
     780:	00 c0       	rjmp	.+0      	; 0x782 <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     782:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     784:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     788:	22 23       	and	r18, r18
     78a:	59 f4       	brne	.+22     	; 0x7a2 <note_on_event+0x34>
		remove_note(note);
     78c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <remove_note>
		gate_buffer--;
     790:	80 91 b0 02 	lds	r24, 0x02B0
     794:	81 50       	subi	r24, 0x01	; 1
     796:	80 93 b0 02 	sts	0x02B0, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     79a:	88 23       	and	r24, r24
     79c:	91 f4       	brne	.+36     	; 0x7c2 <note_on_event+0x54>
     79e:	89 98       	cbi	0x11, 1	; 17
     7a0:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);
     7a2:	62 2f       	mov	r22, r18
     7a4:	0e 94 3c 01 	call	0x278	; 0x278 <new_note>
		
		gate_buffer++;
     7a8:	80 91 b0 02 	lds	r24, 0x02B0
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
     7ae:	80 93 b0 02 	sts	0x02B0, r24
		if (arp.clock_source == OFF) { //if arp is off, handle gate
     7b2:	80 91 89 03 	lds	r24, 0x0389
     7b6:	82 30       	cpi	r24, 0x02	; 2
     7b8:	11 f4       	brne	.+4      	; 0x7be <note_on_event+0x50>
			//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
			//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
			//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
			//could implement this with timers. MIDI Implant is 0.5 ms. Could maybe use Timer1 here to generate 0.3-0.5 ms gate retrigger
			
			PORTF |= (1<<GATE); //if arp is OFF then turn on gate. Otherwise arpeggiator handles GATE
     7ba:	89 9a       	sbi	0x11, 1	; 17
     7bc:	08 95       	ret
		} else {
			
			update_arp_sequence();
     7be:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     7c2:	08 95       	ret

000007c4 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     7c4:	87 e2       	ldi	r24, 0x27	; 39
     7c6:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     7ca:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     7ce:	88 e9       	ldi	r24, 0x98	; 152
     7d0:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     7d4:	08 95       	ret

000007d6 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     7d6:	1f 92       	push	r1
     7d8:	0f 92       	push	r0
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	0f 92       	push	r0
     7de:	11 24       	eor	r1, r1
     7e0:	2f 93       	push	r18
     7e2:	3f 93       	push	r19
     7e4:	4f 93       	push	r20
     7e6:	5f 93       	push	r21
     7e8:	6f 93       	push	r22
     7ea:	7f 93       	push	r23
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	af 93       	push	r26
     7f2:	bf 93       	push	r27
     7f4:	ef 93       	push	r30
     7f6:	ff 93       	push	r31
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	0f 92       	push	r0
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     802:	80 91 c6 00 	lds	r24, 0x00C6
     806:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     808:	87 ed       	ldi	r24, 0xD7	; 215
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	ae 01       	movw	r20, r28
     810:	4f 5f       	subi	r20, 0xFF	; 255
     812:	5f 4f       	sbci	r21, 0xFF	; 255
     814:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     818:	0f 90       	pop	r0
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	bf 91       	pop	r27
     824:	af 91       	pop	r26
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	7f 91       	pop	r23
     82c:	6f 91       	pop	r22
     82e:	5f 91       	pop	r21
     830:	4f 91       	pop	r20
     832:	3f 91       	pop	r19
     834:	2f 91       	pop	r18
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     840:	c0 e8       	ldi	r28, 0x80	; 128
     842:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     844:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     846:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     848:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     84a:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     84c:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     84e:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     850:	0e 94 73 07 	call	0xee6	; 0xee6 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     854:	a9 ed       	ldi	r26, 0xD9	; 217
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	8c 91       	ld	r24, X
     85a:	80 6c       	ori	r24, 0xC0	; 192
     85c:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     85e:	ea ed       	ldi	r30, 0xDA	; 218
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	80 6c       	ori	r24, 0xC0	; 192
     866:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     868:	81 b1       	in	r24, 0x01	; 1
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     86e:	92 b1       	in	r25, 0x02	; 2
     870:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     872:	8c 91       	ld	r24, X
     874:	80 63       	ori	r24, 0x30	; 48
     876:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     878:	80 81       	ld	r24, Z
     87a:	8f 7c       	andi	r24, 0xCF	; 207
     87c:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     87e:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     880:	ec ed       	ldi	r30, 0xDC	; 220
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	80 62       	ori	r24, 0x20	; 32
     888:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     88a:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     88c:	ed ed       	ldi	r30, 0xDD	; 221
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	80 62       	ori	r24, 0x20	; 32
     894:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     896:	80 81       	ld	r24, Z
     898:	8f 7d       	andi	r24, 0xDF	; 223
     89a:	80 83       	st	Z, r24
	DATA_BUS = 0;
     89c:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     89e:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     8a2:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     8a6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     8aa:	c7 ed       	ldi	r28, 0xD7	; 215
     8ac:	d3 e0       	ldi	r29, 0x03	; 3
     8ae:	ce 01       	movw	r24, r28
     8b0:	0e 94 49 19 	call	0x3292	; 0x3292 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     8b4:	ce 01       	movw	r24, r28
     8b6:	67 eb       	ldi	r22, 0xB7	; 183
     8b8:	73 e0       	ldi	r23, 0x03	; 3
     8ba:	0e 94 11 19 	call	0x3222	; 0x3222 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     8be:	ce 01       	movw	r24, r28
     8c0:	6d e9       	ldi	r22, 0x9D	; 157
     8c2:	73 e0       	ldi	r23, 0x03	; 3
     8c4:	0e 94 15 19 	call	0x322a	; 0x322a <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     8c8:	ce 01       	movw	r24, r28
     8ca:	60 e8       	ldi	r22, 0x80	; 128
     8cc:	73 e0       	ldi	r23, 0x03	; 3
     8ce:	0e 94 35 19 	call	0x326a	; 0x326a <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     8d2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     8d6:	0e 94 98 07 	call	0xf30	; 0xf30 <update_spi>
	
	
	current_patch.number = 1;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     8e0:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     8e2:	0e 94 77 15 	call	0x2aee	; 0x2aee <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	0e 94 11 0a 	call	0x1422	; 0x1422 <load_patch>
	
	setup_system_clock();
     8ec:	0e 94 91 01 	call	0x322	; 0x322 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     8f0:	88 e1       	ldi	r24, 0x18	; 24
     8f2:	80 93 cb 03 	sts	0x03CB, r24
	arp.step_position = 0; //initialize step position
     8f6:	10 92 86 03 	sts	0x0386, r1

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     8fa:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     8fc:	0f 2e       	mov	r0, r31
     8fe:	f0 e8       	ldi	r31, 0x80	; 128
     900:	ef 2e       	mov	r14, r31
     902:	f3 e0       	ldi	r31, 0x03	; 3
     904:	ff 2e       	mov	r15, r31
     906:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     908:	0f 2e       	mov	r0, r31
     90a:	f7 e0       	ldi	r31, 0x07	; 7
     90c:	cf 2e       	mov	r12, r31
     90e:	f3 e0       	ldi	r31, 0x03	; 3
     910:	df 2e       	mov	r13, r31
     912:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     914:	bb 24       	eor	r11, r11
     916:	68 94       	set
     918:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     91a:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     91c:	c8 01       	movw	r24, r16
     91e:	0e 94 a4 1b 	call	0x3748	; 0x3748 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     922:	80 91 fd 01 	lds	r24, 0x01FD
     926:	90 91 fe 01 	lds	r25, 0x01FE
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     930:	0e 94 c7 04 	call	0x98e	; 0x98e <scan_pots>
		update_control_voltages();
     934:	0e 94 54 05 	call	0xaa8	; 0xaa8 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     938:	80 91 b9 02 	lds	r24, 0x02B9
     93c:	98 2f       	mov	r25, r24
     93e:	9f 5f       	subi	r25, 0xFF	; 255
     940:	90 93 b9 02 	sts	0x02B9, r25
     944:	85 30       	cpi	r24, 0x05	; 5
     946:	51 f7       	brne	.-44     	; 0x91c <main+0xdc>
		{
			switch_timer = 0;
     948:	10 92 b9 02 	sts	0x02B9, r1
			switch_press = 0; //reset global switch press flag
     94c:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     950:	f7 01       	movw	r30, r14
     952:	c0 81       	ld	r28, Z
     954:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <read_switch_port>
     958:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     95a:	f6 01       	movw	r30, r12
     95c:	90 81       	ld	r25, Z
     95e:	91 30       	cpi	r25, 0x01	; 1
     960:	11 f4       	brne	.+4      	; 0x966 <main+0x126>
     962:	cd 2f       	mov	r28, r29
     964:	01 c0       	rjmp	.+2      	; 0x968 <main+0x128>
     966:	c0 e0       	ldi	r28, 0x00	; 0
     968:	c8 2b       	or	r28, r24
     96a:	f7 01       	movw	r30, r14
     96c:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     96e:	0e 94 98 07 	call	0xf30	; 0xf30 <update_spi>
			if (switch_press) { 
     972:	80 91 c1 02 	lds	r24, 0x02C1
     976:	88 23       	and	r24, r24
     978:	39 f0       	breq	.+14     	; 0x988 <main+0x148>
				update_patch();
     97a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     97e:	f6 01       	movw	r30, r12
     980:	80 81       	ld	r24, Z
     982:	88 23       	and	r24, r24
     984:	09 f4       	brne	.+2      	; 0x988 <main+0x148>
     986:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     988:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <update_patch_programmer>
     98c:	c7 cf       	rjmp	.-114    	; 0x91c <main+0xdc>

0000098e <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     98e:	bf 92       	push	r11
     990:	cf 92       	push	r12
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	c0 e0       	ldi	r28, 0x00	; 0
     9a2:	d1 e0       	ldi	r29, 0x01	; 1
     9a4:	02 ec       	ldi	r16, 0xC2	; 194
     9a6:	12 e0       	ldi	r17, 0x02	; 2
     9a8:	0f 2e       	mov	r0, r31
     9aa:	fc e3       	ldi	r31, 0x3C	; 60
     9ac:	cf 2e       	mov	r12, r31
     9ae:	dd 24       	eor	r13, r13
     9b0:	f0 2d       	mov	r31, r0
     9b2:	cc 0e       	add	r12, r28
     9b4:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     9b6:	0f 2e       	mov	r0, r31
     9b8:	f7 e0       	ldi	r31, 0x07	; 7
     9ba:	ef 2e       	mov	r14, r31
     9bc:	f3 e0       	ldi	r31, 0x03	; 3
     9be:	ff 2e       	mov	r15, r31
     9c0:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     9c2:	bb 24       	eor	r11, r11
     9c4:	68 94       	set
     9c6:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     9c8:	88 81       	ld	r24, Y
     9ca:	99 81       	ldd	r25, Y+1	; 0x01
     9cc:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     9d0:	90 93 bc 02 	sts	0x02BC, r25
     9d4:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     9d8:	e8 81       	ld	r30, Y
     9da:	f9 81       	ldd	r31, Y+1	; 0x01
     9dc:	40 81       	ld	r20, Z
     9de:	21 81       	ldd	r18, Z+1	; 0x01
     9e0:	52 2f       	mov	r21, r18
     9e2:	53 70       	andi	r21, 0x03	; 3
     9e4:	84 1b       	sub	r24, r20
     9e6:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     9e8:	95 95       	asr	r25
     9ea:	87 95       	ror	r24
     9ec:	95 95       	asr	r25
     9ee:	87 95       	ror	r24
     9f0:	84 0f       	add	r24, r20
     9f2:	95 1f       	adc	r25, r21
     9f4:	80 83       	st	Z, r24
     9f6:	89 2f       	mov	r24, r25
     9f8:	83 70       	andi	r24, 0x03	; 3
     9fa:	2c 7f       	andi	r18, 0xFC	; 252
     9fc:	28 2b       	or	r18, r24
     9fe:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     a00:	e9 91       	ld	r30, Y+
     a02:	f9 91       	ld	r31, Y+
     a04:	92 81       	ldd	r25, Z+2	; 0x02
     a06:	20 81       	ld	r18, Z
     a08:	81 81       	ldd	r24, Z+1	; 0x01
     a0a:	38 2f       	mov	r19, r24
     a0c:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     a0e:	d7 01       	movw	r26, r14
     a10:	8c 91       	ld	r24, X
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	19 f0       	breq	.+6      	; 0xa1c <scan_pots+0x8e>
     a16:	83 81       	ldd	r24, Z+3	; 0x03
     a18:	88 23       	and	r24, r24
     a1a:	24 f0       	brlt	.+8      	; 0xa24 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     a1c:	f8 01       	movw	r30, r16
     a1e:	31 83       	std	Z+1, r19	; 0x01
     a20:	20 83       	st	Z, r18
     a22:	14 c0       	rjmp	.+40     	; 0xa4c <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     a24:	49 2f       	mov	r20, r25
     a26:	43 50       	subi	r20, 0x03	; 3
     a28:	c9 01       	movw	r24, r18
     a2a:	95 95       	asr	r25
     a2c:	87 95       	ror	r24
     a2e:	95 95       	asr	r25
     a30:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     a32:	94 2f       	mov	r25, r20
     a34:	98 1b       	sub	r25, r24
     a36:	9a 3f       	cpi	r25, 0xFA	; 250
     a38:	48 f4       	brcc	.+18     	; 0xa4c <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     a3a:	d8 01       	movw	r26, r16
     a3c:	11 96       	adiw	r26, 0x01	; 1
     a3e:	3c 93       	st	X, r19
     a40:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     a42:	83 81       	ldd	r24, Z+3	; 0x03
     a44:	8f 77       	andi	r24, 0x7F	; 127
     a46:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     a48:	f7 01       	movw	r30, r14
     a4a:	b0 82       	st	Z, r11
     a4c:	0e 5f       	subi	r16, 0xFE	; 254
     a4e:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     a50:	cc 15       	cp	r28, r12
     a52:	dd 05       	cpc	r29, r13
     a54:	09 f0       	breq	.+2      	; 0xa58 <scan_pots+0xca>
     a56:	b8 cf       	rjmp	.-144    	; 0x9c8 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     a58:	8c e7       	ldi	r24, 0x7C	; 124
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     a60:	90 93 bc 02 	sts	0x02BC, r25
     a64:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     a68:	20 91 7c 01 	lds	r18, 0x017C
     a6c:	40 91 7d 01 	lds	r20, 0x017D
     a70:	34 2f       	mov	r19, r20
     a72:	33 70       	andi	r19, 0x03	; 3
     a74:	82 1b       	sub	r24, r18
     a76:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     a78:	95 95       	asr	r25
     a7a:	87 95       	ror	r24
     a7c:	95 95       	asr	r25
     a7e:	87 95       	ror	r24
     a80:	28 0f       	add	r18, r24
     a82:	39 1f       	adc	r19, r25
     a84:	20 93 7c 01 	sts	0x017C, r18
     a88:	83 2f       	mov	r24, r19
     a8a:	83 70       	andi	r24, 0x03	; 3
     a8c:	4c 7f       	andi	r20, 0xFC	; 252
     a8e:	48 2b       	or	r20, r24
     a90:	40 93 7d 01 	sts	0x017D, r20
	
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	08 95       	ret

00000aa8 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     aac:	60 91 c2 02 	lds	r22, 0x02C2
     ab0:	70 91 c3 02 	lds	r23, 0x02C3
     ab4:	62 95       	swap	r22
     ab6:	72 95       	swap	r23
     ab8:	70 7f       	andi	r23, 0xF0	; 240
     aba:	76 27       	eor	r23, r22
     abc:	60 7f       	andi	r22, 0xF0	; 240
     abe:	76 27       	eor	r23, r22
     ac0:	84 ee       	ldi	r24, 0xE4	; 228
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     ac8:	60 91 c4 02 	lds	r22, 0x02C4
     acc:	70 91 c5 02 	lds	r23, 0x02C5
     ad0:	62 95       	swap	r22
     ad2:	72 95       	swap	r23
     ad4:	70 7f       	andi	r23, 0xF0	; 240
     ad6:	76 27       	eor	r23, r22
     ad8:	60 7f       	andi	r22, 0xF0	; 240
     ada:	76 27       	eor	r23, r22
     adc:	83 ee       	ldi	r24, 0xE3	; 227
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     ae4:	60 91 c6 02 	lds	r22, 0x02C6
     ae8:	70 91 c7 02 	lds	r23, 0x02C7
     aec:	66 0f       	add	r22, r22
     aee:	77 1f       	adc	r23, r23
     af0:	66 0f       	add	r22, r22
     af2:	77 1f       	adc	r23, r23
     af4:	66 0f       	add	r22, r22
     af6:	77 1f       	adc	r23, r23
     af8:	82 ee       	ldi	r24, 0xE2	; 226
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     b00:	60 91 c8 02 	lds	r22, 0x02C8
     b04:	70 91 c9 02 	lds	r23, 0x02C9
     b08:	62 95       	swap	r22
     b0a:	72 95       	swap	r23
     b0c:	70 7f       	andi	r23, 0xF0	; 240
     b0e:	76 27       	eor	r23, r22
     b10:	60 7f       	andi	r22, 0xF0	; 240
     b12:	76 27       	eor	r23, r22
     b14:	83 eb       	ldi	r24, 0xB3	; 179
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     b1c:	60 91 ca 02 	lds	r22, 0x02CA
     b20:	70 91 cb 02 	lds	r23, 0x02CB
     b24:	66 0f       	add	r22, r22
     b26:	77 1f       	adc	r23, r23
     b28:	66 0f       	add	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	66 0f       	add	r22, r22
     b2e:	77 1f       	adc	r23, r23
     b30:	81 ee       	ldi	r24, 0xE1	; 225
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     b38:	60 91 cc 02 	lds	r22, 0x02CC
     b3c:	70 91 cd 02 	lds	r23, 0x02CD
     b40:	62 95       	swap	r22
     b42:	72 95       	swap	r23
     b44:	70 7f       	andi	r23, 0xF0	; 240
     b46:	76 27       	eor	r23, r22
     b48:	60 7f       	andi	r22, 0xF0	; 240
     b4a:	76 27       	eor	r23, r22
     b4c:	80 ee       	ldi	r24, 0xE0	; 224
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     b54:	60 91 ce 02 	lds	r22, 0x02CE
     b58:	70 91 cf 02 	lds	r23, 0x02CF
     b5c:	62 95       	swap	r22
     b5e:	72 95       	swap	r23
     b60:	70 7f       	andi	r23, 0xF0	; 240
     b62:	76 27       	eor	r23, r22
     b64:	60 7f       	andi	r22, 0xF0	; 240
     b66:	76 27       	eor	r23, r22
     b68:	8f ed       	ldi	r24, 0xDF	; 223
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     b70:	60 91 d0 02 	lds	r22, 0x02D0
     b74:	70 91 d1 02 	lds	r23, 0x02D1
     b78:	62 95       	swap	r22
     b7a:	72 95       	swap	r23
     b7c:	70 7f       	andi	r23, 0xF0	; 240
     b7e:	76 27       	eor	r23, r22
     b80:	60 7f       	andi	r22, 0xF0	; 240
     b82:	76 27       	eor	r23, r22
     b84:	8e ed       	ldi	r24, 0xDE	; 222
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     b8c:	80 91 d4 02 	lds	r24, 0x02D4
     b90:	90 91 d5 02 	lds	r25, 0x02D5
     b94:	c0 e0       	ldi	r28, 0x00	; 0
     b96:	d2 e0       	ldi	r29, 0x02	; 2
     b98:	c8 1b       	sub	r28, r24
     b9a:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     b9c:	60 91 73 03 	lds	r22, 0x0373
     ba0:	70 91 74 03 	lds	r23, 0x0374
     ba4:	60 50       	subi	r22, 0x00	; 0
     ba6:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     ba8:	80 91 d2 02 	lds	r24, 0x02D2
     bac:	90 91 d3 02 	lds	r25, 0x02D3
     bb0:	68 1b       	sub	r22, r24
     bb2:	79 0b       	sbc	r23, r25
     bb4:	6c 0f       	add	r22, r28
     bb6:	7d 1f       	adc	r23, r29
     bb8:	8d ed       	ldi	r24, 0xDD	; 221
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     bc0:	60 91 75 03 	lds	r22, 0x0375
     bc4:	70 91 76 03 	lds	r23, 0x0376
     bc8:	6c 0f       	add	r22, r28
     bca:	7d 1f       	adc	r23, r29
     bcc:	8c ed       	ldi	r24, 0xDC	; 220
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     bd4:	60 91 d6 02 	lds	r22, 0x02D6
     bd8:	70 91 d7 02 	lds	r23, 0x02D7
     bdc:	62 95       	swap	r22
     bde:	72 95       	swap	r23
     be0:	70 7f       	andi	r23, 0xF0	; 240
     be2:	76 27       	eor	r23, r22
     be4:	60 7f       	andi	r22, 0xF0	; 240
     be6:	76 27       	eor	r23, r22
     be8:	8b ed       	ldi	r24, 0xDB	; 219
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     bf0:	60 91 da 02 	lds	r22, 0x02DA
     bf4:	70 91 db 02 	lds	r23, 0x02DB
     bf8:	62 95       	swap	r22
     bfa:	72 95       	swap	r23
     bfc:	70 7f       	andi	r23, 0xF0	; 240
     bfe:	76 27       	eor	r23, r22
     c00:	60 7f       	andi	r22, 0xF0	; 240
     c02:	76 27       	eor	r23, r22
     c04:	8a ed       	ldi	r24, 0xDA	; 218
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     c0c:	60 91 dc 02 	lds	r22, 0x02DC
     c10:	70 91 dd 02 	lds	r23, 0x02DD
     c14:	62 95       	swap	r22
     c16:	72 95       	swap	r23
     c18:	70 7f       	andi	r23, 0xF0	; 240
     c1a:	76 27       	eor	r23, r22
     c1c:	60 7f       	andi	r22, 0xF0	; 240
     c1e:	76 27       	eor	r23, r22
     c20:	89 ed       	ldi	r24, 0xD9	; 217
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     c28:	60 91 7c 01 	lds	r22, 0x017C
     c2c:	80 91 7d 01 	lds	r24, 0x017D
     c30:	78 2f       	mov	r23, r24
     c32:	73 70       	andi	r23, 0x03	; 3
     c34:	62 95       	swap	r22
     c36:	72 95       	swap	r23
     c38:	70 7f       	andi	r23, 0xF0	; 240
     c3a:	76 27       	eor	r23, r22
     c3c:	60 7f       	andi	r22, 0xF0	; 240
     c3e:	76 27       	eor	r23, r22
     c40:	88 ed       	ldi	r24, 0xD8	; 216
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     c48:	60 91 de 02 	lds	r22, 0x02DE
     c4c:	70 91 df 02 	lds	r23, 0x02DF
     c50:	62 95       	swap	r22
     c52:	72 95       	swap	r23
     c54:	70 7f       	andi	r23, 0xF0	; 240
     c56:	76 27       	eor	r23, r22
     c58:	60 7f       	andi	r22, 0xF0	; 240
     c5a:	76 27       	eor	r23, r22
     c5c:	87 ed       	ldi	r24, 0xD7	; 215
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     c64:	60 91 e0 02 	lds	r22, 0x02E0
     c68:	70 91 e1 02 	lds	r23, 0x02E1
     c6c:	62 95       	swap	r22
     c6e:	72 95       	swap	r23
     c70:	70 7f       	andi	r23, 0xF0	; 240
     c72:	76 27       	eor	r23, r22
     c74:	60 7f       	andi	r22, 0xF0	; 240
     c76:	76 27       	eor	r23, r22
     c78:	86 ed       	ldi	r24, 0xD6	; 214
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     c80:	60 91 e2 02 	lds	r22, 0x02E2
     c84:	70 91 e3 02 	lds	r23, 0x02E3
     c88:	62 95       	swap	r22
     c8a:	72 95       	swap	r23
     c8c:	70 7f       	andi	r23, 0xF0	; 240
     c8e:	76 27       	eor	r23, r22
     c90:	60 7f       	andi	r22, 0xF0	; 240
     c92:	76 27       	eor	r23, r22
     c94:	85 ed       	ldi	r24, 0xD5	; 213
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     c9c:	0e 94 32 01 	call	0x264	; 0x264 <get_current_note>
     ca0:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     ca2:	88 30       	cpi	r24, 0x08	; 8
     ca4:	08 f4       	brcc	.+2      	; 0xca8 <update_control_voltages+0x200>
     ca6:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = current_patch.number + 100*(arp.sequence[arp.step_position].note); //100*note;
	//value_to_display = arp.sequence[arp.step_position].note;
	//uint8_t arp_note = arp.sequence[arp.step_position].note;
	//if (arp_note == EMPTY) arp_note = 0;
	value_to_display = current_patch.number + 100*arp.step_position;
     ca8:	60 91 03 03 	lds	r22, 0x0303
     cac:	40 91 86 03 	lds	r20, 0x0386
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	24 e6       	ldi	r18, 0x64	; 100
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	42 9f       	mul	r20, r18
     cb8:	c0 01       	movw	r24, r0
     cba:	43 9f       	mul	r20, r19
     cbc:	90 0d       	add	r25, r0
     cbe:	52 9f       	mul	r21, r18
     cc0:	90 0d       	add	r25, r0
     cc2:	11 24       	eor	r1, r1
     cc4:	86 0f       	add	r24, r22
     cc6:	91 1d       	adc	r25, r1
     cc8:	90 93 fe 01 	sts	0x01FE, r25
     ccc:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     cd0:	8c 2f       	mov	r24, r28
     cd2:	88 50       	subi	r24, 0x08	; 8
     cd4:	6f e0       	ldi	r22, 0x0F	; 15
     cd6:	73 e0       	ldi	r23, 0x03	; 3
     cd8:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     cdc:	bc 01       	movw	r22, r24
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	20 91 e6 02 	lds	r18, 0x02E6
     ce6:	30 91 e7 02 	lds	r19, 0x02E7
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__mulsi3>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	07 2e       	mov	r0, r23
     cf8:	7a e0       	ldi	r23, 0x0A	; 10
     cfa:	b6 95       	lsr	r27
     cfc:	a7 95       	ror	r26
     cfe:	97 95       	ror	r25
     d00:	87 95       	ror	r24
     d02:	7a 95       	dec	r23
     d04:	d1 f7       	brne	.-12     	; 0xcfa <update_control_voltages+0x252>
     d06:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     d08:	60 91 e4 02 	lds	r22, 0x02E4
     d0c:	70 91 e5 02 	lds	r23, 0x02E5
     d10:	62 95       	swap	r22
     d12:	72 95       	swap	r23
     d14:	70 7f       	andi	r23, 0xF0	; 240
     d16:	76 27       	eor	r23, r22
     d18:	60 7f       	andi	r22, 0xF0	; 240
     d1a:	76 27       	eor	r23, r22
     d1c:	86 0f       	add	r24, r22
     d1e:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     d20:	bc 01       	movw	r22, r24
     d22:	80 e4       	ldi	r24, 0x40	; 64
     d24:	60 30       	cpi	r22, 0x00	; 0
     d26:	78 07       	cpc	r23, r24
     d28:	10 f0       	brcs	.+4      	; 0xd2e <update_control_voltages+0x286>
     d2a:	6f ef       	ldi	r22, 0xFF	; 255
     d2c:	7f e3       	ldi	r23, 0x3F	; 63
     d2e:	84 ed       	ldi	r24, 0xD4	; 212
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     d36:	60 91 e8 02 	lds	r22, 0x02E8
     d3a:	70 91 e9 02 	lds	r23, 0x02E9
     d3e:	62 95       	swap	r22
     d40:	72 95       	swap	r23
     d42:	70 7f       	andi	r23, 0xF0	; 240
     d44:	76 27       	eor	r23, r22
     d46:	60 7f       	andi	r22, 0xF0	; 240
     d48:	76 27       	eor	r23, r22
     d4a:	82 ed       	ldi	r24, 0xD2	; 210
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     d52:	60 91 ea 02 	lds	r22, 0x02EA
     d56:	70 91 eb 02 	lds	r23, 0x02EB
     d5a:	62 95       	swap	r22
     d5c:	72 95       	swap	r23
     d5e:	70 7f       	andi	r23, 0xF0	; 240
     d60:	76 27       	eor	r23, r22
     d62:	60 7f       	andi	r22, 0xF0	; 240
     d64:	76 27       	eor	r23, r22
     d66:	81 ed       	ldi	r24, 0xD1	; 209
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     d6e:	60 91 ec 02 	lds	r22, 0x02EC
     d72:	70 91 ed 02 	lds	r23, 0x02ED
     d76:	62 95       	swap	r22
     d78:	72 95       	swap	r23
     d7a:	70 7f       	andi	r23, 0xF0	; 240
     d7c:	76 27       	eor	r23, r22
     d7e:	60 7f       	andi	r22, 0xF0	; 240
     d80:	76 27       	eor	r23, r22
     d82:	80 ed       	ldi	r24, 0xD0	; 208
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     d8a:	60 91 ee 02 	lds	r22, 0x02EE
     d8e:	70 91 ef 02 	lds	r23, 0x02EF
     d92:	62 95       	swap	r22
     d94:	72 95       	swap	r23
     d96:	70 7f       	andi	r23, 0xF0	; 240
     d98:	76 27       	eor	r23, r22
     d9a:	60 7f       	andi	r22, 0xF0	; 240
     d9c:	76 27       	eor	r23, r22
     d9e:	8f ec       	ldi	r24, 0xCF	; 207
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     da6:	60 91 f0 02 	lds	r22, 0x02F0
     daa:	70 91 f1 02 	lds	r23, 0x02F1
     dae:	62 95       	swap	r22
     db0:	72 95       	swap	r23
     db2:	70 7f       	andi	r23, 0xF0	; 240
     db4:	76 27       	eor	r23, r22
     db6:	60 7f       	andi	r22, 0xF0	; 240
     db8:	76 27       	eor	r23, r22
     dba:	8e ec       	ldi	r24, 0xCE	; 206
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     dc2:	60 91 f2 02 	lds	r22, 0x02F2
     dc6:	70 91 f3 02 	lds	r23, 0x02F3
     dca:	62 95       	swap	r22
     dcc:	72 95       	swap	r23
     dce:	70 7f       	andi	r23, 0xF0	; 240
     dd0:	76 27       	eor	r23, r22
     dd2:	60 7f       	andi	r22, 0xF0	; 240
     dd4:	76 27       	eor	r23, r22
     dd6:	8d ec       	ldi	r24, 0xCD	; 205
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     dde:	60 91 f4 02 	lds	r22, 0x02F4
     de2:	70 91 f5 02 	lds	r23, 0x02F5
     de6:	62 95       	swap	r22
     de8:	72 95       	swap	r23
     dea:	70 7f       	andi	r23, 0xF0	; 240
     dec:	76 27       	eor	r23, r22
     dee:	60 7f       	andi	r22, 0xF0	; 240
     df0:	76 27       	eor	r23, r22
     df2:	8c ec       	ldi	r24, 0xCC	; 204
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     dfa:	60 91 f8 02 	lds	r22, 0x02F8
     dfe:	70 91 f9 02 	lds	r23, 0x02F9
     e02:	62 95       	swap	r22
     e04:	72 95       	swap	r23
     e06:	70 7f       	andi	r23, 0xF0	; 240
     e08:	76 27       	eor	r23, r22
     e0a:	60 7f       	andi	r22, 0xF0	; 240
     e0c:	76 27       	eor	r23, r22
     e0e:	8a ec       	ldi	r24, 0xCA	; 202
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     e16:	60 91 f6 02 	lds	r22, 0x02F6
     e1a:	70 91 f7 02 	lds	r23, 0x02F7
     e1e:	62 95       	swap	r22
     e20:	72 95       	swap	r23
     e22:	70 7f       	andi	r23, 0xF0	; 240
     e24:	76 27       	eor	r23, r22
     e26:	60 7f       	andi	r22, 0xF0	; 240
     e28:	76 27       	eor	r23, r22
     e2a:	8b ec       	ldi	r24, 0xCB	; 203
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     e32:	60 91 fc 02 	lds	r22, 0x02FC
     e36:	70 91 fd 02 	lds	r23, 0x02FD
     e3a:	62 95       	swap	r22
     e3c:	72 95       	swap	r23
     e3e:	70 7f       	andi	r23, 0xF0	; 240
     e40:	76 27       	eor	r23, r22
     e42:	60 7f       	andi	r22, 0xF0	; 240
     e44:	76 27       	eor	r23, r22
     e46:	88 ec       	ldi	r24, 0xC8	; 200
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     e4e:	60 91 fa 02 	lds	r22, 0x02FA
     e52:	70 91 fb 02 	lds	r23, 0x02FB
     e56:	62 95       	swap	r22
     e58:	72 95       	swap	r23
     e5a:	70 7f       	andi	r23, 0xF0	; 240
     e5c:	76 27       	eor	r23, r22
     e5e:	60 7f       	andi	r22, 0xF0	; 240
     e60:	76 27       	eor	r23, r22
     e62:	89 ec       	ldi	r24, 0xC9	; 201
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     e6a:	8c 2f       	mov	r24, r28
     e6c:	6f e0       	ldi	r22, 0x0F	; 15
     e6e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     e72:	61 e5       	ldi	r22, 0x51	; 81
     e74:	73 e0       	ldi	r23, 0x03	; 3
     e76:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <interpolate_pitch_cv>
     e7a:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     e7c:	86 ee       	ldi	r24, 0xE6	; 230
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     e84:	8c 2f       	mov	r24, r28
     e86:	60 ef       	ldi	r22, 0xF0	; 240
     e88:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     e8c:	6f e2       	ldi	r22, 0x2F	; 47
     e8e:	73 e0       	ldi	r23, 0x03	; 3
     e90:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <interpolate_pitch_cv>
     e94:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     e96:	85 ee       	ldi	r24, 0xE5	; 229
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     e9e:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     ea0:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     ea2:	20 91 88 01 	lds	r18, 0x0188
     ea6:	80 91 89 01 	lds	r24, 0x0189
     eaa:	38 2f       	mov	r19, r24
     eac:	33 70       	andi	r19, 0x03	; 3
     eae:	83 ef       	ldi	r24, 0xF3	; 243
     eb0:	94 e0       	ldi	r25, 0x04	; 4
     eb2:	82 1b       	sub	r24, r18
     eb4:	93 0b       	sbc	r25, r19
     eb6:	90 93 ce 03 	sts	0x03CE, r25
     eba:	80 93 cd 03 	sts	0x03CD, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     ebe:	20 91 cf 03 	lds	r18, 0x03CF
     ec2:	30 91 d0 03 	lds	r19, 0x03D0
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	11 f0       	breq	.+4      	; 0xed0 <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
     ecc:	0e 94 98 01 	call	0x330	; 0x330 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     ed0:	80 91 cd 03 	lds	r24, 0x03CD
     ed4:	90 91 ce 03 	lds	r25, 0x03CE
     ed8:	90 93 d0 03 	sts	0x03D0, r25
     edc:	80 93 cf 03 	sts	0x03CF, r24
	
}			
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     ee6:	84 b1       	in	r24, 0x04	; 4
     ee8:	87 62       	ori	r24, 0x27	; 39
     eea:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     eec:	ec ed       	ldi	r30, 0xDC	; 220
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8c 65       	ori	r24, 0x5C	; 92
     ef4:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     ef6:	85 b1       	in	r24, 0x05	; 5
     ef8:	89 7d       	andi	r24, 0xD9	; 217
     efa:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     efc:	ed ed       	ldi	r30, 0xDD	; 221
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	83 7f       	andi	r24, 0xF3	; 243
     f04:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     f06:	80 e5       	ldi	r24, 0x50	; 80
     f08:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     f0a:	80 81       	ld	r24, Z
     f0c:	87 7f       	andi	r24, 0xF7	; 247
     f0e:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     f10:	80 81       	ld	r24, Z
     f12:	87 7f       	andi	r24, 0xF7	; 247
     f14:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     f16:	80 81       	ld	r24, Z
     f18:	88 60       	ori	r24, 0x08	; 8
     f1a:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 7e       	andi	r24, 0xEF	; 239
     f20:	80 83       	st	Z, r24
	
}
     f22:	08 95       	ret

00000f24 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     f24:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     f26:	0d b4       	in	r0, 0x2d	; 45
     f28:	07 fe       	sbrs	r0, 7
     f2a:	fd cf       	rjmp	.-6      	; 0xf26 <spi_shift_byte+0x2>
	return SPDR;
     f2c:	8e b5       	in	r24, 0x2e	; 46
	
}
     f2e:	08 95       	ret

00000f30 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     f30:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     f32:	80 91 02 03 	lds	r24, 0x0302
     f36:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     f3a:	90 91 c1 02 	lds	r25, 0x02C1
     f3e:	98 2b       	or	r25, r24
     f40:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     f44:	20 91 bf 02 	lds	r18, 0x02BF
     f48:	98 2f       	mov	r25, r24
     f4a:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     f4c:	89 2f       	mov	r24, r25
     f4e:	82 27       	eor	r24, r18
     f50:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     f54:	89 23       	and	r24, r25
     f56:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     f5a:	90 91 7e 03 	lds	r25, 0x037E
     f5e:	89 27       	eor	r24, r25
     f60:	80 93 7e 03 	sts	0x037E, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     f64:	80 91 01 03 	lds	r24, 0x0301
     f68:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     f6c:	90 91 c1 02 	lds	r25, 0x02C1
     f70:	98 2b       	or	r25, r24
     f72:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     f76:	20 91 bd 02 	lds	r18, 0x02BD
     f7a:	98 2f       	mov	r25, r24
     f7c:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     f7e:	89 2f       	mov	r24, r25
     f80:	82 27       	eor	r24, r18
     f82:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     f86:	89 23       	and	r24, r25
     f88:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     f8c:	90 91 7f 03 	lds	r25, 0x037F
     f90:	89 27       	eor	r24, r25
     f92:	80 93 7f 03 	sts	0x037F, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     f96:	80 91 00 03 	lds	r24, 0x0300
     f9a:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     f9e:	80 91 ff 02 	lds	r24, 0x02FF
     fa2:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     fa6:	80 91 07 03 	lds	r24, 0x0307
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	11 f4       	brne	.+4      	; 0xfb2 <update_spi+0x82>
     fae:	20 e8       	ldi	r18, 0x80	; 128
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <update_spi+0x84>
     fb2:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
     fb4:	80 91 80 03 	lds	r24, 0x0380
     fb8:	88 1f       	adc	r24, r24
     fba:	88 27       	eor	r24, r24
     fbc:	88 1f       	adc	r24, r24
     fbe:	82 95       	swap	r24
     fc0:	88 0f       	add	r24, r24
     fc2:	88 0f       	add	r24, r24
     fc4:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     fc6:	90 91 fe 02 	lds	r25, 0x02FE
     fca:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     fcc:	82 2b       	or	r24, r18
     fce:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     fd2:	ed ed       	ldi	r30, 0xDD	; 221
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	87 7f       	andi	r24, 0xF7	; 247
     fda:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     fdc:	80 81       	ld	r24, Z
     fde:	88 60       	ori	r24, 0x08	; 8
     fe0:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     fe2:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     fe4:	08 95       	ret

00000fe6 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     fe6:	a0 e0       	ldi	r26, 0x00	; 0
     fe8:	b1 e0       	ldi	r27, 0x01	; 1
     fea:	9d 01       	movw	r18, r26
     fec:	24 5c       	subi	r18, 0xC4	; 196
     fee:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     ff0:	ed 91       	ld	r30, X+
     ff2:	fc 91       	ld	r31, X
     ff4:	11 97       	sbiw	r26, 0x01	; 1
     ff6:	80 81       	ld	r24, Z
     ff8:	41 81       	ldd	r20, Z+1	; 0x01
     ffa:	94 2f       	mov	r25, r20
     ffc:	93 70       	andi	r25, 0x03	; 3
     ffe:	95 95       	asr	r25
    1000:	87 95       	ror	r24
    1002:	95 95       	asr	r25
    1004:	87 95       	ror	r24
    1006:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
    1008:	ed 91       	ld	r30, X+
    100a:	fd 91       	ld	r31, X+
    100c:	83 81       	ldd	r24, Z+3	; 0x03
    100e:	80 68       	ori	r24, 0x80	; 128
    1010:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
    1012:	a2 17       	cp	r26, r18
    1014:	b3 07       	cpc	r27, r19
    1016:	61 f7       	brne	.-40     	; 0xff0 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
    1018:	08 95       	ret

0000101a <unlock_pots>:

void unlock_pots(void) {
    101a:	e0 e0       	ldi	r30, 0x00	; 0
    101c:	f1 e0       	ldi	r31, 0x01	; 1
    101e:	cf 01       	movw	r24, r30
    1020:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
    1022:	a1 91       	ld	r26, Z+
    1024:	b1 91       	ld	r27, Z+
    1026:	13 96       	adiw	r26, 0x03	; 3
    1028:	2c 91       	ld	r18, X
    102a:	13 97       	sbiw	r26, 0x03	; 3
    102c:	2f 77       	andi	r18, 0x7F	; 127
    102e:	13 96       	adiw	r26, 0x03	; 3
    1030:	2c 93       	st	X, r18
    1032:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
    1034:	e8 17       	cp	r30, r24
    1036:	f9 07       	cpc	r31, r25
    1038:	a1 f7       	brne	.-24     	; 0x1022 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
    103a:	08 95       	ret

0000103c <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	ab 97       	sbiw	r28, 0x2b	; 43
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
    1054:	ee ed       	ldi	r30, 0xDE	; 222
    1056:	f2 e0       	ldi	r31, 0x02	; 2
    1058:	20 91 de 02 	lds	r18, 0x02DE
    105c:	82 2f       	mov	r24, r18
    105e:	82 95       	swap	r24
    1060:	80 7f       	andi	r24, 0xF0	; 240
    1062:	22 95       	swap	r18
    1064:	2f 70       	andi	r18, 0x0F	; 15
    1066:	90 91 df 02 	lds	r25, 0x02DF
    106a:	93 70       	andi	r25, 0x03	; 3
    106c:	92 95       	swap	r25
    106e:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
    1070:	df 01       	movw	r26, r30
    1072:	5a 97       	sbiw	r26, 0x1a	; 26
    1074:	3c 91       	ld	r19, X
    1076:	53 2f       	mov	r21, r19
    1078:	55 0f       	add	r21, r21
    107a:	55 0f       	add	r21, r21
    107c:	4a 81       	ldd	r20, Y+2	; 0x02
    107e:	43 70       	andi	r20, 0x03	; 3
    1080:	45 2b       	or	r20, r21
    1082:	4a 83       	std	Y+2, r20	; 0x02
    1084:	63 2f       	mov	r22, r19
    1086:	62 95       	swap	r22
    1088:	66 95       	lsr	r22
    108a:	66 95       	lsr	r22
    108c:	63 70       	andi	r22, 0x03	; 3
    108e:	11 96       	adiw	r26, 0x01	; 1
    1090:	4c 91       	ld	r20, X
    1092:	43 70       	andi	r20, 0x03	; 3
    1094:	44 0f       	add	r20, r20
    1096:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    1098:	df 01       	movw	r26, r30
    109a:	58 97       	sbiw	r26, 0x18	; 24
    109c:	3c 91       	ld	r19, X
    109e:	53 2f       	mov	r21, r19
    10a0:	52 95       	swap	r21
    10a2:	50 7f       	andi	r21, 0xF0	; 240
    10a4:	46 2b       	or	r20, r22
    10a6:	45 2b       	or	r20, r21
    10a8:	4b 83       	std	Y+3, r20	; 0x03
    10aa:	63 2f       	mov	r22, r19
    10ac:	62 95       	swap	r22
    10ae:	6f 70       	andi	r22, 0x0F	; 15
    10b0:	11 96       	adiw	r26, 0x01	; 1
    10b2:	4c 91       	ld	r20, X
    10b4:	43 70       	andi	r20, 0x03	; 3
    10b6:	42 95       	swap	r20
    10b8:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    10ba:	df 01       	movw	r26, r30
    10bc:	56 97       	sbiw	r26, 0x16	; 22
    10be:	3c 91       	ld	r19, X
    10c0:	53 2f       	mov	r21, r19
    10c2:	52 95       	swap	r21
    10c4:	55 0f       	add	r21, r21
    10c6:	55 0f       	add	r21, r21
    10c8:	50 7c       	andi	r21, 0xC0	; 192
    10ca:	46 2b       	or	r20, r22
    10cc:	45 2b       	or	r20, r21
    10ce:	4c 83       	std	Y+4, r20	; 0x04
    10d0:	11 96       	adiw	r26, 0x01	; 1
    10d2:	4c 91       	ld	r20, X
    10d4:	42 95       	swap	r20
    10d6:	44 0f       	add	r20, r20
    10d8:	44 0f       	add	r20, r20
    10da:	40 7c       	andi	r20, 0xC0	; 192
    10dc:	36 95       	lsr	r19
    10de:	36 95       	lsr	r19
    10e0:	34 2b       	or	r19, r20
    10e2:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    10e4:	df 01       	movw	r26, r30
    10e6:	54 97       	sbiw	r26, 0x14	; 20
    10e8:	3c 91       	ld	r19, X
    10ea:	3e 83       	std	Y+6, r19	; 0x06
    10ec:	11 96       	adiw	r26, 0x01	; 1
    10ee:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    10f0:	df 01       	movw	r26, r30
    10f2:	52 97       	sbiw	r26, 0x12	; 18
    10f4:	3c 91       	ld	r19, X
    10f6:	53 2f       	mov	r21, r19
    10f8:	55 0f       	add	r21, r21
    10fa:	55 0f       	add	r21, r21
    10fc:	43 70       	andi	r20, 0x03	; 3
    10fe:	45 2b       	or	r20, r21
    1100:	4f 83       	std	Y+7, r20	; 0x07
    1102:	63 2f       	mov	r22, r19
    1104:	62 95       	swap	r22
    1106:	66 95       	lsr	r22
    1108:	66 95       	lsr	r22
    110a:	63 70       	andi	r22, 0x03	; 3
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	4c 91       	ld	r20, X
    1110:	43 70       	andi	r20, 0x03	; 3
    1112:	44 0f       	add	r20, r20
    1114:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    1116:	df 01       	movw	r26, r30
    1118:	50 97       	sbiw	r26, 0x10	; 16
    111a:	3c 91       	ld	r19, X
    111c:	53 2f       	mov	r21, r19
    111e:	52 95       	swap	r21
    1120:	50 7f       	andi	r21, 0xF0	; 240
    1122:	46 2b       	or	r20, r22
    1124:	45 2b       	or	r20, r21
    1126:	48 87       	std	Y+8, r20	; 0x08
    1128:	63 2f       	mov	r22, r19
    112a:	62 95       	swap	r22
    112c:	6f 70       	andi	r22, 0x0F	; 15
    112e:	11 96       	adiw	r26, 0x01	; 1
    1130:	4c 91       	ld	r20, X
    1132:	43 70       	andi	r20, 0x03	; 3
    1134:	42 95       	swap	r20
    1136:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    1138:	df 01       	movw	r26, r30
    113a:	1e 97       	sbiw	r26, 0x0e	; 14
    113c:	3c 91       	ld	r19, X
    113e:	53 2f       	mov	r21, r19
    1140:	52 95       	swap	r21
    1142:	55 0f       	add	r21, r21
    1144:	55 0f       	add	r21, r21
    1146:	50 7c       	andi	r21, 0xC0	; 192
    1148:	46 2b       	or	r20, r22
    114a:	45 2b       	or	r20, r21
    114c:	49 87       	std	Y+9, r20	; 0x09
    114e:	11 96       	adiw	r26, 0x01	; 1
    1150:	4c 91       	ld	r20, X
    1152:	42 95       	swap	r20
    1154:	44 0f       	add	r20, r20
    1156:	44 0f       	add	r20, r20
    1158:	40 7c       	andi	r20, 0xC0	; 192
    115a:	36 95       	lsr	r19
    115c:	36 95       	lsr	r19
    115e:	34 2b       	or	r19, r20
    1160:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    1162:	df 01       	movw	r26, r30
    1164:	1c 97       	sbiw	r26, 0x0c	; 12
    1166:	3c 91       	ld	r19, X
    1168:	3b 87       	std	Y+11, r19	; 0x0b
    116a:	11 96       	adiw	r26, 0x01	; 1
    116c:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    116e:	df 01       	movw	r26, r30
    1170:	1a 97       	sbiw	r26, 0x0a	; 10
    1172:	3c 91       	ld	r19, X
    1174:	53 2f       	mov	r21, r19
    1176:	55 0f       	add	r21, r21
    1178:	55 0f       	add	r21, r21
    117a:	43 70       	andi	r20, 0x03	; 3
    117c:	45 2b       	or	r20, r21
    117e:	4c 87       	std	Y+12, r20	; 0x0c
    1180:	63 2f       	mov	r22, r19
    1182:	62 95       	swap	r22
    1184:	66 95       	lsr	r22
    1186:	66 95       	lsr	r22
    1188:	63 70       	andi	r22, 0x03	; 3
    118a:	11 96       	adiw	r26, 0x01	; 1
    118c:	4c 91       	ld	r20, X
    118e:	43 70       	andi	r20, 0x03	; 3
    1190:	44 0f       	add	r20, r20
    1192:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    1194:	df 01       	movw	r26, r30
    1196:	18 97       	sbiw	r26, 0x08	; 8
    1198:	3c 91       	ld	r19, X
    119a:	53 2f       	mov	r21, r19
    119c:	52 95       	swap	r21
    119e:	50 7f       	andi	r21, 0xF0	; 240
    11a0:	46 2b       	or	r20, r22
    11a2:	45 2b       	or	r20, r21
    11a4:	4d 87       	std	Y+13, r20	; 0x0d
    11a6:	63 2f       	mov	r22, r19
    11a8:	62 95       	swap	r22
    11aa:	6f 70       	andi	r22, 0x0F	; 15
    11ac:	11 96       	adiw	r26, 0x01	; 1
    11ae:	4c 91       	ld	r20, X
    11b0:	43 70       	andi	r20, 0x03	; 3
    11b2:	42 95       	swap	r20
    11b4:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    11b6:	df 01       	movw	r26, r30
    11b8:	16 97       	sbiw	r26, 0x06	; 6
    11ba:	3c 91       	ld	r19, X
    11bc:	53 2f       	mov	r21, r19
    11be:	52 95       	swap	r21
    11c0:	55 0f       	add	r21, r21
    11c2:	55 0f       	add	r21, r21
    11c4:	50 7c       	andi	r21, 0xC0	; 192
    11c6:	46 2b       	or	r20, r22
    11c8:	45 2b       	or	r20, r21
    11ca:	4e 87       	std	Y+14, r20	; 0x0e
    11cc:	11 96       	adiw	r26, 0x01	; 1
    11ce:	4c 91       	ld	r20, X
    11d0:	42 95       	swap	r20
    11d2:	44 0f       	add	r20, r20
    11d4:	44 0f       	add	r20, r20
    11d6:	40 7c       	andi	r20, 0xC0	; 192
    11d8:	36 95       	lsr	r19
    11da:	36 95       	lsr	r19
    11dc:	34 2b       	or	r19, r20
    11de:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    11e0:	df 01       	movw	r26, r30
    11e2:	14 97       	sbiw	r26, 0x04	; 4
    11e4:	3c 91       	ld	r19, X
    11e6:	38 8b       	std	Y+16, r19	; 0x10
    11e8:	11 96       	adiw	r26, 0x01	; 1
    11ea:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    11ec:	df 01       	movw	r26, r30
    11ee:	12 97       	sbiw	r26, 0x02	; 2
    11f0:	3c 91       	ld	r19, X
    11f2:	53 2f       	mov	r21, r19
    11f4:	55 0f       	add	r21, r21
    11f6:	55 0f       	add	r21, r21
    11f8:	43 70       	andi	r20, 0x03	; 3
    11fa:	45 2b       	or	r20, r21
    11fc:	49 8b       	std	Y+17, r20	; 0x11
    11fe:	32 95       	swap	r19
    1200:	36 95       	lsr	r19
    1202:	36 95       	lsr	r19
    1204:	33 70       	andi	r19, 0x03	; 3
    1206:	11 96       	adiw	r26, 0x01	; 1
    1208:	4c 91       	ld	r20, X
    120a:	43 70       	andi	r20, 0x03	; 3
    120c:	44 0f       	add	r20, r20
    120e:	44 0f       	add	r20, r20
    1210:	83 2b       	or	r24, r19
    1212:	84 2b       	or	r24, r20
    1214:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    1216:	80 91 e0 02 	lds	r24, 0x02E0
    121a:	38 2f       	mov	r19, r24
    121c:	32 95       	swap	r19
    121e:	33 0f       	add	r19, r19
    1220:	33 0f       	add	r19, r19
    1222:	30 7c       	andi	r19, 0xC0	; 192
    1224:	92 2b       	or	r25, r18
    1226:	93 2b       	or	r25, r19
    1228:	9b 8b       	std	Y+19, r25	; 0x13
    122a:	93 81       	ldd	r25, Z+3	; 0x03
    122c:	92 95       	swap	r25
    122e:	99 0f       	add	r25, r25
    1230:	99 0f       	add	r25, r25
    1232:	90 7c       	andi	r25, 0xC0	; 192
    1234:	86 95       	lsr	r24
    1236:	86 95       	lsr	r24
    1238:	89 2b       	or	r24, r25
    123a:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    123c:	80 91 e2 02 	lds	r24, 0x02E2
    1240:	8d 8b       	std	Y+21, r24	; 0x15
    1242:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    1244:	80 91 e4 02 	lds	r24, 0x02E4
    1248:	28 2f       	mov	r18, r24
    124a:	22 0f       	add	r18, r18
    124c:	22 0f       	add	r18, r18
    124e:	93 70       	andi	r25, 0x03	; 3
    1250:	92 2b       	or	r25, r18
    1252:	9e 8b       	std	Y+22, r25	; 0x16
    1254:	38 2f       	mov	r19, r24
    1256:	32 95       	swap	r19
    1258:	36 95       	lsr	r19
    125a:	36 95       	lsr	r19
    125c:	33 70       	andi	r19, 0x03	; 3
    125e:	97 81       	ldd	r25, Z+7	; 0x07
    1260:	93 70       	andi	r25, 0x03	; 3
    1262:	99 0f       	add	r25, r25
    1264:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    1266:	80 91 e6 02 	lds	r24, 0x02E6
    126a:	28 2f       	mov	r18, r24
    126c:	22 95       	swap	r18
    126e:	20 7f       	andi	r18, 0xF0	; 240
    1270:	93 2b       	or	r25, r19
    1272:	92 2b       	or	r25, r18
    1274:	9f 8b       	std	Y+23, r25	; 0x17
    1276:	38 2f       	mov	r19, r24
    1278:	32 95       	swap	r19
    127a:	3f 70       	andi	r19, 0x0F	; 15
    127c:	91 85       	ldd	r25, Z+9	; 0x09
    127e:	93 70       	andi	r25, 0x03	; 3
    1280:	92 95       	swap	r25
    1282:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    1284:	80 91 e8 02 	lds	r24, 0x02E8
    1288:	28 2f       	mov	r18, r24
    128a:	22 95       	swap	r18
    128c:	22 0f       	add	r18, r18
    128e:	22 0f       	add	r18, r18
    1290:	20 7c       	andi	r18, 0xC0	; 192
    1292:	93 2b       	or	r25, r19
    1294:	92 2b       	or	r25, r18
    1296:	98 8f       	std	Y+24, r25	; 0x18
    1298:	93 85       	ldd	r25, Z+11	; 0x0b
    129a:	92 95       	swap	r25
    129c:	99 0f       	add	r25, r25
    129e:	99 0f       	add	r25, r25
    12a0:	90 7c       	andi	r25, 0xC0	; 192
    12a2:	86 95       	lsr	r24
    12a4:	86 95       	lsr	r24
    12a6:	89 2b       	or	r24, r25
    12a8:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    12aa:	80 91 ea 02 	lds	r24, 0x02EA
    12ae:	8a 8f       	std	Y+26, r24	; 0x1a
    12b0:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    12b2:	80 91 ec 02 	lds	r24, 0x02EC
    12b6:	28 2f       	mov	r18, r24
    12b8:	22 0f       	add	r18, r18
    12ba:	22 0f       	add	r18, r18
    12bc:	93 70       	andi	r25, 0x03	; 3
    12be:	92 2b       	or	r25, r18
    12c0:	9b 8f       	std	Y+27, r25	; 0x1b
    12c2:	38 2f       	mov	r19, r24
    12c4:	32 95       	swap	r19
    12c6:	36 95       	lsr	r19
    12c8:	36 95       	lsr	r19
    12ca:	33 70       	andi	r19, 0x03	; 3
    12cc:	97 85       	ldd	r25, Z+15	; 0x0f
    12ce:	93 70       	andi	r25, 0x03	; 3
    12d0:	99 0f       	add	r25, r25
    12d2:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    12d4:	80 91 ee 02 	lds	r24, 0x02EE
    12d8:	28 2f       	mov	r18, r24
    12da:	22 95       	swap	r18
    12dc:	20 7f       	andi	r18, 0xF0	; 240
    12de:	93 2b       	or	r25, r19
    12e0:	92 2b       	or	r25, r18
    12e2:	9c 8f       	std	Y+28, r25	; 0x1c
    12e4:	38 2f       	mov	r19, r24
    12e6:	32 95       	swap	r19
    12e8:	3f 70       	andi	r19, 0x0F	; 15
    12ea:	91 89       	ldd	r25, Z+17	; 0x11
    12ec:	93 70       	andi	r25, 0x03	; 3
    12ee:	92 95       	swap	r25
    12f0:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    12f2:	80 91 f0 02 	lds	r24, 0x02F0
    12f6:	28 2f       	mov	r18, r24
    12f8:	22 95       	swap	r18
    12fa:	22 0f       	add	r18, r18
    12fc:	22 0f       	add	r18, r18
    12fe:	20 7c       	andi	r18, 0xC0	; 192
    1300:	93 2b       	or	r25, r19
    1302:	92 2b       	or	r25, r18
    1304:	9d 8f       	std	Y+29, r25	; 0x1d
    1306:	93 89       	ldd	r25, Z+19	; 0x13
    1308:	92 95       	swap	r25
    130a:	99 0f       	add	r25, r25
    130c:	99 0f       	add	r25, r25
    130e:	90 7c       	andi	r25, 0xC0	; 192
    1310:	86 95       	lsr	r24
    1312:	86 95       	lsr	r24
    1314:	89 2b       	or	r24, r25
    1316:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    1318:	80 91 f2 02 	lds	r24, 0x02F2
    131c:	8f 8f       	std	Y+31, r24	; 0x1f
    131e:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    1320:	80 91 f4 02 	lds	r24, 0x02F4
    1324:	28 2f       	mov	r18, r24
    1326:	22 0f       	add	r18, r18
    1328:	22 0f       	add	r18, r18
    132a:	93 70       	andi	r25, 0x03	; 3
    132c:	92 2b       	or	r25, r18
    132e:	98 a3       	lds	r25, 0x58
    1330:	38 2f       	mov	r19, r24
    1332:	32 95       	swap	r19
    1334:	36 95       	lsr	r19
    1336:	36 95       	lsr	r19
    1338:	33 70       	andi	r19, 0x03	; 3
    133a:	97 89       	ldd	r25, Z+23	; 0x17
    133c:	93 70       	andi	r25, 0x03	; 3
    133e:	99 0f       	add	r25, r25
    1340:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    1342:	80 91 f6 02 	lds	r24, 0x02F6
    1346:	28 2f       	mov	r18, r24
    1348:	22 95       	swap	r18
    134a:	20 7f       	andi	r18, 0xF0	; 240
    134c:	93 2b       	or	r25, r19
    134e:	92 2b       	or	r25, r18
    1350:	99 a3       	lds	r25, 0x59
    1352:	38 2f       	mov	r19, r24
    1354:	32 95       	swap	r19
    1356:	3f 70       	andi	r19, 0x0F	; 15
    1358:	91 8d       	ldd	r25, Z+25	; 0x19
    135a:	93 70       	andi	r25, 0x03	; 3
    135c:	92 95       	swap	r25
    135e:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    1360:	80 91 f8 02 	lds	r24, 0x02F8
    1364:	28 2f       	mov	r18, r24
    1366:	22 95       	swap	r18
    1368:	22 0f       	add	r18, r18
    136a:	22 0f       	add	r18, r18
    136c:	20 7c       	andi	r18, 0xC0	; 192
    136e:	93 2b       	or	r25, r19
    1370:	92 2b       	or	r25, r18
    1372:	9a a3       	lds	r25, 0x5a
    1374:	93 8d       	ldd	r25, Z+27	; 0x1b
    1376:	92 95       	swap	r25
    1378:	99 0f       	add	r25, r25
    137a:	99 0f       	add	r25, r25
    137c:	90 7c       	andi	r25, 0xC0	; 192
    137e:	86 95       	lsr	r24
    1380:	86 95       	lsr	r24
    1382:	89 2b       	or	r24, r25
    1384:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    1386:	80 91 fa 02 	lds	r24, 0x02FA
    138a:	8c a3       	lds	r24, 0x5c
    138c:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    138e:	80 91 fc 02 	lds	r24, 0x02FC
    1392:	28 2f       	mov	r18, r24
    1394:	22 0f       	add	r18, r18
    1396:	22 0f       	add	r18, r18
    1398:	93 70       	andi	r25, 0x03	; 3
    139a:	92 2b       	or	r25, r18
    139c:	9d a3       	lds	r25, 0x5d
    139e:	82 95       	swap	r24
    13a0:	86 95       	lsr	r24
    13a2:	86 95       	lsr	r24
    13a4:	83 70       	andi	r24, 0x03	; 3
    13a6:	2e a1       	lds	r18, 0x4e
    13a8:	20 7f       	andi	r18, 0xF0	; 240
    13aa:	97 8d       	ldd	r25, Z+31	; 0x1f
    13ac:	93 70       	andi	r25, 0x03	; 3
    13ae:	99 0f       	add	r25, r25
    13b0:	99 0f       	add	r25, r25
    13b2:	82 2b       	or	r24, r18
    13b4:	89 2b       	or	r24, r25
    13b6:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    13b8:	80 91 fe 02 	lds	r24, 0x02FE
    13bc:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    13be:	80 91 ff 02 	lds	r24, 0x02FF
    13c2:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    13c4:	80 91 00 03 	lds	r24, 0x0300
    13c8:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    13ca:	80 91 01 03 	lds	r24, 0x0301
    13ce:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    13d0:	80 91 02 03 	lds	r24, 0x0302
    13d4:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    13d6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    13da:	80 91 80 03 	lds	r24, 0x0380
    13de:	8f 77       	andi	r24, 0x7F	; 127
    13e0:	80 93 80 03 	sts	0x0380, r24
	current_patch.mode = MEMORY;
    13e4:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    13e8:	21 2f       	mov	r18, r17
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	8b e2       	ldi	r24, 0x2B	; 43
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	28 9f       	mul	r18, r24
    13f2:	b0 01       	movw	r22, r0
    13f4:	29 9f       	mul	r18, r25
    13f6:	70 0d       	add	r23, r0
    13f8:	38 9f       	mul	r19, r24
    13fa:	70 0d       	add	r23, r0
    13fc:	11 24       	eor	r1, r1
    13fe:	60 50       	subi	r22, 0x00	; 0
    1400:	70 40       	sbci	r23, 0x00	; 0
    1402:	ce 01       	movw	r24, r28
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	4b e2       	ldi	r20, 0x2B	; 43
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__eeupd_block_m6450a>
}	
    140e:	ab 96       	adiw	r28, 0x2b	; 43
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	08 95       	ret

00001422 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	c3 54       	subi	r28, 0x43	; 67
    142e:	d0 40       	sbci	r29, 0x00	; 0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	2b e2       	ldi	r18, 0x2B	; 43
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	82 9f       	mul	r24, r18
    1442:	b0 01       	movw	r22, r0
    1444:	83 9f       	mul	r24, r19
    1446:	70 0d       	add	r23, r0
    1448:	92 9f       	mul	r25, r18
    144a:	70 0d       	add	r23, r0
    144c:	11 24       	eor	r1, r1
    144e:	60 50       	subi	r22, 0x00	; 0
    1450:	70 40       	sbci	r23, 0x00	; 0
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	4b e2       	ldi	r20, 0x2B	; 43
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    145e:	ee ed       	ldi	r30, 0xDE	; 222
    1460:	f2 e0       	ldi	r31, 0x02	; 2
    1462:	8a 89       	ldd	r24, Y+18	; 0x12
    1464:	28 2f       	mov	r18, r24
    1466:	22 95       	swap	r18
    1468:	2f 70       	andi	r18, 0x0F	; 15
    146a:	9b 89       	ldd	r25, Y+19	; 0x13
    146c:	39 2f       	mov	r19, r25
    146e:	32 95       	swap	r19
    1470:	30 7f       	andi	r19, 0xF0	; 240
    1472:	32 2b       	or	r19, r18
    1474:	29 2f       	mov	r18, r25
    1476:	22 95       	swap	r18
    1478:	2f 70       	andi	r18, 0x0F	; 15
    147a:	23 70       	andi	r18, 0x03	; 3
    147c:	30 93 de 02 	sts	0x02DE, r19
    1480:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    1484:	df 01       	movw	r26, r30
    1486:	5a 97       	sbiw	r26, 0x1a	; 26
    1488:	4a 81       	ldd	r20, Y+2	; 0x02
    148a:	46 95       	lsr	r20
    148c:	46 95       	lsr	r20
    148e:	2b 81       	ldd	r18, Y+3	; 0x03
    1490:	32 2f       	mov	r19, r18
    1492:	32 95       	swap	r19
    1494:	33 0f       	add	r19, r19
    1496:	33 0f       	add	r19, r19
    1498:	30 7c       	andi	r19, 0xC0	; 192
    149a:	43 2b       	or	r20, r19
    149c:	32 2f       	mov	r19, r18
    149e:	36 95       	lsr	r19
    14a0:	36 95       	lsr	r19
    14a2:	33 70       	andi	r19, 0x03	; 3
    14a4:	4c 93       	st	X, r20
    14a6:	11 96       	adiw	r26, 0x01	; 1
    14a8:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    14aa:	df 01       	movw	r26, r30
    14ac:	58 97       	sbiw	r26, 0x18	; 24
    14ae:	32 2f       	mov	r19, r18
    14b0:	32 95       	swap	r19
    14b2:	3f 70       	andi	r19, 0x0F	; 15
    14b4:	2c 81       	ldd	r18, Y+4	; 0x04
    14b6:	42 2f       	mov	r20, r18
    14b8:	42 95       	swap	r20
    14ba:	40 7f       	andi	r20, 0xF0	; 240
    14bc:	43 2b       	or	r20, r19
    14be:	32 2f       	mov	r19, r18
    14c0:	32 95       	swap	r19
    14c2:	3f 70       	andi	r19, 0x0F	; 15
    14c4:	33 70       	andi	r19, 0x03	; 3
    14c6:	4c 93       	st	X, r20
    14c8:	11 96       	adiw	r26, 0x01	; 1
    14ca:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    14cc:	df 01       	movw	r26, r30
    14ce:	56 97       	sbiw	r26, 0x16	; 22
    14d0:	22 95       	swap	r18
    14d2:	26 95       	lsr	r18
    14d4:	26 95       	lsr	r18
    14d6:	23 70       	andi	r18, 0x03	; 3
    14d8:	3d 81       	ldd	r19, Y+5	; 0x05
    14da:	43 2f       	mov	r20, r19
    14dc:	44 0f       	add	r20, r20
    14de:	44 0f       	add	r20, r20
    14e0:	24 2b       	or	r18, r20
    14e2:	32 95       	swap	r19
    14e4:	36 95       	lsr	r19
    14e6:	36 95       	lsr	r19
    14e8:	33 70       	andi	r19, 0x03	; 3
    14ea:	2c 93       	st	X, r18
    14ec:	11 96       	adiw	r26, 0x01	; 1
    14ee:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    14f0:	df 01       	movw	r26, r30
    14f2:	54 97       	sbiw	r26, 0x14	; 20
    14f4:	4e 81       	ldd	r20, Y+6	; 0x06
    14f6:	2f 81       	ldd	r18, Y+7	; 0x07
    14f8:	32 2f       	mov	r19, r18
    14fa:	33 70       	andi	r19, 0x03	; 3
    14fc:	4c 93       	st	X, r20
    14fe:	11 96       	adiw	r26, 0x01	; 1
    1500:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1502:	df 01       	movw	r26, r30
    1504:	52 97       	sbiw	r26, 0x12	; 18
    1506:	32 2f       	mov	r19, r18
    1508:	36 95       	lsr	r19
    150a:	36 95       	lsr	r19
    150c:	28 85       	ldd	r18, Y+8	; 0x08
    150e:	42 2f       	mov	r20, r18
    1510:	42 95       	swap	r20
    1512:	44 0f       	add	r20, r20
    1514:	44 0f       	add	r20, r20
    1516:	40 7c       	andi	r20, 0xC0	; 192
    1518:	43 2b       	or	r20, r19
    151a:	32 2f       	mov	r19, r18
    151c:	36 95       	lsr	r19
    151e:	36 95       	lsr	r19
    1520:	33 70       	andi	r19, 0x03	; 3
    1522:	4c 93       	st	X, r20
    1524:	11 96       	adiw	r26, 0x01	; 1
    1526:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1528:	df 01       	movw	r26, r30
    152a:	50 97       	sbiw	r26, 0x10	; 16
    152c:	32 2f       	mov	r19, r18
    152e:	32 95       	swap	r19
    1530:	3f 70       	andi	r19, 0x0F	; 15
    1532:	29 85       	ldd	r18, Y+9	; 0x09
    1534:	42 2f       	mov	r20, r18
    1536:	42 95       	swap	r20
    1538:	40 7f       	andi	r20, 0xF0	; 240
    153a:	43 2b       	or	r20, r19
    153c:	32 2f       	mov	r19, r18
    153e:	32 95       	swap	r19
    1540:	3f 70       	andi	r19, 0x0F	; 15
    1542:	33 70       	andi	r19, 0x03	; 3
    1544:	4c 93       	st	X, r20
    1546:	11 96       	adiw	r26, 0x01	; 1
    1548:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    154a:	df 01       	movw	r26, r30
    154c:	1e 97       	sbiw	r26, 0x0e	; 14
    154e:	22 95       	swap	r18
    1550:	26 95       	lsr	r18
    1552:	26 95       	lsr	r18
    1554:	23 70       	andi	r18, 0x03	; 3
    1556:	3a 85       	ldd	r19, Y+10	; 0x0a
    1558:	43 2f       	mov	r20, r19
    155a:	44 0f       	add	r20, r20
    155c:	44 0f       	add	r20, r20
    155e:	24 2b       	or	r18, r20
    1560:	32 95       	swap	r19
    1562:	36 95       	lsr	r19
    1564:	36 95       	lsr	r19
    1566:	33 70       	andi	r19, 0x03	; 3
    1568:	2c 93       	st	X, r18
    156a:	11 96       	adiw	r26, 0x01	; 1
    156c:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    156e:	df 01       	movw	r26, r30
    1570:	1c 97       	sbiw	r26, 0x0c	; 12
    1572:	4b 85       	ldd	r20, Y+11	; 0x0b
    1574:	2c 85       	ldd	r18, Y+12	; 0x0c
    1576:	32 2f       	mov	r19, r18
    1578:	33 70       	andi	r19, 0x03	; 3
    157a:	4c 93       	st	X, r20
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1580:	df 01       	movw	r26, r30
    1582:	1a 97       	sbiw	r26, 0x0a	; 10
    1584:	32 2f       	mov	r19, r18
    1586:	36 95       	lsr	r19
    1588:	36 95       	lsr	r19
    158a:	2d 85       	ldd	r18, Y+13	; 0x0d
    158c:	42 2f       	mov	r20, r18
    158e:	42 95       	swap	r20
    1590:	44 0f       	add	r20, r20
    1592:	44 0f       	add	r20, r20
    1594:	40 7c       	andi	r20, 0xC0	; 192
    1596:	43 2b       	or	r20, r19
    1598:	32 2f       	mov	r19, r18
    159a:	36 95       	lsr	r19
    159c:	36 95       	lsr	r19
    159e:	33 70       	andi	r19, 0x03	; 3
    15a0:	4c 93       	st	X, r20
    15a2:	11 96       	adiw	r26, 0x01	; 1
    15a4:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    15a6:	df 01       	movw	r26, r30
    15a8:	18 97       	sbiw	r26, 0x08	; 8
    15aa:	32 2f       	mov	r19, r18
    15ac:	32 95       	swap	r19
    15ae:	3f 70       	andi	r19, 0x0F	; 15
    15b0:	2e 85       	ldd	r18, Y+14	; 0x0e
    15b2:	42 2f       	mov	r20, r18
    15b4:	42 95       	swap	r20
    15b6:	40 7f       	andi	r20, 0xF0	; 240
    15b8:	43 2b       	or	r20, r19
    15ba:	32 2f       	mov	r19, r18
    15bc:	32 95       	swap	r19
    15be:	3f 70       	andi	r19, 0x0F	; 15
    15c0:	33 70       	andi	r19, 0x03	; 3
    15c2:	4c 93       	st	X, r20
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    15c8:	df 01       	movw	r26, r30
    15ca:	16 97       	sbiw	r26, 0x06	; 6
    15cc:	22 95       	swap	r18
    15ce:	26 95       	lsr	r18
    15d0:	26 95       	lsr	r18
    15d2:	23 70       	andi	r18, 0x03	; 3
    15d4:	3f 85       	ldd	r19, Y+15	; 0x0f
    15d6:	43 2f       	mov	r20, r19
    15d8:	44 0f       	add	r20, r20
    15da:	44 0f       	add	r20, r20
    15dc:	24 2b       	or	r18, r20
    15de:	32 95       	swap	r19
    15e0:	36 95       	lsr	r19
    15e2:	36 95       	lsr	r19
    15e4:	33 70       	andi	r19, 0x03	; 3
    15e6:	2c 93       	st	X, r18
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    15ec:	df 01       	movw	r26, r30
    15ee:	14 97       	sbiw	r26, 0x04	; 4
    15f0:	48 89       	ldd	r20, Y+16	; 0x10
    15f2:	29 89       	ldd	r18, Y+17	; 0x11
    15f4:	32 2f       	mov	r19, r18
    15f6:	33 70       	andi	r19, 0x03	; 3
    15f8:	4c 93       	st	X, r20
    15fa:	11 96       	adiw	r26, 0x01	; 1
    15fc:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    15fe:	df 01       	movw	r26, r30
    1600:	12 97       	sbiw	r26, 0x02	; 2
    1602:	26 95       	lsr	r18
    1604:	26 95       	lsr	r18
    1606:	38 2f       	mov	r19, r24
    1608:	32 95       	swap	r19
    160a:	33 0f       	add	r19, r19
    160c:	33 0f       	add	r19, r19
    160e:	30 7c       	andi	r19, 0xC0	; 192
    1610:	23 2b       	or	r18, r19
    1612:	86 95       	lsr	r24
    1614:	86 95       	lsr	r24
    1616:	83 70       	andi	r24, 0x03	; 3
    1618:	2c 93       	st	X, r18
    161a:	11 96       	adiw	r26, 0x01	; 1
    161c:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    161e:	92 95       	swap	r25
    1620:	96 95       	lsr	r25
    1622:	96 95       	lsr	r25
    1624:	93 70       	andi	r25, 0x03	; 3
    1626:	8c 89       	ldd	r24, Y+20	; 0x14
    1628:	28 2f       	mov	r18, r24
    162a:	22 0f       	add	r18, r18
    162c:	22 0f       	add	r18, r18
    162e:	92 2b       	or	r25, r18
    1630:	82 95       	swap	r24
    1632:	86 95       	lsr	r24
    1634:	86 95       	lsr	r24
    1636:	83 70       	andi	r24, 0x03	; 3
    1638:	90 93 e0 02 	sts	0x02E0, r25
    163c:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    163e:	2d 89       	ldd	r18, Y+21	; 0x15
    1640:	8e 89       	ldd	r24, Y+22	; 0x16
    1642:	98 2f       	mov	r25, r24
    1644:	93 70       	andi	r25, 0x03	; 3
    1646:	20 93 e2 02 	sts	0x02E2, r18
    164a:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    164c:	98 2f       	mov	r25, r24
    164e:	96 95       	lsr	r25
    1650:	96 95       	lsr	r25
    1652:	8f 89       	ldd	r24, Y+23	; 0x17
    1654:	28 2f       	mov	r18, r24
    1656:	22 95       	swap	r18
    1658:	22 0f       	add	r18, r18
    165a:	22 0f       	add	r18, r18
    165c:	20 7c       	andi	r18, 0xC0	; 192
    165e:	29 2b       	or	r18, r25
    1660:	98 2f       	mov	r25, r24
    1662:	96 95       	lsr	r25
    1664:	96 95       	lsr	r25
    1666:	93 70       	andi	r25, 0x03	; 3
    1668:	20 93 e4 02 	sts	0x02E4, r18
    166c:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    166e:	98 2f       	mov	r25, r24
    1670:	92 95       	swap	r25
    1672:	9f 70       	andi	r25, 0x0F	; 15
    1674:	88 8d       	ldd	r24, Y+24	; 0x18
    1676:	28 2f       	mov	r18, r24
    1678:	22 95       	swap	r18
    167a:	20 7f       	andi	r18, 0xF0	; 240
    167c:	29 2b       	or	r18, r25
    167e:	98 2f       	mov	r25, r24
    1680:	92 95       	swap	r25
    1682:	9f 70       	andi	r25, 0x0F	; 15
    1684:	93 70       	andi	r25, 0x03	; 3
    1686:	20 93 e6 02 	sts	0x02E6, r18
    168a:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    168c:	82 95       	swap	r24
    168e:	86 95       	lsr	r24
    1690:	86 95       	lsr	r24
    1692:	83 70       	andi	r24, 0x03	; 3
    1694:	99 8d       	ldd	r25, Y+25	; 0x19
    1696:	29 2f       	mov	r18, r25
    1698:	22 0f       	add	r18, r18
    169a:	22 0f       	add	r18, r18
    169c:	82 2b       	or	r24, r18
    169e:	92 95       	swap	r25
    16a0:	96 95       	lsr	r25
    16a2:	96 95       	lsr	r25
    16a4:	93 70       	andi	r25, 0x03	; 3
    16a6:	80 93 e8 02 	sts	0x02E8, r24
    16aa:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    16ac:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b0:	98 2f       	mov	r25, r24
    16b2:	93 70       	andi	r25, 0x03	; 3
    16b4:	20 93 ea 02 	sts	0x02EA, r18
    16b8:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    16ba:	98 2f       	mov	r25, r24
    16bc:	96 95       	lsr	r25
    16be:	96 95       	lsr	r25
    16c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16c2:	28 2f       	mov	r18, r24
    16c4:	22 95       	swap	r18
    16c6:	22 0f       	add	r18, r18
    16c8:	22 0f       	add	r18, r18
    16ca:	20 7c       	andi	r18, 0xC0	; 192
    16cc:	29 2b       	or	r18, r25
    16ce:	98 2f       	mov	r25, r24
    16d0:	96 95       	lsr	r25
    16d2:	96 95       	lsr	r25
    16d4:	93 70       	andi	r25, 0x03	; 3
    16d6:	20 93 ec 02 	sts	0x02EC, r18
    16da:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    16dc:	98 2f       	mov	r25, r24
    16de:	92 95       	swap	r25
    16e0:	9f 70       	andi	r25, 0x0F	; 15
    16e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16e4:	28 2f       	mov	r18, r24
    16e6:	22 95       	swap	r18
    16e8:	20 7f       	andi	r18, 0xF0	; 240
    16ea:	29 2b       	or	r18, r25
    16ec:	98 2f       	mov	r25, r24
    16ee:	92 95       	swap	r25
    16f0:	9f 70       	andi	r25, 0x0F	; 15
    16f2:	93 70       	andi	r25, 0x03	; 3
    16f4:	20 93 ee 02 	sts	0x02EE, r18
    16f8:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    16fa:	82 95       	swap	r24
    16fc:	86 95       	lsr	r24
    16fe:	86 95       	lsr	r24
    1700:	83 70       	andi	r24, 0x03	; 3
    1702:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1704:	29 2f       	mov	r18, r25
    1706:	22 0f       	add	r18, r18
    1708:	22 0f       	add	r18, r18
    170a:	82 2b       	or	r24, r18
    170c:	92 95       	swap	r25
    170e:	96 95       	lsr	r25
    1710:	96 95       	lsr	r25
    1712:	93 70       	andi	r25, 0x03	; 3
    1714:	80 93 f0 02 	sts	0x02F0, r24
    1718:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    171a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    171c:	88 a1       	lds	r24, 0x48
    171e:	98 2f       	mov	r25, r24
    1720:	93 70       	andi	r25, 0x03	; 3
    1722:	20 93 f2 02 	sts	0x02F2, r18
    1726:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1728:	98 2f       	mov	r25, r24
    172a:	96 95       	lsr	r25
    172c:	96 95       	lsr	r25
    172e:	89 a1       	lds	r24, 0x49
    1730:	28 2f       	mov	r18, r24
    1732:	22 95       	swap	r18
    1734:	22 0f       	add	r18, r18
    1736:	22 0f       	add	r18, r18
    1738:	20 7c       	andi	r18, 0xC0	; 192
    173a:	29 2b       	or	r18, r25
    173c:	98 2f       	mov	r25, r24
    173e:	96 95       	lsr	r25
    1740:	96 95       	lsr	r25
    1742:	93 70       	andi	r25, 0x03	; 3
    1744:	20 93 f4 02 	sts	0x02F4, r18
    1748:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    174a:	98 2f       	mov	r25, r24
    174c:	92 95       	swap	r25
    174e:	9f 70       	andi	r25, 0x0F	; 15
    1750:	8a a1       	lds	r24, 0x4a
    1752:	28 2f       	mov	r18, r24
    1754:	22 95       	swap	r18
    1756:	20 7f       	andi	r18, 0xF0	; 240
    1758:	29 2b       	or	r18, r25
    175a:	98 2f       	mov	r25, r24
    175c:	92 95       	swap	r25
    175e:	9f 70       	andi	r25, 0x0F	; 15
    1760:	93 70       	andi	r25, 0x03	; 3
    1762:	20 93 f6 02 	sts	0x02F6, r18
    1766:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1768:	82 95       	swap	r24
    176a:	86 95       	lsr	r24
    176c:	86 95       	lsr	r24
    176e:	83 70       	andi	r24, 0x03	; 3
    1770:	9b a1       	lds	r25, 0x4b
    1772:	29 2f       	mov	r18, r25
    1774:	22 0f       	add	r18, r18
    1776:	22 0f       	add	r18, r18
    1778:	82 2b       	or	r24, r18
    177a:	92 95       	swap	r25
    177c:	96 95       	lsr	r25
    177e:	96 95       	lsr	r25
    1780:	93 70       	andi	r25, 0x03	; 3
    1782:	80 93 f8 02 	sts	0x02F8, r24
    1786:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1788:	2c a1       	lds	r18, 0x4c
    178a:	8d a1       	lds	r24, 0x4d
    178c:	98 2f       	mov	r25, r24
    178e:	93 70       	andi	r25, 0x03	; 3
    1790:	20 93 fa 02 	sts	0x02FA, r18
    1794:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1796:	98 2f       	mov	r25, r24
    1798:	96 95       	lsr	r25
    179a:	96 95       	lsr	r25
    179c:	8e a1       	lds	r24, 0x4e
    179e:	28 2f       	mov	r18, r24
    17a0:	22 95       	swap	r18
    17a2:	22 0f       	add	r18, r18
    17a4:	22 0f       	add	r18, r18
    17a6:	20 7c       	andi	r18, 0xC0	; 192
    17a8:	29 2b       	or	r18, r25
    17aa:	86 95       	lsr	r24
    17ac:	86 95       	lsr	r24
    17ae:	98 2f       	mov	r25, r24
    17b0:	93 70       	andi	r25, 0x03	; 3
    17b2:	20 93 fc 02 	sts	0x02FC, r18
    17b6:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    17b8:	7f a1       	lds	r23, 0x4f
    17ba:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    17be:	68 a5       	lds	r22, 0x68
    17c0:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    17c4:	89 a5       	lds	r24, 0x69
    17c6:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    17ca:	9a a5       	lds	r25, 0x6a
    17cc:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    17d0:	1b a5       	lds	r17, 0x6b
    17d2:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    17d6:	de 01       	movw	r26, r28
    17d8:	9c 96       	adiw	r26, 0x2c	; 44
    17da:	ef ef       	ldi	r30, 0xFF	; 255
    17dc:	f1 e0       	ldi	r31, 0x01	; 1
    17de:	28 e0       	ldi	r18, 0x08	; 8
    17e0:	01 90       	ld	r0, Z+
    17e2:	0d 92       	st	X+, r0
    17e4:	21 50       	subi	r18, 0x01	; 1
    17e6:	e1 f7       	brne	.-8      	; 0x17e0 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    17e8:	e9 2f       	mov	r30, r25
    17ea:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	9f 01       	movw	r18, r30
    17f0:	22 0f       	add	r18, r18
    17f2:	33 1f       	adc	r19, r19
    17f4:	22 0f       	add	r18, r18
    17f6:	33 1f       	adc	r19, r19
    17f8:	a9 01       	movw	r20, r18
    17fa:	44 0f       	add	r20, r20
    17fc:	55 1f       	adc	r21, r21
    17fe:	44 0f       	add	r20, r20
    1800:	55 1f       	adc	r21, r21
    1802:	44 0f       	add	r20, r20
    1804:	55 1f       	adc	r21, r21
    1806:	42 1b       	sub	r20, r18
    1808:	53 0b       	sbc	r21, r19
    180a:	4e 0f       	add	r20, r30
    180c:	5f 1f       	adc	r21, r31
    180e:	55 95       	asr	r21
    1810:	47 95       	ror	r20
    1812:	55 95       	asr	r21
    1814:	47 95       	ror	r20
    1816:	55 95       	asr	r21
    1818:	47 95       	ror	r20
    181a:	55 95       	asr	r21
    181c:	47 95       	ror	r20
    181e:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1820:	fe 01       	movw	r30, r28
    1822:	e4 0f       	add	r30, r20
    1824:	f1 1d       	adc	r31, r1
    1826:	24 a5       	lds	r18, 0x64
    1828:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    182c:	de 01       	movw	r26, r28
    182e:	d4 96       	adiw	r26, 0x34	; 52
    1830:	e7 e0       	ldi	r30, 0x07	; 7
    1832:	f2 e0       	ldi	r31, 0x02	; 2
    1834:	28 e0       	ldi	r18, 0x08	; 8
    1836:	01 90       	ld	r0, Z+
    1838:	0d 92       	st	X+, r0
    183a:	21 50       	subi	r18, 0x01	; 1
    183c:	e1 f7       	brne	.-8      	; 0x1836 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    183e:	29 2f       	mov	r18, r25
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	20 7e       	andi	r18, 0xE0	; 224
    1844:	30 70       	andi	r19, 0x00	; 0
    1846:	35 95       	asr	r19
    1848:	27 95       	ror	r18
    184a:	35 95       	asr	r19
    184c:	27 95       	ror	r18
    184e:	35 95       	asr	r19
    1850:	27 95       	ror	r18
    1852:	83 70       	andi	r24, 0x03	; 3
    1854:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    1856:	42 2f       	mov	r20, r18
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	ca 01       	movw	r24, r20
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	9c 01       	movw	r18, r24
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	22 0f       	add	r18, r18
    186c:	33 1f       	adc	r19, r19
    186e:	22 0f       	add	r18, r18
    1870:	33 1f       	adc	r19, r19
    1872:	28 1b       	sub	r18, r24
    1874:	39 0b       	sbc	r19, r25
    1876:	42 0f       	add	r20, r18
    1878:	53 1f       	adc	r21, r19
    187a:	ca 01       	movw	r24, r20
    187c:	95 95       	asr	r25
    187e:	87 95       	ror	r24
    1880:	95 95       	asr	r25
    1882:	87 95       	ror	r24
    1884:	95 95       	asr	r25
    1886:	87 95       	ror	r24
    1888:	95 95       	asr	r25
    188a:	87 95       	ror	r24
    188c:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    188e:	fe 01       	movw	r30, r28
    1890:	e8 0f       	add	r30, r24
    1892:	f1 1d       	adc	r31, r1
    1894:	84 a9       	sts	0x44, r24
    1896:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    189a:	de 01       	movw	r26, r28
    189c:	dc 96       	adiw	r26, 0x3c	; 60
    189e:	ef e0       	ldi	r30, 0x0F	; 15
    18a0:	f2 e0       	ldi	r31, 0x02	; 2
    18a2:	88 e0       	ldi	r24, 0x08	; 8
    18a4:	01 90       	ld	r0, Z+
    18a6:	0d 92       	st	X+, r0
    18a8:	81 50       	subi	r24, 0x01	; 1
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    18ac:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    18ae:	46 2f       	mov	r20, r22
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	ca 01       	movw	r24, r20
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	9c 01       	movw	r18, r24
    18be:	22 0f       	add	r18, r18
    18c0:	33 1f       	adc	r19, r19
    18c2:	22 0f       	add	r18, r18
    18c4:	33 1f       	adc	r19, r19
    18c6:	22 0f       	add	r18, r18
    18c8:	33 1f       	adc	r19, r19
    18ca:	28 1b       	sub	r18, r24
    18cc:	39 0b       	sbc	r19, r25
    18ce:	42 0f       	add	r20, r18
    18d0:	53 1f       	adc	r21, r19
    18d2:	ca 01       	movw	r24, r20
    18d4:	95 95       	asr	r25
    18d6:	87 95       	ror	r24
    18d8:	95 95       	asr	r25
    18da:	87 95       	ror	r24
    18dc:	95 95       	asr	r25
    18de:	87 95       	ror	r24
    18e0:	95 95       	asr	r25
    18e2:	87 95       	ror	r24
    18e4:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    18e6:	fe 01       	movw	r30, r28
    18e8:	e8 0f       	add	r30, r24
    18ea:	f1 1d       	adc	r31, r1
    18ec:	84 ad       	sts	0x64, r24
    18ee:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    18f2:	21 2f       	mov	r18, r17
    18f4:	26 95       	lsr	r18
    18f6:	27 95       	ror	r18
    18f8:	22 27       	eor	r18, r18
    18fa:	27 95       	ror	r18
    18fc:	81 2f       	mov	r24, r17
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1902:	81 2f       	mov	r24, r17
    1904:	86 95       	lsr	r24
    1906:	86 95       	lsr	r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	81 70       	andi	r24, 0x01	; 1
    190c:	90 70       	andi	r25, 0x00	; 0
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1916:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1918:	81 2f       	mov	r24, r17
    191a:	86 95       	lsr	r24
    191c:	86 95       	lsr	r24
    191e:	86 95       	lsr	r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	90 70       	andi	r25, 0x00	; 0
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    192a:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    192c:	81 2f       	mov	r24, r17
    192e:	82 95       	swap	r24
    1930:	8f 70       	andi	r24, 0x0F	; 15
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	90 70       	andi	r25, 0x00	; 0
    1938:	82 95       	swap	r24
    193a:	92 95       	swap	r25
    193c:	90 7f       	andi	r25, 0xF0	; 240
    193e:	98 27       	eor	r25, r24
    1940:	80 7f       	andi	r24, 0xF0	; 240
    1942:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1944:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    1946:	81 2f       	mov	r24, r17
    1948:	82 95       	swap	r24
    194a:	86 95       	lsr	r24
    194c:	87 70       	andi	r24, 0x07	; 7
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	81 70       	andi	r24, 0x01	; 1
    1952:	90 70       	andi	r25, 0x00	; 0
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	82 95       	swap	r24
    195a:	92 95       	swap	r25
    195c:	90 7f       	andi	r25, 0xF0	; 240
    195e:	98 27       	eor	r25, r24
    1960:	80 7f       	andi	r24, 0xF0	; 240
    1962:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1964:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1966:	81 2f       	mov	r24, r17
    1968:	82 95       	swap	r24
    196a:	86 95       	lsr	r24
    196c:	86 95       	lsr	r24
    196e:	83 70       	andi	r24, 0x03	; 3
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	81 70       	andi	r24, 0x01	; 1
    1974:	90 70       	andi	r25, 0x00	; 0
    1976:	00 24       	eor	r0, r0
    1978:	96 95       	lsr	r25
    197a:	87 95       	ror	r24
    197c:	07 94       	ror	r0
    197e:	96 95       	lsr	r25
    1980:	87 95       	ror	r24
    1982:	07 94       	ror	r0
    1984:	98 2f       	mov	r25, r24
    1986:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1988:	82 2b       	or	r24, r18
    198a:	80 93 7e 03 	sts	0x037E, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    198e:	87 2f       	mov	r24, r23
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	81 70       	andi	r24, 0x01	; 1
    1994:	90 70       	andi	r25, 0x00	; 0
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    19a2:	90 91 80 03 	lds	r25, 0x0380
    19a6:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    19a8:	89 2b       	or	r24, r25
    19aa:	11 1f       	adc	r17, r17
    19ac:	11 27       	eor	r17, r17
    19ae:	11 1f       	adc	r17, r17
    19b0:	11 0f       	add	r17, r17
    19b2:	11 0f       	add	r17, r17
    19b4:	81 2b       	or	r24, r17
    19b6:	80 93 80 03 	sts	0x0380, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    19ba:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    19be:	80 91 80 03 	lds	r24, 0x0380
    19c2:	8f 77       	andi	r24, 0x7F	; 127
    19c4:	80 93 80 03 	sts	0x0380, r24
	
	current_patch.mode = MEMORY;
    19c8:	10 92 07 03 	sts	0x0307, r1
	
}
    19cc:	cd 5b       	subi	r28, 0xBD	; 189
    19ce:	df 4f       	sbci	r29, 0xFF	; 255
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	08 95       	ret

000019e2 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    19e2:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    19e6:	60 3f       	cpi	r22, 0xF0	; 240
    19e8:	11 f4       	brne	.+4      	; 0x19ee <transpose_note+0xc>
    19ea:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    19ee:	29 2f       	mov	r18, r25
    19f0:	22 0f       	add	r18, r18
    19f2:	92 0f       	add	r25, r18
    19f4:	99 0f       	add	r25, r25
    19f6:	99 0f       	add	r25, r25
    19f8:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    19fa:	89 38       	cpi	r24, 0x89	; 137
    19fc:	08 f0       	brcs	.+2      	; 0x1a00 <transpose_note+0x1e>
    19fe:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1a00:	08 95       	ret

00001a02 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1a02:	80 91 7e 03 	lds	r24, 0x037E
    1a06:	98 2f       	mov	r25, r24
    1a08:	96 95       	lsr	r25
    1a0a:	96 95       	lsr	r25
    1a0c:	96 95       	lsr	r25
    1a0e:	90 ff       	sbrs	r25, 0
    1a10:	0e c0       	rjmp	.+28     	; 0x1a2e <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1a12:	90 91 08 03 	lds	r25, 0x0308
    1a16:	9f 5f       	subi	r25, 0xFF	; 255
    1a18:	90 93 08 03 	sts	0x0308, r25
    1a1c:	95 30       	cpi	r25, 0x05	; 5
    1a1e:	19 f4       	brne	.+6      	; 0x1a26 <update_octave_range+0x24>
    1a20:	94 e0       	ldi	r25, 0x04	; 4
    1a22:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1a26:	98 e0       	ldi	r25, 0x08	; 8
    1a28:	89 27       	eor	r24, r25
    1a2a:	80 93 7e 03 	sts	0x037E, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1a2e:	80 91 7f 03 	lds	r24, 0x037F
    1a32:	98 2f       	mov	r25, r24
    1a34:	96 95       	lsr	r25
    1a36:	96 95       	lsr	r25
    1a38:	96 95       	lsr	r25
    1a3a:	90 ff       	sbrs	r25, 0
    1a3c:	0b c0       	rjmp	.+22     	; 0x1a54 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1a3e:	90 91 08 03 	lds	r25, 0x0308
    1a42:	99 23       	and	r25, r25
    1a44:	19 f0       	breq	.+6      	; 0x1a4c <update_octave_range+0x4a>
    1a46:	91 50       	subi	r25, 0x01	; 1
    1a48:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1a4c:	98 e0       	ldi	r25, 0x08	; 8
    1a4e:	89 27       	eor	r24, r25
    1a50:	80 93 7f 03 	sts	0x037F, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1a54:	80 91 08 03 	lds	r24, 0x0308
    1a58:	e1 e2       	ldi	r30, 0x21	; 33
    1a5a:	f2 e0       	ldi	r31, 0x02	; 2
    1a5c:	e8 0f       	add	r30, r24
    1a5e:	f1 1d       	adc	r31, r1
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	00 80       	ld	r0, Z
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <update_octave_range+0x6a>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <update_octave_range+0x66>
    1a70:	58 2f       	mov	r21, r24
    1a72:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1a76:	90 91 7f 03 	lds	r25, 0x037F
    1a7a:	29 2f       	mov	r18, r25
    1a7c:	26 95       	lsr	r18
    1a7e:	26 95       	lsr	r18
    1a80:	20 ff       	sbrs	r18, 0
    1a82:	0e c0       	rjmp	.+28     	; 0x1aa0 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1a84:	80 91 09 03 	lds	r24, 0x0309
    1a88:	8f 5f       	subi	r24, 0xFF	; 255
    1a8a:	80 93 09 03 	sts	0x0309, r24
    1a8e:	85 30       	cpi	r24, 0x05	; 5
    1a90:	19 f4       	brne	.+6      	; 0x1a98 <update_octave_range+0x96>
    1a92:	84 e0       	ldi	r24, 0x04	; 4
    1a94:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	98 27       	eor	r25, r24
    1a9c:	90 93 7f 03 	sts	0x037F, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1aa0:	90 91 7f 03 	lds	r25, 0x037F
    1aa4:	29 2f       	mov	r18, r25
    1aa6:	26 95       	lsr	r18
    1aa8:	20 ff       	sbrs	r18, 0
    1aaa:	0b c0       	rjmp	.+22     	; 0x1ac2 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1aac:	80 91 09 03 	lds	r24, 0x0309
    1ab0:	88 23       	and	r24, r24
    1ab2:	19 f0       	breq	.+6      	; 0x1aba <update_octave_range+0xb8>
    1ab4:	81 50       	subi	r24, 0x01	; 1
    1ab6:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	98 27       	eor	r25, r24
    1abe:	90 93 7f 03 	sts	0x037F, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1ac2:	40 91 00 03 	lds	r20, 0x0300
    1ac6:	4c 7f       	andi	r20, 0xFC	; 252
    1ac8:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1acc:	90 91 09 03 	lds	r25, 0x0309
    1ad0:	93 30       	cpi	r25, 0x03	; 3
    1ad2:	88 f0       	brcs	.+34     	; 0x1af6 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1ad4:	ec e1       	ldi	r30, 0x1C	; 28
    1ad6:	f2 e0       	ldi	r31, 0x02	; 2
    1ad8:	e9 0f       	add	r30, r25
    1ada:	f1 1d       	adc	r31, r1
    1adc:	21 e0       	ldi	r18, 0x01	; 1
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	c9 01       	movw	r24, r18
    1ae2:	00 80       	ld	r0, Z
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <update_octave_range+0xe8>
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	0a 94       	dec	r0
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <update_octave_range+0xe4>
    1aee:	84 2b       	or	r24, r20
    1af0:	80 93 00 03 	sts	0x0300, r24
    1af4:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1af6:	ec e1       	ldi	r30, 0x1C	; 28
    1af8:	f2 e0       	ldi	r31, 0x02	; 2
    1afa:	e9 0f       	add	r30, r25
    1afc:	f1 1d       	adc	r31, r1
    1afe:	21 e0       	ldi	r18, 0x01	; 1
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	c9 01       	movw	r24, r18
    1b04:	00 80       	ld	r0, Z
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <update_octave_range+0x10a>
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	0a 94       	dec	r0
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <update_octave_range+0x106>
    1b10:	85 2b       	or	r24, r21
    1b12:	80 93 01 03 	sts	0x0301, r24
    1b16:	08 95       	ret

00001b18 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1b18:	80 91 7f 03 	lds	r24, 0x037F
    1b1c:	88 23       	and	r24, r24
    1b1e:	64 f4       	brge	.+24     	; 0x1b38 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1b20:	80 58       	subi	r24, 0x80	; 128
    1b22:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1b26:	80 91 0a 03 	lds	r24, 0x030A
    1b2a:	8f 5f       	subi	r24, 0xFF	; 255
    1b2c:	80 93 0a 03 	sts	0x030A, r24
    1b30:	85 30       	cpi	r24, 0x05	; 5
    1b32:	11 f4       	brne	.+4      	; 0x1b38 <update_lfo_shape+0x20>
    1b34:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1b38:	e0 91 0a 03 	lds	r30, 0x030A
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	ee 0f       	add	r30, r30
    1b40:	ff 1f       	adc	r31, r31
    1b42:	ea 5d       	subi	r30, 0xDA	; 218
    1b44:	fd 4f       	sbci	r31, 0xFD	; 253
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	01 80       	ldd	r0, Z+1	; 0x01
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <update_lfo_shape+0x3a>
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	0a 94       	dec	r0
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1b56:	90 91 ff 02 	lds	r25, 0x02FF
    1b5a:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1b5c:	89 2b       	or	r24, r25
    1b5e:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1b62:	80 81       	ld	r24, Z
    1b64:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1b66:	ed ed       	ldi	r30, 0xDD	; 221
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	80 62       	ori	r24, 0x20	; 32
    1b6e:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1b70:	80 81       	ld	r24, Z
    1b72:	8f 7d       	andi	r24, 0xDF	; 223
    1b74:	80 83       	st	Z, r24
	
}		
    1b76:	08 95       	ret

00001b78 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1b78:	80 91 7f 03 	lds	r24, 0x037F
    1b7c:	80 ff       	sbrs	r24, 0
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	89 27       	eor	r24, r25
    1b84:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1b88:	80 91 0b 03 	lds	r24, 0x030B
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	80 93 0b 03 	sts	0x030B, r24
    1b92:	85 30       	cpi	r24, 0x05	; 5
    1b94:	11 f4       	brne	.+4      	; 0x1b9a <update_lfo_sync+0x22>
    1b96:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1b9a:	10 92 d2 03 	sts	0x03D2, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1b9e:	60 91 ff 02 	lds	r22, 0x02FF
    1ba2:	60 7f       	andi	r22, 0xF0	; 240
    1ba4:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1ba8:	20 91 0b 03 	lds	r18, 0x030B
    1bac:	22 23       	and	r18, r18
    1bae:	71 f0       	breq	.+28     	; 0x1bcc <update_lfo_sync+0x54>
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	21 50       	subi	r18, 0x01	; 1
    1bb4:	30 40       	sbci	r19, 0x00	; 0
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	ca 01       	movw	r24, r20
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <update_lfo_sync+0x4a>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	2a 95       	dec	r18
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <update_lfo_sync+0x46>
    1bc6:	86 2b       	or	r24, r22
    1bc8:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1bcc:	80 91 ff 02 	lds	r24, 0x02FF
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	8f 70       	andi	r24, 0x0F	; 15
    1bd4:	90 70       	andi	r25, 0x00	; 0
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	91 05       	cpc	r25, r1
    1bda:	89 f0       	breq	.+34     	; 0x1bfe <update_lfo_sync+0x86>
    1bdc:	83 30       	cpi	r24, 0x03	; 3
    1bde:	91 05       	cpc	r25, r1
    1be0:	24 f4       	brge	.+8      	; 0x1bea <update_lfo_sync+0x72>
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	91 05       	cpc	r25, r1
    1be6:	b9 f4       	brne	.+46     	; 0x1c16 <update_lfo_sync+0x9e>
    1be8:	07 c0       	rjmp	.+14     	; 0x1bf8 <update_lfo_sync+0x80>
    1bea:	84 30       	cpi	r24, 0x04	; 4
    1bec:	91 05       	cpc	r25, r1
    1bee:	59 f0       	breq	.+22     	; 0x1c06 <update_lfo_sync+0x8e>
    1bf0:	88 30       	cpi	r24, 0x08	; 8
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	81 f4       	brne	.+32     	; 0x1c16 <update_lfo_sync+0x9e>
    1bf6:	0b c0       	rjmp	.+22     	; 0x1c0e <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1bf8:	10 92 d1 03 	sts	0x03D1, r1
			
			break;
    1bfc:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			midi_clock.divider = 24; //1:4
    1bfe:	88 e1       	ldi	r24, 0x18	; 24
    1c00:	80 93 d1 03 	sts	0x03D1, r24
			break;
    1c04:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1c06:	8c e0       	ldi	r24, 0x0C	; 12
    1c08:	80 93 d1 03 	sts	0x03D1, r24
			break;
    1c0c:	08 95       	ret
			
		case 0b1000:
			midi_clock.divider = 6; //1:16	 		
    1c0e:	86 e0       	ldi	r24, 0x06	; 6
    1c10:	80 93 d1 03 	sts	0x03D1, r24
			break;
    1c14:	08 95       	ret
		
		default:
			midi_clock.divider = 0; //need to turn midi sync off here. How?
    1c16:	10 92 d1 03 	sts	0x03D1, r1
    1c1a:	08 95       	ret

00001c1c <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1c1c:	80 91 7f 03 	lds	r24, 0x037F
    1c20:	98 2f       	mov	r25, r24
    1c22:	92 95       	swap	r25
    1c24:	96 95       	lsr	r25
    1c26:	96 95       	lsr	r25
    1c28:	93 70       	andi	r25, 0x03	; 3
    1c2a:	90 ff       	sbrs	r25, 0
    1c2c:	0f c0       	rjmp	.+30     	; 0x1c4c <update_arp_sync+0x30>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1c2e:	90 e4       	ldi	r25, 0x40	; 64
    1c30:	89 27       	eor	r24, r25
    1c32:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1c36:	80 91 0c 03 	lds	r24, 0x030C
    1c3a:	8f 5f       	subi	r24, 0xFF	; 255
    1c3c:	80 93 0c 03 	sts	0x030C, r24
    1c40:	85 30       	cpi	r24, 0x05	; 5
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <update_arp_sync+0x2c>
    1c44:	10 92 0c 03 	sts	0x030C, r1
		system_clock.ppqn_counter = 0; //reset counter
    1c48:	10 92 cc 03 	sts	0x03CC, r1
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1c4c:	60 91 00 03 	lds	r22, 0x0300
    1c50:	63 7c       	andi	r22, 0xC3	; 195
    1c52:	60 93 00 03 	sts	0x0300, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1c56:	20 91 0c 03 	lds	r18, 0x030C
    1c5a:	22 23       	and	r18, r18
    1c5c:	71 f0       	breq	.+28     	; 0x1c7a <update_arp_sync+0x5e>
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	2f 5f       	subi	r18, 0xFF	; 255
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	41 e0       	ldi	r20, 0x01	; 1
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	ca 01       	movw	r24, r20
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <update_arp_sync+0x54>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	2a 95       	dec	r18
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <update_arp_sync+0x50>
    1c74:	86 2b       	or	r24, r22
    1c76:	80 93 00 03 	sts	0x0300, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1c7a:	80 91 00 03 	lds	r24, 0x0300
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	8c 73       	andi	r24, 0x3C	; 60
    1c82:	90 70       	andi	r25, 0x00	; 0
    1c84:	88 30       	cpi	r24, 0x08	; 8
    1c86:	91 05       	cpc	r25, r1
    1c88:	91 f0       	breq	.+36     	; 0x1cae <update_arp_sync+0x92>
    1c8a:	89 30       	cpi	r24, 0x09	; 9
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	24 f4       	brge	.+8      	; 0x1c98 <update_arp_sync+0x7c>
    1c90:	84 30       	cpi	r24, 0x04	; 4
    1c92:	91 05       	cpc	r25, r1
    1c94:	c1 f4       	brne	.+48     	; 0x1cc6 <update_arp_sync+0xaa>
    1c96:	07 c0       	rjmp	.+14     	; 0x1ca6 <update_arp_sync+0x8a>
    1c98:	80 31       	cpi	r24, 0x10	; 16
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	61 f0       	breq	.+24     	; 0x1cb6 <update_arp_sync+0x9a>
    1c9e:	80 32       	cpi	r24, 0x20	; 32
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	89 f4       	brne	.+34     	; 0x1cc6 <update_arp_sync+0xaa>
    1ca4:	0c c0       	rjmp	.+24     	; 0x1cbe <update_arp_sync+0xa2>
			
		case 0b00000100:
			system_clock.divider = 48; //1:2
    1ca6:	80 e3       	ldi	r24, 0x30	; 48
    1ca8:	80 93 cb 03 	sts	0x03CB, r24
			break;
    1cac:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = 24; //1:4
    1cae:	88 e1       	ldi	r24, 0x18	; 24
    1cb0:	80 93 cb 03 	sts	0x03CB, r24
			break;
    1cb4:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = 12; //1:8
    1cb6:	8c e0       	ldi	r24, 0x0C	; 12
    1cb8:	80 93 cb 03 	sts	0x03CB, r24
			break;
    1cbc:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = 6; //1:16	
    1cbe:	86 e0       	ldi	r24, 0x06	; 6
    1cc0:	80 93 cb 03 	sts	0x03CB, r24
			break;
    1cc4:	08 95       	ret
			
		default:
			system_clock.divider = 2; //should be 1 but this never turns arp_sync_led off - need to fix this	
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	80 93 cb 03 	sts	0x03CB, r24
    1ccc:	08 95       	ret

00001cce <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1cce:	80 91 7f 03 	lds	r24, 0x037F
    1cd2:	80 31       	cpi	r24, 0x10	; 16
    1cd4:	69 f4       	brne	.+26     	; 0x1cf0 <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1cd6:	10 92 7f 03 	sts	0x037F, r1
		
		if (++arp_range == 4) arp_range = 0;
    1cda:	80 91 0d 03 	lds	r24, 0x030D
    1cde:	8f 5f       	subi	r24, 0xFF	; 255
    1ce0:	80 93 0d 03 	sts	0x030D, r24
    1ce4:	84 30       	cpi	r24, 0x04	; 4
    1ce6:	11 f4       	brne	.+4      	; 0x1cec <update_arp_range+0x1e>
    1ce8:	10 92 0d 03 	sts	0x030D, r1
		arp.step_position = 0; //reset step position if range changes
    1cec:	10 92 86 03 	sts	0x0386, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1cf0:	80 91 fe 02 	lds	r24, 0x02FE
    1cf4:	8d 7f       	andi	r24, 0xFD	; 253
    1cf6:	80 93 fe 02 	sts	0x02FE, r24
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1cfa:	80 91 00 03 	lds	r24, 0x0300
    1cfe:	8f 73       	andi	r24, 0x3F	; 63
    1d00:	80 93 00 03 	sts	0x0300, r24
	
	arp.range = arp_range;
    1d04:	80 91 0d 03 	lds	r24, 0x030D
    1d08:	80 93 84 03 	sts	0x0384, r24
	
	update_arp_sequence(); //update sequence with new settings
    1d0c:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1d10:	80 91 0d 03 	lds	r24, 0x030D
    1d14:	82 30       	cpi	r24, 0x02	; 2
    1d16:	51 f0       	breq	.+20     	; 0x1d2c <update_arp_range+0x5e>
    1d18:	83 30       	cpi	r24, 0x03	; 3
    1d1a:	71 f0       	breq	.+28     	; 0x1d38 <update_arp_range+0x6a>
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	89 f4       	brne	.+34     	; 0x1d42 <update_arp_range+0x74>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1d20:	80 91 fe 02 	lds	r24, 0x02FE
    1d24:	82 60       	ori	r24, 0x02	; 2
    1d26:	80 93 fe 02 	sts	0x02FE, r24
			break;
    1d2a:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1d2c:	80 91 00 03 	lds	r24, 0x0300
    1d30:	80 64       	ori	r24, 0x40	; 64
    1d32:	80 93 00 03 	sts	0x0300, r24
			break;
    1d36:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1d38:	80 91 00 03 	lds	r24, 0x0300
    1d3c:	80 68       	ori	r24, 0x80	; 128
    1d3e:	80 93 00 03 	sts	0x0300, r24
    1d42:	08 95       	ret

00001d44 <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1d44:	80 91 7f 03 	lds	r24, 0x037F
    1d48:	98 2f       	mov	r25, r24
    1d4a:	92 95       	swap	r25
    1d4c:	96 95       	lsr	r25
    1d4e:	97 70       	andi	r25, 0x07	; 7
    1d50:	90 ff       	sbrs	r25, 0
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <update_arp_mode+0x2e>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1d54:	90 e2       	ldi	r25, 0x20	; 32
    1d56:	89 27       	eor	r24, r25
    1d58:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_mode == 5) arp_mode = 0;
    1d5c:	80 91 0e 03 	lds	r24, 0x030E
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	80 93 0e 03 	sts	0x030E, r24
    1d66:	85 30       	cpi	r24, 0x05	; 5
    1d68:	11 f4       	brne	.+4      	; 0x1d6e <update_arp_mode+0x2a>
    1d6a:	10 92 0e 03 	sts	0x030E, r1
		arp.step_position = 0; //reset step position if mode changes
    1d6e:	10 92 86 03 	sts	0x0386, r1
		
	}

	arp.clock_source = INTERNAL_CLOCK;	
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	80 93 89 03 	sts	0x0389, r24

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1d78:	90 91 fe 02 	lds	r25, 0x02FE
    1d7c:	93 7c       	andi	r25, 0xC3	; 195
    1d7e:	90 93 fe 02 	sts	0x02FE, r25
	
	switch(arp_mode) {
    1d82:	80 91 0e 03 	lds	r24, 0x030E
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	81 f0       	breq	.+32     	; 0x1daa <update_arp_mode+0x66>
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	28 f0       	brcs	.+10     	; 0x1d98 <update_arp_mode+0x54>
    1d8e:	82 30       	cpi	r24, 0x02	; 2
    1d90:	91 f0       	breq	.+36     	; 0x1db6 <update_arp_mode+0x72>
    1d92:	83 30       	cpi	r24, 0x03	; 3
    1d94:	f1 f4       	brne	.+60     	; 0x1dd2 <update_arp_mode+0x8e>
    1d96:	16 c0       	rjmp	.+44     	; 0x1dc4 <update_arp_mode+0x80>
		
		case 0:
		
			//turn arp off
			arp.clock_source = OFF;
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	80 93 89 03 	sts	0x0389, r24
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    1d9e:	80 91 b0 02 	lds	r24, 0x02B0
    1da2:	88 23       	and	r24, r24
    1da4:	e1 f4       	brne	.+56     	; 0x1dde <update_arp_mode+0x9a>
    1da6:	89 98       	cbi	0x11, 1	; 17
    1da8:	1a c0       	rjmp	.+52     	; 0x1dde <update_arp_mode+0x9a>
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1daa:	94 62       	ori	r25, 0x24	; 36
    1dac:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP;
    1db0:	10 92 8a 03 	sts	0x038A, r1
			break;	
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <update_arp_mode+0x9a>
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1db6:	94 61       	ori	r25, 0x14	; 20
    1db8:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = DOWN;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	80 93 8a 03 	sts	0x038A, r24
			break;
    1dc2:	0d c0       	rjmp	.+26     	; 0x1dde <update_arp_mode+0x9a>
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1dc4:	94 63       	ori	r25, 0x34	; 52
    1dc6:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP_DOWN;
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	80 93 8a 03 	sts	0x038A, r24
			break;
    1dd0:	06 c0       	rjmp	.+12     	; 0x1dde <update_arp_mode+0x9a>
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1dd2:	9c 60       	ori	r25, 0x0C	; 12
    1dd4:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = RANDOM;
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	80 93 8a 03 	sts	0x038A, r24
			
					
		
	}
	
	update_arp_sequence(); //update arp sequence with new mode
    1dde:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	



}
    1de2:	08 95       	ret

00001de4 <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1de4:	90 91 7e 03 	lds	r25, 0x037E
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1de8:	80 91 80 03 	lds	r24, 0x0380
    1dec:	86 95       	lsr	r24
    1dee:	86 95       	lsr	r24
    1df0:	68 2f       	mov	r22, r24
    1df2:	67 95       	ror	r22
    1df4:	66 27       	eor	r22, r22
    1df6:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1df8:	29 2f       	mov	r18, r25
    1dfa:	21 70       	andi	r18, 0x01	; 1
    1dfc:	26 2b       	or	r18, r22
    1dfe:	69 2f       	mov	r22, r25
    1e00:	66 1f       	adc	r22, r22
    1e02:	66 27       	eor	r22, r22
    1e04:	66 1f       	adc	r22, r22
    1e06:	66 0f       	add	r22, r22
    1e08:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1e0a:	29 2f       	mov	r18, r25
    1e0c:	26 95       	lsr	r18
    1e0e:	26 95       	lsr	r18
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	21 70       	andi	r18, 0x01	; 1
    1e14:	30 70       	andi	r19, 0x00	; 0
    1e16:	d9 01       	movw	r26, r18
    1e18:	aa 0f       	add	r26, r26
    1e1a:	bb 1f       	adc	r27, r27
    1e1c:	aa 0f       	add	r26, r26
    1e1e:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e20:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1e22:	a9 2f       	mov	r26, r25
    1e24:	a6 95       	lsr	r26
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	a1 70       	andi	r26, 0x01	; 1
    1e2a:	b0 70       	andi	r27, 0x00	; 0
    1e2c:	fd 01       	movw	r30, r26
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	ee 0f       	add	r30, r30
    1e38:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e3a:	a6 2f       	mov	r26, r22
    1e3c:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1e3e:	e9 2f       	mov	r30, r25
    1e40:	e2 95       	swap	r30
    1e42:	ef 70       	andi	r30, 0x0F	; 15
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	e1 70       	andi	r30, 0x01	; 1
    1e48:	f0 70       	andi	r31, 0x00	; 0
    1e4a:	bf 01       	movw	r22, r30
    1e4c:	62 95       	swap	r22
    1e4e:	72 95       	swap	r23
    1e50:	70 7f       	andi	r23, 0xF0	; 240
    1e52:	76 27       	eor	r23, r22
    1e54:	60 7f       	andi	r22, 0xF0	; 240
    1e56:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e58:	ea 2f       	mov	r30, r26
    1e5a:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1e5c:	69 2f       	mov	r22, r25
    1e5e:	62 95       	swap	r22
    1e60:	66 95       	lsr	r22
    1e62:	67 70       	andi	r22, 0x07	; 7
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	61 70       	andi	r22, 0x01	; 1
    1e68:	70 70       	andi	r23, 0x00	; 0
    1e6a:	ab 01       	movw	r20, r22
    1e6c:	44 0f       	add	r20, r20
    1e6e:	55 1f       	adc	r21, r21
    1e70:	42 95       	swap	r20
    1e72:	52 95       	swap	r21
    1e74:	50 7f       	andi	r21, 0xF0	; 240
    1e76:	54 27       	eor	r21, r20
    1e78:	40 7f       	andi	r20, 0xF0	; 240
    1e7a:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e7c:	6e 2f       	mov	r22, r30
    1e7e:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1e80:	49 2f       	mov	r20, r25
    1e82:	42 95       	swap	r20
    1e84:	46 95       	lsr	r20
    1e86:	46 95       	lsr	r20
    1e88:	43 70       	andi	r20, 0x03	; 3
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	41 70       	andi	r20, 0x01	; 1
    1e8e:	50 70       	andi	r21, 0x00	; 0
    1e90:	9a 01       	movw	r18, r20
    1e92:	00 24       	eor	r0, r0
    1e94:	36 95       	lsr	r19
    1e96:	27 95       	ror	r18
    1e98:	07 94       	ror	r0
    1e9a:	36 95       	lsr	r19
    1e9c:	27 95       	ror	r18
    1e9e:	07 94       	ror	r0
    1ea0:	32 2f       	mov	r19, r18
    1ea2:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1ea4:	26 2b       	or	r18, r22
    1ea6:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1eaa:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1eac:	81 95       	neg	r24
    1eae:	89 27       	eor	r24, r25
    1eb0:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1eb2:	89 27       	eor	r24, r25
    1eb4:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1eb8:	ed ed       	ldi	r30, 0xDD	; 221
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1ebe:	90 91 80 03 	lds	r25, 0x0380
    1ec2:	96 95       	lsr	r25
    1ec4:	96 95       	lsr	r25
    1ec6:	96 95       	lsr	r25
    1ec8:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1eca:	91 95       	neg	r25
    1ecc:	80 81       	ld	r24, Z
    1ece:	89 27       	eor	r24, r25
    1ed0:	80 71       	andi	r24, 0x10	; 16
    1ed2:	82 27       	eor	r24, r18
    1ed4:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1ed6:	ee ef       	ldi	r30, 0xFE	; 254
    1ed8:	f2 e0       	ldi	r31, 0x02	; 2
    1eda:	80 81       	ld	r24, Z
    1edc:	98 27       	eor	r25, r24
    1ede:	91 70       	andi	r25, 0x01	; 1
    1ee0:	89 27       	eor	r24, r25
    1ee2:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1ee4:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1ee8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1eec:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    1ef0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <update_arp_sync>
	update_arp_range();
    1ef4:	0e 94 67 0e 	call	0x1cce	; 0x1cce <update_arp_range>
	update_arp_mode();
    1ef8:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    1efc:	08 95       	ret

00001efe <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1f02:	90 91 07 03 	lds	r25, 0x0307
    1f06:	95 30       	cpi	r25, 0x05	; 5
    1f08:	01 f5       	brne	.+64     	; 0x1f4a <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1f0a:	87 e0       	ldi	r24, 0x07	; 7
    1f0c:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f0e:	cd ed       	ldi	r28, 0xDD	; 221
    1f10:	d0 e0       	ldi	r29, 0x00	; 0
    1f12:	88 81       	ld	r24, Y
    1f14:	80 62       	ori	r24, 0x20	; 32
    1f16:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f18:	88 81       	ld	r24, Y
    1f1a:	8f 7d       	andi	r24, 0xDF	; 223
    1f1c:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f1e:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1f20:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1f24:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f26:	88 81       	ld	r24, Y
    1f28:	80 62       	ori	r24, 0x20	; 32
    1f2a:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f2c:	88 81       	ld	r24, Y
    1f2e:	8f 7d       	andi	r24, 0xDF	; 223
    1f30:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f32:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1f34:	80 91 ff 02 	lds	r24, 0x02FF
    1f38:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1f3a:	80 68       	ori	r24, 0x80	; 128
    1f3c:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1f40:	0e 94 91 01 	call	0x322	; 0x322 <setup_system_clock>

		current_patch.mode = MEMORY;
    1f44:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1f48:	63 c0       	rjmp	.+198    	; 0x2010 <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1f4a:	80 91 80 03 	lds	r24, 0x0380
    1f4e:	28 2f       	mov	r18, r24
    1f50:	22 95       	swap	r18
    1f52:	26 95       	lsr	r18
    1f54:	26 95       	lsr	r18
    1f56:	23 70       	andi	r18, 0x03	; 3
    1f58:	20 ff       	sbrs	r18, 0
    1f5a:	15 c0       	rjmp	.+42     	; 0x1f86 <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1f5c:	20 e4       	ldi	r18, 0x40	; 64
    1f5e:	82 27       	eor	r24, r18
    1f60:	80 93 80 03 	sts	0x0380, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1f64:	80 91 03 03 	lds	r24, 0x0303
    1f68:	8f 5f       	subi	r24, 0xFF	; 255
    1f6a:	80 93 03 03 	sts	0x0303, r24
    1f6e:	85 32       	cpi	r24, 0x25	; 37
    1f70:	21 f4       	brne	.+8      	; 0x1f7a <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1f72:	84 e2       	ldi	r24, 0x24	; 36
    1f74:	80 93 03 03 	sts	0x0303, r24
    1f78:	06 c0       	rjmp	.+12     	; 0x1f86 <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1f7a:	93 30       	cpi	r25, 0x03	; 3
    1f7c:	21 f0       	breq	.+8      	; 0x1f86 <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1f7e:	0e 94 11 0a 	call	0x1422	; 0x1422 <load_patch>
			update_patch();
    1f82:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1f86:	80 91 80 03 	lds	r24, 0x0380
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	92 95       	swap	r25
    1f8e:	96 95       	lsr	r25
    1f90:	97 70       	andi	r25, 0x07	; 7
    1f92:	90 ff       	sbrs	r25, 0
    1f94:	15 c0       	rjmp	.+42     	; 0x1fc0 <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1f96:	90 e2       	ldi	r25, 0x20	; 32
    1f98:	89 27       	eor	r24, r25
    1f9a:	80 93 80 03 	sts	0x0380, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1f9e:	80 91 03 03 	lds	r24, 0x0303
    1fa2:	81 30       	cpi	r24, 0x01	; 1
    1fa4:	19 f0       	breq	.+6      	; 0x1fac <update_patch_programmer+0xae>
    1fa6:	81 50       	subi	r24, 0x01	; 1
    1fa8:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1fac:	80 91 07 03 	lds	r24, 0x0307
    1fb0:	83 30       	cpi	r24, 0x03	; 3
    1fb2:	31 f0       	breq	.+12     	; 0x1fc0 <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    1fb4:	80 91 03 03 	lds	r24, 0x0303
    1fb8:	0e 94 11 0a 	call	0x1422	; 0x1422 <load_patch>
			update_patch();
    1fbc:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1fc0:	80 91 80 03 	lds	r24, 0x0380
    1fc4:	98 2f       	mov	r25, r24
    1fc6:	92 95       	swap	r25
    1fc8:	9f 70       	andi	r25, 0x0F	; 15
    1fca:	90 ff       	sbrs	r25, 0
    1fcc:	15 c0       	rjmp	.+42     	; 0x1ff8 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1fce:	90 e1       	ldi	r25, 0x10	; 16
    1fd0:	89 27       	eor	r24, r25
    1fd2:	80 93 80 03 	sts	0x0380, r24
		if (current_patch.mode != WRITE) {
    1fd6:	90 91 07 03 	lds	r25, 0x0307
    1fda:	93 30       	cpi	r25, 0x03	; 3
    1fdc:	49 f0       	breq	.+18     	; 0x1ff0 <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1fde:	8f 77       	andi	r24, 0x7F	; 127
    1fe0:	80 93 80 03 	sts	0x0380, r24
			current_patch.mode = WRITE;
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1fea:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lock_pots>
    1fee:	04 c0       	rjmp	.+8      	; 0x1ff8 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1ff0:	80 91 03 03 	lds	r24, 0x0303
    1ff4:	0e 94 1e 08 	call	0x103c	; 0x103c <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1ff8:	80 91 80 03 	lds	r24, 0x0380
    1ffc:	88 23       	and	r24, r24
    1ffe:	44 f4       	brge	.+16     	; 0x2010 <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    2000:	80 68       	ori	r24, 0x80	; 128
    2002:	80 93 80 03 	sts	0x0380, r24
		current_patch.mode = MANUAL;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    200c:	0e 94 0d 08 	call	0x101a	; 0x101a <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	08 95       	ret

00002016 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2016:	88 ed       	ldi	r24, 0xD8	; 216
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2022:	81 ee       	ldi	r24, 0xE1	; 225
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    202e:	82 ee       	ldi	r24, 0xE2	; 226
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    203a:	83 eb       	ldi	r24, 0xB3	; 179
    203c:	92 e0       	ldi	r25, 0x02	; 2
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2046:	8a ed       	ldi	r24, 0xDA	; 218
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    2052:	8f ed       	ldi	r24, 0xDF	; 223
    2054:	91 e0       	ldi	r25, 0x01	; 1
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    205e:	80 ee       	ldi	r24, 0xE0	; 224
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    206a:	81 ed       	ldi	r24, 0xD1	; 209
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2076:	86 ed       	ldi	r24, 0xD6	; 214
    2078:	91 e0       	ldi	r25, 0x01	; 1
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    2082:	82 ed       	ldi	r24, 0xD2	; 210
    2084:	91 e0       	ldi	r25, 0x01	; 1
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    208e:	83 ed       	ldi	r24, 0xD3	; 211
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    209a:	84 ed       	ldi	r24, 0xD4	; 212
    209c:	91 e0       	ldi	r25, 0x01	; 1
    209e:	6f ef       	ldi	r22, 0xFF	; 255
    20a0:	7f e3       	ldi	r23, 0x3F	; 63
    20a2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    20a6:	85 ed       	ldi	r24, 0xD5	; 213
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    20b2:	89 ed       	ldi	r24, 0xD9	; 217
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    20be:	8e ec       	ldi	r24, 0xCE	; 206
    20c0:	91 e0       	ldi	r25, 0x01	; 1
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    20ca:	8c ec       	ldi	r24, 0xCC	; 204
    20cc:	91 e0       	ldi	r25, 0x01	; 1
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    20d6:	8a ec       	ldi	r24, 0xCA	; 202
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	6f ef       	ldi	r22, 0xFF	; 255
    20dc:	7f e3       	ldi	r23, 0x3F	; 63
    20de:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    20e2:	88 ec       	ldi	r24, 0xC8	; 200
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	70 e0       	ldi	r23, 0x00	; 0
    20ea:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    20ee:	80 ed       	ldi	r24, 0xD0	; 208
    20f0:	91 e0       	ldi	r25, 0x01	; 1
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    20fa:	83 ee       	ldi	r24, 0xE3	; 227
    20fc:	91 e0       	ldi	r25, 0x01	; 1
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2106:	84 ee       	ldi	r24, 0xE4	; 228
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	70 e0       	ldi	r23, 0x00	; 0
    210e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
}	
    2112:	08 95       	ret

00002114 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    2114:	2f 92       	push	r2
    2116:	3f 92       	push	r3
    2118:	4f 92       	push	r4
    211a:	5f 92       	push	r5
    211c:	6f 92       	push	r6
    211e:	7f 92       	push	r7
    2120:	8f 92       	push	r8
    2122:	9f 92       	push	r9
    2124:	af 92       	push	r10
    2126:	bf 92       	push	r11
    2128:	cf 92       	push	r12
    212a:	df 92       	push	r13
    212c:	ef 92       	push	r14
    212e:	ff 92       	push	r15
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	2c 97       	sbiw	r28, 0x0c	; 12
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	08 2f       	mov	r16, r24
    214a:	78 87       	std	Y+8, r23	; 0x08
    214c:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    214e:	80 91 7b 03 	lds	r24, 0x037B
    2152:	83 60       	ori	r24, 0x03	; 3
    2154:	80 93 7b 03 	sts	0x037B, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    2158:	0e 94 0b 10 	call	0x2016	; 0x2016 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    215c:	10 92 7a 03 	sts	0x037A, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    2160:	0f 30       	cpi	r16, 0x0F	; 15
    2162:	e1 f4       	brne	.+56     	; 0x219c <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2164:	0f 2e       	mov	r0, r31
    2166:	f6 ee       	ldi	r31, 0xE6	; 230
    2168:	4f 2e       	mov	r4, r31
    216a:	f1 e0       	ldi	r31, 0x01	; 1
    216c:	5f 2e       	mov	r5, r31
    216e:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    2170:	0f 2e       	mov	r0, r31
    2172:	fe ed       	ldi	r31, 0xDE	; 222
    2174:	2f 2e       	mov	r2, r31
    2176:	f1 e0       	ldi	r31, 0x01	; 1
    2178:	3f 2e       	mov	r3, r31
    217a:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    217c:	23 ee       	ldi	r18, 0xE3	; 227
    217e:	31 e0       	ldi	r19, 0x01	; 1
    2180:	3a 83       	std	Y+2, r19	; 0x02
    2182:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2184:	0f 2e       	mov	r0, r31
    2186:	fc ed       	ldi	r31, 0xDC	; 220
    2188:	8f 2e       	mov	r8, r31
    218a:	f1 e0       	ldi	r31, 0x01	; 1
    218c:	9f 2e       	mov	r9, r31
    218e:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    2190:	82 e7       	ldi	r24, 0x72	; 114
    2192:	96 e0       	ldi	r25, 0x06	; 6
    2194:	9a 87       	std	Y+10, r25	; 0x0a
    2196:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	1b c0       	rjmp	.+54     	; 0x21d2 <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    219c:	0f 2e       	mov	r0, r31
    219e:	f5 ee       	ldi	r31, 0xE5	; 229
    21a0:	4f 2e       	mov	r4, r31
    21a2:	f1 e0       	ldi	r31, 0x01	; 1
    21a4:	5f 2e       	mov	r5, r31
    21a6:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    21a8:	0f 2e       	mov	r0, r31
    21aa:	f7 ed       	ldi	r31, 0xD7	; 215
    21ac:	2f 2e       	mov	r2, r31
    21ae:	f1 e0       	ldi	r31, 0x01	; 1
    21b0:	3f 2e       	mov	r3, r31
    21b2:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    21b4:	e4 ee       	ldi	r30, 0xE4	; 228
    21b6:	f1 e0       	ldi	r31, 0x01	; 1
    21b8:	fa 83       	std	Y+2, r31	; 0x02
    21ba:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    21bc:	0f 2e       	mov	r0, r31
    21be:	fd ed       	ldi	r31, 0xDD	; 221
    21c0:	8f 2e       	mov	r8, r31
    21c2:	f1 e0       	ldi	r31, 0x01	; 1
    21c4:	9f 2e       	mov	r9, r31
    21c6:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    21c8:	20 e7       	ldi	r18, 0x70	; 112
    21ca:	36 e0       	ldi	r19, 0x06	; 6
    21cc:	3a 87       	std	Y+10, r19	; 0x0a
    21ce:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    21d0:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    21d2:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    21d4:	ed ed       	ldi	r30, 0xDD	; 221
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	80 64       	ori	r24, 0x40	; 64
    21dc:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    21de:	80 81       	ld	r24, Z
    21e0:	8f 7b       	andi	r24, 0xBF	; 191
    21e2:	80 83       	st	Z, r24
	DATA_BUS = 0;
    21e4:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    21e6:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    21e8:	84 b5       	in	r24, 0x24	; 36
    21ea:	8f 60       	ori	r24, 0x0F	; 15
    21ec:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    21f2:	ee e6       	ldi	r30, 0x6E	; 110
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	90 81       	ld	r25, Z
    21f8:	92 60       	ori	r25, 0x02	; 2
    21fa:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    21fc:	80 93 7c 03 	sts	0x037C, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    2200:	8d e0       	ldi	r24, 0x0D	; 13
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    2208:	80 2f       	mov	r24, r16
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	8c 01       	movw	r16, r24
    220e:	0f 5f       	subi	r16, 0xFF	; 255
    2210:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    2212:	0f 2e       	mov	r0, r31
    2214:	f8 ed       	ldi	r31, 0xD8	; 216
    2216:	ef 2e       	mov	r14, r31
    2218:	f1 e0       	ldi	r31, 0x01	; 1
    221a:	ff 2e       	mov	r15, r31
    221c:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    221e:	0f 2e       	mov	r0, r31
    2220:	f4 ed       	ldi	r31, 0xD4	; 212
    2222:	cf 2e       	mov	r12, r31
    2224:	f1 e0       	ldi	r31, 0x01	; 1
    2226:	df 2e       	mov	r13, r31
    2228:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    222a:	0f 2e       	mov	r0, r31
    222c:	fa ec       	ldi	r31, 0xCA	; 202
    222e:	af 2e       	mov	r10, r31
    2230:	f1 e0       	ldi	r31, 0x01	; 1
    2232:	bf 2e       	mov	r11, r31
    2234:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    2236:	0f 2e       	mov	r0, r31
    2238:	fb ec       	ldi	r31, 0xCB	; 203
    223a:	6f 2e       	mov	r6, r31
    223c:	f1 e0       	ldi	r31, 0x01	; 1
    223e:	7f 2e       	mov	r7, r31
    2240:	f0 2d       	mov	r31, r0
    2242:	e0 e0       	ldi	r30, 0x00	; 0
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	fc 87       	std	Y+12, r31	; 0x0c
    2248:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    224a:	21 e0       	ldi	r18, 0x01	; 1
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	0b 80       	ldd	r0, Y+3	; 0x03
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <set_vco_init_cv+0x142>
    2252:	22 0f       	add	r18, r18
    2254:	33 1f       	adc	r19, r19
    2256:	0a 94       	dec	r0
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <set_vco_init_cv+0x13e>
    225a:	3e 83       	std	Y+6, r19	; 0x06
    225c:	2d 83       	std	Y+5, r18	; 0x05
    225e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2260:	9c 85       	ldd	r25, Y+12	; 0x0c
    2262:	82 2b       	or	r24, r18
    2264:	93 2b       	or	r25, r19
    2266:	9c 87       	std	Y+12, r25	; 0x0c
    2268:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    226a:	c4 01       	movw	r24, r8
    226c:	6b 85       	ldd	r22, Y+11	; 0x0b
    226e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2270:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
		
		
		count_finished = FALSE;
    2274:	10 92 7a 03 	sts	0x037A, r1
		period_counter = 0;
    2278:	10 92 7d 03 	sts	0x037D, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    227c:	8f e0       	ldi	r24, 0x0F	; 15
    227e:	e8 e1       	ldi	r30, 0x18	; 24
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	a8 95       	wdr
    2288:	e0 93 60 00 	sts	0x0060, r30
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    2292:	80 91 7a 03 	lds	r24, 0x037A
    2296:	88 23       	and	r24, r24
    2298:	89 f5       	brne	.+98     	; 0x22fc <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    229a:	c8 01       	movw	r24, r16
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    22a2:	c4 01       	movw	r24, r8
    22a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a8:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    22ac:	c1 01       	movw	r24, r2
    22ae:	6f ef       	ldi	r22, 0xFF	; 255
    22b0:	7f e3       	ldi	r23, 0x3F	; 63
    22b2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    22b6:	c7 01       	movw	r24, r14
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	70 e0       	ldi	r23, 0x00	; 0
    22bc:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    22c0:	c6 01       	movw	r24, r12
    22c2:	6f ef       	ldi	r22, 0xFF	; 255
    22c4:	7f e3       	ldi	r23, 0x3F	; 63
    22c6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    22ca:	c5 01       	movw	r24, r10
    22cc:	6f ef       	ldi	r22, 0xFF	; 255
    22ce:	7f e3       	ldi	r23, 0x3F	; 63
    22d0:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    22d4:	c3 01       	movw	r24, r6
    22d6:	6f ef       	ldi	r22, 0xFF	; 255
    22d8:	7f e3       	ldi	r23, 0x3F	; 63
    22da:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	6f ef       	ldi	r22, 0xFF	; 255
    22e4:	7f e3       	ldi	r23, 0x3F	; 63
    22e6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    22ea:	c2 01       	movw	r24, r4
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    22f4:	80 91 7a 03 	lds	r24, 0x037A
    22f8:	88 23       	and	r24, r24
    22fa:	79 f2       	breq	.-98     	; 0x229a <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    22fc:	88 e1       	ldi	r24, 0x18	; 24
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	80 93 60 00 	sts	0x0060, r24
    2306:	10 92 60 00 	sts	0x0060, r1
    230a:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    230c:	80 91 78 03 	lds	r24, 0x0378
    2310:	90 91 79 03 	lds	r25, 0x0379
    2314:	ef 81       	ldd	r30, Y+7	; 0x07
    2316:	f8 85       	ldd	r31, Y+8	; 0x08
    2318:	e8 17       	cp	r30, r24
    231a:	f9 07       	cpc	r31, r25
    231c:	20 f0       	brcs	.+8      	; 0x2326 <set_vco_init_cv+0x212>
    231e:	80 91 af 02 	lds	r24, 0x02AF
    2322:	88 23       	and	r24, r24
    2324:	51 f4       	brne	.+20     	; 0x233a <set_vco_init_cv+0x226>
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	80 95       	com	r24
    232c:	90 95       	com	r25
    232e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2330:	3c 85       	ldd	r19, Y+12	; 0x0c
    2332:	28 23       	and	r18, r24
    2334:	39 23       	and	r19, r25
    2336:	3c 87       	std	Y+12, r19	; 0x0c
    2338:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
    234a:	ef ef       	ldi	r30, 0xFF	; 255
    234c:	8f 3f       	cpi	r24, 0xFF	; 255
    234e:	9e 07       	cpc	r25, r30
    2350:	09 f0       	breq	.+2      	; 0x2354 <set_vco_init_cv+0x240>
    2352:	7b cf       	rjmp	.-266    	; 0x224a <set_vco_init_cv+0x136>
    2354:	2b 85       	ldd	r18, Y+11	; 0x0b
    2356:	3c 85       	ldd	r19, Y+12	; 0x0c
    2358:	3e 83       	std	Y+6, r19	; 0x06
    235a:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    235c:	88 ec       	ldi	r24, 0xC8	; 200
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    2368:	89 ec       	ldi	r24, 0xC9	; 201
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	60 e0       	ldi	r22, 0x00	; 0
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    2374:	84 ed       	ldi	r24, 0xD4	; 212
    2376:	91 e0       	ldi	r25, 0x01	; 1
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    2380:	88 ed       	ldi	r24, 0xD8	; 216
    2382:	91 e0       	ldi	r25, 0x01	; 1
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	70 e0       	ldi	r23, 0x00	; 0
    2388:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    238c:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    238e:	ee e6       	ldi	r30, 0x6E	; 110
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	8d 7f       	andi	r24, 0xFD	; 253
    2396:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2398:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    239a:	89 85       	ldd	r24, Y+9	; 0x09
    239c:	9a 85       	ldd	r25, Y+10	; 0x0a
    239e:	6d 81       	ldd	r22, Y+5	; 0x05
    23a0:	7e 81       	ldd	r23, Y+6	; 0x06
    23a2:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	2c 96       	adiw	r28, 0x0c	; 12
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	1f 91       	pop	r17
    23bc:	0f 91       	pop	r16
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	cf 90       	pop	r12
    23c6:	bf 90       	pop	r11
    23c8:	af 90       	pop	r10
    23ca:	9f 90       	pop	r9
    23cc:	8f 90       	pop	r8
    23ce:	7f 90       	pop	r7
    23d0:	6f 90       	pop	r6
    23d2:	5f 90       	pop	r5
    23d4:	4f 90       	pop	r4
    23d6:	3f 90       	pop	r3
    23d8:	2f 90       	pop	r2
    23da:	08 95       	ret

000023dc <tune_8ths>:



void tune_8ths(uint8_t vco) {
    23dc:	2f 92       	push	r2
    23de:	3f 92       	push	r3
    23e0:	4f 92       	push	r4
    23e2:	5f 92       	push	r5
    23e4:	6f 92       	push	r6
    23e6:	7f 92       	push	r7
    23e8:	8f 92       	push	r8
    23ea:	9f 92       	push	r9
    23ec:	af 92       	push	r10
    23ee:	bf 92       	push	r11
    23f0:	cf 92       	push	r12
    23f2:	df 92       	push	r13
    23f4:	ef 92       	push	r14
    23f6:	ff 92       	push	r15
    23f8:	0f 93       	push	r16
    23fa:	1f 93       	push	r17
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	c0 54       	subi	r28, 0x40	; 64
    2406:	d0 40       	sbci	r29, 0x00	; 0
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    2414:	de 01       	movw	r26, r28
    2416:	11 96       	adiw	r26, 0x01	; 1
    2418:	e0 e3       	ldi	r30, 0x30	; 48
    241a:	f2 e0       	ldi	r31, 0x02	; 2
    241c:	80 e3       	ldi	r24, 0x30	; 48
    241e:	01 90       	ld	r0, Z+
    2420:	0d 92       	st	X+, r0
    2422:	81 50       	subi	r24, 0x01	; 1
    2424:	e1 f7       	brne	.-8      	; 0x241e <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    2426:	0e 94 0b 10 	call	0x2016	; 0x2016 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    242a:	0f 30       	cpi	r16, 0x0F	; 15
    242c:	11 f5       	brne	.+68     	; 0x2472 <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    242e:	40 90 75 03 	lds	r4, 0x0375
    2432:	50 90 76 03 	lds	r5, 0x0376
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2436:	0f 2e       	mov	r0, r31
    2438:	f6 ee       	ldi	r31, 0xE6	; 230
    243a:	8f 2e       	mov	r8, r31
    243c:	f1 e0       	ldi	r31, 0x01	; 1
    243e:	9f 2e       	mov	r9, r31
    2440:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    2442:	0f 2e       	mov	r0, r31
    2444:	fe ed       	ldi	r31, 0xDE	; 222
    2446:	2f 2e       	mov	r2, r31
    2448:	f1 e0       	ldi	r31, 0x01	; 1
    244a:	3f 2e       	mov	r3, r31
    244c:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    244e:	23 ee       	ldi	r18, 0xE3	; 227
    2450:	31 e0       	ldi	r19, 0x01	; 1
    2452:	3a ab       	sts	0x5a, r19
    2454:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2456:	0f 2e       	mov	r0, r31
    2458:	fc ed       	ldi	r31, 0xDC	; 220
    245a:	6f 2e       	mov	r6, r31
    245c:	f1 e0       	ldi	r31, 0x01	; 1
    245e:	7f 2e       	mov	r7, r31
    2460:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    2462:	01 e5       	ldi	r16, 0x51	; 81
    2464:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2466:	cc 24       	eor	r12, r12
    2468:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    246a:	ee 24       	eor	r14, r14
    246c:	68 94       	set
    246e:	e1 f8       	bld	r14, 1
    2470:	22 c0       	rjmp	.+68     	; 0x24b6 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    2472:	40 90 73 03 	lds	r4, 0x0373
    2476:	50 90 74 03 	lds	r5, 0x0374
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    247a:	0f 2e       	mov	r0, r31
    247c:	f5 ee       	ldi	r31, 0xE5	; 229
    247e:	8f 2e       	mov	r8, r31
    2480:	f1 e0       	ldi	r31, 0x01	; 1
    2482:	9f 2e       	mov	r9, r31
    2484:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2486:	0f 2e       	mov	r0, r31
    2488:	f7 ed       	ldi	r31, 0xD7	; 215
    248a:	2f 2e       	mov	r2, r31
    248c:	f1 e0       	ldi	r31, 0x01	; 1
    248e:	3f 2e       	mov	r3, r31
    2490:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    2492:	44 ee       	ldi	r20, 0xE4	; 228
    2494:	51 e0       	ldi	r21, 0x01	; 1
    2496:	5a ab       	sts	0x5a, r21
    2498:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    249a:	0f 2e       	mov	r0, r31
    249c:	fd ed       	ldi	r31, 0xDD	; 221
    249e:	6f 2e       	mov	r6, r31
    24a0:	f1 e0       	ldi	r31, 0x01	; 1
    24a2:	7f 2e       	mov	r7, r31
    24a4:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    24a6:	0f e2       	ldi	r16, 0x2F	; 47
    24a8:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    24aa:	cc 24       	eor	r12, r12
    24ac:	68 94       	set
    24ae:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    24b0:	ee 24       	eor	r14, r14
    24b2:	68 94       	set
    24b4:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    24b6:	c3 01       	movw	r24, r6
    24b8:	b2 01       	movw	r22, r4
    24ba:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    24be:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    24c0:	ed ed       	ldi	r30, 0xDD	; 221
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	80 64       	ori	r24, 0x40	; 64
    24c8:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    24ca:	80 81       	ld	r24, Z
    24cc:	8f 7b       	andi	r24, 0xBF	; 191
    24ce:	80 83       	st	Z, r24
		DATA_BUS = 0;
    24d0:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    24d2:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	80 93 7c 03 	sts	0x037C, r24
		
		compare_match_counter = 0;	
    24da:	10 92 77 03 	sts	0x0377, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    24de:	8c 2d       	mov	r24, r12
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	24 e6       	ldi	r18, 0x64	; 100
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	82 9f       	mul	r24, r18
    24e8:	d0 01       	movw	r26, r0
    24ea:	83 9f       	mul	r24, r19
    24ec:	b0 0d       	add	r27, r0
    24ee:	92 9f       	mul	r25, r18
    24f0:	b0 0d       	add	r27, r0
    24f2:	11 24       	eor	r1, r1
    24f4:	bc ab       	sts	0x5c, r27
    24f6:	ab ab       	sts	0x5b, r26
    24f8:	fe 01       	movw	r30, r28
    24fa:	31 96       	adiw	r30, 0x01	; 1
    24fc:	fc af       	sts	0x7c, r31
    24fe:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    2500:	98 01       	movw	r18, r16
    2502:	2e 5f       	subi	r18, 0xFE	; 254
    2504:	3f 4f       	sbci	r19, 0xFF	; 255
    2506:	21 96       	adiw	r28, 0x01	; 1
    2508:	3f af       	sts	0x7f, r19
    250a:	2e af       	sts	0x7e, r18
    250c:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    250e:	1e ae       	sts	0xbe, r17
    2510:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2512:	0f 2e       	mov	r0, r31
    2514:	f8 ed       	ldi	r31, 0xD8	; 216
    2516:	ef 2e       	mov	r14, r31
    2518:	f1 e0       	ldi	r31, 0x01	; 1
    251a:	ff 2e       	mov	r15, r31
    251c:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    251e:	0f 2e       	mov	r0, r31
    2520:	f4 ed       	ldi	r31, 0xD4	; 212
    2522:	cf 2e       	mov	r12, r31
    2524:	f1 e0       	ldi	r31, 0x01	; 1
    2526:	df 2e       	mov	r13, r31
    2528:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    252a:	0f 2e       	mov	r0, r31
    252c:	fa ec       	ldi	r31, 0xCA	; 202
    252e:	af 2e       	mov	r10, r31
    2530:	f1 e0       	ldi	r31, 0x01	; 1
    2532:	bf 2e       	mov	r11, r31
    2534:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    2536:	eb ad       	sts	0x6b, r30
    2538:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    253a:	80 81       	ld	r24, Z
    253c:	80 93 7c 03 	sts	0x037C, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2540:	84 b5       	in	r24, 0x24	; 36
    2542:	8f 60       	ori	r24, 0x0F	; 15
    2544:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    254a:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    254c:	4d ad       	sts	0x6d, r20
    254e:	5e ad       	sts	0x6e, r21
    2550:	43 30       	cpi	r20, 0x03	; 3
    2552:	51 05       	cpc	r21, r1
    2554:	24 f4       	brge	.+8      	; 0x255e <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2556:	83 e0       	ldi	r24, 0x03	; 3
    2558:	80 93 7b 03 	sts	0x037B, r24
    255c:	03 c0       	rjmp	.+6      	; 0x2564 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    255e:	82 e0       	ldi	r24, 0x02	; 2
    2560:	80 93 7b 03 	sts	0x037B, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    2564:	81 81       	ldd	r24, Z+1	; 0x01
    2566:	92 81       	ldd	r25, Z+2	; 0x02
    2568:	9a af       	sts	0x7a, r25
    256a:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    256c:	ad e0       	ldi	r26, 0x0D	; 13
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	be ab       	sts	0x5e, r27
    2572:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    2574:	00 e0       	ldi	r16, 0x00	; 0
    2576:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2578:	e1 e0       	ldi	r30, 0x01	; 1
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	0d a8       	sts	0x8d, r16
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <tune_8ths+0x1a8>
    2580:	ee 0f       	add	r30, r30
    2582:	ff 1f       	adc	r31, r31
    2584:	0a 94       	dec	r0
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <tune_8ths+0x1a4>
    2588:	f8 af       	sts	0x78, r31
    258a:	ef ab       	sts	0x5f, r30
    258c:	0e 2b       	or	r16, r30
    258e:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    2590:	ae e6       	ldi	r26, 0x6E	; 110
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	8c 91       	ld	r24, X
    2596:	8d 7f       	andi	r24, 0xFD	; 253
    2598:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    259a:	c4 01       	movw	r24, r8
    259c:	b8 01       	movw	r22, r16
    259e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25a2:	e3 ef       	ldi	r30, 0xF3	; 243
    25a4:	f1 e0       	ldi	r31, 0x01	; 1
    25a6:	31 97       	sbiw	r30, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <tune_8ths+0x1ca>
    25aa:	00 c0       	rjmp	.+0      	; 0x25ac <tune_8ths+0x1d0>
    25ac:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    25ae:	ae e6       	ldi	r26, 0x6E	; 110
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	8c 91       	ld	r24, X
    25b4:	82 60       	ori	r24, 0x02	; 2
    25b6:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    25b8:	10 92 7a 03 	sts	0x037A, r1
				period_counter = 0;
    25bc:	10 92 7d 03 	sts	0x037D, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    25c0:	e8 e1       	ldi	r30, 0x18	; 24
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	2f e0       	ldi	r18, 0x0F	; 15
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	a8 95       	wdr
    25cc:	e0 93 60 00 	sts	0x0060, r30
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    25d6:	80 91 7a 03 	lds	r24, 0x037A
    25da:	88 23       	and	r24, r24
    25dc:	81 f5       	brne	.+96     	; 0x263e <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    25de:	80 91 7c 03 	lds	r24, 0x037C
    25e2:	4b a9       	sts	0x4b, r20
    25e4:	5c a9       	sts	0x4c, r21
    25e6:	48 0f       	add	r20, r24
    25e8:	51 1d       	adc	r21, r1
    25ea:	ca 01       	movw	r24, r20
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	0e 94 dd 02 	call	0x5ba	; 0x5ba <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    25f2:	c3 01       	movw	r24, r6
    25f4:	b2 01       	movw	r22, r4
    25f6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    25fa:	c4 01       	movw	r24, r8
    25fc:	b8 01       	movw	r22, r16
    25fe:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2602:	c7 01       	movw	r24, r14
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    260c:	c6 01       	movw	r24, r12
    260e:	6f ef       	ldi	r22, 0xFF	; 255
    2610:	7f e3       	ldi	r23, 0x3F	; 63
    2612:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2616:	c5 01       	movw	r24, r10
    2618:	6f ef       	ldi	r22, 0xFF	; 255
    261a:	7f e3       	ldi	r23, 0x3F	; 63
    261c:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    2620:	c1 01       	movw	r24, r2
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	70 e2       	ldi	r23, 0x20	; 32
    2626:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    262a:	89 a9       	sts	0x49, r24
    262c:	9a a9       	sts	0x4a, r25
    262e:	6f ef       	ldi	r22, 0xFF	; 255
    2630:	7f e3       	ldi	r23, 0x3F	; 63
    2632:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2636:	80 91 7a 03 	lds	r24, 0x037A
    263a:	88 23       	and	r24, r24
    263c:	81 f2       	breq	.-96     	; 0x25de <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    263e:	58 e1       	ldi	r21, 0x18	; 24
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	50 93 60 00 	sts	0x0060, r21
    2648:	10 92 60 00 	sts	0x0060, r1
    264c:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    264e:	80 91 78 03 	lds	r24, 0x0378
    2652:	90 91 79 03 	lds	r25, 0x0379
    2656:	a9 ad       	sts	0x69, r26
    2658:	ba ad       	sts	0x6a, r27
    265a:	a8 17       	cp	r26, r24
    265c:	b9 07       	cpc	r27, r25
    265e:	50 f0       	brcs	.+20     	; 0x2674 <tune_8ths+0x298>
    2660:	80 91 af 02 	lds	r24, 0x02AF
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	31 f4       	brne	.+12     	; 0x2674 <tune_8ths+0x298>
    2668:	8f a9       	sts	0x4f, r24
    266a:	98 ad       	sts	0x68, r25
    266c:	80 95       	com	r24
    266e:	90 95       	com	r25
    2670:	08 23       	and	r16, r24
    2672:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2674:	80 91 78 03 	lds	r24, 0x0378
    2678:	90 91 79 03 	lds	r25, 0x0379
    267c:	e9 ad       	sts	0x69, r30
    267e:	fa ad       	sts	0x6a, r31
    2680:	8e 17       	cp	r24, r30
    2682:	9f 07       	cpc	r25, r31
    2684:	21 f4       	brne	.+8      	; 0x268e <tune_8ths+0x2b2>
    2686:	80 91 af 02 	lds	r24, 0x02AF
    268a:	81 30       	cpi	r24, 0x01	; 1
    268c:	71 f0       	breq	.+28     	; 0x26aa <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    268e:	f1 e0       	ldi	r31, 0x01	; 1
    2690:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2694:	2d a9       	sts	0x4d, r18
    2696:	3e a9       	sts	0x4e, r19
    2698:	21 50       	subi	r18, 0x01	; 1
    269a:	30 40       	sbci	r19, 0x00	; 0
    269c:	3e ab       	sts	0x5e, r19
    269e:	2d ab       	sts	0x5d, r18
    26a0:	4f ef       	ldi	r20, 0xFF	; 255
    26a2:	2f 3f       	cpi	r18, 0xFF	; 255
    26a4:	34 07       	cpc	r19, r20
    26a6:	09 f0       	breq	.+2      	; 0x26aa <tune_8ths+0x2ce>
    26a8:	67 cf       	rjmp	.-306    	; 0x2578 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    26aa:	21 96       	adiw	r28, 0x01	; 1
    26ac:	ae ad       	sts	0x6e, r26
    26ae:	bf ad       	sts	0x6f, r27
    26b0:	21 97       	sbiw	r28, 0x01	; 1
    26b2:	0d 93       	st	X+, r16
    26b4:	1d 93       	st	X+, r17
    26b6:	21 96       	adiw	r28, 0x01	; 1
    26b8:	bf af       	sts	0x7f, r27
    26ba:	ae af       	sts	0x7e, r26
    26bc:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    26be:	ee e6       	ldi	r30, 0x6E	; 110
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	8d 7f       	andi	r24, 0xFD	; 253
    26c6:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    26c8:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    26ca:	2d ad       	sts	0x6d, r18
    26cc:	3e ad       	sts	0x6e, r19
    26ce:	2f 5f       	subi	r18, 0xFF	; 255
    26d0:	3f 4f       	sbci	r19, 0xFF	; 255
    26d2:	3e af       	sts	0x7e, r19
    26d4:	2d af       	sts	0x7d, r18
    26d6:	4b ad       	sts	0x6b, r20
    26d8:	5c ad       	sts	0x6c, r21
    26da:	4d 5f       	subi	r20, 0xFD	; 253
    26dc:	5f 4f       	sbci	r21, 0xFF	; 255
    26de:	5c af       	sts	0x7c, r21
    26e0:	4b af       	sts	0x7b, r20
    26e2:	20 31       	cpi	r18, 0x10	; 16
    26e4:	31 05       	cpc	r19, r1
    26e6:	09 f0       	breq	.+2      	; 0x26ea <tune_8ths+0x30e>
    26e8:	26 cf       	rjmp	.-436    	; 0x2536 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    26ea:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    26ec:	c0 5c       	subi	r28, 0xC0	; 192
    26ee:	df 4f       	sbci	r29, 0xFF	; 255
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	cf 90       	pop	r12
    270a:	bf 90       	pop	r11
    270c:	af 90       	pop	r10
    270e:	9f 90       	pop	r9
    2710:	8f 90       	pop	r8
    2712:	7f 90       	pop	r7
    2714:	6f 90       	pop	r6
    2716:	5f 90       	pop	r5
    2718:	4f 90       	pop	r4
    271a:	3f 90       	pop	r3
    271c:	2f 90       	pop	r2
    271e:	08 95       	ret

00002720 <tune_filter>:
	
void tune_filter(void) {
    2720:	2f 92       	push	r2
    2722:	3f 92       	push	r3
    2724:	4f 92       	push	r4
    2726:	5f 92       	push	r5
    2728:	6f 92       	push	r6
    272a:	7f 92       	push	r7
    272c:	8f 92       	push	r8
    272e:	9f 92       	push	r9
    2730:	af 92       	push	r10
    2732:	bf 92       	push	r11
    2734:	cf 92       	push	r12
    2736:	df 92       	push	r13
    2738:	ef 92       	push	r14
    273a:	ff 92       	push	r15
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	e9 97       	sbiw	r28, 0x39	; 57
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    2754:	de 01       	movw	r26, r28
    2756:	11 96       	adiw	r26, 0x01	; 1
    2758:	e0 e6       	ldi	r30, 0x60	; 96
    275a:	f2 e0       	ldi	r31, 0x02	; 2
    275c:	8d e2       	ldi	r24, 0x2D	; 45
    275e:	01 90       	ld	r0, Z+
    2760:	0d 92       	st	X+, r0
    2762:	81 50       	subi	r24, 0x01	; 1
    2764:	e1 f7       	brne	.-8      	; 0x275e <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2766:	88 ed       	ldi	r24, 0xD8	; 216
    2768:	91 e0       	ldi	r25, 0x01	; 1
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2772:	81 ee       	ldi	r24, 0xE1	; 225
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	70 e0       	ldi	r23, 0x00	; 0
    277a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    277e:	82 ee       	ldi	r24, 0xE2	; 226
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    278a:	83 eb       	ldi	r24, 0xB3	; 179
    278c:	92 e0       	ldi	r25, 0x02	; 2
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2796:	8a ed       	ldi	r24, 0xDA	; 218
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    27a2:	8f ed       	ldi	r24, 0xDF	; 223
    27a4:	91 e0       	ldi	r25, 0x01	; 1
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	70 e0       	ldi	r23, 0x00	; 0
    27aa:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    27ae:	80 ee       	ldi	r24, 0xE0	; 224
    27b0:	91 e0       	ldi	r25, 0x01	; 1
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    27ba:	81 ed       	ldi	r24, 0xD1	; 209
    27bc:	91 e0       	ldi	r25, 0x01	; 1
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	70 e0       	ldi	r23, 0x00	; 0
    27c2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    27c6:	86 ed       	ldi	r24, 0xD6	; 214
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    27d2:	82 ed       	ldi	r24, 0xD2	; 210
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	60 e0       	ldi	r22, 0x00	; 0
    27d8:	70 e0       	ldi	r23, 0x00	; 0
    27da:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    27de:	83 ed       	ldi	r24, 0xD3	; 211
    27e0:	91 e0       	ldi	r25, 0x01	; 1
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    27ea:	84 ed       	ldi	r24, 0xD4	; 212
    27ec:	91 e0       	ldi	r25, 0x01	; 1
    27ee:	6f ef       	ldi	r22, 0xFF	; 255
    27f0:	7f e3       	ldi	r23, 0x3F	; 63
    27f2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    27f6:	85 ed       	ldi	r24, 0xD5	; 213
    27f8:	91 e0       	ldi	r25, 0x01	; 1
    27fa:	6f ef       	ldi	r22, 0xFF	; 255
    27fc:	7f e3       	ldi	r23, 0x3F	; 63
    27fe:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    2802:	89 ed       	ldi	r24, 0xD9	; 217
    2804:	91 e0       	ldi	r25, 0x01	; 1
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    280e:	8e ec       	ldi	r24, 0xCE	; 206
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    281a:	8c ec       	ldi	r24, 0xCC	; 204
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2826:	8a ec       	ldi	r24, 0xCA	; 202
    2828:	91 e0       	ldi	r25, 0x01	; 1
    282a:	6f ef       	ldi	r22, 0xFF	; 255
    282c:	7f e3       	ldi	r23, 0x3F	; 63
    282e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    2832:	88 ec       	ldi	r24, 0xC8	; 200
    2834:	91 e0       	ldi	r25, 0x01	; 1
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	70 e0       	ldi	r23, 0x00	; 0
    283a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    283e:	80 ed       	ldi	r24, 0xD0	; 208
    2840:	91 e0       	ldi	r25, 0x01	; 1
    2842:	60 e0       	ldi	r22, 0x00	; 0
    2844:	70 e0       	ldi	r23, 0x00	; 0
    2846:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    284a:	83 ee       	ldi	r24, 0xE3	; 227
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	70 e0       	ldi	r23, 0x00	; 0
    2852:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2856:	84 ee       	ldi	r24, 0xE4	; 228
    2858:	91 e0       	ldi	r25, 0x01	; 1
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    2862:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2864:	ed ed       	ldi	r30, 0xDD	; 221
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	80 64       	ori	r24, 0x40	; 64
    286c:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    286e:	80 81       	ld	r24, Z
    2870:	8f 7b       	andi	r24, 0xBF	; 191
    2872:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	80 93 7c 03 	sts	0x037C, r24
	PORTF |= (1<<GATE); //turn gate on
    287a:	89 9a       	sbi	0x11, 1	; 17
    287c:	9e 01       	movw	r18, r28
    287e:	2f 5f       	subi	r18, 0xFF	; 255
    2880:	3f 4f       	sbci	r19, 0xFF	; 255
    2882:	3d ab       	sts	0x5d, r19
    2884:	2c ab       	sts	0x5c, r18
    2886:	81 e1       	ldi	r24, 0x11	; 17
    2888:	93 e0       	ldi	r25, 0x03	; 3
    288a:	99 af       	sts	0x79, r25
    288c:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    288e:	1f aa       	sts	0x9f, r17
    2890:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    2892:	0f 2e       	mov	r0, r31
    2894:	f4 ed       	ldi	r31, 0xD4	; 212
    2896:	af 2e       	mov	r10, r31
    2898:	f1 e0       	ldi	r31, 0x01	; 1
    289a:	bf 2e       	mov	r11, r31
    289c:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    289e:	0f 2e       	mov	r0, r31
    28a0:	f8 ed       	ldi	r31, 0xD8	; 216
    28a2:	6f 2e       	mov	r6, r31
    28a4:	f1 e0       	ldi	r31, 0x01	; 1
    28a6:	7f 2e       	mov	r7, r31
    28a8:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    28aa:	0f 2e       	mov	r0, r31
    28ac:	f5 ed       	ldi	r31, 0xD5	; 213
    28ae:	4f 2e       	mov	r4, r31
    28b0:	f1 e0       	ldi	r31, 0x01	; 1
    28b2:	5f 2e       	mov	r5, r31
    28b4:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    28b6:	0f 2e       	mov	r0, r31
    28b8:	fa ec       	ldi	r31, 0xCA	; 202
    28ba:	2f 2e       	mov	r2, r31
    28bc:	f1 e0       	ldi	r31, 0x01	; 1
    28be:	3f 2e       	mov	r3, r31
    28c0:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    28c2:	ac a9       	sts	0x4c, r26
    28c4:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    28c6:	8c 91       	ld	r24, X
    28c8:	80 93 7c 03 	sts	0x037C, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    28cc:	84 b5       	in	r24, 0x24	; 36
    28ce:	8f 60       	ori	r24, 0x0F	; 15
    28d0:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    28d6:	ee e6       	ldi	r30, 0x6E	; 110
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	82 60       	ori	r24, 0x02	; 2
    28de:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    28e0:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    28e2:	ee a9       	sts	0x4e, r30
    28e4:	ff a9       	sts	0x4f, r31
    28e6:	e2 30       	cpi	r30, 0x02	; 2
    28e8:	f1 05       	cpc	r31, r1
    28ea:	24 f4       	brge	.+8      	; 0x28f4 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	80 93 7b 03 	sts	0x037B, r24
    28f2:	03 c0       	rjmp	.+6      	; 0x28fa <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	80 93 7b 03 	sts	0x037B, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    28fa:	11 96       	adiw	r26, 0x01	; 1
    28fc:	2d 91       	ld	r18, X+
    28fe:	3c 91       	ld	r19, X
    2900:	12 97       	sbiw	r26, 0x02	; 2
    2902:	3b ab       	sts	0x5b, r19
    2904:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2906:	8d e0       	ldi	r24, 0x0D	; 13
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	9f a7       	lds	r25, 0x7f
    290c:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    290e:	ee 24       	eor	r14, r14
    2910:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2912:	0f 2e       	mov	r0, r31
    2914:	f1 ed       	ldi	r31, 0xD1	; 209
    2916:	cf 2e       	mov	r12, r31
    2918:	f1 e0       	ldi	r31, 0x01	; 1
    291a:	df 2e       	mov	r13, r31
    291c:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    291e:	0f 2e       	mov	r0, r31
    2920:	f6 ed       	ldi	r31, 0xD6	; 214
    2922:	8f 2e       	mov	r8, r31
    2924:	f1 e0       	ldi	r31, 0x01	; 1
    2926:	9f 2e       	mov	r9, r31
    2928:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	fc 01       	movw	r30, r24
    2930:	0e a4       	lds	r16, 0xae
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <tune_filter+0x218>
    2934:	ee 0f       	add	r30, r30
    2936:	ff 1f       	adc	r31, r31
    2938:	0a 94       	dec	r0
    293a:	e2 f7       	brpl	.-8      	; 0x2934 <tune_filter+0x214>
    293c:	f9 ab       	sts	0x59, r31
    293e:	e8 ab       	sts	0x58, r30
    2940:	ee 2a       	or	r14, r30
    2942:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2944:	c5 01       	movw	r24, r10
    2946:	b7 01       	movw	r22, r14
    2948:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			count_finished = FALSE;
    294c:	10 92 7a 03 	sts	0x037A, r1
			period_counter = 0;
    2950:	10 92 7d 03 	sts	0x037D, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2954:	8f e0       	ldi	r24, 0x0F	; 15
    2956:	28 e1       	ldi	r18, 0x18	; 24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	a8 95       	wdr
    2960:	20 93 60 00 	sts	0x0060, r18
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    296a:	80 91 7a 03 	lds	r24, 0x037A
    296e:	88 23       	and	r24, r24
    2970:	b1 f5       	brne	.+108    	; 0x29de <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    2972:	02 ed       	ldi	r16, 0xD2	; 210
    2974:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2976:	80 91 7c 03 	lds	r24, 0x037C
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	84 5d       	subi	r24, 0xD4	; 212
    297e:	9e 4f       	sbci	r25, 0xFE	; 254
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	0e 94 dd 02 	call	0x5ba	; 0x5ba <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2986:	c5 01       	movw	r24, r10
    2988:	b7 01       	movw	r22, r14
    298a:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    298e:	c3 01       	movw	r24, r6
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2998:	c2 01       	movw	r24, r4
    299a:	6f ef       	ldi	r22, 0xFF	; 255
    299c:	7f e3       	ldi	r23, 0x3F	; 63
    299e:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    29a2:	c1 01       	movw	r24, r2
    29a4:	6f ef       	ldi	r22, 0xFF	; 255
    29a6:	7f e3       	ldi	r23, 0x3F	; 63
    29a8:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    29ac:	8e ec       	ldi	r24, 0xCE	; 206
    29ae:	91 e0       	ldi	r25, 0x01	; 1
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	70 e0       	ldi	r23, 0x00	; 0
    29b4:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    29b8:	c6 01       	movw	r24, r12
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    29c2:	c4 01       	movw	r24, r8
    29c4:	60 e0       	ldi	r22, 0x00	; 0
    29c6:	70 e0       	ldi	r23, 0x00	; 0
    29c8:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    29cc:	c8 01       	movw	r24, r16
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	0e 94 a9 01 	call	0x352	; 0x352 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    29d6:	80 91 7a 03 	lds	r24, 0x037A
    29da:	88 23       	and	r24, r24
    29dc:	61 f2       	breq	.-104    	; 0x2976 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    29de:	88 e1       	ldi	r24, 0x18	; 24
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	80 93 60 00 	sts	0x0060, r24
    29e8:	10 92 60 00 	sts	0x0060, r1
    29ec:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    29ee:	80 91 78 03 	lds	r24, 0x0378
    29f2:	90 91 79 03 	lds	r25, 0x0379
    29f6:	2a a9       	sts	0x4a, r18
    29f8:	3b a9       	sts	0x4b, r19
    29fa:	28 17       	cp	r18, r24
    29fc:	39 07       	cpc	r19, r25
    29fe:	50 f0       	brcs	.+20     	; 0x2a14 <tune_filter+0x2f4>
    2a00:	80 91 af 02 	lds	r24, 0x02AF
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	31 f4       	brne	.+12     	; 0x2a14 <tune_filter+0x2f4>
    2a08:	88 a9       	sts	0x48, r24
    2a0a:	99 a9       	sts	0x49, r25
    2a0c:	80 95       	com	r24
    2a0e:	90 95       	com	r25
    2a10:	e8 22       	and	r14, r24
    2a12:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2a14:	80 91 78 03 	lds	r24, 0x0378
    2a18:	90 91 79 03 	lds	r25, 0x0379
    2a1c:	ea a9       	sts	0x4a, r30
    2a1e:	fb a9       	sts	0x4b, r31
    2a20:	8e 17       	cp	r24, r30
    2a22:	9f 07       	cpc	r25, r31
    2a24:	21 f4       	brne	.+8      	; 0x2a2e <tune_filter+0x30e>
    2a26:	80 91 af 02 	lds	r24, 0x02AF
    2a2a:	81 30       	cpi	r24, 0x01	; 1
    2a2c:	71 f0       	breq	.+28     	; 0x2a4a <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2a34:	2e a5       	lds	r18, 0x6e
    2a36:	3f a5       	lds	r19, 0x6f
    2a38:	21 50       	subi	r18, 0x01	; 1
    2a3a:	30 40       	sbci	r19, 0x00	; 0
    2a3c:	3f a7       	lds	r19, 0x7f
    2a3e:	2e a7       	lds	r18, 0x7e
    2a40:	8f ef       	ldi	r24, 0xFF	; 255
    2a42:	2f 3f       	cpi	r18, 0xFF	; 255
    2a44:	38 07       	cpc	r19, r24
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <tune_filter+0x32a>
    2a48:	70 cf       	rjmp	.-288    	; 0x292a <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2a4a:	ee a9       	sts	0x4e, r30
    2a4c:	ff a9       	sts	0x4f, r31
    2a4e:	31 96       	adiw	r30, 0x01	; 1
    2a50:	ff ab       	sts	0x5f, r31
    2a52:	ee ab       	sts	0x5e, r30
    2a54:	c7 01       	movw	r24, r14
    2a56:	80 96       	adiw	r24, 0x20	; 32
    2a58:	e8 ad       	sts	0x68, r30
    2a5a:	f9 ad       	sts	0x69, r31
    2a5c:	81 93       	st	Z+, r24
    2a5e:	91 93       	st	Z+, r25
    2a60:	f9 af       	sts	0x79, r31
    2a62:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2a64:	ee e6       	ldi	r30, 0x6E	; 110
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	8d 7f       	andi	r24, 0xFD	; 253
    2a6c:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2a6e:	14 bc       	out	0x24, r1	; 36
    2a70:	2c a9       	sts	0x4c, r18
    2a72:	3d a9       	sts	0x4d, r19
    2a74:	2d 5f       	subi	r18, 0xFD	; 253
    2a76:	3f 4f       	sbci	r19, 0xFF	; 255
    2a78:	3d ab       	sts	0x5d, r19
    2a7a:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2a7c:	8e a9       	sts	0x4e, r24
    2a7e:	9f a9       	sts	0x4f, r25
    2a80:	8f 30       	cpi	r24, 0x0F	; 15
    2a82:	91 05       	cpc	r25, r1
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <tune_filter+0x368>
    2a86:	1d cf       	rjmp	.-454    	; 0x28c2 <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2a88:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2a8a:	e9 96       	adiw	r28, 0x39	; 57
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	1f 91       	pop	r17
    2a9c:	0f 91       	pop	r16
    2a9e:	ff 90       	pop	r15
    2aa0:	ef 90       	pop	r14
    2aa2:	df 90       	pop	r13
    2aa4:	cf 90       	pop	r12
    2aa6:	bf 90       	pop	r11
    2aa8:	af 90       	pop	r10
    2aaa:	9f 90       	pop	r9
    2aac:	8f 90       	pop	r8
    2aae:	7f 90       	pop	r7
    2ab0:	6f 90       	pop	r6
    2ab2:	5f 90       	pop	r5
    2ab4:	4f 90       	pop	r4
    2ab6:	3f 90       	pop	r3
    2ab8:	2f 90       	pop	r2
    2aba:	08 95       	ret

00002abc <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2abc:	8f e0       	ldi	r24, 0x0F	; 15
    2abe:	93 e0       	ldi	r25, 0x03	; 3
    2ac0:	6c e0       	ldi	r22, 0x0C	; 12
    2ac2:	76 e0       	ldi	r23, 0x06	; 6
    2ac4:	40 e2       	ldi	r20, 0x20	; 32
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2acc:	81 e5       	ldi	r24, 0x51	; 81
    2ace:	93 e0       	ldi	r25, 0x03	; 3
    2ad0:	6e e4       	ldi	r22, 0x4E	; 78
    2ad2:	76 e0       	ldi	r23, 0x06	; 6
    2ad4:	42 e2       	ldi	r20, 0x22	; 34
    2ad6:	50 e0       	ldi	r21, 0x00	; 0
    2ad8:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2adc:	8f e2       	ldi	r24, 0x2F	; 47
    2ade:	93 e0       	ldi	r25, 0x03	; 3
    2ae0:	6c e2       	ldi	r22, 0x2C	; 44
    2ae2:	76 e0       	ldi	r23, 0x06	; 6
    2ae4:	42 e2       	ldi	r20, 0x22	; 34
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__eeupd_block_m6450a>
	
	
}
    2aec:	08 95       	ret

00002aee <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2aee:	82 e7       	ldi	r24, 0x72	; 114
    2af0:	96 e0       	ldi	r25, 0x06	; 6
    2af2:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__eerd_word_m6450a>
    2af6:	90 93 76 03 	sts	0x0376, r25
    2afa:	80 93 75 03 	sts	0x0375, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2afe:	80 e7       	ldi	r24, 0x70	; 112
    2b00:	96 e0       	ldi	r25, 0x06	; 6
    2b02:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__eerd_word_m6450a>
    2b06:	90 93 74 03 	sts	0x0374, r25
    2b0a:	80 93 73 03 	sts	0x0373, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2b0e:	81 e5       	ldi	r24, 0x51	; 81
    2b10:	93 e0       	ldi	r25, 0x03	; 3
    2b12:	6e e4       	ldi	r22, 0x4E	; 78
    2b14:	76 e0       	ldi	r23, 0x06	; 6
    2b16:	42 e2       	ldi	r20, 0x22	; 34
    2b18:	50 e0       	ldi	r21, 0x00	; 0
    2b1a:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2b1e:	8f e2       	ldi	r24, 0x2F	; 47
    2b20:	93 e0       	ldi	r25, 0x03	; 3
    2b22:	6c e2       	ldi	r22, 0x2C	; 44
    2b24:	76 e0       	ldi	r23, 0x06	; 6
    2b26:	42 e2       	ldi	r20, 0x22	; 34
    2b28:	50 e0       	ldi	r21, 0x00	; 0
    2b2a:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2b2e:	8f e0       	ldi	r24, 0x0F	; 15
    2b30:	93 e0       	ldi	r25, 0x03	; 3
    2b32:	6c e0       	ldi	r22, 0x0C	; 12
    2b34:	76 e0       	ldi	r23, 0x06	; 6
    2b36:	40 e2       	ldi	r20, 0x20	; 32
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2b3e:	08 95       	ret

00002b40 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2b40:	98 2f       	mov	r25, r24
    2b42:	96 95       	lsr	r25
    2b44:	96 95       	lsr	r25
    2b46:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2b48:	29 2f       	mov	r18, r25
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	f9 01       	movw	r30, r18
    2b4e:	31 97       	sbiw	r30, 0x01	; 1
    2b50:	ee 0f       	add	r30, r30
    2b52:	ff 1f       	adc	r31, r31
    2b54:	e6 0f       	add	r30, r22
    2b56:	f7 1f       	adc	r31, r23
    2b58:	01 90       	ld	r0, Z+
    2b5a:	f0 81       	ld	r31, Z
    2b5c:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2b5e:	22 0f       	add	r18, r18
    2b60:	33 1f       	adc	r19, r19
    2b62:	26 0f       	add	r18, r22
    2b64:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2b66:	d9 01       	movw	r26, r18
    2b68:	4d 91       	ld	r20, X+
    2b6a:	5c 91       	ld	r21, X
    2b6c:	11 97       	sbiw	r26, 0x01	; 1
    2b6e:	4e 1b       	sub	r20, r30
    2b70:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2b72:	99 0f       	add	r25, r25
    2b74:	99 0f       	add	r25, r25
    2b76:	99 0f       	add	r25, r25
    2b78:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	48 9f       	mul	r20, r24
    2b7e:	90 01       	movw	r18, r0
    2b80:	49 9f       	mul	r20, r25
    2b82:	30 0d       	add	r19, r0
    2b84:	58 9f       	mul	r21, r24
    2b86:	30 0d       	add	r19, r0
    2b88:	11 24       	eor	r1, r1
    2b8a:	36 95       	lsr	r19
    2b8c:	27 95       	ror	r18
    2b8e:	36 95       	lsr	r19
    2b90:	27 95       	ror	r18
    2b92:	36 95       	lsr	r19
    2b94:	27 95       	ror	r18
    2b96:	e2 0f       	add	r30, r18
    2b98:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2b9a:	8e 2f       	mov	r24, r30
    2b9c:	9f 2f       	mov	r25, r31
    2b9e:	08 95       	ret

00002ba0 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	a2 97       	sbiw	r28, 0x22	; 34
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2bb4:	de 01       	movw	r26, r28
    2bb6:	11 96       	adiw	r26, 0x01	; 1
    2bb8:	ed e8       	ldi	r30, 0x8D	; 141
    2bba:	f2 e0       	ldi	r31, 0x02	; 2
    2bbc:	82 e2       	ldi	r24, 0x22	; 34
    2bbe:	01 90       	ld	r0, Z+
    2bc0:	0d 92       	st	X+, r0
    2bc2:	81 50       	subi	r24, 0x01	; 1
    2bc4:	e1 f7       	brne	.-8      	; 0x2bbe <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2bc6:	a1 e5       	ldi	r26, 0x51	; 81
    2bc8:	b3 e0       	ldi	r27, 0x03	; 3
    2bca:	fe 01       	movw	r30, r28
    2bcc:	31 96       	adiw	r30, 0x01	; 1
    2bce:	82 e2       	ldi	r24, 0x22	; 34
    2bd0:	01 90       	ld	r0, Z+
    2bd2:	0d 92       	st	X+, r0
    2bd4:	81 50       	subi	r24, 0x01	; 1
    2bd6:	e1 f7       	brne	.-8      	; 0x2bd0 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2bd8:	af e2       	ldi	r26, 0x2F	; 47
    2bda:	b3 e0       	ldi	r27, 0x03	; 3
    2bdc:	fe 01       	movw	r30, r28
    2bde:	31 96       	adiw	r30, 0x01	; 1
    2be0:	82 e2       	ldi	r24, 0x22	; 34
    2be2:	01 90       	ld	r0, Z+
    2be4:	0d 92       	st	X+, r0
    2be6:	81 50       	subi	r24, 0x01	; 1
    2be8:	e1 f7       	brne	.-8      	; 0x2be2 <set_one_volt_per_octave+0x42>
	
	
}
    2bea:	a2 96       	adiw	r28, 0x22	; 34
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	08 95       	ret

00002bfc <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2bfc:	ef e6       	ldi	r30, 0x6F	; 111
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	82 70       	andi	r24, 0x02	; 2
    2c04:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2c06:	e1 e8       	ldi	r30, 0x81	; 129
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	87 7f       	andi	r24, 0xF7	; 247
    2c0e:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2c10:	8f e0       	ldi	r24, 0x0F	; 15
    2c12:	6f e0       	ldi	r22, 0x0F	; 15
    2c14:	7e e5       	ldi	r23, 0x5E	; 94
    2c16:	0e 94 8a 10 	call	0x2114	; 0x2114 <set_vco_init_cv>
    2c1a:	90 93 76 03 	sts	0x0376, r25
    2c1e:	80 93 75 03 	sts	0x0375, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2c22:	80 ef       	ldi	r24, 0xF0	; 240
    2c24:	6f e0       	ldi	r22, 0x0F	; 15
    2c26:	7e e5       	ldi	r23, 0x5E	; 94
    2c28:	0e 94 8a 10 	call	0x2114	; 0x2114 <set_vco_init_cv>
    2c2c:	90 93 74 03 	sts	0x0374, r25
    2c30:	80 93 73 03 	sts	0x0373, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2c34:	8f e0       	ldi	r24, 0x0F	; 15
    2c36:	0e 94 ee 11 	call	0x23dc	; 0x23dc <tune_8ths>
			tune_8ths(VCO2);
    2c3a:	80 ef       	ldi	r24, 0xF0	; 240
    2c3c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <tune_8ths>
			tune_filter();
    2c40:	0e 94 90 13 	call	0x2720	; 0x2720 <tune_filter>
			save_tuning_tables();
    2c44:	0e 94 5e 15 	call	0x2abc	; 0x2abc <save_tuning_tables>
    2c48:	8f e4       	ldi	r24, 0x4F	; 79
    2c4a:	93 ec       	ldi	r25, 0xC3	; 195
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <tune+0x50>
    2c50:	00 c0       	rjmp	.+0      	; 0x2c52 <tune+0x56>
    2c52:	00 00       	nop
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2c54:	08 95       	ret

00002c56 <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2c56:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2c58:	98 2f       	mov	r25, r24
    2c5a:	9c 70       	andi	r25, 0x0C	; 12
    2c5c:	20 91 c1 02 	lds	r18, 0x02C1
    2c60:	92 2b       	or	r25, r18
    2c62:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2c66:	98 2f       	mov	r25, r24
    2c68:	92 95       	swap	r25
    2c6a:	96 95       	lsr	r25
    2c6c:	97 70       	andi	r25, 0x07	; 7
    2c6e:	90 ff       	sbrs	r25, 0
    2c70:	16 c0       	rjmp	.+44     	; 0x2c9e <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2c72:	20 91 81 03 	lds	r18, 0x0381
    2c76:	30 91 82 03 	lds	r19, 0x0382
    2c7a:	2f 5f       	subi	r18, 0xFF	; 255
    2c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7e:	30 93 82 03 	sts	0x0382, r19
    2c82:	20 93 81 03 	sts	0x0381, r18
    2c86:	92 e0       	ldi	r25, 0x02	; 2
    2c88:	28 35       	cpi	r18, 0x58	; 88
    2c8a:	39 07       	cpc	r19, r25
    2c8c:	61 f4       	brne	.+24     	; 0x2ca6 <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2c8e:	10 92 82 03 	sts	0x0382, r1
    2c92:	10 92 81 03 	sts	0x0381, r1
			current_patch.mode = CAL;
    2c96:	95 e0       	ldi	r25, 0x05	; 5
    2c98:	90 93 07 03 	sts	0x0307, r25
    2c9c:	04 c0       	rjmp	.+8      	; 0x2ca6 <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2c9e:	10 92 82 03 	sts	0x0382, r1
    2ca2:	10 92 81 03 	sts	0x0381, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2ca6:	90 91 83 03 	lds	r25, 0x0383
    2caa:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2cac:	98 27       	eor	r25, r24
    2cae:	90 93 83 03 	sts	0x0383, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2cb2:	89 23       	and	r24, r25
    2cb4:	08 95       	ret

00002cb6 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2cb6:	ed ed       	ldi	r30, 0xDD	; 221
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	90 81       	ld	r25, Z
    2cbc:	9f 7b       	andi	r25, 0xBF	; 191
    2cbe:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	21 70       	andi	r18, 0x01	; 1
    2cc6:	30 70       	andi	r19, 0x00	; 0
    2cc8:	22 0f       	add	r18, r18
    2cca:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2ccc:	68 2f       	mov	r22, r24
    2cce:	62 95       	swap	r22
    2cd0:	66 95       	lsr	r22
    2cd2:	67 70       	andi	r22, 0x07	; 7
    2cd4:	67 95       	ror	r22
    2cd6:	66 27       	eor	r22, r22
    2cd8:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cda:	26 2b       	or	r18, r22
    2cdc:	98 2f       	mov	r25, r24
    2cde:	96 95       	lsr	r25
    2ce0:	96 95       	lsr	r25
    2ce2:	91 70       	andi	r25, 0x01	; 1
    2ce4:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2ce6:	68 2f       	mov	r22, r24
    2ce8:	66 1f       	adc	r22, r22
    2cea:	66 27       	eor	r22, r22
    2cec:	66 1f       	adc	r22, r22
    2cee:	66 0f       	add	r22, r22
    2cf0:	66 0f       	add	r22, r22
    2cf2:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cf4:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2cf6:	a8 2f       	mov	r26, r24
    2cf8:	a6 95       	lsr	r26
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	a1 70       	andi	r26, 0x01	; 1
    2cfe:	b0 70       	andi	r27, 0x00	; 0
    2d00:	bd 01       	movw	r22, r26
    2d02:	66 0f       	add	r22, r22
    2d04:	77 1f       	adc	r23, r23
    2d06:	66 0f       	add	r22, r22
    2d08:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d0a:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2d0c:	68 2f       	mov	r22, r24
    2d0e:	62 95       	swap	r22
    2d10:	6f 70       	andi	r22, 0x0F	; 15
    2d12:	70 e0       	ldi	r23, 0x00	; 0
    2d14:	61 70       	andi	r22, 0x01	; 1
    2d16:	70 70       	andi	r23, 0x00	; 0
    2d18:	ab 01       	movw	r20, r22
    2d1a:	00 24       	eor	r0, r0
    2d1c:	56 95       	lsr	r21
    2d1e:	47 95       	ror	r20
    2d20:	07 94       	ror	r0
    2d22:	56 95       	lsr	r21
    2d24:	47 95       	ror	r20
    2d26:	07 94       	ror	r0
    2d28:	54 2f       	mov	r21, r20
    2d2a:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d2c:	62 2f       	mov	r22, r18
    2d2e:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2d30:	48 2f       	mov	r20, r24
    2d32:	42 95       	swap	r20
    2d34:	46 95       	lsr	r20
    2d36:	46 95       	lsr	r20
    2d38:	43 70       	andi	r20, 0x03	; 3
    2d3a:	50 e0       	ldi	r21, 0x00	; 0
    2d3c:	41 70       	andi	r20, 0x01	; 1
    2d3e:	50 70       	andi	r21, 0x00	; 0
    2d40:	9a 01       	movw	r18, r20
    2d42:	22 0f       	add	r18, r18
    2d44:	33 1f       	adc	r19, r19
    2d46:	22 95       	swap	r18
    2d48:	32 95       	swap	r19
    2d4a:	30 7f       	andi	r19, 0xF0	; 240
    2d4c:	32 27       	eor	r19, r18
    2d4e:	20 7f       	andi	r18, 0xF0	; 240
    2d50:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d52:	46 2f       	mov	r20, r22
    2d54:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2d56:	86 95       	lsr	r24
    2d58:	86 95       	lsr	r24
    2d5a:	86 95       	lsr	r24
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	21 70       	andi	r18, 0x01	; 1
    2d62:	30 70       	andi	r19, 0x00	; 0
    2d64:	c9 01       	movw	r24, r18
    2d66:	82 95       	swap	r24
    2d68:	92 95       	swap	r25
    2d6a:	90 7f       	andi	r25, 0xF0	; 240
    2d6c:	98 27       	eor	r25, r24
    2d6e:	80 7f       	andi	r24, 0xF0	; 240
    2d70:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d72:	84 2b       	or	r24, r20
    2d74:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2d76:	80 81       	ld	r24, Z
    2d78:	80 64       	ori	r24, 0x40	; 64
    2d7a:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2d7c:	80 81       	ld	r24, Z
    2d7e:	8f 7b       	andi	r24, 0xBF	; 191
    2d80:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2d82:	12 b8       	out	0x02, r1	; 2
	
	
    2d84:	08 95       	ret

00002d86 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2d86:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2d88:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2d8a:	74 83       	std	Z+4, r23	; 0x04
    2d8c:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2d8e:	11 82       	std	Z+1, r1	; 0x01
    2d90:	10 82       	st	Z, r1
}
    2d92:	08 95       	ret

00002d94 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2d94:	1f 93       	push	r17
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	ec 01       	movw	r28, r24
    2d9c:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2d9e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <store_and_clear_interrupt>
    2da2:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2da4:	39 81       	ldd	r19, Y+1	; 0x01
    2da6:	83 2f       	mov	r24, r19
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	01 96       	adiw	r24, 0x01	; 1
    2dac:	6a 81       	ldd	r22, Y+2	; 0x02
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__divmodhi4>
    2db4:	48 81       	ld	r20, Y
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	84 17       	cp	r24, r20
    2dba:	95 07       	cpc	r25, r21
    2dbc:	29 f4       	brne	.+10     	; 0x2dc8 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2dbe:	82 2f       	mov	r24, r18
    2dc0:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <restore_interrupt_setting>
      return false;
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	11 c0       	rjmp	.+34     	; 0x2dea <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2dc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dca:	fc 81       	ldd	r31, Y+4	; 0x04
    2dcc:	e3 0f       	add	r30, r19
    2dce:	f1 1d       	adc	r31, r1
    2dd0:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	01 96       	adiw	r24, 0x01	; 1
    2dd8:	6a 81       	ldd	r22, Y+2	; 0x02
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__divmodhi4>
    2de0:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2de2:	82 2f       	mov	r24, r18
    2de4:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <restore_interrupt_setting>
      return true;
    2de8:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2dea:	df 91       	pop	r29
    2dec:	cf 91       	pop	r28
    2dee:	1f 91       	pop	r17
    2df0:	08 95       	ret

00002df2 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2df2:	cf 93       	push	r28
    2df4:	df 93       	push	r29
    2df6:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2df8:	0e 94 39 17 	call	0x2e72	; 0x2e72 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2dfc:	29 81       	ldd	r18, Y+1	; 0x01
    2dfe:	98 81       	ld	r25, Y
    2e00:	29 17       	cp	r18, r25
    2e02:	18 f0       	brcs	.+6      	; 0x2e0a <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2e04:	c2 2f       	mov	r28, r18
    2e06:	c9 1b       	sub	r28, r25
    2e08:	03 c0       	rjmp	.+6      	; 0x2e10 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2e0a:	ca 81       	ldd	r28, Y+2	; 0x02
    2e0c:	c2 0f       	add	r28, r18
    2e0e:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2e10:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <restore_interrupt_setting>
   return len;
}
    2e14:	8c 2f       	mov	r24, r28
    2e16:	df 91       	pop	r29
    2e18:	cf 91       	pop	r28
    2e1a:	08 95       	ret

00002e1c <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2e1c:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2e1e:	20 81       	ld	r18, Z
    2e20:	86 2f       	mov	r24, r22
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	82 0f       	add	r24, r18
    2e26:	91 1d       	adc	r25, r1
    2e28:	62 81       	ldd	r22, Z+2	; 0x02
    2e2a:	70 e0       	ldi	r23, 0x00	; 0
    2e2c:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__divmodhi4>
    2e30:	03 80       	ldd	r0, Z+3	; 0x03
    2e32:	f4 81       	ldd	r31, Z+4	; 0x04
    2e34:	e0 2d       	mov	r30, r0
    2e36:	e8 0f       	add	r30, r24
    2e38:	f9 1f       	adc	r31, r25
}
    2e3a:	80 81       	ld	r24, Z
    2e3c:	08 95       	ret

00002e3e <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2e3e:	1f 93       	push	r17
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	ec 01       	movw	r28, r24
    2e46:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2e48:	0e 94 39 17 	call	0x2e72	; 0x2e72 <store_and_clear_interrupt>
    2e4c:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2e4e:	88 81       	ld	r24, Y
    2e50:	21 2f       	mov	r18, r17
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	28 0f       	add	r18, r24
    2e56:	31 1d       	adc	r19, r1
    2e58:	6a 81       	ldd	r22, Y+2	; 0x02
    2e5a:	c9 01       	movw	r24, r18
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__divmodhi4>
    2e62:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2e64:	84 2f       	mov	r24, r20
    2e66:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <restore_interrupt_setting>
}
    2e6a:	df 91       	pop	r29
    2e6c:	cf 91       	pop	r28
    2e6e:	1f 91       	pop	r17
    2e70:	08 95       	ret

00002e72 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2e72:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2e74:	f8 94       	cli
   return sreg;
}
    2e76:	08 95       	ret

00002e78 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2e78:	8f bf       	out	0x3f, r24	; 63
}
    2e7a:	08 95       	ret

00002e7c <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2e7c:	88 1f       	adc	r24, r24
    2e7e:	88 27       	eor	r24, r24
    2e80:	88 1f       	adc	r24, r24
    2e82:	08 95       	ret

00002e84 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2e84:	91 e0       	ldi	r25, 0x01	; 1
    2e86:	88 3f       	cpi	r24, 0xF8	; 248
    2e88:	08 f4       	brcc	.+2      	; 0x2e8c <midi_is_realtime+0x8>
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
}
    2e8c:	89 2f       	mov	r24, r25
    2e8e:	08 95       	ret

00002e90 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2e90:	28 2f       	mov	r18, r24
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	20 7f       	andi	r18, 0xF0	; 240
    2e96:	30 70       	andi	r19, 0x00	; 0
    2e98:	20 3c       	cpi	r18, 0xC0	; 192
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	e9 f1       	breq	.+122    	; 0x2f18 <midi_packet_length+0x88>
    2e9e:	21 3c       	cpi	r18, 0xC1	; 193
    2ea0:	31 05       	cpc	r19, r1
    2ea2:	8c f4       	brge	.+34     	; 0x2ec6 <midi_packet_length+0x36>
    2ea4:	20 39       	cpi	r18, 0x90	; 144
    2ea6:	31 05       	cpc	r19, r1
    2ea8:	e1 f0       	breq	.+56     	; 0x2ee2 <midi_packet_length+0x52>
    2eaa:	21 39       	cpi	r18, 0x91	; 145
    2eac:	31 05       	cpc	r19, r1
    2eae:	24 f4       	brge	.+8      	; 0x2eb8 <midi_packet_length+0x28>
    2eb0:	20 38       	cpi	r18, 0x80	; 128
    2eb2:	31 05       	cpc	r19, r1
    2eb4:	79 f5       	brne	.+94     	; 0x2f14 <midi_packet_length+0x84>
    2eb6:	15 c0       	rjmp	.+42     	; 0x2ee2 <midi_packet_length+0x52>
    2eb8:	20 3a       	cpi	r18, 0xA0	; 160
    2eba:	31 05       	cpc	r19, r1
    2ebc:	91 f0       	breq	.+36     	; 0x2ee2 <midi_packet_length+0x52>
    2ebe:	20 3b       	cpi	r18, 0xB0	; 176
    2ec0:	31 05       	cpc	r19, r1
    2ec2:	41 f5       	brne	.+80     	; 0x2f14 <midi_packet_length+0x84>
    2ec4:	0e c0       	rjmp	.+28     	; 0x2ee2 <midi_packet_length+0x52>
    2ec6:	20 3e       	cpi	r18, 0xE0	; 224
    2ec8:	31 05       	cpc	r19, r1
    2eca:	59 f0       	breq	.+22     	; 0x2ee2 <midi_packet_length+0x52>
    2ecc:	21 3e       	cpi	r18, 0xE1	; 225
    2ece:	31 05       	cpc	r19, r1
    2ed0:	24 f4       	brge	.+8      	; 0x2eda <midi_packet_length+0x4a>
    2ed2:	20 3d       	cpi	r18, 0xD0	; 208
    2ed4:	31 05       	cpc	r19, r1
    2ed6:	f1 f4       	brne	.+60     	; 0x2f14 <midi_packet_length+0x84>
    2ed8:	1f c0       	rjmp	.+62     	; 0x2f18 <midi_packet_length+0x88>
    2eda:	20 3f       	cpi	r18, 0xF0	; 240
    2edc:	31 05       	cpc	r19, r1
    2ede:	d1 f4       	brne	.+52     	; 0x2f14 <midi_packet_length+0x84>
    2ee0:	02 c0       	rjmp	.+4      	; 0x2ee6 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2ee2:	83 e0       	ldi	r24, 0x03	; 3
    2ee4:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2ee6:	86 3f       	cpi	r24, 0xF6	; 246
    2ee8:	79 f0       	breq	.+30     	; 0x2f08 <midi_packet_length+0x78>
    2eea:	87 3f       	cpi	r24, 0xF7	; 247
    2eec:	38 f4       	brcc	.+14     	; 0x2efc <midi_packet_length+0x6c>
    2eee:	82 3f       	cpi	r24, 0xF2	; 242
    2ef0:	a9 f0       	breq	.+42     	; 0x2f1c <midi_packet_length+0x8c>
    2ef2:	83 3f       	cpi	r24, 0xF3	; 243
    2ef4:	59 f0       	breq	.+22     	; 0x2f0c <midi_packet_length+0x7c>
    2ef6:	81 3f       	cpi	r24, 0xF1	; 241
    2ef8:	59 f4       	brne	.+22     	; 0x2f10 <midi_packet_length+0x80>
    2efa:	08 c0       	rjmp	.+16     	; 0x2f0c <midi_packet_length+0x7c>
    2efc:	88 3f       	cpi	r24, 0xF8	; 248
    2efe:	40 f0       	brcs	.+16     	; 0x2f10 <midi_packet_length+0x80>
    2f00:	8d 3f       	cpi	r24, 0xFD	; 253
    2f02:	10 f0       	brcs	.+4      	; 0x2f08 <midi_packet_length+0x78>
    2f04:	8e 3f       	cpi	r24, 0xFE	; 254
    2f06:	20 f0       	brcs	.+8      	; 0x2f10 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2f0c:	82 e0       	ldi	r24, 0x02	; 2
    2f0e:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2f18:	82 e0       	ldi	r24, 0x02	; 2
    2f1a:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2f1c:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2f1e:	08 95       	ret

00002f20 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2f20:	0f 93       	push	r16
    2f22:	34 2f       	mov	r19, r20
    2f24:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2f26:	46 2f       	mov	r20, r22
    2f28:	4f 70       	andi	r20, 0x0F	; 15
    2f2a:	40 6b       	ori	r20, 0xB0	; 176
    2f2c:	23 2f       	mov	r18, r19
    2f2e:	2f 77       	andi	r18, 0x7F	; 127
    2f30:	0f 77       	andi	r16, 0x7F	; 127
    2f32:	dc 01       	movw	r26, r24
    2f34:	ed 91       	ld	r30, X+
    2f36:	fc 91       	ld	r31, X
    2f38:	63 e0       	ldi	r22, 0x03	; 3
    2f3a:	70 e0       	ldi	r23, 0x00	; 0
    2f3c:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2f3e:	0f 91       	pop	r16
    2f40:	08 95       	ret

00002f42 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2f42:	0f 93       	push	r16
    2f44:	34 2f       	mov	r19, r20
    2f46:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2f48:	46 2f       	mov	r20, r22
    2f4a:	4f 70       	andi	r20, 0x0F	; 15
    2f4c:	40 69       	ori	r20, 0x90	; 144
    2f4e:	23 2f       	mov	r18, r19
    2f50:	2f 77       	andi	r18, 0x7F	; 127
    2f52:	0f 77       	andi	r16, 0x7F	; 127
    2f54:	dc 01       	movw	r26, r24
    2f56:	ed 91       	ld	r30, X+
    2f58:	fc 91       	ld	r31, X
    2f5a:	63 e0       	ldi	r22, 0x03	; 3
    2f5c:	70 e0       	ldi	r23, 0x00	; 0
    2f5e:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2f60:	0f 91       	pop	r16
    2f62:	08 95       	ret

00002f64 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2f64:	0f 93       	push	r16
    2f66:	34 2f       	mov	r19, r20
    2f68:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2f6a:	46 2f       	mov	r20, r22
    2f6c:	4f 70       	andi	r20, 0x0F	; 15
    2f6e:	40 68       	ori	r20, 0x80	; 128
    2f70:	23 2f       	mov	r18, r19
    2f72:	2f 77       	andi	r18, 0x7F	; 127
    2f74:	0f 77       	andi	r16, 0x7F	; 127
    2f76:	dc 01       	movw	r26, r24
    2f78:	ed 91       	ld	r30, X+
    2f7a:	fc 91       	ld	r31, X
    2f7c:	63 e0       	ldi	r22, 0x03	; 3
    2f7e:	70 e0       	ldi	r23, 0x00	; 0
    2f80:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2f82:	0f 91       	pop	r16
    2f84:	08 95       	ret

00002f86 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2f86:	0f 93       	push	r16
    2f88:	34 2f       	mov	r19, r20
    2f8a:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2f8c:	46 2f       	mov	r20, r22
    2f8e:	4f 70       	andi	r20, 0x0F	; 15
    2f90:	40 6a       	ori	r20, 0xA0	; 160
    2f92:	23 2f       	mov	r18, r19
    2f94:	2f 77       	andi	r18, 0x7F	; 127
    2f96:	0f 77       	andi	r16, 0x7F	; 127
    2f98:	dc 01       	movw	r26, r24
    2f9a:	ed 91       	ld	r30, X+
    2f9c:	fc 91       	ld	r31, X
    2f9e:	63 e0       	ldi	r22, 0x03	; 3
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2fa4:	0f 91       	pop	r16
    2fa6:	08 95       	ret

00002fa8 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2fac:	20 e2       	ldi	r18, 0x20	; 32
    2fae:	40 30       	cpi	r20, 0x00	; 0
    2fb0:	52 07       	cpc	r21, r18
    2fb2:	44 f4       	brge	.+16     	; 0x2fc4 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2fb4:	a0 ee       	ldi	r26, 0xE0	; 224
    2fb6:	40 30       	cpi	r20, 0x00	; 0
    2fb8:	5a 07       	cpc	r21, r26
    2fba:	3c f0       	brlt	.+14     	; 0x2fca <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2fbc:	8a 01       	movw	r16, r20
    2fbe:	00 50       	subi	r16, 0x00	; 0
    2fc0:	10 4e       	sbci	r17, 0xE0	; 224
    2fc2:	05 c0       	rjmp	.+10     	; 0x2fce <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2fc4:	0f ef       	ldi	r16, 0xFF	; 255
    2fc6:	1f e3       	ldi	r17, 0x3F	; 63
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2fca:	00 e0       	ldi	r16, 0x00	; 0
    2fcc:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2fce:	46 2f       	mov	r20, r22
    2fd0:	4f 70       	andi	r20, 0x0F	; 15
    2fd2:	40 6e       	ori	r20, 0xE0	; 224
    2fd4:	20 2f       	mov	r18, r16
    2fd6:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2fd8:	00 0f       	add	r16, r16
    2fda:	01 2f       	mov	r16, r17
    2fdc:	00 1f       	adc	r16, r16
    2fde:	11 0b       	sbc	r17, r17
    2fe0:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2fe2:	0f 77       	andi	r16, 0x7F	; 127
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	ed 91       	ld	r30, X+
    2fe8:	fc 91       	ld	r31, X
    2fea:	63 e0       	ldi	r22, 0x03	; 3
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2ff0:	1f 91       	pop	r17
    2ff2:	0f 91       	pop	r16
    2ff4:	08 95       	ret

00002ff6 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2ff6:	0f 93       	push	r16
    2ff8:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2ffa:	46 2f       	mov	r20, r22
    2ffc:	4f 70       	andi	r20, 0x0F	; 15
    2ffe:	40 6c       	ori	r20, 0xC0	; 192
    3000:	2f 77       	andi	r18, 0x7F	; 127
    3002:	dc 01       	movw	r26, r24
    3004:	ed 91       	ld	r30, X+
    3006:	fc 91       	ld	r31, X
    3008:	62 e0       	ldi	r22, 0x02	; 2
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	00 e0       	ldi	r16, 0x00	; 0
    300e:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    3010:	0f 91       	pop	r16
    3012:	08 95       	ret

00003014 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    3014:	0f 93       	push	r16
    3016:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    3018:	46 2f       	mov	r20, r22
    301a:	4f 70       	andi	r20, 0x0F	; 15
    301c:	40 6d       	ori	r20, 0xD0	; 208
    301e:	2f 77       	andi	r18, 0x7F	; 127
    3020:	dc 01       	movw	r26, r24
    3022:	ed 91       	ld	r30, X+
    3024:	fc 91       	ld	r31, X
    3026:	62 e0       	ldi	r22, 0x02	; 2
    3028:	70 e0       	ldi	r23, 0x00	; 0
    302a:	00 e0       	ldi	r16, 0x00	; 0
    302c:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    302e:	0f 91       	pop	r16
    3030:	08 95       	ret

00003032 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    3032:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    3034:	dc 01       	movw	r26, r24
    3036:	ed 91       	ld	r30, X+
    3038:	fc 91       	ld	r31, X
    303a:	61 e0       	ldi	r22, 0x01	; 1
    303c:	70 e0       	ldi	r23, 0x00	; 0
    303e:	48 ef       	ldi	r20, 0xF8	; 248
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	00 e0       	ldi	r16, 0x00	; 0
    3044:	09 95       	icall
}
    3046:	0f 91       	pop	r16
    3048:	08 95       	ret

0000304a <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    304a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    304c:	dc 01       	movw	r26, r24
    304e:	ed 91       	ld	r30, X+
    3050:	fc 91       	ld	r31, X
    3052:	61 e0       	ldi	r22, 0x01	; 1
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	49 ef       	ldi	r20, 0xF9	; 249
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	00 e0       	ldi	r16, 0x00	; 0
    305c:	09 95       	icall
}
    305e:	0f 91       	pop	r16
    3060:	08 95       	ret

00003062 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    3062:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    3064:	dc 01       	movw	r26, r24
    3066:	ed 91       	ld	r30, X+
    3068:	fc 91       	ld	r31, X
    306a:	61 e0       	ldi	r22, 0x01	; 1
    306c:	70 e0       	ldi	r23, 0x00	; 0
    306e:	4a ef       	ldi	r20, 0xFA	; 250
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	00 e0       	ldi	r16, 0x00	; 0
    3074:	09 95       	icall
}
    3076:	0f 91       	pop	r16
    3078:	08 95       	ret

0000307a <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    307a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    307c:	dc 01       	movw	r26, r24
    307e:	ed 91       	ld	r30, X+
    3080:	fc 91       	ld	r31, X
    3082:	61 e0       	ldi	r22, 0x01	; 1
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	4b ef       	ldi	r20, 0xFB	; 251
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	00 e0       	ldi	r16, 0x00	; 0
    308c:	09 95       	icall
}
    308e:	0f 91       	pop	r16
    3090:	08 95       	ret

00003092 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    3092:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    3094:	dc 01       	movw	r26, r24
    3096:	ed 91       	ld	r30, X+
    3098:	fc 91       	ld	r31, X
    309a:	61 e0       	ldi	r22, 0x01	; 1
    309c:	70 e0       	ldi	r23, 0x00	; 0
    309e:	4c ef       	ldi	r20, 0xFC	; 252
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	00 e0       	ldi	r16, 0x00	; 0
    30a4:	09 95       	icall
}
    30a6:	0f 91       	pop	r16
    30a8:	08 95       	ret

000030aa <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    30aa:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    30ac:	dc 01       	movw	r26, r24
    30ae:	ed 91       	ld	r30, X+
    30b0:	fc 91       	ld	r31, X
    30b2:	61 e0       	ldi	r22, 0x01	; 1
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	4e ef       	ldi	r20, 0xFE	; 254
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	00 e0       	ldi	r16, 0x00	; 0
    30bc:	09 95       	icall
}
    30be:	0f 91       	pop	r16
    30c0:	08 95       	ret

000030c2 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    30c2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    30c4:	dc 01       	movw	r26, r24
    30c6:	ed 91       	ld	r30, X+
    30c8:	fc 91       	ld	r31, X
    30ca:	61 e0       	ldi	r22, 0x01	; 1
    30cc:	70 e0       	ldi	r23, 0x00	; 0
    30ce:	4f ef       	ldi	r20, 0xFF	; 255
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	00 e0       	ldi	r16, 0x00	; 0
    30d4:	09 95       	icall
}
    30d6:	0f 91       	pop	r16
    30d8:	08 95       	ret

000030da <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    30da:	0f 93       	push	r16
   device->send_func(device, 2,
    30dc:	26 2f       	mov	r18, r22
    30de:	2f 77       	andi	r18, 0x7F	; 127
    30e0:	dc 01       	movw	r26, r24
    30e2:	ed 91       	ld	r30, X+
    30e4:	fc 91       	ld	r31, X
    30e6:	62 e0       	ldi	r22, 0x02	; 2
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    30ea:	41 ef       	ldi	r20, 0xF1	; 241
    30ec:	00 e0       	ldi	r16, 0x00	; 0
    30ee:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    30f0:	0f 91       	pop	r16
    30f2:	08 95       	ret

000030f4 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    30f4:	0f 93       	push	r16
    30f6:	1f 93       	push	r17
   device->send_func(device, 3,
    30f8:	26 2f       	mov	r18, r22
    30fa:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    30fc:	8b 01       	movw	r16, r22
    30fe:	00 0f       	add	r16, r16
    3100:	01 2f       	mov	r16, r17
    3102:	00 1f       	adc	r16, r16
    3104:	11 0b       	sbc	r17, r17
    3106:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    3108:	0f 77       	andi	r16, 0x7F	; 127
    310a:	dc 01       	movw	r26, r24
    310c:	ed 91       	ld	r30, X+
    310e:	fc 91       	ld	r31, X
    3110:	63 e0       	ldi	r22, 0x03	; 3
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	42 ef       	ldi	r20, 0xF2	; 242
    3116:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    3118:	1f 91       	pop	r17
    311a:	0f 91       	pop	r16
    311c:	08 95       	ret

0000311e <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    311e:	0f 93       	push	r16
   device->send_func(device, 2,
    3120:	26 2f       	mov	r18, r22
    3122:	2f 77       	andi	r18, 0x7F	; 127
    3124:	dc 01       	movw	r26, r24
    3126:	ed 91       	ld	r30, X+
    3128:	fc 91       	ld	r31, X
    312a:	62 e0       	ldi	r22, 0x02	; 2
    312c:	70 e0       	ldi	r23, 0x00	; 0
    312e:	43 ef       	ldi	r20, 0xF3	; 243
    3130:	00 e0       	ldi	r16, 0x00	; 0
    3132:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    3134:	0f 91       	pop	r16
    3136:	08 95       	ret

00003138 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    3138:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    313a:	dc 01       	movw	r26, r24
    313c:	ed 91       	ld	r30, X+
    313e:	fc 91       	ld	r31, X
    3140:	61 e0       	ldi	r22, 0x01	; 1
    3142:	70 e0       	ldi	r23, 0x00	; 0
    3144:	46 ef       	ldi	r20, 0xF6	; 246
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	00 e0       	ldi	r16, 0x00	; 0
    314a:	09 95       	icall
}
    314c:	0f 91       	pop	r16
    314e:	08 95       	ret

00003150 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    3150:	0f 93       	push	r16
    3152:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    3154:	dc 01       	movw	r26, r24
    3156:	ed 91       	ld	r30, X+
    3158:	fc 91       	ld	r31, X
    315a:	61 e0       	ldi	r22, 0x01	; 1
    315c:	70 e0       	ldi	r23, 0x00	; 0
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	00 e0       	ldi	r16, 0x00	; 0
    3162:	09 95       	icall
}
    3164:	0f 91       	pop	r16
    3166:	08 95       	ret

00003168 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    3168:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    316a:	dc 01       	movw	r26, r24
    316c:	ed 91       	ld	r30, X+
    316e:	fc 91       	ld	r31, X
    3170:	09 95       	icall
}
    3172:	0f 91       	pop	r16
    3174:	08 95       	ret

00003176 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    3176:	6f 92       	push	r6
    3178:	7f 92       	push	r7
    317a:	8f 92       	push	r8
    317c:	9f 92       	push	r9
    317e:	af 92       	push	r10
    3180:	bf 92       	push	r11
    3182:	cf 92       	push	r12
    3184:	df 92       	push	r13
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	00 d0       	rcall	.+0      	; 0x3194 <midi_send_array+0x1e>
    3194:	0f 92       	push	r0
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	4c 01       	movw	r8, r24
    319c:	6b 01       	movw	r12, r22
    319e:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    31a0:	61 15       	cp	r22, r1
    31a2:	71 05       	cpc	r23, r1
    31a4:	41 f1       	breq	.+80     	; 0x31f6 <midi_send_array+0x80>
    31a6:	ee 24       	eor	r14, r14
    31a8:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    31aa:	0f 2e       	mov	r0, r31
    31ac:	f3 e0       	ldi	r31, 0x03	; 3
    31ae:	6f 2e       	mov	r6, r31
    31b0:	77 24       	eor	r7, r7
    31b2:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    31b4:	19 82       	std	Y+1, r1	; 0x01
    31b6:	1a 82       	std	Y+2, r1	; 0x02
    31b8:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    31ba:	86 01       	movw	r16, r12
    31bc:	0e 19       	sub	r16, r14
    31be:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    31c0:	04 30       	cpi	r16, 0x04	; 4
    31c2:	11 05       	cpc	r17, r1
    31c4:	08 f0       	brcs	.+2      	; 0x31c8 <midi_send_array+0x52>
    31c6:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    31c8:	b5 01       	movw	r22, r10
    31ca:	6e 0d       	add	r22, r14
    31cc:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    31ce:	ce 01       	movw	r24, r28
    31d0:	01 96       	adiw	r24, 0x01	; 1
    31d2:	40 2f       	mov	r20, r16
    31d4:	51 2f       	mov	r21, r17
    31d6:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    31da:	c4 01       	movw	r24, r8
    31dc:	b8 01       	movw	r22, r16
    31de:	49 81       	ldd	r20, Y+1	; 0x01
    31e0:	2a 81       	ldd	r18, Y+2	; 0x02
    31e2:	0b 81       	ldd	r16, Y+3	; 0x03
    31e4:	0e 94 b4 18 	call	0x3168	; 0x3168 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    31e8:	83 e0       	ldi	r24, 0x03	; 3
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	e8 0e       	add	r14, r24
    31ee:	f9 1e       	adc	r15, r25
    31f0:	ec 14       	cp	r14, r12
    31f2:	fd 04       	cpc	r15, r13
    31f4:	f8 f2       	brcs	.-66     	; 0x31b4 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	df 91       	pop	r29
    31fe:	cf 91       	pop	r28
    3200:	1f 91       	pop	r17
    3202:	0f 91       	pop	r16
    3204:	ff 90       	pop	r15
    3206:	ef 90       	pop	r14
    3208:	df 90       	pop	r13
    320a:	cf 90       	pop	r12
    320c:	bf 90       	pop	r11
    320e:	af 90       	pop	r10
    3210:	9f 90       	pop	r9
    3212:	8f 90       	pop	r8
    3214:	7f 90       	pop	r7
    3216:	6f 90       	pop	r6
    3218:	08 95       	ret

0000321a <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    321a:	fc 01       	movw	r30, r24
    321c:	73 83       	std	Z+3, r23	; 0x03
    321e:	62 83       	std	Z+2, r22	; 0x02
}
    3220:	08 95       	ret

00003222 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    3222:	fc 01       	movw	r30, r24
    3224:	75 83       	std	Z+5, r23	; 0x05
    3226:	64 83       	std	Z+4, r22	; 0x04
}
    3228:	08 95       	ret

0000322a <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    322a:	fc 01       	movw	r30, r24
    322c:	77 83       	std	Z+7, r23	; 0x07
    322e:	66 83       	std	Z+6, r22	; 0x06
}
    3230:	08 95       	ret

00003232 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    3232:	fc 01       	movw	r30, r24
    3234:	71 87       	std	Z+9, r23	; 0x09
    3236:	60 87       	std	Z+8, r22	; 0x08
}
    3238:	08 95       	ret

0000323a <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    323a:	fc 01       	movw	r30, r24
    323c:	73 87       	std	Z+11, r23	; 0x0b
    323e:	62 87       	std	Z+10, r22	; 0x0a
}
    3240:	08 95       	ret

00003242 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    3242:	fc 01       	movw	r30, r24
    3244:	75 87       	std	Z+13, r23	; 0x0d
    3246:	64 87       	std	Z+12, r22	; 0x0c
}
    3248:	08 95       	ret

0000324a <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    324a:	fc 01       	movw	r30, r24
    324c:	77 87       	std	Z+15, r23	; 0x0f
    324e:	66 87       	std	Z+14, r22	; 0x0e
}
    3250:	08 95       	ret

00003252 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    3252:	fc 01       	movw	r30, r24
    3254:	71 8b       	std	Z+17, r23	; 0x11
    3256:	60 8b       	std	Z+16, r22	; 0x10
}
    3258:	08 95       	ret

0000325a <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    325a:	fc 01       	movw	r30, r24
    325c:	73 8b       	std	Z+19, r23	; 0x13
    325e:	62 8b       	std	Z+18, r22	; 0x12
}
    3260:	08 95       	ret

00003262 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    3262:	fc 01       	movw	r30, r24
    3264:	75 8b       	std	Z+21, r23	; 0x15
    3266:	64 8b       	std	Z+20, r22	; 0x14
}
    3268:	08 95       	ret

0000326a <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    326a:	fc 01       	movw	r30, r24
    326c:	77 8b       	std	Z+23, r23	; 0x17
    326e:	66 8b       	std	Z+22, r22	; 0x16
}
    3270:	08 95       	ret

00003272 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    3272:	fc 01       	movw	r30, r24
    3274:	71 8f       	std	Z+25, r23	; 0x19
    3276:	60 8f       	std	Z+24, r22	; 0x18
}
    3278:	08 95       	ret

0000327a <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    327a:	fc 01       	movw	r30, r24
    327c:	73 8f       	std	Z+27, r23	; 0x1b
    327e:	62 8f       	std	Z+26, r22	; 0x1a
}
    3280:	08 95       	ret

00003282 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    3282:	fc 01       	movw	r30, r24
    3284:	75 8f       	std	Z+29, r23	; 0x1d
    3286:	64 8f       	std	Z+28, r22	; 0x1c
}
    3288:	08 95       	ret

0000328a <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    328a:	fc 01       	movw	r30, r24
    328c:	77 8f       	std	Z+31, r23	; 0x1f
    328e:	66 8f       	std	Z+30, r22	; 0x1e
}
    3290:	08 95       	ret

00003292 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    3292:	cf 93       	push	r28
    3294:	df 93       	push	r29
    3296:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    3298:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    329a:	1f a2       	lds	r17, 0x9f
    329c:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    329e:	bc 01       	movw	r22, r24
    32a0:	68 5d       	subi	r22, 0xD8	; 216
    32a2:	7f 4f       	sbci	r23, 0xFF	; 255
    32a4:	88 51       	subi	r24, 0x18	; 24
    32a6:	9f 4f       	sbci	r25, 0xFF	; 255
    32a8:	40 ec       	ldi	r20, 0xC0	; 192
    32aa:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    32ae:	1b 82       	std	Y+3, r1	; 0x03
    32b0:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    32b2:	1d 82       	std	Y+5, r1	; 0x05
    32b4:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    32b6:	1f 82       	std	Y+7, r1	; 0x07
    32b8:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    32ba:	19 86       	std	Y+9, r1	; 0x09
    32bc:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    32be:	1b 86       	std	Y+11, r1	; 0x0b
    32c0:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    32c2:	1d 86       	std	Y+13, r1	; 0x0d
    32c4:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    32c6:	1f 86       	std	Y+15, r1	; 0x0f
    32c8:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    32ca:	19 8a       	std	Y+17, r1	; 0x11
    32cc:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    32ce:	1b 8a       	std	Y+19, r1	; 0x13
    32d0:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    32d2:	1d 8a       	std	Y+21, r1	; 0x15
    32d4:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    32d6:	1f 8a       	std	Y+23, r1	; 0x17
    32d8:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    32da:	19 8e       	std	Y+25, r1	; 0x19
    32dc:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    32de:	1b 8e       	std	Y+27, r1	; 0x1b
    32e0:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    32e2:	1d 8e       	std	Y+29, r1	; 0x1d
    32e4:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    32e6:	1f 8e       	std	Y+31, r1	; 0x1f
    32e8:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    32ea:	19 a2       	lds	r17, 0x99
    32ec:	18 a2       	lds	r17, 0x98
}
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	08 95       	ret

000032f4 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    32f4:	ef 92       	push	r14
    32f6:	ff 92       	push	r15
    32f8:	0f 93       	push	r16
    32fa:	1f 93       	push	r17
    32fc:	cf 93       	push	r28
    32fe:	df 93       	push	r29
    3300:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3302:	66 23       	and	r22, r22
    3304:	99 f0       	breq	.+38     	; 0x332c <midi_device_input+0x38>
    3306:	04 2f       	mov	r16, r20
    3308:	15 2f       	mov	r17, r21
    330a:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    330c:	0f 2e       	mov	r0, r31
    330e:	f8 ee       	ldi	r31, 0xE8	; 232
    3310:	ef 2e       	mov	r14, r31
    3312:	ff 24       	eor	r15, r15
    3314:	f0 2d       	mov	r31, r0
    3316:	e8 0e       	add	r14, r24
    3318:	f9 1e       	adc	r15, r25
    331a:	f8 01       	movw	r30, r16
    331c:	61 91       	ld	r22, Z+
    331e:	8f 01       	movw	r16, r30
    3320:	c7 01       	movw	r24, r14
    3322:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3326:	cf 5f       	subi	r28, 0xFF	; 255
    3328:	cd 17       	cp	r28, r29
    332a:	b9 f7       	brne	.-18     	; 0x331a <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    332c:	df 91       	pop	r29
    332e:	cf 91       	pop	r28
    3330:	1f 91       	pop	r17
    3332:	0f 91       	pop	r16
    3334:	ff 90       	pop	r15
    3336:	ef 90       	pop	r14
    3338:	08 95       	ret

0000333a <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    333a:	fc 01       	movw	r30, r24
    333c:	71 83       	std	Z+1, r23	; 0x01
    333e:	60 83       	st	Z, r22
}
    3340:	08 95       	ret

00003342 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    3342:	fc 01       	movw	r30, r24
    3344:	71 a3       	lds	r23, 0x51
    3346:	60 a3       	lds	r22, 0x50
}
    3348:	08 95       	ret

0000334a <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    334a:	af 92       	push	r10
    334c:	bf 92       	push	r11
    334e:	cf 92       	push	r12
    3350:	df 92       	push	r13
    3352:	ef 92       	push	r14
    3354:	ff 92       	push	r15
    3356:	0f 93       	push	r16
    3358:	1f 93       	push	r17
    335a:	cf 93       	push	r28
    335c:	df 93       	push	r29
    335e:	00 d0       	rcall	.+0      	; 0x3360 <midi_input_callbacks+0x16>
    3360:	0f 92       	push	r0
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	6c 01       	movw	r12, r24
    3368:	5b 01       	movw	r10, r22
    336a:	f4 2e       	mov	r15, r20
    336c:	e2 2e       	mov	r14, r18
    336e:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    3370:	dc 01       	movw	r26, r24
    3372:	95 96       	adiw	r26, 0x25	; 37
    3374:	8c 91       	ld	r24, X
    3376:	95 97       	sbiw	r26, 0x25	; 37
    3378:	84 30       	cpi	r24, 0x04	; 4
    337a:	e9 f4       	brne	.+58     	; 0x33b6 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    337c:	5a 96       	adiw	r26, 0x1a	; 26
    337e:	ed 91       	ld	r30, X+
    3380:	fc 91       	ld	r31, X
    3382:	5b 97       	sbiw	r26, 0x1b	; 27
    3384:	30 97       	sbiw	r30, 0x00	; 0
    3386:	09 f4       	brne	.+2      	; 0x338a <midi_input_callbacks+0x40>
    3388:	ee c0       	rjmp	.+476    	; 0x3566 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    338a:	cb 01       	movw	r24, r22
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	63 e0       	ldi	r22, 0x03	; 3
    3390:	70 e0       	ldi	r23, 0x00	; 0
    3392:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodhi4>
    3396:	cb 01       	movw	r24, r22
    3398:	88 0f       	add	r24, r24
    339a:	99 1f       	adc	r25, r25
    339c:	68 0f       	add	r22, r24
    339e:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    33a0:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    33a2:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    33a4:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    33a6:	4a 2d       	mov	r20, r10
    33a8:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    33aa:	c6 01       	movw	r24, r12
    33ac:	9e 01       	movw	r18, r28
    33ae:	2f 5f       	subi	r18, 0xFF	; 255
    33b0:	3f 4f       	sbci	r19, 0xFF	; 255
    33b2:	09 95       	icall
    33b4:	c8 c0       	rjmp	.+400    	; 0x3546 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    33b6:	62 30       	cpi	r22, 0x02	; 2
    33b8:	71 05       	cpc	r23, r1
    33ba:	09 f4       	brne	.+2      	; 0x33be <midi_input_callbacks+0x74>
    33bc:	5f c0       	rjmp	.+190    	; 0x347c <midi_input_callbacks+0x132>
    33be:	63 30       	cpi	r22, 0x03	; 3
    33c0:	71 05       	cpc	r23, r1
    33c2:	29 f0       	breq	.+10     	; 0x33ce <midi_input_callbacks+0x84>
    33c4:	61 30       	cpi	r22, 0x01	; 1
    33c6:	71 05       	cpc	r23, r1
    33c8:	09 f0       	breq	.+2      	; 0x33cc <midi_input_callbacks+0x82>
    33ca:	b3 c0       	rjmp	.+358    	; 0x3532 <midi_input_callbacks+0x1e8>
    33cc:	99 c0       	rjmp	.+306    	; 0x3500 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    33ce:	84 2f       	mov	r24, r20
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	80 7f       	andi	r24, 0xF0	; 240
    33d4:	90 70       	andi	r25, 0x00	; 0
    33d6:	80 3a       	cpi	r24, 0xA0	; 160
    33d8:	91 05       	cpc	r25, r1
    33da:	29 f1       	breq	.+74     	; 0x3426 <midi_input_callbacks+0xdc>
    33dc:	81 3a       	cpi	r24, 0xA1	; 161
    33de:	91 05       	cpc	r25, r1
    33e0:	3c f4       	brge	.+14     	; 0x33f0 <midi_input_callbacks+0xa6>
    33e2:	80 38       	cpi	r24, 0x80	; 128
    33e4:	91 05       	cpc	r25, r1
    33e6:	c9 f0       	breq	.+50     	; 0x341a <midi_input_callbacks+0xd0>
    33e8:	80 39       	cpi	r24, 0x90	; 144
    33ea:	91 05       	cpc	r25, r1
    33ec:	91 f5       	brne	.+100    	; 0x3452 <midi_input_callbacks+0x108>
    33ee:	0f c0       	rjmp	.+30     	; 0x340e <midi_input_callbacks+0xc4>
    33f0:	80 3e       	cpi	r24, 0xE0	; 224
    33f2:	91 05       	cpc	r25, r1
    33f4:	f1 f0       	breq	.+60     	; 0x3432 <midi_input_callbacks+0xe8>
    33f6:	80 3f       	cpi	r24, 0xF0	; 240
    33f8:	91 05       	cpc	r25, r1
    33fa:	09 f1       	breq	.+66     	; 0x343e <midi_input_callbacks+0xf4>
    33fc:	80 3b       	cpi	r24, 0xB0	; 176
    33fe:	91 05       	cpc	r25, r1
    3400:	41 f5       	brne	.+80     	; 0x3452 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    3402:	d6 01       	movw	r26, r12
    3404:	12 96       	adiw	r26, 0x02	; 2
    3406:	ed 91       	ld	r30, X+
    3408:	fc 91       	ld	r31, X
    340a:	13 97       	sbiw	r26, 0x03	; 3
              break;
    340c:	24 c0       	rjmp	.+72     	; 0x3456 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    340e:	d6 01       	movw	r26, r12
    3410:	14 96       	adiw	r26, 0x04	; 4
    3412:	ed 91       	ld	r30, X+
    3414:	fc 91       	ld	r31, X
    3416:	15 97       	sbiw	r26, 0x05	; 5
              break;
    3418:	1e c0       	rjmp	.+60     	; 0x3456 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    341a:	d6 01       	movw	r26, r12
    341c:	16 96       	adiw	r26, 0x06	; 6
    341e:	ed 91       	ld	r30, X+
    3420:	fc 91       	ld	r31, X
    3422:	17 97       	sbiw	r26, 0x07	; 7
              break;
    3424:	18 c0       	rjmp	.+48     	; 0x3456 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    3426:	d6 01       	movw	r26, r12
    3428:	18 96       	adiw	r26, 0x08	; 8
    342a:	ed 91       	ld	r30, X+
    342c:	fc 91       	ld	r31, X
    342e:	19 97       	sbiw	r26, 0x09	; 9
              break;
    3430:	12 c0       	rjmp	.+36     	; 0x3456 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    3432:	d6 01       	movw	r26, r12
    3434:	1a 96       	adiw	r26, 0x0a	; 10
    3436:	ed 91       	ld	r30, X+
    3438:	fc 91       	ld	r31, X
    343a:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    343c:	0c c0       	rjmp	.+24     	; 0x3456 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    343e:	b2 ef       	ldi	r27, 0xF2	; 242
    3440:	4b 17       	cp	r20, r27
    3442:	09 f0       	breq	.+2      	; 0x3446 <midi_input_callbacks+0xfc>
    3444:	90 c0       	rjmp	.+288    	; 0x3566 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    3446:	d6 01       	movw	r26, r12
    3448:	1c 96       	adiw	r26, 0x0c	; 12
    344a:	ed 91       	ld	r30, X+
    344c:	fc 91       	ld	r31, X
    344e:	1d 97       	sbiw	r26, 0x0d	; 13
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    3452:	e0 e0       	ldi	r30, 0x00	; 0
    3454:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    3456:	30 97       	sbiw	r30, 0x00	; 0
    3458:	09 f4       	brne	.+2      	; 0x345c <midi_input_callbacks+0x112>
    345a:	85 c0       	rjmp	.+266    	; 0x3566 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    345c:	b2 ef       	ldi	r27, 0xF2	; 242
    345e:	fb 16       	cp	r15, r27
    3460:	31 f4       	brne	.+12     	; 0x346e <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    3462:	c6 01       	movw	r24, r12
    3464:	62 ef       	ldi	r22, 0xF2	; 242
    3466:	4e 2d       	mov	r20, r14
    3468:	21 2f       	mov	r18, r17
    346a:	09 95       	icall
    346c:	6c c0       	rjmp	.+216    	; 0x3546 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    346e:	6f 2d       	mov	r22, r15
    3470:	6f 70       	andi	r22, 0x0F	; 15
    3472:	c6 01       	movw	r24, r12
    3474:	4e 2d       	mov	r20, r14
    3476:	21 2f       	mov	r18, r17
    3478:	09 95       	icall
    347a:	65 c0       	rjmp	.+202    	; 0x3546 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    347c:	84 2f       	mov	r24, r20
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	80 7f       	andi	r24, 0xF0	; 240
    3482:	90 70       	andi	r25, 0x00	; 0
    3484:	80 3d       	cpi	r24, 0xD0	; 208
    3486:	91 05       	cpc	r25, r1
    3488:	61 f0       	breq	.+24     	; 0x34a2 <midi_input_callbacks+0x158>
    348a:	80 3f       	cpi	r24, 0xF0	; 240
    348c:	91 05       	cpc	r25, r1
    348e:	79 f0       	breq	.+30     	; 0x34ae <midi_input_callbacks+0x164>
    3490:	80 3c       	cpi	r24, 0xC0	; 192
    3492:	91 05       	cpc	r25, r1
    3494:	f9 f4       	brne	.+62     	; 0x34d4 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    3496:	d6 01       	movw	r26, r12
    3498:	1e 96       	adiw	r26, 0x0e	; 14
    349a:	ed 91       	ld	r30, X+
    349c:	fc 91       	ld	r31, X
    349e:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    34a0:	1b c0       	rjmp	.+54     	; 0x34d8 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    34a2:	d6 01       	movw	r26, r12
    34a4:	50 96       	adiw	r26, 0x10	; 16
    34a6:	ed 91       	ld	r30, X+
    34a8:	fc 91       	ld	r31, X
    34aa:	51 97       	sbiw	r26, 0x11	; 17
              break;
    34ac:	15 c0       	rjmp	.+42     	; 0x34d8 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    34ae:	b3 ef       	ldi	r27, 0xF3	; 243
    34b0:	4b 17       	cp	r20, r27
    34b2:	31 f4       	brne	.+12     	; 0x34c0 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    34b4:	d6 01       	movw	r26, r12
    34b6:	52 96       	adiw	r26, 0x12	; 18
    34b8:	ed 91       	ld	r30, X+
    34ba:	fc 91       	ld	r31, X
    34bc:	53 97       	sbiw	r26, 0x13	; 19
    34be:	0c c0       	rjmp	.+24     	; 0x34d8 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    34c0:	b1 ef       	ldi	r27, 0xF1	; 241
    34c2:	4b 17       	cp	r20, r27
    34c4:	09 f0       	breq	.+2      	; 0x34c8 <midi_input_callbacks+0x17e>
    34c6:	4f c0       	rjmp	.+158    	; 0x3566 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    34c8:	d6 01       	movw	r26, r12
    34ca:	54 96       	adiw	r26, 0x14	; 20
    34cc:	ed 91       	ld	r30, X+
    34ce:	fc 91       	ld	r31, X
    34d0:	55 97       	sbiw	r26, 0x15	; 21
    34d2:	02 c0       	rjmp	.+4      	; 0x34d8 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    34d4:	e0 e0       	ldi	r30, 0x00	; 0
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    34d8:	30 97       	sbiw	r30, 0x00	; 0
    34da:	09 f4       	brne	.+2      	; 0x34de <midi_input_callbacks+0x194>
    34dc:	44 c0       	rjmp	.+136    	; 0x3566 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    34de:	b3 ef       	ldi	r27, 0xF3	; 243
    34e0:	fb 16       	cp	r15, r27
    34e2:	19 f0       	breq	.+6      	; 0x34ea <midi_input_callbacks+0x1a0>
    34e4:	81 ef       	ldi	r24, 0xF1	; 241
    34e6:	f8 16       	cp	r15, r24
    34e8:	29 f4       	brne	.+10     	; 0x34f4 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    34ea:	c6 01       	movw	r24, r12
    34ec:	6f 2d       	mov	r22, r15
    34ee:	4e 2d       	mov	r20, r14
    34f0:	09 95       	icall
    34f2:	29 c0       	rjmp	.+82     	; 0x3546 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    34f4:	6f 2d       	mov	r22, r15
    34f6:	6f 70       	andi	r22, 0x0F	; 15
    34f8:	c6 01       	movw	r24, r12
    34fa:	4e 2d       	mov	r20, r14
    34fc:	09 95       	icall
    34fe:	23 c0       	rjmp	.+70     	; 0x3546 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    3500:	84 2f       	mov	r24, r20
    3502:	0e 94 42 17 	call	0x2e84	; 0x2e84 <midi_is_realtime>
    3506:	88 23       	and	r24, r24
    3508:	31 f0       	breq	.+12     	; 0x3516 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    350a:	d6 01       	movw	r26, r12
    350c:	56 96       	adiw	r26, 0x16	; 22
    350e:	ed 91       	ld	r30, X+
    3510:	fc 91       	ld	r31, X
    3512:	57 97       	sbiw	r26, 0x17	; 23
    3514:	08 c0       	rjmp	.+16     	; 0x3526 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    3516:	b6 ef       	ldi	r27, 0xF6	; 246
    3518:	fb 16       	cp	r15, r27
    351a:	29 f5       	brne	.+74     	; 0x3566 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    351c:	d6 01       	movw	r26, r12
    351e:	58 96       	adiw	r26, 0x18	; 24
    3520:	ed 91       	ld	r30, X+
    3522:	fc 91       	ld	r31, X
    3524:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    3526:	30 97       	sbiw	r30, 0x00	; 0
    3528:	f1 f0       	breq	.+60     	; 0x3566 <midi_input_callbacks+0x21c>
            func(device, byte0);
    352a:	c6 01       	movw	r24, r12
    352c:	6f 2d       	mov	r22, r15
    352e:	09 95       	icall
    3530:	0a c0       	rjmp	.+20     	; 0x3546 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    3532:	64 30       	cpi	r22, 0x04	; 4
    3534:	71 05       	cpc	r23, r1
    3536:	a8 f4       	brcc	.+42     	; 0x3562 <midi_input_callbacks+0x218>
    3538:	16 c0       	rjmp	.+44     	; 0x3566 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    353a:	c6 01       	movw	r24, r12
    353c:	b5 01       	movw	r22, r10
    353e:	4f 2d       	mov	r20, r15
    3540:	2e 2d       	mov	r18, r14
    3542:	01 2f       	mov	r16, r17
    3544:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    3546:	d6 01       	movw	r26, r12
    3548:	5e 96       	adiw	r26, 0x1e	; 30
    354a:	ed 91       	ld	r30, X+
    354c:	fc 91       	ld	r31, X
    354e:	5f 97       	sbiw	r26, 0x1f	; 31
    3550:	30 97       	sbiw	r30, 0x00	; 0
    3552:	89 f0       	breq	.+34     	; 0x3576 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    3554:	c6 01       	movw	r24, r12
    3556:	b5 01       	movw	r22, r10
    3558:	4f 2d       	mov	r20, r15
    355a:	2e 2d       	mov	r18, r14
    355c:	01 2f       	mov	r16, r17
    355e:	09 95       	icall
    3560:	0a c0       	rjmp	.+20     	; 0x3576 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    3562:	aa 24       	eor	r10, r10
    3564:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    3566:	d6 01       	movw	r26, r12
    3568:	5c 96       	adiw	r26, 0x1c	; 28
    356a:	ed 91       	ld	r30, X+
    356c:	fc 91       	ld	r31, X
    356e:	5d 97       	sbiw	r26, 0x1d	; 29
    3570:	30 97       	sbiw	r30, 0x00	; 0
    3572:	19 f7       	brne	.-58     	; 0x353a <midi_input_callbacks+0x1f0>
    3574:	e8 cf       	rjmp	.-48     	; 0x3546 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    3576:	0f 90       	pop	r0
    3578:	0f 90       	pop	r0
    357a:	0f 90       	pop	r0
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	ff 90       	pop	r15
    3586:	ef 90       	pop	r14
    3588:	df 90       	pop	r13
    358a:	cf 90       	pop	r12
    358c:	bf 90       	pop	r11
    358e:	af 90       	pop	r10
    3590:	08 95       	ret

00003592 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    3592:	ef 92       	push	r14
    3594:	ff 92       	push	r15
    3596:	0f 93       	push	r16
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	7c 01       	movw	r14, r24
    359e:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    35a0:	86 2f       	mov	r24, r22
    35a2:	0e 94 42 17 	call	0x2e84	; 0x2e84 <midi_is_realtime>
    35a6:	88 23       	and	r24, r24
    35a8:	91 f0       	breq	.+36     	; 0x35ce <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    35aa:	d7 01       	movw	r26, r14
    35ac:	95 96       	adiw	r26, 0x25	; 37
    35ae:	dc 91       	ld	r29, X
    35b0:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	95 96       	adiw	r26, 0x25	; 37
    35b6:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    35b8:	c7 01       	movw	r24, r14
    35ba:	61 e0       	ldi	r22, 0x01	; 1
    35bc:	70 e0       	ldi	r23, 0x00	; 0
    35be:	4c 2f       	mov	r20, r28
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	00 e0       	ldi	r16, 0x00	; 0
    35c4:	0e 94 a5 19 	call	0x334a	; 0x334a <midi_input_callbacks>
    device->input_state = state;
    35c8:	f7 01       	movw	r30, r14
    35ca:	d5 a3       	lds	r29, 0x55
    35cc:	b7 c0       	rjmp	.+366    	; 0x373c <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    35ce:	8c 2f       	mov	r24, r28
    35d0:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <midi_is_statusbyte>
    35d4:	88 23       	and	r24, r24
    35d6:	09 f4       	brne	.+2      	; 0x35da <midi_process_byte+0x48>
    35d8:	73 c0       	rjmp	.+230    	; 0x36c0 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    35da:	d7 01       	movw	r26, r14
    35dc:	95 96       	adiw	r26, 0x25	; 37
    35de:	8c 91       	ld	r24, X
    35e0:	95 97       	sbiw	r26, 0x25	; 37
    35e2:	84 30       	cpi	r24, 0x04	; 4
    35e4:	49 f0       	breq	.+18     	; 0x35f8 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    35e6:	92 96       	adiw	r26, 0x22	; 34
    35e8:	cc 93       	st	X, r28
    35ea:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	97 96       	adiw	r26, 0x27	; 39
    35f2:	9c 93       	st	X, r25
    35f4:	8e 93       	st	-X, r24
    35f6:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    35f8:	8c 2f       	mov	r24, r28
    35fa:	0e 94 48 17 	call	0x2e90	; 0x2e90 <midi_packet_length>
    35fe:	81 30       	cpi	r24, 0x01	; 1
    3600:	41 f0       	breq	.+16     	; 0x3612 <midi_process_byte+0x80>
    3602:	81 30       	cpi	r24, 0x01	; 1
    3604:	00 f1       	brcs	.+64     	; 0x3646 <midi_process_byte+0xb4>
    3606:	82 30       	cpi	r24, 0x02	; 2
    3608:	a1 f0       	breq	.+40     	; 0x3632 <midi_process_byte+0xa0>
    360a:	83 30       	cpi	r24, 0x03	; 3
    360c:	09 f0       	breq	.+2      	; 0x3610 <midi_process_byte+0x7e>
    360e:	4f c0       	rjmp	.+158    	; 0x36ae <midi_process_byte+0x11c>
    3610:	14 c0       	rjmp	.+40     	; 0x363a <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	f7 01       	movw	r30, r14
    3616:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3618:	c7 01       	movw	r24, r14
    361a:	61 e0       	ldi	r22, 0x01	; 1
    361c:	70 e0       	ldi	r23, 0x00	; 0
    361e:	4c 2f       	mov	r20, r28
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	00 e0       	ldi	r16, 0x00	; 0
    3624:	0e 94 a5 19 	call	0x334a	; 0x334a <midi_input_callbacks>
        device->input_state = IDLE;
    3628:	d7 01       	movw	r26, r14
    362a:	95 96       	adiw	r26, 0x25	; 37
    362c:	1c 92       	st	X, r1
    362e:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3630:	85 c0       	rjmp	.+266    	; 0x373c <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    3632:	82 e0       	ldi	r24, 0x02	; 2
    3634:	f7 01       	movw	r30, r14
    3636:	85 a3       	lds	r24, 0x55
        break;
    3638:	81 c0       	rjmp	.+258    	; 0x373c <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    363a:	83 e0       	ldi	r24, 0x03	; 3
    363c:	d7 01       	movw	r26, r14
    363e:	95 96       	adiw	r26, 0x25	; 37
    3640:	8c 93       	st	X, r24
    3642:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3644:	7b c0       	rjmp	.+246    	; 0x373c <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    3646:	c0 3f       	cpi	r28, 0xF0	; 240
    3648:	19 f0       	breq	.+6      	; 0x3650 <midi_process_byte+0xbe>
    364a:	c7 3f       	cpi	r28, 0xF7	; 247
    364c:	59 f5       	brne	.+86     	; 0x36a4 <midi_process_byte+0x112>
    364e:	0a c0       	rjmp	.+20     	; 0x3664 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    3650:	84 e0       	ldi	r24, 0x04	; 4
    3652:	f7 01       	movw	r30, r14
    3654:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    3656:	80 ef       	ldi	r24, 0xF0	; 240
    3658:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	97 a3       	lds	r25, 0x57
    3660:	86 a3       	lds	r24, 0x56
            break;
    3662:	6c c0       	rjmp	.+216    	; 0x373c <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    3664:	d7 01       	movw	r26, r14
    3666:	96 96       	adiw	r26, 0x26	; 38
    3668:	2d 91       	ld	r18, X+
    366a:	3c 91       	ld	r19, X
    366c:	97 97       	sbiw	r26, 0x27	; 39
    366e:	c9 01       	movw	r24, r18
    3670:	63 e0       	ldi	r22, 0x03	; 3
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodhi4>
    3678:	f7 01       	movw	r30, r14
    367a:	e8 0f       	add	r30, r24
    367c:	f9 1f       	adc	r31, r25
    367e:	87 ef       	ldi	r24, 0xF7	; 247
    3680:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    3682:	b9 01       	movw	r22, r18
    3684:	6f 5f       	subi	r22, 0xFF	; 255
    3686:	7f 4f       	sbci	r23, 0xFF	; 255
    3688:	f7 01       	movw	r30, r14
    368a:	77 a3       	lds	r23, 0x57
    368c:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    368e:	c7 01       	movw	r24, r14
    3690:	42 a1       	lds	r20, 0x42
    3692:	23 a1       	lds	r18, 0x43
    3694:	04 a1       	lds	r16, 0x44
    3696:	0e 94 a5 19 	call	0x334a	; 0x334a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    369a:	d7 01       	movw	r26, r14
    369c:	95 96       	adiw	r26, 0x25	; 37
    369e:	1c 92       	st	X, r1
    36a0:	95 97       	sbiw	r26, 0x25	; 37
            break;
    36a2:	4c c0       	rjmp	.+152    	; 0x373c <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    36a4:	f7 01       	movw	r30, r14
    36a6:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    36a8:	17 a2       	lds	r17, 0x97
    36aa:	16 a2       	lds	r17, 0x96
    36ac:	47 c0       	rjmp	.+142    	; 0x373c <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    36ae:	d7 01       	movw	r26, r14
    36b0:	95 96       	adiw	r26, 0x25	; 37
    36b2:	1c 92       	st	X, r1
    36b4:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    36b6:	97 96       	adiw	r26, 0x27	; 39
    36b8:	1c 92       	st	X, r1
    36ba:	1e 92       	st	-X, r1
    36bc:	96 97       	sbiw	r26, 0x26	; 38
        break;
    36be:	3e c0       	rjmp	.+124    	; 0x373c <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    36c0:	f7 01       	movw	r30, r14
    36c2:	25 a1       	lds	r18, 0x45
    36c4:	22 23       	and	r18, r18
    36c6:	d1 f1       	breq	.+116    	; 0x373c <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    36c8:	06 a0       	lds	r16, 0x86
    36ca:	f7 a1       	lds	r31, 0x47
    36cc:	e0 2d       	mov	r30, r0
    36ce:	cf 01       	movw	r24, r30
    36d0:	63 e0       	ldi	r22, 0x03	; 3
    36d2:	70 e0       	ldi	r23, 0x00	; 0
    36d4:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodhi4>
    36d8:	ac 01       	movw	r20, r24
    36da:	8e 0d       	add	r24, r14
    36dc:	9f 1d       	adc	r25, r15
    36de:	dc 01       	movw	r26, r24
    36e0:	92 96       	adiw	r26, 0x22	; 34
    36e2:	cc 93       	st	X, r28
    36e4:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    36e6:	bf 01       	movw	r22, r30
    36e8:	6f 5f       	subi	r22, 0xFF	; 255
    36ea:	7f 4f       	sbci	r23, 0xFF	; 255
    36ec:	f7 01       	movw	r30, r14
    36ee:	77 a3       	lds	r23, 0x57
    36f0:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    36f2:	41 30       	cpi	r20, 0x01	; 1
    36f4:	51 05       	cpc	r21, r1
    36f6:	91 f0       	breq	.+36     	; 0x371c <midi_process_byte+0x18a>
    36f8:	42 30       	cpi	r20, 0x02	; 2
    36fa:	51 05       	cpc	r21, r1
    36fc:	f9 f4       	brne	.+62     	; 0x373c <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    36fe:	c7 01       	movw	r24, r14
    3700:	42 a1       	lds	r20, 0x42
    3702:	23 a1       	lds	r18, 0x43
    3704:	04 a1       	lds	r16, 0x44
    3706:	0e 94 a5 19 	call	0x334a	; 0x334a <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    370a:	f7 01       	movw	r30, r14
    370c:	85 a1       	lds	r24, 0x45
    370e:	84 30       	cpi	r24, 0x04	; 4
    3710:	a9 f0       	breq	.+42     	; 0x373c <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	97 a3       	lds	r25, 0x57
    3718:	86 a3       	lds	r24, 0x56
    371a:	10 c0       	rjmp	.+32     	; 0x373c <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    371c:	22 30       	cpi	r18, 0x02	; 2
    371e:	71 f4       	brne	.+28     	; 0x373c <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3720:	c7 01       	movw	r24, r14
    3722:	42 a1       	lds	r20, 0x42
    3724:	23 a1       	lds	r18, 0x43
    3726:	00 e0       	ldi	r16, 0x00	; 0
    3728:	0e 94 a5 19 	call	0x334a	; 0x334a <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    372c:	f7 01       	movw	r30, r14
    372e:	85 a1       	lds	r24, 0x45
    3730:	84 30       	cpi	r24, 0x04	; 4
    3732:	21 f0       	breq	.+8      	; 0x373c <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	97 a3       	lds	r25, 0x57
    373a:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    373c:	df 91       	pop	r29
    373e:	cf 91       	pop	r28
    3740:	0f 91       	pop	r16
    3742:	ff 90       	pop	r15
    3744:	ef 90       	pop	r14
    3746:	08 95       	ret

00003748 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    3748:	cf 92       	push	r12
    374a:	df 92       	push	r13
    374c:	ef 92       	push	r14
    374e:	ff 92       	push	r15
    3750:	0f 93       	push	r16
    3752:	1f 93       	push	r17
    3754:	cf 93       	push	r28
    3756:	df 93       	push	r29
    3758:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    375a:	dc 01       	movw	r26, r24
    375c:	90 96       	adiw	r26, 0x20	; 32
    375e:	ed 91       	ld	r30, X+
    3760:	fc 91       	ld	r31, X
    3762:	91 97       	sbiw	r26, 0x21	; 33
    3764:	30 97       	sbiw	r30, 0x00	; 0
    3766:	09 f0       	breq	.+2      	; 0x376a <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    3768:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    376a:	0f 2e       	mov	r0, r31
    376c:	f8 ee       	ldi	r31, 0xE8	; 232
    376e:	ef 2e       	mov	r14, r31
    3770:	ff 24       	eor	r15, r15
    3772:	f0 2d       	mov	r31, r0
    3774:	ec 0c       	add	r14, r12
    3776:	fd 1c       	adc	r15, r13
    3778:	c7 01       	movw	r24, r14
    377a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    377e:	c8 2f       	mov	r28, r24
    3780:	d0 e0       	ldi	r29, 0x00	; 0
    3782:	20 97       	sbiw	r28, 0x00	; 0
    3784:	99 f0       	breq	.+38     	; 0x37ac <midi_device_process+0x64>
    3786:	00 e0       	ldi	r16, 0x00	; 0
    3788:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    378a:	c7 01       	movw	r24, r14
    378c:	60 e0       	ldi	r22, 0x00	; 0
    378e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <bytequeue_get>
    3792:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    3794:	c6 01       	movw	r24, r12
    3796:	0e 94 c9 1a 	call	0x3592	; 0x3592 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    379a:	c7 01       	movw	r24, r14
    379c:	61 e0       	ldi	r22, 0x01	; 1
    379e:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    37a2:	0f 5f       	subi	r16, 0xFF	; 255
    37a4:	1f 4f       	sbci	r17, 0xFF	; 255
    37a6:	0c 17       	cp	r16, r28
    37a8:	1d 07       	cpc	r17, r29
    37aa:	78 f3       	brcs	.-34     	; 0x378a <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	1f 91       	pop	r17
    37b2:	0f 91       	pop	r16
    37b4:	ff 90       	pop	r15
    37b6:	ef 90       	pop	r14
    37b8:	df 90       	pop	r13
    37ba:	cf 90       	pop	r12
    37bc:	08 95       	ret

000037be <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    37be:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    37c0:	67 e0       	ldi	r22, 0x07	; 7
    37c2:	70 e0       	ldi	r23, 0x00	; 0
    37c4:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodhi4>
    37c8:	48 2f       	mov	r20, r24
   if (remainder)
    37ca:	88 23       	and	r24, r24
    37cc:	81 f0       	breq	.+32     	; 0x37ee <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    37ce:	c9 01       	movw	r24, r18
    37d0:	67 e0       	ldi	r22, 0x07	; 7
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodhi4>
    37d8:	cb 01       	movw	r24, r22
    37da:	88 0f       	add	r24, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	88 0f       	add	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	88 0f       	add	r24, r24
    37e4:	99 1f       	adc	r25, r25
    37e6:	01 96       	adiw	r24, 0x01	; 1
    37e8:	84 0f       	add	r24, r20
    37ea:	91 1d       	adc	r25, r1
    37ec:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    37ee:	c9 01       	movw	r24, r18
    37f0:	67 e0       	ldi	r22, 0x07	; 7
    37f2:	70 e0       	ldi	r23, 0x00	; 0
    37f4:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodhi4>
    37f8:	cb 01       	movw	r24, r22
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	88 0f       	add	r24, r24
    3800:	99 1f       	adc	r25, r25
    3802:	88 0f       	add	r24, r24
    3804:	99 1f       	adc	r25, r25
}
    3806:	08 95       	ret

00003808 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3808:	48 2f       	mov	r20, r24
    380a:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    380c:	a1 f0       	breq	.+40     	; 0x3836 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    380e:	9c 01       	movw	r18, r24
    3810:	36 95       	lsr	r19
    3812:	27 95       	ror	r18
    3814:	36 95       	lsr	r19
    3816:	27 95       	ror	r18
    3818:	36 95       	lsr	r19
    381a:	27 95       	ror	r18
    381c:	c9 01       	movw	r24, r18
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	88 0f       	add	r24, r24
    3828:	99 1f       	adc	r25, r25
    382a:	82 1b       	sub	r24, r18
    382c:	93 0b       	sbc	r25, r19
    382e:	01 97       	sbiw	r24, 0x01	; 1
    3830:	84 0f       	add	r24, r20
    3832:	91 1d       	adc	r25, r1
    3834:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    3836:	9c 01       	movw	r18, r24
    3838:	36 95       	lsr	r19
    383a:	27 95       	ror	r18
    383c:	36 95       	lsr	r19
    383e:	27 95       	ror	r18
    3840:	36 95       	lsr	r19
    3842:	27 95       	ror	r18
    3844:	c9 01       	movw	r24, r18
    3846:	88 0f       	add	r24, r24
    3848:	99 1f       	adc	r25, r25
    384a:	88 0f       	add	r24, r24
    384c:	99 1f       	adc	r25, r25
    384e:	88 0f       	add	r24, r24
    3850:	99 1f       	adc	r25, r25
    3852:	82 1b       	sub	r24, r18
    3854:	93 0b       	sbc	r25, r19
}
    3856:	08 95       	ret

00003858 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3858:	2f 92       	push	r2
    385a:	3f 92       	push	r3
    385c:	4f 92       	push	r4
    385e:	5f 92       	push	r5
    3860:	6f 92       	push	r6
    3862:	7f 92       	push	r7
    3864:	8f 92       	push	r8
    3866:	9f 92       	push	r9
    3868:	af 92       	push	r10
    386a:	bf 92       	push	r11
    386c:	cf 92       	push	r12
    386e:	df 92       	push	r13
    3870:	ef 92       	push	r14
    3872:	ff 92       	push	r15
    3874:	0f 93       	push	r16
    3876:	1f 93       	push	r17
    3878:	cf 93       	push	r28
    387a:	df 93       	push	r29
    387c:	00 d0       	rcall	.+0      	; 0x387e <sysex_encode+0x26>
    387e:	00 d0       	rcall	.+0      	; 0x3880 <sysex_encode+0x28>
    3880:	00 d0       	rcall	.+0      	; 0x3882 <sysex_encode+0x2a>
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	1c 01       	movw	r2, r24
    3888:	7a 83       	std	Y+2, r23	; 0x02
    388a:	69 83       	std	Y+1, r22	; 0x01
    388c:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    388e:	ca 01       	movw	r24, r20
    3890:	67 e0       	ldi	r22, 0x07	; 7
    3892:	70 e0       	ldi	r23, 0x00	; 0
    3894:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodhi4>
    3898:	2b 01       	movw	r4, r22
    389a:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    389c:	61 15       	cp	r22, r1
    389e:	71 05       	cpc	r23, r1
    38a0:	b1 f1       	breq	.+108    	; 0x390e <sysex_encode+0xb6>
    38a2:	81 01       	movw	r16, r2
    38a4:	e9 80       	ldd	r14, Y+1	; 0x01
    38a6:	fa 80       	ldd	r15, Y+2	; 0x02
    38a8:	cc 24       	eor	r12, r12
    38aa:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38ac:	88 24       	eor	r8, r8
    38ae:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    38b0:	1e 83       	std	Y+6, r17	; 0x06
    38b2:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    38b4:	f8 01       	movw	r30, r16
    38b6:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    38b8:	fc 82       	std	Y+4, r15	; 0x04
    38ba:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38bc:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    38be:	ab 81       	ldd	r26, Y+3	; 0x03
    38c0:	bc 81       	ldd	r27, Y+4	; 0x04
    38c2:	2d 91       	ld	r18, X+
    38c4:	bc 83       	std	Y+4, r27	; 0x04
    38c6:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    38c8:	4f 5f       	subi	r20, 0xFF	; 255
    38ca:	5f 4f       	sbci	r21, 0xFF	; 255
    38cc:	82 2f       	mov	r24, r18
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	80 78       	andi	r24, 0x80	; 128
    38d2:	90 70       	andi	r25, 0x00	; 0
    38d4:	bc 01       	movw	r22, r24
    38d6:	04 2e       	mov	r0, r20
    38d8:	02 c0       	rjmp	.+4      	; 0x38de <sysex_encode+0x86>
    38da:	75 95       	asr	r23
    38dc:	67 95       	ror	r22
    38de:	0a 94       	dec	r0
    38e0:	e2 f7       	brpl	.-8      	; 0x38da <sysex_encode+0x82>
    38e2:	ad 81       	ldd	r26, Y+5	; 0x05
    38e4:	be 81       	ldd	r27, Y+6	; 0x06
    38e6:	8c 91       	ld	r24, X
    38e8:	86 2b       	or	r24, r22
    38ea:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    38ec:	2f 77       	andi	r18, 0x7F	; 127
    38ee:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38f0:	47 30       	cpi	r20, 0x07	; 7
    38f2:	51 05       	cpc	r21, r1
    38f4:	21 f7       	brne	.-56     	; 0x38be <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    38f6:	08 94       	sec
    38f8:	c1 1c       	adc	r12, r1
    38fa:	d1 1c       	adc	r13, r1
    38fc:	08 5f       	subi	r16, 0xF8	; 248
    38fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3900:	e7 e0       	ldi	r30, 0x07	; 7
    3902:	f0 e0       	ldi	r31, 0x00	; 0
    3904:	ee 0e       	add	r14, r30
    3906:	ff 1e       	adc	r15, r31
    3908:	ca 14       	cp	r12, r10
    390a:	db 04       	cpc	r13, r11
    390c:	89 f6       	brne	.-94     	; 0x38b0 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    390e:	c3 01       	movw	r24, r6
    3910:	67 e0       	ldi	r22, 0x07	; 7
    3912:	70 e0       	ldi	r23, 0x00	; 0
    3914:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodhi4>
   if (remainder) {
    3918:	88 23       	and	r24, r24
    391a:	d9 f1       	breq	.+118    	; 0x3992 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    391c:	82 01       	movw	r16, r4
    391e:	00 0f       	add	r16, r16
    3920:	11 1f       	adc	r17, r17
    3922:	00 0f       	add	r16, r16
    3924:	11 1f       	adc	r17, r17
    3926:	00 0f       	add	r16, r16
    3928:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    392a:	78 01       	movw	r14, r16
    392c:	e4 18       	sub	r14, r4
    392e:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3930:	d1 01       	movw	r26, r2
    3932:	a0 0f       	add	r26, r16
    3934:	b1 1f       	adc	r27, r17
    3936:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3938:	68 2f       	mov	r22, r24
    393a:	70 e0       	ldi	r23, 0x00	; 0
    393c:	61 15       	cp	r22, r1
    393e:	71 05       	cpc	r23, r1
    3940:	19 f1       	breq	.+70     	; 0x3988 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3942:	e9 81       	ldd	r30, Y+1	; 0x01
    3944:	fa 81       	ldd	r31, Y+2	; 0x02
    3946:	ee 0e       	add	r14, r30
    3948:	ff 1e       	adc	r15, r31
    394a:	c8 01       	movw	r24, r16
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	28 0e       	add	r2, r24
    3950:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    3956:	f7 01       	movw	r30, r14
    3958:	41 91       	ld	r20, Z+
    395a:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    395c:	2f 5f       	subi	r18, 0xFF	; 255
    395e:	3f 4f       	sbci	r19, 0xFF	; 255
    3960:	84 2f       	mov	r24, r20
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	80 78       	andi	r24, 0x80	; 128
    3966:	90 70       	andi	r25, 0x00	; 0
    3968:	02 2e       	mov	r0, r18
    396a:	02 c0       	rjmp	.+4      	; 0x3970 <sysex_encode+0x118>
    396c:	95 95       	asr	r25
    396e:	87 95       	ror	r24
    3970:	0a 94       	dec	r0
    3972:	e2 f7       	brpl	.-8      	; 0x396c <sysex_encode+0x114>
    3974:	9c 91       	ld	r25, X
    3976:	89 2b       	or	r24, r25
    3978:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    397a:	4f 77       	andi	r20, 0x7F	; 127
    397c:	f1 01       	movw	r30, r2
    397e:	41 93       	st	Z+, r20
    3980:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3982:	26 17       	cp	r18, r22
    3984:	37 07       	cpc	r19, r23
    3986:	38 f3       	brcs	.-50     	; 0x3956 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3988:	c8 01       	movw	r24, r16
    398a:	01 96       	adiw	r24, 0x01	; 1
    398c:	86 0f       	add	r24, r22
    398e:	97 1f       	adc	r25, r23
    3990:	07 c0       	rjmp	.+14     	; 0x39a0 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    3992:	c2 01       	movw	r24, r4
    3994:	88 0f       	add	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	88 0f       	add	r24, r24
    399a:	99 1f       	adc	r25, r25
    399c:	88 0f       	add	r24, r24
    399e:	99 1f       	adc	r25, r25
   }
}
    39a0:	26 96       	adiw	r28, 0x06	; 6
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    39b4:	ff 90       	pop	r15
    39b6:	ef 90       	pop	r14
    39b8:	df 90       	pop	r13
    39ba:	cf 90       	pop	r12
    39bc:	bf 90       	pop	r11
    39be:	af 90       	pop	r10
    39c0:	9f 90       	pop	r9
    39c2:	8f 90       	pop	r8
    39c4:	7f 90       	pop	r7
    39c6:	6f 90       	pop	r6
    39c8:	5f 90       	pop	r5
    39ca:	4f 90       	pop	r4
    39cc:	3f 90       	pop	r3
    39ce:	2f 90       	pop	r2
    39d0:	08 95       	ret

000039d2 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    39d2:	6f 92       	push	r6
    39d4:	7f 92       	push	r7
    39d6:	8f 92       	push	r8
    39d8:	9f 92       	push	r9
    39da:	af 92       	push	r10
    39dc:	bf 92       	push	r11
    39de:	cf 92       	push	r12
    39e0:	df 92       	push	r13
    39e2:	ef 92       	push	r14
    39e4:	ff 92       	push	r15
    39e6:	0f 93       	push	r16
    39e8:	1f 93       	push	r17
    39ea:	cf 93       	push	r28
    39ec:	df 93       	push	r29
    39ee:	3c 01       	movw	r6, r24
    39f0:	4b 01       	movw	r8, r22
    39f2:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    39f4:	42 30       	cpi	r20, 0x02	; 2
    39f6:	51 05       	cpc	r21, r1
    39f8:	08 f4       	brcc	.+2      	; 0x39fc <sysex_decode+0x2a>
    39fa:	6f c0       	rjmp	.+222    	; 0x3ada <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    39fc:	7a 01       	movw	r14, r20
    39fe:	f6 94       	lsr	r15
    3a00:	e7 94       	ror	r14
    3a02:	f6 94       	lsr	r15
    3a04:	e7 94       	ror	r14
    3a06:	f6 94       	lsr	r15
    3a08:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3a0a:	e1 14       	cp	r14, r1
    3a0c:	f1 04       	cpc	r15, r1
    3a0e:	29 f1       	breq	.+74     	; 0x3a5a <sysex_decode+0x88>
    3a10:	eb 01       	movw	r28, r22
    3a12:	b3 01       	movw	r22, r6
    3a14:	00 e0       	ldi	r16, 0x00	; 0
    3a16:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a18:	cc 24       	eor	r12, r12
    3a1a:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a1c:	de 01       	movw	r26, r28
    3a1e:	11 96       	adiw	r26, 0x01	; 1
    3a20:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a22:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3a24:	2d 91       	ld	r18, X+
    3a26:	2f 77       	andi	r18, 0x7F	; 127
    3a28:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a2a:	4f 5f       	subi	r20, 0xFF	; 255
    3a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a2e:	88 81       	ld	r24, Y
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	04 2e       	mov	r0, r20
    3a34:	02 c0       	rjmp	.+4      	; 0x3a3a <sysex_decode+0x68>
    3a36:	88 0f       	add	r24, r24
    3a38:	99 1f       	adc	r25, r25
    3a3a:	0a 94       	dec	r0
    3a3c:	e2 f7       	brpl	.-8      	; 0x3a36 <sysex_decode+0x64>
    3a3e:	80 78       	andi	r24, 0x80	; 128
    3a40:	28 2b       	or	r18, r24
    3a42:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a44:	47 30       	cpi	r20, 0x07	; 7
    3a46:	51 05       	cpc	r21, r1
    3a48:	69 f7       	brne	.-38     	; 0x3a24 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3a4a:	0f 5f       	subi	r16, 0xFF	; 255
    3a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a4e:	28 96       	adiw	r28, 0x08	; 8
    3a50:	69 5f       	subi	r22, 0xF9	; 249
    3a52:	7f 4f       	sbci	r23, 0xFF	; 255
    3a54:	0e 15       	cp	r16, r14
    3a56:	1f 05       	cpc	r17, r15
    3a58:	09 f7       	brne	.-62     	; 0x3a1c <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3a5a:	5a 2d       	mov	r21, r10
    3a5c:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3a5e:	99 f1       	breq	.+102    	; 0x3ac6 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3a60:	e7 01       	movw	r28, r14
    3a62:	cc 0f       	add	r28, r28
    3a64:	dd 1f       	adc	r29, r29
    3a66:	cc 0f       	add	r28, r28
    3a68:	dd 1f       	adc	r29, r29
    3a6a:	cc 0f       	add	r28, r28
    3a6c:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3a6e:	8e 01       	movw	r16, r28
    3a70:	0e 19       	sub	r16, r14
    3a72:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3a74:	65 2f       	mov	r22, r21
    3a76:	70 e0       	ldi	r23, 0x00	; 0
    3a78:	61 50       	subi	r22, 0x01	; 1
    3a7a:	70 40       	sbci	r23, 0x00	; 0
    3a7c:	f9 f0       	breq	.+62     	; 0x3abc <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a7e:	ce 01       	movw	r24, r28
    3a80:	01 96       	adiw	r24, 0x01	; 1
    3a82:	d4 01       	movw	r26, r8
    3a84:	a8 0f       	add	r26, r24
    3a86:	b9 1f       	adc	r27, r25
    3a88:	f3 01       	movw	r30, r6
    3a8a:	e0 0f       	add	r30, r16
    3a8c:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a92:	c8 0d       	add	r28, r8
    3a94:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3a96:	4d 91       	ld	r20, X+
    3a98:	4f 77       	andi	r20, 0x7F	; 127
    3a9a:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a9c:	2f 5f       	subi	r18, 0xFF	; 255
    3a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa0:	88 81       	ld	r24, Y
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	02 2e       	mov	r0, r18
    3aa6:	02 c0       	rjmp	.+4      	; 0x3aac <sysex_decode+0xda>
    3aa8:	88 0f       	add	r24, r24
    3aaa:	99 1f       	adc	r25, r25
    3aac:	0a 94       	dec	r0
    3aae:	e2 f7       	brpl	.-8      	; 0x3aa8 <sysex_decode+0xd6>
    3ab0:	80 78       	andi	r24, 0x80	; 128
    3ab2:	48 2b       	or	r20, r24
    3ab4:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3ab6:	26 17       	cp	r18, r22
    3ab8:	37 07       	cpc	r19, r23
    3aba:	68 f3       	brcs	.-38     	; 0x3a96 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3abc:	c8 01       	movw	r24, r16
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	85 0f       	add	r24, r21
    3ac2:	91 1d       	adc	r25, r1
    3ac4:	0c c0       	rjmp	.+24     	; 0x3ade <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3ac6:	c7 01       	movw	r24, r14
    3ac8:	88 0f       	add	r24, r24
    3aca:	99 1f       	adc	r25, r25
    3acc:	88 0f       	add	r24, r24
    3ace:	99 1f       	adc	r25, r25
    3ad0:	88 0f       	add	r24, r24
    3ad2:	99 1f       	adc	r25, r25
    3ad4:	8e 19       	sub	r24, r14
    3ad6:	9f 09       	sbc	r25, r15
    3ad8:	02 c0       	rjmp	.+4      	; 0x3ade <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3ade:	df 91       	pop	r29
    3ae0:	cf 91       	pop	r28
    3ae2:	1f 91       	pop	r17
    3ae4:	0f 91       	pop	r16
    3ae6:	ff 90       	pop	r15
    3ae8:	ef 90       	pop	r14
    3aea:	df 90       	pop	r13
    3aec:	cf 90       	pop	r12
    3aee:	bf 90       	pop	r11
    3af0:	af 90       	pop	r10
    3af2:	9f 90       	pop	r9
    3af4:	8f 90       	pop	r8
    3af6:	7f 90       	pop	r7
    3af8:	6f 90       	pop	r6
    3afa:	08 95       	ret

00003afc <__mulsi3>:
    3afc:	62 9f       	mul	r22, r18
    3afe:	d0 01       	movw	r26, r0
    3b00:	73 9f       	mul	r23, r19
    3b02:	f0 01       	movw	r30, r0
    3b04:	82 9f       	mul	r24, r18
    3b06:	e0 0d       	add	r30, r0
    3b08:	f1 1d       	adc	r31, r1
    3b0a:	64 9f       	mul	r22, r20
    3b0c:	e0 0d       	add	r30, r0
    3b0e:	f1 1d       	adc	r31, r1
    3b10:	92 9f       	mul	r25, r18
    3b12:	f0 0d       	add	r31, r0
    3b14:	83 9f       	mul	r24, r19
    3b16:	f0 0d       	add	r31, r0
    3b18:	74 9f       	mul	r23, r20
    3b1a:	f0 0d       	add	r31, r0
    3b1c:	65 9f       	mul	r22, r21
    3b1e:	f0 0d       	add	r31, r0
    3b20:	99 27       	eor	r25, r25
    3b22:	72 9f       	mul	r23, r18
    3b24:	b0 0d       	add	r27, r0
    3b26:	e1 1d       	adc	r30, r1
    3b28:	f9 1f       	adc	r31, r25
    3b2a:	63 9f       	mul	r22, r19
    3b2c:	b0 0d       	add	r27, r0
    3b2e:	e1 1d       	adc	r30, r1
    3b30:	f9 1f       	adc	r31, r25
    3b32:	bd 01       	movw	r22, r26
    3b34:	cf 01       	movw	r24, r30
    3b36:	11 24       	eor	r1, r1
    3b38:	08 95       	ret

00003b3a <__udivmodhi4>:
    3b3a:	aa 1b       	sub	r26, r26
    3b3c:	bb 1b       	sub	r27, r27
    3b3e:	51 e1       	ldi	r21, 0x11	; 17
    3b40:	07 c0       	rjmp	.+14     	; 0x3b50 <__udivmodhi4_ep>

00003b42 <__udivmodhi4_loop>:
    3b42:	aa 1f       	adc	r26, r26
    3b44:	bb 1f       	adc	r27, r27
    3b46:	a6 17       	cp	r26, r22
    3b48:	b7 07       	cpc	r27, r23
    3b4a:	10 f0       	brcs	.+4      	; 0x3b50 <__udivmodhi4_ep>
    3b4c:	a6 1b       	sub	r26, r22
    3b4e:	b7 0b       	sbc	r27, r23

00003b50 <__udivmodhi4_ep>:
    3b50:	88 1f       	adc	r24, r24
    3b52:	99 1f       	adc	r25, r25
    3b54:	5a 95       	dec	r21
    3b56:	a9 f7       	brne	.-22     	; 0x3b42 <__udivmodhi4_loop>
    3b58:	80 95       	com	r24
    3b5a:	90 95       	com	r25
    3b5c:	bc 01       	movw	r22, r24
    3b5e:	cd 01       	movw	r24, r26
    3b60:	08 95       	ret

00003b62 <__divmodhi4>:
    3b62:	97 fb       	bst	r25, 7
    3b64:	09 2e       	mov	r0, r25
    3b66:	07 26       	eor	r0, r23
    3b68:	0a d0       	rcall	.+20     	; 0x3b7e <__divmodhi4_neg1>
    3b6a:	77 fd       	sbrc	r23, 7
    3b6c:	04 d0       	rcall	.+8      	; 0x3b76 <__divmodhi4_neg2>
    3b6e:	e5 df       	rcall	.-54     	; 0x3b3a <__udivmodhi4>
    3b70:	06 d0       	rcall	.+12     	; 0x3b7e <__divmodhi4_neg1>
    3b72:	00 20       	and	r0, r0
    3b74:	1a f4       	brpl	.+6      	; 0x3b7c <__divmodhi4_exit>

00003b76 <__divmodhi4_neg2>:
    3b76:	70 95       	com	r23
    3b78:	61 95       	neg	r22
    3b7a:	7f 4f       	sbci	r23, 0xFF	; 255

00003b7c <__divmodhi4_exit>:
    3b7c:	08 95       	ret

00003b7e <__divmodhi4_neg1>:
    3b7e:	f6 f7       	brtc	.-4      	; 0x3b7c <__divmodhi4_exit>
    3b80:	90 95       	com	r25
    3b82:	81 95       	neg	r24
    3b84:	9f 4f       	sbci	r25, 0xFF	; 255
    3b86:	08 95       	ret

00003b88 <memcpy>:
    3b88:	fb 01       	movw	r30, r22
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	02 c0       	rjmp	.+4      	; 0x3b92 <memcpy+0xa>
    3b8e:	01 90       	ld	r0, Z+
    3b90:	0d 92       	st	X+, r0
    3b92:	41 50       	subi	r20, 0x01	; 1
    3b94:	50 40       	sbci	r21, 0x00	; 0
    3b96:	d8 f7       	brcc	.-10     	; 0x3b8e <memcpy+0x6>
    3b98:	08 95       	ret

00003b9a <memmove>:
    3b9a:	68 17       	cp	r22, r24
    3b9c:	79 07       	cpc	r23, r25
    3b9e:	68 f4       	brcc	.+26     	; 0x3bba <memmove+0x20>
    3ba0:	fb 01       	movw	r30, r22
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	e4 0f       	add	r30, r20
    3ba6:	f5 1f       	adc	r31, r21
    3ba8:	a4 0f       	add	r26, r20
    3baa:	b5 1f       	adc	r27, r21
    3bac:	02 c0       	rjmp	.+4      	; 0x3bb2 <memmove+0x18>
    3bae:	02 90       	ld	r0, -Z
    3bb0:	0e 92       	st	-X, r0
    3bb2:	41 50       	subi	r20, 0x01	; 1
    3bb4:	50 40       	sbci	r21, 0x00	; 0
    3bb6:	d8 f7       	brcc	.-10     	; 0x3bae <memmove+0x14>
    3bb8:	08 95       	ret
    3bba:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <memcpy>

00003bbe <__eerd_block_m6450a>:
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22

00003bc2 <__eerd_blraw_m6450a>:
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	f9 99       	sbic	0x1f, 1	; 31
    3bc6:	fe cf       	rjmp	.-4      	; 0x3bc4 <__eerd_blraw_m6450a+0x2>
    3bc8:	06 c0       	rjmp	.+12     	; 0x3bd6 <__eerd_blraw_m6450a+0x14>
    3bca:	f2 bd       	out	0x22, r31	; 34
    3bcc:	e1 bd       	out	0x21, r30	; 33
    3bce:	f8 9a       	sbi	0x1f, 0	; 31
    3bd0:	31 96       	adiw	r30, 0x01	; 1
    3bd2:	00 b4       	in	r0, 0x20	; 32
    3bd4:	0d 92       	st	X+, r0
    3bd6:	41 50       	subi	r20, 0x01	; 1
    3bd8:	50 40       	sbci	r21, 0x00	; 0
    3bda:	b8 f7       	brcc	.-18     	; 0x3bca <__eerd_blraw_m6450a+0x8>
    3bdc:	08 95       	ret

00003bde <__eerd_word_m6450a>:
    3bde:	a8 e1       	ldi	r26, 0x18	; 24
    3be0:	b0 e0       	ldi	r27, 0x00	; 0
    3be2:	42 e0       	ldi	r20, 0x02	; 2
    3be4:	50 e0       	ldi	r21, 0x00	; 0
    3be6:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__eerd_blraw_m6450a>

00003bea <__eeupd_block_m6450a>:
    3bea:	dc 01       	movw	r26, r24
    3bec:	a4 0f       	add	r26, r20
    3bee:	b5 1f       	adc	r27, r21
    3bf0:	41 50       	subi	r20, 0x01	; 1
    3bf2:	50 40       	sbci	r21, 0x00	; 0
    3bf4:	48 f0       	brcs	.+18     	; 0x3c08 <__eeupd_block_m6450a+0x1e>
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	84 0f       	add	r24, r20
    3bfa:	95 1f       	adc	r25, r21
    3bfc:	2e 91       	ld	r18, -X
    3bfe:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__eeupd_r18_m6450a>
    3c02:	41 50       	subi	r20, 0x01	; 1
    3c04:	50 40       	sbci	r21, 0x00	; 0
    3c06:	d0 f7       	brcc	.-12     	; 0x3bfc <__eeupd_block_m6450a+0x12>
    3c08:	08 95       	ret

00003c0a <__eeupd_byte_m6450a>:
    3c0a:	26 2f       	mov	r18, r22

00003c0c <__eeupd_r18_m6450a>:
    3c0c:	f9 99       	sbic	0x1f, 1	; 31
    3c0e:	fe cf       	rjmp	.-4      	; 0x3c0c <__eeupd_r18_m6450a>
    3c10:	92 bd       	out	0x22, r25	; 34
    3c12:	81 bd       	out	0x21, r24	; 33
    3c14:	f8 9a       	sbi	0x1f, 0	; 31
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	00 b4       	in	r0, 0x20	; 32
    3c1a:	02 16       	cp	r0, r18
    3c1c:	31 f0       	breq	.+12     	; 0x3c2a <__eeupd_r18_m6450a+0x1e>
    3c1e:	20 bd       	out	0x20, r18	; 32
    3c20:	0f b6       	in	r0, 0x3f	; 63
    3c22:	f8 94       	cli
    3c24:	fa 9a       	sbi	0x1f, 2	; 31
    3c26:	f9 9a       	sbi	0x1f, 1	; 31
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	08 95       	ret

00003c2c <__eeupd_word_m6450a>:
    3c2c:	01 96       	adiw	r24, 0x01	; 1
    3c2e:	27 2f       	mov	r18, r23
    3c30:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__eeupd_r18_m6450a>
    3c34:	0c 94 05 1e 	jmp	0x3c0a	; 0x3c0a <__eeupd_byte_m6450a>

00003c38 <_exit>:
    3c38:	f8 94       	cli

00003c3a <__stop_program>:
    3c3a:	ff cf       	rjmp	.-2      	; 0x3c3a <__stop_program>
