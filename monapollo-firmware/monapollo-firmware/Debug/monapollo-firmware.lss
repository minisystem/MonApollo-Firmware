
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000016cc  00001760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  0080014e  0080014e  000017ae  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00001fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ad8  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb8  00000000  00000000  00004cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001368  00000000  00000000  00005878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008cc  00000000  00000000  00006be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000da2  00000000  00000000  000074ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cdc  00000000  00000000  0000824e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00009f2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ec ec       	ldi	r30, 0xCC	; 204
      78:	f6 e1       	ldi	r31, 0x16	; 22
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ae 34       	cpi	r26, 0x4E	; 78
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	12 e0       	ldi	r17, 0x02	; 2
      88:	ae e4       	ldi	r26, 0x4E	; 78
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a0 35       	cpi	r26, 0x50	; 80
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
      9a:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <setup_dac>:
#include "port_map.h"
#include "dac.h"

void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
      c8:	83 b3       	in	r24, 0x13	; 19
      ca:	83 60       	ori	r24, 0x03	; 3
      cc:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
      ce:	8f ef       	ldi	r24, 0xFF	; 255
      d0:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
      d2:	97 b1       	in	r25, 0x07	; 7
      d4:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
      d6:	e9 ed       	ldi	r30, 0xD9	; 217
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	8f 60       	ori	r24, 0x0F	; 15
      de:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
      e0:	ea ed       	ldi	r30, 0xDA	; 218
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 7f       	andi	r24, 0xF0	; 240
      e8:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
      ea:	84 b3       	in	r24, 0x14	; 20
      ec:	83 60       	ori	r24, 0x03	; 3
      ee:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
      f0:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
      f2:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
      f4:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
      f6:	a0 9a       	sbi	0x14, 0	; 20
}
      f8:	08 95       	ret

000000fa <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
      fa:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
      fc:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
      fe:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     100:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     102:	62 b9       	out	0x02, r22	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     104:	00 c0       	rjmp	.+0      	; 0x106 <set_dac+0xc>

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     106:	ea ed       	ldi	r30, 0xDA	; 218
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	40 81       	ld	r20, Z
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	b9 01       	movw	r22, r18
     112:	02 c0       	rjmp	.+4      	; 0x118 <set_dac+0x1e>
     114:	66 0f       	add	r22, r22
     116:	77 1f       	adc	r23, r23
     118:	8a 95       	dec	r24
     11a:	e2 f7       	brpl	.-8      	; 0x114 <set_dac+0x1a>
     11c:	cb 01       	movw	r24, r22
     11e:	94 2f       	mov	r25, r20
     120:	98 2b       	or	r25, r24
     122:	90 83       	st	Z, r25
     124:	73 e0       	ldi	r23, 0x03	; 3
     126:	7a 95       	dec	r23
     128:	f1 f7       	brne	.-4      	; 0x126 <set_dac+0x2c>
     12a:	00 00       	nop
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     12c:	90 81       	ld	r25, Z
     12e:	80 95       	com	r24
     130:	89 23       	and	r24, r25
     132:	80 83       	st	Z, r24
	
}
     134:	08 95       	ret

00000136 <display_dec>:
#include "display.h"
#include "port_map.h"
#include "display_map.h"

void display_dec(uint16_t number, uint8_t digit)
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	2a 97       	sbiw	r28, 0x0a	; 10
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     14a:	de 01       	movw	r26, r28
     14c:	11 96       	adiw	r26, 0x01	; 1
     14e:	e0 e0       	ldi	r30, 0x00	; 0
     150:	f1 e0       	ldi	r31, 0x01	; 1
     152:	3a e0       	ldi	r19, 0x0A	; 10
     154:	01 90       	ld	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	31 50       	subi	r19, 0x01	; 1
     15a:	e1 f7       	brne	.-8      	; 0x154 <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     15c:	3f ef       	ldi	r19, 0xFF	; 255
     15e:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     160:	ea ed       	ldi	r30, 0xDA	; 218
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	30 81       	ld	r19, Z
     166:	30 61       	ori	r19, 0x10	; 16
     168:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     16a:	30 81       	ld	r19, Z
     16c:	3f 7e       	andi	r19, 0xEF	; 239
     16e:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     170:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     172:	30 81       	ld	r19, Z
     174:	30 62       	ori	r19, 0x20	; 32
     176:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     178:	30 81       	ld	r19, Z
     17a:	3f 7d       	andi	r19, 0xDF	; 223
     17c:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
     17e:	62 30       	cpi	r22, 0x02	; 2
     180:	f9 f0       	breq	.+62     	; 0x1c0 <display_dec+0x8a>
     182:	63 30       	cpi	r22, 0x03	; 3
     184:	18 f4       	brcc	.+6      	; 0x18c <display_dec+0x56>
     186:	61 30       	cpi	r22, 0x01	; 1
     188:	a1 f5       	brne	.+104    	; 0x1f2 <display_dec+0xbc>
     18a:	0d c0       	rjmp	.+26     	; 0x1a6 <display_dec+0x70>
     18c:	64 30       	cpi	r22, 0x04	; 4
     18e:	29 f1       	breq	.+74     	; 0x1da <display_dec+0xa4>
     190:	68 30       	cpi	r22, 0x08	; 8
     192:	79 f5       	brne	.+94     	; 0x1f2 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     194:	6a e0       	ldi	r22, 0x0A	; 10
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
     19c:	fe 01       	movw	r30, r28
     19e:	e8 0f       	add	r30, r24
     1a0:	f9 1f       	adc	r31, r25
     1a2:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     1a4:	26 c0       	rjmp	.+76     	; 0x1f2 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     1a6:	64 e6       	ldi	r22, 0x64	; 100
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
     1ae:	6a e0       	ldi	r22, 0x0A	; 10
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
     1b6:	fe 01       	movw	r30, r28
     1b8:	e6 0f       	add	r30, r22
     1ba:	f7 1f       	adc	r31, r23
     1bc:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     1be:	19 c0       	rjmp	.+50     	; 0x1f2 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     1c0:	68 ee       	ldi	r22, 0xE8	; 232
     1c2:	73 e0       	ldi	r23, 0x03	; 3
     1c4:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
     1c8:	64 e6       	ldi	r22, 0x64	; 100
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
     1d0:	fe 01       	movw	r30, r28
     1d2:	e6 0f       	add	r30, r22
     1d4:	f7 1f       	adc	r31, r23
     1d6:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     1d8:	0c c0       	rjmp	.+24     	; 0x1f2 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     1da:	60 e1       	ldi	r22, 0x10	; 16
     1dc:	77 e2       	ldi	r23, 0x27	; 39
     1de:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
     1e2:	68 ee       	ldi	r22, 0xE8	; 232
     1e4:	73 e0       	ldi	r23, 0x03	; 3
     1e6:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
     1ea:	fe 01       	movw	r30, r28
     1ec:	e6 0f       	add	r30, r22
     1ee:	f7 1f       	adc	r31, r23
     1f0:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     1f2:	20 95       	com	r18
     1f4:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     1f6:	ea ed       	ldi	r30, 0xDA	; 218
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	80 61       	ori	r24, 0x10	; 16
     1fe:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     200:	80 81       	ld	r24, Z
     202:	8f 7e       	andi	r24, 0xEF	; 239
     204:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
     206:	2a 96       	adiw	r28, 0x0a	; 10
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	de bf       	out	0x3e, r29	; 62
     20e:	0f be       	out	0x3f, r0	; 63
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <note_on_event>:

volatile uint8_t place = 0; //digit place for LED display

void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	value_to_display = note;
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	50 93 0f 01 	sts	0x010F, r21
     21e:	40 93 0e 01 	sts	0x010E, r20
	
	if (velocity == 0) {
     222:	22 23       	and	r18, r18
     224:	11 f4       	brne	.+4      	; 0x22a <note_on_event+0x12>
		
		PORTF &= ~(1<<GATE);
     226:	89 98       	cbi	0x11, 1	; 17
     228:	08 95       	ret
	} else {
		PORTF |= (1<<GATE);
     22a:	89 9a       	sbi	0x11, 1	; 17
     22c:	08 95       	ret

0000022e <note_off_event>:
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	PORTF &= ~(1<<GATE);
     22e:	89 98       	cbi	0x11, 1	; 17
}
     230:	08 95       	ret

00000232 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     232:	87 e2       	ldi	r24, 0x27	; 39
     234:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     238:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     23c:	88 e9       	ldi	r24, 0x98	; 152
     23e:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     242:	08 95       	ret

00000244 <__vector_13>:
	THOUS,
};



ISR (USART_RX_vect) { // USART receive interrupt
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	2f 93       	push	r18
     250:	3f 93       	push	r19
     252:	4f 93       	push	r20
     254:	5f 93       	push	r21
     256:	6f 93       	push	r22
     258:	7f 93       	push	r23
     25a:	8f 93       	push	r24
     25c:	9f 93       	push	r25
     25e:	af 93       	push	r26
     260:	bf 93       	push	r27
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	0f 92       	push	r0
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
	 
	uint8_t inByte = UDR0;
     270:	80 91 c6 00 	lds	r24, 0x00C6
     274:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);	
     276:	83 e6       	ldi	r24, 0x63	; 99
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	ae 01       	movw	r20, r28
     27e:	4f 5f       	subi	r20, 0xFF	; 255
     280:	5f 4f       	sbci	r21, 0xFF	; 255
     282:	0e 94 30 07 	call	0xe60	; 0xe60 <midi_device_input>
		 //if ((status_byte >> 0) & 1) {PORTF |= (1<<GATE);} else {PORTF &= ~(1<<GATE);}
		////PORTF ^= (1<<GATE);	 
     //}	else if (value_to_display == 0) {PORTF &= ~(1<<GATE);}
	  
	
}
     286:	0f 90       	pop	r0
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	ff 91       	pop	r31
     28e:	ef 91       	pop	r30
     290:	bf 91       	pop	r27
     292:	af 91       	pop	r26
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	7f 91       	pop	r23
     29a:	6f 91       	pop	r22
     29c:	5f 91       	pop	r21
     29e:	4f 91       	pop	r20
     2a0:	3f 91       	pop	r19
     2a2:	2f 91       	pop	r18
     2a4:	0f 90       	pop	r0
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	0f 90       	pop	r0
     2aa:	1f 90       	pop	r1
     2ac:	18 95       	reti

000002ae <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
     2ae:	1f 92       	push	r1
     2b0:	0f 92       	push	r0
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	0f 92       	push	r0
     2b6:	11 24       	eor	r1, r1
     2b8:	2f 93       	push	r18
     2ba:	3f 93       	push	r19
     2bc:	4f 93       	push	r20
     2be:	5f 93       	push	r21
     2c0:	6f 93       	push	r22
     2c2:	7f 93       	push	r23
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
     2cc:	ef 93       	push	r30
     2ce:	ff 93       	push	r31
	
	display_dec(value_to_display, digit[place]);
     2d0:	80 91 0e 01 	lds	r24, 0x010E
     2d4:	90 91 0f 01 	lds	r25, 0x010F
     2d8:	20 91 4e 01 	lds	r18, 0x014E
     2dc:	ea e0       	ldi	r30, 0x0A	; 10
     2de:	f1 e0       	ldi	r31, 0x01	; 1
     2e0:	e2 0f       	add	r30, r18
     2e2:	f1 1d       	adc	r31, r1
     2e4:	60 81       	ld	r22, Z
     2e6:	0e 94 9b 00 	call	0x136	; 0x136 <display_dec>
	
	scan_pots_and_update_control_voltages();		
     2ea:	0e 94 df 01 	call	0x3be	; 0x3be <scan_pots_and_update_control_voltages>

		
	//do SPI read/write every 5 interrupts (16.5 ms)
	if (switch_timer++ == 5)
     2ee:	80 91 4f 01 	lds	r24, 0x014F
     2f2:	98 2f       	mov	r25, r24
     2f4:	9f 5f       	subi	r25, 0xFF	; 255
     2f6:	90 93 4f 01 	sts	0x014F, r25
     2fa:	85 30       	cpi	r24, 0x05	; 5
     2fc:	21 f4       	brne	.+8      	; 0x306 <__vector_5+0x58>
	{
		switch_timer = 0;
     2fe:	10 92 4f 01 	sts	0x014F, r1
		update_spi();	
     302:	0e 94 2a 03 	call	0x654	; 0x654 <update_spi>
			  	
	}
		
	//increment digit display place
	if (place++ == 3) //post increment
     306:	80 91 4e 01 	lds	r24, 0x014E
     30a:	98 2f       	mov	r25, r24
     30c:	9f 5f       	subi	r25, 0xFF	; 255
     30e:	90 93 4e 01 	sts	0x014E, r25
     312:	83 30       	cpi	r24, 0x03	; 3
     314:	11 f4       	brne	.+4      	; 0x31a <__vector_5+0x6c>
	{
		place = 0;
     316:	10 92 4e 01 	sts	0x014E, r1
	}
	

	
}	
     31a:	ff 91       	pop	r31
     31c:	ef 91       	pop	r30
     31e:	bf 91       	pop	r27
     320:	af 91       	pop	r26
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	7f 91       	pop	r23
     328:	6f 91       	pop	r22
     32a:	5f 91       	pop	r21
     32c:	4f 91       	pop	r20
     32e:	3f 91       	pop	r19
     330:	2f 91       	pop	r18
     332:	0f 90       	pop	r0
     334:	0f be       	out	0x3f, r0	; 63
     336:	0f 90       	pop	r0
     338:	1f 90       	pop	r1
     33a:	18 95       	reti

0000033c <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     33c:	80 e8       	ldi	r24, 0x80	; 128
     33e:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     340:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     342:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     344:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	setup_spi(); 
     346:	0e 94 0b 03 	call	0x616	; 0x616 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     34a:	a9 ed       	ldi	r26, 0xD9	; 217
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	8c 91       	ld	r24, X
     350:	80 6c       	ori	r24, 0xC0	; 192
     352:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     354:	ea ed       	ldi	r30, 0xDA	; 218
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	80 6c       	ori	r24, 0xC0	; 192
     35c:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     35e:	81 b1       	in	r24, 0x01	; 1
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     364:	92 b1       	in	r25, 0x02	; 2
     366:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     368:	8c 91       	ld	r24, X
     36a:	80 63       	ori	r24, 0x30	; 48
     36c:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     36e:	80 81       	ld	r24, Z
     370:	8f 7c       	andi	r24, 0xCF	; 207
     372:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<ISW8_SW); //set ISW8_SW pin as input
     374:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     376:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     37a:	0e 94 64 00 	call	0xc8	; 0xc8 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     37e:	c3 e6       	ldi	r28, 0x63	; 99
     380:	d1 e0       	ldi	r29, 0x01	; 1
     382:	ce 01       	movw	r24, r28
     384:	0e 94 ff 06 	call	0xdfe	; 0xdfe <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     388:	ce 01       	movw	r24, r28
     38a:	6c e0       	ldi	r22, 0x0C	; 12
     38c:	71 e0       	ldi	r23, 0x01	; 1
     38e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     392:	ce 01       	movw	r24, r28
     394:	67 e1       	ldi	r22, 0x17	; 23
     396:	71 e0       	ldi	r23, 0x01	; 1
     398:	0e 94 cb 06 	call	0xd96	; 0xd96 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     39c:	0e 94 19 01 	call	0x232	; 0x232 <setup_midi_usart>
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
     3a0:	e0 eb       	ldi	r30, 0xB0	; 176
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	86 60       	ori	r24, 0x06	; 6
     3a8:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
     3aa:	e0 e7       	ldi	r30, 0x70	; 112
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	81 60       	ori	r24, 0x01	; 1
     3b2:	80 83       	st	Z, r24
	sei(); //enable global interrupts
     3b4:	78 94       	sei

	while(1)
	{	
		midi_device_process(&midi_device);
     3b6:	ce 01       	movw	r24, r28
     3b8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <midi_device_process>
     3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <main+0x7a>

000003be <scan_pots_and_update_control_voltages>:
	{SUSTAIN_1,		DAC_MUX_EN3},
	{RELEASE_2,		DAC_MUX_EN3},
	{RELEASE_1,		DAC_MUX_EN3}							
};

void scan_pots_and_update_control_voltages(void) {
     3be:	2f 92       	push	r2
     3c0:	3f 92       	push	r3
     3c2:	4f 92       	push	r4
     3c4:	5f 92       	push	r5
     3c6:	6f 92       	push	r6
     3c8:	7f 92       	push	r7
     3ca:	8f 92       	push	r8
     3cc:	9f 92       	push	r9
     3ce:	af 92       	push	r10
     3d0:	bf 92       	push	r11
     3d2:	cf 92       	push	r12
     3d4:	df 92       	push	r13
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	cc 24       	eor	r12, r12
     3e4:	dd 24       	eor	r13, r13
     3e6:	c3 94       	inc	r12
     3e8:	00 e0       	ldi	r16, 0x00	; 0
     3ea:	10 e0       	ldi	r17, 0x00	; 0

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{
		DATA_BUS = i;
		POT_MUX &= ~(1<<POTMUX_EN0);
     3ec:	0f 2e       	mov	r0, r31
     3ee:	fa ed       	ldi	r31, 0xDA	; 218
     3f0:	ef 2e       	mov	r14, r31
     3f2:	ff 24       	eor	r15, r15
     3f4:	f0 2d       	mov	r31, r0
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     3f6:	ca e7       	ldi	r28, 0x7A	; 122
     3f8:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
		POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
		//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
		
		//adc_previous = adc_value;
		adc_value = ADCL;
     3fa:	0f 2e       	mov	r0, r31
     3fc:	f8 e7       	ldi	r31, 0x78	; 120
     3fe:	8f 2e       	mov	r8, r31
     400:	99 24       	eor	r9, r9
     402:	f0 2d       	mov	r31, r0
		adc_value = adc_value | (ADCH <<8);
     404:	0f 2e       	mov	r0, r31
     406:	f9 e7       	ldi	r31, 0x79	; 121
     408:	4f 2e       	mov	r4, r31
     40a:	55 24       	eor	r5, r5
     40c:	f0 2d       	mov	r31, r0
		} else if (i == 11) //exception to handle ARP_RATE pot
		{
			//store ARP pot value, but don't set DAC
			
		} else {
			set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
     40e:	0f 2e       	mov	r0, r31
     410:	fe e2       	ldi	r31, 0x2E	; 46
     412:	2f 2e       	mov	r2, r31
     414:	f1 e0       	ldi	r31, 0x01	; 1
     416:	3f 2e       	mov	r3, r31
     418:	f0 2d       	mov	r31, r0
     41a:	05 c0       	rjmp	.+10     	; 0x426 <scan_pots_and_update_control_voltages+0x68>
};

void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     41c:	0f 5f       	subi	r16, 0xFF	; 255
     41e:	1f 4f       	sbci	r17, 0xFF	; 255
     420:	08 94       	sec
     422:	c1 1c       	adc	r12, r1
     424:	d1 1c       	adc	r13, r1
     426:	f8 01       	movw	r30, r16
	{
		DATA_BUS = i;
     428:	02 b9       	out	0x02, r16	; 2
		POT_MUX &= ~(1<<POTMUX_EN0);
     42a:	d7 01       	movw	r26, r14
     42c:	8c 91       	ld	r24, X
     42e:	8f 7b       	andi	r24, 0xBF	; 191
     430:	8c 93       	st	X, r24
     432:	00 c0       	rjmp	.+0      	; 0x434 <scan_pots_and_update_control_voltages+0x76>
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     434:	88 81       	ld	r24, Y
     436:	80 64       	ori	r24, 0x40	; 64
     438:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     43a:	88 81       	ld	r24, Y
     43c:	86 fd       	sbrc	r24, 6
     43e:	fd cf       	rjmp	.-6      	; 0x43a <scan_pots_and_update_control_voltages+0x7c>
		POT_MUX |= (1<<POTMUX_EN0); //disable pot multiplexer U2
     440:	d7 01       	movw	r26, r14
     442:	8c 91       	ld	r24, X
     444:	80 64       	ori	r24, 0x40	; 64
     446:	8c 93       	st	X, r24
		//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
		
		//adc_previous = adc_value;
		adc_value = ADCL;
     448:	d4 01       	movw	r26, r8
     44a:	8c 91       	ld	r24, X
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	90 93 53 01 	sts	0x0153, r25
     452:	80 93 52 01 	sts	0x0152, r24
		adc_value = adc_value | (ADCH <<8);
     456:	d2 01       	movw	r26, r4
     458:	2c 91       	ld	r18, X
     45a:	80 91 52 01 	lds	r24, 0x0152
     45e:	90 91 53 01 	lds	r25, 0x0153
     462:	b2 2e       	mov	r11, r18
     464:	aa 24       	eor	r10, r10
     466:	8a 29       	or	r24, r10
     468:	9b 29       	or	r25, r11
     46a:	90 93 53 01 	sts	0x0153, r25
     46e:	80 93 52 01 	sts	0x0152, r24
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
     472:	c8 01       	movw	r24, r16
     474:	08 97       	sbiw	r24, 0x08	; 8
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	91 05       	cpc	r25, r1
     47a:	08 f0       	brcs	.+2      	; 0x47e <scan_pots_and_update_control_voltages+0xc0>
     47c:	44 c0       	rjmp	.+136    	; 0x506 <scan_pots_and_update_control_voltages+0x148>
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     47e:	e9 30       	cpi	r30, 0x09	; 9
     480:	f1 05       	cpc	r31, r1
     482:	19 f0       	breq	.+6      	; 0x48a <scan_pots_and_update_control_voltages+0xcc>
		adc_value = ADCL;
		adc_value = adc_value | (ADCH <<8);
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
     484:	2f e9       	ldi	r18, 0x9F	; 159
     486:	38 e1       	ldi	r19, 0x18	; 24
     488:	02 c0       	rjmp	.+4      	; 0x48e <scan_pots_and_update_control_voltages+0xd0>
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     48a:	25 e0       	ldi	r18, 0x05	; 5
     48c:	3f e1       	ldi	r19, 0x1F	; 31
			if (adc_value >= 512) {
     48e:	80 91 52 01 	lds	r24, 0x0152
     492:	90 91 53 01 	lds	r25, 0x0153
     496:	b2 e0       	ldi	r27, 0x02	; 2
     498:	80 30       	cpi	r24, 0x00	; 0
     49a:	9b 07       	cpc	r25, r27
     49c:	d8 f0       	brcs	.+54     	; 0x4d4 <scan_pots_and_update_control_voltages+0x116>
				set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value + (adc_value - 512)));
     49e:	ee 0f       	add	r30, r30
     4a0:	ff 1f       	adc	r31, r31
     4a2:	e2 0d       	add	r30, r2
     4a4:	f3 1d       	adc	r31, r3
     4a6:	81 81       	ldd	r24, Z+1	; 0x01
     4a8:	60 81       	ld	r22, Z
     4aa:	40 91 52 01 	lds	r20, 0x0152
     4ae:	50 91 53 01 	lds	r21, 0x0153
     4b2:	40 50       	subi	r20, 0x00	; 0
     4b4:	52 40       	sbci	r21, 0x02	; 2
     4b6:	42 0f       	add	r20, r18
     4b8:	53 1f       	adc	r21, r19
     4ba:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
				tune_offset = adc_value - 512;
     4be:	80 91 52 01 	lds	r24, 0x0152
     4c2:	90 91 53 01 	lds	r25, 0x0153
     4c6:	80 50       	subi	r24, 0x00	; 0
     4c8:	92 40       	sbci	r25, 0x02	; 2
     4ca:	90 93 51 01 	sts	0x0151, r25
     4ce:	80 93 50 01 	sts	0x0150, r24
     4d2:	2f c0       	rjmp	.+94     	; 0x532 <scan_pots_and_update_control_voltages+0x174>
			} else {
				set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0],(tune_value - (512- adc_value)));
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	e2 0d       	add	r30, r2
     4da:	f3 1d       	adc	r31, r3
     4dc:	81 81       	ldd	r24, Z+1	; 0x01
     4de:	60 81       	ld	r22, Z
     4e0:	40 91 52 01 	lds	r20, 0x0152
     4e4:	50 91 53 01 	lds	r21, 0x0153
     4e8:	40 50       	subi	r20, 0x00	; 0
     4ea:	52 40       	sbci	r21, 0x02	; 2
     4ec:	42 0f       	add	r20, r18
     4ee:	53 1f       	adc	r21, r19
     4f0:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
				tune_offset = adc_value;
     4f4:	80 91 52 01 	lds	r24, 0x0152
     4f8:	90 91 53 01 	lds	r25, 0x0153
     4fc:	90 93 51 01 	sts	0x0151, r25
     500:	80 93 50 01 	sts	0x0150, r24
     504:	16 c0       	rjmp	.+44     	; 0x532 <scan_pots_and_update_control_voltages+0x174>
			}

		} else if (i == 11) //exception to handle ARP_RATE pot
     506:	eb 30       	cpi	r30, 0x0B	; 11
     508:	f1 05       	cpc	r31, r1
     50a:	09 f4       	brne	.+2      	; 0x50e <scan_pots_and_update_control_voltages+0x150>
     50c:	87 cf       	rjmp	.-242    	; 0x41c <scan_pots_and_update_control_voltages+0x5e>
		{
			//store ARP pot value, but don't set DAC
			
		} else {
			set_dac(dac_pot_decoder_0[i][1],dac_pot_decoder_0[i][0], adc_value << 4);
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e2 0d       	add	r30, r2
     514:	f3 1d       	adc	r31, r3
     516:	81 81       	ldd	r24, Z+1	; 0x01
     518:	60 81       	ld	r22, Z
     51a:	40 91 52 01 	lds	r20, 0x0152
     51e:	50 91 53 01 	lds	r21, 0x0153
     522:	42 95       	swap	r20
     524:	52 95       	swap	r21
     526:	50 7f       	andi	r21, 0xF0	; 240
     528:	54 27       	eor	r21, r20
     52a:	40 7f       	andi	r20, 0xF0	; 240
     52c:	54 27       	eor	r21, r20
     52e:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
};

void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     532:	e0 e1       	ldi	r30, 0x10	; 16
     534:	ce 16       	cp	r12, r30
     536:	d1 04       	cpc	r13, r1
     538:	0c f4       	brge	.+2      	; 0x53c <scan_pots_and_update_control_voltages+0x17e>
     53a:	70 cf       	rjmp	.-288    	; 0x41c <scan_pots_and_update_control_voltages+0x5e>
     53c:	00 e0       	ldi	r16, 0x00	; 0
     53e:	10 e0       	ldi	r17, 0x00	; 0
	//now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		DATA_BUS = i+1; //U4 input 0 is not used (grounded)
		POT_MUX &= ~(1<<POTMUX_EN1);
     540:	0f 2e       	mov	r0, r31
     542:	fa ed       	ldi	r31, 0xDA	; 218
     544:	ef 2e       	mov	r14, r31
     546:	ff 24       	eor	r15, r15
     548:	f0 2d       	mov	r31, r0
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     54a:	ca e7       	ldi	r28, 0x7A	; 122
     54c:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
		POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2
		//adc_previous = adc_value;
		adc_value = ADCL;
     54e:	0f 2e       	mov	r0, r31
     550:	f8 e7       	ldi	r31, 0x78	; 120
     552:	cf 2e       	mov	r12, r31
     554:	dd 24       	eor	r13, r13
     556:	f0 2d       	mov	r31, r0
		adc_value = adc_value | (ADCH <<8);
     558:	0f 2e       	mov	r0, r31
     55a:	f9 e7       	ldi	r31, 0x79	; 121
     55c:	af 2e       	mov	r10, r31
     55e:	bb 24       	eor	r11, r11
     560:	f0 2d       	mov	r31, r0

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
     562:	0f 2e       	mov	r0, r31
     564:	f0 e1       	ldi	r31, 0x10	; 16
     566:	8f 2e       	mov	r8, r31
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	9f 2e       	mov	r9, r31
     56c:	f0 2d       	mov	r31, r0
	{SUSTAIN_1,		DAC_MUX_EN3},
	{RELEASE_2,		DAC_MUX_EN3},
	{RELEASE_1,		DAC_MUX_EN3}							
};

void scan_pots_and_update_control_voltages(void) {
     56e:	80 2f       	mov	r24, r16
     570:	8f 5f       	subi	r24, 0xFF	; 255
	
	//now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		DATA_BUS = i+1; //U4 input 0 is not used (grounded)
     572:	82 b9       	out	0x02, r24	; 2
		POT_MUX &= ~(1<<POTMUX_EN1);
     574:	d7 01       	movw	r26, r14
     576:	8c 91       	ld	r24, X
     578:	8f 77       	andi	r24, 0x7F	; 127
     57a:	8c 93       	st	X, r24
     57c:	00 c0       	rjmp	.+0      	; 0x57e <scan_pots_and_update_control_voltages+0x1c0>
		_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
		ADCSRA |= (1<<ADSC); //start ADC conversion
     57e:	88 81       	ld	r24, Y
     580:	80 64       	ori	r24, 0x40	; 64
     582:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock) - need to figure out what to do with this time - would interrupt be more efficient?
     584:	88 81       	ld	r24, Y
     586:	86 fd       	sbrc	r24, 6
     588:	fd cf       	rjmp	.-6      	; 0x584 <scan_pots_and_update_control_voltages+0x1c6>
		POT_MUX |= (1<<POTMUX_EN1); //disable pot multiplexer U2
     58a:	f7 01       	movw	r30, r14
     58c:	80 81       	ld	r24, Z
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	80 83       	st	Z, r24
		//adc_previous = adc_value;
		adc_value = ADCL;
     592:	d6 01       	movw	r26, r12
     594:	8c 91       	ld	r24, X
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	90 93 53 01 	sts	0x0153, r25
     59c:	80 93 52 01 	sts	0x0152, r24
		adc_value = adc_value | (ADCH <<8);
     5a0:	f5 01       	movw	r30, r10
     5a2:	20 81       	ld	r18, Z
     5a4:	80 91 52 01 	lds	r24, 0x0152
     5a8:	90 91 53 01 	lds	r25, 0x0153
     5ac:	72 2e       	mov	r7, r18
     5ae:	66 24       	eor	r6, r6
     5b0:	86 29       	or	r24, r6
     5b2:	97 29       	or	r25, r7
     5b4:	90 93 53 01 	sts	0x0153, r25
     5b8:	80 93 52 01 	sts	0x0152, r24

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);
     5bc:	f8 01       	movw	r30, r16
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	e8 0d       	add	r30, r8
     5c4:	f9 1d       	adc	r31, r9
     5c6:	81 81       	ldd	r24, Z+1	; 0x01
     5c8:	60 81       	ld	r22, Z
     5ca:	40 91 52 01 	lds	r20, 0x0152
     5ce:	50 91 53 01 	lds	r21, 0x0153
     5d2:	42 95       	swap	r20
     5d4:	52 95       	swap	r21
     5d6:	50 7f       	andi	r21, 0xF0	; 240
     5d8:	54 27       	eor	r21, r20
     5da:	40 7f       	andi	r20, 0xF0	; 240
     5dc:	54 27       	eor	r21, r20
     5de:	0e 94 7d 00 	call	0xfa	; 0xfa <set_dac>
		}
		
	}
	
	//now read second set of pots form U4 and set approriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     5e2:	0f 5f       	subi	r16, 0xFF	; 255
     5e4:	1f 4f       	sbci	r17, 0xFF	; 255
     5e6:	0f 30       	cpi	r16, 0x0F	; 15
     5e8:	11 05       	cpc	r17, r1
     5ea:	09 f6       	brne	.-126    	; 0x56e <scan_pots_and_update_control_voltages+0x1b0>

		set_dac(dac_pot_decoder_1[i][1],dac_pot_decoder_1[i][0], adc_value << 4);

	}

	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     5ec:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     5ee:	a1 9a       	sbi	0x14, 1	; 20
	
	
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	af 90       	pop	r10
     604:	9f 90       	pop	r9
     606:	8f 90       	pop	r8
     608:	7f 90       	pop	r7
     60a:	6f 90       	pop	r6
     60c:	5f 90       	pop	r5
     60e:	4f 90       	pop	r4
     610:	3f 90       	pop	r3
     612:	2f 90       	pop	r2
     614:	08 95       	ret

00000616 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     616:	84 b1       	in	r24, 0x04	; 4
     618:	87 62       	ori	r24, 0x27	; 39
     61a:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     61c:	ec ed       	ldi	r30, 0xDC	; 220
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	8c 65       	ori	r24, 0x5C	; 92
     624:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     626:	85 b1       	in	r24, 0x05	; 5
     628:	89 7d       	andi	r24, 0xD9	; 217
     62a:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     62c:	ed ed       	ldi	r30, 0xDD	; 221
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	80 81       	ld	r24, Z
     632:	83 7f       	andi	r24, 0xF3	; 243
     634:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     636:	80 e5       	ldi	r24, 0x50	; 80
     638:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     63a:	80 81       	ld	r24, Z
     63c:	87 7f       	andi	r24, 0xF7	; 247
     63e:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     640:	80 81       	ld	r24, Z
     642:	87 7f       	andi	r24, 0xF7	; 247
     644:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     646:	80 81       	ld	r24, Z
     648:	88 60       	ori	r24, 0x08	; 8
     64a:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     64c:	80 81       	ld	r24, Z
     64e:	8f 7e       	andi	r24, 0xEF	; 239
     650:	80 83       	st	Z, r24
	
}
     652:	08 95       	ret

00000654 <update_spi>:

void update_spi(void) {
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
	
			SPI_PORT |= SPI_SW_LATCH;
     65c:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE
			SPDR =
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     65e:	c0 91 5a 01 	lds	r28, 0x015A
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     662:	40 91 5a 01 	lds	r20, 0x015A
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     666:	00 91 5a 01 	lds	r16, 0x015A
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     66a:	80 91 5a 01 	lds	r24, 0x015A
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     66e:	a0 91 5a 01 	lds	r26, 0x015A
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     672:	60 91 5a 01 	lds	r22, 0x015A
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     676:	20 91 5a 01 	lds	r18, 0x015A
			ISW8_SW_ON << ISW8_LED;
     67a:	90 91 5f 01 	lds	r25, 0x015F
     67e:	97 95       	ror	r25
     680:	99 27       	eor	r25, r25
     682:	97 95       	ror	r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     684:	81 70       	andi	r24, 0x01	; 1
     686:	98 2b       	or	r25, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     688:	cc 1f       	adc	r28, r28
     68a:	cc 27       	eor	r28, r28
     68c:	cc 1f       	adc	r28, r28
     68e:	cc 0f       	add	r28, r28
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     690:	c9 2b       	or	r28, r25
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     692:	46 95       	lsr	r20
     694:	46 95       	lsr	r20
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	41 70       	andi	r20, 0x01	; 1
     69a:	50 70       	andi	r21, 0x00	; 0
     69c:	ca 01       	movw	r24, r20
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6a6:	8c 2b       	or	r24, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     6a8:	06 95       	lsr	r16
     6aa:	10 e0       	ldi	r17, 0x00	; 0
     6ac:	01 70       	andi	r16, 0x01	; 1
     6ae:	10 70       	andi	r17, 0x00	; 0
     6b0:	e8 01       	movw	r28, r16
     6b2:	cc 0f       	add	r28, r28
     6b4:	dd 1f       	adc	r29, r29
     6b6:	cc 0f       	add	r28, r28
     6b8:	dd 1f       	adc	r29, r29
     6ba:	cc 0f       	add	r28, r28
     6bc:	dd 1f       	adc	r29, r29
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6be:	c8 2b       	or	r28, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     6c0:	a2 95       	swap	r26
     6c2:	af 70       	andi	r26, 0x0F	; 15
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	a1 70       	andi	r26, 0x01	; 1
     6c8:	b0 70       	andi	r27, 0x00	; 0
     6ca:	fd 01       	movw	r30, r26
     6cc:	e2 95       	swap	r30
     6ce:	f2 95       	swap	r31
     6d0:	f0 7f       	andi	r31, 0xF0	; 240
     6d2:	fe 27       	eor	r31, r30
     6d4:	e0 7f       	andi	r30, 0xF0	; 240
     6d6:	fe 27       	eor	r31, r30
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6d8:	ec 2b       	or	r30, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     6da:	62 95       	swap	r22
     6dc:	66 95       	lsr	r22
     6de:	67 70       	andi	r22, 0x07	; 7
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	61 70       	andi	r22, 0x01	; 1
     6e4:	70 70       	andi	r23, 0x00	; 0
     6e6:	ab 01       	movw	r20, r22
     6e8:	44 0f       	add	r20, r20
     6ea:	55 1f       	adc	r21, r21
     6ec:	42 95       	swap	r20
     6ee:	52 95       	swap	r21
     6f0:	50 7f       	andi	r21, 0xF0	; 240
     6f2:	54 27       	eor	r21, r20
     6f4:	40 7f       	andi	r20, 0xF0	; 240
     6f6:	54 27       	eor	r21, r20
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6f8:	4e 2b       	or	r20, r30
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     6fa:	22 95       	swap	r18
     6fc:	26 95       	lsr	r18
     6fe:	26 95       	lsr	r18
     700:	23 70       	andi	r18, 0x03	; 3
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	21 70       	andi	r18, 0x01	; 1
     706:	30 70       	andi	r19, 0x00	; 0
     708:	c9 01       	movw	r24, r18
     70a:	00 24       	eor	r0, r0
     70c:	96 95       	lsr	r25
     70e:	87 95       	ror	r24
     710:	07 94       	ror	r0
     712:	96 95       	lsr	r25
     714:	87 95       	ror	r24
     716:	07 94       	ror	r0
     718:	98 2f       	mov	r25, r24
     71a:	80 2d       	mov	r24, r0
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     71c:	84 2b       	or	r24, r20
     71e:	8e bd       	out	0x2e, r24	; 46
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
			ISW8_SW_ON << ISW8_LED;
			
			while (!(SPSR & (1<<SPIF)));
     720:	0d b4       	in	r0, 0x2d	; 45
     722:	07 fe       	sbrs	r0, 7
     724:	fd cf       	rjmp	.-6      	; 0x720 <update_spi+0xcc>
			
			//Now read SPDR for switch data shifted in from 74XX165 U14
			spi_sw_current_state = SPDR;
     726:	8e b5       	in	r24, 0x2e	; 46
     728:	80 93 5c 01 	sts	0x015C, r24
			
			spi_sw_current_state ^= spi_sw_previous_state;
     72c:	80 91 5c 01 	lds	r24, 0x015C
     730:	90 91 5b 01 	lds	r25, 0x015B
     734:	89 27       	eor	r24, r25
     736:	80 93 5c 01 	sts	0x015C, r24
			spi_sw_previous_state ^= spi_sw_current_state;
     73a:	80 91 5b 01 	lds	r24, 0x015B
     73e:	90 91 5c 01 	lds	r25, 0x015C
     742:	89 27       	eor	r24, r25
     744:	80 93 5b 01 	sts	0x015B, r24
			spi_sw_current_state &= spi_sw_previous_state;
     748:	80 91 5c 01 	lds	r24, 0x015C
     74c:	90 91 5b 01 	lds	r25, 0x015B
     750:	89 23       	and	r24, r25
     752:	80 93 5c 01 	sts	0x015C, r24
			//if (spi_sw_current_state & (1<<ISW4_SW)) sw_latch_five ^= (1 << ISW4_SW);
			//if (spi_sw_current_state & (1<<ISW5_SW)) sw_latch_five ^= (1 << ISW5_SW);
			//if (spi_sw_current_state & (1<<ISW6_SW)) sw_latch_five ^= (1 << ISW6_SW);
			//if (spi_sw_current_state & (1<<ISW7_SW)) sw_latch_five ^= (1 << ISW7_SW);
			
			sw_latch_five ^= spi_sw_current_state;
     756:	80 91 5a 01 	lds	r24, 0x015A
     75a:	90 91 5c 01 	lds	r25, 0x015C
     75e:	89 27       	eor	r24, r25
     760:	80 93 5a 01 	sts	0x015A, r24
			
			//SHIFT 4th BYTE
			SPDR = 0; //no LEDs connected in current test set up
     764:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     766:	0d b4       	in	r0, 0x2d	; 45
     768:	07 fe       	sbrs	r0, 7
     76a:	fd cf       	rjmp	.-6      	; 0x766 <update_spi+0x112>
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//check if ISW12_SW bit is set
			if (SPDR >> 5 & 1)
     76c:	8e b5       	in	r24, 0x2e	; 46
     76e:	82 95       	swap	r24
     770:	86 95       	lsr	r24
     772:	87 70       	andi	r24, 0x07	; 7
     774:	80 ff       	sbrs	r24, 0
     776:	04 c0       	rjmp	.+8      	; 0x780 <update_spi+0x12c>
			{
				ISW12_SW_ON = 1;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	80 93 62 01 	sts	0x0162, r24
     77e:	02 c0       	rjmp	.+4      	; 0x784 <update_spi+0x130>
			}
			else
			{
				ISW12_SW_ON = 0;
     780:	10 92 62 01 	sts	0x0162, r1
			}
			//check if ISW13_SW bit is set
			if (SPDR >> 6 & 1)
     784:	8e b5       	in	r24, 0x2e	; 46
     786:	82 95       	swap	r24
     788:	86 95       	lsr	r24
     78a:	86 95       	lsr	r24
     78c:	83 70       	andi	r24, 0x03	; 3
     78e:	80 ff       	sbrs	r24, 0
     790:	04 c0       	rjmp	.+8      	; 0x79a <update_spi+0x146>
			{
				ISW13_SW_ON = 1;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	80 93 61 01 	sts	0x0161, r24
     798:	02 c0       	rjmp	.+4      	; 0x79e <update_spi+0x14a>
			}
			else
			{
				ISW13_SW_ON = 0;
     79a:	10 92 61 01 	sts	0x0161, r1
			}
			
			//SHIFT 3th BYTE
			SPDR = 0;
     79e:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     7a0:	0d b4       	in	r0, 0x2d	; 45
     7a2:	07 fe       	sbrs	r0, 7
     7a4:	fd cf       	rjmp	.-6      	; 0x7a0 <update_spi+0x14c>

			//SHIFT 2th BYTE
			SPDR = 0;
     7a6:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     7a8:	0d b4       	in	r0, 0x2d	; 45
     7aa:	07 fe       	sbrs	r0, 7
     7ac:	fd cf       	rjmp	.-6      	; 0x7a8 <update_spi+0x154>
			
			//SHIFT 1st BYTE
			//SPDR = (ISW12_SW_ON << 2) | ISW11_LED; //TURN ON ISW12 (if ISW12_SW is ON) and ISW11 LEDs, both on 74XX595 U8, first shift register in chain
			SPDR = (ISW12_SW_ON <<2) | (ISW13_SW_ON << 7); //turn on ISW12 if ISW12_SW is ON, turn ISW11 (MSB of first shift register chain) if ISW13_SW is ON
     7ae:	80 91 62 01 	lds	r24, 0x0162
     7b2:	90 91 61 01 	lds	r25, 0x0161
     7b6:	97 95       	ror	r25
     7b8:	99 27       	eor	r25, r25
     7ba:	97 95       	ror	r25
     7bc:	88 0f       	add	r24, r24
     7be:	88 0f       	add	r24, r24
     7c0:	89 2b       	or	r24, r25
     7c2:	8e bd       	out	0x2e, r24	; 46
			//Wait for SPI shift to complete
			while (!(SPSR & (1<<SPIF)));
     7c4:	0d b4       	in	r0, 0x2d	; 45
     7c6:	07 fe       	sbrs	r0, 7
     7c8:	fd cf       	rjmp	.-6      	; 0x7c4 <update_spi+0x170>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     7ca:	ed ed       	ldi	r30, 0xDD	; 221
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	87 7f       	andi	r24, 0xF7	; 247
     7d2:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     7d4:	80 81       	ld	r24, Z
     7d6:	88 60       	ori	r24, 0x08	; 8
     7d8:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     7da:	2d 98       	cbi	0x05, 5	; 5
			//this toggle code works, but I haven't figured out how it works
			//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
			current_sw_state = SWITCH_PORT;
     7dc:	8f b1       	in	r24, 0x0f	; 15
     7de:	80 93 5d 01 	sts	0x015D, r24
			current_sw_state ^= previous_sw_state;
     7e2:	80 91 5d 01 	lds	r24, 0x015D
     7e6:	90 91 5e 01 	lds	r25, 0x015E
     7ea:	89 27       	eor	r24, r25
     7ec:	80 93 5d 01 	sts	0x015D, r24
			previous_sw_state ^= current_sw_state;
     7f0:	80 91 5e 01 	lds	r24, 0x015E
     7f4:	90 91 5d 01 	lds	r25, 0x015D
     7f8:	89 27       	eor	r24, r25
     7fa:	80 93 5e 01 	sts	0x015E, r24
			current_sw_state &= previous_sw_state;
     7fe:	80 91 5d 01 	lds	r24, 0x015D
     802:	90 91 5e 01 	lds	r25, 0x015E
     806:	89 23       	and	r24, r25
     808:	80 93 5d 01 	sts	0x015D, r24
			
			if (current_sw_state & (1<<ISW8_SW))
     80c:	80 91 5d 01 	lds	r24, 0x015D
     810:	82 ff       	sbrs	r24, 2
     812:	06 c0       	rjmp	.+12     	; 0x820 <update_spi+0x1cc>
			{
				ISW8_SW_ON ^= 1 << 0; //toggle switch state
     814:	90 91 5f 01 	lds	r25, 0x015F
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	89 27       	eor	r24, r25
     81c:	80 93 5f 01 	sts	0x015F, r24
			}
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     820:	ed ed       	ldi	r30, 0xDD	; 221
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	8f 7b       	andi	r24, 0xBF	; 191
     828:	80 83       	st	Z, r24
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
     82a:	40 91 5a 01 	lds	r20, 0x015A
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     82e:	30 91 5a 01 	lds	r19, 0x015A
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
     832:	c0 91 5a 01 	lds	r28, 0x015A
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
     836:	00 91 5a 01 	lds	r16, 0x015A
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
     83a:	60 91 5a 01 	lds	r22, 0x015A
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
     83e:	a0 91 5a 01 	lds	r26, 0x015A
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
     842:	20 91 5a 01 	lds	r18, 0x015A
			ISW8_SW_ON << 4;
     846:	80 91 5f 01 	lds	r24, 0x015F
     84a:	82 95       	swap	r24
     84c:	80 7f       	andi	r24, 0xF0	; 240
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     84e:	36 95       	lsr	r19
     850:	36 95       	lsr	r19
     852:	31 70       	andi	r19, 0x01	; 1
     854:	38 2b       	or	r19, r24
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
     856:	10 e0       	ldi	r17, 0x00	; 0
     858:	01 70       	andi	r16, 0x01	; 1
     85a:	10 70       	andi	r17, 0x00	; 0
     85c:	c8 01       	movw	r24, r16
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     862:	83 2b       	or	r24, r19
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
     864:	a2 95       	swap	r26
     866:	a6 95       	lsr	r26
     868:	a7 70       	andi	r26, 0x07	; 7
     86a:	a7 95       	ror	r26
     86c:	aa 27       	eor	r26, r26
     86e:	a7 95       	ror	r26
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     870:	8a 2b       	or	r24, r26
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
     872:	44 1f       	adc	r20, r20
     874:	44 27       	eor	r20, r20
     876:	44 1f       	adc	r20, r20
     878:	44 0f       	add	r20, r20
     87a:	44 0f       	add	r20, r20
     87c:	44 0f       	add	r20, r20
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     87e:	48 2b       	or	r20, r24
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
     880:	c6 95       	lsr	r28
     882:	d0 e0       	ldi	r29, 0x00	; 0
     884:	c1 70       	andi	r28, 0x01	; 1
     886:	d0 70       	andi	r29, 0x00	; 0
     888:	de 01       	movw	r26, r28
     88a:	aa 0f       	add	r26, r26
     88c:	bb 1f       	adc	r27, r27
     88e:	aa 0f       	add	r26, r26
     890:	bb 1f       	adc	r27, r27
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     892:	a4 2b       	or	r26, r20
			((sw_latch_five >> ISW4_SW) & 1) << 3 |
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
     894:	62 95       	swap	r22
     896:	6f 70       	andi	r22, 0x0F	; 15
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	61 70       	andi	r22, 0x01	; 1
     89c:	70 70       	andi	r23, 0x00	; 0
     89e:	ab 01       	movw	r20, r22
     8a0:	00 24       	eor	r0, r0
     8a2:	56 95       	lsr	r21
     8a4:	47 95       	ror	r20
     8a6:	07 94       	ror	r0
     8a8:	56 95       	lsr	r21
     8aa:	47 95       	ror	r20
     8ac:	07 94       	ror	r0
     8ae:	54 2f       	mov	r21, r20
     8b0:	40 2d       	mov	r20, r0
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8b2:	4a 2b       	or	r20, r26
			((sw_latch_five >> ISW1_SW) & 1) << 0 |
			((sw_latch_five >> ISW2_SW) & 1) << 2 |
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
     8b4:	22 95       	swap	r18
     8b6:	26 95       	lsr	r18
     8b8:	26 95       	lsr	r18
     8ba:	23 70       	andi	r18, 0x03	; 3
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	21 70       	andi	r18, 0x01	; 1
     8c0:	30 70       	andi	r19, 0x00	; 0
     8c2:	c9 01       	movw	r24, r18
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	82 95       	swap	r24
     8ca:	92 95       	swap	r25
     8cc:	90 7f       	andi	r25, 0xF0	; 240
     8ce:	98 27       	eor	r25, r24
     8d0:	80 7f       	andi	r24, 0xF0	; 240
     8d2:	98 27       	eor	r25, r24
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8d4:	84 2b       	or	r24, r20
     8d6:	82 b9       	out	0x02, r24	; 2
			((sw_latch_five >> ISW3_SW) & 1) << 1 |
			((sw_latch_five >> ISW5_SW) & 1) << 6 |
			((sw_latch_five >> ISW6_SW) & 1) << 7 |
			((sw_latch_five >> ISW7_SW) & 1) << 5 |
			ISW8_SW_ON << 4;
			VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     8d8:	80 81       	ld	r24, Z
     8da:	80 64       	ori	r24, 0x40	; 64
     8dc:	80 83       	st	Z, r24
     8de:	00 00       	nop
			_delay_us(1);
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     8e0:	80 81       	ld	r24, Z
     8e2:	8f 7b       	andi	r24, 0xBF	; 191
     8e4:	80 83       	st	Z, r24
			DATA_BUS = 0;
     8e6:	12 b8       	out	0x02, r1	; 2
	
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     8f2:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     8f4:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     8f6:	74 83       	std	Z+4, r23	; 0x04
     8f8:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
     8fa:	11 82       	std	Z+1, r1	; 0x01
     8fc:	10 82       	st	Z, r1
}
     8fe:	08 95       	ret

00000900 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
     908:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     90a:	0e 94 ef 04 	call	0x9de	; 0x9de <store_and_clear_interrupt>
     90e:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     910:	39 81       	ldd	r19, Y+1	; 0x01
     912:	83 2f       	mov	r24, r19
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	6a 81       	ldd	r22, Y+2	; 0x02
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divmodhi4>
     920:	48 81       	ld	r20, Y
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	84 17       	cp	r24, r20
     926:	95 07       	cpc	r25, r21
     928:	29 f4       	brne	.+10     	; 0x934 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
     92a:	82 2f       	mov	r24, r18
     92c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <restore_interrupt_setting>
      return false;
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	11 c0       	rjmp	.+34     	; 0x956 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
     934:	eb 81       	ldd	r30, Y+3	; 0x03
     936:	fc 81       	ldd	r31, Y+4	; 0x04
     938:	e3 0f       	add	r30, r19
     93a:	f1 1d       	adc	r31, r1
     93c:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	6a 81       	ldd	r22, Y+2	; 0x02
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divmodhi4>
     94c:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     94e:	82 2f       	mov	r24, r18
     950:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <restore_interrupt_setting>
      return true;
     954:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	08 95       	ret

0000095e <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     964:	0e 94 ef 04 	call	0x9de	; 0x9de <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     968:	29 81       	ldd	r18, Y+1	; 0x01
     96a:	98 81       	ld	r25, Y
     96c:	29 17       	cp	r18, r25
     96e:	18 f0       	brcs	.+6      	; 0x976 <bytequeue_length+0x18>
      len = queue->end - queue->start;
     970:	c2 2f       	mov	r28, r18
     972:	c9 1b       	sub	r28, r25
     974:	03 c0       	rjmp	.+6      	; 0x97c <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
     976:	ca 81       	ldd	r28, Y+2	; 0x02
     978:	c2 0f       	add	r28, r18
     97a:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
     97c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <restore_interrupt_setting>
   return len;
}
     980:	8c 2f       	mov	r24, r28
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     988:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     98a:	20 81       	ld	r18, Z
     98c:	86 2f       	mov	r24, r22
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	82 0f       	add	r24, r18
     992:	91 1d       	adc	r25, r1
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divmodhi4>
     99c:	03 80       	ldd	r0, Z+3	; 0x03
     99e:	f4 81       	ldd	r31, Z+4	; 0x04
     9a0:	e0 2d       	mov	r30, r0
     9a2:	e8 0f       	add	r30, r24
     9a4:	f9 1f       	adc	r31, r25
}
     9a6:	80 81       	ld	r24, Z
     9a8:	08 95       	ret

000009aa <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
     9b2:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     9b4:	0e 94 ef 04 	call	0x9de	; 0x9de <store_and_clear_interrupt>
     9b8:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     9ba:	88 81       	ld	r24, Y
     9bc:	21 2f       	mov	r18, r17
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	28 0f       	add	r18, r24
     9c2:	31 1d       	adc	r19, r1
     9c4:	6a 81       	ldd	r22, Y+2	; 0x02
     9c6:	c9 01       	movw	r24, r18
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divmodhi4>
     9ce:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
     9d0:	84 2f       	mov	r24, r20
     9d2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <restore_interrupt_setting>
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	08 95       	ret

000009de <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
     9de:	8f b7       	in	r24, 0x3f	; 63
   cli();
     9e0:	f8 94       	cli
   return sreg;
}
     9e2:	08 95       	ret

000009e4 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
     9e4:	8f bf       	out	0x3f, r24	; 63
}
     9e6:	08 95       	ret

000009e8 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     9e8:	88 1f       	adc	r24, r24
     9ea:	88 27       	eor	r24, r24
     9ec:	88 1f       	adc	r24, r24
     9ee:	08 95       	ret

000009f0 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	88 3f       	cpi	r24, 0xF8	; 248
     9f4:	08 f4       	brcc	.+2      	; 0x9f8 <midi_is_realtime+0x8>
     9f6:	90 e0       	ldi	r25, 0x00	; 0
}
     9f8:	89 2f       	mov	r24, r25
     9fa:	08 95       	ret

000009fc <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     9fc:	28 2f       	mov	r18, r24
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	20 7f       	andi	r18, 0xF0	; 240
     a02:	30 70       	andi	r19, 0x00	; 0
     a04:	20 3c       	cpi	r18, 0xC0	; 192
     a06:	31 05       	cpc	r19, r1
     a08:	e9 f1       	breq	.+122    	; 0xa84 <midi_packet_length+0x88>
     a0a:	21 3c       	cpi	r18, 0xC1	; 193
     a0c:	31 05       	cpc	r19, r1
     a0e:	8c f4       	brge	.+34     	; 0xa32 <midi_packet_length+0x36>
     a10:	20 39       	cpi	r18, 0x90	; 144
     a12:	31 05       	cpc	r19, r1
     a14:	e1 f0       	breq	.+56     	; 0xa4e <midi_packet_length+0x52>
     a16:	21 39       	cpi	r18, 0x91	; 145
     a18:	31 05       	cpc	r19, r1
     a1a:	24 f4       	brge	.+8      	; 0xa24 <midi_packet_length+0x28>
     a1c:	20 38       	cpi	r18, 0x80	; 128
     a1e:	31 05       	cpc	r19, r1
     a20:	79 f5       	brne	.+94     	; 0xa80 <midi_packet_length+0x84>
     a22:	15 c0       	rjmp	.+42     	; 0xa4e <midi_packet_length+0x52>
     a24:	20 3a       	cpi	r18, 0xA0	; 160
     a26:	31 05       	cpc	r19, r1
     a28:	91 f0       	breq	.+36     	; 0xa4e <midi_packet_length+0x52>
     a2a:	20 3b       	cpi	r18, 0xB0	; 176
     a2c:	31 05       	cpc	r19, r1
     a2e:	41 f5       	brne	.+80     	; 0xa80 <midi_packet_length+0x84>
     a30:	0e c0       	rjmp	.+28     	; 0xa4e <midi_packet_length+0x52>
     a32:	20 3e       	cpi	r18, 0xE0	; 224
     a34:	31 05       	cpc	r19, r1
     a36:	59 f0       	breq	.+22     	; 0xa4e <midi_packet_length+0x52>
     a38:	21 3e       	cpi	r18, 0xE1	; 225
     a3a:	31 05       	cpc	r19, r1
     a3c:	24 f4       	brge	.+8      	; 0xa46 <midi_packet_length+0x4a>
     a3e:	20 3d       	cpi	r18, 0xD0	; 208
     a40:	31 05       	cpc	r19, r1
     a42:	f1 f4       	brne	.+60     	; 0xa80 <midi_packet_length+0x84>
     a44:	1f c0       	rjmp	.+62     	; 0xa84 <midi_packet_length+0x88>
     a46:	20 3f       	cpi	r18, 0xF0	; 240
     a48:	31 05       	cpc	r19, r1
     a4a:	d1 f4       	brne	.+52     	; 0xa80 <midi_packet_length+0x84>
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
     a52:	86 3f       	cpi	r24, 0xF6	; 246
     a54:	79 f0       	breq	.+30     	; 0xa74 <midi_packet_length+0x78>
     a56:	87 3f       	cpi	r24, 0xF7	; 247
     a58:	38 f4       	brcc	.+14     	; 0xa68 <midi_packet_length+0x6c>
     a5a:	82 3f       	cpi	r24, 0xF2	; 242
     a5c:	a9 f0       	breq	.+42     	; 0xa88 <midi_packet_length+0x8c>
     a5e:	83 3f       	cpi	r24, 0xF3	; 243
     a60:	59 f0       	breq	.+22     	; 0xa78 <midi_packet_length+0x7c>
     a62:	81 3f       	cpi	r24, 0xF1	; 241
     a64:	59 f4       	brne	.+22     	; 0xa7c <midi_packet_length+0x80>
     a66:	08 c0       	rjmp	.+16     	; 0xa78 <midi_packet_length+0x7c>
     a68:	88 3f       	cpi	r24, 0xF8	; 248
     a6a:	40 f0       	brcs	.+16     	; 0xa7c <midi_packet_length+0x80>
     a6c:	8d 3f       	cpi	r24, 0xFD	; 253
     a6e:	10 f0       	brcs	.+4      	; 0xa74 <midi_packet_length+0x78>
     a70:	8e 3f       	cpi	r24, 0xFE	; 254
     a72:	20 f0       	brcs	.+8      	; 0xa7c <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 95       	ret
         }
      default:
         return UNDEFINED;
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
     a88:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
     a8a:	08 95       	ret

00000a8c <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
     a8c:	0f 93       	push	r16
     a8e:	34 2f       	mov	r19, r20
     a90:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
     a92:	46 2f       	mov	r20, r22
     a94:	4f 70       	andi	r20, 0x0F	; 15
     a96:	40 6b       	ori	r20, 0xB0	; 176
     a98:	23 2f       	mov	r18, r19
     a9a:	2f 77       	andi	r18, 0x7F	; 127
     a9c:	0f 77       	andi	r16, 0x7F	; 127
     a9e:	dc 01       	movw	r26, r24
     aa0:	ed 91       	ld	r30, X+
     aa2:	fc 91       	ld	r31, X
     aa4:	63 e0       	ldi	r22, 0x03	; 3
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
     aaa:	0f 91       	pop	r16
     aac:	08 95       	ret

00000aae <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     aae:	0f 93       	push	r16
     ab0:	34 2f       	mov	r19, r20
     ab2:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     ab4:	46 2f       	mov	r20, r22
     ab6:	4f 70       	andi	r20, 0x0F	; 15
     ab8:	40 69       	ori	r20, 0x90	; 144
     aba:	23 2f       	mov	r18, r19
     abc:	2f 77       	andi	r18, 0x7F	; 127
     abe:	0f 77       	andi	r16, 0x7F	; 127
     ac0:	dc 01       	movw	r26, r24
     ac2:	ed 91       	ld	r30, X+
     ac4:	fc 91       	ld	r31, X
     ac6:	63 e0       	ldi	r22, 0x03	; 3
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     acc:	0f 91       	pop	r16
     ace:	08 95       	ret

00000ad0 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     ad0:	0f 93       	push	r16
     ad2:	34 2f       	mov	r19, r20
     ad4:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     ad6:	46 2f       	mov	r20, r22
     ad8:	4f 70       	andi	r20, 0x0F	; 15
     ada:	40 68       	ori	r20, 0x80	; 128
     adc:	23 2f       	mov	r18, r19
     ade:	2f 77       	andi	r18, 0x7F	; 127
     ae0:	0f 77       	andi	r16, 0x7F	; 127
     ae2:	dc 01       	movw	r26, r24
     ae4:	ed 91       	ld	r30, X+
     ae6:	fc 91       	ld	r31, X
     ae8:	63 e0       	ldi	r22, 0x03	; 3
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     aee:	0f 91       	pop	r16
     af0:	08 95       	ret

00000af2 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
     af2:	0f 93       	push	r16
     af4:	34 2f       	mov	r19, r20
     af6:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
     af8:	46 2f       	mov	r20, r22
     afa:	4f 70       	andi	r20, 0x0F	; 15
     afc:	40 6a       	ori	r20, 0xA0	; 160
     afe:	23 2f       	mov	r18, r19
     b00:	2f 77       	andi	r18, 0x7F	; 127
     b02:	0f 77       	andi	r16, 0x7F	; 127
     b04:	dc 01       	movw	r26, r24
     b06:	ed 91       	ld	r30, X+
     b08:	fc 91       	ld	r31, X
     b0a:	63 e0       	ldi	r22, 0x03	; 3
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
     b18:	20 e2       	ldi	r18, 0x20	; 32
     b1a:	40 30       	cpi	r20, 0x00	; 0
     b1c:	52 07       	cpc	r21, r18
     b1e:	44 f4       	brge	.+16     	; 0xb30 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
     b20:	a0 ee       	ldi	r26, 0xE0	; 224
     b22:	40 30       	cpi	r20, 0x00	; 0
     b24:	5a 07       	cpc	r21, r26
     b26:	3c f0       	brlt	.+14     	; 0xb36 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
     b28:	8a 01       	movw	r16, r20
     b2a:	00 50       	subi	r16, 0x00	; 0
     b2c:	10 4e       	sbci	r17, 0xE0	; 224
     b2e:	05 c0       	rjmp	.+10     	; 0xb3a <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
     b30:	0f ef       	ldi	r16, 0xFF	; 255
     b32:	1f e3       	ldi	r17, 0x3F	; 63
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
     b36:	00 e0       	ldi	r16, 0x00	; 0
     b38:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     b3a:	46 2f       	mov	r20, r22
     b3c:	4f 70       	andi	r20, 0x0F	; 15
     b3e:	40 6e       	ori	r20, 0xE0	; 224
     b40:	20 2f       	mov	r18, r16
     b42:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
     b44:	00 0f       	add	r16, r16
     b46:	01 2f       	mov	r16, r17
     b48:	00 1f       	adc	r16, r16
     b4a:	11 0b       	sbc	r17, r17
     b4c:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     b4e:	0f 77       	andi	r16, 0x7F	; 127
     b50:	dc 01       	movw	r26, r24
     b52:	ed 91       	ld	r30, X+
     b54:	fc 91       	ld	r31, X
     b56:	63 e0       	ldi	r22, 0x03	; 3
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	08 95       	ret

00000b62 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
     b62:	0f 93       	push	r16
     b64:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     b66:	46 2f       	mov	r20, r22
     b68:	4f 70       	andi	r20, 0x0F	; 15
     b6a:	40 6c       	ori	r20, 0xC0	; 192
     b6c:	2f 77       	andi	r18, 0x7F	; 127
     b6e:	dc 01       	movw	r26, r24
     b70:	ed 91       	ld	r30, X+
     b72:	fc 91       	ld	r31, X
     b74:	62 e0       	ldi	r22, 0x02	; 2
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	00 e0       	ldi	r16, 0x00	; 0
     b7a:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
     b7c:	0f 91       	pop	r16
     b7e:	08 95       	ret

00000b80 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
     b80:	0f 93       	push	r16
     b82:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     b84:	46 2f       	mov	r20, r22
     b86:	4f 70       	andi	r20, 0x0F	; 15
     b88:	40 6d       	ori	r20, 0xD0	; 208
     b8a:	2f 77       	andi	r18, 0x7F	; 127
     b8c:	dc 01       	movw	r26, r24
     b8e:	ed 91       	ld	r30, X+
     b90:	fc 91       	ld	r31, X
     b92:	62 e0       	ldi	r22, 0x02	; 2
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	00 e0       	ldi	r16, 0x00	; 0
     b98:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
     b9a:	0f 91       	pop	r16
     b9c:	08 95       	ret

00000b9e <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
     b9e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
     ba0:	dc 01       	movw	r26, r24
     ba2:	ed 91       	ld	r30, X+
     ba4:	fc 91       	ld	r31, X
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	48 ef       	ldi	r20, 0xF8	; 248
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	09 95       	icall
}
     bb2:	0f 91       	pop	r16
     bb4:	08 95       	ret

00000bb6 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
     bb6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
     bb8:	dc 01       	movw	r26, r24
     bba:	ed 91       	ld	r30, X+
     bbc:	fc 91       	ld	r31, X
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	49 ef       	ldi	r20, 0xF9	; 249
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	00 e0       	ldi	r16, 0x00	; 0
     bc8:	09 95       	icall
}
     bca:	0f 91       	pop	r16
     bcc:	08 95       	ret

00000bce <midi_send_start>:

void midi_send_start(MidiDevice * device){
     bce:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
     bd0:	dc 01       	movw	r26, r24
     bd2:	ed 91       	ld	r30, X+
     bd4:	fc 91       	ld	r31, X
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	4a ef       	ldi	r20, 0xFA	; 250
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	00 e0       	ldi	r16, 0x00	; 0
     be0:	09 95       	icall
}
     be2:	0f 91       	pop	r16
     be4:	08 95       	ret

00000be6 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
     be6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
     be8:	dc 01       	movw	r26, r24
     bea:	ed 91       	ld	r30, X+
     bec:	fc 91       	ld	r31, X
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	4b ef       	ldi	r20, 0xFB	; 251
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	00 e0       	ldi	r16, 0x00	; 0
     bf8:	09 95       	icall
}
     bfa:	0f 91       	pop	r16
     bfc:	08 95       	ret

00000bfe <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
     bfe:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
     c00:	dc 01       	movw	r26, r24
     c02:	ed 91       	ld	r30, X+
     c04:	fc 91       	ld	r31, X
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	4c ef       	ldi	r20, 0xFC	; 252
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	00 e0       	ldi	r16, 0x00	; 0
     c10:	09 95       	icall
}
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
     c16:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
     c18:	dc 01       	movw	r26, r24
     c1a:	ed 91       	ld	r30, X+
     c1c:	fc 91       	ld	r31, X
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	4e ef       	ldi	r20, 0xFE	; 254
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	00 e0       	ldi	r16, 0x00	; 0
     c28:	09 95       	icall
}
     c2a:	0f 91       	pop	r16
     c2c:	08 95       	ret

00000c2e <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
     c2e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
     c30:	dc 01       	movw	r26, r24
     c32:	ed 91       	ld	r30, X+
     c34:	fc 91       	ld	r31, X
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	4f ef       	ldi	r20, 0xFF	; 255
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	00 e0       	ldi	r16, 0x00	; 0
     c40:	09 95       	icall
}
     c42:	0f 91       	pop	r16
     c44:	08 95       	ret

00000c46 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
     c46:	0f 93       	push	r16
   device->send_func(device, 2,
     c48:	26 2f       	mov	r18, r22
     c4a:	2f 77       	andi	r18, 0x7F	; 127
     c4c:	dc 01       	movw	r26, r24
     c4e:	ed 91       	ld	r30, X+
     c50:	fc 91       	ld	r31, X
     c52:	62 e0       	ldi	r22, 0x02	; 2
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	41 ef       	ldi	r20, 0xF1	; 241
     c58:	00 e0       	ldi	r16, 0x00	; 0
     c5a:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret

00000c60 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
   device->send_func(device, 3,
     c64:	26 2f       	mov	r18, r22
     c66:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
     c68:	8b 01       	movw	r16, r22
     c6a:	00 0f       	add	r16, r16
     c6c:	01 2f       	mov	r16, r17
     c6e:	00 1f       	adc	r16, r16
     c70:	11 0b       	sbc	r17, r17
     c72:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
     c74:	0f 77       	andi	r16, 0x7F	; 127
     c76:	dc 01       	movw	r26, r24
     c78:	ed 91       	ld	r30, X+
     c7a:	fc 91       	ld	r31, X
     c7c:	63 e0       	ldi	r22, 0x03	; 3
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	42 ef       	ldi	r20, 0xF2	; 242
     c82:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	08 95       	ret

00000c8a <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
     c8a:	0f 93       	push	r16
   device->send_func(device, 2,
     c8c:	26 2f       	mov	r18, r22
     c8e:	2f 77       	andi	r18, 0x7F	; 127
     c90:	dc 01       	movw	r26, r24
     c92:	ed 91       	ld	r30, X+
     c94:	fc 91       	ld	r31, X
     c96:	62 e0       	ldi	r22, 0x02	; 2
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	43 ef       	ldi	r20, 0xF3	; 243
     c9c:	00 e0       	ldi	r16, 0x00	; 0
     c9e:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
     ca4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
     ca6:	dc 01       	movw	r26, r24
     ca8:	ed 91       	ld	r30, X+
     caa:	fc 91       	ld	r31, X
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	46 ef       	ldi	r20, 0xF6	; 246
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	00 e0       	ldi	r16, 0x00	; 0
     cb6:	09 95       	icall
}
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
     cbc:	0f 93       	push	r16
     cbe:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
     cc0:	dc 01       	movw	r26, r24
     cc2:	ed 91       	ld	r30, X+
     cc4:	fc 91       	ld	r31, X
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	00 e0       	ldi	r16, 0x00	; 0
     cce:	09 95       	icall
}
     cd0:	0f 91       	pop	r16
     cd2:	08 95       	ret

00000cd4 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
     cd4:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
     cd6:	dc 01       	movw	r26, r24
     cd8:	ed 91       	ld	r30, X+
     cda:	fc 91       	ld	r31, X
     cdc:	09 95       	icall
}
     cde:	0f 91       	pop	r16
     ce0:	08 95       	ret

00000ce2 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
     ce2:	6f 92       	push	r6
     ce4:	7f 92       	push	r7
     ce6:	8f 92       	push	r8
     ce8:	9f 92       	push	r9
     cea:	af 92       	push	r10
     cec:	bf 92       	push	r11
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <midi_send_array+0x1e>
     d00:	0f 92       	push	r0
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	4c 01       	movw	r8, r24
     d08:	6b 01       	movw	r12, r22
     d0a:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
     d0c:	61 15       	cp	r22, r1
     d0e:	71 05       	cpc	r23, r1
     d10:	41 f1       	breq	.+80     	; 0xd62 <midi_send_array+0x80>
     d12:	ee 24       	eor	r14, r14
     d14:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
     d16:	0f 2e       	mov	r0, r31
     d18:	f3 e0       	ldi	r31, 0x03	; 3
     d1a:	6f 2e       	mov	r6, r31
     d1c:	77 24       	eor	r7, r7
     d1e:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
     d20:	19 82       	std	Y+1, r1	; 0x01
     d22:	1a 82       	std	Y+2, r1	; 0x02
     d24:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
     d26:	86 01       	movw	r16, r12
     d28:	0e 19       	sub	r16, r14
     d2a:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
     d2c:	04 30       	cpi	r16, 0x04	; 4
     d2e:	11 05       	cpc	r17, r1
     d30:	08 f0       	brcs	.+2      	; 0xd34 <midi_send_array+0x52>
     d32:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
     d34:	b5 01       	movw	r22, r10
     d36:	6e 0d       	add	r22, r14
     d38:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	40 2f       	mov	r20, r16
     d40:	51 2f       	mov	r21, r17
     d42:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
     d46:	c4 01       	movw	r24, r8
     d48:	b8 01       	movw	r22, r16
     d4a:	49 81       	ldd	r20, Y+1	; 0x01
     d4c:	2a 81       	ldd	r18, Y+2	; 0x02
     d4e:	0b 81       	ldd	r16, Y+3	; 0x03
     d50:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	e8 0e       	add	r14, r24
     d5a:	f9 1e       	adc	r15, r25
     d5c:	ec 14       	cp	r14, r12
     d5e:	fd 04       	cpc	r15, r13
     d60:	f8 f2       	brcs	.-66     	; 0xd20 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	cf 90       	pop	r12
     d78:	bf 90       	pop	r11
     d7a:	af 90       	pop	r10
     d7c:	9f 90       	pop	r9
     d7e:	8f 90       	pop	r8
     d80:	7f 90       	pop	r7
     d82:	6f 90       	pop	r6
     d84:	08 95       	ret

00000d86 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
     d86:	fc 01       	movw	r30, r24
     d88:	73 83       	std	Z+3, r23	; 0x03
     d8a:	62 83       	std	Z+2, r22	; 0x02
}
     d8c:	08 95       	ret

00000d8e <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
     d8e:	fc 01       	movw	r30, r24
     d90:	75 83       	std	Z+5, r23	; 0x05
     d92:	64 83       	std	Z+4, r22	; 0x04
}
     d94:	08 95       	ret

00000d96 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
     d96:	fc 01       	movw	r30, r24
     d98:	77 83       	std	Z+7, r23	; 0x07
     d9a:	66 83       	std	Z+6, r22	; 0x06
}
     d9c:	08 95       	ret

00000d9e <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
     d9e:	fc 01       	movw	r30, r24
     da0:	71 87       	std	Z+9, r23	; 0x09
     da2:	60 87       	std	Z+8, r22	; 0x08
}
     da4:	08 95       	ret

00000da6 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
     da6:	fc 01       	movw	r30, r24
     da8:	73 87       	std	Z+11, r23	; 0x0b
     daa:	62 87       	std	Z+10, r22	; 0x0a
}
     dac:	08 95       	ret

00000dae <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
     dae:	fc 01       	movw	r30, r24
     db0:	75 87       	std	Z+13, r23	; 0x0d
     db2:	64 87       	std	Z+12, r22	; 0x0c
}
     db4:	08 95       	ret

00000db6 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
     db6:	fc 01       	movw	r30, r24
     db8:	77 87       	std	Z+15, r23	; 0x0f
     dba:	66 87       	std	Z+14, r22	; 0x0e
}
     dbc:	08 95       	ret

00000dbe <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
     dbe:	fc 01       	movw	r30, r24
     dc0:	71 8b       	std	Z+17, r23	; 0x11
     dc2:	60 8b       	std	Z+16, r22	; 0x10
}
     dc4:	08 95       	ret

00000dc6 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
     dc6:	fc 01       	movw	r30, r24
     dc8:	73 8b       	std	Z+19, r23	; 0x13
     dca:	62 8b       	std	Z+18, r22	; 0x12
}
     dcc:	08 95       	ret

00000dce <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
     dce:	fc 01       	movw	r30, r24
     dd0:	75 8b       	std	Z+21, r23	; 0x15
     dd2:	64 8b       	std	Z+20, r22	; 0x14
}
     dd4:	08 95       	ret

00000dd6 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
     dd6:	fc 01       	movw	r30, r24
     dd8:	77 8b       	std	Z+23, r23	; 0x17
     dda:	66 8b       	std	Z+22, r22	; 0x16
}
     ddc:	08 95       	ret

00000dde <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
     dde:	fc 01       	movw	r30, r24
     de0:	71 8f       	std	Z+25, r23	; 0x19
     de2:	60 8f       	std	Z+24, r22	; 0x18
}
     de4:	08 95       	ret

00000de6 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
     de6:	fc 01       	movw	r30, r24
     de8:	73 8f       	std	Z+27, r23	; 0x1b
     dea:	62 8f       	std	Z+26, r22	; 0x1a
}
     dec:	08 95       	ret

00000dee <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
     dee:	fc 01       	movw	r30, r24
     df0:	75 8f       	std	Z+29, r23	; 0x1d
     df2:	64 8f       	std	Z+28, r22	; 0x1c
}
     df4:	08 95       	ret

00000df6 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
     df6:	fc 01       	movw	r30, r24
     df8:	77 8f       	std	Z+31, r23	; 0x1f
     dfa:	66 8f       	std	Z+30, r22	; 0x1e
}
     dfc:	08 95       	ret

00000dfe <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
     e04:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
     e06:	1f a2       	lds	r17, 0x9f
     e08:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
     e0a:	bc 01       	movw	r22, r24
     e0c:	68 5d       	subi	r22, 0xD8	; 216
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	88 51       	subi	r24, 0x18	; 24
     e12:	9f 4f       	sbci	r25, 0xFF	; 255
     e14:	40 ec       	ldi	r20, 0xC0	; 192
     e16:	0e 94 79 04 	call	0x8f2	; 0x8f2 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
     e1a:	1b 82       	std	Y+3, r1	; 0x03
     e1c:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
     e1e:	1d 82       	std	Y+5, r1	; 0x05
     e20:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
     e22:	1f 82       	std	Y+7, r1	; 0x07
     e24:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
     e26:	19 86       	std	Y+9, r1	; 0x09
     e28:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
     e2a:	1b 86       	std	Y+11, r1	; 0x0b
     e2c:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
     e2e:	1d 86       	std	Y+13, r1	; 0x0d
     e30:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
     e32:	1f 86       	std	Y+15, r1	; 0x0f
     e34:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
     e36:	19 8a       	std	Y+17, r1	; 0x11
     e38:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
     e3a:	1b 8a       	std	Y+19, r1	; 0x13
     e3c:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
     e3e:	1d 8a       	std	Y+21, r1	; 0x15
     e40:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
     e42:	1f 8a       	std	Y+23, r1	; 0x17
     e44:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
     e46:	19 8e       	std	Y+25, r1	; 0x19
     e48:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
     e4a:	1b 8e       	std	Y+27, r1	; 0x1b
     e4c:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
     e4e:	1d 8e       	std	Y+29, r1	; 0x1d
     e50:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
     e52:	1f 8e       	std	Y+31, r1	; 0x1f
     e54:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
     e56:	19 a2       	lds	r17, 0x99
     e58:	18 a2       	lds	r17, 0x98
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
     e60:	ef 92       	push	r14
     e62:	ff 92       	push	r15
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
     e6e:	66 23       	and	r22, r22
     e70:	99 f0       	breq	.+38     	; 0xe98 <midi_device_input+0x38>
     e72:	04 2f       	mov	r16, r20
     e74:	15 2f       	mov	r17, r21
     e76:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
     e78:	0f 2e       	mov	r0, r31
     e7a:	f8 ee       	ldi	r31, 0xE8	; 232
     e7c:	ef 2e       	mov	r14, r31
     e7e:	ff 24       	eor	r15, r15
     e80:	f0 2d       	mov	r31, r0
     e82:	e8 0e       	add	r14, r24
     e84:	f9 1e       	adc	r15, r25
     e86:	f8 01       	movw	r30, r16
     e88:	61 91       	ld	r22, Z+
     e8a:	8f 01       	movw	r16, r30
     e8c:	c7 01       	movw	r24, r14
     e8e:	0e 94 80 04 	call	0x900	; 0x900 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
     e92:	cf 5f       	subi	r28, 0xFF	; 255
     e94:	cd 17       	cp	r28, r29
     e96:	b9 f7       	brne	.-18     	; 0xe86 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	08 95       	ret

00000ea6 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
     ea6:	fc 01       	movw	r30, r24
     ea8:	71 83       	std	Z+1, r23	; 0x01
     eaa:	60 83       	st	Z, r22
}
     eac:	08 95       	ret

00000eae <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
     eae:	fc 01       	movw	r30, r24
     eb0:	71 a3       	lds	r23, 0x51
     eb2:	60 a3       	lds	r22, 0x50
}
     eb4:	08 95       	ret

00000eb6 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
     eb6:	af 92       	push	r10
     eb8:	bf 92       	push	r11
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	00 d0       	rcall	.+0      	; 0xecc <midi_input_callbacks+0x16>
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	6c 01       	movw	r12, r24
     ed4:	5b 01       	movw	r10, r22
     ed6:	f4 2e       	mov	r15, r20
     ed8:	e2 2e       	mov	r14, r18
     eda:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
     edc:	dc 01       	movw	r26, r24
     ede:	95 96       	adiw	r26, 0x25	; 37
     ee0:	8c 91       	ld	r24, X
     ee2:	95 97       	sbiw	r26, 0x25	; 37
     ee4:	84 30       	cpi	r24, 0x04	; 4
     ee6:	e9 f4       	brne	.+58     	; 0xf22 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
     ee8:	5a 96       	adiw	r26, 0x1a	; 26
     eea:	ed 91       	ld	r30, X+
     eec:	fc 91       	ld	r31, X
     eee:	5b 97       	sbiw	r26, 0x1b	; 27
     ef0:	30 97       	sbiw	r30, 0x00	; 0
     ef2:	09 f4       	brne	.+2      	; 0xef6 <midi_input_callbacks+0x40>
     ef4:	ee c0       	rjmp	.+476    	; 0x10d2 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
     ef6:	cb 01       	movw	r24, r22
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	63 e0       	ldi	r22, 0x03	; 3
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
     f02:	cb 01       	movw	r24, r22
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	68 0f       	add	r22, r24
     f0a:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
     f0c:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
     f0e:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
     f10:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
     f12:	4a 2d       	mov	r20, r10
     f14:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
     f16:	c6 01       	movw	r24, r12
     f18:	9e 01       	movw	r18, r28
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	09 95       	icall
     f20:	c8 c0       	rjmp	.+400    	; 0x10b2 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
     f22:	62 30       	cpi	r22, 0x02	; 2
     f24:	71 05       	cpc	r23, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <midi_input_callbacks+0x74>
     f28:	5f c0       	rjmp	.+190    	; 0xfe8 <midi_input_callbacks+0x132>
     f2a:	63 30       	cpi	r22, 0x03	; 3
     f2c:	71 05       	cpc	r23, r1
     f2e:	29 f0       	breq	.+10     	; 0xf3a <midi_input_callbacks+0x84>
     f30:	61 30       	cpi	r22, 0x01	; 1
     f32:	71 05       	cpc	r23, r1
     f34:	09 f0       	breq	.+2      	; 0xf38 <midi_input_callbacks+0x82>
     f36:	b3 c0       	rjmp	.+358    	; 0x109e <midi_input_callbacks+0x1e8>
     f38:	99 c0       	rjmp	.+306    	; 0x106c <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     f3a:	84 2f       	mov	r24, r20
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	80 7f       	andi	r24, 0xF0	; 240
     f40:	90 70       	andi	r25, 0x00	; 0
     f42:	80 3a       	cpi	r24, 0xA0	; 160
     f44:	91 05       	cpc	r25, r1
     f46:	29 f1       	breq	.+74     	; 0xf92 <midi_input_callbacks+0xdc>
     f48:	81 3a       	cpi	r24, 0xA1	; 161
     f4a:	91 05       	cpc	r25, r1
     f4c:	3c f4       	brge	.+14     	; 0xf5c <midi_input_callbacks+0xa6>
     f4e:	80 38       	cpi	r24, 0x80	; 128
     f50:	91 05       	cpc	r25, r1
     f52:	c9 f0       	breq	.+50     	; 0xf86 <midi_input_callbacks+0xd0>
     f54:	80 39       	cpi	r24, 0x90	; 144
     f56:	91 05       	cpc	r25, r1
     f58:	91 f5       	brne	.+100    	; 0xfbe <midi_input_callbacks+0x108>
     f5a:	0f c0       	rjmp	.+30     	; 0xf7a <midi_input_callbacks+0xc4>
     f5c:	80 3e       	cpi	r24, 0xE0	; 224
     f5e:	91 05       	cpc	r25, r1
     f60:	f1 f0       	breq	.+60     	; 0xf9e <midi_input_callbacks+0xe8>
     f62:	80 3f       	cpi	r24, 0xF0	; 240
     f64:	91 05       	cpc	r25, r1
     f66:	09 f1       	breq	.+66     	; 0xfaa <midi_input_callbacks+0xf4>
     f68:	80 3b       	cpi	r24, 0xB0	; 176
     f6a:	91 05       	cpc	r25, r1
     f6c:	41 f5       	brne	.+80     	; 0xfbe <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
     f6e:	d6 01       	movw	r26, r12
     f70:	12 96       	adiw	r26, 0x02	; 2
     f72:	ed 91       	ld	r30, X+
     f74:	fc 91       	ld	r31, X
     f76:	13 97       	sbiw	r26, 0x03	; 3
              break;
     f78:	24 c0       	rjmp	.+72     	; 0xfc2 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
     f7a:	d6 01       	movw	r26, r12
     f7c:	14 96       	adiw	r26, 0x04	; 4
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	15 97       	sbiw	r26, 0x05	; 5
              break;
     f84:	1e c0       	rjmp	.+60     	; 0xfc2 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
     f86:	d6 01       	movw	r26, r12
     f88:	16 96       	adiw	r26, 0x06	; 6
     f8a:	ed 91       	ld	r30, X+
     f8c:	fc 91       	ld	r31, X
     f8e:	17 97       	sbiw	r26, 0x07	; 7
              break;
     f90:	18 c0       	rjmp	.+48     	; 0xfc2 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
     f92:	d6 01       	movw	r26, r12
     f94:	18 96       	adiw	r26, 0x08	; 8
     f96:	ed 91       	ld	r30, X+
     f98:	fc 91       	ld	r31, X
     f9a:	19 97       	sbiw	r26, 0x09	; 9
              break;
     f9c:	12 c0       	rjmp	.+36     	; 0xfc2 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
     f9e:	d6 01       	movw	r26, r12
     fa0:	1a 96       	adiw	r26, 0x0a	; 10
     fa2:	ed 91       	ld	r30, X+
     fa4:	fc 91       	ld	r31, X
     fa6:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
     fa8:	0c c0       	rjmp	.+24     	; 0xfc2 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
     faa:	b2 ef       	ldi	r27, 0xF2	; 242
     fac:	4b 17       	cp	r20, r27
     fae:	09 f0       	breq	.+2      	; 0xfb2 <midi_input_callbacks+0xfc>
     fb0:	90 c0       	rjmp	.+288    	; 0x10d2 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
     fb2:	d6 01       	movw	r26, r12
     fb4:	1c 96       	adiw	r26, 0x0c	; 12
     fb6:	ed 91       	ld	r30, X+
     fb8:	fc 91       	ld	r31, X
     fba:	1d 97       	sbiw	r26, 0x0d	; 13
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
     fbe:	e0 e0       	ldi	r30, 0x00	; 0
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
     fc2:	30 97       	sbiw	r30, 0x00	; 0
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <midi_input_callbacks+0x112>
     fc6:	85 c0       	rjmp	.+266    	; 0x10d2 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
     fc8:	b2 ef       	ldi	r27, 0xF2	; 242
     fca:	fb 16       	cp	r15, r27
     fcc:	31 f4       	brne	.+12     	; 0xfda <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
     fce:	c6 01       	movw	r24, r12
     fd0:	62 ef       	ldi	r22, 0xF2	; 242
     fd2:	4e 2d       	mov	r20, r14
     fd4:	21 2f       	mov	r18, r17
     fd6:	09 95       	icall
     fd8:	6c c0       	rjmp	.+216    	; 0x10b2 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
     fda:	6f 2d       	mov	r22, r15
     fdc:	6f 70       	andi	r22, 0x0F	; 15
     fde:	c6 01       	movw	r24, r12
     fe0:	4e 2d       	mov	r20, r14
     fe2:	21 2f       	mov	r18, r17
     fe4:	09 95       	icall
     fe6:	65 c0       	rjmp	.+202    	; 0x10b2 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
     fe8:	84 2f       	mov	r24, r20
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	80 7f       	andi	r24, 0xF0	; 240
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	80 3d       	cpi	r24, 0xD0	; 208
     ff2:	91 05       	cpc	r25, r1
     ff4:	61 f0       	breq	.+24     	; 0x100e <midi_input_callbacks+0x158>
     ff6:	80 3f       	cpi	r24, 0xF0	; 240
     ff8:	91 05       	cpc	r25, r1
     ffa:	79 f0       	breq	.+30     	; 0x101a <midi_input_callbacks+0x164>
     ffc:	80 3c       	cpi	r24, 0xC0	; 192
     ffe:	91 05       	cpc	r25, r1
    1000:	f9 f4       	brne	.+62     	; 0x1040 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1002:	d6 01       	movw	r26, r12
    1004:	1e 96       	adiw	r26, 0x0e	; 14
    1006:	ed 91       	ld	r30, X+
    1008:	fc 91       	ld	r31, X
    100a:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    100c:	1b c0       	rjmp	.+54     	; 0x1044 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    100e:	d6 01       	movw	r26, r12
    1010:	50 96       	adiw	r26, 0x10	; 16
    1012:	ed 91       	ld	r30, X+
    1014:	fc 91       	ld	r31, X
    1016:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1018:	15 c0       	rjmp	.+42     	; 0x1044 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    101a:	b3 ef       	ldi	r27, 0xF3	; 243
    101c:	4b 17       	cp	r20, r27
    101e:	31 f4       	brne	.+12     	; 0x102c <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    1020:	d6 01       	movw	r26, r12
    1022:	52 96       	adiw	r26, 0x12	; 18
    1024:	ed 91       	ld	r30, X+
    1026:	fc 91       	ld	r31, X
    1028:	53 97       	sbiw	r26, 0x13	; 19
    102a:	0c c0       	rjmp	.+24     	; 0x1044 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    102c:	b1 ef       	ldi	r27, 0xF1	; 241
    102e:	4b 17       	cp	r20, r27
    1030:	09 f0       	breq	.+2      	; 0x1034 <midi_input_callbacks+0x17e>
    1032:	4f c0       	rjmp	.+158    	; 0x10d2 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    1034:	d6 01       	movw	r26, r12
    1036:	54 96       	adiw	r26, 0x14	; 20
    1038:	ed 91       	ld	r30, X+
    103a:	fc 91       	ld	r31, X
    103c:	55 97       	sbiw	r26, 0x15	; 21
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1040:	e0 e0       	ldi	r30, 0x00	; 0
    1042:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1044:	30 97       	sbiw	r30, 0x00	; 0
    1046:	09 f4       	brne	.+2      	; 0x104a <midi_input_callbacks+0x194>
    1048:	44 c0       	rjmp	.+136    	; 0x10d2 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    104a:	b3 ef       	ldi	r27, 0xF3	; 243
    104c:	fb 16       	cp	r15, r27
    104e:	19 f0       	breq	.+6      	; 0x1056 <midi_input_callbacks+0x1a0>
    1050:	81 ef       	ldi	r24, 0xF1	; 241
    1052:	f8 16       	cp	r15, r24
    1054:	29 f4       	brne	.+10     	; 0x1060 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1056:	c6 01       	movw	r24, r12
    1058:	6f 2d       	mov	r22, r15
    105a:	4e 2d       	mov	r20, r14
    105c:	09 95       	icall
    105e:	29 c0       	rjmp	.+82     	; 0x10b2 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    1060:	6f 2d       	mov	r22, r15
    1062:	6f 70       	andi	r22, 0x0F	; 15
    1064:	c6 01       	movw	r24, r12
    1066:	4e 2d       	mov	r20, r14
    1068:	09 95       	icall
    106a:	23 c0       	rjmp	.+70     	; 0x10b2 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    106c:	84 2f       	mov	r24, r20
    106e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <midi_is_realtime>
    1072:	88 23       	and	r24, r24
    1074:	31 f0       	breq	.+12     	; 0x1082 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    1076:	d6 01       	movw	r26, r12
    1078:	56 96       	adiw	r26, 0x16	; 22
    107a:	ed 91       	ld	r30, X+
    107c:	fc 91       	ld	r31, X
    107e:	57 97       	sbiw	r26, 0x17	; 23
    1080:	08 c0       	rjmp	.+16     	; 0x1092 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    1082:	b6 ef       	ldi	r27, 0xF6	; 246
    1084:	fb 16       	cp	r15, r27
    1086:	29 f5       	brne	.+74     	; 0x10d2 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    1088:	d6 01       	movw	r26, r12
    108a:	58 96       	adiw	r26, 0x18	; 24
    108c:	ed 91       	ld	r30, X+
    108e:	fc 91       	ld	r31, X
    1090:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1092:	30 97       	sbiw	r30, 0x00	; 0
    1094:	f1 f0       	breq	.+60     	; 0x10d2 <midi_input_callbacks+0x21c>
            func(device, byte0);
    1096:	c6 01       	movw	r24, r12
    1098:	6f 2d       	mov	r22, r15
    109a:	09 95       	icall
    109c:	0a c0       	rjmp	.+20     	; 0x10b2 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    109e:	64 30       	cpi	r22, 0x04	; 4
    10a0:	71 05       	cpc	r23, r1
    10a2:	a8 f4       	brcc	.+42     	; 0x10ce <midi_input_callbacks+0x218>
    10a4:	16 c0       	rjmp	.+44     	; 0x10d2 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    10a6:	c6 01       	movw	r24, r12
    10a8:	b5 01       	movw	r22, r10
    10aa:	4f 2d       	mov	r20, r15
    10ac:	2e 2d       	mov	r18, r14
    10ae:	01 2f       	mov	r16, r17
    10b0:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    10b2:	d6 01       	movw	r26, r12
    10b4:	5e 96       	adiw	r26, 0x1e	; 30
    10b6:	ed 91       	ld	r30, X+
    10b8:	fc 91       	ld	r31, X
    10ba:	5f 97       	sbiw	r26, 0x1f	; 31
    10bc:	30 97       	sbiw	r30, 0x00	; 0
    10be:	89 f0       	breq	.+34     	; 0x10e2 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    10c0:	c6 01       	movw	r24, r12
    10c2:	b5 01       	movw	r22, r10
    10c4:	4f 2d       	mov	r20, r15
    10c6:	2e 2d       	mov	r18, r14
    10c8:	01 2f       	mov	r16, r17
    10ca:	09 95       	icall
    10cc:	0a c0       	rjmp	.+20     	; 0x10e2 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    10ce:	aa 24       	eor	r10, r10
    10d0:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    10d2:	d6 01       	movw	r26, r12
    10d4:	5c 96       	adiw	r26, 0x1c	; 28
    10d6:	ed 91       	ld	r30, X+
    10d8:	fc 91       	ld	r31, X
    10da:	5d 97       	sbiw	r26, 0x1d	; 29
    10dc:	30 97       	sbiw	r30, 0x00	; 0
    10de:	19 f7       	brne	.-58     	; 0x10a6 <midi_input_callbacks+0x1f0>
    10e0:	e8 cf       	rjmp	.-48     	; 0x10b2 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	bf 90       	pop	r11
    10fa:	af 90       	pop	r10
    10fc:	08 95       	ret

000010fe <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	7c 01       	movw	r14, r24
    110a:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    110c:	86 2f       	mov	r24, r22
    110e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <midi_is_realtime>
    1112:	88 23       	and	r24, r24
    1114:	91 f0       	breq	.+36     	; 0x113a <__stack+0x3b>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1116:	d7 01       	movw	r26, r14
    1118:	95 96       	adiw	r26, 0x25	; 37
    111a:	dc 91       	ld	r29, X
    111c:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	95 96       	adiw	r26, 0x25	; 37
    1122:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    1124:	c7 01       	movw	r24, r14
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	4c 2f       	mov	r20, r28
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	00 e0       	ldi	r16, 0x00	; 0
    1130:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <midi_input_callbacks>
    device->input_state = state;
    1134:	f7 01       	movw	r30, r14
    1136:	d5 a3       	lds	r29, 0x55
    1138:	b7 c0       	rjmp	.+366    	; 0x12a8 <__stack+0x1a9>
  } else if (midi_is_statusbyte(input)) {
    113a:	8c 2f       	mov	r24, r28
    113c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <midi_is_statusbyte>
    1140:	88 23       	and	r24, r24
    1142:	09 f4       	brne	.+2      	; 0x1146 <__stack+0x47>
    1144:	73 c0       	rjmp	.+230    	; 0x122c <__stack+0x12d>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1146:	d7 01       	movw	r26, r14
    1148:	95 96       	adiw	r26, 0x25	; 37
    114a:	8c 91       	ld	r24, X
    114c:	95 97       	sbiw	r26, 0x25	; 37
    114e:	84 30       	cpi	r24, 0x04	; 4
    1150:	49 f0       	breq	.+18     	; 0x1164 <__stack+0x65>
      device->input_buffer[0] = input;
    1152:	92 96       	adiw	r26, 0x22	; 34
    1154:	cc 93       	st	X, r28
    1156:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	97 96       	adiw	r26, 0x27	; 39
    115e:	9c 93       	st	X, r25
    1160:	8e 93       	st	-X, r24
    1162:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    1164:	8c 2f       	mov	r24, r28
    1166:	0e 94 fe 04 	call	0x9fc	; 0x9fc <midi_packet_length>
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	41 f0       	breq	.+16     	; 0x117e <__stack+0x7f>
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	00 f1       	brcs	.+64     	; 0x11b2 <__stack+0xb3>
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	a1 f0       	breq	.+40     	; 0x119e <__stack+0x9f>
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	09 f0       	breq	.+2      	; 0x117c <__stack+0x7d>
    117a:	4f c0       	rjmp	.+158    	; 0x121a <__stack+0x11b>
    117c:	14 c0       	rjmp	.+40     	; 0x11a6 <__stack+0xa7>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	f7 01       	movw	r30, r14
    1182:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    1184:	c7 01       	movw	r24, r14
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	4c 2f       	mov	r20, r28
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	00 e0       	ldi	r16, 0x00	; 0
    1190:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <midi_input_callbacks>
        device->input_state = IDLE;
    1194:	d7 01       	movw	r26, r14
    1196:	95 96       	adiw	r26, 0x25	; 37
    1198:	1c 92       	st	X, r1
    119a:	95 97       	sbiw	r26, 0x25	; 37
        break;
    119c:	85 c0       	rjmp	.+266    	; 0x12a8 <__stack+0x1a9>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	f7 01       	movw	r30, r14
    11a2:	85 a3       	lds	r24, 0x55
        break;
    11a4:	81 c0       	rjmp	.+258    	; 0x12a8 <__stack+0x1a9>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    11a6:	83 e0       	ldi	r24, 0x03	; 3
    11a8:	d7 01       	movw	r26, r14
    11aa:	95 96       	adiw	r26, 0x25	; 37
    11ac:	8c 93       	st	X, r24
    11ae:	95 97       	sbiw	r26, 0x25	; 37
        break;
    11b0:	7b c0       	rjmp	.+246    	; 0x12a8 <__stack+0x1a9>
      case UNDEFINED:
        switch(input) {
    11b2:	c0 3f       	cpi	r28, 0xF0	; 240
    11b4:	19 f0       	breq	.+6      	; 0x11bc <__stack+0xbd>
    11b6:	c7 3f       	cpi	r28, 0xF7	; 247
    11b8:	59 f5       	brne	.+86     	; 0x1210 <__stack+0x111>
    11ba:	0a c0       	rjmp	.+20     	; 0x11d0 <__stack+0xd1>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    11bc:	84 e0       	ldi	r24, 0x04	; 4
    11be:	f7 01       	movw	r30, r14
    11c0:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    11c2:	80 ef       	ldi	r24, 0xF0	; 240
    11c4:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	97 a3       	lds	r25, 0x57
    11cc:	86 a3       	lds	r24, 0x56
            break;
    11ce:	6c c0       	rjmp	.+216    	; 0x12a8 <__stack+0x1a9>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    11d0:	d7 01       	movw	r26, r14
    11d2:	96 96       	adiw	r26, 0x26	; 38
    11d4:	2d 91       	ld	r18, X+
    11d6:	3c 91       	ld	r19, X
    11d8:	97 97       	sbiw	r26, 0x27	; 39
    11da:	c9 01       	movw	r24, r18
    11dc:	63 e0       	ldi	r22, 0x03	; 3
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
    11e4:	f7 01       	movw	r30, r14
    11e6:	e8 0f       	add	r30, r24
    11e8:	f9 1f       	adc	r31, r25
    11ea:	87 ef       	ldi	r24, 0xF7	; 247
    11ec:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    11ee:	b9 01       	movw	r22, r18
    11f0:	6f 5f       	subi	r22, 0xFF	; 255
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	f7 01       	movw	r30, r14
    11f6:	77 a3       	lds	r23, 0x57
    11f8:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    11fa:	c7 01       	movw	r24, r14
    11fc:	42 a1       	lds	r20, 0x42
    11fe:	23 a1       	lds	r18, 0x43
    1200:	04 a1       	lds	r16, 0x44
    1202:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    1206:	d7 01       	movw	r26, r14
    1208:	95 96       	adiw	r26, 0x25	; 37
    120a:	1c 92       	st	X, r1
    120c:	95 97       	sbiw	r26, 0x25	; 37
            break;
    120e:	4c c0       	rjmp	.+152    	; 0x12a8 <__stack+0x1a9>
          default:
            device->input_state = IDLE;
    1210:	f7 01       	movw	r30, r14
    1212:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    1214:	17 a2       	lds	r17, 0x97
    1216:	16 a2       	lds	r17, 0x96
    1218:	47 c0       	rjmp	.+142    	; 0x12a8 <__stack+0x1a9>
        }

        break;
      default:
        device->input_state = IDLE;
    121a:	d7 01       	movw	r26, r14
    121c:	95 96       	adiw	r26, 0x25	; 37
    121e:	1c 92       	st	X, r1
    1220:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    1222:	97 96       	adiw	r26, 0x27	; 39
    1224:	1c 92       	st	X, r1
    1226:	1e 92       	st	-X, r1
    1228:	96 97       	sbiw	r26, 0x26	; 38
        break;
    122a:	3e c0       	rjmp	.+124    	; 0x12a8 <__stack+0x1a9>
    }
  } else {
    if (device->input_state != IDLE) {
    122c:	f7 01       	movw	r30, r14
    122e:	25 a1       	lds	r18, 0x45
    1230:	22 23       	and	r18, r18
    1232:	d1 f1       	breq	.+116    	; 0x12a8 <__stack+0x1a9>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    1234:	06 a0       	lds	r16, 0x86
    1236:	f7 a1       	lds	r31, 0x47
    1238:	e0 2d       	mov	r30, r0
    123a:	cf 01       	movw	r24, r30
    123c:	63 e0       	ldi	r22, 0x03	; 3
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
    1244:	ac 01       	movw	r20, r24
    1246:	8e 0d       	add	r24, r14
    1248:	9f 1d       	adc	r25, r15
    124a:	dc 01       	movw	r26, r24
    124c:	92 96       	adiw	r26, 0x22	; 34
    124e:	cc 93       	st	X, r28
    1250:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    1252:	bf 01       	movw	r22, r30
    1254:	6f 5f       	subi	r22, 0xFF	; 255
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	f7 01       	movw	r30, r14
    125a:	77 a3       	lds	r23, 0x57
    125c:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    125e:	41 30       	cpi	r20, 0x01	; 1
    1260:	51 05       	cpc	r21, r1
    1262:	91 f0       	breq	.+36     	; 0x1288 <__stack+0x189>
    1264:	42 30       	cpi	r20, 0x02	; 2
    1266:	51 05       	cpc	r21, r1
    1268:	f9 f4       	brne	.+62     	; 0x12a8 <__stack+0x1a9>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    126a:	c7 01       	movw	r24, r14
    126c:	42 a1       	lds	r20, 0x42
    126e:	23 a1       	lds	r18, 0x43
    1270:	04 a1       	lds	r16, 0x44
    1272:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1276:	f7 01       	movw	r30, r14
    1278:	85 a1       	lds	r24, 0x45
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	a9 f0       	breq	.+42     	; 0x12a8 <__stack+0x1a9>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	97 a3       	lds	r25, 0x57
    1284:	86 a3       	lds	r24, 0x56
    1286:	10 c0       	rjmp	.+32     	; 0x12a8 <__stack+0x1a9>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	71 f4       	brne	.+28     	; 0x12a8 <__stack+0x1a9>
            //call callback
            midi_input_callbacks(device, device->input_count,
    128c:	c7 01       	movw	r24, r14
    128e:	42 a1       	lds	r20, 0x42
    1290:	23 a1       	lds	r18, 0x43
    1292:	00 e0       	ldi	r16, 0x00	; 0
    1294:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1298:	f7 01       	movw	r30, r14
    129a:	85 a1       	lds	r24, 0x45
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	21 f0       	breq	.+8      	; 0x12a8 <__stack+0x1a9>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	97 a3       	lds	r25, 0x57
    12a6:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	08 95       	ret

000012b4 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    12c6:	dc 01       	movw	r26, r24
    12c8:	90 96       	adiw	r26, 0x20	; 32
    12ca:	ed 91       	ld	r30, X+
    12cc:	fc 91       	ld	r31, X
    12ce:	91 97       	sbiw	r26, 0x21	; 33
    12d0:	30 97       	sbiw	r30, 0x00	; 0
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    12d4:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    12d6:	0f 2e       	mov	r0, r31
    12d8:	f8 ee       	ldi	r31, 0xE8	; 232
    12da:	ef 2e       	mov	r14, r31
    12dc:	ff 24       	eor	r15, r15
    12de:	f0 2d       	mov	r31, r0
    12e0:	ec 0c       	add	r14, r12
    12e2:	fd 1c       	adc	r15, r13
    12e4:	c7 01       	movw	r24, r14
    12e6:	0e 94 af 04 	call	0x95e	; 0x95e <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    12ea:	c8 2f       	mov	r28, r24
    12ec:	d0 e0       	ldi	r29, 0x00	; 0
    12ee:	20 97       	sbiw	r28, 0x00	; 0
    12f0:	99 f0       	breq	.+38     	; 0x1318 <midi_device_process+0x64>
    12f2:	00 e0       	ldi	r16, 0x00	; 0
    12f4:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    12f6:	c7 01       	movw	r24, r14
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	0e 94 c4 04 	call	0x988	; 0x988 <bytequeue_get>
    12fe:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    1300:	c6 01       	movw	r24, r12
    1302:	0e 94 7f 08 	call	0x10fe	; 0x10fe <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    1306:	c7 01       	movw	r24, r14
    1308:	61 e0       	ldi	r22, 0x01	; 1
    130a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    130e:	0f 5f       	subi	r16, 0xFF	; 255
    1310:	1f 4f       	sbci	r17, 0xFF	; 255
    1312:	0c 17       	cp	r16, r28
    1314:	1d 07       	cpc	r17, r29
    1316:	78 f3       	brcs	.-34     	; 0x12f6 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	df 90       	pop	r13
    1326:	cf 90       	pop	r12
    1328:	08 95       	ret

0000132a <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    132a:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    132c:	67 e0       	ldi	r22, 0x07	; 7
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
    1334:	48 2f       	mov	r20, r24
   if (remainder)
    1336:	88 23       	and	r24, r24
    1338:	81 f0       	breq	.+32     	; 0x135a <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    133a:	c9 01       	movw	r24, r18
    133c:	67 e0       	ldi	r22, 0x07	; 7
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
    1344:	cb 01       	movw	r24, r22
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	84 0f       	add	r24, r20
    1356:	91 1d       	adc	r25, r1
    1358:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    135a:	c9 01       	movw	r24, r18
    135c:	67 e0       	ldi	r22, 0x07	; 7
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
    1364:	cb 01       	movw	r24, r22
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
}
    1372:	08 95       	ret

00001374 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    1374:	48 2f       	mov	r20, r24
    1376:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    1378:	a1 f0       	breq	.+40     	; 0x13a2 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    137a:	9c 01       	movw	r18, r24
    137c:	36 95       	lsr	r19
    137e:	27 95       	ror	r18
    1380:	36 95       	lsr	r19
    1382:	27 95       	ror	r18
    1384:	36 95       	lsr	r19
    1386:	27 95       	ror	r18
    1388:	c9 01       	movw	r24, r18
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	82 1b       	sub	r24, r18
    1398:	93 0b       	sbc	r25, r19
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	84 0f       	add	r24, r20
    139e:	91 1d       	adc	r25, r1
    13a0:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    13a2:	9c 01       	movw	r18, r24
    13a4:	36 95       	lsr	r19
    13a6:	27 95       	ror	r18
    13a8:	36 95       	lsr	r19
    13aa:	27 95       	ror	r18
    13ac:	36 95       	lsr	r19
    13ae:	27 95       	ror	r18
    13b0:	c9 01       	movw	r24, r18
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	82 1b       	sub	r24, r18
    13c0:	93 0b       	sbc	r25, r19
}
    13c2:	08 95       	ret

000013c4 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    13c4:	2f 92       	push	r2
    13c6:	3f 92       	push	r3
    13c8:	4f 92       	push	r4
    13ca:	5f 92       	push	r5
    13cc:	6f 92       	push	r6
    13ce:	7f 92       	push	r7
    13d0:	8f 92       	push	r8
    13d2:	9f 92       	push	r9
    13d4:	af 92       	push	r10
    13d6:	bf 92       	push	r11
    13d8:	cf 92       	push	r12
    13da:	df 92       	push	r13
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <sysex_encode+0x26>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <sysex_encode+0x28>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <sysex_encode+0x2a>
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	1c 01       	movw	r2, r24
    13f4:	7a 83       	std	Y+2, r23	; 0x02
    13f6:	69 83       	std	Y+1, r22	; 0x01
    13f8:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    13fa:	ca 01       	movw	r24, r20
    13fc:	67 e0       	ldi	r22, 0x07	; 7
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
    1404:	2b 01       	movw	r4, r22
    1406:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    1408:	61 15       	cp	r22, r1
    140a:	71 05       	cpc	r23, r1
    140c:	b1 f1       	breq	.+108    	; 0x147a <sysex_encode+0xb6>
    140e:	81 01       	movw	r16, r2
    1410:	e9 80       	ldd	r14, Y+1	; 0x01
    1412:	fa 80       	ldd	r15, Y+2	; 0x02
    1414:	cc 24       	eor	r12, r12
    1416:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1418:	88 24       	eor	r8, r8
    141a:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    141c:	1e 83       	std	Y+6, r17	; 0x06
    141e:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    1420:	f8 01       	movw	r30, r16
    1422:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1424:	fc 82       	std	Y+4, r15	; 0x04
    1426:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1428:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    142a:	ab 81       	ldd	r26, Y+3	; 0x03
    142c:	bc 81       	ldd	r27, Y+4	; 0x04
    142e:	2d 91       	ld	r18, X+
    1430:	bc 83       	std	Y+4, r27	; 0x04
    1432:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    1434:	4f 5f       	subi	r20, 0xFF	; 255
    1436:	5f 4f       	sbci	r21, 0xFF	; 255
    1438:	82 2f       	mov	r24, r18
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	80 78       	andi	r24, 0x80	; 128
    143e:	90 70       	andi	r25, 0x00	; 0
    1440:	bc 01       	movw	r22, r24
    1442:	04 2e       	mov	r0, r20
    1444:	02 c0       	rjmp	.+4      	; 0x144a <sysex_encode+0x86>
    1446:	75 95       	asr	r23
    1448:	67 95       	ror	r22
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <sysex_encode+0x82>
    144e:	ad 81       	ldd	r26, Y+5	; 0x05
    1450:	be 81       	ldd	r27, Y+6	; 0x06
    1452:	8c 91       	ld	r24, X
    1454:	86 2b       	or	r24, r22
    1456:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1458:	2f 77       	andi	r18, 0x7F	; 127
    145a:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    145c:	47 30       	cpi	r20, 0x07	; 7
    145e:	51 05       	cpc	r21, r1
    1460:	21 f7       	brne	.-56     	; 0x142a <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    1462:	08 94       	sec
    1464:	c1 1c       	adc	r12, r1
    1466:	d1 1c       	adc	r13, r1
    1468:	08 5f       	subi	r16, 0xF8	; 248
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	e7 e0       	ldi	r30, 0x07	; 7
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	ee 0e       	add	r14, r30
    1472:	ff 1e       	adc	r15, r31
    1474:	ca 14       	cp	r12, r10
    1476:	db 04       	cpc	r13, r11
    1478:	89 f6       	brne	.-94     	; 0x141c <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    147a:	c3 01       	movw	r24, r6
    147c:	67 e0       	ldi	r22, 0x07	; 7
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
   if (remainder) {
    1484:	88 23       	and	r24, r24
    1486:	d9 f1       	breq	.+118    	; 0x14fe <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    1488:	82 01       	movw	r16, r4
    148a:	00 0f       	add	r16, r16
    148c:	11 1f       	adc	r17, r17
    148e:	00 0f       	add	r16, r16
    1490:	11 1f       	adc	r17, r17
    1492:	00 0f       	add	r16, r16
    1494:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    1496:	78 01       	movw	r14, r16
    1498:	e4 18       	sub	r14, r4
    149a:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    149c:	d1 01       	movw	r26, r2
    149e:	a0 0f       	add	r26, r16
    14a0:	b1 1f       	adc	r27, r17
    14a2:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    14a4:	68 2f       	mov	r22, r24
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	61 15       	cp	r22, r1
    14aa:	71 05       	cpc	r23, r1
    14ac:	19 f1       	breq	.+70     	; 0x14f4 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    14ae:	e9 81       	ldd	r30, Y+1	; 0x01
    14b0:	fa 81       	ldd	r31, Y+2	; 0x02
    14b2:	ee 0e       	add	r14, r30
    14b4:	ff 1e       	adc	r15, r31
    14b6:	c8 01       	movw	r24, r16
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	28 0e       	add	r2, r24
    14bc:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    14c2:	f7 01       	movw	r30, r14
    14c4:	41 91       	ld	r20, Z+
    14c6:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    14c8:	2f 5f       	subi	r18, 0xFF	; 255
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	84 2f       	mov	r24, r20
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	80 78       	andi	r24, 0x80	; 128
    14d2:	90 70       	andi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <sysex_encode+0x118>
    14d8:	95 95       	asr	r25
    14da:	87 95       	ror	r24
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <sysex_encode+0x114>
    14e0:	9c 91       	ld	r25, X
    14e2:	89 2b       	or	r24, r25
    14e4:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    14e6:	4f 77       	andi	r20, 0x7F	; 127
    14e8:	f1 01       	movw	r30, r2
    14ea:	41 93       	st	Z+, r20
    14ec:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    14ee:	26 17       	cp	r18, r22
    14f0:	37 07       	cpc	r19, r23
    14f2:	38 f3       	brcs	.-50     	; 0x14c2 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    14f4:	c8 01       	movw	r24, r16
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	86 0f       	add	r24, r22
    14fa:	97 1f       	adc	r25, r23
    14fc:	07 c0       	rjmp	.+14     	; 0x150c <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    14fe:	c2 01       	movw	r24, r4
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
   }
}
    150c:	26 96       	adiw	r28, 0x06	; 6
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	bf 90       	pop	r11
    152a:	af 90       	pop	r10
    152c:	9f 90       	pop	r9
    152e:	8f 90       	pop	r8
    1530:	7f 90       	pop	r7
    1532:	6f 90       	pop	r6
    1534:	5f 90       	pop	r5
    1536:	4f 90       	pop	r4
    1538:	3f 90       	pop	r3
    153a:	2f 90       	pop	r2
    153c:	08 95       	ret

0000153e <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    153e:	6f 92       	push	r6
    1540:	7f 92       	push	r7
    1542:	8f 92       	push	r8
    1544:	9f 92       	push	r9
    1546:	af 92       	push	r10
    1548:	bf 92       	push	r11
    154a:	cf 92       	push	r12
    154c:	df 92       	push	r13
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	3c 01       	movw	r6, r24
    155c:	4b 01       	movw	r8, r22
    155e:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    1560:	42 30       	cpi	r20, 0x02	; 2
    1562:	51 05       	cpc	r21, r1
    1564:	08 f4       	brcc	.+2      	; 0x1568 <sysex_decode+0x2a>
    1566:	6f c0       	rjmp	.+222    	; 0x1646 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    1568:	7a 01       	movw	r14, r20
    156a:	f6 94       	lsr	r15
    156c:	e7 94       	ror	r14
    156e:	f6 94       	lsr	r15
    1570:	e7 94       	ror	r14
    1572:	f6 94       	lsr	r15
    1574:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    1576:	e1 14       	cp	r14, r1
    1578:	f1 04       	cpc	r15, r1
    157a:	29 f1       	breq	.+74     	; 0x15c6 <sysex_decode+0x88>
    157c:	eb 01       	movw	r28, r22
    157e:	b3 01       	movw	r22, r6
    1580:	00 e0       	ldi	r16, 0x00	; 0
    1582:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    1584:	cc 24       	eor	r12, r12
    1586:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1588:	de 01       	movw	r26, r28
    158a:	11 96       	adiw	r26, 0x01	; 1
    158c:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    158e:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    1590:	2d 91       	ld	r18, X+
    1592:	2f 77       	andi	r18, 0x7F	; 127
    1594:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    1596:	4f 5f       	subi	r20, 0xFF	; 255
    1598:	5f 4f       	sbci	r21, 0xFF	; 255
    159a:	88 81       	ld	r24, Y
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	04 2e       	mov	r0, r20
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <sysex_decode+0x68>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <sysex_decode+0x64>
    15aa:	80 78       	andi	r24, 0x80	; 128
    15ac:	28 2b       	or	r18, r24
    15ae:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    15b0:	47 30       	cpi	r20, 0x07	; 7
    15b2:	51 05       	cpc	r21, r1
    15b4:	69 f7       	brne	.-38     	; 0x1590 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    15b6:	0f 5f       	subi	r16, 0xFF	; 255
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	28 96       	adiw	r28, 0x08	; 8
    15bc:	69 5f       	subi	r22, 0xF9	; 249
    15be:	7f 4f       	sbci	r23, 0xFF	; 255
    15c0:	0e 15       	cp	r16, r14
    15c2:	1f 05       	cpc	r17, r15
    15c4:	09 f7       	brne	.-62     	; 0x1588 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    15c6:	5a 2d       	mov	r21, r10
    15c8:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    15ca:	99 f1       	breq	.+102    	; 0x1632 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    15cc:	e7 01       	movw	r28, r14
    15ce:	cc 0f       	add	r28, r28
    15d0:	dd 1f       	adc	r29, r29
    15d2:	cc 0f       	add	r28, r28
    15d4:	dd 1f       	adc	r29, r29
    15d6:	cc 0f       	add	r28, r28
    15d8:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    15da:	8e 01       	movw	r16, r28
    15dc:	0e 19       	sub	r16, r14
    15de:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    15e0:	65 2f       	mov	r22, r21
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	61 50       	subi	r22, 0x01	; 1
    15e6:	70 40       	sbci	r23, 0x00	; 0
    15e8:	f9 f0       	breq	.+62     	; 0x1628 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    15ea:	ce 01       	movw	r24, r28
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	d4 01       	movw	r26, r8
    15f0:	a8 0f       	add	r26, r24
    15f2:	b9 1f       	adc	r27, r25
    15f4:	f3 01       	movw	r30, r6
    15f6:	e0 0f       	add	r30, r16
    15f8:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    15fe:	c8 0d       	add	r28, r8
    1600:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    1602:	4d 91       	ld	r20, X+
    1604:	4f 77       	andi	r20, 0x7F	; 127
    1606:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    1608:	2f 5f       	subi	r18, 0xFF	; 255
    160a:	3f 4f       	sbci	r19, 0xFF	; 255
    160c:	88 81       	ld	r24, Y
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <sysex_decode+0xda>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <sysex_decode+0xd6>
    161c:	80 78       	andi	r24, 0x80	; 128
    161e:	48 2b       	or	r20, r24
    1620:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    1622:	26 17       	cp	r18, r22
    1624:	37 07       	cpc	r19, r23
    1626:	68 f3       	brcs	.-38     	; 0x1602 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    1628:	c8 01       	movw	r24, r16
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	85 0f       	add	r24, r21
    162e:	91 1d       	adc	r25, r1
    1630:	0c c0       	rjmp	.+24     	; 0x164a <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    1632:	c7 01       	movw	r24, r14
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	8e 19       	sub	r24, r14
    1642:	9f 09       	sbc	r25, r15
    1644:	02 c0       	rjmp	.+4      	; 0x164a <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ff 90       	pop	r15
    1654:	ef 90       	pop	r14
    1656:	df 90       	pop	r13
    1658:	cf 90       	pop	r12
    165a:	bf 90       	pop	r11
    165c:	af 90       	pop	r10
    165e:	9f 90       	pop	r9
    1660:	8f 90       	pop	r8
    1662:	7f 90       	pop	r7
    1664:	6f 90       	pop	r6
    1666:	08 95       	ret

00001668 <__udivmodhi4>:
    1668:	aa 1b       	sub	r26, r26
    166a:	bb 1b       	sub	r27, r27
    166c:	51 e1       	ldi	r21, 0x11	; 17
    166e:	07 c0       	rjmp	.+14     	; 0x167e <__udivmodhi4_ep>

00001670 <__udivmodhi4_loop>:
    1670:	aa 1f       	adc	r26, r26
    1672:	bb 1f       	adc	r27, r27
    1674:	a6 17       	cp	r26, r22
    1676:	b7 07       	cpc	r27, r23
    1678:	10 f0       	brcs	.+4      	; 0x167e <__udivmodhi4_ep>
    167a:	a6 1b       	sub	r26, r22
    167c:	b7 0b       	sbc	r27, r23

0000167e <__udivmodhi4_ep>:
    167e:	88 1f       	adc	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	5a 95       	dec	r21
    1684:	a9 f7       	brne	.-22     	; 0x1670 <__udivmodhi4_loop>
    1686:	80 95       	com	r24
    1688:	90 95       	com	r25
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	08 95       	ret

00001690 <__divmodhi4>:
    1690:	97 fb       	bst	r25, 7
    1692:	09 2e       	mov	r0, r25
    1694:	07 26       	eor	r0, r23
    1696:	0a d0       	rcall	.+20     	; 0x16ac <__divmodhi4_neg1>
    1698:	77 fd       	sbrc	r23, 7
    169a:	04 d0       	rcall	.+8      	; 0x16a4 <__divmodhi4_neg2>
    169c:	e5 df       	rcall	.-54     	; 0x1668 <__udivmodhi4>
    169e:	06 d0       	rcall	.+12     	; 0x16ac <__divmodhi4_neg1>
    16a0:	00 20       	and	r0, r0
    16a2:	1a f4       	brpl	.+6      	; 0x16aa <__divmodhi4_exit>

000016a4 <__divmodhi4_neg2>:
    16a4:	70 95       	com	r23
    16a6:	61 95       	neg	r22
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255

000016aa <__divmodhi4_exit>:
    16aa:	08 95       	ret

000016ac <__divmodhi4_neg1>:
    16ac:	f6 f7       	brtc	.-4      	; 0x16aa <__divmodhi4_exit>
    16ae:	90 95       	com	r25
    16b0:	81 95       	neg	r24
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	08 95       	ret

000016b6 <memcpy>:
    16b6:	fb 01       	movw	r30, r22
    16b8:	dc 01       	movw	r26, r24
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <memcpy+0xa>
    16bc:	01 90       	ld	r0, Z+
    16be:	0d 92       	st	X+, r0
    16c0:	41 50       	subi	r20, 0x01	; 1
    16c2:	50 40       	sbci	r21, 0x00	; 0
    16c4:	d8 f7       	brcc	.-10     	; 0x16bc <memcpy+0x6>
    16c6:	08 95       	ret

000016c8 <_exit>:
    16c8:	f8 94       	cli

000016ca <__stop_program>:
    16ca:	ff cf       	rjmp	.-2      	; 0x16ca <__stop_program>
