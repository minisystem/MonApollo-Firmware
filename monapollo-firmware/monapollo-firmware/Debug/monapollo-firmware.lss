
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  0000369e  00003752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000369e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b9  008002b0  008002b0  00003902  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00003f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00004eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005abf  00000000  00000000  00005170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000152d  00000000  00000000  0000ac2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e1b  00000000  00000000  0000c15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c20  00000000  00000000  0000df78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000017da  00000000  00000000  0000eb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002bfb  00000000  00000000  00010372  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00012f6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_9>
      28:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ee e9       	ldi	r30, 0x9E	; 158
      78:	f6 e3       	ldi	r31, 0x36	; 54
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a9 36       	cpi	r26, 0x69	; 105
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <main>
      9a:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 b0 02 	lds	r24, 0x02B0
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 b0 02 	sts	0x02B0, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 b0 02 	sts	0x02B0, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 b0 02 	sts	0x02B0, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1f6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1f8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1fa:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1fe:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     200:	8c 91       	ld	r24, X
     202:	87 70       	andi	r24, 0x07	; 7
     204:	82 b9       	out	0x02, r24	; 2
     206:	66 e0       	ldi	r22, 0x06	; 6
     208:	6a 95       	dec	r22
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x12>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     20e:	ea ed       	ldi	r30, 0xDA	; 218
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	40 81       	ld	r20, Z
     214:	8c 91       	ld	r24, X
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	86 95       	lsr	r24
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	b9 01       	movw	r22, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <set_control_voltage+0x34>
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <set_control_voltage+0x30>
     22e:	cb 01       	movw	r24, r22
     230:	84 2b       	or	r24, r20
     232:	80 83       	st	Z, r24
     234:	76 e0       	ldi	r23, 0x06	; 6
     236:	7a 95       	dec	r23
     238:	f1 f7       	brne	.-4      	; 0x236 <set_control_voltage+0x40>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     23c:	80 81       	ld	r24, Z
     23e:	9c 91       	ld	r25, X
     240:	96 95       	lsr	r25
     242:	96 95       	lsr	r25
     244:	96 95       	lsr	r25
     246:	97 70       	andi	r25, 0x07	; 7
     248:	02 c0       	rjmp	.+4      	; 0x24e <set_control_voltage+0x58>
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	9a 95       	dec	r25
     250:	e2 f7       	brpl	.-8      	; 0x24a <set_control_voltage+0x54>
     252:	20 95       	com	r18
     254:	28 23       	and	r18, r24
     256:	20 83       	st	Z, r18
	
}	
     258:	08 95       	ret

0000025a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     25a:	83 b3       	in	r24, 0x13	; 19
     25c:	83 60       	ori	r24, 0x03	; 3
     25e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     264:	97 b1       	in	r25, 0x07	; 7
     266:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     268:	e9 ed       	ldi	r30, 0xD9	; 217
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     272:	ea ed       	ldi	r30, 0xDA	; 218
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     27c:	84 b3       	in	r24, 0x14	; 20
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     282:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     284:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     286:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     288:	a0 9a       	sbi	0x14, 0	; 20
}
     28a:	08 95       	ret

0000028c <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2e 97       	sbiw	r28, 0x0e	; 14
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ac 01       	movw	r20, r24
	
	uint8_t digit[] = {
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	8a 83       	std	Y+2, r24	; 0x02
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	8b 83       	std	Y+3, r24	; 0x03
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	8c 83       	std	Y+4, r24	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2b6:	de 01       	movw	r26, r28
     2b8:	15 96       	adiw	r26, 0x05	; 5
     2ba:	e7 ee       	ldi	r30, 0xE7	; 231
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <display_dec+0x34>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2cc:	ea ed       	ldi	r30, 0xDA	; 218
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d6:	80 81       	ld	r24, Z
     2d8:	8f 7e       	andi	r24, 0xEF	; 239
     2da:	80 83       	st	Z, r24
	
	//set anode bit
	DATA_BUS = digit[place];
     2dc:	06 2f       	mov	r16, r22
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	de 01       	movw	r26, r28
     2e2:	a0 0f       	add	r26, r16
     2e4:	b1 1f       	adc	r27, r17
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	8c 91       	ld	r24, X
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	82 b9       	out	0x02, r24	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2ee:	80 81       	ld	r24, Z
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	80 83       	st	Z, r24
	//if (number > 999) {
	//number = 999;
	//}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     2fa:	ca 01       	movw	r24, r20
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	9a 01       	movw	r18, r20
     306:	36 95       	lsr	r19
     308:	27 95       	ror	r18
     30a:	28 0f       	add	r18, r24
     30c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     30e:	c9 01       	movw	r24, r18
     310:	92 95       	swap	r25
     312:	82 95       	swap	r24
     314:	8f 70       	andi	r24, 0x0F	; 15
     316:	89 27       	eor	r24, r25
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	89 27       	eor	r24, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     320:	29 2f       	mov	r18, r25
     322:	33 27       	eor	r19, r19
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
	r = number - q2 * 10;
     334:	28 2f       	mov	r18, r24
     336:	22 0f       	add	r18, r18
     338:	32 2f       	mov	r19, r18
     33a:	33 0f       	add	r19, r19
     33c:	33 0f       	add	r19, r19
     33e:	23 0f       	add	r18, r19
     340:	e4 2f       	mov	r30, r20
     342:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	ea 30       	cpi	r30, 0x0A	; 10
     34a:	10 f4       	brcc	.+4      	; 0x350 <display_dec+0xc4>
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	68 0f       	add	r22, r24
     352:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     354:	9b 01       	movw	r18, r22
     356:	36 95       	lsr	r19
     358:	27 95       	ror	r18
     35a:	36 95       	lsr	r19
     35c:	27 95       	ror	r18
     35e:	ab 01       	movw	r20, r22
     360:	56 95       	lsr	r21
     362:	47 95       	ror	r20
     364:	24 0f       	add	r18, r20
     366:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     368:	c9 01       	movw	r24, r18
     36a:	92 95       	swap	r25
     36c:	82 95       	swap	r24
     36e:	8f 70       	andi	r24, 0x0F	; 15
     370:	89 27       	eor	r24, r25
     372:	9f 70       	andi	r25, 0x0F	; 15
     374:	89 27       	eor	r24, r25
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     37a:	29 2f       	mov	r18, r25
     37c:	33 27       	eor	r19, r19
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
	r = qa - q3 * 10;
     38e:	98 2f       	mov	r25, r24
     390:	99 0f       	add	r25, r25
     392:	29 2f       	mov	r18, r25
     394:	22 0f       	add	r18, r18
     396:	22 0f       	add	r18, r18
     398:	92 0f       	add	r25, r18
     39a:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	6a 30       	cpi	r22, 0x0A	; 10
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <display_dec+0x118>
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3a6:	41 ef       	ldi	r20, 0xF1	; 241
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	da 01       	movw	r26, r20
     3ac:	a6 0f       	add	r26, r22
     3ae:	b1 1d       	adc	r27, r1
     3b0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3b2:	28 2f       	mov	r18, r24
     3b4:	26 95       	lsr	r18
     3b6:	26 95       	lsr	r18
     3b8:	98 2f       	mov	r25, r24
     3ba:	96 95       	lsr	r25
     3bc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3be:	29 2f       	mov	r18, r25
     3c0:	22 95       	swap	r18
     3c2:	2f 70       	andi	r18, 0x0F	; 15
     3c4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 0f       	add	r18, r18
     3d0:	62 2f       	mov	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	66 0f       	add	r22, r22
     3d6:	26 0f       	add	r18, r22
     3d8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3da:	da 01       	movw	r26, r20
     3dc:	a8 0f       	add	r26, r24
     3de:	b1 1d       	adc	r27, r1
     3e0:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3e2:	4e 0f       	add	r20, r30
     3e4:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3e6:	fa 01       	movw	r30, r20
     3e8:	40 81       	ld	r20, Z
     3ea:	40 93 b3 02 	sts	0x02B3, r20
	digit_index[1] = tens_place;
     3ee:	30 93 b4 02 	sts	0x02B4, r19
	digit_index[2] = hunds_place;
     3f2:	20 93 b5 02 	sts	0x02B5, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	8a 30       	cpi	r24, 0x0A	; 10
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <display_dec+0x172>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     400:	90 93 b6 02 	sts	0x02B6, r25

	cathode_byte = dec[digit_index[place]];
     404:	f8 01       	movw	r30, r16
     406:	ed 54       	subi	r30, 0x4D	; 77
     408:	fd 4f       	sbci	r31, 0xFD	; 253
     40a:	80 81       	ld	r24, Z
     40c:	fe 01       	movw	r30, r28
     40e:	e8 0f       	add	r30, r24
     410:	f1 1d       	adc	r31, r1
     412:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     414:	90 91 05 03 	lds	r25, 0x0305
     418:	92 30       	cpi	r25, 0x02	; 2
     41a:	11 f4       	brne	.+4      	; 0x420 <display_dec+0x194>
     41c:	80 62       	ori	r24, 0x20	; 32
     41e:	03 c0       	rjmp	.+6      	; 0x426 <display_dec+0x19a>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     420:	91 30       	cpi	r25, 0x01	; 1
     422:	09 f4       	brne	.+2      	; 0x426 <display_dec+0x19a>
     424:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     426:	80 95       	com	r24
     428:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     42a:	ea ed       	ldi	r30, 0xDA	; 218
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	80 61       	ori	r24, 0x10	; 16
     432:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     434:	80 81       	ld	r24, Z
     436:	8f 7e       	andi	r24, 0xEF	; 239
     438:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     43a:	2e 96       	adiw	r28, 0x0e	; 14
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	08 95       	ret

00000450 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     450:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     452:	66 23       	and	r22, r22
     454:	69 f4       	brne	.+26     	; 0x470 <update_display+0x20>

		
			
		display_dec(number, place);
     456:	c0 91 b7 02 	lds	r28, 0x02B7
     45a:	6c 2f       	mov	r22, r28
     45c:	0e 94 46 01 	call	0x28c	; 0x28c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     460:	8c 2f       	mov	r24, r28
     462:	8f 5f       	subi	r24, 0xFF	; 255
     464:	80 93 b7 02 	sts	0x02B7, r24
     468:	c3 30       	cpi	r28, 0x03	; 3
     46a:	11 f4       	brne	.+4      	; 0x470 <update_display+0x20>
		{
			place = 0;
     46c:	10 92 b7 02 	sts	0x02B7, r1
		
		
	}
	
	
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     474:	1f 92       	push	r1
     476:	0f 92       	push	r0
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	0f 92       	push	r0
     47c:	11 24       	eor	r1, r1
     47e:	8f 93       	push	r24
     480:	9f 93       	push	r25
     482:	ef 93       	push	r30
     484:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     486:	80 91 76 03 	lds	r24, 0x0376
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     48e:	80 91 77 03 	lds	r24, 0x0377
     492:	88 23       	and	r24, r24
     494:	a1 f4       	brne	.+40     	; 0x4be <__vector_10+0x4a>
		count_finished = FALSE;
     496:	10 92 74 03 	sts	0x0374, r1
		no_overflow = TRUE;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     4a0:	80 93 77 03 	sts	0x0377, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     4a4:	e1 e8       	ldi	r30, 0x81	; 129
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	80 81       	ld	r24, Z
     4aa:	90 91 75 03 	lds	r25, 0x0375
     4ae:	89 2b       	or	r24, r25
     4b0:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4b2:	ef e6       	ldi	r30, 0x6F	; 111
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	81 60       	ori	r24, 0x01	; 1
     4ba:	80 83       	st	Z, r24
     4bc:	11 c0       	rjmp	.+34     	; 0x4e0 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4be:	e4 e8       	ldi	r30, 0x84	; 132
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	91 81       	ldd	r25, Z+1	; 0x01
     4c6:	90 93 73 03 	sts	0x0373, r25
     4ca:	80 93 72 03 	sts	0x0372, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4ce:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 74 03 	sts	0x0374, r24
		period_counter = 0;
     4d8:	10 92 77 03 	sts	0x0377, r1
		TCNT1 = 0; //reset timer/counter 1
     4dc:	11 82       	std	Z+1, r1	; 0x01
     4de:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4e0:	ff 91       	pop	r31
     4e2:	ef 91       	pop	r30
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti

000004f2 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     4fc:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     50a:	84 2f       	mov	r24, r20
	remove_note(note);
     50c:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     510:	80 91 b9 02 	lds	r24, 0x02B9
     514:	81 50       	subi	r24, 0x01	; 1
     516:	80 93 b9 02 	sts	0x02B9, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     51a:	88 23       	and	r24, r24
     51c:	09 f4       	brne	.+2      	; 0x520 <note_off_event+0x16>
     51e:	89 98       	cbi	0x11, 1	; 17
     520:	08 95       	ret

00000522 <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     522:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     524:	40 93 ba 02 	sts	0x02BA, r20
	if (velocity == 0) {
     528:	22 23       	and	r18, r18
     52a:	59 f4       	brne	.+22     	; 0x542 <note_on_event+0x20>
		remove_note(note);
     52c:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     530:	80 91 b9 02 	lds	r24, 0x02B9
     534:	81 50       	subi	r24, 0x01	; 1
     536:	80 93 b9 02 	sts	0x02B9, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     53a:	88 23       	and	r24, r24
     53c:	59 f4       	brne	.+22     	; 0x554 <note_on_event+0x32>
     53e:	89 98       	cbi	0x11, 1	; 17
     540:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     542:	62 2f       	mov	r22, r18
     544:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     548:	80 91 b9 02 	lds	r24, 0x02B9
     54c:	8f 5f       	subi	r24, 0xFF	; 255
     54e:	80 93 b9 02 	sts	0x02B9, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     552:	89 9a       	sbi	0x11, 1	; 17
     554:	08 95       	ret

00000556 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     556:	87 e2       	ldi	r24, 0x27	; 39
     558:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     55c:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     560:	88 e9       	ldi	r24, 0x98	; 152
     562:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     566:	08 95       	ret

00000568 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	0f 92       	push	r0
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     594:	80 91 c6 00 	lds	r24, 0x00C6
     598:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     59a:	8c e7       	ldi	r24, 0x7C	; 124
     59c:	93 e0       	ldi	r25, 0x03	; 3
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	ae 01       	movw	r20, r28
     5a2:	4f 5f       	subi	r20, 0xFF	; 255
     5a4:	5f 4f       	sbci	r21, 0xFF	; 255
     5a6:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     5aa:	0f 90       	pop	r0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	0f 90       	pop	r0
     5ce:	1f 90       	pop	r1
     5d0:	18 95       	reti

000005d2 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     5d2:	c0 e8       	ldi	r28, 0x80	; 128
     5d4:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     5d6:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     5d8:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     5da:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     5dc:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     5de:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     5e0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     5e4:	a9 ed       	ldi	r26, 0xD9	; 217
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	8c 91       	ld	r24, X
     5ea:	80 6c       	ori	r24, 0xC0	; 192
     5ec:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     5ee:	ea ed       	ldi	r30, 0xDA	; 218
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	80 6c       	ori	r24, 0xC0	; 192
     5f6:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     5f8:	81 b1       	in	r24, 0x01	; 1
     5fa:	8f ef       	ldi	r24, 0xFF	; 255
     5fc:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     5fe:	92 b1       	in	r25, 0x02	; 2
     600:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     602:	8c 91       	ld	r24, X
     604:	80 63       	ori	r24, 0x30	; 48
     606:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     608:	80 81       	ld	r24, Z
     60a:	8f 7c       	andi	r24, 0xCF	; 207
     60c:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     60e:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     610:	ec ed       	ldi	r30, 0xDC	; 220
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	80 62       	ori	r24, 0x20	; 32
     618:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     61a:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     61c:	ed ed       	ldi	r30, 0xDD	; 221
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	80 62       	ori	r24, 0x20	; 32
     624:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     626:	80 81       	ld	r24, Z
     628:	8f 7d       	andi	r24, 0xDF	; 223
     62a:	80 83       	st	Z, r24
	DATA_BUS = 0;
     62c:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     62e:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     632:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     636:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     63a:	cc e7       	ldi	r28, 0x7C	; 124
     63c:	d3 e0       	ldi	r29, 0x03	; 3
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     644:	ce 01       	movw	r24, r28
     646:	61 e9       	ldi	r22, 0x91	; 145
     648:	72 e0       	ldi	r23, 0x02	; 2
     64a:	0e 94 42 16 	call	0x2c84	; 0x2c84 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     64e:	ce 01       	movw	r24, r28
     650:	65 e8       	ldi	r22, 0x85	; 133
     652:	72 e0       	ldi	r23, 0x02	; 2
     654:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     658:	0e 94 ab 02 	call	0x556	; 0x556 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     65c:	0e 94 13 06 	call	0xc26	; 0xc26 <update_spi>
	
	
	current_patch.number = 1;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     666:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     668:	0e 94 f5 12 	call	0x25ea	; 0x25ea <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	0e 94 96 08 	call	0x112c	; 0x112c <load_patch>

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     672:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     674:	0f 2e       	mov	r0, r31
     676:	fa e7       	ldi	r31, 0x7A	; 122
     678:	ef 2e       	mov	r14, r31
     67a:	f3 e0       	ldi	r31, 0x03	; 3
     67c:	ff 2e       	mov	r15, r31
     67e:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     680:	0f 2e       	mov	r0, r31
     682:	f5 e0       	ldi	r31, 0x05	; 5
     684:	cf 2e       	mov	r12, r31
     686:	f3 e0       	ldi	r31, 0x03	; 3
     688:	df 2e       	mov	r13, r31
     68a:	f0 2d       	mov	r31, r0
     68c:	d0 e8       	ldi	r29, 0x80	; 128
	load_patch(1);

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     68e:	c8 01       	movw	r24, r16
     690:	0e 94 d5 18 	call	0x31aa	; 0x31aa <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     694:	80 91 fd 01 	lds	r24, 0x01FD
     698:	90 91 fe 01 	lds	r25, 0x01FE
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     6a2:	0e 94 75 03 	call	0x6ea	; 0x6ea <scan_pots>
		update_control_voltages();
     6a6:	0e 94 02 04 	call	0x804	; 0x804 <update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     6aa:	80 91 b8 02 	lds	r24, 0x02B8
     6ae:	98 2f       	mov	r25, r24
     6b0:	9f 5f       	subi	r25, 0xFF	; 255
     6b2:	90 93 b8 02 	sts	0x02B8, r25
     6b6:	85 30       	cpi	r24, 0x05	; 5
     6b8:	51 f7       	brne	.-44     	; 0x68e <main+0xbc>
		{
			switch_timer = 0;
     6ba:	10 92 b8 02 	sts	0x02B8, r1
			switch_press = 0; //reset global switch press flag
     6be:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     6c2:	f7 01       	movw	r30, r14
     6c4:	c0 81       	ld	r28, Z
     6c6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <read_switch_port>
     6ca:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     6cc:	f6 01       	movw	r30, r12
     6ce:	90 81       	ld	r25, Z
     6d0:	91 30       	cpi	r25, 0x01	; 1
     6d2:	11 f4       	brne	.+4      	; 0x6d8 <main+0x106>
     6d4:	cd 2f       	mov	r28, r29
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <main+0x108>
     6d8:	c0 e0       	ldi	r28, 0x00	; 0
     6da:	c8 2b       	or	r28, r24
     6dc:	f7 01       	movw	r30, r14
     6de:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     6e0:	0e 94 13 06 	call	0xc26	; 0xc26 <update_spi>
			refresh_synth();
     6e4:	0e 94 9e 0c 	call	0x193c	; 0x193c <refresh_synth>
     6e8:	d2 cf       	rjmp	.-92     	; 0x68e <main+0xbc>

000006ea <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	c0 e0       	ldi	r28, 0x00	; 0
     6fe:	d1 e0       	ldi	r29, 0x01	; 1
     700:	02 ec       	ldi	r16, 0xC2	; 194
     702:	12 e0       	ldi	r17, 0x02	; 2
     704:	0f 2e       	mov	r0, r31
     706:	fc e3       	ldi	r31, 0x3C	; 60
     708:	cf 2e       	mov	r12, r31
     70a:	dd 24       	eor	r13, r13
     70c:	f0 2d       	mov	r31, r0
     70e:	cc 0e       	add	r12, r28
     710:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     712:	0f 2e       	mov	r0, r31
     714:	f5 e0       	ldi	r31, 0x05	; 5
     716:	ef 2e       	mov	r14, r31
     718:	f3 e0       	ldi	r31, 0x03	; 3
     71a:	ff 2e       	mov	r15, r31
     71c:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     71e:	bb 24       	eor	r11, r11
     720:	68 94       	set
     722:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     724:	88 81       	ld	r24, Y
     726:	99 81       	ldd	r25, Y+1	; 0x01
     728:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     72c:	90 93 bc 02 	sts	0x02BC, r25
     730:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     734:	e8 81       	ld	r30, Y
     736:	f9 81       	ldd	r31, Y+1	; 0x01
     738:	40 81       	ld	r20, Z
     73a:	21 81       	ldd	r18, Z+1	; 0x01
     73c:	52 2f       	mov	r21, r18
     73e:	53 70       	andi	r21, 0x03	; 3
     740:	84 1b       	sub	r24, r20
     742:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     744:	95 95       	asr	r25
     746:	87 95       	ror	r24
     748:	95 95       	asr	r25
     74a:	87 95       	ror	r24
     74c:	84 0f       	add	r24, r20
     74e:	95 1f       	adc	r25, r21
     750:	80 83       	st	Z, r24
     752:	89 2f       	mov	r24, r25
     754:	83 70       	andi	r24, 0x03	; 3
     756:	2c 7f       	andi	r18, 0xFC	; 252
     758:	28 2b       	or	r18, r24
     75a:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     75c:	e9 91       	ld	r30, Y+
     75e:	f9 91       	ld	r31, Y+
     760:	92 81       	ldd	r25, Z+2	; 0x02
     762:	20 81       	ld	r18, Z
     764:	81 81       	ldd	r24, Z+1	; 0x01
     766:	38 2f       	mov	r19, r24
     768:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     76a:	d7 01       	movw	r26, r14
     76c:	8c 91       	ld	r24, X
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	19 f0       	breq	.+6      	; 0x778 <scan_pots+0x8e>
     772:	83 81       	ldd	r24, Z+3	; 0x03
     774:	88 23       	and	r24, r24
     776:	24 f0       	brlt	.+8      	; 0x780 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     778:	f8 01       	movw	r30, r16
     77a:	31 83       	std	Z+1, r19	; 0x01
     77c:	20 83       	st	Z, r18
     77e:	14 c0       	rjmp	.+40     	; 0x7a8 <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     780:	49 2f       	mov	r20, r25
     782:	43 50       	subi	r20, 0x03	; 3
     784:	c9 01       	movw	r24, r18
     786:	95 95       	asr	r25
     788:	87 95       	ror	r24
     78a:	95 95       	asr	r25
     78c:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     78e:	94 2f       	mov	r25, r20
     790:	98 1b       	sub	r25, r24
     792:	9a 3f       	cpi	r25, 0xFA	; 250
     794:	48 f4       	brcc	.+18     	; 0x7a8 <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     796:	d8 01       	movw	r26, r16
     798:	11 96       	adiw	r26, 0x01	; 1
     79a:	3c 93       	st	X, r19
     79c:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     79e:	83 81       	ldd	r24, Z+3	; 0x03
     7a0:	8f 77       	andi	r24, 0x7F	; 127
     7a2:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     7a4:	f7 01       	movw	r30, r14
     7a6:	b0 82       	st	Z, r11
     7a8:	0e 5f       	subi	r16, 0xFE	; 254
     7aa:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     7ac:	cc 15       	cp	r28, r12
     7ae:	dd 05       	cpc	r29, r13
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <scan_pots+0xca>
     7b2:	b8 cf       	rjmp	.-144    	; 0x724 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     7b4:	8c e7       	ldi	r24, 0x7C	; 124
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     7bc:	90 93 bc 02 	sts	0x02BC, r25
     7c0:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     7c4:	20 91 7c 01 	lds	r18, 0x017C
     7c8:	40 91 7d 01 	lds	r20, 0x017D
     7cc:	34 2f       	mov	r19, r20
     7ce:	33 70       	andi	r19, 0x03	; 3
     7d0:	82 1b       	sub	r24, r18
     7d2:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     7d4:	95 95       	asr	r25
     7d6:	87 95       	ror	r24
     7d8:	95 95       	asr	r25
     7da:	87 95       	ror	r24
     7dc:	28 0f       	add	r18, r24
     7de:	39 1f       	adc	r19, r25
     7e0:	20 93 7c 01 	sts	0x017C, r18
     7e4:	83 2f       	mov	r24, r19
     7e6:	83 70       	andi	r24, 0x03	; 3
     7e8:	4c 7f       	andi	r20, 0xFC	; 252
     7ea:	48 2b       	or	r20, r24
     7ec:	40 93 7d 01 	sts	0x017D, r20
	
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	bf 90       	pop	r11
     802:	08 95       	ret

00000804 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     808:	60 91 c2 02 	lds	r22, 0x02C2
     80c:	70 91 c3 02 	lds	r23, 0x02C3
     810:	62 95       	swap	r22
     812:	72 95       	swap	r23
     814:	70 7f       	andi	r23, 0xF0	; 240
     816:	76 27       	eor	r23, r22
     818:	60 7f       	andi	r22, 0xF0	; 240
     81a:	76 27       	eor	r23, r22
     81c:	84 ee       	ldi	r24, 0xE4	; 228
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     824:	60 91 c4 02 	lds	r22, 0x02C4
     828:	70 91 c5 02 	lds	r23, 0x02C5
     82c:	62 95       	swap	r22
     82e:	72 95       	swap	r23
     830:	70 7f       	andi	r23, 0xF0	; 240
     832:	76 27       	eor	r23, r22
     834:	60 7f       	andi	r22, 0xF0	; 240
     836:	76 27       	eor	r23, r22
     838:	83 ee       	ldi	r24, 0xE3	; 227
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     840:	60 91 c6 02 	lds	r22, 0x02C6
     844:	70 91 c7 02 	lds	r23, 0x02C7
     848:	66 0f       	add	r22, r22
     84a:	77 1f       	adc	r23, r23
     84c:	66 0f       	add	r22, r22
     84e:	77 1f       	adc	r23, r23
     850:	66 0f       	add	r22, r22
     852:	77 1f       	adc	r23, r23
     854:	82 ee       	ldi	r24, 0xE2	; 226
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     85c:	60 91 c8 02 	lds	r22, 0x02C8
     860:	70 91 c9 02 	lds	r23, 0x02C9
     864:	62 95       	swap	r22
     866:	72 95       	swap	r23
     868:	70 7f       	andi	r23, 0xF0	; 240
     86a:	76 27       	eor	r23, r22
     86c:	60 7f       	andi	r22, 0xF0	; 240
     86e:	76 27       	eor	r23, r22
     870:	82 eb       	ldi	r24, 0xB2	; 178
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     878:	60 91 ca 02 	lds	r22, 0x02CA
     87c:	70 91 cb 02 	lds	r23, 0x02CB
     880:	66 0f       	add	r22, r22
     882:	77 1f       	adc	r23, r23
     884:	66 0f       	add	r22, r22
     886:	77 1f       	adc	r23, r23
     888:	66 0f       	add	r22, r22
     88a:	77 1f       	adc	r23, r23
     88c:	81 ee       	ldi	r24, 0xE1	; 225
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     894:	60 91 cc 02 	lds	r22, 0x02CC
     898:	70 91 cd 02 	lds	r23, 0x02CD
     89c:	62 95       	swap	r22
     89e:	72 95       	swap	r23
     8a0:	70 7f       	andi	r23, 0xF0	; 240
     8a2:	76 27       	eor	r23, r22
     8a4:	60 7f       	andi	r22, 0xF0	; 240
     8a6:	76 27       	eor	r23, r22
     8a8:	80 ee       	ldi	r24, 0xE0	; 224
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     8b0:	60 91 ce 02 	lds	r22, 0x02CE
     8b4:	70 91 cf 02 	lds	r23, 0x02CF
     8b8:	62 95       	swap	r22
     8ba:	72 95       	swap	r23
     8bc:	70 7f       	andi	r23, 0xF0	; 240
     8be:	76 27       	eor	r23, r22
     8c0:	60 7f       	andi	r22, 0xF0	; 240
     8c2:	76 27       	eor	r23, r22
     8c4:	8f ed       	ldi	r24, 0xDF	; 223
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     8cc:	60 91 d0 02 	lds	r22, 0x02D0
     8d0:	70 91 d1 02 	lds	r23, 0x02D1
     8d4:	62 95       	swap	r22
     8d6:	72 95       	swap	r23
     8d8:	70 7f       	andi	r23, 0xF0	; 240
     8da:	76 27       	eor	r23, r22
     8dc:	60 7f       	andi	r22, 0xF0	; 240
     8de:	76 27       	eor	r23, r22
     8e0:	8e ed       	ldi	r24, 0xDE	; 222
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     8e8:	80 91 d4 02 	lds	r24, 0x02D4
     8ec:	90 91 d5 02 	lds	r25, 0x02D5
     8f0:	c0 e0       	ldi	r28, 0x00	; 0
     8f2:	d2 e0       	ldi	r29, 0x02	; 2
     8f4:	c8 1b       	sub	r28, r24
     8f6:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     8f8:	60 91 6d 03 	lds	r22, 0x036D
     8fc:	70 91 6e 03 	lds	r23, 0x036E
     900:	60 50       	subi	r22, 0x00	; 0
     902:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     904:	80 91 d2 02 	lds	r24, 0x02D2
     908:	90 91 d3 02 	lds	r25, 0x02D3
     90c:	68 1b       	sub	r22, r24
     90e:	79 0b       	sbc	r23, r25
     910:	6c 0f       	add	r22, r28
     912:	7d 1f       	adc	r23, r29
     914:	8d ed       	ldi	r24, 0xDD	; 221
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     91c:	60 91 6f 03 	lds	r22, 0x036F
     920:	70 91 70 03 	lds	r23, 0x0370
     924:	6c 0f       	add	r22, r28
     926:	7d 1f       	adc	r23, r29
     928:	8c ed       	ldi	r24, 0xDC	; 220
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     930:	60 91 d6 02 	lds	r22, 0x02D6
     934:	70 91 d7 02 	lds	r23, 0x02D7
     938:	62 95       	swap	r22
     93a:	72 95       	swap	r23
     93c:	70 7f       	andi	r23, 0xF0	; 240
     93e:	76 27       	eor	r23, r22
     940:	60 7f       	andi	r22, 0xF0	; 240
     942:	76 27       	eor	r23, r22
     944:	8b ed       	ldi	r24, 0xDB	; 219
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     94c:	60 91 da 02 	lds	r22, 0x02DA
     950:	70 91 db 02 	lds	r23, 0x02DB
     954:	62 95       	swap	r22
     956:	72 95       	swap	r23
     958:	70 7f       	andi	r23, 0xF0	; 240
     95a:	76 27       	eor	r23, r22
     95c:	60 7f       	andi	r22, 0xF0	; 240
     95e:	76 27       	eor	r23, r22
     960:	8a ed       	ldi	r24, 0xDA	; 218
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     968:	60 91 dc 02 	lds	r22, 0x02DC
     96c:	70 91 dd 02 	lds	r23, 0x02DD
     970:	62 95       	swap	r22
     972:	72 95       	swap	r23
     974:	70 7f       	andi	r23, 0xF0	; 240
     976:	76 27       	eor	r23, r22
     978:	60 7f       	andi	r22, 0xF0	; 240
     97a:	76 27       	eor	r23, r22
     97c:	89 ed       	ldi	r24, 0xD9	; 217
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     984:	60 91 7c 01 	lds	r22, 0x017C
     988:	80 91 7d 01 	lds	r24, 0x017D
     98c:	78 2f       	mov	r23, r24
     98e:	73 70       	andi	r23, 0x03	; 3
     990:	62 95       	swap	r22
     992:	72 95       	swap	r23
     994:	70 7f       	andi	r23, 0xF0	; 240
     996:	76 27       	eor	r23, r22
     998:	60 7f       	andi	r22, 0xF0	; 240
     99a:	76 27       	eor	r23, r22
     99c:	88 ed       	ldi	r24, 0xD8	; 216
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     9a4:	60 91 de 02 	lds	r22, 0x02DE
     9a8:	70 91 df 02 	lds	r23, 0x02DF
     9ac:	62 95       	swap	r22
     9ae:	72 95       	swap	r23
     9b0:	70 7f       	andi	r23, 0xF0	; 240
     9b2:	76 27       	eor	r23, r22
     9b4:	60 7f       	andi	r22, 0xF0	; 240
     9b6:	76 27       	eor	r23, r22
     9b8:	87 ed       	ldi	r24, 0xD7	; 215
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     9c0:	60 91 e0 02 	lds	r22, 0x02E0
     9c4:	70 91 e1 02 	lds	r23, 0x02E1
     9c8:	62 95       	swap	r22
     9ca:	72 95       	swap	r23
     9cc:	70 7f       	andi	r23, 0xF0	; 240
     9ce:	76 27       	eor	r23, r22
     9d0:	60 7f       	andi	r22, 0xF0	; 240
     9d2:	76 27       	eor	r23, r22
     9d4:	86 ed       	ldi	r24, 0xD6	; 214
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     9dc:	60 91 e2 02 	lds	r22, 0x02E2
     9e0:	70 91 e3 02 	lds	r23, 0x02E3
     9e4:	62 95       	swap	r22
     9e6:	72 95       	swap	r23
     9e8:	70 7f       	andi	r23, 0xF0	; 240
     9ea:	76 27       	eor	r23, r22
     9ec:	60 7f       	andi	r22, 0xF0	; 240
     9ee:	76 27       	eor	r23, r22
     9f0:	85 ed       	ldi	r24, 0xD5	; 213
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     9f8:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     9fc:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     9fe:	88 30       	cpi	r24, 0x08	; 8
     a00:	08 f4       	brcc	.+2      	; 0xa04 <update_control_voltages+0x200>
     a02:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = note;
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     a04:	8c 2f       	mov	r24, r28
     a06:	88 50       	subi	r24, 0x08	; 8
     a08:	69 e0       	ldi	r22, 0x09	; 9
     a0a:	73 e0       	ldi	r23, 0x03	; 3
     a0c:	0e 94 1e 13 	call	0x263c	; 0x263c <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     a10:	bc 01       	movw	r22, r24
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	20 91 e6 02 	lds	r18, 0x02E6
     a1a:	30 91 e7 02 	lds	r19, 0x02E7
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	0e 94 af 1a 	call	0x355e	; 0x355e <__mulsi3>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	07 2e       	mov	r0, r23
     a2c:	7a e0       	ldi	r23, 0x0A	; 10
     a2e:	b6 95       	lsr	r27
     a30:	a7 95       	ror	r26
     a32:	97 95       	ror	r25
     a34:	87 95       	ror	r24
     a36:	7a 95       	dec	r23
     a38:	d1 f7       	brne	.-12     	; 0xa2e <update_control_voltages+0x22a>
     a3a:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     a3c:	60 91 e4 02 	lds	r22, 0x02E4
     a40:	70 91 e5 02 	lds	r23, 0x02E5
     a44:	62 95       	swap	r22
     a46:	72 95       	swap	r23
     a48:	70 7f       	andi	r23, 0xF0	; 240
     a4a:	76 27       	eor	r23, r22
     a4c:	60 7f       	andi	r22, 0xF0	; 240
     a4e:	76 27       	eor	r23, r22
     a50:	86 0f       	add	r24, r22
     a52:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     a54:	bc 01       	movw	r22, r24
     a56:	80 e4       	ldi	r24, 0x40	; 64
     a58:	60 30       	cpi	r22, 0x00	; 0
     a5a:	78 07       	cpc	r23, r24
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <update_control_voltages+0x25e>
     a5e:	6f ef       	ldi	r22, 0xFF	; 255
     a60:	7f e3       	ldi	r23, 0x3F	; 63
     a62:	84 ed       	ldi	r24, 0xD4	; 212
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     a6a:	60 91 e8 02 	lds	r22, 0x02E8
     a6e:	70 91 e9 02 	lds	r23, 0x02E9
     a72:	62 95       	swap	r22
     a74:	72 95       	swap	r23
     a76:	70 7f       	andi	r23, 0xF0	; 240
     a78:	76 27       	eor	r23, r22
     a7a:	60 7f       	andi	r22, 0xF0	; 240
     a7c:	76 27       	eor	r23, r22
     a7e:	82 ed       	ldi	r24, 0xD2	; 210
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     a86:	60 91 ea 02 	lds	r22, 0x02EA
     a8a:	70 91 eb 02 	lds	r23, 0x02EB
     a8e:	62 95       	swap	r22
     a90:	72 95       	swap	r23
     a92:	70 7f       	andi	r23, 0xF0	; 240
     a94:	76 27       	eor	r23, r22
     a96:	60 7f       	andi	r22, 0xF0	; 240
     a98:	76 27       	eor	r23, r22
     a9a:	81 ed       	ldi	r24, 0xD1	; 209
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     aa2:	60 91 ec 02 	lds	r22, 0x02EC
     aa6:	70 91 ed 02 	lds	r23, 0x02ED
     aaa:	62 95       	swap	r22
     aac:	72 95       	swap	r23
     aae:	70 7f       	andi	r23, 0xF0	; 240
     ab0:	76 27       	eor	r23, r22
     ab2:	60 7f       	andi	r22, 0xF0	; 240
     ab4:	76 27       	eor	r23, r22
     ab6:	80 ed       	ldi	r24, 0xD0	; 208
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     abe:	60 91 ee 02 	lds	r22, 0x02EE
     ac2:	70 91 ef 02 	lds	r23, 0x02EF
     ac6:	62 95       	swap	r22
     ac8:	72 95       	swap	r23
     aca:	70 7f       	andi	r23, 0xF0	; 240
     acc:	76 27       	eor	r23, r22
     ace:	60 7f       	andi	r22, 0xF0	; 240
     ad0:	76 27       	eor	r23, r22
     ad2:	8f ec       	ldi	r24, 0xCF	; 207
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     ada:	60 91 f0 02 	lds	r22, 0x02F0
     ade:	70 91 f1 02 	lds	r23, 0x02F1
     ae2:	62 95       	swap	r22
     ae4:	72 95       	swap	r23
     ae6:	70 7f       	andi	r23, 0xF0	; 240
     ae8:	76 27       	eor	r23, r22
     aea:	60 7f       	andi	r22, 0xF0	; 240
     aec:	76 27       	eor	r23, r22
     aee:	8e ec       	ldi	r24, 0xCE	; 206
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     af6:	60 91 f2 02 	lds	r22, 0x02F2
     afa:	70 91 f3 02 	lds	r23, 0x02F3
     afe:	62 95       	swap	r22
     b00:	72 95       	swap	r23
     b02:	70 7f       	andi	r23, 0xF0	; 240
     b04:	76 27       	eor	r23, r22
     b06:	60 7f       	andi	r22, 0xF0	; 240
     b08:	76 27       	eor	r23, r22
     b0a:	8d ec       	ldi	r24, 0xCD	; 205
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     b12:	60 91 f4 02 	lds	r22, 0x02F4
     b16:	70 91 f5 02 	lds	r23, 0x02F5
     b1a:	62 95       	swap	r22
     b1c:	72 95       	swap	r23
     b1e:	70 7f       	andi	r23, 0xF0	; 240
     b20:	76 27       	eor	r23, r22
     b22:	60 7f       	andi	r22, 0xF0	; 240
     b24:	76 27       	eor	r23, r22
     b26:	8c ec       	ldi	r24, 0xCC	; 204
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     b2e:	60 91 f8 02 	lds	r22, 0x02F8
     b32:	70 91 f9 02 	lds	r23, 0x02F9
     b36:	62 95       	swap	r22
     b38:	72 95       	swap	r23
     b3a:	70 7f       	andi	r23, 0xF0	; 240
     b3c:	76 27       	eor	r23, r22
     b3e:	60 7f       	andi	r22, 0xF0	; 240
     b40:	76 27       	eor	r23, r22
     b42:	8a ec       	ldi	r24, 0xCA	; 202
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     b4a:	60 91 f6 02 	lds	r22, 0x02F6
     b4e:	70 91 f7 02 	lds	r23, 0x02F7
     b52:	62 95       	swap	r22
     b54:	72 95       	swap	r23
     b56:	70 7f       	andi	r23, 0xF0	; 240
     b58:	76 27       	eor	r23, r22
     b5a:	60 7f       	andi	r22, 0xF0	; 240
     b5c:	76 27       	eor	r23, r22
     b5e:	8b ec       	ldi	r24, 0xCB	; 203
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     b66:	60 91 fc 02 	lds	r22, 0x02FC
     b6a:	70 91 fd 02 	lds	r23, 0x02FD
     b6e:	62 95       	swap	r22
     b70:	72 95       	swap	r23
     b72:	70 7f       	andi	r23, 0xF0	; 240
     b74:	76 27       	eor	r23, r22
     b76:	60 7f       	andi	r22, 0xF0	; 240
     b78:	76 27       	eor	r23, r22
     b7a:	88 ec       	ldi	r24, 0xC8	; 200
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     b82:	60 91 fa 02 	lds	r22, 0x02FA
     b86:	70 91 fb 02 	lds	r23, 0x02FB
     b8a:	62 95       	swap	r22
     b8c:	72 95       	swap	r23
     b8e:	70 7f       	andi	r23, 0xF0	; 240
     b90:	76 27       	eor	r23, r22
     b92:	60 7f       	andi	r22, 0xF0	; 240
     b94:	76 27       	eor	r23, r22
     b96:	89 ec       	ldi	r24, 0xC9	; 201
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     b9e:	8c 2f       	mov	r24, r28
     ba0:	6f e0       	ldi	r22, 0x0F	; 15
     ba2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     ba6:	6b e4       	ldi	r22, 0x4B	; 75
     ba8:	73 e0       	ldi	r23, 0x03	; 3
     baa:	0e 94 1e 13 	call	0x263c	; 0x263c <interpolate_pitch_cv>
     bae:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     bb0:	86 ee       	ldi	r24, 0xE6	; 230
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     bb8:	8c 2f       	mov	r24, r28
     bba:	60 ef       	ldi	r22, 0xF0	; 240
     bbc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     bc0:	69 e2       	ldi	r22, 0x29	; 41
     bc2:	73 e0       	ldi	r23, 0x03	; 3
     bc4:	0e 94 1e 13 	call	0x263c	; 0x263c <interpolate_pitch_cv>
     bc8:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     bca:	85 ee       	ldi	r24, 0xE5	; 229
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     bd2:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     bd4:	a1 9a       	sbi	0x14, 1	; 20
}			
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	08 95       	ret

00000bdc <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     bdc:	84 b1       	in	r24, 0x04	; 4
     bde:	87 62       	ori	r24, 0x27	; 39
     be0:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     be2:	ec ed       	ldi	r30, 0xDC	; 220
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	8c 65       	ori	r24, 0x5C	; 92
     bea:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     bec:	85 b1       	in	r24, 0x05	; 5
     bee:	89 7d       	andi	r24, 0xD9	; 217
     bf0:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     bf2:	ed ed       	ldi	r30, 0xDD	; 221
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	83 7f       	andi	r24, 0xF3	; 243
     bfa:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     bfc:	80 e5       	ldi	r24, 0x50	; 80
     bfe:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     c00:	80 81       	ld	r24, Z
     c02:	87 7f       	andi	r24, 0xF7	; 247
     c04:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     c06:	80 81       	ld	r24, Z
     c08:	87 7f       	andi	r24, 0xF7	; 247
     c0a:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     c0c:	80 81       	ld	r24, Z
     c0e:	88 60       	ori	r24, 0x08	; 8
     c10:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     c12:	80 81       	ld	r24, Z
     c14:	8f 7e       	andi	r24, 0xEF	; 239
     c16:	80 83       	st	Z, r24
	
}
     c18:	08 95       	ret

00000c1a <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     c1a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     c1c:	0d b4       	in	r0, 0x2d	; 45
     c1e:	07 fe       	sbrs	r0, 7
     c20:	fd cf       	rjmp	.-6      	; 0xc1c <spi_shift_byte+0x2>
	return SPDR;
     c22:	8e b5       	in	r24, 0x2e	; 46
	
}
     c24:	08 95       	ret

00000c26 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     c26:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     c28:	80 91 02 03 	lds	r24, 0x0302
     c2c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     c30:	90 91 c1 02 	lds	r25, 0x02C1
     c34:	98 2b       	or	r25, r24
     c36:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     c3a:	20 91 bf 02 	lds	r18, 0x02BF
     c3e:	98 2f       	mov	r25, r24
     c40:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     c42:	89 2f       	mov	r24, r25
     c44:	82 27       	eor	r24, r18
     c46:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     c4a:	89 23       	and	r24, r25
     c4c:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     c50:	90 91 78 03 	lds	r25, 0x0378
     c54:	89 27       	eor	r24, r25
     c56:	80 93 78 03 	sts	0x0378, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     c5a:	80 91 01 03 	lds	r24, 0x0301
     c5e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     c62:	90 91 c1 02 	lds	r25, 0x02C1
     c66:	98 2b       	or	r25, r24
     c68:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     c6c:	20 91 bd 02 	lds	r18, 0x02BD
     c70:	98 2f       	mov	r25, r24
     c72:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     c74:	89 2f       	mov	r24, r25
     c76:	82 27       	eor	r24, r18
     c78:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     c7c:	89 23       	and	r24, r25
     c7e:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     c82:	90 91 79 03 	lds	r25, 0x0379
     c86:	89 27       	eor	r24, r25
     c88:	80 93 79 03 	sts	0x0379, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     c8c:	80 91 00 03 	lds	r24, 0x0300
     c90:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     c94:	80 91 ff 02 	lds	r24, 0x02FF
     c98:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     c9c:	30 91 79 03 	lds	r19, 0x0379
     ca0:	36 95       	lsr	r19
     ca2:	36 95       	lsr	r19
     ca4:	36 95       	lsr	r19
     ca6:	34 70       	andi	r19, 0x04	; 4
     ca8:	80 91 05 03 	lds	r24, 0x0305
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	11 f4       	brne	.+4      	; 0xcb4 <update_spi+0x8e>
     cb0:	80 e8       	ldi	r24, 0x80	; 128
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <update_spi+0x90>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
     cb6:	90 91 7a 03 	lds	r25, 0x037A
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     cba:	29 2f       	mov	r18, r25
     cbc:	22 1f       	adc	r18, r18
     cbe:	22 27       	eor	r18, r18
     cc0:	22 1f       	adc	r18, r18
     cc2:	22 95       	swap	r18
     cc4:	22 0f       	add	r18, r18
     cc6:	22 0f       	add	r18, r18
     cc8:	20 7c       	andi	r18, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     cca:	23 2b       	or	r18, r19
     ccc:	96 95       	lsr	r25
     cce:	96 95       	lsr	r25
     cd0:	96 95       	lsr	r25
     cd2:	91 70       	andi	r25, 0x01	; 1
     cd4:	92 2b       	or	r25, r18
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     cd6:	89 2b       	or	r24, r25
     cd8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     cdc:	ed ed       	ldi	r30, 0xDD	; 221
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	87 7f       	andi	r24, 0xF7	; 247
     ce4:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     ce6:	80 81       	ld	r24, Z
     ce8:	88 60       	ori	r24, 0x08	; 8
     cea:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     cec:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     cee:	08 95       	ret

00000cf0 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     cf0:	a0 e0       	ldi	r26, 0x00	; 0
     cf2:	b1 e0       	ldi	r27, 0x01	; 1
     cf4:	9d 01       	movw	r18, r26
     cf6:	24 5c       	subi	r18, 0xC4	; 196
     cf8:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= 29; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     cfa:	ed 91       	ld	r30, X+
     cfc:	fc 91       	ld	r31, X
     cfe:	11 97       	sbiw	r26, 0x01	; 1
     d00:	80 81       	ld	r24, Z
     d02:	41 81       	ldd	r20, Z+1	; 0x01
     d04:	94 2f       	mov	r25, r20
     d06:	93 70       	andi	r25, 0x03	; 3
     d08:	95 95       	asr	r25
     d0a:	87 95       	ror	r24
     d0c:	95 95       	asr	r25
     d0e:	87 95       	ror	r24
     d10:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     d12:	ed 91       	ld	r30, X+
     d14:	fd 91       	ld	r31, X+
     d16:	83 81       	ldd	r24, Z+3	; 0x03
     d18:	80 68       	ori	r24, 0x80	; 128
     d1a:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= 29; i++) {
     d1c:	a2 17       	cp	r26, r18
     d1e:	b3 07       	cpc	r27, r19
     d20:	61 f7       	brne	.-40     	; 0xcfa <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     d22:	08 95       	ret

00000d24 <unlock_pots>:

void unlock_pots(void) {
     d24:	e0 e0       	ldi	r30, 0x00	; 0
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	cf 01       	movw	r24, r30
     d2a:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked = 0;
     d2c:	a1 91       	ld	r26, Z+
     d2e:	b1 91       	ld	r27, Z+
     d30:	13 96       	adiw	r26, 0x03	; 3
     d32:	2c 91       	ld	r18, X
     d34:	13 97       	sbiw	r26, 0x03	; 3
     d36:	2f 77       	andi	r18, 0x7F	; 127
     d38:	13 96       	adiw	r26, 0x03	; 3
     d3a:	2c 93       	st	X, r18
     d3c:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= 29; i++) {
     d3e:	e8 17       	cp	r30, r24
     d40:	f9 07       	cpc	r31, r25
     d42:	a1 f7       	brne	.-24     	; 0xd2c <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
     d44:	08 95       	ret

00000d46 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	ab 97       	sbiw	r28, 0x2b	; 43
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     d5e:	ee ed       	ldi	r30, 0xDE	; 222
     d60:	f2 e0       	ldi	r31, 0x02	; 2
     d62:	20 91 de 02 	lds	r18, 0x02DE
     d66:	82 2f       	mov	r24, r18
     d68:	82 95       	swap	r24
     d6a:	80 7f       	andi	r24, 0xF0	; 240
     d6c:	22 95       	swap	r18
     d6e:	2f 70       	andi	r18, 0x0F	; 15
     d70:	90 91 df 02 	lds	r25, 0x02DF
     d74:	93 70       	andi	r25, 0x03	; 3
     d76:	92 95       	swap	r25
     d78:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     d7a:	df 01       	movw	r26, r30
     d7c:	5a 97       	sbiw	r26, 0x1a	; 26
     d7e:	3c 91       	ld	r19, X
     d80:	53 2f       	mov	r21, r19
     d82:	55 0f       	add	r21, r21
     d84:	55 0f       	add	r21, r21
     d86:	4a 81       	ldd	r20, Y+2	; 0x02
     d88:	43 70       	andi	r20, 0x03	; 3
     d8a:	45 2b       	or	r20, r21
     d8c:	4a 83       	std	Y+2, r20	; 0x02
     d8e:	63 2f       	mov	r22, r19
     d90:	62 95       	swap	r22
     d92:	66 95       	lsr	r22
     d94:	66 95       	lsr	r22
     d96:	63 70       	andi	r22, 0x03	; 3
     d98:	11 96       	adiw	r26, 0x01	; 1
     d9a:	4c 91       	ld	r20, X
     d9c:	43 70       	andi	r20, 0x03	; 3
     d9e:	44 0f       	add	r20, r20
     da0:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     da2:	df 01       	movw	r26, r30
     da4:	58 97       	sbiw	r26, 0x18	; 24
     da6:	3c 91       	ld	r19, X
     da8:	53 2f       	mov	r21, r19
     daa:	52 95       	swap	r21
     dac:	50 7f       	andi	r21, 0xF0	; 240
     dae:	46 2b       	or	r20, r22
     db0:	45 2b       	or	r20, r21
     db2:	4b 83       	std	Y+3, r20	; 0x03
     db4:	63 2f       	mov	r22, r19
     db6:	62 95       	swap	r22
     db8:	6f 70       	andi	r22, 0x0F	; 15
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	4c 91       	ld	r20, X
     dbe:	43 70       	andi	r20, 0x03	; 3
     dc0:	42 95       	swap	r20
     dc2:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     dc4:	df 01       	movw	r26, r30
     dc6:	56 97       	sbiw	r26, 0x16	; 22
     dc8:	3c 91       	ld	r19, X
     dca:	53 2f       	mov	r21, r19
     dcc:	52 95       	swap	r21
     dce:	55 0f       	add	r21, r21
     dd0:	55 0f       	add	r21, r21
     dd2:	50 7c       	andi	r21, 0xC0	; 192
     dd4:	46 2b       	or	r20, r22
     dd6:	45 2b       	or	r20, r21
     dd8:	4c 83       	std	Y+4, r20	; 0x04
     dda:	11 96       	adiw	r26, 0x01	; 1
     ddc:	4c 91       	ld	r20, X
     dde:	42 95       	swap	r20
     de0:	44 0f       	add	r20, r20
     de2:	44 0f       	add	r20, r20
     de4:	40 7c       	andi	r20, 0xC0	; 192
     de6:	36 95       	lsr	r19
     de8:	36 95       	lsr	r19
     dea:	34 2b       	or	r19, r20
     dec:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     dee:	df 01       	movw	r26, r30
     df0:	54 97       	sbiw	r26, 0x14	; 20
     df2:	3c 91       	ld	r19, X
     df4:	3e 83       	std	Y+6, r19	; 0x06
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     dfa:	df 01       	movw	r26, r30
     dfc:	52 97       	sbiw	r26, 0x12	; 18
     dfe:	3c 91       	ld	r19, X
     e00:	53 2f       	mov	r21, r19
     e02:	55 0f       	add	r21, r21
     e04:	55 0f       	add	r21, r21
     e06:	43 70       	andi	r20, 0x03	; 3
     e08:	45 2b       	or	r20, r21
     e0a:	4f 83       	std	Y+7, r20	; 0x07
     e0c:	63 2f       	mov	r22, r19
     e0e:	62 95       	swap	r22
     e10:	66 95       	lsr	r22
     e12:	66 95       	lsr	r22
     e14:	63 70       	andi	r22, 0x03	; 3
     e16:	11 96       	adiw	r26, 0x01	; 1
     e18:	4c 91       	ld	r20, X
     e1a:	43 70       	andi	r20, 0x03	; 3
     e1c:	44 0f       	add	r20, r20
     e1e:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     e20:	df 01       	movw	r26, r30
     e22:	50 97       	sbiw	r26, 0x10	; 16
     e24:	3c 91       	ld	r19, X
     e26:	53 2f       	mov	r21, r19
     e28:	52 95       	swap	r21
     e2a:	50 7f       	andi	r21, 0xF0	; 240
     e2c:	46 2b       	or	r20, r22
     e2e:	45 2b       	or	r20, r21
     e30:	48 87       	std	Y+8, r20	; 0x08
     e32:	63 2f       	mov	r22, r19
     e34:	62 95       	swap	r22
     e36:	6f 70       	andi	r22, 0x0F	; 15
     e38:	11 96       	adiw	r26, 0x01	; 1
     e3a:	4c 91       	ld	r20, X
     e3c:	43 70       	andi	r20, 0x03	; 3
     e3e:	42 95       	swap	r20
     e40:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     e42:	df 01       	movw	r26, r30
     e44:	1e 97       	sbiw	r26, 0x0e	; 14
     e46:	3c 91       	ld	r19, X
     e48:	53 2f       	mov	r21, r19
     e4a:	52 95       	swap	r21
     e4c:	55 0f       	add	r21, r21
     e4e:	55 0f       	add	r21, r21
     e50:	50 7c       	andi	r21, 0xC0	; 192
     e52:	46 2b       	or	r20, r22
     e54:	45 2b       	or	r20, r21
     e56:	49 87       	std	Y+9, r20	; 0x09
     e58:	11 96       	adiw	r26, 0x01	; 1
     e5a:	4c 91       	ld	r20, X
     e5c:	42 95       	swap	r20
     e5e:	44 0f       	add	r20, r20
     e60:	44 0f       	add	r20, r20
     e62:	40 7c       	andi	r20, 0xC0	; 192
     e64:	36 95       	lsr	r19
     e66:	36 95       	lsr	r19
     e68:	34 2b       	or	r19, r20
     e6a:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     e6c:	df 01       	movw	r26, r30
     e6e:	1c 97       	sbiw	r26, 0x0c	; 12
     e70:	3c 91       	ld	r19, X
     e72:	3b 87       	std	Y+11, r19	; 0x0b
     e74:	11 96       	adiw	r26, 0x01	; 1
     e76:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     e78:	df 01       	movw	r26, r30
     e7a:	1a 97       	sbiw	r26, 0x0a	; 10
     e7c:	3c 91       	ld	r19, X
     e7e:	53 2f       	mov	r21, r19
     e80:	55 0f       	add	r21, r21
     e82:	55 0f       	add	r21, r21
     e84:	43 70       	andi	r20, 0x03	; 3
     e86:	45 2b       	or	r20, r21
     e88:	4c 87       	std	Y+12, r20	; 0x0c
     e8a:	63 2f       	mov	r22, r19
     e8c:	62 95       	swap	r22
     e8e:	66 95       	lsr	r22
     e90:	66 95       	lsr	r22
     e92:	63 70       	andi	r22, 0x03	; 3
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	4c 91       	ld	r20, X
     e98:	43 70       	andi	r20, 0x03	; 3
     e9a:	44 0f       	add	r20, r20
     e9c:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
     e9e:	df 01       	movw	r26, r30
     ea0:	18 97       	sbiw	r26, 0x08	; 8
     ea2:	3c 91       	ld	r19, X
     ea4:	53 2f       	mov	r21, r19
     ea6:	52 95       	swap	r21
     ea8:	50 7f       	andi	r21, 0xF0	; 240
     eaa:	46 2b       	or	r20, r22
     eac:	45 2b       	or	r20, r21
     eae:	4d 87       	std	Y+13, r20	; 0x0d
     eb0:	63 2f       	mov	r22, r19
     eb2:	62 95       	swap	r22
     eb4:	6f 70       	andi	r22, 0x0F	; 15
     eb6:	11 96       	adiw	r26, 0x01	; 1
     eb8:	4c 91       	ld	r20, X
     eba:	43 70       	andi	r20, 0x03	; 3
     ebc:	42 95       	swap	r20
     ebe:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
     ec0:	df 01       	movw	r26, r30
     ec2:	16 97       	sbiw	r26, 0x06	; 6
     ec4:	3c 91       	ld	r19, X
     ec6:	53 2f       	mov	r21, r19
     ec8:	52 95       	swap	r21
     eca:	55 0f       	add	r21, r21
     ecc:	55 0f       	add	r21, r21
     ece:	50 7c       	andi	r21, 0xC0	; 192
     ed0:	46 2b       	or	r20, r22
     ed2:	45 2b       	or	r20, r21
     ed4:	4e 87       	std	Y+14, r20	; 0x0e
     ed6:	11 96       	adiw	r26, 0x01	; 1
     ed8:	4c 91       	ld	r20, X
     eda:	42 95       	swap	r20
     edc:	44 0f       	add	r20, r20
     ede:	44 0f       	add	r20, r20
     ee0:	40 7c       	andi	r20, 0xC0	; 192
     ee2:	36 95       	lsr	r19
     ee4:	36 95       	lsr	r19
     ee6:	34 2b       	or	r19, r20
     ee8:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
     eea:	df 01       	movw	r26, r30
     eec:	14 97       	sbiw	r26, 0x04	; 4
     eee:	3c 91       	ld	r19, X
     ef0:	38 8b       	std	Y+16, r19	; 0x10
     ef2:	11 96       	adiw	r26, 0x01	; 1
     ef4:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
     ef6:	df 01       	movw	r26, r30
     ef8:	12 97       	sbiw	r26, 0x02	; 2
     efa:	3c 91       	ld	r19, X
     efc:	53 2f       	mov	r21, r19
     efe:	55 0f       	add	r21, r21
     f00:	55 0f       	add	r21, r21
     f02:	43 70       	andi	r20, 0x03	; 3
     f04:	45 2b       	or	r20, r21
     f06:	49 8b       	std	Y+17, r20	; 0x11
     f08:	32 95       	swap	r19
     f0a:	36 95       	lsr	r19
     f0c:	36 95       	lsr	r19
     f0e:	33 70       	andi	r19, 0x03	; 3
     f10:	11 96       	adiw	r26, 0x01	; 1
     f12:	4c 91       	ld	r20, X
     f14:	43 70       	andi	r20, 0x03	; 3
     f16:	44 0f       	add	r20, r20
     f18:	44 0f       	add	r20, r20
     f1a:	83 2b       	or	r24, r19
     f1c:	84 2b       	or	r24, r20
     f1e:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
     f20:	80 91 e0 02 	lds	r24, 0x02E0
     f24:	38 2f       	mov	r19, r24
     f26:	32 95       	swap	r19
     f28:	33 0f       	add	r19, r19
     f2a:	33 0f       	add	r19, r19
     f2c:	30 7c       	andi	r19, 0xC0	; 192
     f2e:	92 2b       	or	r25, r18
     f30:	93 2b       	or	r25, r19
     f32:	9b 8b       	std	Y+19, r25	; 0x13
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	92 95       	swap	r25
     f38:	99 0f       	add	r25, r25
     f3a:	99 0f       	add	r25, r25
     f3c:	90 7c       	andi	r25, 0xC0	; 192
     f3e:	86 95       	lsr	r24
     f40:	86 95       	lsr	r24
     f42:	89 2b       	or	r24, r25
     f44:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
     f46:	80 91 e2 02 	lds	r24, 0x02E2
     f4a:	8d 8b       	std	Y+21, r24	; 0x15
     f4c:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
     f4e:	80 91 e4 02 	lds	r24, 0x02E4
     f52:	28 2f       	mov	r18, r24
     f54:	22 0f       	add	r18, r18
     f56:	22 0f       	add	r18, r18
     f58:	93 70       	andi	r25, 0x03	; 3
     f5a:	92 2b       	or	r25, r18
     f5c:	9e 8b       	std	Y+22, r25	; 0x16
     f5e:	38 2f       	mov	r19, r24
     f60:	32 95       	swap	r19
     f62:	36 95       	lsr	r19
     f64:	36 95       	lsr	r19
     f66:	33 70       	andi	r19, 0x03	; 3
     f68:	97 81       	ldd	r25, Z+7	; 0x07
     f6a:	93 70       	andi	r25, 0x03	; 3
     f6c:	99 0f       	add	r25, r25
     f6e:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
     f70:	80 91 e6 02 	lds	r24, 0x02E6
     f74:	28 2f       	mov	r18, r24
     f76:	22 95       	swap	r18
     f78:	20 7f       	andi	r18, 0xF0	; 240
     f7a:	93 2b       	or	r25, r19
     f7c:	92 2b       	or	r25, r18
     f7e:	9f 8b       	std	Y+23, r25	; 0x17
     f80:	38 2f       	mov	r19, r24
     f82:	32 95       	swap	r19
     f84:	3f 70       	andi	r19, 0x0F	; 15
     f86:	91 85       	ldd	r25, Z+9	; 0x09
     f88:	93 70       	andi	r25, 0x03	; 3
     f8a:	92 95       	swap	r25
     f8c:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
     f8e:	80 91 e8 02 	lds	r24, 0x02E8
     f92:	28 2f       	mov	r18, r24
     f94:	22 95       	swap	r18
     f96:	22 0f       	add	r18, r18
     f98:	22 0f       	add	r18, r18
     f9a:	20 7c       	andi	r18, 0xC0	; 192
     f9c:	93 2b       	or	r25, r19
     f9e:	92 2b       	or	r25, r18
     fa0:	98 8f       	std	Y+24, r25	; 0x18
     fa2:	93 85       	ldd	r25, Z+11	; 0x0b
     fa4:	92 95       	swap	r25
     fa6:	99 0f       	add	r25, r25
     fa8:	99 0f       	add	r25, r25
     faa:	90 7c       	andi	r25, 0xC0	; 192
     fac:	86 95       	lsr	r24
     fae:	86 95       	lsr	r24
     fb0:	89 2b       	or	r24, r25
     fb2:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
     fb4:	80 91 ea 02 	lds	r24, 0x02EA
     fb8:	8a 8f       	std	Y+26, r24	; 0x1a
     fba:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
     fbc:	80 91 ec 02 	lds	r24, 0x02EC
     fc0:	28 2f       	mov	r18, r24
     fc2:	22 0f       	add	r18, r18
     fc4:	22 0f       	add	r18, r18
     fc6:	93 70       	andi	r25, 0x03	; 3
     fc8:	92 2b       	or	r25, r18
     fca:	9b 8f       	std	Y+27, r25	; 0x1b
     fcc:	38 2f       	mov	r19, r24
     fce:	32 95       	swap	r19
     fd0:	36 95       	lsr	r19
     fd2:	36 95       	lsr	r19
     fd4:	33 70       	andi	r19, 0x03	; 3
     fd6:	97 85       	ldd	r25, Z+15	; 0x0f
     fd8:	93 70       	andi	r25, 0x03	; 3
     fda:	99 0f       	add	r25, r25
     fdc:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
     fde:	80 91 ee 02 	lds	r24, 0x02EE
     fe2:	28 2f       	mov	r18, r24
     fe4:	22 95       	swap	r18
     fe6:	20 7f       	andi	r18, 0xF0	; 240
     fe8:	93 2b       	or	r25, r19
     fea:	92 2b       	or	r25, r18
     fec:	9c 8f       	std	Y+28, r25	; 0x1c
     fee:	38 2f       	mov	r19, r24
     ff0:	32 95       	swap	r19
     ff2:	3f 70       	andi	r19, 0x0F	; 15
     ff4:	91 89       	ldd	r25, Z+17	; 0x11
     ff6:	93 70       	andi	r25, 0x03	; 3
     ff8:	92 95       	swap	r25
     ffa:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
     ffc:	80 91 f0 02 	lds	r24, 0x02F0
    1000:	28 2f       	mov	r18, r24
    1002:	22 95       	swap	r18
    1004:	22 0f       	add	r18, r18
    1006:	22 0f       	add	r18, r18
    1008:	20 7c       	andi	r18, 0xC0	; 192
    100a:	93 2b       	or	r25, r19
    100c:	92 2b       	or	r25, r18
    100e:	9d 8f       	std	Y+29, r25	; 0x1d
    1010:	93 89       	ldd	r25, Z+19	; 0x13
    1012:	92 95       	swap	r25
    1014:	99 0f       	add	r25, r25
    1016:	99 0f       	add	r25, r25
    1018:	90 7c       	andi	r25, 0xC0	; 192
    101a:	86 95       	lsr	r24
    101c:	86 95       	lsr	r24
    101e:	89 2b       	or	r24, r25
    1020:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    1022:	80 91 f2 02 	lds	r24, 0x02F2
    1026:	8f 8f       	std	Y+31, r24	; 0x1f
    1028:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    102a:	80 91 f4 02 	lds	r24, 0x02F4
    102e:	28 2f       	mov	r18, r24
    1030:	22 0f       	add	r18, r18
    1032:	22 0f       	add	r18, r18
    1034:	93 70       	andi	r25, 0x03	; 3
    1036:	92 2b       	or	r25, r18
    1038:	98 a3       	lds	r25, 0x58
    103a:	38 2f       	mov	r19, r24
    103c:	32 95       	swap	r19
    103e:	36 95       	lsr	r19
    1040:	36 95       	lsr	r19
    1042:	33 70       	andi	r19, 0x03	; 3
    1044:	97 89       	ldd	r25, Z+23	; 0x17
    1046:	93 70       	andi	r25, 0x03	; 3
    1048:	99 0f       	add	r25, r25
    104a:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    104c:	80 91 f6 02 	lds	r24, 0x02F6
    1050:	28 2f       	mov	r18, r24
    1052:	22 95       	swap	r18
    1054:	20 7f       	andi	r18, 0xF0	; 240
    1056:	93 2b       	or	r25, r19
    1058:	92 2b       	or	r25, r18
    105a:	99 a3       	lds	r25, 0x59
    105c:	38 2f       	mov	r19, r24
    105e:	32 95       	swap	r19
    1060:	3f 70       	andi	r19, 0x0F	; 15
    1062:	91 8d       	ldd	r25, Z+25	; 0x19
    1064:	93 70       	andi	r25, 0x03	; 3
    1066:	92 95       	swap	r25
    1068:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    106a:	80 91 f8 02 	lds	r24, 0x02F8
    106e:	28 2f       	mov	r18, r24
    1070:	22 95       	swap	r18
    1072:	22 0f       	add	r18, r18
    1074:	22 0f       	add	r18, r18
    1076:	20 7c       	andi	r18, 0xC0	; 192
    1078:	93 2b       	or	r25, r19
    107a:	92 2b       	or	r25, r18
    107c:	9a a3       	lds	r25, 0x5a
    107e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1080:	92 95       	swap	r25
    1082:	99 0f       	add	r25, r25
    1084:	99 0f       	add	r25, r25
    1086:	90 7c       	andi	r25, 0xC0	; 192
    1088:	86 95       	lsr	r24
    108a:	86 95       	lsr	r24
    108c:	89 2b       	or	r24, r25
    108e:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    1090:	80 91 fa 02 	lds	r24, 0x02FA
    1094:	8c a3       	lds	r24, 0x5c
    1096:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    1098:	80 91 fc 02 	lds	r24, 0x02FC
    109c:	28 2f       	mov	r18, r24
    109e:	22 0f       	add	r18, r18
    10a0:	22 0f       	add	r18, r18
    10a2:	93 70       	andi	r25, 0x03	; 3
    10a4:	92 2b       	or	r25, r18
    10a6:	9d a3       	lds	r25, 0x5d
    10a8:	82 95       	swap	r24
    10aa:	86 95       	lsr	r24
    10ac:	86 95       	lsr	r24
    10ae:	83 70       	andi	r24, 0x03	; 3
    10b0:	2e a1       	lds	r18, 0x4e
    10b2:	20 7f       	andi	r18, 0xF0	; 240
    10b4:	97 8d       	ldd	r25, Z+31	; 0x1f
    10b6:	93 70       	andi	r25, 0x03	; 3
    10b8:	99 0f       	add	r25, r25
    10ba:	99 0f       	add	r25, r25
    10bc:	82 2b       	or	r24, r18
    10be:	89 2b       	or	r24, r25
    10c0:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    10c2:	80 91 fe 02 	lds	r24, 0x02FE
    10c6:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    10c8:	80 91 ff 02 	lds	r24, 0x02FF
    10cc:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    10ce:	80 91 00 03 	lds	r24, 0x0300
    10d2:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    10d4:	80 91 01 03 	lds	r24, 0x0301
    10d8:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    10da:	80 91 02 03 	lds	r24, 0x0302
    10de:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    10e0:	0e 94 78 06 	call	0xcf0	; 0xcf0 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    10e4:	80 91 7a 03 	lds	r24, 0x037A
    10e8:	8f 77       	andi	r24, 0x7F	; 127
    10ea:	80 93 7a 03 	sts	0x037A, r24
	current_patch.mode = MEMORY;
    10ee:	10 92 05 03 	sts	0x0305, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    10f2:	21 2f       	mov	r18, r17
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	8b e2       	ldi	r24, 0x2B	; 43
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	28 9f       	mul	r18, r24
    10fc:	b0 01       	movw	r22, r0
    10fe:	29 9f       	mul	r18, r25
    1100:	70 0d       	add	r23, r0
    1102:	38 9f       	mul	r19, r24
    1104:	70 0d       	add	r23, r0
    1106:	11 24       	eor	r1, r1
    1108:	60 50       	subi	r22, 0x00	; 0
    110a:	70 40       	sbci	r23, 0x00	; 0
    110c:	ce 01       	movw	r24, r28
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	4b e2       	ldi	r20, 0x2B	; 43
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	0e 94 26 1b 	call	0x364c	; 0x364c <__eeupd_block_m6450a>
}	
    1118:	ab 96       	adiw	r28, 0x2b	; 43
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	08 95       	ret

0000112c <load_patch>:
	
void load_patch(uint8_t patch_number) {
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	c3 54       	subi	r28, 0x43	; 67
    1138:	d0 40       	sbci	r29, 0x00	; 0
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	2b e2       	ldi	r18, 0x2B	; 43
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	82 9f       	mul	r24, r18
    114c:	b0 01       	movw	r22, r0
    114e:	83 9f       	mul	r24, r19
    1150:	70 0d       	add	r23, r0
    1152:	92 9f       	mul	r25, r18
    1154:	70 0d       	add	r23, r0
    1156:	11 24       	eor	r1, r1
    1158:	60 50       	subi	r22, 0x00	; 0
    115a:	70 40       	sbci	r23, 0x00	; 0
    115c:	ce 01       	movw	r24, r28
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	4b e2       	ldi	r20, 0x2B	; 43
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	0e 94 10 1b 	call	0x3620	; 0x3620 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    1168:	ee ed       	ldi	r30, 0xDE	; 222
    116a:	f2 e0       	ldi	r31, 0x02	; 2
    116c:	8a 89       	ldd	r24, Y+18	; 0x12
    116e:	28 2f       	mov	r18, r24
    1170:	22 95       	swap	r18
    1172:	2f 70       	andi	r18, 0x0F	; 15
    1174:	9b 89       	ldd	r25, Y+19	; 0x13
    1176:	39 2f       	mov	r19, r25
    1178:	32 95       	swap	r19
    117a:	30 7f       	andi	r19, 0xF0	; 240
    117c:	32 2b       	or	r19, r18
    117e:	29 2f       	mov	r18, r25
    1180:	22 95       	swap	r18
    1182:	2f 70       	andi	r18, 0x0F	; 15
    1184:	23 70       	andi	r18, 0x03	; 3
    1186:	30 93 de 02 	sts	0x02DE, r19
    118a:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    118e:	df 01       	movw	r26, r30
    1190:	5a 97       	sbiw	r26, 0x1a	; 26
    1192:	4a 81       	ldd	r20, Y+2	; 0x02
    1194:	46 95       	lsr	r20
    1196:	46 95       	lsr	r20
    1198:	2b 81       	ldd	r18, Y+3	; 0x03
    119a:	32 2f       	mov	r19, r18
    119c:	32 95       	swap	r19
    119e:	33 0f       	add	r19, r19
    11a0:	33 0f       	add	r19, r19
    11a2:	30 7c       	andi	r19, 0xC0	; 192
    11a4:	43 2b       	or	r20, r19
    11a6:	32 2f       	mov	r19, r18
    11a8:	36 95       	lsr	r19
    11aa:	36 95       	lsr	r19
    11ac:	33 70       	andi	r19, 0x03	; 3
    11ae:	4c 93       	st	X, r20
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    11b4:	df 01       	movw	r26, r30
    11b6:	58 97       	sbiw	r26, 0x18	; 24
    11b8:	32 2f       	mov	r19, r18
    11ba:	32 95       	swap	r19
    11bc:	3f 70       	andi	r19, 0x0F	; 15
    11be:	2c 81       	ldd	r18, Y+4	; 0x04
    11c0:	42 2f       	mov	r20, r18
    11c2:	42 95       	swap	r20
    11c4:	40 7f       	andi	r20, 0xF0	; 240
    11c6:	43 2b       	or	r20, r19
    11c8:	32 2f       	mov	r19, r18
    11ca:	32 95       	swap	r19
    11cc:	3f 70       	andi	r19, 0x0F	; 15
    11ce:	33 70       	andi	r19, 0x03	; 3
    11d0:	4c 93       	st	X, r20
    11d2:	11 96       	adiw	r26, 0x01	; 1
    11d4:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    11d6:	df 01       	movw	r26, r30
    11d8:	56 97       	sbiw	r26, 0x16	; 22
    11da:	22 95       	swap	r18
    11dc:	26 95       	lsr	r18
    11de:	26 95       	lsr	r18
    11e0:	23 70       	andi	r18, 0x03	; 3
    11e2:	3d 81       	ldd	r19, Y+5	; 0x05
    11e4:	43 2f       	mov	r20, r19
    11e6:	44 0f       	add	r20, r20
    11e8:	44 0f       	add	r20, r20
    11ea:	24 2b       	or	r18, r20
    11ec:	32 95       	swap	r19
    11ee:	36 95       	lsr	r19
    11f0:	36 95       	lsr	r19
    11f2:	33 70       	andi	r19, 0x03	; 3
    11f4:	2c 93       	st	X, r18
    11f6:	11 96       	adiw	r26, 0x01	; 1
    11f8:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    11fa:	df 01       	movw	r26, r30
    11fc:	54 97       	sbiw	r26, 0x14	; 20
    11fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1200:	2f 81       	ldd	r18, Y+7	; 0x07
    1202:	32 2f       	mov	r19, r18
    1204:	33 70       	andi	r19, 0x03	; 3
    1206:	4c 93       	st	X, r20
    1208:	11 96       	adiw	r26, 0x01	; 1
    120a:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    120c:	df 01       	movw	r26, r30
    120e:	52 97       	sbiw	r26, 0x12	; 18
    1210:	32 2f       	mov	r19, r18
    1212:	36 95       	lsr	r19
    1214:	36 95       	lsr	r19
    1216:	28 85       	ldd	r18, Y+8	; 0x08
    1218:	42 2f       	mov	r20, r18
    121a:	42 95       	swap	r20
    121c:	44 0f       	add	r20, r20
    121e:	44 0f       	add	r20, r20
    1220:	40 7c       	andi	r20, 0xC0	; 192
    1222:	43 2b       	or	r20, r19
    1224:	32 2f       	mov	r19, r18
    1226:	36 95       	lsr	r19
    1228:	36 95       	lsr	r19
    122a:	33 70       	andi	r19, 0x03	; 3
    122c:	4c 93       	st	X, r20
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1232:	df 01       	movw	r26, r30
    1234:	50 97       	sbiw	r26, 0x10	; 16
    1236:	32 2f       	mov	r19, r18
    1238:	32 95       	swap	r19
    123a:	3f 70       	andi	r19, 0x0F	; 15
    123c:	29 85       	ldd	r18, Y+9	; 0x09
    123e:	42 2f       	mov	r20, r18
    1240:	42 95       	swap	r20
    1242:	40 7f       	andi	r20, 0xF0	; 240
    1244:	43 2b       	or	r20, r19
    1246:	32 2f       	mov	r19, r18
    1248:	32 95       	swap	r19
    124a:	3f 70       	andi	r19, 0x0F	; 15
    124c:	33 70       	andi	r19, 0x03	; 3
    124e:	4c 93       	st	X, r20
    1250:	11 96       	adiw	r26, 0x01	; 1
    1252:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    1254:	df 01       	movw	r26, r30
    1256:	1e 97       	sbiw	r26, 0x0e	; 14
    1258:	22 95       	swap	r18
    125a:	26 95       	lsr	r18
    125c:	26 95       	lsr	r18
    125e:	23 70       	andi	r18, 0x03	; 3
    1260:	3a 85       	ldd	r19, Y+10	; 0x0a
    1262:	43 2f       	mov	r20, r19
    1264:	44 0f       	add	r20, r20
    1266:	44 0f       	add	r20, r20
    1268:	24 2b       	or	r18, r20
    126a:	32 95       	swap	r19
    126c:	36 95       	lsr	r19
    126e:	36 95       	lsr	r19
    1270:	33 70       	andi	r19, 0x03	; 3
    1272:	2c 93       	st	X, r18
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    1278:	df 01       	movw	r26, r30
    127a:	1c 97       	sbiw	r26, 0x0c	; 12
    127c:	4b 85       	ldd	r20, Y+11	; 0x0b
    127e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1280:	32 2f       	mov	r19, r18
    1282:	33 70       	andi	r19, 0x03	; 3
    1284:	4c 93       	st	X, r20
    1286:	11 96       	adiw	r26, 0x01	; 1
    1288:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    128a:	df 01       	movw	r26, r30
    128c:	1a 97       	sbiw	r26, 0x0a	; 10
    128e:	32 2f       	mov	r19, r18
    1290:	36 95       	lsr	r19
    1292:	36 95       	lsr	r19
    1294:	2d 85       	ldd	r18, Y+13	; 0x0d
    1296:	42 2f       	mov	r20, r18
    1298:	42 95       	swap	r20
    129a:	44 0f       	add	r20, r20
    129c:	44 0f       	add	r20, r20
    129e:	40 7c       	andi	r20, 0xC0	; 192
    12a0:	43 2b       	or	r20, r19
    12a2:	32 2f       	mov	r19, r18
    12a4:	36 95       	lsr	r19
    12a6:	36 95       	lsr	r19
    12a8:	33 70       	andi	r19, 0x03	; 3
    12aa:	4c 93       	st	X, r20
    12ac:	11 96       	adiw	r26, 0x01	; 1
    12ae:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    12b0:	df 01       	movw	r26, r30
    12b2:	18 97       	sbiw	r26, 0x08	; 8
    12b4:	32 2f       	mov	r19, r18
    12b6:	32 95       	swap	r19
    12b8:	3f 70       	andi	r19, 0x0F	; 15
    12ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    12bc:	42 2f       	mov	r20, r18
    12be:	42 95       	swap	r20
    12c0:	40 7f       	andi	r20, 0xF0	; 240
    12c2:	43 2b       	or	r20, r19
    12c4:	32 2f       	mov	r19, r18
    12c6:	32 95       	swap	r19
    12c8:	3f 70       	andi	r19, 0x0F	; 15
    12ca:	33 70       	andi	r19, 0x03	; 3
    12cc:	4c 93       	st	X, r20
    12ce:	11 96       	adiw	r26, 0x01	; 1
    12d0:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    12d2:	df 01       	movw	r26, r30
    12d4:	16 97       	sbiw	r26, 0x06	; 6
    12d6:	22 95       	swap	r18
    12d8:	26 95       	lsr	r18
    12da:	26 95       	lsr	r18
    12dc:	23 70       	andi	r18, 0x03	; 3
    12de:	3f 85       	ldd	r19, Y+15	; 0x0f
    12e0:	43 2f       	mov	r20, r19
    12e2:	44 0f       	add	r20, r20
    12e4:	44 0f       	add	r20, r20
    12e6:	24 2b       	or	r18, r20
    12e8:	32 95       	swap	r19
    12ea:	36 95       	lsr	r19
    12ec:	36 95       	lsr	r19
    12ee:	33 70       	andi	r19, 0x03	; 3
    12f0:	2c 93       	st	X, r18
    12f2:	11 96       	adiw	r26, 0x01	; 1
    12f4:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    12f6:	df 01       	movw	r26, r30
    12f8:	14 97       	sbiw	r26, 0x04	; 4
    12fa:	48 89       	ldd	r20, Y+16	; 0x10
    12fc:	29 89       	ldd	r18, Y+17	; 0x11
    12fe:	32 2f       	mov	r19, r18
    1300:	33 70       	andi	r19, 0x03	; 3
    1302:	4c 93       	st	X, r20
    1304:	11 96       	adiw	r26, 0x01	; 1
    1306:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    1308:	df 01       	movw	r26, r30
    130a:	12 97       	sbiw	r26, 0x02	; 2
    130c:	26 95       	lsr	r18
    130e:	26 95       	lsr	r18
    1310:	38 2f       	mov	r19, r24
    1312:	32 95       	swap	r19
    1314:	33 0f       	add	r19, r19
    1316:	33 0f       	add	r19, r19
    1318:	30 7c       	andi	r19, 0xC0	; 192
    131a:	23 2b       	or	r18, r19
    131c:	86 95       	lsr	r24
    131e:	86 95       	lsr	r24
    1320:	83 70       	andi	r24, 0x03	; 3
    1322:	2c 93       	st	X, r18
    1324:	11 96       	adiw	r26, 0x01	; 1
    1326:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    1328:	92 95       	swap	r25
    132a:	96 95       	lsr	r25
    132c:	96 95       	lsr	r25
    132e:	93 70       	andi	r25, 0x03	; 3
    1330:	8c 89       	ldd	r24, Y+20	; 0x14
    1332:	28 2f       	mov	r18, r24
    1334:	22 0f       	add	r18, r18
    1336:	22 0f       	add	r18, r18
    1338:	92 2b       	or	r25, r18
    133a:	82 95       	swap	r24
    133c:	86 95       	lsr	r24
    133e:	86 95       	lsr	r24
    1340:	83 70       	andi	r24, 0x03	; 3
    1342:	90 93 e0 02 	sts	0x02E0, r25
    1346:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    1348:	2d 89       	ldd	r18, Y+21	; 0x15
    134a:	8e 89       	ldd	r24, Y+22	; 0x16
    134c:	98 2f       	mov	r25, r24
    134e:	93 70       	andi	r25, 0x03	; 3
    1350:	20 93 e2 02 	sts	0x02E2, r18
    1354:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    1356:	98 2f       	mov	r25, r24
    1358:	96 95       	lsr	r25
    135a:	96 95       	lsr	r25
    135c:	8f 89       	ldd	r24, Y+23	; 0x17
    135e:	28 2f       	mov	r18, r24
    1360:	22 95       	swap	r18
    1362:	22 0f       	add	r18, r18
    1364:	22 0f       	add	r18, r18
    1366:	20 7c       	andi	r18, 0xC0	; 192
    1368:	29 2b       	or	r18, r25
    136a:	98 2f       	mov	r25, r24
    136c:	96 95       	lsr	r25
    136e:	96 95       	lsr	r25
    1370:	93 70       	andi	r25, 0x03	; 3
    1372:	20 93 e4 02 	sts	0x02E4, r18
    1376:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    1378:	98 2f       	mov	r25, r24
    137a:	92 95       	swap	r25
    137c:	9f 70       	andi	r25, 0x0F	; 15
    137e:	88 8d       	ldd	r24, Y+24	; 0x18
    1380:	28 2f       	mov	r18, r24
    1382:	22 95       	swap	r18
    1384:	20 7f       	andi	r18, 0xF0	; 240
    1386:	29 2b       	or	r18, r25
    1388:	98 2f       	mov	r25, r24
    138a:	92 95       	swap	r25
    138c:	9f 70       	andi	r25, 0x0F	; 15
    138e:	93 70       	andi	r25, 0x03	; 3
    1390:	20 93 e6 02 	sts	0x02E6, r18
    1394:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    1396:	82 95       	swap	r24
    1398:	86 95       	lsr	r24
    139a:	86 95       	lsr	r24
    139c:	83 70       	andi	r24, 0x03	; 3
    139e:	99 8d       	ldd	r25, Y+25	; 0x19
    13a0:	29 2f       	mov	r18, r25
    13a2:	22 0f       	add	r18, r18
    13a4:	22 0f       	add	r18, r18
    13a6:	82 2b       	or	r24, r18
    13a8:	92 95       	swap	r25
    13aa:	96 95       	lsr	r25
    13ac:	96 95       	lsr	r25
    13ae:	93 70       	andi	r25, 0x03	; 3
    13b0:	80 93 e8 02 	sts	0x02E8, r24
    13b4:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    13b6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    13b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ba:	98 2f       	mov	r25, r24
    13bc:	93 70       	andi	r25, 0x03	; 3
    13be:	20 93 ea 02 	sts	0x02EA, r18
    13c2:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    13c4:	98 2f       	mov	r25, r24
    13c6:	96 95       	lsr	r25
    13c8:	96 95       	lsr	r25
    13ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13cc:	28 2f       	mov	r18, r24
    13ce:	22 95       	swap	r18
    13d0:	22 0f       	add	r18, r18
    13d2:	22 0f       	add	r18, r18
    13d4:	20 7c       	andi	r18, 0xC0	; 192
    13d6:	29 2b       	or	r18, r25
    13d8:	98 2f       	mov	r25, r24
    13da:	96 95       	lsr	r25
    13dc:	96 95       	lsr	r25
    13de:	93 70       	andi	r25, 0x03	; 3
    13e0:	20 93 ec 02 	sts	0x02EC, r18
    13e4:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    13e6:	98 2f       	mov	r25, r24
    13e8:	92 95       	swap	r25
    13ea:	9f 70       	andi	r25, 0x0F	; 15
    13ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13ee:	28 2f       	mov	r18, r24
    13f0:	22 95       	swap	r18
    13f2:	20 7f       	andi	r18, 0xF0	; 240
    13f4:	29 2b       	or	r18, r25
    13f6:	98 2f       	mov	r25, r24
    13f8:	92 95       	swap	r25
    13fa:	9f 70       	andi	r25, 0x0F	; 15
    13fc:	93 70       	andi	r25, 0x03	; 3
    13fe:	20 93 ee 02 	sts	0x02EE, r18
    1402:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    1404:	82 95       	swap	r24
    1406:	86 95       	lsr	r24
    1408:	86 95       	lsr	r24
    140a:	83 70       	andi	r24, 0x03	; 3
    140c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    140e:	29 2f       	mov	r18, r25
    1410:	22 0f       	add	r18, r18
    1412:	22 0f       	add	r18, r18
    1414:	82 2b       	or	r24, r18
    1416:	92 95       	swap	r25
    1418:	96 95       	lsr	r25
    141a:	96 95       	lsr	r25
    141c:	93 70       	andi	r25, 0x03	; 3
    141e:	80 93 f0 02 	sts	0x02F0, r24
    1422:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    1424:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1426:	88 a1       	lds	r24, 0x48
    1428:	98 2f       	mov	r25, r24
    142a:	93 70       	andi	r25, 0x03	; 3
    142c:	20 93 f2 02 	sts	0x02F2, r18
    1430:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1432:	98 2f       	mov	r25, r24
    1434:	96 95       	lsr	r25
    1436:	96 95       	lsr	r25
    1438:	89 a1       	lds	r24, 0x49
    143a:	28 2f       	mov	r18, r24
    143c:	22 95       	swap	r18
    143e:	22 0f       	add	r18, r18
    1440:	22 0f       	add	r18, r18
    1442:	20 7c       	andi	r18, 0xC0	; 192
    1444:	29 2b       	or	r18, r25
    1446:	98 2f       	mov	r25, r24
    1448:	96 95       	lsr	r25
    144a:	96 95       	lsr	r25
    144c:	93 70       	andi	r25, 0x03	; 3
    144e:	20 93 f4 02 	sts	0x02F4, r18
    1452:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    1454:	98 2f       	mov	r25, r24
    1456:	92 95       	swap	r25
    1458:	9f 70       	andi	r25, 0x0F	; 15
    145a:	8a a1       	lds	r24, 0x4a
    145c:	28 2f       	mov	r18, r24
    145e:	22 95       	swap	r18
    1460:	20 7f       	andi	r18, 0xF0	; 240
    1462:	29 2b       	or	r18, r25
    1464:	98 2f       	mov	r25, r24
    1466:	92 95       	swap	r25
    1468:	9f 70       	andi	r25, 0x0F	; 15
    146a:	93 70       	andi	r25, 0x03	; 3
    146c:	20 93 f6 02 	sts	0x02F6, r18
    1470:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1472:	82 95       	swap	r24
    1474:	86 95       	lsr	r24
    1476:	86 95       	lsr	r24
    1478:	83 70       	andi	r24, 0x03	; 3
    147a:	9b a1       	lds	r25, 0x4b
    147c:	29 2f       	mov	r18, r25
    147e:	22 0f       	add	r18, r18
    1480:	22 0f       	add	r18, r18
    1482:	82 2b       	or	r24, r18
    1484:	92 95       	swap	r25
    1486:	96 95       	lsr	r25
    1488:	96 95       	lsr	r25
    148a:	93 70       	andi	r25, 0x03	; 3
    148c:	80 93 f8 02 	sts	0x02F8, r24
    1490:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1492:	2c a1       	lds	r18, 0x4c
    1494:	8d a1       	lds	r24, 0x4d
    1496:	98 2f       	mov	r25, r24
    1498:	93 70       	andi	r25, 0x03	; 3
    149a:	20 93 fa 02 	sts	0x02FA, r18
    149e:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    14a0:	98 2f       	mov	r25, r24
    14a2:	96 95       	lsr	r25
    14a4:	96 95       	lsr	r25
    14a6:	8e a1       	lds	r24, 0x4e
    14a8:	28 2f       	mov	r18, r24
    14aa:	22 95       	swap	r18
    14ac:	22 0f       	add	r18, r18
    14ae:	22 0f       	add	r18, r18
    14b0:	20 7c       	andi	r18, 0xC0	; 192
    14b2:	29 2b       	or	r18, r25
    14b4:	86 95       	lsr	r24
    14b6:	86 95       	lsr	r24
    14b8:	98 2f       	mov	r25, r24
    14ba:	93 70       	andi	r25, 0x03	; 3
    14bc:	20 93 fc 02 	sts	0x02FC, r18
    14c0:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    14c2:	7f a1       	lds	r23, 0x4f
    14c4:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    14c8:	68 a5       	lds	r22, 0x68
    14ca:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    14ce:	89 a5       	lds	r24, 0x69
    14d0:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    14d4:	9a a5       	lds	r25, 0x6a
    14d6:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    14da:	1b a5       	lds	r17, 0x6b
    14dc:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    14e0:	de 01       	movw	r26, r28
    14e2:	9c 96       	adiw	r26, 0x2c	; 44
    14e4:	ef ef       	ldi	r30, 0xFF	; 255
    14e6:	f1 e0       	ldi	r31, 0x01	; 1
    14e8:	28 e0       	ldi	r18, 0x08	; 8
    14ea:	01 90       	ld	r0, Z+
    14ec:	0d 92       	st	X+, r0
    14ee:	21 50       	subi	r18, 0x01	; 1
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    14f2:	e9 2f       	mov	r30, r25
    14f4:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	9f 01       	movw	r18, r30
    14fa:	22 0f       	add	r18, r18
    14fc:	33 1f       	adc	r19, r19
    14fe:	22 0f       	add	r18, r18
    1500:	33 1f       	adc	r19, r19
    1502:	a9 01       	movw	r20, r18
    1504:	44 0f       	add	r20, r20
    1506:	55 1f       	adc	r21, r21
    1508:	44 0f       	add	r20, r20
    150a:	55 1f       	adc	r21, r21
    150c:	44 0f       	add	r20, r20
    150e:	55 1f       	adc	r21, r21
    1510:	42 1b       	sub	r20, r18
    1512:	53 0b       	sbc	r21, r19
    1514:	4e 0f       	add	r20, r30
    1516:	5f 1f       	adc	r21, r31
    1518:	55 95       	asr	r21
    151a:	47 95       	ror	r20
    151c:	55 95       	asr	r21
    151e:	47 95       	ror	r20
    1520:	55 95       	asr	r21
    1522:	47 95       	ror	r20
    1524:	55 95       	asr	r21
    1526:	47 95       	ror	r20
    1528:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    152a:	fe 01       	movw	r30, r28
    152c:	e4 0f       	add	r30, r20
    152e:	f1 1d       	adc	r31, r1
    1530:	24 a5       	lds	r18, 0x64
    1532:	20 93 06 03 	sts	0x0306, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    1536:	de 01       	movw	r26, r28
    1538:	d4 96       	adiw	r26, 0x34	; 52
    153a:	e7 e0       	ldi	r30, 0x07	; 7
    153c:	f2 e0       	ldi	r31, 0x02	; 2
    153e:	28 e0       	ldi	r18, 0x08	; 8
    1540:	01 90       	ld	r0, Z+
    1542:	0d 92       	st	X+, r0
    1544:	21 50       	subi	r18, 0x01	; 1
    1546:	e1 f7       	brne	.-8      	; 0x1540 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    1548:	29 2f       	mov	r18, r25
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	20 7e       	andi	r18, 0xE0	; 224
    154e:	30 70       	andi	r19, 0x00	; 0
    1550:	35 95       	asr	r19
    1552:	27 95       	ror	r18
    1554:	35 95       	asr	r19
    1556:	27 95       	ror	r18
    1558:	35 95       	asr	r19
    155a:	27 95       	ror	r18
    155c:	83 70       	andi	r24, 0x03	; 3
    155e:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    1560:	42 2f       	mov	r20, r18
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	ca 01       	movw	r24, r20
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	9c 01       	movw	r18, r24
    1570:	22 0f       	add	r18, r18
    1572:	33 1f       	adc	r19, r19
    1574:	22 0f       	add	r18, r18
    1576:	33 1f       	adc	r19, r19
    1578:	22 0f       	add	r18, r18
    157a:	33 1f       	adc	r19, r19
    157c:	28 1b       	sub	r18, r24
    157e:	39 0b       	sbc	r19, r25
    1580:	42 0f       	add	r20, r18
    1582:	53 1f       	adc	r21, r19
    1584:	ca 01       	movw	r24, r20
    1586:	95 95       	asr	r25
    1588:	87 95       	ror	r24
    158a:	95 95       	asr	r25
    158c:	87 95       	ror	r24
    158e:	95 95       	asr	r25
    1590:	87 95       	ror	r24
    1592:	95 95       	asr	r25
    1594:	87 95       	ror	r24
    1596:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    1598:	fe 01       	movw	r30, r28
    159a:	e8 0f       	add	r30, r24
    159c:	f1 1d       	adc	r31, r1
    159e:	84 a9       	sts	0x44, r24
    15a0:	80 93 07 03 	sts	0x0307, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    15a4:	de 01       	movw	r26, r28
    15a6:	dc 96       	adiw	r26, 0x3c	; 60
    15a8:	ef e0       	ldi	r30, 0x0F	; 15
    15aa:	f2 e0       	ldi	r31, 0x02	; 2
    15ac:	88 e0       	ldi	r24, 0x08	; 8
    15ae:	01 90       	ld	r0, Z+
    15b0:	0d 92       	st	X+, r0
    15b2:	81 50       	subi	r24, 0x01	; 1
    15b4:	e1 f7       	brne	.-8      	; 0x15ae <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    15b6:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    15b8:	46 2f       	mov	r20, r22
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	ca 01       	movw	r24, r20
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	9c 01       	movw	r18, r24
    15c8:	22 0f       	add	r18, r18
    15ca:	33 1f       	adc	r19, r19
    15cc:	22 0f       	add	r18, r18
    15ce:	33 1f       	adc	r19, r19
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	28 1b       	sub	r18, r24
    15d6:	39 0b       	sbc	r19, r25
    15d8:	42 0f       	add	r20, r18
    15da:	53 1f       	adc	r21, r19
    15dc:	ca 01       	movw	r24, r20
    15de:	95 95       	asr	r25
    15e0:	87 95       	ror	r24
    15e2:	95 95       	asr	r25
    15e4:	87 95       	ror	r24
    15e6:	95 95       	asr	r25
    15e8:	87 95       	ror	r24
    15ea:	95 95       	asr	r25
    15ec:	87 95       	ror	r24
    15ee:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    15f0:	fe 01       	movw	r30, r28
    15f2:	e8 0f       	add	r30, r24
    15f4:	f1 1d       	adc	r31, r1
    15f6:	84 ad       	sts	0x64, r24
    15f8:	80 93 08 03 	sts	0x0308, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    15fc:	21 2f       	mov	r18, r17
    15fe:	26 95       	lsr	r18
    1600:	27 95       	ror	r18
    1602:	22 27       	eor	r18, r18
    1604:	27 95       	ror	r18
    1606:	81 2f       	mov	r24, r17
    1608:	81 70       	andi	r24, 0x01	; 1
    160a:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    160c:	81 2f       	mov	r24, r17
    160e:	86 95       	lsr	r24
    1610:	86 95       	lsr	r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	81 70       	andi	r24, 0x01	; 1
    1616:	90 70       	andi	r25, 0x00	; 0
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1620:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1622:	81 2f       	mov	r24, r17
    1624:	86 95       	lsr	r24
    1626:	86 95       	lsr	r24
    1628:	86 95       	lsr	r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	81 70       	andi	r24, 0x01	; 1
    162e:	90 70       	andi	r25, 0x00	; 0
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1634:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1636:	81 2f       	mov	r24, r17
    1638:	82 95       	swap	r24
    163a:	8f 70       	andi	r24, 0x0F	; 15
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	81 70       	andi	r24, 0x01	; 1
    1640:	90 70       	andi	r25, 0x00	; 0
    1642:	82 95       	swap	r24
    1644:	92 95       	swap	r25
    1646:	90 7f       	andi	r25, 0xF0	; 240
    1648:	98 27       	eor	r25, r24
    164a:	80 7f       	andi	r24, 0xF0	; 240
    164c:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    164e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    1650:	81 2f       	mov	r24, r17
    1652:	82 95       	swap	r24
    1654:	86 95       	lsr	r24
    1656:	87 70       	andi	r24, 0x07	; 7
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	81 70       	andi	r24, 0x01	; 1
    165c:	90 70       	andi	r25, 0x00	; 0
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	82 95       	swap	r24
    1664:	92 95       	swap	r25
    1666:	90 7f       	andi	r25, 0xF0	; 240
    1668:	98 27       	eor	r25, r24
    166a:	80 7f       	andi	r24, 0xF0	; 240
    166c:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    166e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1670:	81 2f       	mov	r24, r17
    1672:	82 95       	swap	r24
    1674:	86 95       	lsr	r24
    1676:	86 95       	lsr	r24
    1678:	83 70       	andi	r24, 0x03	; 3
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	81 70       	andi	r24, 0x01	; 1
    167e:	90 70       	andi	r25, 0x00	; 0
    1680:	00 24       	eor	r0, r0
    1682:	96 95       	lsr	r25
    1684:	87 95       	ror	r24
    1686:	07 94       	ror	r0
    1688:	96 95       	lsr	r25
    168a:	87 95       	ror	r24
    168c:	07 94       	ror	r0
    168e:	98 2f       	mov	r25, r24
    1690:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1692:	82 2b       	or	r24, r18
    1694:	80 93 78 03 	sts	0x0378, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    1698:	87 2f       	mov	r24, r23
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	81 70       	andi	r24, 0x01	; 1
    169e:	90 70       	andi	r25, 0x00	; 0
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    16ac:	90 91 7a 03 	lds	r25, 0x037A
    16b0:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    16b2:	89 2b       	or	r24, r25
    16b4:	11 1f       	adc	r17, r17
    16b6:	11 27       	eor	r17, r17
    16b8:	11 1f       	adc	r17, r17
    16ba:	11 0f       	add	r17, r17
    16bc:	11 0f       	add	r17, r17
    16be:	81 2b       	or	r24, r17
    16c0:	80 93 7a 03 	sts	0x037A, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    16c4:	0e 94 78 06 	call	0xcf0	; 0xcf0 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    16c8:	80 91 7a 03 	lds	r24, 0x037A
    16cc:	8f 77       	andi	r24, 0x7F	; 127
    16ce:	80 93 7a 03 	sts	0x037A, r24
	
	current_patch.mode = MEMORY;
    16d2:	10 92 05 03 	sts	0x0305, r1
	
}
    16d6:	cd 5b       	subi	r28, 0xBD	; 189
    16d8:	df 4f       	sbci	r29, 0xFF	; 255
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	08 95       	ret

000016ec <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    16ec:	90 91 06 03 	lds	r25, 0x0306
	if (vco == VCO2) n = octave_index.vco2;
    16f0:	60 3f       	cpi	r22, 0xF0	; 240
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <transpose_note+0xc>
    16f4:	90 91 07 03 	lds	r25, 0x0307

	note = (n*12) + note; //calculate MIDI note after octave addition
    16f8:	29 2f       	mov	r18, r25
    16fa:	22 0f       	add	r18, r18
    16fc:	92 0f       	add	r25, r18
    16fe:	99 0f       	add	r25, r25
    1700:	99 0f       	add	r25, r25
    1702:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1704:	89 38       	cpi	r24, 0x89	; 137
    1706:	08 f0       	brcs	.+2      	; 0x170a <transpose_note+0x1e>
    1708:	88 e8       	ldi	r24, 0x88	; 136
	
}
    170a:	08 95       	ret

0000170c <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    170c:	80 91 78 03 	lds	r24, 0x0378
    1710:	98 2f       	mov	r25, r24
    1712:	96 95       	lsr	r25
    1714:	96 95       	lsr	r25
    1716:	96 95       	lsr	r25
    1718:	90 ff       	sbrs	r25, 0
    171a:	0e c0       	rjmp	.+28     	; 0x1738 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    171c:	90 91 06 03 	lds	r25, 0x0306
    1720:	9f 5f       	subi	r25, 0xFF	; 255
    1722:	90 93 06 03 	sts	0x0306, r25
    1726:	95 30       	cpi	r25, 0x05	; 5
    1728:	19 f4       	brne	.+6      	; 0x1730 <update_octave_range+0x24>
    172a:	94 e0       	ldi	r25, 0x04	; 4
    172c:	90 93 06 03 	sts	0x0306, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1730:	98 e0       	ldi	r25, 0x08	; 8
    1732:	89 27       	eor	r24, r25
    1734:	80 93 78 03 	sts	0x0378, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1738:	80 91 79 03 	lds	r24, 0x0379
    173c:	98 2f       	mov	r25, r24
    173e:	96 95       	lsr	r25
    1740:	96 95       	lsr	r25
    1742:	96 95       	lsr	r25
    1744:	90 ff       	sbrs	r25, 0
    1746:	0b c0       	rjmp	.+22     	; 0x175e <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1748:	90 91 06 03 	lds	r25, 0x0306
    174c:	99 23       	and	r25, r25
    174e:	19 f0       	breq	.+6      	; 0x1756 <update_octave_range+0x4a>
    1750:	91 50       	subi	r25, 0x01	; 1
    1752:	90 93 06 03 	sts	0x0306, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1756:	98 e0       	ldi	r25, 0x08	; 8
    1758:	89 27       	eor	r24, r25
    175a:	80 93 79 03 	sts	0x0379, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    175e:	80 91 06 03 	lds	r24, 0x0306
    1762:	e1 e2       	ldi	r30, 0x21	; 33
    1764:	f2 e0       	ldi	r31, 0x02	; 2
    1766:	e8 0f       	add	r30, r24
    1768:	f1 1d       	adc	r31, r1
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	00 80       	ld	r0, Z
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <update_octave_range+0x6a>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <update_octave_range+0x66>
    177a:	58 2f       	mov	r21, r24
    177c:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1780:	90 91 79 03 	lds	r25, 0x0379
    1784:	29 2f       	mov	r18, r25
    1786:	26 95       	lsr	r18
    1788:	26 95       	lsr	r18
    178a:	20 ff       	sbrs	r18, 0
    178c:	0e c0       	rjmp	.+28     	; 0x17aa <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    178e:	80 91 07 03 	lds	r24, 0x0307
    1792:	8f 5f       	subi	r24, 0xFF	; 255
    1794:	80 93 07 03 	sts	0x0307, r24
    1798:	85 30       	cpi	r24, 0x05	; 5
    179a:	19 f4       	brne	.+6      	; 0x17a2 <update_octave_range+0x96>
    179c:	84 e0       	ldi	r24, 0x04	; 4
    179e:	80 93 07 03 	sts	0x0307, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    17a2:	84 e0       	ldi	r24, 0x04	; 4
    17a4:	98 27       	eor	r25, r24
    17a6:	90 93 79 03 	sts	0x0379, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    17aa:	90 91 79 03 	lds	r25, 0x0379
    17ae:	29 2f       	mov	r18, r25
    17b0:	26 95       	lsr	r18
    17b2:	20 ff       	sbrs	r18, 0
    17b4:	0b c0       	rjmp	.+22     	; 0x17cc <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    17b6:	80 91 07 03 	lds	r24, 0x0307
    17ba:	88 23       	and	r24, r24
    17bc:	19 f0       	breq	.+6      	; 0x17c4 <update_octave_range+0xb8>
    17be:	81 50       	subi	r24, 0x01	; 1
    17c0:	80 93 07 03 	sts	0x0307, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	98 27       	eor	r25, r24
    17c8:	90 93 79 03 	sts	0x0379, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    17cc:	40 91 00 03 	lds	r20, 0x0300
    17d0:	4c 7f       	andi	r20, 0xFC	; 252
    17d2:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    17d6:	90 91 07 03 	lds	r25, 0x0307
    17da:	93 30       	cpi	r25, 0x03	; 3
    17dc:	88 f0       	brcs	.+34     	; 0x1800 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    17de:	ec e1       	ldi	r30, 0x1C	; 28
    17e0:	f2 e0       	ldi	r31, 0x02	; 2
    17e2:	e9 0f       	add	r30, r25
    17e4:	f1 1d       	adc	r31, r1
    17e6:	21 e0       	ldi	r18, 0x01	; 1
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	c9 01       	movw	r24, r18
    17ec:	00 80       	ld	r0, Z
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <update_octave_range+0xe8>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <update_octave_range+0xe4>
    17f8:	84 2b       	or	r24, r20
    17fa:	80 93 00 03 	sts	0x0300, r24
    17fe:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1800:	ec e1       	ldi	r30, 0x1C	; 28
    1802:	f2 e0       	ldi	r31, 0x02	; 2
    1804:	e9 0f       	add	r30, r25
    1806:	f1 1d       	adc	r31, r1
    1808:	21 e0       	ldi	r18, 0x01	; 1
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	c9 01       	movw	r24, r18
    180e:	00 80       	ld	r0, Z
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <update_octave_range+0x10a>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <update_octave_range+0x106>
    181a:	85 2b       	or	r24, r21
    181c:	80 93 01 03 	sts	0x0301, r24
    1820:	08 95       	ret

00001822 <update_patch_programmer>:
	
}

void update_patch_programmer(void) {
	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1822:	80 91 7a 03 	lds	r24, 0x037A
    1826:	98 2f       	mov	r25, r24
    1828:	92 95       	swap	r25
    182a:	96 95       	lsr	r25
    182c:	96 95       	lsr	r25
    182e:	93 70       	andi	r25, 0x03	; 3
    1830:	90 ff       	sbrs	r25, 0
    1832:	15 c0       	rjmp	.+42     	; 0x185e <update_patch_programmer+0x3c>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1834:	90 e4       	ldi	r25, 0x40	; 64
    1836:	89 27       	eor	r24, r25
    1838:	80 93 7a 03 	sts	0x037A, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    183c:	80 91 03 03 	lds	r24, 0x0303
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	80 93 03 03 	sts	0x0303, r24
    1846:	85 32       	cpi	r24, 0x25	; 37
    1848:	21 f4       	brne	.+8      	; 0x1852 <update_patch_programmer+0x30>
			
			current_patch.number = NUM_PATCHES; //max patch number
    184a:	84 e2       	ldi	r24, 0x24	; 36
    184c:	80 93 03 03 	sts	0x0303, r24
    1850:	06 c0       	rjmp	.+12     	; 0x185e <update_patch_programmer+0x3c>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1852:	90 91 05 03 	lds	r25, 0x0305
    1856:	93 30       	cpi	r25, 0x03	; 3
    1858:	11 f0       	breq	.+4      	; 0x185e <update_patch_programmer+0x3c>
			
			load_patch(current_patch.number);
    185a:	0e 94 96 08 	call	0x112c	; 0x112c <load_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    185e:	80 91 7a 03 	lds	r24, 0x037A
    1862:	98 2f       	mov	r25, r24
    1864:	92 95       	swap	r25
    1866:	96 95       	lsr	r25
    1868:	97 70       	andi	r25, 0x07	; 7
    186a:	90 ff       	sbrs	r25, 0
    186c:	13 c0       	rjmp	.+38     	; 0x1894 <update_patch_programmer+0x72>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    186e:	90 e2       	ldi	r25, 0x20	; 32
    1870:	89 27       	eor	r24, r25
    1872:	80 93 7a 03 	sts	0x037A, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1876:	80 91 03 03 	lds	r24, 0x0303
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	19 f0       	breq	.+6      	; 0x1884 <update_patch_programmer+0x62>
    187e:	81 50       	subi	r24, 0x01	; 1
    1880:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) load_patch(current_patch.number);
    1884:	80 91 05 03 	lds	r24, 0x0305
    1888:	83 30       	cpi	r24, 0x03	; 3
    188a:	21 f0       	breq	.+8      	; 0x1894 <update_patch_programmer+0x72>
    188c:	80 91 03 03 	lds	r24, 0x0303
    1890:	0e 94 96 08 	call	0x112c	; 0x112c <load_patch>
	
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1894:	80 91 7a 03 	lds	r24, 0x037A
    1898:	98 2f       	mov	r25, r24
    189a:	92 95       	swap	r25
    189c:	9f 70       	andi	r25, 0x0F	; 15
    189e:	90 ff       	sbrs	r25, 0
    18a0:	15 c0       	rjmp	.+42     	; 0x18cc <update_patch_programmer+0xaa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    18a2:	90 e1       	ldi	r25, 0x10	; 16
    18a4:	89 27       	eor	r24, r25
    18a6:	80 93 7a 03 	sts	0x037A, r24
		if (current_patch.mode != WRITE) {
    18aa:	90 91 05 03 	lds	r25, 0x0305
    18ae:	93 30       	cpi	r25, 0x03	; 3
    18b0:	49 f0       	breq	.+18     	; 0x18c4 <update_patch_programmer+0xa2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    18b2:	8f 77       	andi	r24, 0x7F	; 127
    18b4:	80 93 7a 03 	sts	0x037A, r24
			current_patch.mode = WRITE;
    18b8:	83 e0       	ldi	r24, 0x03	; 3
    18ba:	80 93 05 03 	sts	0x0305, r24
			lock_pots();
    18be:	0e 94 78 06 	call	0xcf0	; 0xcf0 <lock_pots>
    18c2:	04 c0       	rjmp	.+8      	; 0x18cc <update_patch_programmer+0xaa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    18c4:	80 91 03 03 	lds	r24, 0x0303
    18c8:	0e 94 a3 06 	call	0xd46	; 0xd46 <save_patch>
		
		
	}
	
	
	value_to_display = current_patch.number;	
    18cc:	80 91 03 03 	lds	r24, 0x0303
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	90 93 fe 01 	sts	0x01FE, r25
    18d6:	80 93 fd 01 	sts	0x01FD, r24
	
	
}	
    18da:	08 95       	ret

000018dc <update_lfo_shape>:
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    18dc:	80 91 79 03 	lds	r24, 0x0379
    18e0:	88 23       	and	r24, r24
    18e2:	64 f4       	brge	.+24     	; 0x18fc <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    18e4:	80 58       	subi	r24, 0x80	; 128
    18e6:	80 93 79 03 	sts	0x0379, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    18ea:	80 91 08 03 	lds	r24, 0x0308
    18ee:	8f 5f       	subi	r24, 0xFF	; 255
    18f0:	80 93 08 03 	sts	0x0308, r24
    18f4:	85 30       	cpi	r24, 0x05	; 5
    18f6:	11 f4       	brne	.+4      	; 0x18fc <update_lfo_shape+0x20>
    18f8:	10 92 08 03 	sts	0x0308, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    18fc:	e0 91 08 03 	lds	r30, 0x0308
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	ea 5d       	subi	r30, 0xDA	; 218
    1908:	fd 4f       	sbci	r31, 0xFD	; 253
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	01 80       	ldd	r0, Z+1	; 0x01
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <update_lfo_shape+0x3a>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    191a:	90 91 ff 02 	lds	r25, 0x02FF
    191e:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1920:	89 2b       	or	r24, r25
    1922:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1926:	80 81       	ld	r24, Z
    1928:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    192a:	ed ed       	ldi	r30, 0xDD	; 221
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 62       	ori	r24, 0x20	; 32
    1932:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1934:	80 81       	ld	r24, Z
    1936:	8f 7d       	andi	r24, 0xDF	; 223
    1938:	80 83       	st	Z, r24
	
}		
    193a:	08 95       	ret

0000193c <refresh_synth>:
	
	
void refresh_synth(void) {
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
	
	if ((switch_press) && current_patch.mode == MEMORY) { //if there are no switch presses, then what's the point of doing any of the updates? Should change the order, see if any program switches are pressed, handle them and if no other switches are pressed then just return from function
    1940:	80 91 c1 02 	lds	r24, 0x02C1
    1944:	88 23       	and	r24, r24
    1946:	49 f0       	breq	.+18     	; 0x195a <refresh_synth+0x1e>
    1948:	80 91 05 03 	lds	r24, 0x0305
    194c:	88 23       	and	r24, r24
    194e:	29 f4       	brne	.+10     	; 0x195a <refresh_synth+0x1e>
					
		current_patch.mode = EDIT;
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	80 93 05 03 	sts	0x0305, r24
		switch_press = 0;
    1956:	10 92 c1 02 	sts	0x02C1, r1
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    195a:	90 91 78 03 	lds	r25, 0x0378
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    195e:	80 91 7a 03 	lds	r24, 0x037A
    1962:	86 95       	lsr	r24
    1964:	86 95       	lsr	r24
    1966:	68 2f       	mov	r22, r24
    1968:	67 95       	ror	r22
    196a:	66 27       	eor	r22, r22
    196c:	67 95       	ror	r22
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    196e:	29 2f       	mov	r18, r25
    1970:	21 70       	andi	r18, 0x01	; 1
    1972:	26 2b       	or	r18, r22
    1974:	69 2f       	mov	r22, r25
    1976:	66 1f       	adc	r22, r22
    1978:	66 27       	eor	r22, r22
    197a:	66 1f       	adc	r22, r22
    197c:	66 0f       	add	r22, r22
    197e:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1980:	c9 2f       	mov	r28, r25
    1982:	c6 95       	lsr	r28
    1984:	c6 95       	lsr	r28
    1986:	d0 e0       	ldi	r29, 0x00	; 0
    1988:	c1 70       	andi	r28, 0x01	; 1
    198a:	d0 70       	andi	r29, 0x00	; 0
    198c:	de 01       	movw	r26, r28
    198e:	aa 0f       	add	r26, r26
    1990:	bb 1f       	adc	r27, r27
    1992:	aa 0f       	add	r26, r26
    1994:	bb 1f       	adc	r27, r27
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1996:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1998:	a9 2f       	mov	r26, r25
    199a:	a6 95       	lsr	r26
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	a1 70       	andi	r26, 0x01	; 1
    19a0:	b0 70       	andi	r27, 0x00	; 0
    19a2:	fd 01       	movw	r30, r26
    19a4:	ee 0f       	add	r30, r30
    19a6:	ff 1f       	adc	r31, r31
    19a8:	ee 0f       	add	r30, r30
    19aa:	ff 1f       	adc	r31, r31
    19ac:	ee 0f       	add	r30, r30
    19ae:	ff 1f       	adc	r31, r31
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    19b0:	a6 2f       	mov	r26, r22
    19b2:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    19b4:	e9 2f       	mov	r30, r25
    19b6:	e2 95       	swap	r30
    19b8:	ef 70       	andi	r30, 0x0F	; 15
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	e1 70       	andi	r30, 0x01	; 1
    19be:	f0 70       	andi	r31, 0x00	; 0
    19c0:	bf 01       	movw	r22, r30
    19c2:	62 95       	swap	r22
    19c4:	72 95       	swap	r23
    19c6:	70 7f       	andi	r23, 0xF0	; 240
    19c8:	76 27       	eor	r23, r22
    19ca:	60 7f       	andi	r22, 0xF0	; 240
    19cc:	76 27       	eor	r23, r22
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    19ce:	ea 2f       	mov	r30, r26
    19d0:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    19d2:	69 2f       	mov	r22, r25
    19d4:	62 95       	swap	r22
    19d6:	66 95       	lsr	r22
    19d8:	67 70       	andi	r22, 0x07	; 7
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	61 70       	andi	r22, 0x01	; 1
    19de:	70 70       	andi	r23, 0x00	; 0
    19e0:	ab 01       	movw	r20, r22
    19e2:	44 0f       	add	r20, r20
    19e4:	55 1f       	adc	r21, r21
    19e6:	42 95       	swap	r20
    19e8:	52 95       	swap	r21
    19ea:	50 7f       	andi	r21, 0xF0	; 240
    19ec:	54 27       	eor	r21, r20
    19ee:	40 7f       	andi	r20, 0xF0	; 240
    19f0:	54 27       	eor	r21, r20
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    19f2:	6e 2f       	mov	r22, r30
    19f4:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    19f6:	49 2f       	mov	r20, r25
    19f8:	42 95       	swap	r20
    19fa:	46 95       	lsr	r20
    19fc:	46 95       	lsr	r20
    19fe:	43 70       	andi	r20, 0x03	; 3
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	41 70       	andi	r20, 0x01	; 1
    1a04:	50 70       	andi	r21, 0x00	; 0
    1a06:	9a 01       	movw	r18, r20
    1a08:	00 24       	eor	r0, r0
    1a0a:	36 95       	lsr	r19
    1a0c:	27 95       	ror	r18
    1a0e:	07 94       	ror	r0
    1a10:	36 95       	lsr	r19
    1a12:	27 95       	ror	r18
    1a14:	07 94       	ror	r0
    1a16:	32 2f       	mov	r19, r18
    1a18:	20 2d       	mov	r18, r0
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1a1a:	26 2b       	or	r18, r22
    1a1c:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1a20:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1a22:	81 95       	neg	r24
    1a24:	89 27       	eor	r24, r25
    1a26:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1a28:	89 27       	eor	r24, r25
    1a2a:	0e 94 8c 13 	call	0x2718	; 0x2718 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1a2e:	ed ed       	ldi	r30, 0xDD	; 221
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1a34:	90 91 7a 03 	lds	r25, 0x037A
    1a38:	96 95       	lsr	r25
    1a3a:	96 95       	lsr	r25
    1a3c:	96 95       	lsr	r25
    1a3e:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1a40:	91 95       	neg	r25
    1a42:	80 81       	ld	r24, Z
    1a44:	89 27       	eor	r24, r25
    1a46:	80 71       	andi	r24, 0x10	; 16
    1a48:	82 27       	eor	r24, r18
    1a4a:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1a4c:	ee ef       	ldi	r30, 0xFE	; 254
    1a4e:	f2 e0       	ldi	r31, 0x02	; 2
    1a50:	80 81       	ld	r24, Z
    1a52:	98 27       	eor	r25, r24
    1a54:	91 70       	andi	r25, 0x01	; 1
    1a56:	89 27       	eor	r24, r25
    1a58:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1a5a:	0e 94 86 0b 	call	0x170c	; 0x170c <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1a5e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <update_lfo_shape>
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1a62:	80 91 7a 03 	lds	r24, 0x037A
    1a66:	88 23       	and	r24, r24
    1a68:	44 f4       	brge	.+16     	; 0x1a7a <refresh_synth+0x13e>
		//if (current_patch.mode == MANUAL) { //if already in manual mode 
			//
			////switch_states.byte2 ^= (1<< PROG_MANUAL_SW);			
			//
		//} else {
			switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1a6a:	80 68       	ori	r24, 0x80	; 128
    1a6c:	80 93 7a 03 	sts	0x037A, r24
			current_patch.mode = MANUAL;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	80 93 05 03 	sts	0x0305, r24
			unlock_pots();
    1a76:	0e 94 92 06 	call	0xd24	; 0xd24 <unlock_pots>
		//}		
		
	}
	
	update_patch_programmer();		
    1a7a:	0e 94 11 0c 	call	0x1822	; 0x1822 <update_patch_programmer>
				
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) //temporary tune button hack
    1a7e:	80 91 79 03 	lds	r24, 0x0379
    1a82:	98 2f       	mov	r25, r24
    1a84:	92 95       	swap	r25
    1a86:	96 95       	lsr	r25
    1a88:	97 70       	andi	r25, 0x07	; 7
    1a8a:	90 ff       	sbrs	r25, 0
    1a8c:	3f c0       	rjmp	.+126    	; 0x1b0c <refresh_synth+0x1d0>
		{ 
				
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle read switch state
    1a8e:	90 e2       	ldi	r25, 0x20	; 32
    1a90:	89 27       	eor	r24, r25
    1a92:	80 93 79 03 	sts	0x0379, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1a96:	87 e0       	ldi	r24, 0x07	; 7
    1a98:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1a9a:	cd ed       	ldi	r28, 0xDD	; 221
    1a9c:	d0 e0       	ldi	r29, 0x00	; 0
    1a9e:	88 81       	ld	r24, Y
    1aa0:	80 62       	ori	r24, 0x20	; 32
    1aa2:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1aa4:	88 81       	ld	r24, Y
    1aa6:	8f 7d       	andi	r24, 0xDF	; 223
    1aa8:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1aaa:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    1aac:	8f e0       	ldi	r24, 0x0F	; 15
    1aae:	6f e0       	ldi	r22, 0x0F	; 15
    1ab0:	7e e5       	ldi	r23, 0x5E	; 94
    1ab2:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <set_vco_init_cv>
    1ab6:	90 93 70 03 	sts	0x0370, r25
    1aba:	80 93 6f 03 	sts	0x036F, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    1abe:	80 ef       	ldi	r24, 0xF0	; 240
    1ac0:	6f e0       	ldi	r22, 0x0F	; 15
    1ac2:	7e e5       	ldi	r23, 0x5E	; 94
    1ac4:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <set_vco_init_cv>
    1ac8:	90 93 6e 03 	sts	0x036E, r25
    1acc:	80 93 6d 03 	sts	0x036D, r24

		tune_8ths(VCO1);
    1ad0:	8f e0       	ldi	r24, 0x0F	; 15
    1ad2:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <tune_8ths>
		tune_8ths(VCO2);
    1ad6:	80 ef       	ldi	r24, 0xF0	; 240
    1ad8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <tune_8ths>
		tune_filter();
    1adc:	0e 94 0e 11 	call	0x221c	; 0x221c <tune_filter>
		save_tuning_tables();
    1ae0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ae4:	8f e4       	ldi	r24, 0x4F	; 79
    1ae6:	93 ec       	ldi	r25, 0xC3	; 195
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <refresh_synth+0x1ac>
    1aec:	00 c0       	rjmp	.+0      	; 0x1aee <refresh_synth+0x1b2>
    1aee:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
    1af0:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1af2:	88 81       	ld	r24, Y
    1af4:	80 62       	ori	r24, 0x20	; 32
    1af6:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1af8:	88 81       	ld	r24, Y
    1afa:	8f 7d       	andi	r24, 0xDF	; 223
    1afc:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1afe:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    1b00:	80 91 ff 02 	lds	r24, 0x02FF
    1b04:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1b06:	80 68       	ori	r24, 0x80	; 128
    1b08:	80 93 ff 02 	sts	0x02FF, r24
				
		}
		
		
	
}
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	08 95       	ret

00001b12 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1b12:	88 ed       	ldi	r24, 0xD8	; 216
    1b14:	91 e0       	ldi	r25, 0x01	; 1
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1b1e:	81 ee       	ldi	r24, 0xE1	; 225
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1b2a:	82 ee       	ldi	r24, 0xE2	; 226
    1b2c:	91 e0       	ldi	r25, 0x01	; 1
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1b36:	82 eb       	ldi	r24, 0xB2	; 178
    1b38:	92 e0       	ldi	r25, 0x02	; 2
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1b42:	8a ed       	ldi	r24, 0xDA	; 218
    1b44:	91 e0       	ldi	r25, 0x01	; 1
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1b4e:	8f ed       	ldi	r24, 0xDF	; 223
    1b50:	91 e0       	ldi	r25, 0x01	; 1
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1b5a:	80 ee       	ldi	r24, 0xE0	; 224
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1b66:	81 ed       	ldi	r24, 0xD1	; 209
    1b68:	91 e0       	ldi	r25, 0x01	; 1
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1b72:	86 ed       	ldi	r24, 0xD6	; 214
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1b7e:	82 ed       	ldi	r24, 0xD2	; 210
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1b8a:	83 ed       	ldi	r24, 0xD3	; 211
    1b8c:	91 e0       	ldi	r25, 0x01	; 1
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1b96:	84 ed       	ldi	r24, 0xD4	; 212
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	6f ef       	ldi	r22, 0xFF	; 255
    1b9c:	7f e3       	ldi	r23, 0x3F	; 63
    1b9e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1ba2:	85 ed       	ldi	r24, 0xD5	; 213
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1bae:	89 ed       	ldi	r24, 0xD9	; 217
    1bb0:	91 e0       	ldi	r25, 0x01	; 1
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1bba:	8e ec       	ldi	r24, 0xCE	; 206
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1bc6:	8c ec       	ldi	r24, 0xCC	; 204
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1bd2:	8a ec       	ldi	r24, 0xCA	; 202
    1bd4:	91 e0       	ldi	r25, 0x01	; 1
    1bd6:	6f ef       	ldi	r22, 0xFF	; 255
    1bd8:	7f e3       	ldi	r23, 0x3F	; 63
    1bda:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1bde:	88 ec       	ldi	r24, 0xC8	; 200
    1be0:	91 e0       	ldi	r25, 0x01	; 1
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1bea:	80 ed       	ldi	r24, 0xD0	; 208
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1bf6:	83 ee       	ldi	r24, 0xE3	; 227
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1c02:	84 ee       	ldi	r24, 0xE4	; 228
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}	
    1c0e:	08 95       	ret

00001c10 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1c10:	2f 92       	push	r2
    1c12:	3f 92       	push	r3
    1c14:	4f 92       	push	r4
    1c16:	5f 92       	push	r5
    1c18:	6f 92       	push	r6
    1c1a:	7f 92       	push	r7
    1c1c:	8f 92       	push	r8
    1c1e:	9f 92       	push	r9
    1c20:	af 92       	push	r10
    1c22:	bf 92       	push	r11
    1c24:	cf 92       	push	r12
    1c26:	df 92       	push	r13
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	2c 97       	sbiw	r28, 0x0c	; 12
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	08 2f       	mov	r16, r24
    1c46:	78 87       	std	Y+8, r23	; 0x08
    1c48:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1c4a:	80 91 75 03 	lds	r24, 0x0375
    1c4e:	83 60       	ori	r24, 0x03	; 3
    1c50:	80 93 75 03 	sts	0x0375, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1c54:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1c58:	10 92 74 03 	sts	0x0374, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1c5c:	0f 30       	cpi	r16, 0x0F	; 15
    1c5e:	e1 f4       	brne	.+56     	; 0x1c98 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1c60:	0f 2e       	mov	r0, r31
    1c62:	f6 ee       	ldi	r31, 0xE6	; 230
    1c64:	4f 2e       	mov	r4, r31
    1c66:	f1 e0       	ldi	r31, 0x01	; 1
    1c68:	5f 2e       	mov	r5, r31
    1c6a:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1c6c:	0f 2e       	mov	r0, r31
    1c6e:	fe ed       	ldi	r31, 0xDE	; 222
    1c70:	2f 2e       	mov	r2, r31
    1c72:	f1 e0       	ldi	r31, 0x01	; 1
    1c74:	3f 2e       	mov	r3, r31
    1c76:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1c78:	23 ee       	ldi	r18, 0xE3	; 227
    1c7a:	31 e0       	ldi	r19, 0x01	; 1
    1c7c:	3a 83       	std	Y+2, r19	; 0x02
    1c7e:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1c80:	0f 2e       	mov	r0, r31
    1c82:	fc ed       	ldi	r31, 0xDC	; 220
    1c84:	8f 2e       	mov	r8, r31
    1c86:	f1 e0       	ldi	r31, 0x01	; 1
    1c88:	9f 2e       	mov	r9, r31
    1c8a:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1c8c:	82 e7       	ldi	r24, 0x72	; 114
    1c8e:	96 e0       	ldi	r25, 0x06	; 6
    1c90:	9a 87       	std	Y+10, r25	; 0x0a
    1c92:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	1b c0       	rjmp	.+54     	; 0x1cce <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1c98:	0f 2e       	mov	r0, r31
    1c9a:	f5 ee       	ldi	r31, 0xE5	; 229
    1c9c:	4f 2e       	mov	r4, r31
    1c9e:	f1 e0       	ldi	r31, 0x01	; 1
    1ca0:	5f 2e       	mov	r5, r31
    1ca2:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1ca4:	0f 2e       	mov	r0, r31
    1ca6:	f7 ed       	ldi	r31, 0xD7	; 215
    1ca8:	2f 2e       	mov	r2, r31
    1caa:	f1 e0       	ldi	r31, 0x01	; 1
    1cac:	3f 2e       	mov	r3, r31
    1cae:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1cb0:	e4 ee       	ldi	r30, 0xE4	; 228
    1cb2:	f1 e0       	ldi	r31, 0x01	; 1
    1cb4:	fa 83       	std	Y+2, r31	; 0x02
    1cb6:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1cb8:	0f 2e       	mov	r0, r31
    1cba:	fd ed       	ldi	r31, 0xDD	; 221
    1cbc:	8f 2e       	mov	r8, r31
    1cbe:	f1 e0       	ldi	r31, 0x01	; 1
    1cc0:	9f 2e       	mov	r9, r31
    1cc2:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1cc4:	20 e7       	ldi	r18, 0x70	; 112
    1cc6:	36 e0       	ldi	r19, 0x06	; 6
    1cc8:	3a 87       	std	Y+10, r19	; 0x0a
    1cca:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1ccc:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1cce:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1cd0:	ed ed       	ldi	r30, 0xDD	; 221
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	80 64       	ori	r24, 0x40	; 64
    1cd8:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1cda:	80 81       	ld	r24, Z
    1cdc:	8f 7b       	andi	r24, 0xBF	; 191
    1cde:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1ce0:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1ce2:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1ce4:	84 b5       	in	r24, 0x24	; 36
    1ce6:	8f 60       	ori	r24, 0x0F	; 15
    1ce8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1cee:	ee e6       	ldi	r30, 0x6E	; 110
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	90 81       	ld	r25, Z
    1cf4:	92 60       	ori	r25, 0x02	; 2
    1cf6:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1cf8:	80 93 76 03 	sts	0x0376, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1cfc:	8d e0       	ldi	r24, 0x0D	; 13
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1d04:	80 2f       	mov	r24, r16
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	8c 01       	movw	r16, r24
    1d0a:	0f 5f       	subi	r16, 0xFF	; 255
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1d0e:	0f 2e       	mov	r0, r31
    1d10:	f8 ed       	ldi	r31, 0xD8	; 216
    1d12:	ef 2e       	mov	r14, r31
    1d14:	f1 e0       	ldi	r31, 0x01	; 1
    1d16:	ff 2e       	mov	r15, r31
    1d18:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1d1a:	0f 2e       	mov	r0, r31
    1d1c:	f4 ed       	ldi	r31, 0xD4	; 212
    1d1e:	cf 2e       	mov	r12, r31
    1d20:	f1 e0       	ldi	r31, 0x01	; 1
    1d22:	df 2e       	mov	r13, r31
    1d24:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1d26:	0f 2e       	mov	r0, r31
    1d28:	fa ec       	ldi	r31, 0xCA	; 202
    1d2a:	af 2e       	mov	r10, r31
    1d2c:	f1 e0       	ldi	r31, 0x01	; 1
    1d2e:	bf 2e       	mov	r11, r31
    1d30:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1d32:	0f 2e       	mov	r0, r31
    1d34:	fb ec       	ldi	r31, 0xCB	; 203
    1d36:	6f 2e       	mov	r6, r31
    1d38:	f1 e0       	ldi	r31, 0x01	; 1
    1d3a:	7f 2e       	mov	r7, r31
    1d3c:	f0 2d       	mov	r31, r0
    1d3e:	e0 e0       	ldi	r30, 0x00	; 0
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	fc 87       	std	Y+12, r31	; 0x0c
    1d44:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1d46:	21 e0       	ldi	r18, 0x01	; 1
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	0b 80       	ldd	r0, Y+3	; 0x03
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <set_vco_init_cv+0x142>
    1d4e:	22 0f       	add	r18, r18
    1d50:	33 1f       	adc	r19, r19
    1d52:	0a 94       	dec	r0
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <set_vco_init_cv+0x13e>
    1d56:	3e 83       	std	Y+6, r19	; 0x06
    1d58:	2d 83       	std	Y+5, r18	; 0x05
    1d5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d5e:	82 2b       	or	r24, r18
    1d60:	93 2b       	or	r25, r19
    1d62:	9c 87       	std	Y+12, r25	; 0x0c
    1d64:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1d66:	c4 01       	movw	r24, r8
    1d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
		
		count_finished = FALSE;
    1d70:	10 92 74 03 	sts	0x0374, r1
		period_counter = 0;
    1d74:	10 92 77 03 	sts	0x0377, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1d78:	8f e0       	ldi	r24, 0x0F	; 15
    1d7a:	e8 e1       	ldi	r30, 0x18	; 24
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	a8 95       	wdr
    1d84:	e0 93 60 00 	sts	0x0060, r30
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1d8e:	80 91 74 03 	lds	r24, 0x0374
    1d92:	88 23       	and	r24, r24
    1d94:	89 f5       	brne	.+98     	; 0x1df8 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1d96:	c8 01       	movw	r24, r16
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1d9e:	c4 01       	movw	r24, r8
    1da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1da8:	c1 01       	movw	r24, r2
    1daa:	6f ef       	ldi	r22, 0xFF	; 255
    1dac:	7f e3       	ldi	r23, 0x3F	; 63
    1dae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1db2:	c7 01       	movw	r24, r14
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1dbc:	c6 01       	movw	r24, r12
    1dbe:	6f ef       	ldi	r22, 0xFF	; 255
    1dc0:	7f e3       	ldi	r23, 0x3F	; 63
    1dc2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1dc6:	c5 01       	movw	r24, r10
    1dc8:	6f ef       	ldi	r22, 0xFF	; 255
    1dca:	7f e3       	ldi	r23, 0x3F	; 63
    1dcc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1dd0:	c3 01       	movw	r24, r6
    1dd2:	6f ef       	ldi	r22, 0xFF	; 255
    1dd4:	7f e3       	ldi	r23, 0x3F	; 63
    1dd6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	6f ef       	ldi	r22, 0xFF	; 255
    1de0:	7f e3       	ldi	r23, 0x3F	; 63
    1de2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1de6:	c2 01       	movw	r24, r4
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1df0:	80 91 74 03 	lds	r24, 0x0374
    1df4:	88 23       	and	r24, r24
    1df6:	79 f2       	breq	.-98     	; 0x1d96 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1df8:	88 e1       	ldi	r24, 0x18	; 24
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	80 93 60 00 	sts	0x0060, r24
    1e02:	10 92 60 00 	sts	0x0060, r1
    1e06:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1e08:	80 91 72 03 	lds	r24, 0x0372
    1e0c:	90 91 73 03 	lds	r25, 0x0373
    1e10:	ef 81       	ldd	r30, Y+7	; 0x07
    1e12:	f8 85       	ldd	r31, Y+8	; 0x08
    1e14:	e8 17       	cp	r30, r24
    1e16:	f9 07       	cpc	r31, r25
    1e18:	20 f0       	brcs	.+8      	; 0x1e22 <set_vco_init_cv+0x212>
    1e1a:	80 91 af 02 	lds	r24, 0x02AF
    1e1e:	88 23       	and	r24, r24
    1e20:	51 f4       	brne	.+20     	; 0x1e36 <set_vco_init_cv+0x226>
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	80 95       	com	r24
    1e28:	90 95       	com	r25
    1e2a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e2c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e2e:	28 23       	and	r18, r24
    1e30:	39 23       	and	r19, r25
    1e32:	3c 87       	std	Y+12, r19	; 0x0c
    1e34:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	9c 83       	std	Y+4, r25	; 0x04
    1e44:	8b 83       	std	Y+3, r24	; 0x03
    1e46:	ef ef       	ldi	r30, 0xFF	; 255
    1e48:	8f 3f       	cpi	r24, 0xFF	; 255
    1e4a:	9e 07       	cpc	r25, r30
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <set_vco_init_cv+0x240>
    1e4e:	7b cf       	rjmp	.-266    	; 0x1d46 <set_vco_init_cv+0x136>
    1e50:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e52:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e54:	3e 83       	std	Y+6, r19	; 0x06
    1e56:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1e58:	88 ec       	ldi	r24, 0xC8	; 200
    1e5a:	91 e0       	ldi	r25, 0x01	; 1
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    1e64:	89 ec       	ldi	r24, 0xC9	; 201
    1e66:	91 e0       	ldi	r25, 0x01	; 1
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    1e70:	84 ed       	ldi	r24, 0xD4	; 212
    1e72:	91 e0       	ldi	r25, 0x01	; 1
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    1e7c:	88 ed       	ldi	r24, 0xD8	; 216
    1e7e:	91 e0       	ldi	r25, 0x01	; 1
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    1e88:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1e8a:	ee e6       	ldi	r30, 0x6E	; 110
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	8d 7f       	andi	r24, 0xFD	; 253
    1e92:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    1e94:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    1e96:	89 85       	ldd	r24, Y+9	; 0x09
    1e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9a:	6d 81       	ldd	r22, Y+5	; 0x05
    1e9c:	7e 81       	ldd	r23, Y+6	; 0x06
    1e9e:	0e 94 47 1b 	call	0x368e	; 0x368e <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	2c 96       	adiw	r28, 0x0c	; 12
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	df 90       	pop	r13
    1ec0:	cf 90       	pop	r12
    1ec2:	bf 90       	pop	r11
    1ec4:	af 90       	pop	r10
    1ec6:	9f 90       	pop	r9
    1ec8:	8f 90       	pop	r8
    1eca:	7f 90       	pop	r7
    1ecc:	6f 90       	pop	r6
    1ece:	5f 90       	pop	r5
    1ed0:	4f 90       	pop	r4
    1ed2:	3f 90       	pop	r3
    1ed4:	2f 90       	pop	r2
    1ed6:	08 95       	ret

00001ed8 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1ed8:	2f 92       	push	r2
    1eda:	3f 92       	push	r3
    1edc:	4f 92       	push	r4
    1ede:	5f 92       	push	r5
    1ee0:	6f 92       	push	r6
    1ee2:	7f 92       	push	r7
    1ee4:	8f 92       	push	r8
    1ee6:	9f 92       	push	r9
    1ee8:	af 92       	push	r10
    1eea:	bf 92       	push	r11
    1eec:	cf 92       	push	r12
    1eee:	df 92       	push	r13
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	c0 54       	subi	r28, 0x40	; 64
    1f02:	d0 40       	sbci	r29, 0x00	; 0
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    1f10:	de 01       	movw	r26, r28
    1f12:	11 96       	adiw	r26, 0x01	; 1
    1f14:	e0 e3       	ldi	r30, 0x30	; 48
    1f16:	f2 e0       	ldi	r31, 0x02	; 2
    1f18:	80 e3       	ldi	r24, 0x30	; 48
    1f1a:	01 90       	ld	r0, Z+
    1f1c:	0d 92       	st	X+, r0
    1f1e:	81 50       	subi	r24, 0x01	; 1
    1f20:	e1 f7       	brne	.-8      	; 0x1f1a <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    1f22:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1f26:	0f 30       	cpi	r16, 0x0F	; 15
    1f28:	11 f5       	brne	.+68     	; 0x1f6e <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    1f2a:	40 90 6f 03 	lds	r4, 0x036F
    1f2e:	50 90 70 03 	lds	r5, 0x0370
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1f32:	0f 2e       	mov	r0, r31
    1f34:	f6 ee       	ldi	r31, 0xE6	; 230
    1f36:	8f 2e       	mov	r8, r31
    1f38:	f1 e0       	ldi	r31, 0x01	; 1
    1f3a:	9f 2e       	mov	r9, r31
    1f3c:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    1f3e:	0f 2e       	mov	r0, r31
    1f40:	fe ed       	ldi	r31, 0xDE	; 222
    1f42:	2f 2e       	mov	r2, r31
    1f44:	f1 e0       	ldi	r31, 0x01	; 1
    1f46:	3f 2e       	mov	r3, r31
    1f48:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    1f4a:	23 ee       	ldi	r18, 0xE3	; 227
    1f4c:	31 e0       	ldi	r19, 0x01	; 1
    1f4e:	3a ab       	sts	0x5a, r19
    1f50:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1f52:	0f 2e       	mov	r0, r31
    1f54:	fc ed       	ldi	r31, 0xDC	; 220
    1f56:	6f 2e       	mov	r6, r31
    1f58:	f1 e0       	ldi	r31, 0x01	; 1
    1f5a:	7f 2e       	mov	r7, r31
    1f5c:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    1f5e:	0b e4       	ldi	r16, 0x4B	; 75
    1f60:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    1f62:	cc 24       	eor	r12, r12
    1f64:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    1f66:	ee 24       	eor	r14, r14
    1f68:	68 94       	set
    1f6a:	e1 f8       	bld	r14, 1
    1f6c:	22 c0       	rjmp	.+68     	; 0x1fb2 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    1f6e:	40 90 6d 03 	lds	r4, 0x036D
    1f72:	50 90 6e 03 	lds	r5, 0x036E
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1f76:	0f 2e       	mov	r0, r31
    1f78:	f5 ee       	ldi	r31, 0xE5	; 229
    1f7a:	8f 2e       	mov	r8, r31
    1f7c:	f1 e0       	ldi	r31, 0x01	; 1
    1f7e:	9f 2e       	mov	r9, r31
    1f80:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    1f82:	0f 2e       	mov	r0, r31
    1f84:	f7 ed       	ldi	r31, 0xD7	; 215
    1f86:	2f 2e       	mov	r2, r31
    1f88:	f1 e0       	ldi	r31, 0x01	; 1
    1f8a:	3f 2e       	mov	r3, r31
    1f8c:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    1f8e:	44 ee       	ldi	r20, 0xE4	; 228
    1f90:	51 e0       	ldi	r21, 0x01	; 1
    1f92:	5a ab       	sts	0x5a, r21
    1f94:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1f96:	0f 2e       	mov	r0, r31
    1f98:	fd ed       	ldi	r31, 0xDD	; 221
    1f9a:	6f 2e       	mov	r6, r31
    1f9c:	f1 e0       	ldi	r31, 0x01	; 1
    1f9e:	7f 2e       	mov	r7, r31
    1fa0:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    1fa2:	09 e2       	ldi	r16, 0x29	; 41
    1fa4:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    1fa6:	cc 24       	eor	r12, r12
    1fa8:	68 94       	set
    1faa:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    1fac:	ee 24       	eor	r14, r14
    1fae:	68 94       	set
    1fb0:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    1fb2:	c3 01       	movw	r24, r6
    1fb4:	b2 01       	movw	r22, r4
    1fb6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    1fba:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1fbc:	ed ed       	ldi	r30, 0xDD	; 221
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	80 64       	ori	r24, 0x40	; 64
    1fc4:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8f 7b       	andi	r24, 0xBF	; 191
    1fca:	80 83       	st	Z, r24
		DATA_BUS = 0;
    1fcc:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    1fce:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	80 93 76 03 	sts	0x0376, r24
		
		compare_match_counter = 0;	
    1fd6:	10 92 71 03 	sts	0x0371, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1fda:	8c 2d       	mov	r24, r12
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	24 e6       	ldi	r18, 0x64	; 100
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	82 9f       	mul	r24, r18
    1fe4:	d0 01       	movw	r26, r0
    1fe6:	83 9f       	mul	r24, r19
    1fe8:	b0 0d       	add	r27, r0
    1fea:	92 9f       	mul	r25, r18
    1fec:	b0 0d       	add	r27, r0
    1fee:	11 24       	eor	r1, r1
    1ff0:	bc ab       	sts	0x5c, r27
    1ff2:	ab ab       	sts	0x5b, r26
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	31 96       	adiw	r30, 0x01	; 1
    1ff8:	fc af       	sts	0x7c, r31
    1ffa:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    1ffc:	98 01       	movw	r18, r16
    1ffe:	2e 5f       	subi	r18, 0xFE	; 254
    2000:	3f 4f       	sbci	r19, 0xFF	; 255
    2002:	21 96       	adiw	r28, 0x01	; 1
    2004:	3f af       	sts	0x7f, r19
    2006:	2e af       	sts	0x7e, r18
    2008:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    200a:	1e ae       	sts	0xbe, r17
    200c:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    200e:	0f 2e       	mov	r0, r31
    2010:	f8 ed       	ldi	r31, 0xD8	; 216
    2012:	ef 2e       	mov	r14, r31
    2014:	f1 e0       	ldi	r31, 0x01	; 1
    2016:	ff 2e       	mov	r15, r31
    2018:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    201a:	0f 2e       	mov	r0, r31
    201c:	f4 ed       	ldi	r31, 0xD4	; 212
    201e:	cf 2e       	mov	r12, r31
    2020:	f1 e0       	ldi	r31, 0x01	; 1
    2022:	df 2e       	mov	r13, r31
    2024:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2026:	0f 2e       	mov	r0, r31
    2028:	fa ec       	ldi	r31, 0xCA	; 202
    202a:	af 2e       	mov	r10, r31
    202c:	f1 e0       	ldi	r31, 0x01	; 1
    202e:	bf 2e       	mov	r11, r31
    2030:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    2032:	eb ad       	sts	0x6b, r30
    2034:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    2036:	80 81       	ld	r24, Z
    2038:	80 93 76 03 	sts	0x0376, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    203c:	84 b5       	in	r24, 0x24	; 36
    203e:	8f 60       	ori	r24, 0x0F	; 15
    2040:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    2046:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    2048:	4d ad       	sts	0x6d, r20
    204a:	5e ad       	sts	0x6e, r21
    204c:	43 30       	cpi	r20, 0x03	; 3
    204e:	51 05       	cpc	r21, r1
    2050:	24 f4       	brge	.+8      	; 0x205a <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	80 93 75 03 	sts	0x0375, r24
    2058:	03 c0       	rjmp	.+6      	; 0x2060 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	80 93 75 03 	sts	0x0375, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    2060:	81 81       	ldd	r24, Z+1	; 0x01
    2062:	92 81       	ldd	r25, Z+2	; 0x02
    2064:	9a af       	sts	0x7a, r25
    2066:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2068:	ad e0       	ldi	r26, 0x0D	; 13
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	be ab       	sts	0x5e, r27
    206e:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    2070:	00 e0       	ldi	r16, 0x00	; 0
    2072:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2074:	e1 e0       	ldi	r30, 0x01	; 1
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	0d a8       	sts	0x8d, r16
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <tune_8ths+0x1a8>
    207c:	ee 0f       	add	r30, r30
    207e:	ff 1f       	adc	r31, r31
    2080:	0a 94       	dec	r0
    2082:	e2 f7       	brpl	.-8      	; 0x207c <tune_8ths+0x1a4>
    2084:	f8 af       	sts	0x78, r31
    2086:	ef ab       	sts	0x5f, r30
    2088:	0e 2b       	or	r16, r30
    208a:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    208c:	ae e6       	ldi	r26, 0x6E	; 110
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	8c 91       	ld	r24, X
    2092:	8d 7f       	andi	r24, 0xFD	; 253
    2094:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2096:	c4 01       	movw	r24, r8
    2098:	b8 01       	movw	r22, r16
    209a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
    209e:	e3 ef       	ldi	r30, 0xF3	; 243
    20a0:	f1 e0       	ldi	r31, 0x01	; 1
    20a2:	31 97       	sbiw	r30, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <tune_8ths+0x1ca>
    20a6:	00 c0       	rjmp	.+0      	; 0x20a8 <tune_8ths+0x1d0>
    20a8:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    20aa:	ae e6       	ldi	r26, 0x6E	; 110
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	8c 91       	ld	r24, X
    20b0:	82 60       	ori	r24, 0x02	; 2
    20b2:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    20b4:	10 92 74 03 	sts	0x0374, r1
				period_counter = 0;
    20b8:	10 92 77 03 	sts	0x0377, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    20bc:	e8 e1       	ldi	r30, 0x18	; 24
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	2f e0       	ldi	r18, 0x0F	; 15
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	a8 95       	wdr
    20c8:	e0 93 60 00 	sts	0x0060, r30
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    20d2:	80 91 74 03 	lds	r24, 0x0374
    20d6:	88 23       	and	r24, r24
    20d8:	81 f5       	brne	.+96     	; 0x213a <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    20da:	80 91 76 03 	lds	r24, 0x0376
    20de:	4b a9       	sts	0x4b, r20
    20e0:	5c a9       	sts	0x4c, r21
    20e2:	48 0f       	add	r20, r24
    20e4:	51 1d       	adc	r21, r1
    20e6:	ca 01       	movw	r24, r20
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    20ee:	c3 01       	movw	r24, r6
    20f0:	b2 01       	movw	r22, r4
    20f2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    20f6:	c4 01       	movw	r24, r8
    20f8:	b8 01       	movw	r22, r16
    20fa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    20fe:	c7 01       	movw	r24, r14
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    2108:	c6 01       	movw	r24, r12
    210a:	6f ef       	ldi	r22, 0xFF	; 255
    210c:	7f e3       	ldi	r23, 0x3F	; 63
    210e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2112:	c5 01       	movw	r24, r10
    2114:	6f ef       	ldi	r22, 0xFF	; 255
    2116:	7f e3       	ldi	r23, 0x3F	; 63
    2118:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    211c:	c1 01       	movw	r24, r2
    211e:	60 e0       	ldi	r22, 0x00	; 0
    2120:	70 e2       	ldi	r23, 0x20	; 32
    2122:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    2126:	89 a9       	sts	0x49, r24
    2128:	9a a9       	sts	0x4a, r25
    212a:	6f ef       	ldi	r22, 0xFF	; 255
    212c:	7f e3       	ldi	r23, 0x3F	; 63
    212e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2132:	80 91 74 03 	lds	r24, 0x0374
    2136:	88 23       	and	r24, r24
    2138:	81 f2       	breq	.-96     	; 0x20da <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    213a:	58 e1       	ldi	r21, 0x18	; 24
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	50 93 60 00 	sts	0x0060, r21
    2144:	10 92 60 00 	sts	0x0060, r1
    2148:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    214a:	80 91 72 03 	lds	r24, 0x0372
    214e:	90 91 73 03 	lds	r25, 0x0373
    2152:	a9 ad       	sts	0x69, r26
    2154:	ba ad       	sts	0x6a, r27
    2156:	a8 17       	cp	r26, r24
    2158:	b9 07       	cpc	r27, r25
    215a:	50 f0       	brcs	.+20     	; 0x2170 <tune_8ths+0x298>
    215c:	80 91 af 02 	lds	r24, 0x02AF
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	31 f4       	brne	.+12     	; 0x2170 <tune_8ths+0x298>
    2164:	8f a9       	sts	0x4f, r24
    2166:	98 ad       	sts	0x68, r25
    2168:	80 95       	com	r24
    216a:	90 95       	com	r25
    216c:	08 23       	and	r16, r24
    216e:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2170:	80 91 72 03 	lds	r24, 0x0372
    2174:	90 91 73 03 	lds	r25, 0x0373
    2178:	e9 ad       	sts	0x69, r30
    217a:	fa ad       	sts	0x6a, r31
    217c:	8e 17       	cp	r24, r30
    217e:	9f 07       	cpc	r25, r31
    2180:	21 f4       	brne	.+8      	; 0x218a <tune_8ths+0x2b2>
    2182:	80 91 af 02 	lds	r24, 0x02AF
    2186:	81 30       	cpi	r24, 0x01	; 1
    2188:	71 f0       	breq	.+28     	; 0x21a6 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    218a:	f1 e0       	ldi	r31, 0x01	; 1
    218c:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2190:	2d a9       	sts	0x4d, r18
    2192:	3e a9       	sts	0x4e, r19
    2194:	21 50       	subi	r18, 0x01	; 1
    2196:	30 40       	sbci	r19, 0x00	; 0
    2198:	3e ab       	sts	0x5e, r19
    219a:	2d ab       	sts	0x5d, r18
    219c:	4f ef       	ldi	r20, 0xFF	; 255
    219e:	2f 3f       	cpi	r18, 0xFF	; 255
    21a0:	34 07       	cpc	r19, r20
    21a2:	09 f0       	breq	.+2      	; 0x21a6 <tune_8ths+0x2ce>
    21a4:	67 cf       	rjmp	.-306    	; 0x2074 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    21a6:	21 96       	adiw	r28, 0x01	; 1
    21a8:	ae ad       	sts	0x6e, r26
    21aa:	bf ad       	sts	0x6f, r27
    21ac:	21 97       	sbiw	r28, 0x01	; 1
    21ae:	0d 93       	st	X+, r16
    21b0:	1d 93       	st	X+, r17
    21b2:	21 96       	adiw	r28, 0x01	; 1
    21b4:	bf af       	sts	0x7f, r27
    21b6:	ae af       	sts	0x7e, r26
    21b8:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    21ba:	ee e6       	ldi	r30, 0x6E	; 110
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	8d 7f       	andi	r24, 0xFD	; 253
    21c2:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    21c4:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    21c6:	2d ad       	sts	0x6d, r18
    21c8:	3e ad       	sts	0x6e, r19
    21ca:	2f 5f       	subi	r18, 0xFF	; 255
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255
    21ce:	3e af       	sts	0x7e, r19
    21d0:	2d af       	sts	0x7d, r18
    21d2:	4b ad       	sts	0x6b, r20
    21d4:	5c ad       	sts	0x6c, r21
    21d6:	4d 5f       	subi	r20, 0xFD	; 253
    21d8:	5f 4f       	sbci	r21, 0xFF	; 255
    21da:	5c af       	sts	0x7c, r21
    21dc:	4b af       	sts	0x7b, r20
    21de:	20 31       	cpi	r18, 0x10	; 16
    21e0:	31 05       	cpc	r19, r1
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <tune_8ths+0x30e>
    21e4:	26 cf       	rjmp	.-436    	; 0x2032 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		
		PORTF &= ~(1<<GATE); //turn gate off
    21e6:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    21e8:	c0 5c       	subi	r28, 0xC0	; 192
    21ea:	df 4f       	sbci	r29, 0xFF	; 255
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	ff 90       	pop	r15
    2200:	ef 90       	pop	r14
    2202:	df 90       	pop	r13
    2204:	cf 90       	pop	r12
    2206:	bf 90       	pop	r11
    2208:	af 90       	pop	r10
    220a:	9f 90       	pop	r9
    220c:	8f 90       	pop	r8
    220e:	7f 90       	pop	r7
    2210:	6f 90       	pop	r6
    2212:	5f 90       	pop	r5
    2214:	4f 90       	pop	r4
    2216:	3f 90       	pop	r3
    2218:	2f 90       	pop	r2
    221a:	08 95       	ret

0000221c <tune_filter>:
	
void tune_filter(void) {
    221c:	2f 92       	push	r2
    221e:	3f 92       	push	r3
    2220:	4f 92       	push	r4
    2222:	5f 92       	push	r5
    2224:	6f 92       	push	r6
    2226:	7f 92       	push	r7
    2228:	8f 92       	push	r8
    222a:	9f 92       	push	r9
    222c:	af 92       	push	r10
    222e:	bf 92       	push	r11
    2230:	cf 92       	push	r12
    2232:	df 92       	push	r13
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	e9 97       	sbiw	r28, 0x39	; 57
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    2250:	de 01       	movw	r26, r28
    2252:	11 96       	adiw	r26, 0x01	; 1
    2254:	e0 e6       	ldi	r30, 0x60	; 96
    2256:	f2 e0       	ldi	r31, 0x02	; 2
    2258:	8d e2       	ldi	r24, 0x2D	; 45
    225a:	01 90       	ld	r0, Z+
    225c:	0d 92       	st	X+, r0
    225e:	81 50       	subi	r24, 0x01	; 1
    2260:	e1 f7       	brne	.-8      	; 0x225a <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2262:	88 ed       	ldi	r24, 0xD8	; 216
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    226e:	81 ee       	ldi	r24, 0xE1	; 225
    2270:	91 e0       	ldi	r25, 0x01	; 1
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    227a:	82 ee       	ldi	r24, 0xE2	; 226
    227c:	91 e0       	ldi	r25, 0x01	; 1
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2286:	82 eb       	ldi	r24, 0xB2	; 178
    2288:	92 e0       	ldi	r25, 0x02	; 2
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	70 e0       	ldi	r23, 0x00	; 0
    228e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2292:	8a ed       	ldi	r24, 0xDA	; 218
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    229e:	8f ed       	ldi	r24, 0xDF	; 223
    22a0:	91 e0       	ldi	r25, 0x01	; 1
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    22aa:	80 ee       	ldi	r24, 0xE0	; 224
    22ac:	91 e0       	ldi	r25, 0x01	; 1
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    22b6:	81 ed       	ldi	r24, 0xD1	; 209
    22b8:	91 e0       	ldi	r25, 0x01	; 1
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    22c2:	86 ed       	ldi	r24, 0xD6	; 214
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    22ce:	82 ed       	ldi	r24, 0xD2	; 210
    22d0:	91 e0       	ldi	r25, 0x01	; 1
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    22da:	83 ed       	ldi	r24, 0xD3	; 211
    22dc:	91 e0       	ldi	r25, 0x01	; 1
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	70 e0       	ldi	r23, 0x00	; 0
    22e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    22e6:	84 ed       	ldi	r24, 0xD4	; 212
    22e8:	91 e0       	ldi	r25, 0x01	; 1
    22ea:	6f ef       	ldi	r22, 0xFF	; 255
    22ec:	7f e3       	ldi	r23, 0x3F	; 63
    22ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    22f2:	85 ed       	ldi	r24, 0xD5	; 213
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	6f ef       	ldi	r22, 0xFF	; 255
    22f8:	7f e3       	ldi	r23, 0x3F	; 63
    22fa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    22fe:	89 ed       	ldi	r24, 0xD9	; 217
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    230a:	8e ec       	ldi	r24, 0xCE	; 206
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2316:	8c ec       	ldi	r24, 0xCC	; 204
    2318:	91 e0       	ldi	r25, 0x01	; 1
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	70 e0       	ldi	r23, 0x00	; 0
    231e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2322:	8a ec       	ldi	r24, 0xCA	; 202
    2324:	91 e0       	ldi	r25, 0x01	; 1
    2326:	6f ef       	ldi	r22, 0xFF	; 255
    2328:	7f e3       	ldi	r23, 0x3F	; 63
    232a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    232e:	88 ec       	ldi	r24, 0xC8	; 200
    2330:	91 e0       	ldi	r25, 0x01	; 1
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    233a:	80 ed       	ldi	r24, 0xD0	; 208
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	60 e0       	ldi	r22, 0x00	; 0
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2346:	83 ee       	ldi	r24, 0xE3	; 227
    2348:	91 e0       	ldi	r25, 0x01	; 1
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2352:	84 ee       	ldi	r24, 0xE4	; 228
    2354:	91 e0       	ldi	r25, 0x01	; 1
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	70 e0       	ldi	r23, 0x00	; 0
    235a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    235e:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2360:	ed ed       	ldi	r30, 0xDD	; 221
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	80 64       	ori	r24, 0x40	; 64
    2368:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    236a:	80 81       	ld	r24, Z
    236c:	8f 7b       	andi	r24, 0xBF	; 191
    236e:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	80 93 76 03 	sts	0x0376, r24
	PORTF |= (1<<GATE); //turn gate on
    2376:	89 9a       	sbi	0x11, 1	; 17
    2378:	9e 01       	movw	r18, r28
    237a:	2f 5f       	subi	r18, 0xFF	; 255
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	3d ab       	sts	0x5d, r19
    2380:	2c ab       	sts	0x5c, r18
    2382:	8b e0       	ldi	r24, 0x0B	; 11
    2384:	93 e0       	ldi	r25, 0x03	; 3
    2386:	99 af       	sts	0x79, r25
    2388:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    238a:	1f aa       	sts	0x9f, r17
    238c:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    238e:	0f 2e       	mov	r0, r31
    2390:	f4 ed       	ldi	r31, 0xD4	; 212
    2392:	af 2e       	mov	r10, r31
    2394:	f1 e0       	ldi	r31, 0x01	; 1
    2396:	bf 2e       	mov	r11, r31
    2398:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    239a:	0f 2e       	mov	r0, r31
    239c:	f8 ed       	ldi	r31, 0xD8	; 216
    239e:	6f 2e       	mov	r6, r31
    23a0:	f1 e0       	ldi	r31, 0x01	; 1
    23a2:	7f 2e       	mov	r7, r31
    23a4:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    23a6:	0f 2e       	mov	r0, r31
    23a8:	f5 ed       	ldi	r31, 0xD5	; 213
    23aa:	4f 2e       	mov	r4, r31
    23ac:	f1 e0       	ldi	r31, 0x01	; 1
    23ae:	5f 2e       	mov	r5, r31
    23b0:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    23b2:	0f 2e       	mov	r0, r31
    23b4:	fa ec       	ldi	r31, 0xCA	; 202
    23b6:	2f 2e       	mov	r2, r31
    23b8:	f1 e0       	ldi	r31, 0x01	; 1
    23ba:	3f 2e       	mov	r3, r31
    23bc:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    23be:	ac a9       	sts	0x4c, r26
    23c0:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    23c2:	8c 91       	ld	r24, X
    23c4:	80 93 76 03 	sts	0x0376, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    23c8:	84 b5       	in	r24, 0x24	; 36
    23ca:	8f 60       	ori	r24, 0x0F	; 15
    23cc:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    23d2:	ee e6       	ldi	r30, 0x6E	; 110
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	82 60       	ori	r24, 0x02	; 2
    23da:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    23dc:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    23de:	ee a9       	sts	0x4e, r30
    23e0:	ff a9       	sts	0x4f, r31
    23e2:	e2 30       	cpi	r30, 0x02	; 2
    23e4:	f1 05       	cpc	r31, r1
    23e6:	24 f4       	brge	.+8      	; 0x23f0 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	80 93 75 03 	sts	0x0375, r24
    23ee:	03 c0       	rjmp	.+6      	; 0x23f6 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    23f0:	82 e0       	ldi	r24, 0x02	; 2
    23f2:	80 93 75 03 	sts	0x0375, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    23f6:	11 96       	adiw	r26, 0x01	; 1
    23f8:	2d 91       	ld	r18, X+
    23fa:	3c 91       	ld	r19, X
    23fc:	12 97       	sbiw	r26, 0x02	; 2
    23fe:	3b ab       	sts	0x5b, r19
    2400:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2402:	8d e0       	ldi	r24, 0x0D	; 13
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9f a7       	lds	r25, 0x7f
    2408:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    240a:	ee 24       	eor	r14, r14
    240c:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    240e:	0f 2e       	mov	r0, r31
    2410:	f1 ed       	ldi	r31, 0xD1	; 209
    2412:	cf 2e       	mov	r12, r31
    2414:	f1 e0       	ldi	r31, 0x01	; 1
    2416:	df 2e       	mov	r13, r31
    2418:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    241a:	0f 2e       	mov	r0, r31
    241c:	f6 ed       	ldi	r31, 0xD6	; 214
    241e:	8f 2e       	mov	r8, r31
    2420:	f1 e0       	ldi	r31, 0x01	; 1
    2422:	9f 2e       	mov	r9, r31
    2424:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	fc 01       	movw	r30, r24
    242c:	0e a4       	lds	r16, 0xae
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <tune_filter+0x218>
    2430:	ee 0f       	add	r30, r30
    2432:	ff 1f       	adc	r31, r31
    2434:	0a 94       	dec	r0
    2436:	e2 f7       	brpl	.-8      	; 0x2430 <tune_filter+0x214>
    2438:	f9 ab       	sts	0x59, r31
    243a:	e8 ab       	sts	0x58, r30
    243c:	ee 2a       	or	r14, r30
    243e:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2440:	c5 01       	movw	r24, r10
    2442:	b7 01       	movw	r22, r14
    2444:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
    2448:	10 92 74 03 	sts	0x0374, r1
			period_counter = 0;
    244c:	10 92 77 03 	sts	0x0377, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2450:	8f e0       	ldi	r24, 0x0F	; 15
    2452:	28 e1       	ldi	r18, 0x18	; 24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	a8 95       	wdr
    245c:	20 93 60 00 	sts	0x0060, r18
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2466:	80 91 74 03 	lds	r24, 0x0374
    246a:	88 23       	and	r24, r24
    246c:	b1 f5       	brne	.+108    	; 0x24da <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    246e:	02 ed       	ldi	r16, 0xD2	; 210
    2470:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2472:	80 91 76 03 	lds	r24, 0x0376
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	84 5d       	subi	r24, 0xD4	; 212
    247a:	9e 4f       	sbci	r25, 0xFE	; 254
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2482:	c5 01       	movw	r24, r10
    2484:	b7 01       	movw	r22, r14
    2486:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    248a:	c3 01       	movw	r24, r6
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	70 e0       	ldi	r23, 0x00	; 0
    2490:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2494:	c2 01       	movw	r24, r4
    2496:	6f ef       	ldi	r22, 0xFF	; 255
    2498:	7f e3       	ldi	r23, 0x3F	; 63
    249a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    249e:	c1 01       	movw	r24, r2
    24a0:	6f ef       	ldi	r22, 0xFF	; 255
    24a2:	7f e3       	ldi	r23, 0x3F	; 63
    24a4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    24a8:	8e ec       	ldi	r24, 0xCE	; 206
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    24b4:	c6 01       	movw	r24, r12
    24b6:	60 e0       	ldi	r22, 0x00	; 0
    24b8:	70 e0       	ldi	r23, 0x00	; 0
    24ba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    24be:	c4 01       	movw	r24, r8
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    24c8:	c8 01       	movw	r24, r16
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	70 e0       	ldi	r23, 0x00	; 0
    24ce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    24d2:	80 91 74 03 	lds	r24, 0x0374
    24d6:	88 23       	and	r24, r24
    24d8:	61 f2       	breq	.-104    	; 0x2472 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    24da:	88 e1       	ldi	r24, 0x18	; 24
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	80 93 60 00 	sts	0x0060, r24
    24e4:	10 92 60 00 	sts	0x0060, r1
    24e8:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    24ea:	80 91 72 03 	lds	r24, 0x0372
    24ee:	90 91 73 03 	lds	r25, 0x0373
    24f2:	2a a9       	sts	0x4a, r18
    24f4:	3b a9       	sts	0x4b, r19
    24f6:	28 17       	cp	r18, r24
    24f8:	39 07       	cpc	r19, r25
    24fa:	50 f0       	brcs	.+20     	; 0x2510 <tune_filter+0x2f4>
    24fc:	80 91 af 02 	lds	r24, 0x02AF
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	31 f4       	brne	.+12     	; 0x2510 <tune_filter+0x2f4>
    2504:	88 a9       	sts	0x48, r24
    2506:	99 a9       	sts	0x49, r25
    2508:	80 95       	com	r24
    250a:	90 95       	com	r25
    250c:	e8 22       	and	r14, r24
    250e:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2510:	80 91 72 03 	lds	r24, 0x0372
    2514:	90 91 73 03 	lds	r25, 0x0373
    2518:	ea a9       	sts	0x4a, r30
    251a:	fb a9       	sts	0x4b, r31
    251c:	8e 17       	cp	r24, r30
    251e:	9f 07       	cpc	r25, r31
    2520:	21 f4       	brne	.+8      	; 0x252a <tune_filter+0x30e>
    2522:	80 91 af 02 	lds	r24, 0x02AF
    2526:	81 30       	cpi	r24, 0x01	; 1
    2528:	71 f0       	breq	.+28     	; 0x2546 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2530:	2e a5       	lds	r18, 0x6e
    2532:	3f a5       	lds	r19, 0x6f
    2534:	21 50       	subi	r18, 0x01	; 1
    2536:	30 40       	sbci	r19, 0x00	; 0
    2538:	3f a7       	lds	r19, 0x7f
    253a:	2e a7       	lds	r18, 0x7e
    253c:	8f ef       	ldi	r24, 0xFF	; 255
    253e:	2f 3f       	cpi	r18, 0xFF	; 255
    2540:	38 07       	cpc	r19, r24
    2542:	09 f0       	breq	.+2      	; 0x2546 <tune_filter+0x32a>
    2544:	70 cf       	rjmp	.-288    	; 0x2426 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2546:	ee a9       	sts	0x4e, r30
    2548:	ff a9       	sts	0x4f, r31
    254a:	31 96       	adiw	r30, 0x01	; 1
    254c:	ff ab       	sts	0x5f, r31
    254e:	ee ab       	sts	0x5e, r30
    2550:	c7 01       	movw	r24, r14
    2552:	80 96       	adiw	r24, 0x20	; 32
    2554:	e8 ad       	sts	0x68, r30
    2556:	f9 ad       	sts	0x69, r31
    2558:	81 93       	st	Z+, r24
    255a:	91 93       	st	Z+, r25
    255c:	f9 af       	sts	0x79, r31
    255e:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2560:	ee e6       	ldi	r30, 0x6E	; 110
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	8d 7f       	andi	r24, 0xFD	; 253
    2568:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    256a:	14 bc       	out	0x24, r1	; 36
    256c:	2c a9       	sts	0x4c, r18
    256e:	3d a9       	sts	0x4d, r19
    2570:	2d 5f       	subi	r18, 0xFD	; 253
    2572:	3f 4f       	sbci	r19, 0xFF	; 255
    2574:	3d ab       	sts	0x5d, r19
    2576:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2578:	8e a9       	sts	0x4e, r24
    257a:	9f a9       	sts	0x4f, r25
    257c:	8f 30       	cpi	r24, 0x0F	; 15
    257e:	91 05       	cpc	r25, r1
    2580:	09 f0       	breq	.+2      	; 0x2584 <tune_filter+0x368>
    2582:	1d cf       	rjmp	.-454    	; 0x23be <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2584:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2586:	e9 96       	adiw	r28, 0x39	; 57
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	1f 91       	pop	r17
    2598:	0f 91       	pop	r16
    259a:	ff 90       	pop	r15
    259c:	ef 90       	pop	r14
    259e:	df 90       	pop	r13
    25a0:	cf 90       	pop	r12
    25a2:	bf 90       	pop	r11
    25a4:	af 90       	pop	r10
    25a6:	9f 90       	pop	r9
    25a8:	8f 90       	pop	r8
    25aa:	7f 90       	pop	r7
    25ac:	6f 90       	pop	r6
    25ae:	5f 90       	pop	r5
    25b0:	4f 90       	pop	r4
    25b2:	3f 90       	pop	r3
    25b4:	2f 90       	pop	r2
    25b6:	08 95       	ret

000025b8 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    25b8:	89 e0       	ldi	r24, 0x09	; 9
    25ba:	93 e0       	ldi	r25, 0x03	; 3
    25bc:	6c e0       	ldi	r22, 0x0C	; 12
    25be:	76 e0       	ldi	r23, 0x06	; 6
    25c0:	40 e2       	ldi	r20, 0x20	; 32
    25c2:	50 e0       	ldi	r21, 0x00	; 0
    25c4:	0e 94 26 1b 	call	0x364c	; 0x364c <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    25c8:	8b e4       	ldi	r24, 0x4B	; 75
    25ca:	93 e0       	ldi	r25, 0x03	; 3
    25cc:	6e e4       	ldi	r22, 0x4E	; 78
    25ce:	76 e0       	ldi	r23, 0x06	; 6
    25d0:	42 e2       	ldi	r20, 0x22	; 34
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	0e 94 26 1b 	call	0x364c	; 0x364c <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    25d8:	89 e2       	ldi	r24, 0x29	; 41
    25da:	93 e0       	ldi	r25, 0x03	; 3
    25dc:	6c e2       	ldi	r22, 0x2C	; 44
    25de:	76 e0       	ldi	r23, 0x06	; 6
    25e0:	42 e2       	ldi	r20, 0x22	; 34
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	0e 94 26 1b 	call	0x364c	; 0x364c <__eeupd_block_m6450a>
	
	
}
    25e8:	08 95       	ret

000025ea <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    25ea:	82 e7       	ldi	r24, 0x72	; 114
    25ec:	96 e0       	ldi	r25, 0x06	; 6
    25ee:	0e 94 20 1b 	call	0x3640	; 0x3640 <__eerd_word_m6450a>
    25f2:	90 93 70 03 	sts	0x0370, r25
    25f6:	80 93 6f 03 	sts	0x036F, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    25fa:	80 e7       	ldi	r24, 0x70	; 112
    25fc:	96 e0       	ldi	r25, 0x06	; 6
    25fe:	0e 94 20 1b 	call	0x3640	; 0x3640 <__eerd_word_m6450a>
    2602:	90 93 6e 03 	sts	0x036E, r25
    2606:	80 93 6d 03 	sts	0x036D, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    260a:	8b e4       	ldi	r24, 0x4B	; 75
    260c:	93 e0       	ldi	r25, 0x03	; 3
    260e:	6e e4       	ldi	r22, 0x4E	; 78
    2610:	76 e0       	ldi	r23, 0x06	; 6
    2612:	42 e2       	ldi	r20, 0x22	; 34
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	0e 94 10 1b 	call	0x3620	; 0x3620 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    261a:	89 e2       	ldi	r24, 0x29	; 41
    261c:	93 e0       	ldi	r25, 0x03	; 3
    261e:	6c e2       	ldi	r22, 0x2C	; 44
    2620:	76 e0       	ldi	r23, 0x06	; 6
    2622:	42 e2       	ldi	r20, 0x22	; 34
    2624:	50 e0       	ldi	r21, 0x00	; 0
    2626:	0e 94 10 1b 	call	0x3620	; 0x3620 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    262a:	89 e0       	ldi	r24, 0x09	; 9
    262c:	93 e0       	ldi	r25, 0x03	; 3
    262e:	6c e0       	ldi	r22, 0x0C	; 12
    2630:	76 e0       	ldi	r23, 0x06	; 6
    2632:	40 e2       	ldi	r20, 0x20	; 32
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	0e 94 10 1b 	call	0x3620	; 0x3620 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    263a:	08 95       	ret

0000263c <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    263c:	98 2f       	mov	r25, r24
    263e:	96 95       	lsr	r25
    2640:	96 95       	lsr	r25
    2642:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2644:	29 2f       	mov	r18, r25
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	f9 01       	movw	r30, r18
    264a:	31 97       	sbiw	r30, 0x01	; 1
    264c:	ee 0f       	add	r30, r30
    264e:	ff 1f       	adc	r31, r31
    2650:	e6 0f       	add	r30, r22
    2652:	f7 1f       	adc	r31, r23
    2654:	01 90       	ld	r0, Z+
    2656:	f0 81       	ld	r31, Z
    2658:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    265a:	22 0f       	add	r18, r18
    265c:	33 1f       	adc	r19, r19
    265e:	26 0f       	add	r18, r22
    2660:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2662:	d9 01       	movw	r26, r18
    2664:	4d 91       	ld	r20, X+
    2666:	5c 91       	ld	r21, X
    2668:	11 97       	sbiw	r26, 0x01	; 1
    266a:	4e 1b       	sub	r20, r30
    266c:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    266e:	99 0f       	add	r25, r25
    2670:	99 0f       	add	r25, r25
    2672:	99 0f       	add	r25, r25
    2674:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	48 9f       	mul	r20, r24
    267a:	90 01       	movw	r18, r0
    267c:	49 9f       	mul	r20, r25
    267e:	30 0d       	add	r19, r0
    2680:	58 9f       	mul	r21, r24
    2682:	30 0d       	add	r19, r0
    2684:	11 24       	eor	r1, r1
    2686:	36 95       	lsr	r19
    2688:	27 95       	ror	r18
    268a:	36 95       	lsr	r19
    268c:	27 95       	ror	r18
    268e:	36 95       	lsr	r19
    2690:	27 95       	ror	r18
    2692:	e2 0f       	add	r30, r18
    2694:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2696:	8e 2f       	mov	r24, r30
    2698:	9f 2f       	mov	r25, r31
    269a:	08 95       	ret

0000269c <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	a2 97       	sbiw	r28, 0x22	; 34
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    26b0:	de 01       	movw	r26, r28
    26b2:	11 96       	adiw	r26, 0x01	; 1
    26b4:	ed e8       	ldi	r30, 0x8D	; 141
    26b6:	f2 e0       	ldi	r31, 0x02	; 2
    26b8:	82 e2       	ldi	r24, 0x22	; 34
    26ba:	01 90       	ld	r0, Z+
    26bc:	0d 92       	st	X+, r0
    26be:	81 50       	subi	r24, 0x01	; 1
    26c0:	e1 f7       	brne	.-8      	; 0x26ba <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    26c2:	ab e4       	ldi	r26, 0x4B	; 75
    26c4:	b3 e0       	ldi	r27, 0x03	; 3
    26c6:	fe 01       	movw	r30, r28
    26c8:	31 96       	adiw	r30, 0x01	; 1
    26ca:	82 e2       	ldi	r24, 0x22	; 34
    26cc:	01 90       	ld	r0, Z+
    26ce:	0d 92       	st	X+, r0
    26d0:	81 50       	subi	r24, 0x01	; 1
    26d2:	e1 f7       	brne	.-8      	; 0x26cc <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    26d4:	a9 e2       	ldi	r26, 0x29	; 41
    26d6:	b3 e0       	ldi	r27, 0x03	; 3
    26d8:	fe 01       	movw	r30, r28
    26da:	31 96       	adiw	r30, 0x01	; 1
    26dc:	82 e2       	ldi	r24, 0x22	; 34
    26de:	01 90       	ld	r0, Z+
    26e0:	0d 92       	st	X+, r0
    26e2:	81 50       	subi	r24, 0x01	; 1
    26e4:	e1 f7       	brne	.-8      	; 0x26de <set_one_volt_per_octave+0x42>
	
	
    26e6:	a2 96       	adiw	r28, 0x22	; 34
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	08 95       	ret

000026f8 <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    26f8:	9f b1       	in	r25, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    26fa:	89 2f       	mov	r24, r25
    26fc:	8c 70       	andi	r24, 0x0C	; 12
    26fe:	20 91 c1 02 	lds	r18, 0x02C1
    2702:	82 2b       	or	r24, r18
    2704:	80 93 c1 02 	sts	0x02C1, r24
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2708:	80 91 7b 03 	lds	r24, 0x037B
    270c:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    270e:	89 27       	eor	r24, r25
    2710:	80 93 7b 03 	sts	0x037B, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2714:	89 23       	and	r24, r25
    2716:	08 95       	ret

00002718 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2718:	ed ed       	ldi	r30, 0xDD	; 221
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	90 81       	ld	r25, Z
    271e:	9f 7b       	andi	r25, 0xBF	; 191
    2720:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2722:	28 2f       	mov	r18, r24
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	21 70       	andi	r18, 0x01	; 1
    2728:	30 70       	andi	r19, 0x00	; 0
    272a:	22 0f       	add	r18, r18
    272c:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    272e:	68 2f       	mov	r22, r24
    2730:	62 95       	swap	r22
    2732:	66 95       	lsr	r22
    2734:	67 70       	andi	r22, 0x07	; 7
    2736:	67 95       	ror	r22
    2738:	66 27       	eor	r22, r22
    273a:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    273c:	26 2b       	or	r18, r22
    273e:	98 2f       	mov	r25, r24
    2740:	96 95       	lsr	r25
    2742:	96 95       	lsr	r25
    2744:	91 70       	andi	r25, 0x01	; 1
    2746:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2748:	68 2f       	mov	r22, r24
    274a:	66 1f       	adc	r22, r22
    274c:	66 27       	eor	r22, r22
    274e:	66 1f       	adc	r22, r22
    2750:	66 0f       	add	r22, r22
    2752:	66 0f       	add	r22, r22
    2754:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2756:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2758:	a8 2f       	mov	r26, r24
    275a:	a6 95       	lsr	r26
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	a1 70       	andi	r26, 0x01	; 1
    2760:	b0 70       	andi	r27, 0x00	; 0
    2762:	bd 01       	movw	r22, r26
    2764:	66 0f       	add	r22, r22
    2766:	77 1f       	adc	r23, r23
    2768:	66 0f       	add	r22, r22
    276a:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    276c:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    276e:	68 2f       	mov	r22, r24
    2770:	62 95       	swap	r22
    2772:	6f 70       	andi	r22, 0x0F	; 15
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	61 70       	andi	r22, 0x01	; 1
    2778:	70 70       	andi	r23, 0x00	; 0
    277a:	ab 01       	movw	r20, r22
    277c:	00 24       	eor	r0, r0
    277e:	56 95       	lsr	r21
    2780:	47 95       	ror	r20
    2782:	07 94       	ror	r0
    2784:	56 95       	lsr	r21
    2786:	47 95       	ror	r20
    2788:	07 94       	ror	r0
    278a:	54 2f       	mov	r21, r20
    278c:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    278e:	62 2f       	mov	r22, r18
    2790:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2792:	48 2f       	mov	r20, r24
    2794:	42 95       	swap	r20
    2796:	46 95       	lsr	r20
    2798:	46 95       	lsr	r20
    279a:	43 70       	andi	r20, 0x03	; 3
    279c:	50 e0       	ldi	r21, 0x00	; 0
    279e:	41 70       	andi	r20, 0x01	; 1
    27a0:	50 70       	andi	r21, 0x00	; 0
    27a2:	9a 01       	movw	r18, r20
    27a4:	22 0f       	add	r18, r18
    27a6:	33 1f       	adc	r19, r19
    27a8:	22 95       	swap	r18
    27aa:	32 95       	swap	r19
    27ac:	30 7f       	andi	r19, 0xF0	; 240
    27ae:	32 27       	eor	r19, r18
    27b0:	20 7f       	andi	r18, 0xF0	; 240
    27b2:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    27b4:	46 2f       	mov	r20, r22
    27b6:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    27b8:	86 95       	lsr	r24
    27ba:	86 95       	lsr	r24
    27bc:	86 95       	lsr	r24
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	21 70       	andi	r18, 0x01	; 1
    27c4:	30 70       	andi	r19, 0x00	; 0
    27c6:	c9 01       	movw	r24, r18
    27c8:	82 95       	swap	r24
    27ca:	92 95       	swap	r25
    27cc:	90 7f       	andi	r25, 0xF0	; 240
    27ce:	98 27       	eor	r25, r24
    27d0:	80 7f       	andi	r24, 0xF0	; 240
    27d2:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    27d4:	84 2b       	or	r24, r20
    27d6:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    27d8:	80 81       	ld	r24, Z
    27da:	80 64       	ori	r24, 0x40	; 64
    27dc:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    27de:	80 81       	ld	r24, Z
    27e0:	8f 7b       	andi	r24, 0xBF	; 191
    27e2:	80 83       	st	Z, r24
	DATA_BUS = 0;
    27e4:	12 b8       	out	0x02, r1	; 2
	
	
    27e6:	08 95       	ret

000027e8 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    27e8:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    27ea:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    27ec:	74 83       	std	Z+4, r23	; 0x04
    27ee:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    27f0:	11 82       	std	Z+1, r1	; 0x01
    27f2:	10 82       	st	Z, r1
}
    27f4:	08 95       	ret

000027f6 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	ec 01       	movw	r28, r24
    27fe:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2800:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <store_and_clear_interrupt>
    2804:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2806:	39 81       	ldd	r19, Y+1	; 0x01
    2808:	83 2f       	mov	r24, r19
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	6a 81       	ldd	r22, Y+2	; 0x02
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__divmodhi4>
    2816:	48 81       	ld	r20, Y
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	84 17       	cp	r24, r20
    281c:	95 07       	cpc	r25, r21
    281e:	29 f4       	brne	.+10     	; 0x282a <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2820:	82 2f       	mov	r24, r18
    2822:	0e 94 6d 14 	call	0x28da	; 0x28da <restore_interrupt_setting>
      return false;
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	11 c0       	rjmp	.+34     	; 0x284c <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    282a:	eb 81       	ldd	r30, Y+3	; 0x03
    282c:	fc 81       	ldd	r31, Y+4	; 0x04
    282e:	e3 0f       	add	r30, r19
    2830:	f1 1d       	adc	r31, r1
    2832:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	01 96       	adiw	r24, 0x01	; 1
    283a:	6a 81       	ldd	r22, Y+2	; 0x02
    283c:	70 e0       	ldi	r23, 0x00	; 0
    283e:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__divmodhi4>
    2842:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2844:	82 2f       	mov	r24, r18
    2846:	0e 94 6d 14 	call	0x28da	; 0x28da <restore_interrupt_setting>
      return true;
    284a:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    284c:	df 91       	pop	r29
    284e:	cf 91       	pop	r28
    2850:	1f 91       	pop	r17
    2852:	08 95       	ret

00002854 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    285a:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    285e:	29 81       	ldd	r18, Y+1	; 0x01
    2860:	98 81       	ld	r25, Y
    2862:	29 17       	cp	r18, r25
    2864:	18 f0       	brcs	.+6      	; 0x286c <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2866:	c2 2f       	mov	r28, r18
    2868:	c9 1b       	sub	r28, r25
    286a:	03 c0       	rjmp	.+6      	; 0x2872 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    286c:	ca 81       	ldd	r28, Y+2	; 0x02
    286e:	c2 0f       	add	r28, r18
    2870:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2872:	0e 94 6d 14 	call	0x28da	; 0x28da <restore_interrupt_setting>
   return len;
}
    2876:	8c 2f       	mov	r24, r28
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	08 95       	ret

0000287e <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    287e:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2880:	20 81       	ld	r18, Z
    2882:	86 2f       	mov	r24, r22
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	82 0f       	add	r24, r18
    2888:	91 1d       	adc	r25, r1
    288a:	62 81       	ldd	r22, Z+2	; 0x02
    288c:	70 e0       	ldi	r23, 0x00	; 0
    288e:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__divmodhi4>
    2892:	03 80       	ldd	r0, Z+3	; 0x03
    2894:	f4 81       	ldd	r31, Z+4	; 0x04
    2896:	e0 2d       	mov	r30, r0
    2898:	e8 0f       	add	r30, r24
    289a:	f9 1f       	adc	r31, r25
}
    289c:	80 81       	ld	r24, Z
    289e:	08 95       	ret

000028a0 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    28a0:	1f 93       	push	r17
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	ec 01       	movw	r28, r24
    28a8:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    28aa:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <store_and_clear_interrupt>
    28ae:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    28b0:	88 81       	ld	r24, Y
    28b2:	21 2f       	mov	r18, r17
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	28 0f       	add	r18, r24
    28b8:	31 1d       	adc	r19, r1
    28ba:	6a 81       	ldd	r22, Y+2	; 0x02
    28bc:	c9 01       	movw	r24, r18
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__divmodhi4>
    28c4:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    28c6:	84 2f       	mov	r24, r20
    28c8:	0e 94 6d 14 	call	0x28da	; 0x28da <restore_interrupt_setting>
}
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	1f 91       	pop	r17
    28d2:	08 95       	ret

000028d4 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    28d4:	8f b7       	in	r24, 0x3f	; 63
   cli();
    28d6:	f8 94       	cli
   return sreg;
}
    28d8:	08 95       	ret

000028da <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    28da:	8f bf       	out	0x3f, r24	; 63
}
    28dc:	08 95       	ret

000028de <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    28de:	88 1f       	adc	r24, r24
    28e0:	88 27       	eor	r24, r24
    28e2:	88 1f       	adc	r24, r24
    28e4:	08 95       	ret

000028e6 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    28e6:	91 e0       	ldi	r25, 0x01	; 1
    28e8:	88 3f       	cpi	r24, 0xF8	; 248
    28ea:	08 f4       	brcc	.+2      	; 0x28ee <midi_is_realtime+0x8>
    28ec:	90 e0       	ldi	r25, 0x00	; 0
}
    28ee:	89 2f       	mov	r24, r25
    28f0:	08 95       	ret

000028f2 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    28f2:	28 2f       	mov	r18, r24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	20 7f       	andi	r18, 0xF0	; 240
    28f8:	30 70       	andi	r19, 0x00	; 0
    28fa:	20 3c       	cpi	r18, 0xC0	; 192
    28fc:	31 05       	cpc	r19, r1
    28fe:	e9 f1       	breq	.+122    	; 0x297a <midi_packet_length+0x88>
    2900:	21 3c       	cpi	r18, 0xC1	; 193
    2902:	31 05       	cpc	r19, r1
    2904:	8c f4       	brge	.+34     	; 0x2928 <midi_packet_length+0x36>
    2906:	20 39       	cpi	r18, 0x90	; 144
    2908:	31 05       	cpc	r19, r1
    290a:	e1 f0       	breq	.+56     	; 0x2944 <midi_packet_length+0x52>
    290c:	21 39       	cpi	r18, 0x91	; 145
    290e:	31 05       	cpc	r19, r1
    2910:	24 f4       	brge	.+8      	; 0x291a <midi_packet_length+0x28>
    2912:	20 38       	cpi	r18, 0x80	; 128
    2914:	31 05       	cpc	r19, r1
    2916:	79 f5       	brne	.+94     	; 0x2976 <midi_packet_length+0x84>
    2918:	15 c0       	rjmp	.+42     	; 0x2944 <midi_packet_length+0x52>
    291a:	20 3a       	cpi	r18, 0xA0	; 160
    291c:	31 05       	cpc	r19, r1
    291e:	91 f0       	breq	.+36     	; 0x2944 <midi_packet_length+0x52>
    2920:	20 3b       	cpi	r18, 0xB0	; 176
    2922:	31 05       	cpc	r19, r1
    2924:	41 f5       	brne	.+80     	; 0x2976 <midi_packet_length+0x84>
    2926:	0e c0       	rjmp	.+28     	; 0x2944 <midi_packet_length+0x52>
    2928:	20 3e       	cpi	r18, 0xE0	; 224
    292a:	31 05       	cpc	r19, r1
    292c:	59 f0       	breq	.+22     	; 0x2944 <midi_packet_length+0x52>
    292e:	21 3e       	cpi	r18, 0xE1	; 225
    2930:	31 05       	cpc	r19, r1
    2932:	24 f4       	brge	.+8      	; 0x293c <midi_packet_length+0x4a>
    2934:	20 3d       	cpi	r18, 0xD0	; 208
    2936:	31 05       	cpc	r19, r1
    2938:	f1 f4       	brne	.+60     	; 0x2976 <midi_packet_length+0x84>
    293a:	1f c0       	rjmp	.+62     	; 0x297a <midi_packet_length+0x88>
    293c:	20 3f       	cpi	r18, 0xF0	; 240
    293e:	31 05       	cpc	r19, r1
    2940:	d1 f4       	brne	.+52     	; 0x2976 <midi_packet_length+0x84>
    2942:	02 c0       	rjmp	.+4      	; 0x2948 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2944:	83 e0       	ldi	r24, 0x03	; 3
    2946:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2948:	86 3f       	cpi	r24, 0xF6	; 246
    294a:	79 f0       	breq	.+30     	; 0x296a <midi_packet_length+0x78>
    294c:	87 3f       	cpi	r24, 0xF7	; 247
    294e:	38 f4       	brcc	.+14     	; 0x295e <midi_packet_length+0x6c>
    2950:	82 3f       	cpi	r24, 0xF2	; 242
    2952:	a9 f0       	breq	.+42     	; 0x297e <midi_packet_length+0x8c>
    2954:	83 3f       	cpi	r24, 0xF3	; 243
    2956:	59 f0       	breq	.+22     	; 0x296e <midi_packet_length+0x7c>
    2958:	81 3f       	cpi	r24, 0xF1	; 241
    295a:	59 f4       	brne	.+22     	; 0x2972 <midi_packet_length+0x80>
    295c:	08 c0       	rjmp	.+16     	; 0x296e <midi_packet_length+0x7c>
    295e:	88 3f       	cpi	r24, 0xF8	; 248
    2960:	40 f0       	brcs	.+16     	; 0x2972 <midi_packet_length+0x80>
    2962:	8d 3f       	cpi	r24, 0xFD	; 253
    2964:	10 f0       	brcs	.+4      	; 0x296a <midi_packet_length+0x78>
    2966:	8e 3f       	cpi	r24, 0xFE	; 254
    2968:	20 f0       	brcs	.+8      	; 0x2972 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    296e:	82 e0       	ldi	r24, 0x02	; 2
    2970:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    297a:	82 e0       	ldi	r24, 0x02	; 2
    297c:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    297e:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2980:	08 95       	ret

00002982 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2982:	0f 93       	push	r16
    2984:	34 2f       	mov	r19, r20
    2986:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2988:	46 2f       	mov	r20, r22
    298a:	4f 70       	andi	r20, 0x0F	; 15
    298c:	40 6b       	ori	r20, 0xB0	; 176
    298e:	23 2f       	mov	r18, r19
    2990:	2f 77       	andi	r18, 0x7F	; 127
    2992:	0f 77       	andi	r16, 0x7F	; 127
    2994:	dc 01       	movw	r26, r24
    2996:	ed 91       	ld	r30, X+
    2998:	fc 91       	ld	r31, X
    299a:	63 e0       	ldi	r22, 0x03	; 3
    299c:	70 e0       	ldi	r23, 0x00	; 0
    299e:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    29a0:	0f 91       	pop	r16
    29a2:	08 95       	ret

000029a4 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    29a4:	0f 93       	push	r16
    29a6:	34 2f       	mov	r19, r20
    29a8:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    29aa:	46 2f       	mov	r20, r22
    29ac:	4f 70       	andi	r20, 0x0F	; 15
    29ae:	40 69       	ori	r20, 0x90	; 144
    29b0:	23 2f       	mov	r18, r19
    29b2:	2f 77       	andi	r18, 0x7F	; 127
    29b4:	0f 77       	andi	r16, 0x7F	; 127
    29b6:	dc 01       	movw	r26, r24
    29b8:	ed 91       	ld	r30, X+
    29ba:	fc 91       	ld	r31, X
    29bc:	63 e0       	ldi	r22, 0x03	; 3
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    29c2:	0f 91       	pop	r16
    29c4:	08 95       	ret

000029c6 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    29c6:	0f 93       	push	r16
    29c8:	34 2f       	mov	r19, r20
    29ca:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    29cc:	46 2f       	mov	r20, r22
    29ce:	4f 70       	andi	r20, 0x0F	; 15
    29d0:	40 68       	ori	r20, 0x80	; 128
    29d2:	23 2f       	mov	r18, r19
    29d4:	2f 77       	andi	r18, 0x7F	; 127
    29d6:	0f 77       	andi	r16, 0x7F	; 127
    29d8:	dc 01       	movw	r26, r24
    29da:	ed 91       	ld	r30, X+
    29dc:	fc 91       	ld	r31, X
    29de:	63 e0       	ldi	r22, 0x03	; 3
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    29e4:	0f 91       	pop	r16
    29e6:	08 95       	ret

000029e8 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    29e8:	0f 93       	push	r16
    29ea:	34 2f       	mov	r19, r20
    29ec:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    29ee:	46 2f       	mov	r20, r22
    29f0:	4f 70       	andi	r20, 0x0F	; 15
    29f2:	40 6a       	ori	r20, 0xA0	; 160
    29f4:	23 2f       	mov	r18, r19
    29f6:	2f 77       	andi	r18, 0x7F	; 127
    29f8:	0f 77       	andi	r16, 0x7F	; 127
    29fa:	dc 01       	movw	r26, r24
    29fc:	ed 91       	ld	r30, X+
    29fe:	fc 91       	ld	r31, X
    2a00:	63 e0       	ldi	r22, 0x03	; 3
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2a06:	0f 91       	pop	r16
    2a08:	08 95       	ret

00002a0a <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2a0e:	20 e2       	ldi	r18, 0x20	; 32
    2a10:	40 30       	cpi	r20, 0x00	; 0
    2a12:	52 07       	cpc	r21, r18
    2a14:	44 f4       	brge	.+16     	; 0x2a26 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2a16:	a0 ee       	ldi	r26, 0xE0	; 224
    2a18:	40 30       	cpi	r20, 0x00	; 0
    2a1a:	5a 07       	cpc	r21, r26
    2a1c:	3c f0       	brlt	.+14     	; 0x2a2c <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2a1e:	8a 01       	movw	r16, r20
    2a20:	00 50       	subi	r16, 0x00	; 0
    2a22:	10 4e       	sbci	r17, 0xE0	; 224
    2a24:	05 c0       	rjmp	.+10     	; 0x2a30 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2a26:	0f ef       	ldi	r16, 0xFF	; 255
    2a28:	1f e3       	ldi	r17, 0x3F	; 63
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2a2c:	00 e0       	ldi	r16, 0x00	; 0
    2a2e:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2a30:	46 2f       	mov	r20, r22
    2a32:	4f 70       	andi	r20, 0x0F	; 15
    2a34:	40 6e       	ori	r20, 0xE0	; 224
    2a36:	20 2f       	mov	r18, r16
    2a38:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2a3a:	00 0f       	add	r16, r16
    2a3c:	01 2f       	mov	r16, r17
    2a3e:	00 1f       	adc	r16, r16
    2a40:	11 0b       	sbc	r17, r17
    2a42:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2a44:	0f 77       	andi	r16, 0x7F	; 127
    2a46:	dc 01       	movw	r26, r24
    2a48:	ed 91       	ld	r30, X+
    2a4a:	fc 91       	ld	r31, X
    2a4c:	63 e0       	ldi	r22, 0x03	; 3
    2a4e:	70 e0       	ldi	r23, 0x00	; 0
    2a50:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2a52:	1f 91       	pop	r17
    2a54:	0f 91       	pop	r16
    2a56:	08 95       	ret

00002a58 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2a58:	0f 93       	push	r16
    2a5a:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2a5c:	46 2f       	mov	r20, r22
    2a5e:	4f 70       	andi	r20, 0x0F	; 15
    2a60:	40 6c       	ori	r20, 0xC0	; 192
    2a62:	2f 77       	andi	r18, 0x7F	; 127
    2a64:	dc 01       	movw	r26, r24
    2a66:	ed 91       	ld	r30, X+
    2a68:	fc 91       	ld	r31, X
    2a6a:	62 e0       	ldi	r22, 0x02	; 2
    2a6c:	70 e0       	ldi	r23, 0x00	; 0
    2a6e:	00 e0       	ldi	r16, 0x00	; 0
    2a70:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2a72:	0f 91       	pop	r16
    2a74:	08 95       	ret

00002a76 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2a76:	0f 93       	push	r16
    2a78:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2a7a:	46 2f       	mov	r20, r22
    2a7c:	4f 70       	andi	r20, 0x0F	; 15
    2a7e:	40 6d       	ori	r20, 0xD0	; 208
    2a80:	2f 77       	andi	r18, 0x7F	; 127
    2a82:	dc 01       	movw	r26, r24
    2a84:	ed 91       	ld	r30, X+
    2a86:	fc 91       	ld	r31, X
    2a88:	62 e0       	ldi	r22, 0x02	; 2
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	00 e0       	ldi	r16, 0x00	; 0
    2a8e:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2a90:	0f 91       	pop	r16
    2a92:	08 95       	ret

00002a94 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2a94:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2a96:	dc 01       	movw	r26, r24
    2a98:	ed 91       	ld	r30, X+
    2a9a:	fc 91       	ld	r31, X
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	48 ef       	ldi	r20, 0xF8	; 248
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	00 e0       	ldi	r16, 0x00	; 0
    2aa6:	09 95       	icall
}
    2aa8:	0f 91       	pop	r16
    2aaa:	08 95       	ret

00002aac <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    2aac:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2aae:	dc 01       	movw	r26, r24
    2ab0:	ed 91       	ld	r30, X+
    2ab2:	fc 91       	ld	r31, X
    2ab4:	61 e0       	ldi	r22, 0x01	; 1
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	49 ef       	ldi	r20, 0xF9	; 249
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	00 e0       	ldi	r16, 0x00	; 0
    2abe:	09 95       	icall
}
    2ac0:	0f 91       	pop	r16
    2ac2:	08 95       	ret

00002ac4 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2ac4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	ed 91       	ld	r30, X+
    2aca:	fc 91       	ld	r31, X
    2acc:	61 e0       	ldi	r22, 0x01	; 1
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	4a ef       	ldi	r20, 0xFA	; 250
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	00 e0       	ldi	r16, 0x00	; 0
    2ad6:	09 95       	icall
}
    2ad8:	0f 91       	pop	r16
    2ada:	08 95       	ret

00002adc <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    2adc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    2ade:	dc 01       	movw	r26, r24
    2ae0:	ed 91       	ld	r30, X+
    2ae2:	fc 91       	ld	r31, X
    2ae4:	61 e0       	ldi	r22, 0x01	; 1
    2ae6:	70 e0       	ldi	r23, 0x00	; 0
    2ae8:	4b ef       	ldi	r20, 0xFB	; 251
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	00 e0       	ldi	r16, 0x00	; 0
    2aee:	09 95       	icall
}
    2af0:	0f 91       	pop	r16
    2af2:	08 95       	ret

00002af4 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    2af4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    2af6:	dc 01       	movw	r26, r24
    2af8:	ed 91       	ld	r30, X+
    2afa:	fc 91       	ld	r31, X
    2afc:	61 e0       	ldi	r22, 0x01	; 1
    2afe:	70 e0       	ldi	r23, 0x00	; 0
    2b00:	4c ef       	ldi	r20, 0xFC	; 252
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	00 e0       	ldi	r16, 0x00	; 0
    2b06:	09 95       	icall
}
    2b08:	0f 91       	pop	r16
    2b0a:	08 95       	ret

00002b0c <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    2b0c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    2b0e:	dc 01       	movw	r26, r24
    2b10:	ed 91       	ld	r30, X+
    2b12:	fc 91       	ld	r31, X
    2b14:	61 e0       	ldi	r22, 0x01	; 1
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	4e ef       	ldi	r20, 0xFE	; 254
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	00 e0       	ldi	r16, 0x00	; 0
    2b1e:	09 95       	icall
}
    2b20:	0f 91       	pop	r16
    2b22:	08 95       	ret

00002b24 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2b24:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2b26:	dc 01       	movw	r26, r24
    2b28:	ed 91       	ld	r30, X+
    2b2a:	fc 91       	ld	r31, X
    2b2c:	61 e0       	ldi	r22, 0x01	; 1
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	4f ef       	ldi	r20, 0xFF	; 255
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	00 e0       	ldi	r16, 0x00	; 0
    2b36:	09 95       	icall
}
    2b38:	0f 91       	pop	r16
    2b3a:	08 95       	ret

00002b3c <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    2b3c:	0f 93       	push	r16
   device->send_func(device, 2,
    2b3e:	26 2f       	mov	r18, r22
    2b40:	2f 77       	andi	r18, 0x7F	; 127
    2b42:	dc 01       	movw	r26, r24
    2b44:	ed 91       	ld	r30, X+
    2b46:	fc 91       	ld	r31, X
    2b48:	62 e0       	ldi	r22, 0x02	; 2
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	41 ef       	ldi	r20, 0xF1	; 241
    2b4e:	00 e0       	ldi	r16, 0x00	; 0
    2b50:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2b52:	0f 91       	pop	r16
    2b54:	08 95       	ret

00002b56 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2b56:	0f 93       	push	r16
    2b58:	1f 93       	push	r17
   device->send_func(device, 3,
    2b5a:	26 2f       	mov	r18, r22
    2b5c:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2b5e:	8b 01       	movw	r16, r22
    2b60:	00 0f       	add	r16, r16
    2b62:	01 2f       	mov	r16, r17
    2b64:	00 1f       	adc	r16, r16
    2b66:	11 0b       	sbc	r17, r17
    2b68:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2b6a:	0f 77       	andi	r16, 0x7F	; 127
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	ed 91       	ld	r30, X+
    2b70:	fc 91       	ld	r31, X
    2b72:	63 e0       	ldi	r22, 0x03	; 3
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	42 ef       	ldi	r20, 0xF2	; 242
    2b78:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	08 95       	ret

00002b80 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2b80:	0f 93       	push	r16
   device->send_func(device, 2,
    2b82:	26 2f       	mov	r18, r22
    2b84:	2f 77       	andi	r18, 0x7F	; 127
    2b86:	dc 01       	movw	r26, r24
    2b88:	ed 91       	ld	r30, X+
    2b8a:	fc 91       	ld	r31, X
    2b8c:	62 e0       	ldi	r22, 0x02	; 2
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	43 ef       	ldi	r20, 0xF3	; 243
    2b92:	00 e0       	ldi	r16, 0x00	; 0
    2b94:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2b96:	0f 91       	pop	r16
    2b98:	08 95       	ret

00002b9a <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2b9a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	ed 91       	ld	r30, X+
    2ba0:	fc 91       	ld	r31, X
    2ba2:	61 e0       	ldi	r22, 0x01	; 1
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	46 ef       	ldi	r20, 0xF6	; 246
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	00 e0       	ldi	r16, 0x00	; 0
    2bac:	09 95       	icall
}
    2bae:	0f 91       	pop	r16
    2bb0:	08 95       	ret

00002bb2 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2bb2:	0f 93       	push	r16
    2bb4:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	ed 91       	ld	r30, X+
    2bba:	fc 91       	ld	r31, X
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	00 e0       	ldi	r16, 0x00	; 0
    2bc4:	09 95       	icall
}
    2bc6:	0f 91       	pop	r16
    2bc8:	08 95       	ret

00002bca <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    2bca:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    2bcc:	dc 01       	movw	r26, r24
    2bce:	ed 91       	ld	r30, X+
    2bd0:	fc 91       	ld	r31, X
    2bd2:	09 95       	icall
}
    2bd4:	0f 91       	pop	r16
    2bd6:	08 95       	ret

00002bd8 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2bd8:	6f 92       	push	r6
    2bda:	7f 92       	push	r7
    2bdc:	8f 92       	push	r8
    2bde:	9f 92       	push	r9
    2be0:	af 92       	push	r10
    2be2:	bf 92       	push	r11
    2be4:	cf 92       	push	r12
    2be6:	df 92       	push	r13
    2be8:	ef 92       	push	r14
    2bea:	ff 92       	push	r15
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <midi_send_array+0x1e>
    2bf6:	0f 92       	push	r0
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	4c 01       	movw	r8, r24
    2bfe:	6b 01       	movw	r12, r22
    2c00:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2c02:	61 15       	cp	r22, r1
    2c04:	71 05       	cpc	r23, r1
    2c06:	41 f1       	breq	.+80     	; 0x2c58 <midi_send_array+0x80>
    2c08:	ee 24       	eor	r14, r14
    2c0a:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2c0c:	0f 2e       	mov	r0, r31
    2c0e:	f3 e0       	ldi	r31, 0x03	; 3
    2c10:	6f 2e       	mov	r6, r31
    2c12:	77 24       	eor	r7, r7
    2c14:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2c16:	19 82       	std	Y+1, r1	; 0x01
    2c18:	1a 82       	std	Y+2, r1	; 0x02
    2c1a:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2c1c:	86 01       	movw	r16, r12
    2c1e:	0e 19       	sub	r16, r14
    2c20:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2c22:	04 30       	cpi	r16, 0x04	; 4
    2c24:	11 05       	cpc	r17, r1
    2c26:	08 f0       	brcs	.+2      	; 0x2c2a <midi_send_array+0x52>
    2c28:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2c2a:	b5 01       	movw	r22, r10
    2c2c:	6e 0d       	add	r22, r14
    2c2e:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2c30:	ce 01       	movw	r24, r28
    2c32:	01 96       	adiw	r24, 0x01	; 1
    2c34:	40 2f       	mov	r20, r16
    2c36:	51 2f       	mov	r21, r17
    2c38:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2c3c:	c4 01       	movw	r24, r8
    2c3e:	b8 01       	movw	r22, r16
    2c40:	49 81       	ldd	r20, Y+1	; 0x01
    2c42:	2a 81       	ldd	r18, Y+2	; 0x02
    2c44:	0b 81       	ldd	r16, Y+3	; 0x03
    2c46:	0e 94 e5 15 	call	0x2bca	; 0x2bca <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2c4a:	83 e0       	ldi	r24, 0x03	; 3
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	e8 0e       	add	r14, r24
    2c50:	f9 1e       	adc	r15, r25
    2c52:	ec 14       	cp	r14, r12
    2c54:	fd 04       	cpc	r15, r13
    2c56:	f8 f2       	brcs	.-66     	; 0x2c16 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	1f 91       	pop	r17
    2c64:	0f 91       	pop	r16
    2c66:	ff 90       	pop	r15
    2c68:	ef 90       	pop	r14
    2c6a:	df 90       	pop	r13
    2c6c:	cf 90       	pop	r12
    2c6e:	bf 90       	pop	r11
    2c70:	af 90       	pop	r10
    2c72:	9f 90       	pop	r9
    2c74:	8f 90       	pop	r8
    2c76:	7f 90       	pop	r7
    2c78:	6f 90       	pop	r6
    2c7a:	08 95       	ret

00002c7c <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	73 83       	std	Z+3, r23	; 0x03
    2c80:	62 83       	std	Z+2, r22	; 0x02
}
    2c82:	08 95       	ret

00002c84 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2c84:	fc 01       	movw	r30, r24
    2c86:	75 83       	std	Z+5, r23	; 0x05
    2c88:	64 83       	std	Z+4, r22	; 0x04
}
    2c8a:	08 95       	ret

00002c8c <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	77 83       	std	Z+7, r23	; 0x07
    2c90:	66 83       	std	Z+6, r22	; 0x06
}
    2c92:	08 95       	ret

00002c94 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2c94:	fc 01       	movw	r30, r24
    2c96:	71 87       	std	Z+9, r23	; 0x09
    2c98:	60 87       	std	Z+8, r22	; 0x08
}
    2c9a:	08 95       	ret

00002c9c <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	73 87       	std	Z+11, r23	; 0x0b
    2ca0:	62 87       	std	Z+10, r22	; 0x0a
}
    2ca2:	08 95       	ret

00002ca4 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	75 87       	std	Z+13, r23	; 0x0d
    2ca8:	64 87       	std	Z+12, r22	; 0x0c
}
    2caa:	08 95       	ret

00002cac <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    2cac:	fc 01       	movw	r30, r24
    2cae:	77 87       	std	Z+15, r23	; 0x0f
    2cb0:	66 87       	std	Z+14, r22	; 0x0e
}
    2cb2:	08 95       	ret

00002cb4 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	71 8b       	std	Z+17, r23	; 0x11
    2cb8:	60 8b       	std	Z+16, r22	; 0x10
}
    2cba:	08 95       	ret

00002cbc <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	73 8b       	std	Z+19, r23	; 0x13
    2cc0:	62 8b       	std	Z+18, r22	; 0x12
}
    2cc2:	08 95       	ret

00002cc4 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	75 8b       	std	Z+21, r23	; 0x15
    2cc8:	64 8b       	std	Z+20, r22	; 0x14
}
    2cca:	08 95       	ret

00002ccc <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    2ccc:	fc 01       	movw	r30, r24
    2cce:	77 8b       	std	Z+23, r23	; 0x17
    2cd0:	66 8b       	std	Z+22, r22	; 0x16
}
    2cd2:	08 95       	ret

00002cd4 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	71 8f       	std	Z+25, r23	; 0x19
    2cd8:	60 8f       	std	Z+24, r22	; 0x18
}
    2cda:	08 95       	ret

00002cdc <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    2cdc:	fc 01       	movw	r30, r24
    2cde:	73 8f       	std	Z+27, r23	; 0x1b
    2ce0:	62 8f       	std	Z+26, r22	; 0x1a
}
    2ce2:	08 95       	ret

00002ce4 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	75 8f       	std	Z+29, r23	; 0x1d
    2ce8:	64 8f       	std	Z+28, r22	; 0x1c
}
    2cea:	08 95       	ret

00002cec <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    2cec:	fc 01       	movw	r30, r24
    2cee:	77 8f       	std	Z+31, r23	; 0x1f
    2cf0:	66 8f       	std	Z+30, r22	; 0x1e
}
    2cf2:	08 95       	ret

00002cf4 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2cf4:	cf 93       	push	r28
    2cf6:	df 93       	push	r29
    2cf8:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    2cfa:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    2cfc:	1f a2       	lds	r17, 0x9f
    2cfe:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2d00:	bc 01       	movw	r22, r24
    2d02:	68 5d       	subi	r22, 0xD8	; 216
    2d04:	7f 4f       	sbci	r23, 0xFF	; 255
    2d06:	88 51       	subi	r24, 0x18	; 24
    2d08:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0a:	40 ec       	ldi	r20, 0xC0	; 192
    2d0c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2d10:	1b 82       	std	Y+3, r1	; 0x03
    2d12:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2d14:	1d 82       	std	Y+5, r1	; 0x05
    2d16:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2d18:	1f 82       	std	Y+7, r1	; 0x07
    2d1a:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    2d1c:	19 86       	std	Y+9, r1	; 0x09
    2d1e:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2d20:	1b 86       	std	Y+11, r1	; 0x0b
    2d22:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2d24:	1d 86       	std	Y+13, r1	; 0x0d
    2d26:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2d28:	1f 86       	std	Y+15, r1	; 0x0f
    2d2a:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    2d2c:	19 8a       	std	Y+17, r1	; 0x11
    2d2e:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2d30:	1b 8a       	std	Y+19, r1	; 0x13
    2d32:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2d34:	1d 8a       	std	Y+21, r1	; 0x15
    2d36:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2d38:	1f 8a       	std	Y+23, r1	; 0x17
    2d3a:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    2d3c:	19 8e       	std	Y+25, r1	; 0x19
    2d3e:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2d40:	1b 8e       	std	Y+27, r1	; 0x1b
    2d42:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2d44:	1d 8e       	std	Y+29, r1	; 0x1d
    2d46:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2d48:	1f 8e       	std	Y+31, r1	; 0x1f
    2d4a:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    2d4c:	19 a2       	lds	r17, 0x99
    2d4e:	18 a2       	lds	r17, 0x98
}
    2d50:	df 91       	pop	r29
    2d52:	cf 91       	pop	r28
    2d54:	08 95       	ret

00002d56 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2d56:	ef 92       	push	r14
    2d58:	ff 92       	push	r15
    2d5a:	0f 93       	push	r16
    2d5c:	1f 93       	push	r17
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2d64:	66 23       	and	r22, r22
    2d66:	99 f0       	breq	.+38     	; 0x2d8e <midi_device_input+0x38>
    2d68:	04 2f       	mov	r16, r20
    2d6a:	15 2f       	mov	r17, r21
    2d6c:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    2d6e:	0f 2e       	mov	r0, r31
    2d70:	f8 ee       	ldi	r31, 0xE8	; 232
    2d72:	ef 2e       	mov	r14, r31
    2d74:	ff 24       	eor	r15, r15
    2d76:	f0 2d       	mov	r31, r0
    2d78:	e8 0e       	add	r14, r24
    2d7a:	f9 1e       	adc	r15, r25
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	61 91       	ld	r22, Z+
    2d80:	8f 01       	movw	r16, r30
    2d82:	c7 01       	movw	r24, r14
    2d84:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2d88:	cf 5f       	subi	r28, 0xFF	; 255
    2d8a:	cd 17       	cp	r28, r29
    2d8c:	b9 f7       	brne	.-18     	; 0x2d7c <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	1f 91       	pop	r17
    2d94:	0f 91       	pop	r16
    2d96:	ff 90       	pop	r15
    2d98:	ef 90       	pop	r14
    2d9a:	08 95       	ret

00002d9c <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	71 83       	std	Z+1, r23	; 0x01
    2da0:	60 83       	st	Z, r22
}
    2da2:	08 95       	ret

00002da4 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    2da4:	fc 01       	movw	r30, r24
    2da6:	71 a3       	lds	r23, 0x51
    2da8:	60 a3       	lds	r22, 0x50
}
    2daa:	08 95       	ret

00002dac <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    2dac:	af 92       	push	r10
    2dae:	bf 92       	push	r11
    2db0:	cf 92       	push	r12
    2db2:	df 92       	push	r13
    2db4:	ef 92       	push	r14
    2db6:	ff 92       	push	r15
    2db8:	0f 93       	push	r16
    2dba:	1f 93       	push	r17
    2dbc:	cf 93       	push	r28
    2dbe:	df 93       	push	r29
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <midi_input_callbacks+0x16>
    2dc2:	0f 92       	push	r0
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	6c 01       	movw	r12, r24
    2dca:	5b 01       	movw	r10, r22
    2dcc:	f4 2e       	mov	r15, r20
    2dce:	e2 2e       	mov	r14, r18
    2dd0:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	95 96       	adiw	r26, 0x25	; 37
    2dd6:	8c 91       	ld	r24, X
    2dd8:	95 97       	sbiw	r26, 0x25	; 37
    2dda:	84 30       	cpi	r24, 0x04	; 4
    2ddc:	e9 f4       	brne	.+58     	; 0x2e18 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    2dde:	5a 96       	adiw	r26, 0x1a	; 26
    2de0:	ed 91       	ld	r30, X+
    2de2:	fc 91       	ld	r31, X
    2de4:	5b 97       	sbiw	r26, 0x1b	; 27
    2de6:	30 97       	sbiw	r30, 0x00	; 0
    2de8:	09 f4       	brne	.+2      	; 0x2dec <midi_input_callbacks+0x40>
    2dea:	ee c0       	rjmp	.+476    	; 0x2fc8 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    2dec:	cb 01       	movw	r24, r22
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	63 e0       	ldi	r22, 0x03	; 3
    2df2:	70 e0       	ldi	r23, 0x00	; 0
    2df4:	0e 94 ce 1a 	call	0x359c	; 0x359c <__udivmodhi4>
    2df8:	cb 01       	movw	r24, r22
    2dfa:	88 0f       	add	r24, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	68 0f       	add	r22, r24
    2e00:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2e02:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2e04:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    2e06:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2e08:	4a 2d       	mov	r20, r10
    2e0a:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    2e0c:	c6 01       	movw	r24, r12
    2e0e:	9e 01       	movw	r18, r28
    2e10:	2f 5f       	subi	r18, 0xFF	; 255
    2e12:	3f 4f       	sbci	r19, 0xFF	; 255
    2e14:	09 95       	icall
    2e16:	c8 c0       	rjmp	.+400    	; 0x2fa8 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    2e18:	62 30       	cpi	r22, 0x02	; 2
    2e1a:	71 05       	cpc	r23, r1
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <midi_input_callbacks+0x74>
    2e1e:	5f c0       	rjmp	.+190    	; 0x2ede <midi_input_callbacks+0x132>
    2e20:	63 30       	cpi	r22, 0x03	; 3
    2e22:	71 05       	cpc	r23, r1
    2e24:	29 f0       	breq	.+10     	; 0x2e30 <midi_input_callbacks+0x84>
    2e26:	61 30       	cpi	r22, 0x01	; 1
    2e28:	71 05       	cpc	r23, r1
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <midi_input_callbacks+0x82>
    2e2c:	b3 c0       	rjmp	.+358    	; 0x2f94 <midi_input_callbacks+0x1e8>
    2e2e:	99 c0       	rjmp	.+306    	; 0x2f62 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2e30:	84 2f       	mov	r24, r20
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	80 7f       	andi	r24, 0xF0	; 240
    2e36:	90 70       	andi	r25, 0x00	; 0
    2e38:	80 3a       	cpi	r24, 0xA0	; 160
    2e3a:	91 05       	cpc	r25, r1
    2e3c:	29 f1       	breq	.+74     	; 0x2e88 <midi_input_callbacks+0xdc>
    2e3e:	81 3a       	cpi	r24, 0xA1	; 161
    2e40:	91 05       	cpc	r25, r1
    2e42:	3c f4       	brge	.+14     	; 0x2e52 <midi_input_callbacks+0xa6>
    2e44:	80 38       	cpi	r24, 0x80	; 128
    2e46:	91 05       	cpc	r25, r1
    2e48:	c9 f0       	breq	.+50     	; 0x2e7c <midi_input_callbacks+0xd0>
    2e4a:	80 39       	cpi	r24, 0x90	; 144
    2e4c:	91 05       	cpc	r25, r1
    2e4e:	91 f5       	brne	.+100    	; 0x2eb4 <midi_input_callbacks+0x108>
    2e50:	0f c0       	rjmp	.+30     	; 0x2e70 <midi_input_callbacks+0xc4>
    2e52:	80 3e       	cpi	r24, 0xE0	; 224
    2e54:	91 05       	cpc	r25, r1
    2e56:	f1 f0       	breq	.+60     	; 0x2e94 <midi_input_callbacks+0xe8>
    2e58:	80 3f       	cpi	r24, 0xF0	; 240
    2e5a:	91 05       	cpc	r25, r1
    2e5c:	09 f1       	breq	.+66     	; 0x2ea0 <midi_input_callbacks+0xf4>
    2e5e:	80 3b       	cpi	r24, 0xB0	; 176
    2e60:	91 05       	cpc	r25, r1
    2e62:	41 f5       	brne	.+80     	; 0x2eb4 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2e64:	d6 01       	movw	r26, r12
    2e66:	12 96       	adiw	r26, 0x02	; 2
    2e68:	ed 91       	ld	r30, X+
    2e6a:	fc 91       	ld	r31, X
    2e6c:	13 97       	sbiw	r26, 0x03	; 3
              break;
    2e6e:	24 c0       	rjmp	.+72     	; 0x2eb8 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    2e70:	d6 01       	movw	r26, r12
    2e72:	14 96       	adiw	r26, 0x04	; 4
    2e74:	ed 91       	ld	r30, X+
    2e76:	fc 91       	ld	r31, X
    2e78:	15 97       	sbiw	r26, 0x05	; 5
              break;
    2e7a:	1e c0       	rjmp	.+60     	; 0x2eb8 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    2e7c:	d6 01       	movw	r26, r12
    2e7e:	16 96       	adiw	r26, 0x06	; 6
    2e80:	ed 91       	ld	r30, X+
    2e82:	fc 91       	ld	r31, X
    2e84:	17 97       	sbiw	r26, 0x07	; 7
              break;
    2e86:	18 c0       	rjmp	.+48     	; 0x2eb8 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    2e88:	d6 01       	movw	r26, r12
    2e8a:	18 96       	adiw	r26, 0x08	; 8
    2e8c:	ed 91       	ld	r30, X+
    2e8e:	fc 91       	ld	r31, X
    2e90:	19 97       	sbiw	r26, 0x09	; 9
              break;
    2e92:	12 c0       	rjmp	.+36     	; 0x2eb8 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    2e94:	d6 01       	movw	r26, r12
    2e96:	1a 96       	adiw	r26, 0x0a	; 10
    2e98:	ed 91       	ld	r30, X+
    2e9a:	fc 91       	ld	r31, X
    2e9c:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    2e9e:	0c c0       	rjmp	.+24     	; 0x2eb8 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    2ea0:	b2 ef       	ldi	r27, 0xF2	; 242
    2ea2:	4b 17       	cp	r20, r27
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <midi_input_callbacks+0xfc>
    2ea6:	90 c0       	rjmp	.+288    	; 0x2fc8 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    2ea8:	d6 01       	movw	r26, r12
    2eaa:	1c 96       	adiw	r26, 0x0c	; 12
    2eac:	ed 91       	ld	r30, X+
    2eae:	fc 91       	ld	r31, X
    2eb0:	1d 97       	sbiw	r26, 0x0d	; 13
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    2eb4:	e0 e0       	ldi	r30, 0x00	; 0
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    2eb8:	30 97       	sbiw	r30, 0x00	; 0
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <midi_input_callbacks+0x112>
    2ebc:	85 c0       	rjmp	.+266    	; 0x2fc8 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    2ebe:	b2 ef       	ldi	r27, 0xF2	; 242
    2ec0:	fb 16       	cp	r15, r27
    2ec2:	31 f4       	brne	.+12     	; 0x2ed0 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    2ec4:	c6 01       	movw	r24, r12
    2ec6:	62 ef       	ldi	r22, 0xF2	; 242
    2ec8:	4e 2d       	mov	r20, r14
    2eca:	21 2f       	mov	r18, r17
    2ecc:	09 95       	icall
    2ece:	6c c0       	rjmp	.+216    	; 0x2fa8 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    2ed0:	6f 2d       	mov	r22, r15
    2ed2:	6f 70       	andi	r22, 0x0F	; 15
    2ed4:	c6 01       	movw	r24, r12
    2ed6:	4e 2d       	mov	r20, r14
    2ed8:	21 2f       	mov	r18, r17
    2eda:	09 95       	icall
    2edc:	65 c0       	rjmp	.+202    	; 0x2fa8 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2ede:	84 2f       	mov	r24, r20
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	80 7f       	andi	r24, 0xF0	; 240
    2ee4:	90 70       	andi	r25, 0x00	; 0
    2ee6:	80 3d       	cpi	r24, 0xD0	; 208
    2ee8:	91 05       	cpc	r25, r1
    2eea:	61 f0       	breq	.+24     	; 0x2f04 <midi_input_callbacks+0x158>
    2eec:	80 3f       	cpi	r24, 0xF0	; 240
    2eee:	91 05       	cpc	r25, r1
    2ef0:	79 f0       	breq	.+30     	; 0x2f10 <midi_input_callbacks+0x164>
    2ef2:	80 3c       	cpi	r24, 0xC0	; 192
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	f9 f4       	brne	.+62     	; 0x2f36 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    2ef8:	d6 01       	movw	r26, r12
    2efa:	1e 96       	adiw	r26, 0x0e	; 14
    2efc:	ed 91       	ld	r30, X+
    2efe:	fc 91       	ld	r31, X
    2f00:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2f02:	1b c0       	rjmp	.+54     	; 0x2f3a <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2f04:	d6 01       	movw	r26, r12
    2f06:	50 96       	adiw	r26, 0x10	; 16
    2f08:	ed 91       	ld	r30, X+
    2f0a:	fc 91       	ld	r31, X
    2f0c:	51 97       	sbiw	r26, 0x11	; 17
              break;
    2f0e:	15 c0       	rjmp	.+42     	; 0x2f3a <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2f10:	b3 ef       	ldi	r27, 0xF3	; 243
    2f12:	4b 17       	cp	r20, r27
    2f14:	31 f4       	brne	.+12     	; 0x2f22 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    2f16:	d6 01       	movw	r26, r12
    2f18:	52 96       	adiw	r26, 0x12	; 18
    2f1a:	ed 91       	ld	r30, X+
    2f1c:	fc 91       	ld	r31, X
    2f1e:	53 97       	sbiw	r26, 0x13	; 19
    2f20:	0c c0       	rjmp	.+24     	; 0x2f3a <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2f22:	b1 ef       	ldi	r27, 0xF1	; 241
    2f24:	4b 17       	cp	r20, r27
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <midi_input_callbacks+0x17e>
    2f28:	4f c0       	rjmp	.+158    	; 0x2fc8 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    2f2a:	d6 01       	movw	r26, r12
    2f2c:	54 96       	adiw	r26, 0x14	; 20
    2f2e:	ed 91       	ld	r30, X+
    2f30:	fc 91       	ld	r31, X
    2f32:	55 97       	sbiw	r26, 0x15	; 21
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    2f36:	e0 e0       	ldi	r30, 0x00	; 0
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    2f3a:	30 97       	sbiw	r30, 0x00	; 0
    2f3c:	09 f4       	brne	.+2      	; 0x2f40 <midi_input_callbacks+0x194>
    2f3e:	44 c0       	rjmp	.+136    	; 0x2fc8 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2f40:	b3 ef       	ldi	r27, 0xF3	; 243
    2f42:	fb 16       	cp	r15, r27
    2f44:	19 f0       	breq	.+6      	; 0x2f4c <midi_input_callbacks+0x1a0>
    2f46:	81 ef       	ldi	r24, 0xF1	; 241
    2f48:	f8 16       	cp	r15, r24
    2f4a:	29 f4       	brne	.+10     	; 0x2f56 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    2f4c:	c6 01       	movw	r24, r12
    2f4e:	6f 2d       	mov	r22, r15
    2f50:	4e 2d       	mov	r20, r14
    2f52:	09 95       	icall
    2f54:	29 c0       	rjmp	.+82     	; 0x2fa8 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    2f56:	6f 2d       	mov	r22, r15
    2f58:	6f 70       	andi	r22, 0x0F	; 15
    2f5a:	c6 01       	movw	r24, r12
    2f5c:	4e 2d       	mov	r20, r14
    2f5e:	09 95       	icall
    2f60:	23 c0       	rjmp	.+70     	; 0x2fa8 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2f62:	84 2f       	mov	r24, r20
    2f64:	0e 94 73 14 	call	0x28e6	; 0x28e6 <midi_is_realtime>
    2f68:	88 23       	and	r24, r24
    2f6a:	31 f0       	breq	.+12     	; 0x2f78 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    2f6c:	d6 01       	movw	r26, r12
    2f6e:	56 96       	adiw	r26, 0x16	; 22
    2f70:	ed 91       	ld	r30, X+
    2f72:	fc 91       	ld	r31, X
    2f74:	57 97       	sbiw	r26, 0x17	; 23
    2f76:	08 c0       	rjmp	.+16     	; 0x2f88 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    2f78:	b6 ef       	ldi	r27, 0xF6	; 246
    2f7a:	fb 16       	cp	r15, r27
    2f7c:	29 f5       	brne	.+74     	; 0x2fc8 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    2f7e:	d6 01       	movw	r26, r12
    2f80:	58 96       	adiw	r26, 0x18	; 24
    2f82:	ed 91       	ld	r30, X+
    2f84:	fc 91       	ld	r31, X
    2f86:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    2f88:	30 97       	sbiw	r30, 0x00	; 0
    2f8a:	f1 f0       	breq	.+60     	; 0x2fc8 <midi_input_callbacks+0x21c>
            func(device, byte0);
    2f8c:	c6 01       	movw	r24, r12
    2f8e:	6f 2d       	mov	r22, r15
    2f90:	09 95       	icall
    2f92:	0a c0       	rjmp	.+20     	; 0x2fa8 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    2f94:	64 30       	cpi	r22, 0x04	; 4
    2f96:	71 05       	cpc	r23, r1
    2f98:	a8 f4       	brcc	.+42     	; 0x2fc4 <midi_input_callbacks+0x218>
    2f9a:	16 c0       	rjmp	.+44     	; 0x2fc8 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    2f9c:	c6 01       	movw	r24, r12
    2f9e:	b5 01       	movw	r22, r10
    2fa0:	4f 2d       	mov	r20, r15
    2fa2:	2e 2d       	mov	r18, r14
    2fa4:	01 2f       	mov	r16, r17
    2fa6:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    2fa8:	d6 01       	movw	r26, r12
    2faa:	5e 96       	adiw	r26, 0x1e	; 30
    2fac:	ed 91       	ld	r30, X+
    2fae:	fc 91       	ld	r31, X
    2fb0:	5f 97       	sbiw	r26, 0x1f	; 31
    2fb2:	30 97       	sbiw	r30, 0x00	; 0
    2fb4:	89 f0       	breq	.+34     	; 0x2fd8 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    2fb6:	c6 01       	movw	r24, r12
    2fb8:	b5 01       	movw	r22, r10
    2fba:	4f 2d       	mov	r20, r15
    2fbc:	2e 2d       	mov	r18, r14
    2fbe:	01 2f       	mov	r16, r17
    2fc0:	09 95       	icall
    2fc2:	0a c0       	rjmp	.+20     	; 0x2fd8 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    2fc4:	aa 24       	eor	r10, r10
    2fc6:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    2fc8:	d6 01       	movw	r26, r12
    2fca:	5c 96       	adiw	r26, 0x1c	; 28
    2fcc:	ed 91       	ld	r30, X+
    2fce:	fc 91       	ld	r31, X
    2fd0:	5d 97       	sbiw	r26, 0x1d	; 29
    2fd2:	30 97       	sbiw	r30, 0x00	; 0
    2fd4:	19 f7       	brne	.-58     	; 0x2f9c <midi_input_callbacks+0x1f0>
    2fd6:	e8 cf       	rjmp	.-48     	; 0x2fa8 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	ff 90       	pop	r15
    2fe8:	ef 90       	pop	r14
    2fea:	df 90       	pop	r13
    2fec:	cf 90       	pop	r12
    2fee:	bf 90       	pop	r11
    2ff0:	af 90       	pop	r10
    2ff2:	08 95       	ret

00002ff4 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    2ff4:	ef 92       	push	r14
    2ff6:	ff 92       	push	r15
    2ff8:	0f 93       	push	r16
    2ffa:	cf 93       	push	r28
    2ffc:	df 93       	push	r29
    2ffe:	7c 01       	movw	r14, r24
    3000:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    3002:	86 2f       	mov	r24, r22
    3004:	0e 94 73 14 	call	0x28e6	; 0x28e6 <midi_is_realtime>
    3008:	88 23       	and	r24, r24
    300a:	91 f0       	breq	.+36     	; 0x3030 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    300c:	d7 01       	movw	r26, r14
    300e:	95 96       	adiw	r26, 0x25	; 37
    3010:	dc 91       	ld	r29, X
    3012:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	95 96       	adiw	r26, 0x25	; 37
    3018:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    301a:	c7 01       	movw	r24, r14
    301c:	61 e0       	ldi	r22, 0x01	; 1
    301e:	70 e0       	ldi	r23, 0x00	; 0
    3020:	4c 2f       	mov	r20, r28
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	00 e0       	ldi	r16, 0x00	; 0
    3026:	0e 94 d6 16 	call	0x2dac	; 0x2dac <midi_input_callbacks>
    device->input_state = state;
    302a:	f7 01       	movw	r30, r14
    302c:	d5 a3       	lds	r29, 0x55
    302e:	b7 c0       	rjmp	.+366    	; 0x319e <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    3030:	8c 2f       	mov	r24, r28
    3032:	0e 94 6f 14 	call	0x28de	; 0x28de <midi_is_statusbyte>
    3036:	88 23       	and	r24, r24
    3038:	09 f4       	brne	.+2      	; 0x303c <midi_process_byte+0x48>
    303a:	73 c0       	rjmp	.+230    	; 0x3122 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    303c:	d7 01       	movw	r26, r14
    303e:	95 96       	adiw	r26, 0x25	; 37
    3040:	8c 91       	ld	r24, X
    3042:	95 97       	sbiw	r26, 0x25	; 37
    3044:	84 30       	cpi	r24, 0x04	; 4
    3046:	49 f0       	breq	.+18     	; 0x305a <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    3048:	92 96       	adiw	r26, 0x22	; 34
    304a:	cc 93       	st	X, r28
    304c:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	97 96       	adiw	r26, 0x27	; 39
    3054:	9c 93       	st	X, r25
    3056:	8e 93       	st	-X, r24
    3058:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    305a:	8c 2f       	mov	r24, r28
    305c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <midi_packet_length>
    3060:	81 30       	cpi	r24, 0x01	; 1
    3062:	41 f0       	breq	.+16     	; 0x3074 <midi_process_byte+0x80>
    3064:	81 30       	cpi	r24, 0x01	; 1
    3066:	00 f1       	brcs	.+64     	; 0x30a8 <midi_process_byte+0xb4>
    3068:	82 30       	cpi	r24, 0x02	; 2
    306a:	a1 f0       	breq	.+40     	; 0x3094 <midi_process_byte+0xa0>
    306c:	83 30       	cpi	r24, 0x03	; 3
    306e:	09 f0       	breq	.+2      	; 0x3072 <midi_process_byte+0x7e>
    3070:	4f c0       	rjmp	.+158    	; 0x3110 <midi_process_byte+0x11c>
    3072:	14 c0       	rjmp	.+40     	; 0x309c <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	f7 01       	movw	r30, r14
    3078:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    307a:	c7 01       	movw	r24, r14
    307c:	61 e0       	ldi	r22, 0x01	; 1
    307e:	70 e0       	ldi	r23, 0x00	; 0
    3080:	4c 2f       	mov	r20, r28
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	00 e0       	ldi	r16, 0x00	; 0
    3086:	0e 94 d6 16 	call	0x2dac	; 0x2dac <midi_input_callbacks>
        device->input_state = IDLE;
    308a:	d7 01       	movw	r26, r14
    308c:	95 96       	adiw	r26, 0x25	; 37
    308e:	1c 92       	st	X, r1
    3090:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3092:	85 c0       	rjmp	.+266    	; 0x319e <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    3094:	82 e0       	ldi	r24, 0x02	; 2
    3096:	f7 01       	movw	r30, r14
    3098:	85 a3       	lds	r24, 0x55
        break;
    309a:	81 c0       	rjmp	.+258    	; 0x319e <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    309c:	83 e0       	ldi	r24, 0x03	; 3
    309e:	d7 01       	movw	r26, r14
    30a0:	95 96       	adiw	r26, 0x25	; 37
    30a2:	8c 93       	st	X, r24
    30a4:	95 97       	sbiw	r26, 0x25	; 37
        break;
    30a6:	7b c0       	rjmp	.+246    	; 0x319e <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    30a8:	c0 3f       	cpi	r28, 0xF0	; 240
    30aa:	19 f0       	breq	.+6      	; 0x30b2 <midi_process_byte+0xbe>
    30ac:	c7 3f       	cpi	r28, 0xF7	; 247
    30ae:	59 f5       	brne	.+86     	; 0x3106 <midi_process_byte+0x112>
    30b0:	0a c0       	rjmp	.+20     	; 0x30c6 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    30b2:	84 e0       	ldi	r24, 0x04	; 4
    30b4:	f7 01       	movw	r30, r14
    30b6:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    30b8:	80 ef       	ldi	r24, 0xF0	; 240
    30ba:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	97 a3       	lds	r25, 0x57
    30c2:	86 a3       	lds	r24, 0x56
            break;
    30c4:	6c c0       	rjmp	.+216    	; 0x319e <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    30c6:	d7 01       	movw	r26, r14
    30c8:	96 96       	adiw	r26, 0x26	; 38
    30ca:	2d 91       	ld	r18, X+
    30cc:	3c 91       	ld	r19, X
    30ce:	97 97       	sbiw	r26, 0x27	; 39
    30d0:	c9 01       	movw	r24, r18
    30d2:	63 e0       	ldi	r22, 0x03	; 3
    30d4:	70 e0       	ldi	r23, 0x00	; 0
    30d6:	0e 94 ce 1a 	call	0x359c	; 0x359c <__udivmodhi4>
    30da:	f7 01       	movw	r30, r14
    30dc:	e8 0f       	add	r30, r24
    30de:	f9 1f       	adc	r31, r25
    30e0:	87 ef       	ldi	r24, 0xF7	; 247
    30e2:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    30e4:	b9 01       	movw	r22, r18
    30e6:	6f 5f       	subi	r22, 0xFF	; 255
    30e8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ea:	f7 01       	movw	r30, r14
    30ec:	77 a3       	lds	r23, 0x57
    30ee:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    30f0:	c7 01       	movw	r24, r14
    30f2:	42 a1       	lds	r20, 0x42
    30f4:	23 a1       	lds	r18, 0x43
    30f6:	04 a1       	lds	r16, 0x44
    30f8:	0e 94 d6 16 	call	0x2dac	; 0x2dac <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    30fc:	d7 01       	movw	r26, r14
    30fe:	95 96       	adiw	r26, 0x25	; 37
    3100:	1c 92       	st	X, r1
    3102:	95 97       	sbiw	r26, 0x25	; 37
            break;
    3104:	4c c0       	rjmp	.+152    	; 0x319e <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    3106:	f7 01       	movw	r30, r14
    3108:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    310a:	17 a2       	lds	r17, 0x97
    310c:	16 a2       	lds	r17, 0x96
    310e:	47 c0       	rjmp	.+142    	; 0x319e <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    3110:	d7 01       	movw	r26, r14
    3112:	95 96       	adiw	r26, 0x25	; 37
    3114:	1c 92       	st	X, r1
    3116:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    3118:	97 96       	adiw	r26, 0x27	; 39
    311a:	1c 92       	st	X, r1
    311c:	1e 92       	st	-X, r1
    311e:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3120:	3e c0       	rjmp	.+124    	; 0x319e <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    3122:	f7 01       	movw	r30, r14
    3124:	25 a1       	lds	r18, 0x45
    3126:	22 23       	and	r18, r18
    3128:	d1 f1       	breq	.+116    	; 0x319e <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    312a:	06 a0       	lds	r16, 0x86
    312c:	f7 a1       	lds	r31, 0x47
    312e:	e0 2d       	mov	r30, r0
    3130:	cf 01       	movw	r24, r30
    3132:	63 e0       	ldi	r22, 0x03	; 3
    3134:	70 e0       	ldi	r23, 0x00	; 0
    3136:	0e 94 ce 1a 	call	0x359c	; 0x359c <__udivmodhi4>
    313a:	ac 01       	movw	r20, r24
    313c:	8e 0d       	add	r24, r14
    313e:	9f 1d       	adc	r25, r15
    3140:	dc 01       	movw	r26, r24
    3142:	92 96       	adiw	r26, 0x22	; 34
    3144:	cc 93       	st	X, r28
    3146:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    3148:	bf 01       	movw	r22, r30
    314a:	6f 5f       	subi	r22, 0xFF	; 255
    314c:	7f 4f       	sbci	r23, 0xFF	; 255
    314e:	f7 01       	movw	r30, r14
    3150:	77 a3       	lds	r23, 0x57
    3152:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    3154:	41 30       	cpi	r20, 0x01	; 1
    3156:	51 05       	cpc	r21, r1
    3158:	91 f0       	breq	.+36     	; 0x317e <midi_process_byte+0x18a>
    315a:	42 30       	cpi	r20, 0x02	; 2
    315c:	51 05       	cpc	r21, r1
    315e:	f9 f4       	brne	.+62     	; 0x319e <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    3160:	c7 01       	movw	r24, r14
    3162:	42 a1       	lds	r20, 0x42
    3164:	23 a1       	lds	r18, 0x43
    3166:	04 a1       	lds	r16, 0x44
    3168:	0e 94 d6 16 	call	0x2dac	; 0x2dac <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    316c:	f7 01       	movw	r30, r14
    316e:	85 a1       	lds	r24, 0x45
    3170:	84 30       	cpi	r24, 0x04	; 4
    3172:	a9 f0       	breq	.+42     	; 0x319e <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	97 a3       	lds	r25, 0x57
    317a:	86 a3       	lds	r24, 0x56
    317c:	10 c0       	rjmp	.+32     	; 0x319e <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    317e:	22 30       	cpi	r18, 0x02	; 2
    3180:	71 f4       	brne	.+28     	; 0x319e <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3182:	c7 01       	movw	r24, r14
    3184:	42 a1       	lds	r20, 0x42
    3186:	23 a1       	lds	r18, 0x43
    3188:	00 e0       	ldi	r16, 0x00	; 0
    318a:	0e 94 d6 16 	call	0x2dac	; 0x2dac <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    318e:	f7 01       	movw	r30, r14
    3190:	85 a1       	lds	r24, 0x45
    3192:	84 30       	cpi	r24, 0x04	; 4
    3194:	21 f0       	breq	.+8      	; 0x319e <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	97 a3       	lds	r25, 0x57
    319c:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	0f 91       	pop	r16
    31a4:	ff 90       	pop	r15
    31a6:	ef 90       	pop	r14
    31a8:	08 95       	ret

000031aa <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    31aa:	cf 92       	push	r12
    31ac:	df 92       	push	r13
    31ae:	ef 92       	push	r14
    31b0:	ff 92       	push	r15
    31b2:	0f 93       	push	r16
    31b4:	1f 93       	push	r17
    31b6:	cf 93       	push	r28
    31b8:	df 93       	push	r29
    31ba:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    31bc:	dc 01       	movw	r26, r24
    31be:	90 96       	adiw	r26, 0x20	; 32
    31c0:	ed 91       	ld	r30, X+
    31c2:	fc 91       	ld	r31, X
    31c4:	91 97       	sbiw	r26, 0x21	; 33
    31c6:	30 97       	sbiw	r30, 0x00	; 0
    31c8:	09 f0       	breq	.+2      	; 0x31cc <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    31ca:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    31cc:	0f 2e       	mov	r0, r31
    31ce:	f8 ee       	ldi	r31, 0xE8	; 232
    31d0:	ef 2e       	mov	r14, r31
    31d2:	ff 24       	eor	r15, r15
    31d4:	f0 2d       	mov	r31, r0
    31d6:	ec 0c       	add	r14, r12
    31d8:	fd 1c       	adc	r15, r13
    31da:	c7 01       	movw	r24, r14
    31dc:	0e 94 2a 14 	call	0x2854	; 0x2854 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    31e0:	c8 2f       	mov	r28, r24
    31e2:	d0 e0       	ldi	r29, 0x00	; 0
    31e4:	20 97       	sbiw	r28, 0x00	; 0
    31e6:	99 f0       	breq	.+38     	; 0x320e <midi_device_process+0x64>
    31e8:	00 e0       	ldi	r16, 0x00	; 0
    31ea:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    31ec:	c7 01       	movw	r24, r14
    31ee:	60 e0       	ldi	r22, 0x00	; 0
    31f0:	0e 94 3f 14 	call	0x287e	; 0x287e <bytequeue_get>
    31f4:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    31f6:	c6 01       	movw	r24, r12
    31f8:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    31fc:	c7 01       	movw	r24, r14
    31fe:	61 e0       	ldi	r22, 0x01	; 1
    3200:	0e 94 50 14 	call	0x28a0	; 0x28a0 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3204:	0f 5f       	subi	r16, 0xFF	; 255
    3206:	1f 4f       	sbci	r17, 0xFF	; 255
    3208:	0c 17       	cp	r16, r28
    320a:	1d 07       	cpc	r17, r29
    320c:	78 f3       	brcs	.-34     	; 0x31ec <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	1f 91       	pop	r17
    3214:	0f 91       	pop	r16
    3216:	ff 90       	pop	r15
    3218:	ef 90       	pop	r14
    321a:	df 90       	pop	r13
    321c:	cf 90       	pop	r12
    321e:	08 95       	ret

00003220 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3220:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    3222:	67 e0       	ldi	r22, 0x07	; 7
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	0e 94 ce 1a 	call	0x359c	; 0x359c <__udivmodhi4>
    322a:	48 2f       	mov	r20, r24
   if (remainder)
    322c:	88 23       	and	r24, r24
    322e:	81 f0       	breq	.+32     	; 0x3250 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    3230:	c9 01       	movw	r24, r18
    3232:	67 e0       	ldi	r22, 0x07	; 7
    3234:	70 e0       	ldi	r23, 0x00	; 0
    3236:	0e 94 ce 1a 	call	0x359c	; 0x359c <__udivmodhi4>
    323a:	cb 01       	movw	r24, r22
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	88 0f       	add	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	01 96       	adiw	r24, 0x01	; 1
    324a:	84 0f       	add	r24, r20
    324c:	91 1d       	adc	r25, r1
    324e:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3250:	c9 01       	movw	r24, r18
    3252:	67 e0       	ldi	r22, 0x07	; 7
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	0e 94 ce 1a 	call	0x359c	; 0x359c <__udivmodhi4>
    325a:	cb 01       	movw	r24, r22
    325c:	88 0f       	add	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	88 0f       	add	r24, r24
    3262:	99 1f       	adc	r25, r25
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
}
    3268:	08 95       	ret

0000326a <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    326a:	48 2f       	mov	r20, r24
    326c:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    326e:	a1 f0       	breq	.+40     	; 0x3298 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3270:	9c 01       	movw	r18, r24
    3272:	36 95       	lsr	r19
    3274:	27 95       	ror	r18
    3276:	36 95       	lsr	r19
    3278:	27 95       	ror	r18
    327a:	36 95       	lsr	r19
    327c:	27 95       	ror	r18
    327e:	c9 01       	movw	r24, r18
    3280:	88 0f       	add	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	88 0f       	add	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	88 0f       	add	r24, r24
    328a:	99 1f       	adc	r25, r25
    328c:	82 1b       	sub	r24, r18
    328e:	93 0b       	sbc	r25, r19
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	84 0f       	add	r24, r20
    3294:	91 1d       	adc	r25, r1
    3296:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    3298:	9c 01       	movw	r18, r24
    329a:	36 95       	lsr	r19
    329c:	27 95       	ror	r18
    329e:	36 95       	lsr	r19
    32a0:	27 95       	ror	r18
    32a2:	36 95       	lsr	r19
    32a4:	27 95       	ror	r18
    32a6:	c9 01       	movw	r24, r18
    32a8:	88 0f       	add	r24, r24
    32aa:	99 1f       	adc	r25, r25
    32ac:	88 0f       	add	r24, r24
    32ae:	99 1f       	adc	r25, r25
    32b0:	88 0f       	add	r24, r24
    32b2:	99 1f       	adc	r25, r25
    32b4:	82 1b       	sub	r24, r18
    32b6:	93 0b       	sbc	r25, r19
}
    32b8:	08 95       	ret

000032ba <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    32ba:	2f 92       	push	r2
    32bc:	3f 92       	push	r3
    32be:	4f 92       	push	r4
    32c0:	5f 92       	push	r5
    32c2:	6f 92       	push	r6
    32c4:	7f 92       	push	r7
    32c6:	8f 92       	push	r8
    32c8:	9f 92       	push	r9
    32ca:	af 92       	push	r10
    32cc:	bf 92       	push	r11
    32ce:	cf 92       	push	r12
    32d0:	df 92       	push	r13
    32d2:	ef 92       	push	r14
    32d4:	ff 92       	push	r15
    32d6:	0f 93       	push	r16
    32d8:	1f 93       	push	r17
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	00 d0       	rcall	.+0      	; 0x32e0 <sysex_encode+0x26>
    32e0:	00 d0       	rcall	.+0      	; 0x32e2 <sysex_encode+0x28>
    32e2:	00 d0       	rcall	.+0      	; 0x32e4 <sysex_encode+0x2a>
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
    32e8:	1c 01       	movw	r2, r24
    32ea:	7a 83       	std	Y+2, r23	; 0x02
    32ec:	69 83       	std	Y+1, r22	; 0x01
    32ee:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    32f0:	ca 01       	movw	r24, r20
    32f2:	67 e0       	ldi	r22, 0x07	; 7
    32f4:	70 e0       	ldi	r23, 0x00	; 0
    32f6:	0e 94 ce 1a 	call	0x359c	; 0x359c <__udivmodhi4>
    32fa:	2b 01       	movw	r4, r22
    32fc:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    32fe:	61 15       	cp	r22, r1
    3300:	71 05       	cpc	r23, r1
    3302:	b1 f1       	breq	.+108    	; 0x3370 <sysex_encode+0xb6>
    3304:	81 01       	movw	r16, r2
    3306:	e9 80       	ldd	r14, Y+1	; 0x01
    3308:	fa 80       	ldd	r15, Y+2	; 0x02
    330a:	cc 24       	eor	r12, r12
    330c:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    330e:	88 24       	eor	r8, r8
    3310:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3312:	1e 83       	std	Y+6, r17	; 0x06
    3314:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    3316:	f8 01       	movw	r30, r16
    3318:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    331a:	fc 82       	std	Y+4, r15	; 0x04
    331c:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    331e:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3320:	ab 81       	ldd	r26, Y+3	; 0x03
    3322:	bc 81       	ldd	r27, Y+4	; 0x04
    3324:	2d 91       	ld	r18, X+
    3326:	bc 83       	std	Y+4, r27	; 0x04
    3328:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    332a:	4f 5f       	subi	r20, 0xFF	; 255
    332c:	5f 4f       	sbci	r21, 0xFF	; 255
    332e:	82 2f       	mov	r24, r18
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	80 78       	andi	r24, 0x80	; 128
    3334:	90 70       	andi	r25, 0x00	; 0
    3336:	bc 01       	movw	r22, r24
    3338:	04 2e       	mov	r0, r20
    333a:	02 c0       	rjmp	.+4      	; 0x3340 <sysex_encode+0x86>
    333c:	75 95       	asr	r23
    333e:	67 95       	ror	r22
    3340:	0a 94       	dec	r0
    3342:	e2 f7       	brpl	.-8      	; 0x333c <sysex_encode+0x82>
    3344:	ad 81       	ldd	r26, Y+5	; 0x05
    3346:	be 81       	ldd	r27, Y+6	; 0x06
    3348:	8c 91       	ld	r24, X
    334a:	86 2b       	or	r24, r22
    334c:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    334e:	2f 77       	andi	r18, 0x7F	; 127
    3350:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3352:	47 30       	cpi	r20, 0x07	; 7
    3354:	51 05       	cpc	r21, r1
    3356:	21 f7       	brne	.-56     	; 0x3320 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3358:	08 94       	sec
    335a:	c1 1c       	adc	r12, r1
    335c:	d1 1c       	adc	r13, r1
    335e:	08 5f       	subi	r16, 0xF8	; 248
    3360:	1f 4f       	sbci	r17, 0xFF	; 255
    3362:	e7 e0       	ldi	r30, 0x07	; 7
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	ee 0e       	add	r14, r30
    3368:	ff 1e       	adc	r15, r31
    336a:	ca 14       	cp	r12, r10
    336c:	db 04       	cpc	r13, r11
    336e:	89 f6       	brne	.-94     	; 0x3312 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3370:	c3 01       	movw	r24, r6
    3372:	67 e0       	ldi	r22, 0x07	; 7
    3374:	70 e0       	ldi	r23, 0x00	; 0
    3376:	0e 94 ce 1a 	call	0x359c	; 0x359c <__udivmodhi4>
   if (remainder) {
    337a:	88 23       	and	r24, r24
    337c:	d9 f1       	breq	.+118    	; 0x33f4 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    337e:	82 01       	movw	r16, r4
    3380:	00 0f       	add	r16, r16
    3382:	11 1f       	adc	r17, r17
    3384:	00 0f       	add	r16, r16
    3386:	11 1f       	adc	r17, r17
    3388:	00 0f       	add	r16, r16
    338a:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    338c:	78 01       	movw	r14, r16
    338e:	e4 18       	sub	r14, r4
    3390:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3392:	d1 01       	movw	r26, r2
    3394:	a0 0f       	add	r26, r16
    3396:	b1 1f       	adc	r27, r17
    3398:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    339a:	68 2f       	mov	r22, r24
    339c:	70 e0       	ldi	r23, 0x00	; 0
    339e:	61 15       	cp	r22, r1
    33a0:	71 05       	cpc	r23, r1
    33a2:	19 f1       	breq	.+70     	; 0x33ea <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    33a4:	e9 81       	ldd	r30, Y+1	; 0x01
    33a6:	fa 81       	ldd	r31, Y+2	; 0x02
    33a8:	ee 0e       	add	r14, r30
    33aa:	ff 1e       	adc	r15, r31
    33ac:	c8 01       	movw	r24, r16
    33ae:	01 96       	adiw	r24, 0x01	; 1
    33b0:	28 0e       	add	r2, r24
    33b2:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    33b8:	f7 01       	movw	r30, r14
    33ba:	41 91       	ld	r20, Z+
    33bc:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    33be:	2f 5f       	subi	r18, 0xFF	; 255
    33c0:	3f 4f       	sbci	r19, 0xFF	; 255
    33c2:	84 2f       	mov	r24, r20
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	80 78       	andi	r24, 0x80	; 128
    33c8:	90 70       	andi	r25, 0x00	; 0
    33ca:	02 2e       	mov	r0, r18
    33cc:	02 c0       	rjmp	.+4      	; 0x33d2 <sysex_encode+0x118>
    33ce:	95 95       	asr	r25
    33d0:	87 95       	ror	r24
    33d2:	0a 94       	dec	r0
    33d4:	e2 f7       	brpl	.-8      	; 0x33ce <sysex_encode+0x114>
    33d6:	9c 91       	ld	r25, X
    33d8:	89 2b       	or	r24, r25
    33da:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    33dc:	4f 77       	andi	r20, 0x7F	; 127
    33de:	f1 01       	movw	r30, r2
    33e0:	41 93       	st	Z+, r20
    33e2:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    33e4:	26 17       	cp	r18, r22
    33e6:	37 07       	cpc	r19, r23
    33e8:	38 f3       	brcs	.-50     	; 0x33b8 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    33ea:	c8 01       	movw	r24, r16
    33ec:	01 96       	adiw	r24, 0x01	; 1
    33ee:	86 0f       	add	r24, r22
    33f0:	97 1f       	adc	r25, r23
    33f2:	07 c0       	rjmp	.+14     	; 0x3402 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    33f4:	c2 01       	movw	r24, r4
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	88 0f       	add	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	88 0f       	add	r24, r24
    3400:	99 1f       	adc	r25, r25
   }
}
    3402:	26 96       	adiw	r28, 0x06	; 6
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	ff 90       	pop	r15
    3418:	ef 90       	pop	r14
    341a:	df 90       	pop	r13
    341c:	cf 90       	pop	r12
    341e:	bf 90       	pop	r11
    3420:	af 90       	pop	r10
    3422:	9f 90       	pop	r9
    3424:	8f 90       	pop	r8
    3426:	7f 90       	pop	r7
    3428:	6f 90       	pop	r6
    342a:	5f 90       	pop	r5
    342c:	4f 90       	pop	r4
    342e:	3f 90       	pop	r3
    3430:	2f 90       	pop	r2
    3432:	08 95       	ret

00003434 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3434:	6f 92       	push	r6
    3436:	7f 92       	push	r7
    3438:	8f 92       	push	r8
    343a:	9f 92       	push	r9
    343c:	af 92       	push	r10
    343e:	bf 92       	push	r11
    3440:	cf 92       	push	r12
    3442:	df 92       	push	r13
    3444:	ef 92       	push	r14
    3446:	ff 92       	push	r15
    3448:	0f 93       	push	r16
    344a:	1f 93       	push	r17
    344c:	cf 93       	push	r28
    344e:	df 93       	push	r29
    3450:	3c 01       	movw	r6, r24
    3452:	4b 01       	movw	r8, r22
    3454:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3456:	42 30       	cpi	r20, 0x02	; 2
    3458:	51 05       	cpc	r21, r1
    345a:	08 f4       	brcc	.+2      	; 0x345e <sysex_decode+0x2a>
    345c:	6f c0       	rjmp	.+222    	; 0x353c <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    345e:	7a 01       	movw	r14, r20
    3460:	f6 94       	lsr	r15
    3462:	e7 94       	ror	r14
    3464:	f6 94       	lsr	r15
    3466:	e7 94       	ror	r14
    3468:	f6 94       	lsr	r15
    346a:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    346c:	e1 14       	cp	r14, r1
    346e:	f1 04       	cpc	r15, r1
    3470:	29 f1       	breq	.+74     	; 0x34bc <sysex_decode+0x88>
    3472:	eb 01       	movw	r28, r22
    3474:	b3 01       	movw	r22, r6
    3476:	00 e0       	ldi	r16, 0x00	; 0
    3478:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    347a:	cc 24       	eor	r12, r12
    347c:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    347e:	de 01       	movw	r26, r28
    3480:	11 96       	adiw	r26, 0x01	; 1
    3482:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3484:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3486:	2d 91       	ld	r18, X+
    3488:	2f 77       	andi	r18, 0x7F	; 127
    348a:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    348c:	4f 5f       	subi	r20, 0xFF	; 255
    348e:	5f 4f       	sbci	r21, 0xFF	; 255
    3490:	88 81       	ld	r24, Y
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	04 2e       	mov	r0, r20
    3496:	02 c0       	rjmp	.+4      	; 0x349c <sysex_decode+0x68>
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	0a 94       	dec	r0
    349e:	e2 f7       	brpl	.-8      	; 0x3498 <sysex_decode+0x64>
    34a0:	80 78       	andi	r24, 0x80	; 128
    34a2:	28 2b       	or	r18, r24
    34a4:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    34a6:	47 30       	cpi	r20, 0x07	; 7
    34a8:	51 05       	cpc	r21, r1
    34aa:	69 f7       	brne	.-38     	; 0x3486 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    34ac:	0f 5f       	subi	r16, 0xFF	; 255
    34ae:	1f 4f       	sbci	r17, 0xFF	; 255
    34b0:	28 96       	adiw	r28, 0x08	; 8
    34b2:	69 5f       	subi	r22, 0xF9	; 249
    34b4:	7f 4f       	sbci	r23, 0xFF	; 255
    34b6:	0e 15       	cp	r16, r14
    34b8:	1f 05       	cpc	r17, r15
    34ba:	09 f7       	brne	.-62     	; 0x347e <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    34bc:	5a 2d       	mov	r21, r10
    34be:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    34c0:	99 f1       	breq	.+102    	; 0x3528 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    34c2:	e7 01       	movw	r28, r14
    34c4:	cc 0f       	add	r28, r28
    34c6:	dd 1f       	adc	r29, r29
    34c8:	cc 0f       	add	r28, r28
    34ca:	dd 1f       	adc	r29, r29
    34cc:	cc 0f       	add	r28, r28
    34ce:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    34d0:	8e 01       	movw	r16, r28
    34d2:	0e 19       	sub	r16, r14
    34d4:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    34d6:	65 2f       	mov	r22, r21
    34d8:	70 e0       	ldi	r23, 0x00	; 0
    34da:	61 50       	subi	r22, 0x01	; 1
    34dc:	70 40       	sbci	r23, 0x00	; 0
    34de:	f9 f0       	breq	.+62     	; 0x351e <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    34e0:	ce 01       	movw	r24, r28
    34e2:	01 96       	adiw	r24, 0x01	; 1
    34e4:	d4 01       	movw	r26, r8
    34e6:	a8 0f       	add	r26, r24
    34e8:	b9 1f       	adc	r27, r25
    34ea:	f3 01       	movw	r30, r6
    34ec:	e0 0f       	add	r30, r16
    34ee:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    34f4:	c8 0d       	add	r28, r8
    34f6:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    34f8:	4d 91       	ld	r20, X+
    34fa:	4f 77       	andi	r20, 0x7F	; 127
    34fc:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    34fe:	2f 5f       	subi	r18, 0xFF	; 255
    3500:	3f 4f       	sbci	r19, 0xFF	; 255
    3502:	88 81       	ld	r24, Y
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	02 2e       	mov	r0, r18
    3508:	02 c0       	rjmp	.+4      	; 0x350e <sysex_decode+0xda>
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	0a 94       	dec	r0
    3510:	e2 f7       	brpl	.-8      	; 0x350a <sysex_decode+0xd6>
    3512:	80 78       	andi	r24, 0x80	; 128
    3514:	48 2b       	or	r20, r24
    3516:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3518:	26 17       	cp	r18, r22
    351a:	37 07       	cpc	r19, r23
    351c:	68 f3       	brcs	.-38     	; 0x34f8 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    351e:	c8 01       	movw	r24, r16
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	85 0f       	add	r24, r21
    3524:	91 1d       	adc	r25, r1
    3526:	0c c0       	rjmp	.+24     	; 0x3540 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3528:	c7 01       	movw	r24, r14
    352a:	88 0f       	add	r24, r24
    352c:	99 1f       	adc	r25, r25
    352e:	88 0f       	add	r24, r24
    3530:	99 1f       	adc	r25, r25
    3532:	88 0f       	add	r24, r24
    3534:	99 1f       	adc	r25, r25
    3536:	8e 19       	sub	r24, r14
    3538:	9f 09       	sbc	r25, r15
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3540:	df 91       	pop	r29
    3542:	cf 91       	pop	r28
    3544:	1f 91       	pop	r17
    3546:	0f 91       	pop	r16
    3548:	ff 90       	pop	r15
    354a:	ef 90       	pop	r14
    354c:	df 90       	pop	r13
    354e:	cf 90       	pop	r12
    3550:	bf 90       	pop	r11
    3552:	af 90       	pop	r10
    3554:	9f 90       	pop	r9
    3556:	8f 90       	pop	r8
    3558:	7f 90       	pop	r7
    355a:	6f 90       	pop	r6
    355c:	08 95       	ret

0000355e <__mulsi3>:
    355e:	62 9f       	mul	r22, r18
    3560:	d0 01       	movw	r26, r0
    3562:	73 9f       	mul	r23, r19
    3564:	f0 01       	movw	r30, r0
    3566:	82 9f       	mul	r24, r18
    3568:	e0 0d       	add	r30, r0
    356a:	f1 1d       	adc	r31, r1
    356c:	64 9f       	mul	r22, r20
    356e:	e0 0d       	add	r30, r0
    3570:	f1 1d       	adc	r31, r1
    3572:	92 9f       	mul	r25, r18
    3574:	f0 0d       	add	r31, r0
    3576:	83 9f       	mul	r24, r19
    3578:	f0 0d       	add	r31, r0
    357a:	74 9f       	mul	r23, r20
    357c:	f0 0d       	add	r31, r0
    357e:	65 9f       	mul	r22, r21
    3580:	f0 0d       	add	r31, r0
    3582:	99 27       	eor	r25, r25
    3584:	72 9f       	mul	r23, r18
    3586:	b0 0d       	add	r27, r0
    3588:	e1 1d       	adc	r30, r1
    358a:	f9 1f       	adc	r31, r25
    358c:	63 9f       	mul	r22, r19
    358e:	b0 0d       	add	r27, r0
    3590:	e1 1d       	adc	r30, r1
    3592:	f9 1f       	adc	r31, r25
    3594:	bd 01       	movw	r22, r26
    3596:	cf 01       	movw	r24, r30
    3598:	11 24       	eor	r1, r1
    359a:	08 95       	ret

0000359c <__udivmodhi4>:
    359c:	aa 1b       	sub	r26, r26
    359e:	bb 1b       	sub	r27, r27
    35a0:	51 e1       	ldi	r21, 0x11	; 17
    35a2:	07 c0       	rjmp	.+14     	; 0x35b2 <__udivmodhi4_ep>

000035a4 <__udivmodhi4_loop>:
    35a4:	aa 1f       	adc	r26, r26
    35a6:	bb 1f       	adc	r27, r27
    35a8:	a6 17       	cp	r26, r22
    35aa:	b7 07       	cpc	r27, r23
    35ac:	10 f0       	brcs	.+4      	; 0x35b2 <__udivmodhi4_ep>
    35ae:	a6 1b       	sub	r26, r22
    35b0:	b7 0b       	sbc	r27, r23

000035b2 <__udivmodhi4_ep>:
    35b2:	88 1f       	adc	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	5a 95       	dec	r21
    35b8:	a9 f7       	brne	.-22     	; 0x35a4 <__udivmodhi4_loop>
    35ba:	80 95       	com	r24
    35bc:	90 95       	com	r25
    35be:	bc 01       	movw	r22, r24
    35c0:	cd 01       	movw	r24, r26
    35c2:	08 95       	ret

000035c4 <__divmodhi4>:
    35c4:	97 fb       	bst	r25, 7
    35c6:	09 2e       	mov	r0, r25
    35c8:	07 26       	eor	r0, r23
    35ca:	0a d0       	rcall	.+20     	; 0x35e0 <__divmodhi4_neg1>
    35cc:	77 fd       	sbrc	r23, 7
    35ce:	04 d0       	rcall	.+8      	; 0x35d8 <__divmodhi4_neg2>
    35d0:	e5 df       	rcall	.-54     	; 0x359c <__udivmodhi4>
    35d2:	06 d0       	rcall	.+12     	; 0x35e0 <__divmodhi4_neg1>
    35d4:	00 20       	and	r0, r0
    35d6:	1a f4       	brpl	.+6      	; 0x35de <__divmodhi4_exit>

000035d8 <__divmodhi4_neg2>:
    35d8:	70 95       	com	r23
    35da:	61 95       	neg	r22
    35dc:	7f 4f       	sbci	r23, 0xFF	; 255

000035de <__divmodhi4_exit>:
    35de:	08 95       	ret

000035e0 <__divmodhi4_neg1>:
    35e0:	f6 f7       	brtc	.-4      	; 0x35de <__divmodhi4_exit>
    35e2:	90 95       	com	r25
    35e4:	81 95       	neg	r24
    35e6:	9f 4f       	sbci	r25, 0xFF	; 255
    35e8:	08 95       	ret

000035ea <memcpy>:
    35ea:	fb 01       	movw	r30, r22
    35ec:	dc 01       	movw	r26, r24
    35ee:	02 c0       	rjmp	.+4      	; 0x35f4 <memcpy+0xa>
    35f0:	01 90       	ld	r0, Z+
    35f2:	0d 92       	st	X+, r0
    35f4:	41 50       	subi	r20, 0x01	; 1
    35f6:	50 40       	sbci	r21, 0x00	; 0
    35f8:	d8 f7       	brcc	.-10     	; 0x35f0 <memcpy+0x6>
    35fa:	08 95       	ret

000035fc <memmove>:
    35fc:	68 17       	cp	r22, r24
    35fe:	79 07       	cpc	r23, r25
    3600:	68 f4       	brcc	.+26     	; 0x361c <memmove+0x20>
    3602:	fb 01       	movw	r30, r22
    3604:	dc 01       	movw	r26, r24
    3606:	e4 0f       	add	r30, r20
    3608:	f5 1f       	adc	r31, r21
    360a:	a4 0f       	add	r26, r20
    360c:	b5 1f       	adc	r27, r21
    360e:	02 c0       	rjmp	.+4      	; 0x3614 <memmove+0x18>
    3610:	02 90       	ld	r0, -Z
    3612:	0e 92       	st	-X, r0
    3614:	41 50       	subi	r20, 0x01	; 1
    3616:	50 40       	sbci	r21, 0x00	; 0
    3618:	d8 f7       	brcc	.-10     	; 0x3610 <memmove+0x14>
    361a:	08 95       	ret
    361c:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <memcpy>

00003620 <__eerd_block_m6450a>:
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22

00003624 <__eerd_blraw_m6450a>:
    3624:	fc 01       	movw	r30, r24
    3626:	f9 99       	sbic	0x1f, 1	; 31
    3628:	fe cf       	rjmp	.-4      	; 0x3626 <__eerd_blraw_m6450a+0x2>
    362a:	06 c0       	rjmp	.+12     	; 0x3638 <__eerd_blraw_m6450a+0x14>
    362c:	f2 bd       	out	0x22, r31	; 34
    362e:	e1 bd       	out	0x21, r30	; 33
    3630:	f8 9a       	sbi	0x1f, 0	; 31
    3632:	31 96       	adiw	r30, 0x01	; 1
    3634:	00 b4       	in	r0, 0x20	; 32
    3636:	0d 92       	st	X+, r0
    3638:	41 50       	subi	r20, 0x01	; 1
    363a:	50 40       	sbci	r21, 0x00	; 0
    363c:	b8 f7       	brcc	.-18     	; 0x362c <__eerd_blraw_m6450a+0x8>
    363e:	08 95       	ret

00003640 <__eerd_word_m6450a>:
    3640:	a8 e1       	ldi	r26, 0x18	; 24
    3642:	b0 e0       	ldi	r27, 0x00	; 0
    3644:	42 e0       	ldi	r20, 0x02	; 2
    3646:	50 e0       	ldi	r21, 0x00	; 0
    3648:	0c 94 12 1b 	jmp	0x3624	; 0x3624 <__eerd_blraw_m6450a>

0000364c <__eeupd_block_m6450a>:
    364c:	dc 01       	movw	r26, r24
    364e:	a4 0f       	add	r26, r20
    3650:	b5 1f       	adc	r27, r21
    3652:	41 50       	subi	r20, 0x01	; 1
    3654:	50 40       	sbci	r21, 0x00	; 0
    3656:	48 f0       	brcs	.+18     	; 0x366a <__eeupd_block_m6450a+0x1e>
    3658:	cb 01       	movw	r24, r22
    365a:	84 0f       	add	r24, r20
    365c:	95 1f       	adc	r25, r21
    365e:	2e 91       	ld	r18, -X
    3660:	0e 94 37 1b 	call	0x366e	; 0x366e <__eeupd_r18_m6450a>
    3664:	41 50       	subi	r20, 0x01	; 1
    3666:	50 40       	sbci	r21, 0x00	; 0
    3668:	d0 f7       	brcc	.-12     	; 0x365e <__eeupd_block_m6450a+0x12>
    366a:	08 95       	ret

0000366c <__eeupd_byte_m6450a>:
    366c:	26 2f       	mov	r18, r22

0000366e <__eeupd_r18_m6450a>:
    366e:	f9 99       	sbic	0x1f, 1	; 31
    3670:	fe cf       	rjmp	.-4      	; 0x366e <__eeupd_r18_m6450a>
    3672:	92 bd       	out	0x22, r25	; 34
    3674:	81 bd       	out	0x21, r24	; 33
    3676:	f8 9a       	sbi	0x1f, 0	; 31
    3678:	01 97       	sbiw	r24, 0x01	; 1
    367a:	00 b4       	in	r0, 0x20	; 32
    367c:	02 16       	cp	r0, r18
    367e:	31 f0       	breq	.+12     	; 0x368c <__eeupd_r18_m6450a+0x1e>
    3680:	20 bd       	out	0x20, r18	; 32
    3682:	0f b6       	in	r0, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	fa 9a       	sbi	0x1f, 2	; 31
    3688:	f9 9a       	sbi	0x1f, 1	; 31
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	08 95       	ret

0000368e <__eeupd_word_m6450a>:
    368e:	01 96       	adiw	r24, 0x01	; 1
    3690:	27 2f       	mov	r18, r23
    3692:	0e 94 37 1b 	call	0x366e	; 0x366e <__eeupd_r18_m6450a>
    3696:	0c 94 36 1b 	jmp	0x366c	; 0x366c <__eeupd_byte_m6450a>

0000369a <_exit>:
    369a:	f8 94       	cli

0000369c <__stop_program>:
    369c:	ff cf       	rjmp	.-2      	; 0x369c <__stop_program>
