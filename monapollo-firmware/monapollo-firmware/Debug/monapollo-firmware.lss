
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003694  00003748  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003694  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b8  008002b0  008002b0  000038f8  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  000038f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00003f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00004ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005a44  00000000  00000000  00005160  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001542  00000000  00000000  0000aba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e00  00000000  00000000  0000c0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c10  00000000  00000000  0000dee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000017c6  00000000  00000000  0000eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002bfb  00000000  00000000  000102be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00012eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_9>
      28:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e4 e9       	ldi	r30, 0x94	; 148
      78:	f6 e3       	ldi	r31, 0x36	; 54
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a8 36       	cpi	r26, 0x68	; 104
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <main>
      9a:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 b0 02 	lds	r24, 0x02B0
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 b0 02 	sts	0x02B0, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 b0 02 	sts	0x02B0, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 b0 02 	sts	0x02B0, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1f6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1f8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1fa:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1fe:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     200:	8c 91       	ld	r24, X
     202:	87 70       	andi	r24, 0x07	; 7
     204:	82 b9       	out	0x02, r24	; 2
     206:	66 e0       	ldi	r22, 0x06	; 6
     208:	6a 95       	dec	r22
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x12>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     20e:	ea ed       	ldi	r30, 0xDA	; 218
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	40 81       	ld	r20, Z
     214:	8c 91       	ld	r24, X
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	86 95       	lsr	r24
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	b9 01       	movw	r22, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <set_control_voltage+0x34>
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <set_control_voltage+0x30>
     22e:	cb 01       	movw	r24, r22
     230:	84 2b       	or	r24, r20
     232:	80 83       	st	Z, r24
     234:	76 e0       	ldi	r23, 0x06	; 6
     236:	7a 95       	dec	r23
     238:	f1 f7       	brne	.-4      	; 0x236 <set_control_voltage+0x40>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     23c:	80 81       	ld	r24, Z
     23e:	9c 91       	ld	r25, X
     240:	96 95       	lsr	r25
     242:	96 95       	lsr	r25
     244:	96 95       	lsr	r25
     246:	97 70       	andi	r25, 0x07	; 7
     248:	02 c0       	rjmp	.+4      	; 0x24e <set_control_voltage+0x58>
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	9a 95       	dec	r25
     250:	e2 f7       	brpl	.-8      	; 0x24a <set_control_voltage+0x54>
     252:	20 95       	com	r18
     254:	28 23       	and	r18, r24
     256:	20 83       	st	Z, r18
	
}	
     258:	08 95       	ret

0000025a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     25a:	83 b3       	in	r24, 0x13	; 19
     25c:	83 60       	ori	r24, 0x03	; 3
     25e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     264:	97 b1       	in	r25, 0x07	; 7
     266:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     268:	e9 ed       	ldi	r30, 0xD9	; 217
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     272:	ea ed       	ldi	r30, 0xDA	; 218
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     27c:	84 b3       	in	r24, 0x14	; 20
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     282:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     284:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     286:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     288:	a0 9a       	sbi	0x14, 0	; 20
}
     28a:	08 95       	ret

0000028c <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2e 97       	sbiw	r28, 0x0e	; 14
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	ac 01       	movw	r20, r24
	
	uint8_t digit[] = {
     2a6:	88 e0       	ldi	r24, 0x08	; 8
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	8a 83       	std	Y+2, r24	; 0x02
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	8b 83       	std	Y+3, r24	; 0x03
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	8c 83       	std	Y+4, r24	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2b6:	de 01       	movw	r26, r28
     2b8:	15 96       	adiw	r26, 0x05	; 5
     2ba:	e7 ee       	ldi	r30, 0xE7	; 231
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <display_dec+0x34>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2cc:	ea ed       	ldi	r30, 0xDA	; 218
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d6:	80 81       	ld	r24, Z
     2d8:	8f 7e       	andi	r24, 0xEF	; 239
     2da:	80 83       	st	Z, r24
	
	//set anode bit
	DATA_BUS = digit[place];
     2dc:	06 2f       	mov	r16, r22
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	de 01       	movw	r26, r28
     2e2:	a0 0f       	add	r26, r16
     2e4:	b1 1f       	adc	r27, r17
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	8c 91       	ld	r24, X
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	82 b9       	out	0x02, r24	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2ee:	80 81       	ld	r24, Z
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	80 83       	st	Z, r24
	//if (number > 999) {
	//number = 999;
	//}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     2fa:	ca 01       	movw	r24, r20
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	9a 01       	movw	r18, r20
     306:	36 95       	lsr	r19
     308:	27 95       	ror	r18
     30a:	28 0f       	add	r18, r24
     30c:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     30e:	c9 01       	movw	r24, r18
     310:	92 95       	swap	r25
     312:	82 95       	swap	r24
     314:	8f 70       	andi	r24, 0x0F	; 15
     316:	89 27       	eor	r24, r25
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	89 27       	eor	r24, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     320:	29 2f       	mov	r18, r25
     322:	33 27       	eor	r19, r19
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
	r = number - q2 * 10;
     334:	28 2f       	mov	r18, r24
     336:	22 0f       	add	r18, r18
     338:	32 2f       	mov	r19, r18
     33a:	33 0f       	add	r19, r19
     33c:	33 0f       	add	r19, r19
     33e:	23 0f       	add	r18, r19
     340:	e4 2f       	mov	r30, r20
     342:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	ea 30       	cpi	r30, 0x0A	; 10
     34a:	10 f4       	brcc	.+4      	; 0x350 <display_dec+0xc4>
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	68 0f       	add	r22, r24
     352:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     354:	9b 01       	movw	r18, r22
     356:	36 95       	lsr	r19
     358:	27 95       	ror	r18
     35a:	36 95       	lsr	r19
     35c:	27 95       	ror	r18
     35e:	ab 01       	movw	r20, r22
     360:	56 95       	lsr	r21
     362:	47 95       	ror	r20
     364:	24 0f       	add	r18, r20
     366:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     368:	c9 01       	movw	r24, r18
     36a:	92 95       	swap	r25
     36c:	82 95       	swap	r24
     36e:	8f 70       	andi	r24, 0x0F	; 15
     370:	89 27       	eor	r24, r25
     372:	9f 70       	andi	r25, 0x0F	; 15
     374:	89 27       	eor	r24, r25
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     37a:	29 2f       	mov	r18, r25
     37c:	33 27       	eor	r19, r19
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
	r = qa - q3 * 10;
     38e:	98 2f       	mov	r25, r24
     390:	99 0f       	add	r25, r25
     392:	29 2f       	mov	r18, r25
     394:	22 0f       	add	r18, r18
     396:	22 0f       	add	r18, r18
     398:	92 0f       	add	r25, r18
     39a:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	6a 30       	cpi	r22, 0x0A	; 10
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <display_dec+0x118>
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3a6:	41 ef       	ldi	r20, 0xF1	; 241
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	da 01       	movw	r26, r20
     3ac:	a6 0f       	add	r26, r22
     3ae:	b1 1d       	adc	r27, r1
     3b0:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3b2:	28 2f       	mov	r18, r24
     3b4:	26 95       	lsr	r18
     3b6:	26 95       	lsr	r18
     3b8:	98 2f       	mov	r25, r24
     3ba:	96 95       	lsr	r25
     3bc:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3be:	29 2f       	mov	r18, r25
     3c0:	22 95       	swap	r18
     3c2:	2f 70       	andi	r18, 0x0F	; 15
     3c4:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3c6:	96 95       	lsr	r25
     3c8:	96 95       	lsr	r25
     3ca:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 0f       	add	r18, r18
     3d0:	62 2f       	mov	r22, r18
     3d2:	66 0f       	add	r22, r22
     3d4:	66 0f       	add	r22, r22
     3d6:	26 0f       	add	r18, r22
     3d8:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3da:	da 01       	movw	r26, r20
     3dc:	a8 0f       	add	r26, r24
     3de:	b1 1d       	adc	r27, r1
     3e0:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3e2:	4e 0f       	add	r20, r30
     3e4:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3e6:	fa 01       	movw	r30, r20
     3e8:	40 81       	ld	r20, Z
     3ea:	40 93 b3 02 	sts	0x02B3, r20
	digit_index[1] = tens_place;
     3ee:	30 93 b4 02 	sts	0x02B4, r19
	digit_index[2] = hunds_place;
     3f2:	20 93 b5 02 	sts	0x02B5, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	8a 30       	cpi	r24, 0x0A	; 10
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <display_dec+0x172>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     400:	90 93 b6 02 	sts	0x02B6, r25

	cathode_byte = dec[digit_index[place]];
     404:	f8 01       	movw	r30, r16
     406:	ed 54       	subi	r30, 0x4D	; 77
     408:	fd 4f       	sbci	r31, 0xFD	; 253
     40a:	80 81       	ld	r24, Z
     40c:	fe 01       	movw	r30, r28
     40e:	e8 0f       	add	r30, r24
     410:	f1 1d       	adc	r31, r1
     412:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     414:	90 91 04 03 	lds	r25, 0x0304
     418:	92 30       	cpi	r25, 0x02	; 2
     41a:	11 f4       	brne	.+4      	; 0x420 <display_dec+0x194>
     41c:	80 62       	ori	r24, 0x20	; 32
     41e:	03 c0       	rjmp	.+6      	; 0x426 <display_dec+0x19a>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     420:	91 30       	cpi	r25, 0x01	; 1
     422:	09 f4       	brne	.+2      	; 0x426 <display_dec+0x19a>
     424:	88 e0       	ldi	r24, 0x08	; 8
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     426:	80 95       	com	r24
     428:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     42a:	ea ed       	ldi	r30, 0xDA	; 218
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	80 61       	ori	r24, 0x10	; 16
     432:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     434:	80 81       	ld	r24, Z
     436:	8f 7e       	andi	r24, 0xEF	; 239
     438:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     43a:	2e 96       	adiw	r28, 0x0e	; 14
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	08 95       	ret

00000450 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     450:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     452:	66 23       	and	r22, r22
     454:	69 f4       	brne	.+26     	; 0x470 <update_display+0x20>

		
			
		display_dec(number, place);
     456:	c0 91 b7 02 	lds	r28, 0x02B7
     45a:	6c 2f       	mov	r22, r28
     45c:	0e 94 46 01 	call	0x28c	; 0x28c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     460:	8c 2f       	mov	r24, r28
     462:	8f 5f       	subi	r24, 0xFF	; 255
     464:	80 93 b7 02 	sts	0x02B7, r24
     468:	c3 30       	cpi	r28, 0x03	; 3
     46a:	11 f4       	brne	.+4      	; 0x470 <update_display+0x20>
		{
			place = 0;
     46c:	10 92 b7 02 	sts	0x02B7, r1
		
		
	}
	
	
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     474:	1f 92       	push	r1
     476:	0f 92       	push	r0
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	0f 92       	push	r0
     47c:	11 24       	eor	r1, r1
     47e:	8f 93       	push	r24
     480:	9f 93       	push	r25
     482:	ef 93       	push	r30
     484:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     486:	80 91 75 03 	lds	r24, 0x0375
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     48e:	80 91 76 03 	lds	r24, 0x0376
     492:	88 23       	and	r24, r24
     494:	a1 f4       	brne	.+40     	; 0x4be <__vector_10+0x4a>
		count_finished = FALSE;
     496:	10 92 73 03 	sts	0x0373, r1
		no_overflow = TRUE;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     4a0:	80 93 76 03 	sts	0x0376, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     4a4:	e1 e8       	ldi	r30, 0x81	; 129
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	80 81       	ld	r24, Z
     4aa:	90 91 74 03 	lds	r25, 0x0374
     4ae:	89 2b       	or	r24, r25
     4b0:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4b2:	ef e6       	ldi	r30, 0x6F	; 111
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	81 60       	ori	r24, 0x01	; 1
     4ba:	80 83       	st	Z, r24
     4bc:	11 c0       	rjmp	.+34     	; 0x4e0 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4be:	e4 e8       	ldi	r30, 0x84	; 132
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	91 81       	ldd	r25, Z+1	; 0x01
     4c6:	90 93 72 03 	sts	0x0372, r25
     4ca:	80 93 71 03 	sts	0x0371, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4ce:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 73 03 	sts	0x0373, r24
		period_counter = 0;
     4d8:	10 92 76 03 	sts	0x0376, r1
		TCNT1 = 0; //reset timer/counter 1
     4dc:	11 82       	std	Z+1, r1	; 0x01
     4de:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4e0:	ff 91       	pop	r31
     4e2:	ef 91       	pop	r30
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti

000004f2 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     4fc:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     50a:	84 2f       	mov	r24, r20
	remove_note(note);
     50c:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     510:	80 91 b9 02 	lds	r24, 0x02B9
     514:	81 50       	subi	r24, 0x01	; 1
     516:	80 93 b9 02 	sts	0x02B9, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     51a:	88 23       	and	r24, r24
     51c:	09 f4       	brne	.+2      	; 0x520 <note_off_event+0x16>
     51e:	89 98       	cbi	0x11, 1	; 17
     520:	08 95       	ret

00000522 <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     522:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     524:	40 93 ba 02 	sts	0x02BA, r20
	if (velocity == 0) {
     528:	22 23       	and	r18, r18
     52a:	59 f4       	brne	.+22     	; 0x542 <note_on_event+0x20>
		remove_note(note);
     52c:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     530:	80 91 b9 02 	lds	r24, 0x02B9
     534:	81 50       	subi	r24, 0x01	; 1
     536:	80 93 b9 02 	sts	0x02B9, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     53a:	88 23       	and	r24, r24
     53c:	59 f4       	brne	.+22     	; 0x554 <note_on_event+0x32>
     53e:	89 98       	cbi	0x11, 1	; 17
     540:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     542:	62 2f       	mov	r22, r18
     544:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     548:	80 91 b9 02 	lds	r24, 0x02B9
     54c:	8f 5f       	subi	r24, 0xFF	; 255
     54e:	80 93 b9 02 	sts	0x02B9, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     552:	89 9a       	sbi	0x11, 1	; 17
     554:	08 95       	ret

00000556 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     556:	87 e2       	ldi	r24, 0x27	; 39
     558:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     55c:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     560:	88 e9       	ldi	r24, 0x98	; 152
     562:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     566:	08 95       	ret

00000568 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	0f 92       	push	r0
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     594:	80 91 c6 00 	lds	r24, 0x00C6
     598:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     59a:	8b e7       	ldi	r24, 0x7B	; 123
     59c:	93 e0       	ldi	r25, 0x03	; 3
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	ae 01       	movw	r20, r28
     5a2:	4f 5f       	subi	r20, 0xFF	; 255
     5a4:	5f 4f       	sbci	r21, 0xFF	; 255
     5a6:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     5aa:	0f 90       	pop	r0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	0f 90       	pop	r0
     5ce:	1f 90       	pop	r1
     5d0:	18 95       	reti

000005d2 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     5d2:	c0 e8       	ldi	r28, 0x80	; 128
     5d4:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     5d6:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     5d8:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     5da:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     5dc:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     5de:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     5e0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     5e4:	a9 ed       	ldi	r26, 0xD9	; 217
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	8c 91       	ld	r24, X
     5ea:	80 6c       	ori	r24, 0xC0	; 192
     5ec:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     5ee:	ea ed       	ldi	r30, 0xDA	; 218
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	80 6c       	ori	r24, 0xC0	; 192
     5f6:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     5f8:	81 b1       	in	r24, 0x01	; 1
     5fa:	8f ef       	ldi	r24, 0xFF	; 255
     5fc:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     5fe:	92 b1       	in	r25, 0x02	; 2
     600:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     602:	8c 91       	ld	r24, X
     604:	80 63       	ori	r24, 0x30	; 48
     606:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     608:	80 81       	ld	r24, Z
     60a:	8f 7c       	andi	r24, 0xCF	; 207
     60c:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     60e:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     610:	ec ed       	ldi	r30, 0xDC	; 220
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	80 62       	ori	r24, 0x20	; 32
     618:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     61a:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     61c:	ed ed       	ldi	r30, 0xDD	; 221
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	80 62       	ori	r24, 0x20	; 32
     624:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     626:	80 81       	ld	r24, Z
     628:	8f 7d       	andi	r24, 0xDF	; 223
     62a:	80 83       	st	Z, r24
	DATA_BUS = 0;
     62c:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     62e:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     632:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     636:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     63a:	cb e7       	ldi	r28, 0x7B	; 123
     63c:	d3 e0       	ldi	r29, 0x03	; 3
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 75 16 	call	0x2cea	; 0x2cea <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     644:	ce 01       	movw	r24, r28
     646:	61 e9       	ldi	r22, 0x91	; 145
     648:	72 e0       	ldi	r23, 0x02	; 2
     64a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     64e:	ce 01       	movw	r24, r28
     650:	65 e8       	ldi	r22, 0x85	; 133
     652:	72 e0       	ldi	r23, 0x02	; 2
     654:	0e 94 41 16 	call	0x2c82	; 0x2c82 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     658:	0e 94 ab 02 	call	0x556	; 0x556 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     65c:	0e 94 13 06 	call	0xc26	; 0xc26 <update_spi>
	
	
	current_patch.number = 1;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     666:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     668:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	0e 94 a1 08 	call	0x1142	; 0x1142 <load_patch>

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     672:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     674:	0f 2e       	mov	r0, r31
     676:	f9 e7       	ldi	r31, 0x79	; 121
     678:	ef 2e       	mov	r14, r31
     67a:	f3 e0       	ldi	r31, 0x03	; 3
     67c:	ff 2e       	mov	r15, r31
     67e:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     680:	0f 2e       	mov	r0, r31
     682:	f4 e0       	ldi	r31, 0x04	; 4
     684:	cf 2e       	mov	r12, r31
     686:	f3 e0       	ldi	r31, 0x03	; 3
     688:	df 2e       	mov	r13, r31
     68a:	f0 2d       	mov	r31, r0
     68c:	d0 e8       	ldi	r29, 0x80	; 128
	load_patch(1);

	while(1)
	{	
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     68e:	c8 01       	movw	r24, r16
     690:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     694:	80 91 fd 01 	lds	r24, 0x01FD
     698:	90 91 fe 01 	lds	r25, 0x01FE
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     6a2:	0e 94 75 03 	call	0x6ea	; 0x6ea <scan_pots>
		update_control_voltages();
     6a6:	0e 94 02 04 	call	0x804	; 0x804 <update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     6aa:	80 91 b8 02 	lds	r24, 0x02B8
     6ae:	98 2f       	mov	r25, r24
     6b0:	9f 5f       	subi	r25, 0xFF	; 255
     6b2:	90 93 b8 02 	sts	0x02B8, r25
     6b6:	85 30       	cpi	r24, 0x05	; 5
     6b8:	51 f7       	brne	.-44     	; 0x68e <main+0xbc>
		{
			switch_timer = 0;
     6ba:	10 92 b8 02 	sts	0x02B8, r1
			switch_press = 0; //reset global switch press flag
     6be:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     6c2:	f7 01       	movw	r30, r14
     6c4:	c0 81       	ld	r28, Z
     6c6:	0e 94 77 13 	call	0x26ee	; 0x26ee <read_switch_port>
     6ca:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     6cc:	f6 01       	movw	r30, r12
     6ce:	90 81       	ld	r25, Z
     6d0:	91 30       	cpi	r25, 0x01	; 1
     6d2:	11 f4       	brne	.+4      	; 0x6d8 <main+0x106>
     6d4:	cd 2f       	mov	r28, r29
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <main+0x108>
     6d8:	c0 e0       	ldi	r28, 0x00	; 0
     6da:	c8 2b       	or	r28, r24
     6dc:	f7 01       	movw	r30, r14
     6de:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     6e0:	0e 94 13 06 	call	0xc26	; 0xc26 <update_spi>
			refresh_synth();
     6e4:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <refresh_synth>
     6e8:	d2 cf       	rjmp	.-92     	; 0x68e <main+0xbc>

000006ea <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	c0 e0       	ldi	r28, 0x00	; 0
     6fe:	d1 e0       	ldi	r29, 0x01	; 1
     700:	02 ec       	ldi	r16, 0xC2	; 194
     702:	12 e0       	ldi	r17, 0x02	; 2
     704:	0f 2e       	mov	r0, r31
     706:	fc e3       	ldi	r31, 0x3C	; 60
     708:	cf 2e       	mov	r12, r31
     70a:	dd 24       	eor	r13, r13
     70c:	f0 2d       	mov	r31, r0
     70e:	cc 0e       	add	r12, r28
     710:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     712:	0f 2e       	mov	r0, r31
     714:	f4 e0       	ldi	r31, 0x04	; 4
     716:	ef 2e       	mov	r14, r31
     718:	f3 e0       	ldi	r31, 0x03	; 3
     71a:	ff 2e       	mov	r15, r31
     71c:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     71e:	bb 24       	eor	r11, r11
     720:	68 94       	set
     722:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     724:	88 81       	ld	r24, Y
     726:	99 81       	ldd	r25, Y+1	; 0x01
     728:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     72c:	90 93 bc 02 	sts	0x02BC, r25
     730:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     734:	e8 81       	ld	r30, Y
     736:	f9 81       	ldd	r31, Y+1	; 0x01
     738:	40 81       	ld	r20, Z
     73a:	21 81       	ldd	r18, Z+1	; 0x01
     73c:	52 2f       	mov	r21, r18
     73e:	53 70       	andi	r21, 0x03	; 3
     740:	84 1b       	sub	r24, r20
     742:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     744:	95 95       	asr	r25
     746:	87 95       	ror	r24
     748:	95 95       	asr	r25
     74a:	87 95       	ror	r24
     74c:	84 0f       	add	r24, r20
     74e:	95 1f       	adc	r25, r21
     750:	80 83       	st	Z, r24
     752:	89 2f       	mov	r24, r25
     754:	83 70       	andi	r24, 0x03	; 3
     756:	2c 7f       	andi	r18, 0xFC	; 252
     758:	28 2b       	or	r18, r24
     75a:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     75c:	e9 91       	ld	r30, Y+
     75e:	f9 91       	ld	r31, Y+
     760:	92 81       	ldd	r25, Z+2	; 0x02
     762:	20 81       	ld	r18, Z
     764:	81 81       	ldd	r24, Z+1	; 0x01
     766:	38 2f       	mov	r19, r24
     768:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     76a:	d7 01       	movw	r26, r14
     76c:	8c 91       	ld	r24, X
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	19 f0       	breq	.+6      	; 0x778 <scan_pots+0x8e>
     772:	83 81       	ldd	r24, Z+3	; 0x03
     774:	88 23       	and	r24, r24
     776:	24 f0       	brlt	.+8      	; 0x780 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     778:	f8 01       	movw	r30, r16
     77a:	31 83       	std	Z+1, r19	; 0x01
     77c:	20 83       	st	Z, r18
     77e:	14 c0       	rjmp	.+40     	; 0x7a8 <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     780:	49 2f       	mov	r20, r25
     782:	43 50       	subi	r20, 0x03	; 3
     784:	c9 01       	movw	r24, r18
     786:	95 95       	asr	r25
     788:	87 95       	ror	r24
     78a:	95 95       	asr	r25
     78c:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     78e:	94 2f       	mov	r25, r20
     790:	98 1b       	sub	r25, r24
     792:	9a 3f       	cpi	r25, 0xFA	; 250
     794:	48 f4       	brcc	.+18     	; 0x7a8 <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     796:	d8 01       	movw	r26, r16
     798:	11 96       	adiw	r26, 0x01	; 1
     79a:	3c 93       	st	X, r19
     79c:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     79e:	83 81       	ldd	r24, Z+3	; 0x03
     7a0:	8f 77       	andi	r24, 0x7F	; 127
     7a2:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     7a4:	f7 01       	movw	r30, r14
     7a6:	b0 82       	st	Z, r11
     7a8:	0e 5f       	subi	r16, 0xFE	; 254
     7aa:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     7ac:	cc 15       	cp	r28, r12
     7ae:	dd 05       	cpc	r29, r13
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <scan_pots+0xca>
     7b2:	b8 cf       	rjmp	.-144    	; 0x724 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     7b4:	8c e7       	ldi	r24, 0x7C	; 124
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     7bc:	90 93 bc 02 	sts	0x02BC, r25
     7c0:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     7c4:	20 91 7c 01 	lds	r18, 0x017C
     7c8:	40 91 7d 01 	lds	r20, 0x017D
     7cc:	34 2f       	mov	r19, r20
     7ce:	33 70       	andi	r19, 0x03	; 3
     7d0:	82 1b       	sub	r24, r18
     7d2:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     7d4:	95 95       	asr	r25
     7d6:	87 95       	ror	r24
     7d8:	95 95       	asr	r25
     7da:	87 95       	ror	r24
     7dc:	28 0f       	add	r18, r24
     7de:	39 1f       	adc	r19, r25
     7e0:	20 93 7c 01 	sts	0x017C, r18
     7e4:	83 2f       	mov	r24, r19
     7e6:	83 70       	andi	r24, 0x03	; 3
     7e8:	4c 7f       	andi	r20, 0xFC	; 252
     7ea:	48 2b       	or	r20, r24
     7ec:	40 93 7d 01 	sts	0x017D, r20
	
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	bf 90       	pop	r11
     802:	08 95       	ret

00000804 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     808:	60 91 c2 02 	lds	r22, 0x02C2
     80c:	70 91 c3 02 	lds	r23, 0x02C3
     810:	62 95       	swap	r22
     812:	72 95       	swap	r23
     814:	70 7f       	andi	r23, 0xF0	; 240
     816:	76 27       	eor	r23, r22
     818:	60 7f       	andi	r22, 0xF0	; 240
     81a:	76 27       	eor	r23, r22
     81c:	84 ee       	ldi	r24, 0xE4	; 228
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     824:	60 91 c4 02 	lds	r22, 0x02C4
     828:	70 91 c5 02 	lds	r23, 0x02C5
     82c:	62 95       	swap	r22
     82e:	72 95       	swap	r23
     830:	70 7f       	andi	r23, 0xF0	; 240
     832:	76 27       	eor	r23, r22
     834:	60 7f       	andi	r22, 0xF0	; 240
     836:	76 27       	eor	r23, r22
     838:	83 ee       	ldi	r24, 0xE3	; 227
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     840:	60 91 c6 02 	lds	r22, 0x02C6
     844:	70 91 c7 02 	lds	r23, 0x02C7
     848:	66 0f       	add	r22, r22
     84a:	77 1f       	adc	r23, r23
     84c:	66 0f       	add	r22, r22
     84e:	77 1f       	adc	r23, r23
     850:	66 0f       	add	r22, r22
     852:	77 1f       	adc	r23, r23
     854:	82 ee       	ldi	r24, 0xE2	; 226
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     85c:	60 91 c8 02 	lds	r22, 0x02C8
     860:	70 91 c9 02 	lds	r23, 0x02C9
     864:	62 95       	swap	r22
     866:	72 95       	swap	r23
     868:	70 7f       	andi	r23, 0xF0	; 240
     86a:	76 27       	eor	r23, r22
     86c:	60 7f       	andi	r22, 0xF0	; 240
     86e:	76 27       	eor	r23, r22
     870:	82 eb       	ldi	r24, 0xB2	; 178
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     878:	60 91 ca 02 	lds	r22, 0x02CA
     87c:	70 91 cb 02 	lds	r23, 0x02CB
     880:	66 0f       	add	r22, r22
     882:	77 1f       	adc	r23, r23
     884:	66 0f       	add	r22, r22
     886:	77 1f       	adc	r23, r23
     888:	66 0f       	add	r22, r22
     88a:	77 1f       	adc	r23, r23
     88c:	81 ee       	ldi	r24, 0xE1	; 225
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     894:	60 91 cc 02 	lds	r22, 0x02CC
     898:	70 91 cd 02 	lds	r23, 0x02CD
     89c:	62 95       	swap	r22
     89e:	72 95       	swap	r23
     8a0:	70 7f       	andi	r23, 0xF0	; 240
     8a2:	76 27       	eor	r23, r22
     8a4:	60 7f       	andi	r22, 0xF0	; 240
     8a6:	76 27       	eor	r23, r22
     8a8:	80 ee       	ldi	r24, 0xE0	; 224
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     8b0:	60 91 ce 02 	lds	r22, 0x02CE
     8b4:	70 91 cf 02 	lds	r23, 0x02CF
     8b8:	62 95       	swap	r22
     8ba:	72 95       	swap	r23
     8bc:	70 7f       	andi	r23, 0xF0	; 240
     8be:	76 27       	eor	r23, r22
     8c0:	60 7f       	andi	r22, 0xF0	; 240
     8c2:	76 27       	eor	r23, r22
     8c4:	8f ed       	ldi	r24, 0xDF	; 223
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     8cc:	60 91 d0 02 	lds	r22, 0x02D0
     8d0:	70 91 d1 02 	lds	r23, 0x02D1
     8d4:	62 95       	swap	r22
     8d6:	72 95       	swap	r23
     8d8:	70 7f       	andi	r23, 0xF0	; 240
     8da:	76 27       	eor	r23, r22
     8dc:	60 7f       	andi	r22, 0xF0	; 240
     8de:	76 27       	eor	r23, r22
     8e0:	8e ed       	ldi	r24, 0xDE	; 222
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     8e8:	80 91 d4 02 	lds	r24, 0x02D4
     8ec:	90 91 d5 02 	lds	r25, 0x02D5
     8f0:	c0 e0       	ldi	r28, 0x00	; 0
     8f2:	d2 e0       	ldi	r29, 0x02	; 2
     8f4:	c8 1b       	sub	r28, r24
     8f6:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     8f8:	60 91 6c 03 	lds	r22, 0x036C
     8fc:	70 91 6d 03 	lds	r23, 0x036D
     900:	60 50       	subi	r22, 0x00	; 0
     902:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     904:	80 91 d2 02 	lds	r24, 0x02D2
     908:	90 91 d3 02 	lds	r25, 0x02D3
     90c:	68 1b       	sub	r22, r24
     90e:	79 0b       	sbc	r23, r25
     910:	6c 0f       	add	r22, r28
     912:	7d 1f       	adc	r23, r29
     914:	8d ed       	ldi	r24, 0xDD	; 221
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     91c:	60 91 6e 03 	lds	r22, 0x036E
     920:	70 91 6f 03 	lds	r23, 0x036F
     924:	6c 0f       	add	r22, r28
     926:	7d 1f       	adc	r23, r29
     928:	8c ed       	ldi	r24, 0xDC	; 220
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     930:	60 91 d6 02 	lds	r22, 0x02D6
     934:	70 91 d7 02 	lds	r23, 0x02D7
     938:	62 95       	swap	r22
     93a:	72 95       	swap	r23
     93c:	70 7f       	andi	r23, 0xF0	; 240
     93e:	76 27       	eor	r23, r22
     940:	60 7f       	andi	r22, 0xF0	; 240
     942:	76 27       	eor	r23, r22
     944:	8b ed       	ldi	r24, 0xDB	; 219
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     94c:	60 91 da 02 	lds	r22, 0x02DA
     950:	70 91 db 02 	lds	r23, 0x02DB
     954:	62 95       	swap	r22
     956:	72 95       	swap	r23
     958:	70 7f       	andi	r23, 0xF0	; 240
     95a:	76 27       	eor	r23, r22
     95c:	60 7f       	andi	r22, 0xF0	; 240
     95e:	76 27       	eor	r23, r22
     960:	8a ed       	ldi	r24, 0xDA	; 218
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     968:	60 91 dc 02 	lds	r22, 0x02DC
     96c:	70 91 dd 02 	lds	r23, 0x02DD
     970:	62 95       	swap	r22
     972:	72 95       	swap	r23
     974:	70 7f       	andi	r23, 0xF0	; 240
     976:	76 27       	eor	r23, r22
     978:	60 7f       	andi	r22, 0xF0	; 240
     97a:	76 27       	eor	r23, r22
     97c:	89 ed       	ldi	r24, 0xD9	; 217
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     984:	60 91 7c 01 	lds	r22, 0x017C
     988:	80 91 7d 01 	lds	r24, 0x017D
     98c:	78 2f       	mov	r23, r24
     98e:	73 70       	andi	r23, 0x03	; 3
     990:	62 95       	swap	r22
     992:	72 95       	swap	r23
     994:	70 7f       	andi	r23, 0xF0	; 240
     996:	76 27       	eor	r23, r22
     998:	60 7f       	andi	r22, 0xF0	; 240
     99a:	76 27       	eor	r23, r22
     99c:	88 ed       	ldi	r24, 0xD8	; 216
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     9a4:	60 91 de 02 	lds	r22, 0x02DE
     9a8:	70 91 df 02 	lds	r23, 0x02DF
     9ac:	62 95       	swap	r22
     9ae:	72 95       	swap	r23
     9b0:	70 7f       	andi	r23, 0xF0	; 240
     9b2:	76 27       	eor	r23, r22
     9b4:	60 7f       	andi	r22, 0xF0	; 240
     9b6:	76 27       	eor	r23, r22
     9b8:	87 ed       	ldi	r24, 0xD7	; 215
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     9c0:	60 91 e0 02 	lds	r22, 0x02E0
     9c4:	70 91 e1 02 	lds	r23, 0x02E1
     9c8:	62 95       	swap	r22
     9ca:	72 95       	swap	r23
     9cc:	70 7f       	andi	r23, 0xF0	; 240
     9ce:	76 27       	eor	r23, r22
     9d0:	60 7f       	andi	r22, 0xF0	; 240
     9d2:	76 27       	eor	r23, r22
     9d4:	86 ed       	ldi	r24, 0xD6	; 214
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     9dc:	60 91 e2 02 	lds	r22, 0x02E2
     9e0:	70 91 e3 02 	lds	r23, 0x02E3
     9e4:	62 95       	swap	r22
     9e6:	72 95       	swap	r23
     9e8:	70 7f       	andi	r23, 0xF0	; 240
     9ea:	76 27       	eor	r23, r22
     9ec:	60 7f       	andi	r22, 0xF0	; 240
     9ee:	76 27       	eor	r23, r22
     9f0:	85 ed       	ldi	r24, 0xD5	; 213
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     9f8:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     9fc:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     9fe:	88 30       	cpi	r24, 0x08	; 8
     a00:	08 f4       	brcc	.+2      	; 0xa04 <update_control_voltages+0x200>
     a02:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = note;
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     a04:	8c 2f       	mov	r24, r28
     a06:	88 50       	subi	r24, 0x08	; 8
     a08:	68 e0       	ldi	r22, 0x08	; 8
     a0a:	73 e0       	ldi	r23, 0x03	; 3
     a0c:	0e 94 19 13 	call	0x2632	; 0x2632 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     a10:	bc 01       	movw	r22, r24
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	20 91 e6 02 	lds	r18, 0x02E6
     a1a:	30 91 e7 02 	lds	r19, 0x02E7
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__mulsi3>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	07 2e       	mov	r0, r23
     a2c:	7a e0       	ldi	r23, 0x0A	; 10
     a2e:	b6 95       	lsr	r27
     a30:	a7 95       	ror	r26
     a32:	97 95       	ror	r25
     a34:	87 95       	ror	r24
     a36:	7a 95       	dec	r23
     a38:	d1 f7       	brne	.-12     	; 0xa2e <update_control_voltages+0x22a>
     a3a:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     a3c:	60 91 e4 02 	lds	r22, 0x02E4
     a40:	70 91 e5 02 	lds	r23, 0x02E5
     a44:	62 95       	swap	r22
     a46:	72 95       	swap	r23
     a48:	70 7f       	andi	r23, 0xF0	; 240
     a4a:	76 27       	eor	r23, r22
     a4c:	60 7f       	andi	r22, 0xF0	; 240
     a4e:	76 27       	eor	r23, r22
     a50:	86 0f       	add	r24, r22
     a52:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     a54:	bc 01       	movw	r22, r24
     a56:	80 e4       	ldi	r24, 0x40	; 64
     a58:	60 30       	cpi	r22, 0x00	; 0
     a5a:	78 07       	cpc	r23, r24
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <update_control_voltages+0x25e>
     a5e:	6f ef       	ldi	r22, 0xFF	; 255
     a60:	7f e3       	ldi	r23, 0x3F	; 63
     a62:	84 ed       	ldi	r24, 0xD4	; 212
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     a6a:	60 91 e8 02 	lds	r22, 0x02E8
     a6e:	70 91 e9 02 	lds	r23, 0x02E9
     a72:	62 95       	swap	r22
     a74:	72 95       	swap	r23
     a76:	70 7f       	andi	r23, 0xF0	; 240
     a78:	76 27       	eor	r23, r22
     a7a:	60 7f       	andi	r22, 0xF0	; 240
     a7c:	76 27       	eor	r23, r22
     a7e:	82 ed       	ldi	r24, 0xD2	; 210
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     a86:	60 91 ea 02 	lds	r22, 0x02EA
     a8a:	70 91 eb 02 	lds	r23, 0x02EB
     a8e:	62 95       	swap	r22
     a90:	72 95       	swap	r23
     a92:	70 7f       	andi	r23, 0xF0	; 240
     a94:	76 27       	eor	r23, r22
     a96:	60 7f       	andi	r22, 0xF0	; 240
     a98:	76 27       	eor	r23, r22
     a9a:	81 ed       	ldi	r24, 0xD1	; 209
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     aa2:	60 91 ec 02 	lds	r22, 0x02EC
     aa6:	70 91 ed 02 	lds	r23, 0x02ED
     aaa:	62 95       	swap	r22
     aac:	72 95       	swap	r23
     aae:	70 7f       	andi	r23, 0xF0	; 240
     ab0:	76 27       	eor	r23, r22
     ab2:	60 7f       	andi	r22, 0xF0	; 240
     ab4:	76 27       	eor	r23, r22
     ab6:	80 ed       	ldi	r24, 0xD0	; 208
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     abe:	60 91 ee 02 	lds	r22, 0x02EE
     ac2:	70 91 ef 02 	lds	r23, 0x02EF
     ac6:	62 95       	swap	r22
     ac8:	72 95       	swap	r23
     aca:	70 7f       	andi	r23, 0xF0	; 240
     acc:	76 27       	eor	r23, r22
     ace:	60 7f       	andi	r22, 0xF0	; 240
     ad0:	76 27       	eor	r23, r22
     ad2:	8f ec       	ldi	r24, 0xCF	; 207
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     ada:	60 91 f0 02 	lds	r22, 0x02F0
     ade:	70 91 f1 02 	lds	r23, 0x02F1
     ae2:	62 95       	swap	r22
     ae4:	72 95       	swap	r23
     ae6:	70 7f       	andi	r23, 0xF0	; 240
     ae8:	76 27       	eor	r23, r22
     aea:	60 7f       	andi	r22, 0xF0	; 240
     aec:	76 27       	eor	r23, r22
     aee:	8e ec       	ldi	r24, 0xCE	; 206
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     af6:	60 91 f2 02 	lds	r22, 0x02F2
     afa:	70 91 f3 02 	lds	r23, 0x02F3
     afe:	62 95       	swap	r22
     b00:	72 95       	swap	r23
     b02:	70 7f       	andi	r23, 0xF0	; 240
     b04:	76 27       	eor	r23, r22
     b06:	60 7f       	andi	r22, 0xF0	; 240
     b08:	76 27       	eor	r23, r22
     b0a:	8d ec       	ldi	r24, 0xCD	; 205
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     b12:	60 91 f4 02 	lds	r22, 0x02F4
     b16:	70 91 f5 02 	lds	r23, 0x02F5
     b1a:	62 95       	swap	r22
     b1c:	72 95       	swap	r23
     b1e:	70 7f       	andi	r23, 0xF0	; 240
     b20:	76 27       	eor	r23, r22
     b22:	60 7f       	andi	r22, 0xF0	; 240
     b24:	76 27       	eor	r23, r22
     b26:	8c ec       	ldi	r24, 0xCC	; 204
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     b2e:	60 91 f8 02 	lds	r22, 0x02F8
     b32:	70 91 f9 02 	lds	r23, 0x02F9
     b36:	62 95       	swap	r22
     b38:	72 95       	swap	r23
     b3a:	70 7f       	andi	r23, 0xF0	; 240
     b3c:	76 27       	eor	r23, r22
     b3e:	60 7f       	andi	r22, 0xF0	; 240
     b40:	76 27       	eor	r23, r22
     b42:	8a ec       	ldi	r24, 0xCA	; 202
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     b4a:	60 91 f6 02 	lds	r22, 0x02F6
     b4e:	70 91 f7 02 	lds	r23, 0x02F7
     b52:	62 95       	swap	r22
     b54:	72 95       	swap	r23
     b56:	70 7f       	andi	r23, 0xF0	; 240
     b58:	76 27       	eor	r23, r22
     b5a:	60 7f       	andi	r22, 0xF0	; 240
     b5c:	76 27       	eor	r23, r22
     b5e:	8b ec       	ldi	r24, 0xCB	; 203
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     b66:	60 91 fc 02 	lds	r22, 0x02FC
     b6a:	70 91 fd 02 	lds	r23, 0x02FD
     b6e:	62 95       	swap	r22
     b70:	72 95       	swap	r23
     b72:	70 7f       	andi	r23, 0xF0	; 240
     b74:	76 27       	eor	r23, r22
     b76:	60 7f       	andi	r22, 0xF0	; 240
     b78:	76 27       	eor	r23, r22
     b7a:	88 ec       	ldi	r24, 0xC8	; 200
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     b82:	60 91 fa 02 	lds	r22, 0x02FA
     b86:	70 91 fb 02 	lds	r23, 0x02FB
     b8a:	62 95       	swap	r22
     b8c:	72 95       	swap	r23
     b8e:	70 7f       	andi	r23, 0xF0	; 240
     b90:	76 27       	eor	r23, r22
     b92:	60 7f       	andi	r22, 0xF0	; 240
     b94:	76 27       	eor	r23, r22
     b96:	89 ec       	ldi	r24, 0xC9	; 201
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     b9e:	8c 2f       	mov	r24, r28
     ba0:	6f e0       	ldi	r22, 0x0F	; 15
     ba2:	0e 94 81 0b 	call	0x1702	; 0x1702 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     ba6:	6a e4       	ldi	r22, 0x4A	; 74
     ba8:	73 e0       	ldi	r23, 0x03	; 3
     baa:	0e 94 19 13 	call	0x2632	; 0x2632 <interpolate_pitch_cv>
     bae:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     bb0:	86 ee       	ldi	r24, 0xE6	; 230
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     bb8:	8c 2f       	mov	r24, r28
     bba:	60 ef       	ldi	r22, 0xF0	; 240
     bbc:	0e 94 81 0b 	call	0x1702	; 0x1702 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     bc0:	68 e2       	ldi	r22, 0x28	; 40
     bc2:	73 e0       	ldi	r23, 0x03	; 3
     bc4:	0e 94 19 13 	call	0x2632	; 0x2632 <interpolate_pitch_cv>
     bc8:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     bca:	85 ee       	ldi	r24, 0xE5	; 229
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     bd2:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     bd4:	a1 9a       	sbi	0x14, 1	; 20
}			
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	08 95       	ret

00000bdc <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     bdc:	84 b1       	in	r24, 0x04	; 4
     bde:	87 62       	ori	r24, 0x27	; 39
     be0:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     be2:	ec ed       	ldi	r30, 0xDC	; 220
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	8c 65       	ori	r24, 0x5C	; 92
     bea:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     bec:	85 b1       	in	r24, 0x05	; 5
     bee:	89 7d       	andi	r24, 0xD9	; 217
     bf0:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     bf2:	ed ed       	ldi	r30, 0xDD	; 221
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	83 7f       	andi	r24, 0xF3	; 243
     bfa:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     bfc:	80 e5       	ldi	r24, 0x50	; 80
     bfe:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     c00:	80 81       	ld	r24, Z
     c02:	87 7f       	andi	r24, 0xF7	; 247
     c04:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     c06:	80 81       	ld	r24, Z
     c08:	87 7f       	andi	r24, 0xF7	; 247
     c0a:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     c0c:	80 81       	ld	r24, Z
     c0e:	88 60       	ori	r24, 0x08	; 8
     c10:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     c12:	80 81       	ld	r24, Z
     c14:	8f 7e       	andi	r24, 0xEF	; 239
     c16:	80 83       	st	Z, r24
	
}
     c18:	08 95       	ret

00000c1a <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     c1a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     c1c:	0d b4       	in	r0, 0x2d	; 45
     c1e:	07 fe       	sbrs	r0, 7
     c20:	fd cf       	rjmp	.-6      	; 0xc1c <spi_shift_byte+0x2>
	return SPDR;
     c22:	8e b5       	in	r24, 0x2e	; 46
	
}
     c24:	08 95       	ret

00000c26 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     c26:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     c28:	80 91 02 03 	lds	r24, 0x0302
     c2c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     c30:	90 91 c1 02 	lds	r25, 0x02C1
     c34:	98 2b       	or	r25, r24
     c36:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     c3a:	20 91 bf 02 	lds	r18, 0x02BF
     c3e:	98 2f       	mov	r25, r24
     c40:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     c42:	89 2f       	mov	r24, r25
     c44:	82 27       	eor	r24, r18
     c46:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     c4a:	89 23       	and	r24, r25
     c4c:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     c50:	90 91 77 03 	lds	r25, 0x0377
     c54:	89 27       	eor	r24, r25
     c56:	80 93 77 03 	sts	0x0377, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     c5a:	80 91 01 03 	lds	r24, 0x0301
     c5e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     c62:	90 91 c1 02 	lds	r25, 0x02C1
     c66:	98 2b       	or	r25, r24
     c68:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     c6c:	20 91 bd 02 	lds	r18, 0x02BD
     c70:	98 2f       	mov	r25, r24
     c72:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     c74:	89 2f       	mov	r24, r25
     c76:	82 27       	eor	r24, r18
     c78:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     c7c:	89 23       	and	r24, r25
     c7e:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     c82:	90 91 78 03 	lds	r25, 0x0378
     c86:	89 27       	eor	r24, r25
     c88:	80 93 78 03 	sts	0x0378, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     c8c:	80 91 00 03 	lds	r24, 0x0300
     c90:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     c94:	80 91 ff 02 	lds	r24, 0x02FF
     c98:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
     c9c:	90 91 79 03 	lds	r25, 0x0379
     ca0:	29 2f       	mov	r18, r25
     ca2:	22 95       	swap	r18
     ca4:	2f 70       	andi	r18, 0x0F	; 15
     ca6:	27 95       	ror	r18
     ca8:	22 27       	eor	r18, r18
     caa:	27 95       	ror	r18

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     cac:	89 2f       	mov	r24, r25
     cae:	86 95       	lsr	r24
     cb0:	86 95       	lsr	r24
     cb2:	86 95       	lsr	r24
     cb4:	81 70       	andi	r24, 0x01	; 1
     cb6:	82 2b       	or	r24, r18
     cb8:	40 91 78 03 	lds	r20, 0x0378
     cbc:	42 95       	swap	r20
     cbe:	46 95       	lsr	r20
     cc0:	47 70       	andi	r20, 0x07	; 7
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	41 70       	andi	r20, 0x01	; 1
     cc6:	50 70       	andi	r21, 0x00	; 0
     cc8:	9a 01       	movw	r18, r20
     cca:	22 0f       	add	r18, r18
     ccc:	33 1f       	adc	r19, r19
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	28 2b       	or	r18, r24
						((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     cd4:	99 1f       	adc	r25, r25
     cd6:	99 27       	eor	r25, r25
     cd8:	99 1f       	adc	r25, r25
     cda:	89 2f       	mov	r24, r25
     cdc:	82 95       	swap	r24
     cde:	88 0f       	add	r24, r24
     ce0:	88 0f       	add	r24, r24
     ce2:	80 7c       	andi	r24, 0xC0	; 192
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     ce4:	82 2b       	or	r24, r18
     ce6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     cea:	ed ed       	ldi	r30, 0xDD	; 221
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	87 7f       	andi	r24, 0xF7	; 247
     cf2:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     cf4:	80 81       	ld	r24, Z
     cf6:	88 60       	ori	r24, 0x08	; 8
     cf8:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     cfa:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     cfc:	08 95       	ret

00000cfe <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b1 e0       	ldi	r27, 0x01	; 1
     d02:	9d 01       	movw	r18, r26
     d04:	24 5c       	subi	r18, 0xC4	; 196
     d06:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= 29; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     d08:	ed 91       	ld	r30, X+
     d0a:	fc 91       	ld	r31, X
     d0c:	11 97       	sbiw	r26, 0x01	; 1
     d0e:	80 81       	ld	r24, Z
     d10:	41 81       	ldd	r20, Z+1	; 0x01
     d12:	94 2f       	mov	r25, r20
     d14:	93 70       	andi	r25, 0x03	; 3
     d16:	95 95       	asr	r25
     d18:	87 95       	ror	r24
     d1a:	95 95       	asr	r25
     d1c:	87 95       	ror	r24
     d1e:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     d20:	ed 91       	ld	r30, X+
     d22:	fd 91       	ld	r31, X+
     d24:	83 81       	ldd	r24, Z+3	; 0x03
     d26:	80 68       	ori	r24, 0x80	; 128
     d28:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= 29; i++) {
     d2a:	a2 17       	cp	r26, r18
     d2c:	b3 07       	cpc	r27, r19
     d2e:	61 f7       	brne	.-40     	; 0xd08 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     d30:	08 95       	ret

00000d32 <unlock_pots>:

void unlock_pots(void) {
     d32:	e0 e0       	ldi	r30, 0x00	; 0
     d34:	f1 e0       	ldi	r31, 0x01	; 1
     d36:	cf 01       	movw	r24, r30
     d38:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked = 0;
     d3a:	a1 91       	ld	r26, Z+
     d3c:	b1 91       	ld	r27, Z+
     d3e:	13 96       	adiw	r26, 0x03	; 3
     d40:	2c 91       	ld	r18, X
     d42:	13 97       	sbiw	r26, 0x03	; 3
     d44:	2f 77       	andi	r18, 0x7F	; 127
     d46:	13 96       	adiw	r26, 0x03	; 3
     d48:	2c 93       	st	X, r18
     d4a:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= 29; i++) {
     d4c:	e8 17       	cp	r30, r24
     d4e:	f9 07       	cpc	r31, r25
     d50:	a1 f7       	brne	.-24     	; 0xd3a <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
     d52:	08 95       	ret

00000d54 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	ab 97       	sbiw	r28, 0x2b	; 43
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     d6c:	ee ed       	ldi	r30, 0xDE	; 222
     d6e:	f2 e0       	ldi	r31, 0x02	; 2
     d70:	20 91 de 02 	lds	r18, 0x02DE
     d74:	82 2f       	mov	r24, r18
     d76:	82 95       	swap	r24
     d78:	80 7f       	andi	r24, 0xF0	; 240
     d7a:	22 95       	swap	r18
     d7c:	2f 70       	andi	r18, 0x0F	; 15
     d7e:	90 91 df 02 	lds	r25, 0x02DF
     d82:	93 70       	andi	r25, 0x03	; 3
     d84:	92 95       	swap	r25
     d86:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     d88:	df 01       	movw	r26, r30
     d8a:	5a 97       	sbiw	r26, 0x1a	; 26
     d8c:	3c 91       	ld	r19, X
     d8e:	53 2f       	mov	r21, r19
     d90:	55 0f       	add	r21, r21
     d92:	55 0f       	add	r21, r21
     d94:	4a 81       	ldd	r20, Y+2	; 0x02
     d96:	43 70       	andi	r20, 0x03	; 3
     d98:	45 2b       	or	r20, r21
     d9a:	4a 83       	std	Y+2, r20	; 0x02
     d9c:	63 2f       	mov	r22, r19
     d9e:	62 95       	swap	r22
     da0:	66 95       	lsr	r22
     da2:	66 95       	lsr	r22
     da4:	63 70       	andi	r22, 0x03	; 3
     da6:	11 96       	adiw	r26, 0x01	; 1
     da8:	4c 91       	ld	r20, X
     daa:	43 70       	andi	r20, 0x03	; 3
     dac:	44 0f       	add	r20, r20
     dae:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     db0:	df 01       	movw	r26, r30
     db2:	58 97       	sbiw	r26, 0x18	; 24
     db4:	3c 91       	ld	r19, X
     db6:	53 2f       	mov	r21, r19
     db8:	52 95       	swap	r21
     dba:	50 7f       	andi	r21, 0xF0	; 240
     dbc:	46 2b       	or	r20, r22
     dbe:	45 2b       	or	r20, r21
     dc0:	4b 83       	std	Y+3, r20	; 0x03
     dc2:	63 2f       	mov	r22, r19
     dc4:	62 95       	swap	r22
     dc6:	6f 70       	andi	r22, 0x0F	; 15
     dc8:	11 96       	adiw	r26, 0x01	; 1
     dca:	4c 91       	ld	r20, X
     dcc:	43 70       	andi	r20, 0x03	; 3
     dce:	42 95       	swap	r20
     dd0:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     dd2:	df 01       	movw	r26, r30
     dd4:	56 97       	sbiw	r26, 0x16	; 22
     dd6:	3c 91       	ld	r19, X
     dd8:	53 2f       	mov	r21, r19
     dda:	52 95       	swap	r21
     ddc:	55 0f       	add	r21, r21
     dde:	55 0f       	add	r21, r21
     de0:	50 7c       	andi	r21, 0xC0	; 192
     de2:	46 2b       	or	r20, r22
     de4:	45 2b       	or	r20, r21
     de6:	4c 83       	std	Y+4, r20	; 0x04
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	4c 91       	ld	r20, X
     dec:	42 95       	swap	r20
     dee:	44 0f       	add	r20, r20
     df0:	44 0f       	add	r20, r20
     df2:	40 7c       	andi	r20, 0xC0	; 192
     df4:	36 95       	lsr	r19
     df6:	36 95       	lsr	r19
     df8:	34 2b       	or	r19, r20
     dfa:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     dfc:	df 01       	movw	r26, r30
     dfe:	54 97       	sbiw	r26, 0x14	; 20
     e00:	3c 91       	ld	r19, X
     e02:	3e 83       	std	Y+6, r19	; 0x06
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     e08:	df 01       	movw	r26, r30
     e0a:	52 97       	sbiw	r26, 0x12	; 18
     e0c:	3c 91       	ld	r19, X
     e0e:	53 2f       	mov	r21, r19
     e10:	55 0f       	add	r21, r21
     e12:	55 0f       	add	r21, r21
     e14:	43 70       	andi	r20, 0x03	; 3
     e16:	45 2b       	or	r20, r21
     e18:	4f 83       	std	Y+7, r20	; 0x07
     e1a:	63 2f       	mov	r22, r19
     e1c:	62 95       	swap	r22
     e1e:	66 95       	lsr	r22
     e20:	66 95       	lsr	r22
     e22:	63 70       	andi	r22, 0x03	; 3
     e24:	11 96       	adiw	r26, 0x01	; 1
     e26:	4c 91       	ld	r20, X
     e28:	43 70       	andi	r20, 0x03	; 3
     e2a:	44 0f       	add	r20, r20
     e2c:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     e2e:	df 01       	movw	r26, r30
     e30:	50 97       	sbiw	r26, 0x10	; 16
     e32:	3c 91       	ld	r19, X
     e34:	53 2f       	mov	r21, r19
     e36:	52 95       	swap	r21
     e38:	50 7f       	andi	r21, 0xF0	; 240
     e3a:	46 2b       	or	r20, r22
     e3c:	45 2b       	or	r20, r21
     e3e:	48 87       	std	Y+8, r20	; 0x08
     e40:	63 2f       	mov	r22, r19
     e42:	62 95       	swap	r22
     e44:	6f 70       	andi	r22, 0x0F	; 15
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	4c 91       	ld	r20, X
     e4a:	43 70       	andi	r20, 0x03	; 3
     e4c:	42 95       	swap	r20
     e4e:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     e50:	df 01       	movw	r26, r30
     e52:	1e 97       	sbiw	r26, 0x0e	; 14
     e54:	3c 91       	ld	r19, X
     e56:	53 2f       	mov	r21, r19
     e58:	52 95       	swap	r21
     e5a:	55 0f       	add	r21, r21
     e5c:	55 0f       	add	r21, r21
     e5e:	50 7c       	andi	r21, 0xC0	; 192
     e60:	46 2b       	or	r20, r22
     e62:	45 2b       	or	r20, r21
     e64:	49 87       	std	Y+9, r20	; 0x09
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	4c 91       	ld	r20, X
     e6a:	42 95       	swap	r20
     e6c:	44 0f       	add	r20, r20
     e6e:	44 0f       	add	r20, r20
     e70:	40 7c       	andi	r20, 0xC0	; 192
     e72:	36 95       	lsr	r19
     e74:	36 95       	lsr	r19
     e76:	34 2b       	or	r19, r20
     e78:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     e7a:	df 01       	movw	r26, r30
     e7c:	1c 97       	sbiw	r26, 0x0c	; 12
     e7e:	3c 91       	ld	r19, X
     e80:	3b 87       	std	Y+11, r19	; 0x0b
     e82:	11 96       	adiw	r26, 0x01	; 1
     e84:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     e86:	df 01       	movw	r26, r30
     e88:	1a 97       	sbiw	r26, 0x0a	; 10
     e8a:	3c 91       	ld	r19, X
     e8c:	53 2f       	mov	r21, r19
     e8e:	55 0f       	add	r21, r21
     e90:	55 0f       	add	r21, r21
     e92:	43 70       	andi	r20, 0x03	; 3
     e94:	45 2b       	or	r20, r21
     e96:	4c 87       	std	Y+12, r20	; 0x0c
     e98:	63 2f       	mov	r22, r19
     e9a:	62 95       	swap	r22
     e9c:	66 95       	lsr	r22
     e9e:	66 95       	lsr	r22
     ea0:	63 70       	andi	r22, 0x03	; 3
     ea2:	11 96       	adiw	r26, 0x01	; 1
     ea4:	4c 91       	ld	r20, X
     ea6:	43 70       	andi	r20, 0x03	; 3
     ea8:	44 0f       	add	r20, r20
     eaa:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
     eac:	df 01       	movw	r26, r30
     eae:	18 97       	sbiw	r26, 0x08	; 8
     eb0:	3c 91       	ld	r19, X
     eb2:	53 2f       	mov	r21, r19
     eb4:	52 95       	swap	r21
     eb6:	50 7f       	andi	r21, 0xF0	; 240
     eb8:	46 2b       	or	r20, r22
     eba:	45 2b       	or	r20, r21
     ebc:	4d 87       	std	Y+13, r20	; 0x0d
     ebe:	63 2f       	mov	r22, r19
     ec0:	62 95       	swap	r22
     ec2:	6f 70       	andi	r22, 0x0F	; 15
     ec4:	11 96       	adiw	r26, 0x01	; 1
     ec6:	4c 91       	ld	r20, X
     ec8:	43 70       	andi	r20, 0x03	; 3
     eca:	42 95       	swap	r20
     ecc:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
     ece:	df 01       	movw	r26, r30
     ed0:	16 97       	sbiw	r26, 0x06	; 6
     ed2:	3c 91       	ld	r19, X
     ed4:	53 2f       	mov	r21, r19
     ed6:	52 95       	swap	r21
     ed8:	55 0f       	add	r21, r21
     eda:	55 0f       	add	r21, r21
     edc:	50 7c       	andi	r21, 0xC0	; 192
     ede:	46 2b       	or	r20, r22
     ee0:	45 2b       	or	r20, r21
     ee2:	4e 87       	std	Y+14, r20	; 0x0e
     ee4:	11 96       	adiw	r26, 0x01	; 1
     ee6:	4c 91       	ld	r20, X
     ee8:	42 95       	swap	r20
     eea:	44 0f       	add	r20, r20
     eec:	44 0f       	add	r20, r20
     eee:	40 7c       	andi	r20, 0xC0	; 192
     ef0:	36 95       	lsr	r19
     ef2:	36 95       	lsr	r19
     ef4:	34 2b       	or	r19, r20
     ef6:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
     ef8:	df 01       	movw	r26, r30
     efa:	14 97       	sbiw	r26, 0x04	; 4
     efc:	3c 91       	ld	r19, X
     efe:	38 8b       	std	Y+16, r19	; 0x10
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
     f04:	df 01       	movw	r26, r30
     f06:	12 97       	sbiw	r26, 0x02	; 2
     f08:	3c 91       	ld	r19, X
     f0a:	53 2f       	mov	r21, r19
     f0c:	55 0f       	add	r21, r21
     f0e:	55 0f       	add	r21, r21
     f10:	43 70       	andi	r20, 0x03	; 3
     f12:	45 2b       	or	r20, r21
     f14:	49 8b       	std	Y+17, r20	; 0x11
     f16:	32 95       	swap	r19
     f18:	36 95       	lsr	r19
     f1a:	36 95       	lsr	r19
     f1c:	33 70       	andi	r19, 0x03	; 3
     f1e:	11 96       	adiw	r26, 0x01	; 1
     f20:	4c 91       	ld	r20, X
     f22:	43 70       	andi	r20, 0x03	; 3
     f24:	44 0f       	add	r20, r20
     f26:	44 0f       	add	r20, r20
     f28:	83 2b       	or	r24, r19
     f2a:	84 2b       	or	r24, r20
     f2c:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
     f2e:	80 91 e0 02 	lds	r24, 0x02E0
     f32:	38 2f       	mov	r19, r24
     f34:	32 95       	swap	r19
     f36:	33 0f       	add	r19, r19
     f38:	33 0f       	add	r19, r19
     f3a:	30 7c       	andi	r19, 0xC0	; 192
     f3c:	92 2b       	or	r25, r18
     f3e:	93 2b       	or	r25, r19
     f40:	9b 8b       	std	Y+19, r25	; 0x13
     f42:	93 81       	ldd	r25, Z+3	; 0x03
     f44:	92 95       	swap	r25
     f46:	99 0f       	add	r25, r25
     f48:	99 0f       	add	r25, r25
     f4a:	90 7c       	andi	r25, 0xC0	; 192
     f4c:	86 95       	lsr	r24
     f4e:	86 95       	lsr	r24
     f50:	89 2b       	or	r24, r25
     f52:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
     f54:	80 91 e2 02 	lds	r24, 0x02E2
     f58:	8d 8b       	std	Y+21, r24	; 0x15
     f5a:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
     f5c:	80 91 e4 02 	lds	r24, 0x02E4
     f60:	28 2f       	mov	r18, r24
     f62:	22 0f       	add	r18, r18
     f64:	22 0f       	add	r18, r18
     f66:	93 70       	andi	r25, 0x03	; 3
     f68:	92 2b       	or	r25, r18
     f6a:	9e 8b       	std	Y+22, r25	; 0x16
     f6c:	38 2f       	mov	r19, r24
     f6e:	32 95       	swap	r19
     f70:	36 95       	lsr	r19
     f72:	36 95       	lsr	r19
     f74:	33 70       	andi	r19, 0x03	; 3
     f76:	97 81       	ldd	r25, Z+7	; 0x07
     f78:	93 70       	andi	r25, 0x03	; 3
     f7a:	99 0f       	add	r25, r25
     f7c:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
     f7e:	80 91 e6 02 	lds	r24, 0x02E6
     f82:	28 2f       	mov	r18, r24
     f84:	22 95       	swap	r18
     f86:	20 7f       	andi	r18, 0xF0	; 240
     f88:	93 2b       	or	r25, r19
     f8a:	92 2b       	or	r25, r18
     f8c:	9f 8b       	std	Y+23, r25	; 0x17
     f8e:	38 2f       	mov	r19, r24
     f90:	32 95       	swap	r19
     f92:	3f 70       	andi	r19, 0x0F	; 15
     f94:	91 85       	ldd	r25, Z+9	; 0x09
     f96:	93 70       	andi	r25, 0x03	; 3
     f98:	92 95       	swap	r25
     f9a:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
     f9c:	80 91 e8 02 	lds	r24, 0x02E8
     fa0:	28 2f       	mov	r18, r24
     fa2:	22 95       	swap	r18
     fa4:	22 0f       	add	r18, r18
     fa6:	22 0f       	add	r18, r18
     fa8:	20 7c       	andi	r18, 0xC0	; 192
     faa:	93 2b       	or	r25, r19
     fac:	92 2b       	or	r25, r18
     fae:	98 8f       	std	Y+24, r25	; 0x18
     fb0:	93 85       	ldd	r25, Z+11	; 0x0b
     fb2:	92 95       	swap	r25
     fb4:	99 0f       	add	r25, r25
     fb6:	99 0f       	add	r25, r25
     fb8:	90 7c       	andi	r25, 0xC0	; 192
     fba:	86 95       	lsr	r24
     fbc:	86 95       	lsr	r24
     fbe:	89 2b       	or	r24, r25
     fc0:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
     fc2:	80 91 ea 02 	lds	r24, 0x02EA
     fc6:	8a 8f       	std	Y+26, r24	; 0x1a
     fc8:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
     fca:	80 91 ec 02 	lds	r24, 0x02EC
     fce:	28 2f       	mov	r18, r24
     fd0:	22 0f       	add	r18, r18
     fd2:	22 0f       	add	r18, r18
     fd4:	93 70       	andi	r25, 0x03	; 3
     fd6:	92 2b       	or	r25, r18
     fd8:	9b 8f       	std	Y+27, r25	; 0x1b
     fda:	38 2f       	mov	r19, r24
     fdc:	32 95       	swap	r19
     fde:	36 95       	lsr	r19
     fe0:	36 95       	lsr	r19
     fe2:	33 70       	andi	r19, 0x03	; 3
     fe4:	97 85       	ldd	r25, Z+15	; 0x0f
     fe6:	93 70       	andi	r25, 0x03	; 3
     fe8:	99 0f       	add	r25, r25
     fea:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
     fec:	80 91 ee 02 	lds	r24, 0x02EE
     ff0:	28 2f       	mov	r18, r24
     ff2:	22 95       	swap	r18
     ff4:	20 7f       	andi	r18, 0xF0	; 240
     ff6:	93 2b       	or	r25, r19
     ff8:	92 2b       	or	r25, r18
     ffa:	9c 8f       	std	Y+28, r25	; 0x1c
     ffc:	38 2f       	mov	r19, r24
     ffe:	32 95       	swap	r19
    1000:	3f 70       	andi	r19, 0x0F	; 15
    1002:	91 89       	ldd	r25, Z+17	; 0x11
    1004:	93 70       	andi	r25, 0x03	; 3
    1006:	92 95       	swap	r25
    1008:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    100a:	80 91 f0 02 	lds	r24, 0x02F0
    100e:	28 2f       	mov	r18, r24
    1010:	22 95       	swap	r18
    1012:	22 0f       	add	r18, r18
    1014:	22 0f       	add	r18, r18
    1016:	20 7c       	andi	r18, 0xC0	; 192
    1018:	93 2b       	or	r25, r19
    101a:	92 2b       	or	r25, r18
    101c:	9d 8f       	std	Y+29, r25	; 0x1d
    101e:	93 89       	ldd	r25, Z+19	; 0x13
    1020:	92 95       	swap	r25
    1022:	99 0f       	add	r25, r25
    1024:	99 0f       	add	r25, r25
    1026:	90 7c       	andi	r25, 0xC0	; 192
    1028:	86 95       	lsr	r24
    102a:	86 95       	lsr	r24
    102c:	89 2b       	or	r24, r25
    102e:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    1030:	80 91 f2 02 	lds	r24, 0x02F2
    1034:	8f 8f       	std	Y+31, r24	; 0x1f
    1036:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    1038:	80 91 f4 02 	lds	r24, 0x02F4
    103c:	28 2f       	mov	r18, r24
    103e:	22 0f       	add	r18, r18
    1040:	22 0f       	add	r18, r18
    1042:	93 70       	andi	r25, 0x03	; 3
    1044:	92 2b       	or	r25, r18
    1046:	98 a3       	lds	r25, 0x58
    1048:	38 2f       	mov	r19, r24
    104a:	32 95       	swap	r19
    104c:	36 95       	lsr	r19
    104e:	36 95       	lsr	r19
    1050:	33 70       	andi	r19, 0x03	; 3
    1052:	97 89       	ldd	r25, Z+23	; 0x17
    1054:	93 70       	andi	r25, 0x03	; 3
    1056:	99 0f       	add	r25, r25
    1058:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    105a:	80 91 f6 02 	lds	r24, 0x02F6
    105e:	28 2f       	mov	r18, r24
    1060:	22 95       	swap	r18
    1062:	20 7f       	andi	r18, 0xF0	; 240
    1064:	93 2b       	or	r25, r19
    1066:	92 2b       	or	r25, r18
    1068:	99 a3       	lds	r25, 0x59
    106a:	38 2f       	mov	r19, r24
    106c:	32 95       	swap	r19
    106e:	3f 70       	andi	r19, 0x0F	; 15
    1070:	91 8d       	ldd	r25, Z+25	; 0x19
    1072:	93 70       	andi	r25, 0x03	; 3
    1074:	92 95       	swap	r25
    1076:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    1078:	80 91 f8 02 	lds	r24, 0x02F8
    107c:	28 2f       	mov	r18, r24
    107e:	22 95       	swap	r18
    1080:	22 0f       	add	r18, r18
    1082:	22 0f       	add	r18, r18
    1084:	20 7c       	andi	r18, 0xC0	; 192
    1086:	93 2b       	or	r25, r19
    1088:	92 2b       	or	r25, r18
    108a:	9a a3       	lds	r25, 0x5a
    108c:	93 8d       	ldd	r25, Z+27	; 0x1b
    108e:	92 95       	swap	r25
    1090:	99 0f       	add	r25, r25
    1092:	99 0f       	add	r25, r25
    1094:	90 7c       	andi	r25, 0xC0	; 192
    1096:	86 95       	lsr	r24
    1098:	86 95       	lsr	r24
    109a:	89 2b       	or	r24, r25
    109c:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    109e:	80 91 fa 02 	lds	r24, 0x02FA
    10a2:	8c a3       	lds	r24, 0x5c
    10a4:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    10a6:	80 91 fc 02 	lds	r24, 0x02FC
    10aa:	28 2f       	mov	r18, r24
    10ac:	22 0f       	add	r18, r18
    10ae:	22 0f       	add	r18, r18
    10b0:	93 70       	andi	r25, 0x03	; 3
    10b2:	92 2b       	or	r25, r18
    10b4:	9d a3       	lds	r25, 0x5d
    10b6:	82 95       	swap	r24
    10b8:	86 95       	lsr	r24
    10ba:	86 95       	lsr	r24
    10bc:	83 70       	andi	r24, 0x03	; 3
    10be:	2e a1       	lds	r18, 0x4e
    10c0:	20 7f       	andi	r18, 0xF0	; 240
    10c2:	97 8d       	ldd	r25, Z+31	; 0x1f
    10c4:	93 70       	andi	r25, 0x03	; 3
    10c6:	99 0f       	add	r25, r25
    10c8:	99 0f       	add	r25, r25
    10ca:	82 2b       	or	r24, r18
    10cc:	89 2b       	or	r24, r25
    10ce:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    10d0:	80 91 fe 02 	lds	r24, 0x02FE
    10d4:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    10d6:	80 91 ff 02 	lds	r24, 0x02FF
    10da:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    10dc:	80 91 00 03 	lds	r24, 0x0300
    10e0:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    10e2:	80 91 01 03 	lds	r24, 0x0301
    10e6:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    10e8:	80 91 02 03 	lds	r24, 0x0302
    10ec:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    10ee:	0e 94 7f 06 	call	0xcfe	; 0xcfe <lock_pots>
	if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
    10f2:	80 91 04 03 	lds	r24, 0x0304
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	29 f4       	brne	.+10     	; 0x1104 <__stack+0x5>
    10fa:	80 91 79 03 	lds	r24, 0x0379
    10fe:	8f 77       	andi	r24, 0x7F	; 127
    1100:	80 93 79 03 	sts	0x0379, r24
	current_patch.mode = MEMORY;
    1104:	10 92 04 03 	sts	0x0304, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    1108:	21 2f       	mov	r18, r17
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	8b e2       	ldi	r24, 0x2B	; 43
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	28 9f       	mul	r18, r24
    1112:	b0 01       	movw	r22, r0
    1114:	29 9f       	mul	r18, r25
    1116:	70 0d       	add	r23, r0
    1118:	38 9f       	mul	r19, r24
    111a:	70 0d       	add	r23, r0
    111c:	11 24       	eor	r1, r1
    111e:	60 50       	subi	r22, 0x00	; 0
    1120:	70 40       	sbci	r23, 0x00	; 0
    1122:	ce 01       	movw	r24, r28
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	4b e2       	ldi	r20, 0x2B	; 43
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	0e 94 21 1b 	call	0x3642	; 0x3642 <__eeupd_block_m6450a>
}	
    112e:	ab 96       	adiw	r28, 0x2b	; 43
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	08 95       	ret

00001142 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	c3 54       	subi	r28, 0x43	; 67
    114e:	d0 40       	sbci	r29, 0x00	; 0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	2b e2       	ldi	r18, 0x2B	; 43
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	82 9f       	mul	r24, r18
    1162:	b0 01       	movw	r22, r0
    1164:	83 9f       	mul	r24, r19
    1166:	70 0d       	add	r23, r0
    1168:	92 9f       	mul	r25, r18
    116a:	70 0d       	add	r23, r0
    116c:	11 24       	eor	r1, r1
    116e:	60 50       	subi	r22, 0x00	; 0
    1170:	70 40       	sbci	r23, 0x00	; 0
    1172:	ce 01       	movw	r24, r28
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	4b e2       	ldi	r20, 0x2B	; 43
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    117e:	ee ed       	ldi	r30, 0xDE	; 222
    1180:	f2 e0       	ldi	r31, 0x02	; 2
    1182:	8a 89       	ldd	r24, Y+18	; 0x12
    1184:	28 2f       	mov	r18, r24
    1186:	22 95       	swap	r18
    1188:	2f 70       	andi	r18, 0x0F	; 15
    118a:	9b 89       	ldd	r25, Y+19	; 0x13
    118c:	39 2f       	mov	r19, r25
    118e:	32 95       	swap	r19
    1190:	30 7f       	andi	r19, 0xF0	; 240
    1192:	32 2b       	or	r19, r18
    1194:	29 2f       	mov	r18, r25
    1196:	22 95       	swap	r18
    1198:	2f 70       	andi	r18, 0x0F	; 15
    119a:	23 70       	andi	r18, 0x03	; 3
    119c:	30 93 de 02 	sts	0x02DE, r19
    11a0:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    11a4:	df 01       	movw	r26, r30
    11a6:	5a 97       	sbiw	r26, 0x1a	; 26
    11a8:	4a 81       	ldd	r20, Y+2	; 0x02
    11aa:	46 95       	lsr	r20
    11ac:	46 95       	lsr	r20
    11ae:	2b 81       	ldd	r18, Y+3	; 0x03
    11b0:	32 2f       	mov	r19, r18
    11b2:	32 95       	swap	r19
    11b4:	33 0f       	add	r19, r19
    11b6:	33 0f       	add	r19, r19
    11b8:	30 7c       	andi	r19, 0xC0	; 192
    11ba:	43 2b       	or	r20, r19
    11bc:	32 2f       	mov	r19, r18
    11be:	36 95       	lsr	r19
    11c0:	36 95       	lsr	r19
    11c2:	33 70       	andi	r19, 0x03	; 3
    11c4:	4c 93       	st	X, r20
    11c6:	11 96       	adiw	r26, 0x01	; 1
    11c8:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    11ca:	df 01       	movw	r26, r30
    11cc:	58 97       	sbiw	r26, 0x18	; 24
    11ce:	32 2f       	mov	r19, r18
    11d0:	32 95       	swap	r19
    11d2:	3f 70       	andi	r19, 0x0F	; 15
    11d4:	2c 81       	ldd	r18, Y+4	; 0x04
    11d6:	42 2f       	mov	r20, r18
    11d8:	42 95       	swap	r20
    11da:	40 7f       	andi	r20, 0xF0	; 240
    11dc:	43 2b       	or	r20, r19
    11de:	32 2f       	mov	r19, r18
    11e0:	32 95       	swap	r19
    11e2:	3f 70       	andi	r19, 0x0F	; 15
    11e4:	33 70       	andi	r19, 0x03	; 3
    11e6:	4c 93       	st	X, r20
    11e8:	11 96       	adiw	r26, 0x01	; 1
    11ea:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    11ec:	df 01       	movw	r26, r30
    11ee:	56 97       	sbiw	r26, 0x16	; 22
    11f0:	22 95       	swap	r18
    11f2:	26 95       	lsr	r18
    11f4:	26 95       	lsr	r18
    11f6:	23 70       	andi	r18, 0x03	; 3
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	43 2f       	mov	r20, r19
    11fc:	44 0f       	add	r20, r20
    11fe:	44 0f       	add	r20, r20
    1200:	24 2b       	or	r18, r20
    1202:	32 95       	swap	r19
    1204:	36 95       	lsr	r19
    1206:	36 95       	lsr	r19
    1208:	33 70       	andi	r19, 0x03	; 3
    120a:	2c 93       	st	X, r18
    120c:	11 96       	adiw	r26, 0x01	; 1
    120e:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    1210:	df 01       	movw	r26, r30
    1212:	54 97       	sbiw	r26, 0x14	; 20
    1214:	4e 81       	ldd	r20, Y+6	; 0x06
    1216:	2f 81       	ldd	r18, Y+7	; 0x07
    1218:	32 2f       	mov	r19, r18
    121a:	33 70       	andi	r19, 0x03	; 3
    121c:	4c 93       	st	X, r20
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1222:	df 01       	movw	r26, r30
    1224:	52 97       	sbiw	r26, 0x12	; 18
    1226:	32 2f       	mov	r19, r18
    1228:	36 95       	lsr	r19
    122a:	36 95       	lsr	r19
    122c:	28 85       	ldd	r18, Y+8	; 0x08
    122e:	42 2f       	mov	r20, r18
    1230:	42 95       	swap	r20
    1232:	44 0f       	add	r20, r20
    1234:	44 0f       	add	r20, r20
    1236:	40 7c       	andi	r20, 0xC0	; 192
    1238:	43 2b       	or	r20, r19
    123a:	32 2f       	mov	r19, r18
    123c:	36 95       	lsr	r19
    123e:	36 95       	lsr	r19
    1240:	33 70       	andi	r19, 0x03	; 3
    1242:	4c 93       	st	X, r20
    1244:	11 96       	adiw	r26, 0x01	; 1
    1246:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1248:	df 01       	movw	r26, r30
    124a:	50 97       	sbiw	r26, 0x10	; 16
    124c:	32 2f       	mov	r19, r18
    124e:	32 95       	swap	r19
    1250:	3f 70       	andi	r19, 0x0F	; 15
    1252:	29 85       	ldd	r18, Y+9	; 0x09
    1254:	42 2f       	mov	r20, r18
    1256:	42 95       	swap	r20
    1258:	40 7f       	andi	r20, 0xF0	; 240
    125a:	43 2b       	or	r20, r19
    125c:	32 2f       	mov	r19, r18
    125e:	32 95       	swap	r19
    1260:	3f 70       	andi	r19, 0x0F	; 15
    1262:	33 70       	andi	r19, 0x03	; 3
    1264:	4c 93       	st	X, r20
    1266:	11 96       	adiw	r26, 0x01	; 1
    1268:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    126a:	df 01       	movw	r26, r30
    126c:	1e 97       	sbiw	r26, 0x0e	; 14
    126e:	22 95       	swap	r18
    1270:	26 95       	lsr	r18
    1272:	26 95       	lsr	r18
    1274:	23 70       	andi	r18, 0x03	; 3
    1276:	3a 85       	ldd	r19, Y+10	; 0x0a
    1278:	43 2f       	mov	r20, r19
    127a:	44 0f       	add	r20, r20
    127c:	44 0f       	add	r20, r20
    127e:	24 2b       	or	r18, r20
    1280:	32 95       	swap	r19
    1282:	36 95       	lsr	r19
    1284:	36 95       	lsr	r19
    1286:	33 70       	andi	r19, 0x03	; 3
    1288:	2c 93       	st	X, r18
    128a:	11 96       	adiw	r26, 0x01	; 1
    128c:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    128e:	df 01       	movw	r26, r30
    1290:	1c 97       	sbiw	r26, 0x0c	; 12
    1292:	4b 85       	ldd	r20, Y+11	; 0x0b
    1294:	2c 85       	ldd	r18, Y+12	; 0x0c
    1296:	32 2f       	mov	r19, r18
    1298:	33 70       	andi	r19, 0x03	; 3
    129a:	4c 93       	st	X, r20
    129c:	11 96       	adiw	r26, 0x01	; 1
    129e:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    12a0:	df 01       	movw	r26, r30
    12a2:	1a 97       	sbiw	r26, 0x0a	; 10
    12a4:	32 2f       	mov	r19, r18
    12a6:	36 95       	lsr	r19
    12a8:	36 95       	lsr	r19
    12aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    12ac:	42 2f       	mov	r20, r18
    12ae:	42 95       	swap	r20
    12b0:	44 0f       	add	r20, r20
    12b2:	44 0f       	add	r20, r20
    12b4:	40 7c       	andi	r20, 0xC0	; 192
    12b6:	43 2b       	or	r20, r19
    12b8:	32 2f       	mov	r19, r18
    12ba:	36 95       	lsr	r19
    12bc:	36 95       	lsr	r19
    12be:	33 70       	andi	r19, 0x03	; 3
    12c0:	4c 93       	st	X, r20
    12c2:	11 96       	adiw	r26, 0x01	; 1
    12c4:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    12c6:	df 01       	movw	r26, r30
    12c8:	18 97       	sbiw	r26, 0x08	; 8
    12ca:	32 2f       	mov	r19, r18
    12cc:	32 95       	swap	r19
    12ce:	3f 70       	andi	r19, 0x0F	; 15
    12d0:	2e 85       	ldd	r18, Y+14	; 0x0e
    12d2:	42 2f       	mov	r20, r18
    12d4:	42 95       	swap	r20
    12d6:	40 7f       	andi	r20, 0xF0	; 240
    12d8:	43 2b       	or	r20, r19
    12da:	32 2f       	mov	r19, r18
    12dc:	32 95       	swap	r19
    12de:	3f 70       	andi	r19, 0x0F	; 15
    12e0:	33 70       	andi	r19, 0x03	; 3
    12e2:	4c 93       	st	X, r20
    12e4:	11 96       	adiw	r26, 0x01	; 1
    12e6:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    12e8:	df 01       	movw	r26, r30
    12ea:	16 97       	sbiw	r26, 0x06	; 6
    12ec:	22 95       	swap	r18
    12ee:	26 95       	lsr	r18
    12f0:	26 95       	lsr	r18
    12f2:	23 70       	andi	r18, 0x03	; 3
    12f4:	3f 85       	ldd	r19, Y+15	; 0x0f
    12f6:	43 2f       	mov	r20, r19
    12f8:	44 0f       	add	r20, r20
    12fa:	44 0f       	add	r20, r20
    12fc:	24 2b       	or	r18, r20
    12fe:	32 95       	swap	r19
    1300:	36 95       	lsr	r19
    1302:	36 95       	lsr	r19
    1304:	33 70       	andi	r19, 0x03	; 3
    1306:	2c 93       	st	X, r18
    1308:	11 96       	adiw	r26, 0x01	; 1
    130a:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    130c:	df 01       	movw	r26, r30
    130e:	14 97       	sbiw	r26, 0x04	; 4
    1310:	48 89       	ldd	r20, Y+16	; 0x10
    1312:	29 89       	ldd	r18, Y+17	; 0x11
    1314:	32 2f       	mov	r19, r18
    1316:	33 70       	andi	r19, 0x03	; 3
    1318:	4c 93       	st	X, r20
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    131e:	df 01       	movw	r26, r30
    1320:	12 97       	sbiw	r26, 0x02	; 2
    1322:	26 95       	lsr	r18
    1324:	26 95       	lsr	r18
    1326:	38 2f       	mov	r19, r24
    1328:	32 95       	swap	r19
    132a:	33 0f       	add	r19, r19
    132c:	33 0f       	add	r19, r19
    132e:	30 7c       	andi	r19, 0xC0	; 192
    1330:	23 2b       	or	r18, r19
    1332:	86 95       	lsr	r24
    1334:	86 95       	lsr	r24
    1336:	83 70       	andi	r24, 0x03	; 3
    1338:	2c 93       	st	X, r18
    133a:	11 96       	adiw	r26, 0x01	; 1
    133c:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    133e:	92 95       	swap	r25
    1340:	96 95       	lsr	r25
    1342:	96 95       	lsr	r25
    1344:	93 70       	andi	r25, 0x03	; 3
    1346:	8c 89       	ldd	r24, Y+20	; 0x14
    1348:	28 2f       	mov	r18, r24
    134a:	22 0f       	add	r18, r18
    134c:	22 0f       	add	r18, r18
    134e:	92 2b       	or	r25, r18
    1350:	82 95       	swap	r24
    1352:	86 95       	lsr	r24
    1354:	86 95       	lsr	r24
    1356:	83 70       	andi	r24, 0x03	; 3
    1358:	90 93 e0 02 	sts	0x02E0, r25
    135c:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    135e:	2d 89       	ldd	r18, Y+21	; 0x15
    1360:	8e 89       	ldd	r24, Y+22	; 0x16
    1362:	98 2f       	mov	r25, r24
    1364:	93 70       	andi	r25, 0x03	; 3
    1366:	20 93 e2 02 	sts	0x02E2, r18
    136a:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    136c:	98 2f       	mov	r25, r24
    136e:	96 95       	lsr	r25
    1370:	96 95       	lsr	r25
    1372:	8f 89       	ldd	r24, Y+23	; 0x17
    1374:	28 2f       	mov	r18, r24
    1376:	22 95       	swap	r18
    1378:	22 0f       	add	r18, r18
    137a:	22 0f       	add	r18, r18
    137c:	20 7c       	andi	r18, 0xC0	; 192
    137e:	29 2b       	or	r18, r25
    1380:	98 2f       	mov	r25, r24
    1382:	96 95       	lsr	r25
    1384:	96 95       	lsr	r25
    1386:	93 70       	andi	r25, 0x03	; 3
    1388:	20 93 e4 02 	sts	0x02E4, r18
    138c:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    138e:	98 2f       	mov	r25, r24
    1390:	92 95       	swap	r25
    1392:	9f 70       	andi	r25, 0x0F	; 15
    1394:	88 8d       	ldd	r24, Y+24	; 0x18
    1396:	28 2f       	mov	r18, r24
    1398:	22 95       	swap	r18
    139a:	20 7f       	andi	r18, 0xF0	; 240
    139c:	29 2b       	or	r18, r25
    139e:	98 2f       	mov	r25, r24
    13a0:	92 95       	swap	r25
    13a2:	9f 70       	andi	r25, 0x0F	; 15
    13a4:	93 70       	andi	r25, 0x03	; 3
    13a6:	20 93 e6 02 	sts	0x02E6, r18
    13aa:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    13ac:	82 95       	swap	r24
    13ae:	86 95       	lsr	r24
    13b0:	86 95       	lsr	r24
    13b2:	83 70       	andi	r24, 0x03	; 3
    13b4:	99 8d       	ldd	r25, Y+25	; 0x19
    13b6:	29 2f       	mov	r18, r25
    13b8:	22 0f       	add	r18, r18
    13ba:	22 0f       	add	r18, r18
    13bc:	82 2b       	or	r24, r18
    13be:	92 95       	swap	r25
    13c0:	96 95       	lsr	r25
    13c2:	96 95       	lsr	r25
    13c4:	93 70       	andi	r25, 0x03	; 3
    13c6:	80 93 e8 02 	sts	0x02E8, r24
    13ca:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    13cc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    13ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d0:	98 2f       	mov	r25, r24
    13d2:	93 70       	andi	r25, 0x03	; 3
    13d4:	20 93 ea 02 	sts	0x02EA, r18
    13d8:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    13da:	98 2f       	mov	r25, r24
    13dc:	96 95       	lsr	r25
    13de:	96 95       	lsr	r25
    13e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13e2:	28 2f       	mov	r18, r24
    13e4:	22 95       	swap	r18
    13e6:	22 0f       	add	r18, r18
    13e8:	22 0f       	add	r18, r18
    13ea:	20 7c       	andi	r18, 0xC0	; 192
    13ec:	29 2b       	or	r18, r25
    13ee:	98 2f       	mov	r25, r24
    13f0:	96 95       	lsr	r25
    13f2:	96 95       	lsr	r25
    13f4:	93 70       	andi	r25, 0x03	; 3
    13f6:	20 93 ec 02 	sts	0x02EC, r18
    13fa:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    13fc:	98 2f       	mov	r25, r24
    13fe:	92 95       	swap	r25
    1400:	9f 70       	andi	r25, 0x0F	; 15
    1402:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1404:	28 2f       	mov	r18, r24
    1406:	22 95       	swap	r18
    1408:	20 7f       	andi	r18, 0xF0	; 240
    140a:	29 2b       	or	r18, r25
    140c:	98 2f       	mov	r25, r24
    140e:	92 95       	swap	r25
    1410:	9f 70       	andi	r25, 0x0F	; 15
    1412:	93 70       	andi	r25, 0x03	; 3
    1414:	20 93 ee 02 	sts	0x02EE, r18
    1418:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    141a:	82 95       	swap	r24
    141c:	86 95       	lsr	r24
    141e:	86 95       	lsr	r24
    1420:	83 70       	andi	r24, 0x03	; 3
    1422:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1424:	29 2f       	mov	r18, r25
    1426:	22 0f       	add	r18, r18
    1428:	22 0f       	add	r18, r18
    142a:	82 2b       	or	r24, r18
    142c:	92 95       	swap	r25
    142e:	96 95       	lsr	r25
    1430:	96 95       	lsr	r25
    1432:	93 70       	andi	r25, 0x03	; 3
    1434:	80 93 f0 02 	sts	0x02F0, r24
    1438:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    143a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    143c:	88 a1       	lds	r24, 0x48
    143e:	98 2f       	mov	r25, r24
    1440:	93 70       	andi	r25, 0x03	; 3
    1442:	20 93 f2 02 	sts	0x02F2, r18
    1446:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1448:	98 2f       	mov	r25, r24
    144a:	96 95       	lsr	r25
    144c:	96 95       	lsr	r25
    144e:	89 a1       	lds	r24, 0x49
    1450:	28 2f       	mov	r18, r24
    1452:	22 95       	swap	r18
    1454:	22 0f       	add	r18, r18
    1456:	22 0f       	add	r18, r18
    1458:	20 7c       	andi	r18, 0xC0	; 192
    145a:	29 2b       	or	r18, r25
    145c:	98 2f       	mov	r25, r24
    145e:	96 95       	lsr	r25
    1460:	96 95       	lsr	r25
    1462:	93 70       	andi	r25, 0x03	; 3
    1464:	20 93 f4 02 	sts	0x02F4, r18
    1468:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    146a:	98 2f       	mov	r25, r24
    146c:	92 95       	swap	r25
    146e:	9f 70       	andi	r25, 0x0F	; 15
    1470:	8a a1       	lds	r24, 0x4a
    1472:	28 2f       	mov	r18, r24
    1474:	22 95       	swap	r18
    1476:	20 7f       	andi	r18, 0xF0	; 240
    1478:	29 2b       	or	r18, r25
    147a:	98 2f       	mov	r25, r24
    147c:	92 95       	swap	r25
    147e:	9f 70       	andi	r25, 0x0F	; 15
    1480:	93 70       	andi	r25, 0x03	; 3
    1482:	20 93 f6 02 	sts	0x02F6, r18
    1486:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1488:	82 95       	swap	r24
    148a:	86 95       	lsr	r24
    148c:	86 95       	lsr	r24
    148e:	83 70       	andi	r24, 0x03	; 3
    1490:	9b a1       	lds	r25, 0x4b
    1492:	29 2f       	mov	r18, r25
    1494:	22 0f       	add	r18, r18
    1496:	22 0f       	add	r18, r18
    1498:	82 2b       	or	r24, r18
    149a:	92 95       	swap	r25
    149c:	96 95       	lsr	r25
    149e:	96 95       	lsr	r25
    14a0:	93 70       	andi	r25, 0x03	; 3
    14a2:	80 93 f8 02 	sts	0x02F8, r24
    14a6:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    14a8:	2c a1       	lds	r18, 0x4c
    14aa:	8d a1       	lds	r24, 0x4d
    14ac:	98 2f       	mov	r25, r24
    14ae:	93 70       	andi	r25, 0x03	; 3
    14b0:	20 93 fa 02 	sts	0x02FA, r18
    14b4:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    14b6:	98 2f       	mov	r25, r24
    14b8:	96 95       	lsr	r25
    14ba:	96 95       	lsr	r25
    14bc:	8e a1       	lds	r24, 0x4e
    14be:	28 2f       	mov	r18, r24
    14c0:	22 95       	swap	r18
    14c2:	22 0f       	add	r18, r18
    14c4:	22 0f       	add	r18, r18
    14c6:	20 7c       	andi	r18, 0xC0	; 192
    14c8:	29 2b       	or	r18, r25
    14ca:	86 95       	lsr	r24
    14cc:	86 95       	lsr	r24
    14ce:	98 2f       	mov	r25, r24
    14d0:	93 70       	andi	r25, 0x03	; 3
    14d2:	20 93 fc 02 	sts	0x02FC, r18
    14d6:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    14d8:	1f a1       	lds	r17, 0x4f
    14da:	10 93 fe 02 	sts	0x02FE, r17
	current_patch.byte_2 = loaded_patch.byte_2;
    14de:	68 a5       	lds	r22, 0x68
    14e0:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    14e4:	89 a5       	lds	r24, 0x69
    14e6:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    14ea:	9a a5       	lds	r25, 0x6a
    14ec:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    14f0:	7b a5       	lds	r23, 0x6b
    14f2:	70 93 02 03 	sts	0x0302, r23
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    14f6:	de 01       	movw	r26, r28
    14f8:	9c 96       	adiw	r26, 0x2c	; 44
    14fa:	ef ef       	ldi	r30, 0xFF	; 255
    14fc:	f1 e0       	ldi	r31, 0x01	; 1
    14fe:	28 e0       	ldi	r18, 0x08	; 8
    1500:	01 90       	ld	r0, Z+
    1502:	0d 92       	st	X+, r0
    1504:	21 50       	subi	r18, 0x01	; 1
    1506:	e1 f7       	brne	.-8      	; 0x1500 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    1508:	e9 2f       	mov	r30, r25
    150a:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	9f 01       	movw	r18, r30
    1510:	22 0f       	add	r18, r18
    1512:	33 1f       	adc	r19, r19
    1514:	22 0f       	add	r18, r18
    1516:	33 1f       	adc	r19, r19
    1518:	a9 01       	movw	r20, r18
    151a:	44 0f       	add	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	44 0f       	add	r20, r20
    1520:	55 1f       	adc	r21, r21
    1522:	44 0f       	add	r20, r20
    1524:	55 1f       	adc	r21, r21
    1526:	42 1b       	sub	r20, r18
    1528:	53 0b       	sbc	r21, r19
    152a:	4e 0f       	add	r20, r30
    152c:	5f 1f       	adc	r21, r31
    152e:	55 95       	asr	r21
    1530:	47 95       	ror	r20
    1532:	55 95       	asr	r21
    1534:	47 95       	ror	r20
    1536:	55 95       	asr	r21
    1538:	47 95       	ror	r20
    153a:	55 95       	asr	r21
    153c:	47 95       	ror	r20
    153e:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1540:	fe 01       	movw	r30, r28
    1542:	e4 0f       	add	r30, r20
    1544:	f1 1d       	adc	r31, r1
    1546:	24 a5       	lds	r18, 0x64
    1548:	20 93 05 03 	sts	0x0305, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    154c:	de 01       	movw	r26, r28
    154e:	d4 96       	adiw	r26, 0x34	; 52
    1550:	e7 e0       	ldi	r30, 0x07	; 7
    1552:	f2 e0       	ldi	r31, 0x02	; 2
    1554:	28 e0       	ldi	r18, 0x08	; 8
    1556:	01 90       	ld	r0, Z+
    1558:	0d 92       	st	X+, r0
    155a:	21 50       	subi	r18, 0x01	; 1
    155c:	e1 f7       	brne	.-8      	; 0x1556 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    155e:	29 2f       	mov	r18, r25
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	20 7e       	andi	r18, 0xE0	; 224
    1564:	30 70       	andi	r19, 0x00	; 0
    1566:	35 95       	asr	r19
    1568:	27 95       	ror	r18
    156a:	35 95       	asr	r19
    156c:	27 95       	ror	r18
    156e:	35 95       	asr	r19
    1570:	27 95       	ror	r18
    1572:	83 70       	andi	r24, 0x03	; 3
    1574:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    1576:	42 2f       	mov	r20, r18
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	ca 01       	movw	r24, r20
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	9c 01       	movw	r18, r24
    1586:	22 0f       	add	r18, r18
    1588:	33 1f       	adc	r19, r19
    158a:	22 0f       	add	r18, r18
    158c:	33 1f       	adc	r19, r19
    158e:	22 0f       	add	r18, r18
    1590:	33 1f       	adc	r19, r19
    1592:	28 1b       	sub	r18, r24
    1594:	39 0b       	sbc	r19, r25
    1596:	42 0f       	add	r20, r18
    1598:	53 1f       	adc	r21, r19
    159a:	ca 01       	movw	r24, r20
    159c:	95 95       	asr	r25
    159e:	87 95       	ror	r24
    15a0:	95 95       	asr	r25
    15a2:	87 95       	ror	r24
    15a4:	95 95       	asr	r25
    15a6:	87 95       	ror	r24
    15a8:	95 95       	asr	r25
    15aa:	87 95       	ror	r24
    15ac:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    15ae:	fe 01       	movw	r30, r28
    15b0:	e8 0f       	add	r30, r24
    15b2:	f1 1d       	adc	r31, r1
    15b4:	84 a9       	sts	0x44, r24
    15b6:	80 93 06 03 	sts	0x0306, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    15ba:	de 01       	movw	r26, r28
    15bc:	dc 96       	adiw	r26, 0x3c	; 60
    15be:	ef e0       	ldi	r30, 0x0F	; 15
    15c0:	f2 e0       	ldi	r31, 0x02	; 2
    15c2:	88 e0       	ldi	r24, 0x08	; 8
    15c4:	01 90       	ld	r0, Z+
    15c6:	0d 92       	st	X+, r0
    15c8:	81 50       	subi	r24, 0x01	; 1
    15ca:	e1 f7       	brne	.-8      	; 0x15c4 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    15cc:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    15ce:	46 2f       	mov	r20, r22
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	ca 01       	movw	r24, r20
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	9c 01       	movw	r18, r24
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	22 0f       	add	r18, r18
    15e4:	33 1f       	adc	r19, r19
    15e6:	22 0f       	add	r18, r18
    15e8:	33 1f       	adc	r19, r19
    15ea:	28 1b       	sub	r18, r24
    15ec:	39 0b       	sbc	r19, r25
    15ee:	42 0f       	add	r20, r18
    15f0:	53 1f       	adc	r21, r19
    15f2:	ca 01       	movw	r24, r20
    15f4:	95 95       	asr	r25
    15f6:	87 95       	ror	r24
    15f8:	95 95       	asr	r25
    15fa:	87 95       	ror	r24
    15fc:	95 95       	asr	r25
    15fe:	87 95       	ror	r24
    1600:	95 95       	asr	r25
    1602:	87 95       	ror	r24
    1604:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1606:	fe 01       	movw	r30, r28
    1608:	e8 0f       	add	r30, r24
    160a:	f1 1d       	adc	r31, r1
    160c:	84 ad       	sts	0x64, r24
    160e:	80 93 07 03 	sts	0x0307, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1612:	27 2f       	mov	r18, r23
    1614:	26 95       	lsr	r18
    1616:	27 95       	ror	r18
    1618:	22 27       	eor	r18, r18
    161a:	27 95       	ror	r18
    161c:	87 2f       	mov	r24, r23
    161e:	81 70       	andi	r24, 0x01	; 1
    1620:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1622:	87 2f       	mov	r24, r23
    1624:	86 95       	lsr	r24
    1626:	86 95       	lsr	r24
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	81 70       	andi	r24, 0x01	; 1
    162c:	90 70       	andi	r25, 0x00	; 0
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1636:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1638:	87 2f       	mov	r24, r23
    163a:	86 95       	lsr	r24
    163c:	86 95       	lsr	r24
    163e:	86 95       	lsr	r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	81 70       	andi	r24, 0x01	; 1
    1644:	90 70       	andi	r25, 0x00	; 0
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    164a:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    164c:	87 2f       	mov	r24, r23
    164e:	82 95       	swap	r24
    1650:	8f 70       	andi	r24, 0x0F	; 15
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	81 70       	andi	r24, 0x01	; 1
    1656:	90 70       	andi	r25, 0x00	; 0
    1658:	82 95       	swap	r24
    165a:	92 95       	swap	r25
    165c:	90 7f       	andi	r25, 0xF0	; 240
    165e:	98 27       	eor	r25, r24
    1660:	80 7f       	andi	r24, 0xF0	; 240
    1662:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1664:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    1666:	87 2f       	mov	r24, r23
    1668:	82 95       	swap	r24
    166a:	86 95       	lsr	r24
    166c:	87 70       	andi	r24, 0x07	; 7
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	81 70       	andi	r24, 0x01	; 1
    1672:	90 70       	andi	r25, 0x00	; 0
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	82 95       	swap	r24
    167a:	92 95       	swap	r25
    167c:	90 7f       	andi	r25, 0xF0	; 240
    167e:	98 27       	eor	r25, r24
    1680:	80 7f       	andi	r24, 0xF0	; 240
    1682:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1684:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1686:	87 2f       	mov	r24, r23
    1688:	82 95       	swap	r24
    168a:	86 95       	lsr	r24
    168c:	86 95       	lsr	r24
    168e:	83 70       	andi	r24, 0x03	; 3
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	81 70       	andi	r24, 0x01	; 1
    1694:	90 70       	andi	r25, 0x00	; 0
    1696:	00 24       	eor	r0, r0
    1698:	96 95       	lsr	r25
    169a:	87 95       	ror	r24
    169c:	07 94       	ror	r0
    169e:	96 95       	lsr	r25
    16a0:	87 95       	ror	r24
    16a2:	07 94       	ror	r0
    16a4:	98 2f       	mov	r25, r24
    16a6:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    16a8:	82 2b       	or	r24, r18
    16aa:	80 93 77 03 	sts	0x0377, r24
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
	
	switch_states.byte2 =	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    16ae:	77 1f       	adc	r23, r23
    16b0:	77 27       	eor	r23, r23
    16b2:	77 1f       	adc	r23, r23
    16b4:	77 0f       	add	r23, r23
    16b6:	77 0f       	add	r23, r23
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    16b8:	81 2f       	mov	r24, r17
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	81 70       	andi	r24, 0x01	; 1
    16be:	90 70       	andi	r25, 0x00	; 0
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
	
	switch_states.byte2 =	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    16cc:	87 2b       	or	r24, r23
    16ce:	80 93 79 03 	sts	0x0379, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    16d2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <lock_pots>
	
	if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
    16d6:	80 91 04 03 	lds	r24, 0x0304
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	29 f4       	brne	.+10     	; 0x16e8 <load_patch+0x5a6>
    16de:	80 91 79 03 	lds	r24, 0x0379
    16e2:	8f 77       	andi	r24, 0x7F	; 127
    16e4:	80 93 79 03 	sts	0x0379, r24
	
	current_patch.mode = MEMORY;
    16e8:	10 92 04 03 	sts	0x0304, r1
	
}
    16ec:	cd 5b       	subi	r28, 0xBD	; 189
    16ee:	df 4f       	sbci	r29, 0xFF	; 255
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	08 95       	ret

00001702 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1702:	90 91 05 03 	lds	r25, 0x0305
	if (vco == VCO2) n = octave_index.vco2;
    1706:	60 3f       	cpi	r22, 0xF0	; 240
    1708:	11 f4       	brne	.+4      	; 0x170e <transpose_note+0xc>
    170a:	90 91 06 03 	lds	r25, 0x0306

	note = (n*12) + note; //calculate MIDI note after octave addition
    170e:	29 2f       	mov	r18, r25
    1710:	22 0f       	add	r18, r18
    1712:	92 0f       	add	r25, r18
    1714:	99 0f       	add	r25, r25
    1716:	99 0f       	add	r25, r25
    1718:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    171a:	89 38       	cpi	r24, 0x89	; 137
    171c:	08 f0       	brcs	.+2      	; 0x1720 <transpose_note+0x1e>
    171e:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1720:	08 95       	ret

00001722 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1722:	80 91 77 03 	lds	r24, 0x0377
    1726:	98 2f       	mov	r25, r24
    1728:	96 95       	lsr	r25
    172a:	96 95       	lsr	r25
    172c:	96 95       	lsr	r25
    172e:	90 ff       	sbrs	r25, 0
    1730:	0e c0       	rjmp	.+28     	; 0x174e <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1732:	90 91 05 03 	lds	r25, 0x0305
    1736:	9f 5f       	subi	r25, 0xFF	; 255
    1738:	90 93 05 03 	sts	0x0305, r25
    173c:	95 30       	cpi	r25, 0x05	; 5
    173e:	19 f4       	brne	.+6      	; 0x1746 <update_octave_range+0x24>
    1740:	94 e0       	ldi	r25, 0x04	; 4
    1742:	90 93 05 03 	sts	0x0305, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1746:	98 e0       	ldi	r25, 0x08	; 8
    1748:	89 27       	eor	r24, r25
    174a:	80 93 77 03 	sts	0x0377, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    174e:	80 91 78 03 	lds	r24, 0x0378
    1752:	98 2f       	mov	r25, r24
    1754:	96 95       	lsr	r25
    1756:	96 95       	lsr	r25
    1758:	96 95       	lsr	r25
    175a:	90 ff       	sbrs	r25, 0
    175c:	0b c0       	rjmp	.+22     	; 0x1774 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    175e:	90 91 05 03 	lds	r25, 0x0305
    1762:	99 23       	and	r25, r25
    1764:	19 f0       	breq	.+6      	; 0x176c <update_octave_range+0x4a>
    1766:	91 50       	subi	r25, 0x01	; 1
    1768:	90 93 05 03 	sts	0x0305, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    176c:	98 e0       	ldi	r25, 0x08	; 8
    176e:	89 27       	eor	r24, r25
    1770:	80 93 78 03 	sts	0x0378, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1774:	80 91 05 03 	lds	r24, 0x0305
    1778:	e1 e2       	ldi	r30, 0x21	; 33
    177a:	f2 e0       	ldi	r31, 0x02	; 2
    177c:	e8 0f       	add	r30, r24
    177e:	f1 1d       	adc	r31, r1
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	00 80       	ld	r0, Z
    1786:	02 c0       	rjmp	.+4      	; 0x178c <update_octave_range+0x6a>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <update_octave_range+0x66>
    1790:	58 2f       	mov	r21, r24
    1792:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1796:	90 91 78 03 	lds	r25, 0x0378
    179a:	29 2f       	mov	r18, r25
    179c:	26 95       	lsr	r18
    179e:	26 95       	lsr	r18
    17a0:	20 ff       	sbrs	r18, 0
    17a2:	0e c0       	rjmp	.+28     	; 0x17c0 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    17a4:	80 91 06 03 	lds	r24, 0x0306
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	80 93 06 03 	sts	0x0306, r24
    17ae:	85 30       	cpi	r24, 0x05	; 5
    17b0:	19 f4       	brne	.+6      	; 0x17b8 <update_octave_range+0x96>
    17b2:	84 e0       	ldi	r24, 0x04	; 4
    17b4:	80 93 06 03 	sts	0x0306, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	98 27       	eor	r25, r24
    17bc:	90 93 78 03 	sts	0x0378, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    17c0:	90 91 78 03 	lds	r25, 0x0378
    17c4:	29 2f       	mov	r18, r25
    17c6:	26 95       	lsr	r18
    17c8:	20 ff       	sbrs	r18, 0
    17ca:	0b c0       	rjmp	.+22     	; 0x17e2 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    17cc:	80 91 06 03 	lds	r24, 0x0306
    17d0:	88 23       	and	r24, r24
    17d2:	19 f0       	breq	.+6      	; 0x17da <update_octave_range+0xb8>
    17d4:	81 50       	subi	r24, 0x01	; 1
    17d6:	80 93 06 03 	sts	0x0306, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	98 27       	eor	r25, r24
    17de:	90 93 78 03 	sts	0x0378, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    17e2:	40 91 00 03 	lds	r20, 0x0300
    17e6:	4c 7f       	andi	r20, 0xFC	; 252
    17e8:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    17ec:	90 91 06 03 	lds	r25, 0x0306
    17f0:	93 30       	cpi	r25, 0x03	; 3
    17f2:	88 f0       	brcs	.+34     	; 0x1816 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    17f4:	ec e1       	ldi	r30, 0x1C	; 28
    17f6:	f2 e0       	ldi	r31, 0x02	; 2
    17f8:	e9 0f       	add	r30, r25
    17fa:	f1 1d       	adc	r31, r1
    17fc:	21 e0       	ldi	r18, 0x01	; 1
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	c9 01       	movw	r24, r18
    1802:	00 80       	ld	r0, Z
    1804:	02 c0       	rjmp	.+4      	; 0x180a <update_octave_range+0xe8>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <update_octave_range+0xe4>
    180e:	84 2b       	or	r24, r20
    1810:	80 93 00 03 	sts	0x0300, r24
    1814:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1816:	ec e1       	ldi	r30, 0x1C	; 28
    1818:	f2 e0       	ldi	r31, 0x02	; 2
    181a:	e9 0f       	add	r30, r25
    181c:	f1 1d       	adc	r31, r1
    181e:	21 e0       	ldi	r18, 0x01	; 1
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	c9 01       	movw	r24, r18
    1824:	00 80       	ld	r0, Z
    1826:	02 c0       	rjmp	.+4      	; 0x182c <update_octave_range+0x10a>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <update_octave_range+0x106>
    1830:	85 2b       	or	r24, r21
    1832:	80 93 01 03 	sts	0x0301, r24
    1836:	08 95       	ret

00001838 <update_patch_programmer>:
	
}

void update_patch_programmer(void) {
	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1838:	80 91 79 03 	lds	r24, 0x0379
    183c:	98 2f       	mov	r25, r24
    183e:	92 95       	swap	r25
    1840:	96 95       	lsr	r25
    1842:	96 95       	lsr	r25
    1844:	93 70       	andi	r25, 0x03	; 3
    1846:	90 ff       	sbrs	r25, 0
    1848:	15 c0       	rjmp	.+42     	; 0x1874 <update_patch_programmer+0x3c>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    184a:	90 e4       	ldi	r25, 0x40	; 64
    184c:	89 27       	eor	r24, r25
    184e:	80 93 79 03 	sts	0x0379, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1852:	80 91 03 03 	lds	r24, 0x0303
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	80 93 03 03 	sts	0x0303, r24
    185c:	85 32       	cpi	r24, 0x25	; 37
    185e:	21 f4       	brne	.+8      	; 0x1868 <update_patch_programmer+0x30>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1860:	84 e2       	ldi	r24, 0x24	; 36
    1862:	80 93 03 03 	sts	0x0303, r24
    1866:	06 c0       	rjmp	.+12     	; 0x1874 <update_patch_programmer+0x3c>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1868:	90 91 04 03 	lds	r25, 0x0304
    186c:	93 30       	cpi	r25, 0x03	; 3
    186e:	11 f0       	breq	.+4      	; 0x1874 <update_patch_programmer+0x3c>
			
			load_patch(current_patch.number);
    1870:	0e 94 a1 08 	call	0x1142	; 0x1142 <load_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1874:	80 91 79 03 	lds	r24, 0x0379
    1878:	98 2f       	mov	r25, r24
    187a:	92 95       	swap	r25
    187c:	96 95       	lsr	r25
    187e:	97 70       	andi	r25, 0x07	; 7
    1880:	90 ff       	sbrs	r25, 0
    1882:	13 c0       	rjmp	.+38     	; 0x18aa <update_patch_programmer+0x72>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1884:	90 e2       	ldi	r25, 0x20	; 32
    1886:	89 27       	eor	r24, r25
    1888:	80 93 79 03 	sts	0x0379, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    188c:	80 91 03 03 	lds	r24, 0x0303
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	19 f0       	breq	.+6      	; 0x189a <update_patch_programmer+0x62>
    1894:	81 50       	subi	r24, 0x01	; 1
    1896:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) load_patch(current_patch.number);
    189a:	80 91 04 03 	lds	r24, 0x0304
    189e:	83 30       	cpi	r24, 0x03	; 3
    18a0:	21 f0       	breq	.+8      	; 0x18aa <update_patch_programmer+0x72>
    18a2:	80 91 03 03 	lds	r24, 0x0303
    18a6:	0e 94 a1 08 	call	0x1142	; 0x1142 <load_patch>
	
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    18aa:	80 91 79 03 	lds	r24, 0x0379
    18ae:	98 2f       	mov	r25, r24
    18b0:	92 95       	swap	r25
    18b2:	9f 70       	andi	r25, 0x0F	; 15
    18b4:	90 ff       	sbrs	r25, 0
    18b6:	08 c0       	rjmp	.+16     	; 0x18c8 <update_patch_programmer+0x90>
			//current_patch.mode = WRITE; //enter write mode;
			//switch_states.byte2 |= (1<<PROG_WRITE_SW); //keep 
			//lock_pots();
		//}			
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW); //toggle switch state bit
    18b8:	90 e1       	ldi	r25, 0x10	; 16
    18ba:	89 27       	eor	r24, r25
    18bc:	80 93 79 03 	sts	0x0379, r24
		save_patch(current_patch.number);
    18c0:	80 91 03 03 	lds	r24, 0x0303
    18c4:	0e 94 aa 06 	call	0xd54	; 0xd54 <save_patch>
		
		
	}
	
	
	value_to_display = current_patch.number;	
    18c8:	80 91 03 03 	lds	r24, 0x0303
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	90 93 fe 01 	sts	0x01FE, r25
    18d2:	80 93 fd 01 	sts	0x01FD, r24
	
	
}	
    18d6:	08 95       	ret

000018d8 <refresh_synth>:
	
	
void refresh_synth(void) {
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
	
	if ((switch_press) && current_patch.mode == MEMORY) { //if there are no switch presses, then what's the point of doing any of the updates? Should change the order, see if any program switches are pressed, handle them and if no other switches are pressed then just return from function
    18dc:	80 91 c1 02 	lds	r24, 0x02C1
    18e0:	88 23       	and	r24, r24
    18e2:	49 f0       	breq	.+18     	; 0x18f6 <refresh_synth+0x1e>
    18e4:	80 91 04 03 	lds	r24, 0x0304
    18e8:	88 23       	and	r24, r24
    18ea:	29 f4       	brne	.+10     	; 0x18f6 <refresh_synth+0x1e>
					
		current_patch.mode = EDIT;
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	80 93 04 03 	sts	0x0304, r24
		switch_press = 0;
    18f2:	10 92 c1 02 	sts	0x02C1, r1
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    18f6:	90 91 77 03 	lds	r25, 0x0377
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
					((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    18fa:	80 91 79 03 	lds	r24, 0x0379
    18fe:	86 95       	lsr	r24
    1900:	86 95       	lsr	r24
    1902:	68 2f       	mov	r22, r24
    1904:	67 95       	ror	r22
    1906:	66 27       	eor	r22, r22
    1908:	67 95       	ror	r22
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    190a:	29 2f       	mov	r18, r25
    190c:	21 70       	andi	r18, 0x01	; 1
    190e:	26 2b       	or	r18, r22
    1910:	69 2f       	mov	r22, r25
    1912:	66 1f       	adc	r22, r22
    1914:	66 27       	eor	r22, r22
    1916:	66 1f       	adc	r22, r22
    1918:	66 0f       	add	r22, r22
    191a:	62 2b       	or	r22, r18
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    191c:	c9 2f       	mov	r28, r25
    191e:	c6 95       	lsr	r28
    1920:	c6 95       	lsr	r28
    1922:	d0 e0       	ldi	r29, 0x00	; 0
    1924:	c1 70       	andi	r28, 0x01	; 1
    1926:	d0 70       	andi	r29, 0x00	; 0
    1928:	de 01       	movw	r26, r28
    192a:	aa 0f       	add	r26, r26
    192c:	bb 1f       	adc	r27, r27
    192e:	aa 0f       	add	r26, r26
    1930:	bb 1f       	adc	r27, r27
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1932:	6a 2b       	or	r22, r26
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1934:	a9 2f       	mov	r26, r25
    1936:	a6 95       	lsr	r26
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	a1 70       	andi	r26, 0x01	; 1
    193c:	b0 70       	andi	r27, 0x00	; 0
    193e:	fd 01       	movw	r30, r26
    1940:	ee 0f       	add	r30, r30
    1942:	ff 1f       	adc	r31, r31
    1944:	ee 0f       	add	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    194c:	a6 2f       	mov	r26, r22
    194e:	ae 2b       	or	r26, r30
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1950:	e9 2f       	mov	r30, r25
    1952:	e2 95       	swap	r30
    1954:	ef 70       	andi	r30, 0x0F	; 15
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	e1 70       	andi	r30, 0x01	; 1
    195a:	f0 70       	andi	r31, 0x00	; 0
    195c:	bf 01       	movw	r22, r30
    195e:	62 95       	swap	r22
    1960:	72 95       	swap	r23
    1962:	70 7f       	andi	r23, 0xF0	; 240
    1964:	76 27       	eor	r23, r22
    1966:	60 7f       	andi	r22, 0xF0	; 240
    1968:	76 27       	eor	r23, r22
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    196a:	ea 2f       	mov	r30, r26
    196c:	e6 2b       	or	r30, r22
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    196e:	69 2f       	mov	r22, r25
    1970:	62 95       	swap	r22
    1972:	66 95       	lsr	r22
    1974:	67 70       	andi	r22, 0x07	; 7
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	61 70       	andi	r22, 0x01	; 1
    197a:	70 70       	andi	r23, 0x00	; 0
    197c:	ab 01       	movw	r20, r22
    197e:	44 0f       	add	r20, r20
    1980:	55 1f       	adc	r21, r21
    1982:	42 95       	swap	r20
    1984:	52 95       	swap	r21
    1986:	50 7f       	andi	r21, 0xF0	; 240
    1988:	54 27       	eor	r21, r20
    198a:	40 7f       	andi	r20, 0xF0	; 240
    198c:	54 27       	eor	r21, r20
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    198e:	6e 2f       	mov	r22, r30
    1990:	64 2b       	or	r22, r20
					((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
					((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
					((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
					((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
					((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
					((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1992:	49 2f       	mov	r20, r25
    1994:	42 95       	swap	r20
    1996:	46 95       	lsr	r20
    1998:	46 95       	lsr	r20
    199a:	43 70       	andi	r20, 0x03	; 3
    199c:	50 e0       	ldi	r21, 0x00	; 0
    199e:	41 70       	andi	r20, 0x01	; 1
    19a0:	50 70       	andi	r21, 0x00	; 0
    19a2:	9a 01       	movw	r18, r20
    19a4:	00 24       	eor	r0, r0
    19a6:	36 95       	lsr	r19
    19a8:	27 95       	ror	r18
    19aa:	07 94       	ror	r0
    19ac:	36 95       	lsr	r19
    19ae:	27 95       	ror	r18
    19b0:	07 94       	ror	r0
    19b2:	32 2f       	mov	r19, r18
    19b4:	20 2d       	mov	r18, r0
		switch_press = 0;
					
	}
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    19b6:	26 2b       	or	r18, r22
    19b8:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    19bc:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    19be:	81 95       	neg	r24
    19c0:	89 27       	eor	r24, r25
    19c2:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    19c4:	89 27       	eor	r24, r25
    19c6:	0e 94 87 13 	call	0x270e	; 0x270e <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    19ca:	ed ed       	ldi	r30, 0xDD	; 221
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    19d0:	90 91 79 03 	lds	r25, 0x0379
    19d4:	96 95       	lsr	r25
    19d6:	96 95       	lsr	r25
    19d8:	96 95       	lsr	r25
    19da:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    19dc:	91 95       	neg	r25
    19de:	80 81       	ld	r24, Z
    19e0:	89 27       	eor	r24, r25
    19e2:	80 71       	andi	r24, 0x10	; 16
    19e4:	82 27       	eor	r24, r18
    19e6:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    19e8:	ee ef       	ldi	r30, 0xFE	; 254
    19ea:	f2 e0       	ldi	r31, 0x02	; 2
    19ec:	80 81       	ld	r24, Z
    19ee:	98 27       	eor	r25, r24
    19f0:	91 70       	andi	r25, 0x01	; 1
    19f2:	89 27       	eor	r24, r25
    19f4:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    19f6:	0e 94 91 0b 	call	0x1722	; 0x1722 <update_octave_range>
	
	//parse LFO data
	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    19fa:	80 91 78 03 	lds	r24, 0x0378
    19fe:	88 23       	and	r24, r24
    1a00:	64 f4       	brge	.+24     	; 0x1a1a <refresh_synth+0x142>
		
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1a02:	80 58       	subi	r24, 0x80	; 128
    1a04:	80 93 78 03 	sts	0x0378, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1a08:	80 91 07 03 	lds	r24, 0x0307
    1a0c:	8f 5f       	subi	r24, 0xFF	; 255
    1a0e:	80 93 07 03 	sts	0x0307, r24
    1a12:	85 30       	cpi	r24, 0x05	; 5
    1a14:	11 f4       	brne	.+4      	; 0x1a1a <refresh_synth+0x142>
    1a16:	10 92 07 03 	sts	0x0307, r1


	}
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1a1a:	e0 91 07 03 	lds	r30, 0x0307
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	ea 5d       	subi	r30, 0xDA	; 218
    1a26:	fd 4f       	sbci	r31, 0xFD	; 253
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	01 80       	ldd	r0, Z+1	; 0x01
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <refresh_synth+0x15c>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <refresh_synth+0x158>
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;


	}
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1a38:	90 91 ff 02 	lds	r25, 0x02FF
    1a3c:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1a3e:	89 2b       	or	r24, r25
    1a40:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1a44:	80 81       	ld	r24, Z
    1a46:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1a48:	ed ed       	ldi	r30, 0xDD	; 221
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	80 62       	ori	r24, 0x20	; 32
    1a50:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1a52:	80 81       	ld	r24, Z
    1a54:	8f 7d       	andi	r24, 0xDF	; 223
    1a56:	80 83       	st	Z, r24
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1a58:	80 91 79 03 	lds	r24, 0x0379
    1a5c:	88 23       	and	r24, r24
    1a5e:	44 f4       	brge	.+16     	; 0x1a70 <refresh_synth+0x198>
		//if (current_patch.mode == MANUAL) { //if already in manual mode 
			//
			////switch_states.byte2 ^= (1<< PROG_MANUAL_SW);			
			//
		//} else {
			switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1a60:	80 68       	ori	r24, 0x80	; 128
    1a62:	80 93 79 03 	sts	0x0379, r24
			current_patch.mode = MANUAL;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	80 93 04 03 	sts	0x0304, r24
			unlock_pots();
    1a6c:	0e 94 99 06 	call	0xd32	; 0xd32 <unlock_pots>
		//}		
		
	}
	
	update_patch_programmer();		
    1a70:	0e 94 1c 0c 	call	0x1838	; 0x1838 <update_patch_programmer>
				
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) //temporary tune button hack
    1a74:	80 91 78 03 	lds	r24, 0x0378
    1a78:	98 2f       	mov	r25, r24
    1a7a:	92 95       	swap	r25
    1a7c:	96 95       	lsr	r25
    1a7e:	97 70       	andi	r25, 0x07	; 7
    1a80:	90 ff       	sbrs	r25, 0
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <refresh_synth+0x22a>
		{ 
				
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle read switch state
    1a84:	90 e2       	ldi	r25, 0x20	; 32
    1a86:	89 27       	eor	r24, r25
    1a88:	80 93 78 03 	sts	0x0378, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1a8c:	87 e0       	ldi	r24, 0x07	; 7
    1a8e:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1a90:	cd ed       	ldi	r28, 0xDD	; 221
    1a92:	d0 e0       	ldi	r29, 0x00	; 0
    1a94:	88 81       	ld	r24, Y
    1a96:	80 62       	ori	r24, 0x20	; 32
    1a98:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1a9a:	88 81       	ld	r24, Y
    1a9c:	8f 7d       	andi	r24, 0xDF	; 223
    1a9e:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1aa0:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    1aa2:	8f e0       	ldi	r24, 0x0F	; 15
    1aa4:	6f e0       	ldi	r22, 0x0F	; 15
    1aa6:	7e e5       	ldi	r23, 0x5E	; 94
    1aa8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <set_vco_init_cv>
    1aac:	90 93 6f 03 	sts	0x036F, r25
    1ab0:	80 93 6e 03 	sts	0x036E, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    1ab4:	80 ef       	ldi	r24, 0xF0	; 240
    1ab6:	6f e0       	ldi	r22, 0x0F	; 15
    1ab8:	7e e5       	ldi	r23, 0x5E	; 94
    1aba:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <set_vco_init_cv>
    1abe:	90 93 6d 03 	sts	0x036D, r25
    1ac2:	80 93 6c 03 	sts	0x036C, r24

		tune_8ths(VCO1);
    1ac6:	8f e0       	ldi	r24, 0x0F	; 15
    1ac8:	0e 94 67 0f 	call	0x1ece	; 0x1ece <tune_8ths>
		tune_8ths(VCO2);
    1acc:	80 ef       	ldi	r24, 0xF0	; 240
    1ace:	0e 94 67 0f 	call	0x1ece	; 0x1ece <tune_8ths>
		tune_filter();
    1ad2:	0e 94 09 11 	call	0x2212	; 0x2212 <tune_filter>
		save_tuning_tables();
    1ad6:	0e 94 d7 12 	call	0x25ae	; 0x25ae <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ada:	8f e4       	ldi	r24, 0x4F	; 79
    1adc:	93 ec       	ldi	r25, 0xC3	; 195
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <refresh_synth+0x206>
    1ae2:	00 c0       	rjmp	.+0      	; 0x1ae4 <refresh_synth+0x20c>
    1ae4:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
    1ae6:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1ae8:	88 81       	ld	r24, Y
    1aea:	80 62       	ori	r24, 0x20	; 32
    1aec:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1aee:	88 81       	ld	r24, Y
    1af0:	8f 7d       	andi	r24, 0xDF	; 223
    1af2:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1af4:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    1af6:	80 91 ff 02 	lds	r24, 0x02FF
    1afa:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1afc:	80 68       	ori	r24, 0x80	; 128
    1afe:	80 93 ff 02 	sts	0x02FF, r24
				
		}
		
		
	
}
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	08 95       	ret

00001b08 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1b08:	88 ed       	ldi	r24, 0xD8	; 216
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1b14:	81 ee       	ldi	r24, 0xE1	; 225
    1b16:	91 e0       	ldi	r25, 0x01	; 1
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1b20:	82 ee       	ldi	r24, 0xE2	; 226
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1b2c:	82 eb       	ldi	r24, 0xB2	; 178
    1b2e:	92 e0       	ldi	r25, 0x02	; 2
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1b38:	8a ed       	ldi	r24, 0xDA	; 218
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1b44:	8f ed       	ldi	r24, 0xDF	; 223
    1b46:	91 e0       	ldi	r25, 0x01	; 1
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1b50:	80 ee       	ldi	r24, 0xE0	; 224
    1b52:	91 e0       	ldi	r25, 0x01	; 1
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1b5c:	81 ed       	ldi	r24, 0xD1	; 209
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1b68:	86 ed       	ldi	r24, 0xD6	; 214
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1b74:	82 ed       	ldi	r24, 0xD2	; 210
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1b80:	83 ed       	ldi	r24, 0xD3	; 211
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1b8c:	84 ed       	ldi	r24, 0xD4	; 212
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	6f ef       	ldi	r22, 0xFF	; 255
    1b92:	7f e3       	ldi	r23, 0x3F	; 63
    1b94:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1b98:	85 ed       	ldi	r24, 0xD5	; 213
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	70 e0       	ldi	r23, 0x00	; 0
    1ba0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1ba4:	89 ed       	ldi	r24, 0xD9	; 217
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1bb0:	8e ec       	ldi	r24, 0xCE	; 206
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1bbc:	8c ec       	ldi	r24, 0xCC	; 204
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1bc8:	8a ec       	ldi	r24, 0xCA	; 202
    1bca:	91 e0       	ldi	r25, 0x01	; 1
    1bcc:	6f ef       	ldi	r22, 0xFF	; 255
    1bce:	7f e3       	ldi	r23, 0x3F	; 63
    1bd0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1bd4:	88 ec       	ldi	r24, 0xC8	; 200
    1bd6:	91 e0       	ldi	r25, 0x01	; 1
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1be0:	80 ed       	ldi	r24, 0xD0	; 208
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1bec:	83 ee       	ldi	r24, 0xE3	; 227
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1bf8:	84 ee       	ldi	r24, 0xE4	; 228
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	70 e0       	ldi	r23, 0x00	; 0
    1c00:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}	
    1c04:	08 95       	ret

00001c06 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1c06:	2f 92       	push	r2
    1c08:	3f 92       	push	r3
    1c0a:	4f 92       	push	r4
    1c0c:	5f 92       	push	r5
    1c0e:	6f 92       	push	r6
    1c10:	7f 92       	push	r7
    1c12:	8f 92       	push	r8
    1c14:	9f 92       	push	r9
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	2c 97       	sbiw	r28, 0x0c	; 12
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	08 2f       	mov	r16, r24
    1c3c:	78 87       	std	Y+8, r23	; 0x08
    1c3e:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1c40:	80 91 74 03 	lds	r24, 0x0374
    1c44:	83 60       	ori	r24, 0x03	; 3
    1c46:	80 93 74 03 	sts	0x0374, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1c4a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1c4e:	10 92 73 03 	sts	0x0373, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1c52:	0f 30       	cpi	r16, 0x0F	; 15
    1c54:	e1 f4       	brne	.+56     	; 0x1c8e <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1c56:	0f 2e       	mov	r0, r31
    1c58:	f6 ee       	ldi	r31, 0xE6	; 230
    1c5a:	4f 2e       	mov	r4, r31
    1c5c:	f1 e0       	ldi	r31, 0x01	; 1
    1c5e:	5f 2e       	mov	r5, r31
    1c60:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1c62:	0f 2e       	mov	r0, r31
    1c64:	fe ed       	ldi	r31, 0xDE	; 222
    1c66:	2f 2e       	mov	r2, r31
    1c68:	f1 e0       	ldi	r31, 0x01	; 1
    1c6a:	3f 2e       	mov	r3, r31
    1c6c:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1c6e:	23 ee       	ldi	r18, 0xE3	; 227
    1c70:	31 e0       	ldi	r19, 0x01	; 1
    1c72:	3a 83       	std	Y+2, r19	; 0x02
    1c74:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1c76:	0f 2e       	mov	r0, r31
    1c78:	fc ed       	ldi	r31, 0xDC	; 220
    1c7a:	8f 2e       	mov	r8, r31
    1c7c:	f1 e0       	ldi	r31, 0x01	; 1
    1c7e:	9f 2e       	mov	r9, r31
    1c80:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1c82:	82 e7       	ldi	r24, 0x72	; 114
    1c84:	96 e0       	ldi	r25, 0x06	; 6
    1c86:	9a 87       	std	Y+10, r25	; 0x0a
    1c88:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	1b c0       	rjmp	.+54     	; 0x1cc4 <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1c8e:	0f 2e       	mov	r0, r31
    1c90:	f5 ee       	ldi	r31, 0xE5	; 229
    1c92:	4f 2e       	mov	r4, r31
    1c94:	f1 e0       	ldi	r31, 0x01	; 1
    1c96:	5f 2e       	mov	r5, r31
    1c98:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1c9a:	0f 2e       	mov	r0, r31
    1c9c:	f7 ed       	ldi	r31, 0xD7	; 215
    1c9e:	2f 2e       	mov	r2, r31
    1ca0:	f1 e0       	ldi	r31, 0x01	; 1
    1ca2:	3f 2e       	mov	r3, r31
    1ca4:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1ca6:	e4 ee       	ldi	r30, 0xE4	; 228
    1ca8:	f1 e0       	ldi	r31, 0x01	; 1
    1caa:	fa 83       	std	Y+2, r31	; 0x02
    1cac:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1cae:	0f 2e       	mov	r0, r31
    1cb0:	fd ed       	ldi	r31, 0xDD	; 221
    1cb2:	8f 2e       	mov	r8, r31
    1cb4:	f1 e0       	ldi	r31, 0x01	; 1
    1cb6:	9f 2e       	mov	r9, r31
    1cb8:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1cba:	20 e7       	ldi	r18, 0x70	; 112
    1cbc:	36 e0       	ldi	r19, 0x06	; 6
    1cbe:	3a 87       	std	Y+10, r19	; 0x0a
    1cc0:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1cc2:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1cc4:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1cc6:	ed ed       	ldi	r30, 0xDD	; 221
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 64       	ori	r24, 0x40	; 64
    1cce:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8f 7b       	andi	r24, 0xBF	; 191
    1cd4:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1cd6:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1cd8:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1cda:	84 b5       	in	r24, 0x24	; 36
    1cdc:	8f 60       	ori	r24, 0x0F	; 15
    1cde:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1ce4:	ee e6       	ldi	r30, 0x6E	; 110
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	90 81       	ld	r25, Z
    1cea:	92 60       	ori	r25, 0x02	; 2
    1cec:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1cee:	80 93 75 03 	sts	0x0375, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1cf2:	8d e0       	ldi	r24, 0x0D	; 13
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1cfa:	80 2f       	mov	r24, r16
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	8c 01       	movw	r16, r24
    1d00:	0f 5f       	subi	r16, 0xFF	; 255
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1d04:	0f 2e       	mov	r0, r31
    1d06:	f8 ed       	ldi	r31, 0xD8	; 216
    1d08:	ef 2e       	mov	r14, r31
    1d0a:	f1 e0       	ldi	r31, 0x01	; 1
    1d0c:	ff 2e       	mov	r15, r31
    1d0e:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1d10:	0f 2e       	mov	r0, r31
    1d12:	f4 ed       	ldi	r31, 0xD4	; 212
    1d14:	cf 2e       	mov	r12, r31
    1d16:	f1 e0       	ldi	r31, 0x01	; 1
    1d18:	df 2e       	mov	r13, r31
    1d1a:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1d1c:	0f 2e       	mov	r0, r31
    1d1e:	fa ec       	ldi	r31, 0xCA	; 202
    1d20:	af 2e       	mov	r10, r31
    1d22:	f1 e0       	ldi	r31, 0x01	; 1
    1d24:	bf 2e       	mov	r11, r31
    1d26:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1d28:	0f 2e       	mov	r0, r31
    1d2a:	fb ec       	ldi	r31, 0xCB	; 203
    1d2c:	6f 2e       	mov	r6, r31
    1d2e:	f1 e0       	ldi	r31, 0x01	; 1
    1d30:	7f 2e       	mov	r7, r31
    1d32:	f0 2d       	mov	r31, r0
    1d34:	e0 e0       	ldi	r30, 0x00	; 0
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	fc 87       	std	Y+12, r31	; 0x0c
    1d3a:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	0b 80       	ldd	r0, Y+3	; 0x03
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <set_vco_init_cv+0x142>
    1d44:	22 0f       	add	r18, r18
    1d46:	33 1f       	adc	r19, r19
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <set_vco_init_cv+0x13e>
    1d4c:	3e 83       	std	Y+6, r19	; 0x06
    1d4e:	2d 83       	std	Y+5, r18	; 0x05
    1d50:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d52:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d54:	82 2b       	or	r24, r18
    1d56:	93 2b       	or	r25, r19
    1d58:	9c 87       	std	Y+12, r25	; 0x0c
    1d5a:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1d5c:	c4 01       	movw	r24, r8
    1d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d62:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
		
		count_finished = FALSE;
    1d66:	10 92 73 03 	sts	0x0373, r1
		period_counter = 0;
    1d6a:	10 92 76 03 	sts	0x0376, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1d6e:	8f e0       	ldi	r24, 0x0F	; 15
    1d70:	e8 e1       	ldi	r30, 0x18	; 24
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	a8 95       	wdr
    1d7a:	e0 93 60 00 	sts	0x0060, r30
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1d84:	80 91 73 03 	lds	r24, 0x0373
    1d88:	88 23       	and	r24, r24
    1d8a:	89 f5       	brne	.+98     	; 0x1dee <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1d8c:	c8 01       	movw	r24, r16
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1d94:	c4 01       	movw	r24, r8
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1d9e:	c1 01       	movw	r24, r2
    1da0:	6f ef       	ldi	r22, 0xFF	; 255
    1da2:	7f e3       	ldi	r23, 0x3F	; 63
    1da4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1da8:	c7 01       	movw	r24, r14
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	70 e0       	ldi	r23, 0x00	; 0
    1dae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1db2:	c6 01       	movw	r24, r12
    1db4:	6f ef       	ldi	r22, 0xFF	; 255
    1db6:	7f e3       	ldi	r23, 0x3F	; 63
    1db8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1dbc:	c5 01       	movw	r24, r10
    1dbe:	6f ef       	ldi	r22, 0xFF	; 255
    1dc0:	7f e3       	ldi	r23, 0x3F	; 63
    1dc2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1dc6:	c3 01       	movw	r24, r6
    1dc8:	6f ef       	ldi	r22, 0xFF	; 255
    1dca:	7f e3       	ldi	r23, 0x3F	; 63
    1dcc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd4:	6f ef       	ldi	r22, 0xFF	; 255
    1dd6:	7f e3       	ldi	r23, 0x3F	; 63
    1dd8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1ddc:	c2 01       	movw	r24, r4
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1de6:	80 91 73 03 	lds	r24, 0x0373
    1dea:	88 23       	and	r24, r24
    1dec:	79 f2       	breq	.-98     	; 0x1d8c <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1dee:	88 e1       	ldi	r24, 0x18	; 24
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	80 93 60 00 	sts	0x0060, r24
    1df8:	10 92 60 00 	sts	0x0060, r1
    1dfc:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1dfe:	80 91 71 03 	lds	r24, 0x0371
    1e02:	90 91 72 03 	lds	r25, 0x0372
    1e06:	ef 81       	ldd	r30, Y+7	; 0x07
    1e08:	f8 85       	ldd	r31, Y+8	; 0x08
    1e0a:	e8 17       	cp	r30, r24
    1e0c:	f9 07       	cpc	r31, r25
    1e0e:	20 f0       	brcs	.+8      	; 0x1e18 <set_vco_init_cv+0x212>
    1e10:	80 91 af 02 	lds	r24, 0x02AF
    1e14:	88 23       	and	r24, r24
    1e16:	51 f4       	brne	.+20     	; 0x1e2c <set_vco_init_cv+0x226>
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1c:	80 95       	com	r24
    1e1e:	90 95       	com	r25
    1e20:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e22:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e24:	28 23       	and	r18, r24
    1e26:	39 23       	and	r19, r25
    1e28:	3c 87       	std	Y+12, r19	; 0x0c
    1e2a:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	9c 83       	std	Y+4, r25	; 0x04
    1e3a:	8b 83       	std	Y+3, r24	; 0x03
    1e3c:	ef ef       	ldi	r30, 0xFF	; 255
    1e3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e40:	9e 07       	cpc	r25, r30
    1e42:	09 f0       	breq	.+2      	; 0x1e46 <set_vco_init_cv+0x240>
    1e44:	7b cf       	rjmp	.-266    	; 0x1d3c <set_vco_init_cv+0x136>
    1e46:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e48:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e4a:	3e 83       	std	Y+6, r19	; 0x06
    1e4c:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1e4e:	88 ec       	ldi	r24, 0xC8	; 200
    1e50:	91 e0       	ldi	r25, 0x01	; 1
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    1e5a:	89 ec       	ldi	r24, 0xC9	; 201
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    1e66:	84 ed       	ldi	r24, 0xD4	; 212
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    1e72:	88 ed       	ldi	r24, 0xD8	; 216
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    1e7e:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1e80:	ee e6       	ldi	r30, 0x6E	; 110
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	8d 7f       	andi	r24, 0xFD	; 253
    1e88:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    1e8a:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	6d 81       	ldd	r22, Y+5	; 0x05
    1e92:	7e 81       	ldd	r23, Y+6	; 0x06
    1e94:	0e 94 42 1b 	call	0x3684	; 0x3684 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	2c 96       	adiw	r28, 0x0c	; 12
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	df 90       	pop	r13
    1eb6:	cf 90       	pop	r12
    1eb8:	bf 90       	pop	r11
    1eba:	af 90       	pop	r10
    1ebc:	9f 90       	pop	r9
    1ebe:	8f 90       	pop	r8
    1ec0:	7f 90       	pop	r7
    1ec2:	6f 90       	pop	r6
    1ec4:	5f 90       	pop	r5
    1ec6:	4f 90       	pop	r4
    1ec8:	3f 90       	pop	r3
    1eca:	2f 90       	pop	r2
    1ecc:	08 95       	ret

00001ece <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1ece:	2f 92       	push	r2
    1ed0:	3f 92       	push	r3
    1ed2:	4f 92       	push	r4
    1ed4:	5f 92       	push	r5
    1ed6:	6f 92       	push	r6
    1ed8:	7f 92       	push	r7
    1eda:	8f 92       	push	r8
    1edc:	9f 92       	push	r9
    1ede:	af 92       	push	r10
    1ee0:	bf 92       	push	r11
    1ee2:	cf 92       	push	r12
    1ee4:	df 92       	push	r13
    1ee6:	ef 92       	push	r14
    1ee8:	ff 92       	push	r15
    1eea:	0f 93       	push	r16
    1eec:	1f 93       	push	r17
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	c0 54       	subi	r28, 0x40	; 64
    1ef8:	d0 40       	sbci	r29, 0x00	; 0
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    1f06:	de 01       	movw	r26, r28
    1f08:	11 96       	adiw	r26, 0x01	; 1
    1f0a:	e0 e3       	ldi	r30, 0x30	; 48
    1f0c:	f2 e0       	ldi	r31, 0x02	; 2
    1f0e:	80 e3       	ldi	r24, 0x30	; 48
    1f10:	01 90       	ld	r0, Z+
    1f12:	0d 92       	st	X+, r0
    1f14:	81 50       	subi	r24, 0x01	; 1
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    1f18:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1f1c:	0f 30       	cpi	r16, 0x0F	; 15
    1f1e:	11 f5       	brne	.+68     	; 0x1f64 <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    1f20:	40 90 6e 03 	lds	r4, 0x036E
    1f24:	50 90 6f 03 	lds	r5, 0x036F
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1f28:	0f 2e       	mov	r0, r31
    1f2a:	f6 ee       	ldi	r31, 0xE6	; 230
    1f2c:	8f 2e       	mov	r8, r31
    1f2e:	f1 e0       	ldi	r31, 0x01	; 1
    1f30:	9f 2e       	mov	r9, r31
    1f32:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    1f34:	0f 2e       	mov	r0, r31
    1f36:	fe ed       	ldi	r31, 0xDE	; 222
    1f38:	2f 2e       	mov	r2, r31
    1f3a:	f1 e0       	ldi	r31, 0x01	; 1
    1f3c:	3f 2e       	mov	r3, r31
    1f3e:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    1f40:	23 ee       	ldi	r18, 0xE3	; 227
    1f42:	31 e0       	ldi	r19, 0x01	; 1
    1f44:	3a ab       	sts	0x5a, r19
    1f46:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1f48:	0f 2e       	mov	r0, r31
    1f4a:	fc ed       	ldi	r31, 0xDC	; 220
    1f4c:	6f 2e       	mov	r6, r31
    1f4e:	f1 e0       	ldi	r31, 0x01	; 1
    1f50:	7f 2e       	mov	r7, r31
    1f52:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    1f54:	0a e4       	ldi	r16, 0x4A	; 74
    1f56:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    1f58:	cc 24       	eor	r12, r12
    1f5a:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    1f5c:	ee 24       	eor	r14, r14
    1f5e:	68 94       	set
    1f60:	e1 f8       	bld	r14, 1
    1f62:	22 c0       	rjmp	.+68     	; 0x1fa8 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    1f64:	40 90 6c 03 	lds	r4, 0x036C
    1f68:	50 90 6d 03 	lds	r5, 0x036D
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1f6c:	0f 2e       	mov	r0, r31
    1f6e:	f5 ee       	ldi	r31, 0xE5	; 229
    1f70:	8f 2e       	mov	r8, r31
    1f72:	f1 e0       	ldi	r31, 0x01	; 1
    1f74:	9f 2e       	mov	r9, r31
    1f76:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    1f78:	0f 2e       	mov	r0, r31
    1f7a:	f7 ed       	ldi	r31, 0xD7	; 215
    1f7c:	2f 2e       	mov	r2, r31
    1f7e:	f1 e0       	ldi	r31, 0x01	; 1
    1f80:	3f 2e       	mov	r3, r31
    1f82:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    1f84:	44 ee       	ldi	r20, 0xE4	; 228
    1f86:	51 e0       	ldi	r21, 0x01	; 1
    1f88:	5a ab       	sts	0x5a, r21
    1f8a:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1f8c:	0f 2e       	mov	r0, r31
    1f8e:	fd ed       	ldi	r31, 0xDD	; 221
    1f90:	6f 2e       	mov	r6, r31
    1f92:	f1 e0       	ldi	r31, 0x01	; 1
    1f94:	7f 2e       	mov	r7, r31
    1f96:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    1f98:	08 e2       	ldi	r16, 0x28	; 40
    1f9a:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    1f9c:	cc 24       	eor	r12, r12
    1f9e:	68 94       	set
    1fa0:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    1fa2:	ee 24       	eor	r14, r14
    1fa4:	68 94       	set
    1fa6:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    1fa8:	c3 01       	movw	r24, r6
    1faa:	b2 01       	movw	r22, r4
    1fac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    1fb0:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1fb2:	ed ed       	ldi	r30, 0xDD	; 221
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	80 64       	ori	r24, 0x40	; 64
    1fba:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1fbc:	80 81       	ld	r24, Z
    1fbe:	8f 7b       	andi	r24, 0xBF	; 191
    1fc0:	80 83       	st	Z, r24
		DATA_BUS = 0;
    1fc2:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    1fc4:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	80 93 75 03 	sts	0x0375, r24
		
		compare_match_counter = 0;	
    1fcc:	10 92 70 03 	sts	0x0370, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    1fd0:	8c 2d       	mov	r24, r12
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	24 e6       	ldi	r18, 0x64	; 100
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	82 9f       	mul	r24, r18
    1fda:	d0 01       	movw	r26, r0
    1fdc:	83 9f       	mul	r24, r19
    1fde:	b0 0d       	add	r27, r0
    1fe0:	92 9f       	mul	r25, r18
    1fe2:	b0 0d       	add	r27, r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	bc ab       	sts	0x5c, r27
    1fe8:	ab ab       	sts	0x5b, r26
    1fea:	fe 01       	movw	r30, r28
    1fec:	31 96       	adiw	r30, 0x01	; 1
    1fee:	fc af       	sts	0x7c, r31
    1ff0:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    1ff2:	98 01       	movw	r18, r16
    1ff4:	2e 5f       	subi	r18, 0xFE	; 254
    1ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff8:	21 96       	adiw	r28, 0x01	; 1
    1ffa:	3f af       	sts	0x7f, r19
    1ffc:	2e af       	sts	0x7e, r18
    1ffe:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2000:	1e ae       	sts	0xbe, r17
    2002:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2004:	0f 2e       	mov	r0, r31
    2006:	f8 ed       	ldi	r31, 0xD8	; 216
    2008:	ef 2e       	mov	r14, r31
    200a:	f1 e0       	ldi	r31, 0x01	; 1
    200c:	ff 2e       	mov	r15, r31
    200e:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    2010:	0f 2e       	mov	r0, r31
    2012:	f4 ed       	ldi	r31, 0xD4	; 212
    2014:	cf 2e       	mov	r12, r31
    2016:	f1 e0       	ldi	r31, 0x01	; 1
    2018:	df 2e       	mov	r13, r31
    201a:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    201c:	0f 2e       	mov	r0, r31
    201e:	fa ec       	ldi	r31, 0xCA	; 202
    2020:	af 2e       	mov	r10, r31
    2022:	f1 e0       	ldi	r31, 0x01	; 1
    2024:	bf 2e       	mov	r11, r31
    2026:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    2028:	eb ad       	sts	0x6b, r30
    202a:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    202c:	80 81       	ld	r24, Z
    202e:	80 93 75 03 	sts	0x0375, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2032:	84 b5       	in	r24, 0x24	; 36
    2034:	8f 60       	ori	r24, 0x0F	; 15
    2036:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    203c:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    203e:	4d ad       	sts	0x6d, r20
    2040:	5e ad       	sts	0x6e, r21
    2042:	43 30       	cpi	r20, 0x03	; 3
    2044:	51 05       	cpc	r21, r1
    2046:	24 f4       	brge	.+8      	; 0x2050 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	80 93 74 03 	sts	0x0374, r24
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	80 93 74 03 	sts	0x0374, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    2056:	81 81       	ldd	r24, Z+1	; 0x01
    2058:	92 81       	ldd	r25, Z+2	; 0x02
    205a:	9a af       	sts	0x7a, r25
    205c:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    205e:	ad e0       	ldi	r26, 0x0D	; 13
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	be ab       	sts	0x5e, r27
    2064:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    2066:	00 e0       	ldi	r16, 0x00	; 0
    2068:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    206a:	e1 e0       	ldi	r30, 0x01	; 1
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	0d a8       	sts	0x8d, r16
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <tune_8ths+0x1a8>
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	0a 94       	dec	r0
    2078:	e2 f7       	brpl	.-8      	; 0x2072 <tune_8ths+0x1a4>
    207a:	f8 af       	sts	0x78, r31
    207c:	ef ab       	sts	0x5f, r30
    207e:	0e 2b       	or	r16, r30
    2080:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    2082:	ae e6       	ldi	r26, 0x6E	; 110
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	8c 91       	ld	r24, X
    2088:	8d 7f       	andi	r24, 0xFD	; 253
    208a:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    208c:	c4 01       	movw	r24, r8
    208e:	b8 01       	movw	r22, r16
    2090:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
    2094:	e3 ef       	ldi	r30, 0xF3	; 243
    2096:	f1 e0       	ldi	r31, 0x01	; 1
    2098:	31 97       	sbiw	r30, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <tune_8ths+0x1ca>
    209c:	00 c0       	rjmp	.+0      	; 0x209e <tune_8ths+0x1d0>
    209e:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    20a0:	ae e6       	ldi	r26, 0x6E	; 110
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	8c 91       	ld	r24, X
    20a6:	82 60       	ori	r24, 0x02	; 2
    20a8:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    20aa:	10 92 73 03 	sts	0x0373, r1
				period_counter = 0;
    20ae:	10 92 76 03 	sts	0x0376, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    20b2:	e8 e1       	ldi	r30, 0x18	; 24
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	2f e0       	ldi	r18, 0x0F	; 15
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	a8 95       	wdr
    20be:	e0 93 60 00 	sts	0x0060, r30
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    20c8:	80 91 73 03 	lds	r24, 0x0373
    20cc:	88 23       	and	r24, r24
    20ce:	81 f5       	brne	.+96     	; 0x2130 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    20d0:	80 91 75 03 	lds	r24, 0x0375
    20d4:	4b a9       	sts	0x4b, r20
    20d6:	5c a9       	sts	0x4c, r21
    20d8:	48 0f       	add	r20, r24
    20da:	51 1d       	adc	r21, r1
    20dc:	ca 01       	movw	r24, r20
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    20e4:	c3 01       	movw	r24, r6
    20e6:	b2 01       	movw	r22, r4
    20e8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    20ec:	c4 01       	movw	r24, r8
    20ee:	b8 01       	movw	r22, r16
    20f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    20f4:	c7 01       	movw	r24, r14
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    20fe:	c6 01       	movw	r24, r12
    2100:	6f ef       	ldi	r22, 0xFF	; 255
    2102:	7f e3       	ldi	r23, 0x3F	; 63
    2104:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2108:	c5 01       	movw	r24, r10
    210a:	6f ef       	ldi	r22, 0xFF	; 255
    210c:	7f e3       	ldi	r23, 0x3F	; 63
    210e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    2112:	c1 01       	movw	r24, r2
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	70 e2       	ldi	r23, 0x20	; 32
    2118:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    211c:	89 a9       	sts	0x49, r24
    211e:	9a a9       	sts	0x4a, r25
    2120:	6f ef       	ldi	r22, 0xFF	; 255
    2122:	7f e3       	ldi	r23, 0x3F	; 63
    2124:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2128:	80 91 73 03 	lds	r24, 0x0373
    212c:	88 23       	and	r24, r24
    212e:	81 f2       	breq	.-96     	; 0x20d0 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    2130:	58 e1       	ldi	r21, 0x18	; 24
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	50 93 60 00 	sts	0x0060, r21
    213a:	10 92 60 00 	sts	0x0060, r1
    213e:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    2140:	80 91 71 03 	lds	r24, 0x0371
    2144:	90 91 72 03 	lds	r25, 0x0372
    2148:	a9 ad       	sts	0x69, r26
    214a:	ba ad       	sts	0x6a, r27
    214c:	a8 17       	cp	r26, r24
    214e:	b9 07       	cpc	r27, r25
    2150:	50 f0       	brcs	.+20     	; 0x2166 <tune_8ths+0x298>
    2152:	80 91 af 02 	lds	r24, 0x02AF
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	31 f4       	brne	.+12     	; 0x2166 <tune_8ths+0x298>
    215a:	8f a9       	sts	0x4f, r24
    215c:	98 ad       	sts	0x68, r25
    215e:	80 95       	com	r24
    2160:	90 95       	com	r25
    2162:	08 23       	and	r16, r24
    2164:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2166:	80 91 71 03 	lds	r24, 0x0371
    216a:	90 91 72 03 	lds	r25, 0x0372
    216e:	e9 ad       	sts	0x69, r30
    2170:	fa ad       	sts	0x6a, r31
    2172:	8e 17       	cp	r24, r30
    2174:	9f 07       	cpc	r25, r31
    2176:	21 f4       	brne	.+8      	; 0x2180 <tune_8ths+0x2b2>
    2178:	80 91 af 02 	lds	r24, 0x02AF
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	71 f0       	breq	.+28     	; 0x219c <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    2180:	f1 e0       	ldi	r31, 0x01	; 1
    2182:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2186:	2d a9       	sts	0x4d, r18
    2188:	3e a9       	sts	0x4e, r19
    218a:	21 50       	subi	r18, 0x01	; 1
    218c:	30 40       	sbci	r19, 0x00	; 0
    218e:	3e ab       	sts	0x5e, r19
    2190:	2d ab       	sts	0x5d, r18
    2192:	4f ef       	ldi	r20, 0xFF	; 255
    2194:	2f 3f       	cpi	r18, 0xFF	; 255
    2196:	34 07       	cpc	r19, r20
    2198:	09 f0       	breq	.+2      	; 0x219c <tune_8ths+0x2ce>
    219a:	67 cf       	rjmp	.-306    	; 0x206a <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    219c:	21 96       	adiw	r28, 0x01	; 1
    219e:	ae ad       	sts	0x6e, r26
    21a0:	bf ad       	sts	0x6f, r27
    21a2:	21 97       	sbiw	r28, 0x01	; 1
    21a4:	0d 93       	st	X+, r16
    21a6:	1d 93       	st	X+, r17
    21a8:	21 96       	adiw	r28, 0x01	; 1
    21aa:	bf af       	sts	0x7f, r27
    21ac:	ae af       	sts	0x7e, r26
    21ae:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    21b0:	ee e6       	ldi	r30, 0x6E	; 110
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8d 7f       	andi	r24, 0xFD	; 253
    21b8:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    21ba:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    21bc:	2d ad       	sts	0x6d, r18
    21be:	3e ad       	sts	0x6e, r19
    21c0:	2f 5f       	subi	r18, 0xFF	; 255
    21c2:	3f 4f       	sbci	r19, 0xFF	; 255
    21c4:	3e af       	sts	0x7e, r19
    21c6:	2d af       	sts	0x7d, r18
    21c8:	4b ad       	sts	0x6b, r20
    21ca:	5c ad       	sts	0x6c, r21
    21cc:	4d 5f       	subi	r20, 0xFD	; 253
    21ce:	5f 4f       	sbci	r21, 0xFF	; 255
    21d0:	5c af       	sts	0x7c, r21
    21d2:	4b af       	sts	0x7b, r20
    21d4:	20 31       	cpi	r18, 0x10	; 16
    21d6:	31 05       	cpc	r19, r1
    21d8:	09 f0       	breq	.+2      	; 0x21dc <tune_8ths+0x30e>
    21da:	26 cf       	rjmp	.-436    	; 0x2028 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		
		PORTF &= ~(1<<GATE); //turn gate off
    21dc:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    21de:	c0 5c       	subi	r28, 0xC0	; 192
    21e0:	df 4f       	sbci	r29, 0xFF	; 255
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	ff 90       	pop	r15
    21f6:	ef 90       	pop	r14
    21f8:	df 90       	pop	r13
    21fa:	cf 90       	pop	r12
    21fc:	bf 90       	pop	r11
    21fe:	af 90       	pop	r10
    2200:	9f 90       	pop	r9
    2202:	8f 90       	pop	r8
    2204:	7f 90       	pop	r7
    2206:	6f 90       	pop	r6
    2208:	5f 90       	pop	r5
    220a:	4f 90       	pop	r4
    220c:	3f 90       	pop	r3
    220e:	2f 90       	pop	r2
    2210:	08 95       	ret

00002212 <tune_filter>:
	
void tune_filter(void) {
    2212:	2f 92       	push	r2
    2214:	3f 92       	push	r3
    2216:	4f 92       	push	r4
    2218:	5f 92       	push	r5
    221a:	6f 92       	push	r6
    221c:	7f 92       	push	r7
    221e:	8f 92       	push	r8
    2220:	9f 92       	push	r9
    2222:	af 92       	push	r10
    2224:	bf 92       	push	r11
    2226:	cf 92       	push	r12
    2228:	df 92       	push	r13
    222a:	ef 92       	push	r14
    222c:	ff 92       	push	r15
    222e:	0f 93       	push	r16
    2230:	1f 93       	push	r17
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	e9 97       	sbiw	r28, 0x39	; 57
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    2246:	de 01       	movw	r26, r28
    2248:	11 96       	adiw	r26, 0x01	; 1
    224a:	e0 e6       	ldi	r30, 0x60	; 96
    224c:	f2 e0       	ldi	r31, 0x02	; 2
    224e:	8d e2       	ldi	r24, 0x2D	; 45
    2250:	01 90       	ld	r0, Z+
    2252:	0d 92       	st	X+, r0
    2254:	81 50       	subi	r24, 0x01	; 1
    2256:	e1 f7       	brne	.-8      	; 0x2250 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2258:	88 ed       	ldi	r24, 0xD8	; 216
    225a:	91 e0       	ldi	r25, 0x01	; 1
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2264:	81 ee       	ldi	r24, 0xE1	; 225
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2270:	82 ee       	ldi	r24, 0xE2	; 226
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    227c:	82 eb       	ldi	r24, 0xB2	; 178
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2288:	8a ed       	ldi	r24, 0xDA	; 218
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    2294:	8f ed       	ldi	r24, 0xDF	; 223
    2296:	91 e0       	ldi	r25, 0x01	; 1
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    22a0:	80 ee       	ldi	r24, 0xE0	; 224
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	60 e0       	ldi	r22, 0x00	; 0
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    22ac:	81 ed       	ldi	r24, 0xD1	; 209
    22ae:	91 e0       	ldi	r25, 0x01	; 1
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    22b8:	86 ed       	ldi	r24, 0xD6	; 214
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    22c4:	82 ed       	ldi	r24, 0xD2	; 210
    22c6:	91 e0       	ldi	r25, 0x01	; 1
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    22d0:	83 ed       	ldi	r24, 0xD3	; 211
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    22dc:	84 ed       	ldi	r24, 0xD4	; 212
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	6f ef       	ldi	r22, 0xFF	; 255
    22e2:	7f e3       	ldi	r23, 0x3F	; 63
    22e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    22e8:	85 ed       	ldi	r24, 0xD5	; 213
    22ea:	91 e0       	ldi	r25, 0x01	; 1
    22ec:	6f ef       	ldi	r22, 0xFF	; 255
    22ee:	7f e3       	ldi	r23, 0x3F	; 63
    22f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    22f4:	89 ed       	ldi	r24, 0xD9	; 217
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	60 e0       	ldi	r22, 0x00	; 0
    22fa:	70 e0       	ldi	r23, 0x00	; 0
    22fc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2300:	8e ec       	ldi	r24, 0xCE	; 206
    2302:	91 e0       	ldi	r25, 0x01	; 1
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    230c:	8c ec       	ldi	r24, 0xCC	; 204
    230e:	91 e0       	ldi	r25, 0x01	; 1
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2318:	8a ec       	ldi	r24, 0xCA	; 202
    231a:	91 e0       	ldi	r25, 0x01	; 1
    231c:	6f ef       	ldi	r22, 0xFF	; 255
    231e:	7f e3       	ldi	r23, 0x3F	; 63
    2320:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    2324:	88 ec       	ldi	r24, 0xC8	; 200
    2326:	91 e0       	ldi	r25, 0x01	; 1
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    2330:	80 ed       	ldi	r24, 0xD0	; 208
    2332:	91 e0       	ldi	r25, 0x01	; 1
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    233c:	83 ee       	ldi	r24, 0xE3	; 227
    233e:	91 e0       	ldi	r25, 0x01	; 1
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2348:	84 ee       	ldi	r24, 0xE4	; 228
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    2354:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2356:	ed ed       	ldi	r30, 0xDD	; 221
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	80 64       	ori	r24, 0x40	; 64
    235e:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2360:	80 81       	ld	r24, Z
    2362:	8f 7b       	andi	r24, 0xBF	; 191
    2364:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	80 93 75 03 	sts	0x0375, r24
	PORTF |= (1<<GATE); //turn gate on
    236c:	89 9a       	sbi	0x11, 1	; 17
    236e:	9e 01       	movw	r18, r28
    2370:	2f 5f       	subi	r18, 0xFF	; 255
    2372:	3f 4f       	sbci	r19, 0xFF	; 255
    2374:	3d ab       	sts	0x5d, r19
    2376:	2c ab       	sts	0x5c, r18
    2378:	8a e0       	ldi	r24, 0x0A	; 10
    237a:	93 e0       	ldi	r25, 0x03	; 3
    237c:	99 af       	sts	0x79, r25
    237e:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2380:	1f aa       	sts	0x9f, r17
    2382:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    2384:	0f 2e       	mov	r0, r31
    2386:	f4 ed       	ldi	r31, 0xD4	; 212
    2388:	af 2e       	mov	r10, r31
    238a:	f1 e0       	ldi	r31, 0x01	; 1
    238c:	bf 2e       	mov	r11, r31
    238e:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2390:	0f 2e       	mov	r0, r31
    2392:	f8 ed       	ldi	r31, 0xD8	; 216
    2394:	6f 2e       	mov	r6, r31
    2396:	f1 e0       	ldi	r31, 0x01	; 1
    2398:	7f 2e       	mov	r7, r31
    239a:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    239c:	0f 2e       	mov	r0, r31
    239e:	f5 ed       	ldi	r31, 0xD5	; 213
    23a0:	4f 2e       	mov	r4, r31
    23a2:	f1 e0       	ldi	r31, 0x01	; 1
    23a4:	5f 2e       	mov	r5, r31
    23a6:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    23a8:	0f 2e       	mov	r0, r31
    23aa:	fa ec       	ldi	r31, 0xCA	; 202
    23ac:	2f 2e       	mov	r2, r31
    23ae:	f1 e0       	ldi	r31, 0x01	; 1
    23b0:	3f 2e       	mov	r3, r31
    23b2:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    23b4:	ac a9       	sts	0x4c, r26
    23b6:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    23b8:	8c 91       	ld	r24, X
    23ba:	80 93 75 03 	sts	0x0375, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    23be:	84 b5       	in	r24, 0x24	; 36
    23c0:	8f 60       	ori	r24, 0x0F	; 15
    23c2:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    23c8:	ee e6       	ldi	r30, 0x6E	; 110
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	82 60       	ori	r24, 0x02	; 2
    23d0:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    23d2:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    23d4:	ee a9       	sts	0x4e, r30
    23d6:	ff a9       	sts	0x4f, r31
    23d8:	e2 30       	cpi	r30, 0x02	; 2
    23da:	f1 05       	cpc	r31, r1
    23dc:	24 f4       	brge	.+8      	; 0x23e6 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	80 93 74 03 	sts	0x0374, r24
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    23e6:	82 e0       	ldi	r24, 0x02	; 2
    23e8:	80 93 74 03 	sts	0x0374, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    23ec:	11 96       	adiw	r26, 0x01	; 1
    23ee:	2d 91       	ld	r18, X+
    23f0:	3c 91       	ld	r19, X
    23f2:	12 97       	sbiw	r26, 0x02	; 2
    23f4:	3b ab       	sts	0x5b, r19
    23f6:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    23f8:	8d e0       	ldi	r24, 0x0D	; 13
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9f a7       	lds	r25, 0x7f
    23fe:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2400:	ee 24       	eor	r14, r14
    2402:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2404:	0f 2e       	mov	r0, r31
    2406:	f1 ed       	ldi	r31, 0xD1	; 209
    2408:	cf 2e       	mov	r12, r31
    240a:	f1 e0       	ldi	r31, 0x01	; 1
    240c:	df 2e       	mov	r13, r31
    240e:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2410:	0f 2e       	mov	r0, r31
    2412:	f6 ed       	ldi	r31, 0xD6	; 214
    2414:	8f 2e       	mov	r8, r31
    2416:	f1 e0       	ldi	r31, 0x01	; 1
    2418:	9f 2e       	mov	r9, r31
    241a:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	fc 01       	movw	r30, r24
    2422:	0e a4       	lds	r16, 0xae
    2424:	02 c0       	rjmp	.+4      	; 0x242a <tune_filter+0x218>
    2426:	ee 0f       	add	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	0a 94       	dec	r0
    242c:	e2 f7       	brpl	.-8      	; 0x2426 <tune_filter+0x214>
    242e:	f9 ab       	sts	0x59, r31
    2430:	e8 ab       	sts	0x58, r30
    2432:	ee 2a       	or	r14, r30
    2434:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2436:	c5 01       	movw	r24, r10
    2438:	b7 01       	movw	r22, r14
    243a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
    243e:	10 92 73 03 	sts	0x0373, r1
			period_counter = 0;
    2442:	10 92 76 03 	sts	0x0376, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2446:	8f e0       	ldi	r24, 0x0F	; 15
    2448:	28 e1       	ldi	r18, 0x18	; 24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	a8 95       	wdr
    2452:	20 93 60 00 	sts	0x0060, r18
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    245c:	80 91 73 03 	lds	r24, 0x0373
    2460:	88 23       	and	r24, r24
    2462:	b1 f5       	brne	.+108    	; 0x24d0 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    2464:	02 ed       	ldi	r16, 0xD2	; 210
    2466:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2468:	80 91 75 03 	lds	r24, 0x0375
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	84 5d       	subi	r24, 0xD4	; 212
    2470:	9e 4f       	sbci	r25, 0xFE	; 254
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	0e 94 28 02 	call	0x450	; 0x450 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2478:	c5 01       	movw	r24, r10
    247a:	b7 01       	movw	r22, r14
    247c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2480:	c3 01       	movw	r24, r6
    2482:	60 e0       	ldi	r22, 0x00	; 0
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    248a:	c2 01       	movw	r24, r4
    248c:	6f ef       	ldi	r22, 0xFF	; 255
    248e:	7f e3       	ldi	r23, 0x3F	; 63
    2490:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    2494:	c1 01       	movw	r24, r2
    2496:	6f ef       	ldi	r22, 0xFF	; 255
    2498:	7f e3       	ldi	r23, 0x3F	; 63
    249a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    249e:	8e ec       	ldi	r24, 0xCE	; 206
    24a0:	91 e0       	ldi	r25, 0x01	; 1
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	70 e0       	ldi	r23, 0x00	; 0
    24a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    24aa:	c6 01       	movw	r24, r12
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    24b4:	c4 01       	movw	r24, r8
    24b6:	60 e0       	ldi	r22, 0x00	; 0
    24b8:	70 e0       	ldi	r23, 0x00	; 0
    24ba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    24be:	c8 01       	movw	r24, r16
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    24c8:	80 91 73 03 	lds	r24, 0x0373
    24cc:	88 23       	and	r24, r24
    24ce:	61 f2       	breq	.-104    	; 0x2468 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    24d0:	88 e1       	ldi	r24, 0x18	; 24
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	80 93 60 00 	sts	0x0060, r24
    24da:	10 92 60 00 	sts	0x0060, r1
    24de:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    24e0:	80 91 71 03 	lds	r24, 0x0371
    24e4:	90 91 72 03 	lds	r25, 0x0372
    24e8:	2a a9       	sts	0x4a, r18
    24ea:	3b a9       	sts	0x4b, r19
    24ec:	28 17       	cp	r18, r24
    24ee:	39 07       	cpc	r19, r25
    24f0:	50 f0       	brcs	.+20     	; 0x2506 <tune_filter+0x2f4>
    24f2:	80 91 af 02 	lds	r24, 0x02AF
    24f6:	81 30       	cpi	r24, 0x01	; 1
    24f8:	31 f4       	brne	.+12     	; 0x2506 <tune_filter+0x2f4>
    24fa:	88 a9       	sts	0x48, r24
    24fc:	99 a9       	sts	0x49, r25
    24fe:	80 95       	com	r24
    2500:	90 95       	com	r25
    2502:	e8 22       	and	r14, r24
    2504:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2506:	80 91 71 03 	lds	r24, 0x0371
    250a:	90 91 72 03 	lds	r25, 0x0372
    250e:	ea a9       	sts	0x4a, r30
    2510:	fb a9       	sts	0x4b, r31
    2512:	8e 17       	cp	r24, r30
    2514:	9f 07       	cpc	r25, r31
    2516:	21 f4       	brne	.+8      	; 0x2520 <tune_filter+0x30e>
    2518:	80 91 af 02 	lds	r24, 0x02AF
    251c:	81 30       	cpi	r24, 0x01	; 1
    251e:	71 f0       	breq	.+28     	; 0x253c <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2526:	2e a5       	lds	r18, 0x6e
    2528:	3f a5       	lds	r19, 0x6f
    252a:	21 50       	subi	r18, 0x01	; 1
    252c:	30 40       	sbci	r19, 0x00	; 0
    252e:	3f a7       	lds	r19, 0x7f
    2530:	2e a7       	lds	r18, 0x7e
    2532:	8f ef       	ldi	r24, 0xFF	; 255
    2534:	2f 3f       	cpi	r18, 0xFF	; 255
    2536:	38 07       	cpc	r19, r24
    2538:	09 f0       	breq	.+2      	; 0x253c <tune_filter+0x32a>
    253a:	70 cf       	rjmp	.-288    	; 0x241c <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    253c:	ee a9       	sts	0x4e, r30
    253e:	ff a9       	sts	0x4f, r31
    2540:	31 96       	adiw	r30, 0x01	; 1
    2542:	ff ab       	sts	0x5f, r31
    2544:	ee ab       	sts	0x5e, r30
    2546:	c7 01       	movw	r24, r14
    2548:	80 96       	adiw	r24, 0x20	; 32
    254a:	e8 ad       	sts	0x68, r30
    254c:	f9 ad       	sts	0x69, r31
    254e:	81 93       	st	Z+, r24
    2550:	91 93       	st	Z+, r25
    2552:	f9 af       	sts	0x79, r31
    2554:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2556:	ee e6       	ldi	r30, 0x6E	; 110
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	8d 7f       	andi	r24, 0xFD	; 253
    255e:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2560:	14 bc       	out	0x24, r1	; 36
    2562:	2c a9       	sts	0x4c, r18
    2564:	3d a9       	sts	0x4d, r19
    2566:	2d 5f       	subi	r18, 0xFD	; 253
    2568:	3f 4f       	sbci	r19, 0xFF	; 255
    256a:	3d ab       	sts	0x5d, r19
    256c:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    256e:	8e a9       	sts	0x4e, r24
    2570:	9f a9       	sts	0x4f, r25
    2572:	8f 30       	cpi	r24, 0x0F	; 15
    2574:	91 05       	cpc	r25, r1
    2576:	09 f0       	breq	.+2      	; 0x257a <tune_filter+0x368>
    2578:	1d cf       	rjmp	.-454    	; 0x23b4 <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    257a:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    257c:	e9 96       	adiw	r28, 0x39	; 57
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	ff 90       	pop	r15
    2592:	ef 90       	pop	r14
    2594:	df 90       	pop	r13
    2596:	cf 90       	pop	r12
    2598:	bf 90       	pop	r11
    259a:	af 90       	pop	r10
    259c:	9f 90       	pop	r9
    259e:	8f 90       	pop	r8
    25a0:	7f 90       	pop	r7
    25a2:	6f 90       	pop	r6
    25a4:	5f 90       	pop	r5
    25a6:	4f 90       	pop	r4
    25a8:	3f 90       	pop	r3
    25aa:	2f 90       	pop	r2
    25ac:	08 95       	ret

000025ae <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    25ae:	88 e0       	ldi	r24, 0x08	; 8
    25b0:	93 e0       	ldi	r25, 0x03	; 3
    25b2:	6c e0       	ldi	r22, 0x0C	; 12
    25b4:	76 e0       	ldi	r23, 0x06	; 6
    25b6:	40 e2       	ldi	r20, 0x20	; 32
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	0e 94 21 1b 	call	0x3642	; 0x3642 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    25be:	8a e4       	ldi	r24, 0x4A	; 74
    25c0:	93 e0       	ldi	r25, 0x03	; 3
    25c2:	6e e4       	ldi	r22, 0x4E	; 78
    25c4:	76 e0       	ldi	r23, 0x06	; 6
    25c6:	42 e2       	ldi	r20, 0x22	; 34
    25c8:	50 e0       	ldi	r21, 0x00	; 0
    25ca:	0e 94 21 1b 	call	0x3642	; 0x3642 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    25ce:	88 e2       	ldi	r24, 0x28	; 40
    25d0:	93 e0       	ldi	r25, 0x03	; 3
    25d2:	6c e2       	ldi	r22, 0x2C	; 44
    25d4:	76 e0       	ldi	r23, 0x06	; 6
    25d6:	42 e2       	ldi	r20, 0x22	; 34
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	0e 94 21 1b 	call	0x3642	; 0x3642 <__eeupd_block_m6450a>
	
	
}
    25de:	08 95       	ret

000025e0 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    25e0:	82 e7       	ldi	r24, 0x72	; 114
    25e2:	96 e0       	ldi	r25, 0x06	; 6
    25e4:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__eerd_word_m6450a>
    25e8:	90 93 6f 03 	sts	0x036F, r25
    25ec:	80 93 6e 03 	sts	0x036E, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    25f0:	80 e7       	ldi	r24, 0x70	; 112
    25f2:	96 e0       	ldi	r25, 0x06	; 6
    25f4:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__eerd_word_m6450a>
    25f8:	90 93 6d 03 	sts	0x036D, r25
    25fc:	80 93 6c 03 	sts	0x036C, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2600:	8a e4       	ldi	r24, 0x4A	; 74
    2602:	93 e0       	ldi	r25, 0x03	; 3
    2604:	6e e4       	ldi	r22, 0x4E	; 78
    2606:	76 e0       	ldi	r23, 0x06	; 6
    2608:	42 e2       	ldi	r20, 0x22	; 34
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2610:	88 e2       	ldi	r24, 0x28	; 40
    2612:	93 e0       	ldi	r25, 0x03	; 3
    2614:	6c e2       	ldi	r22, 0x2C	; 44
    2616:	76 e0       	ldi	r23, 0x06	; 6
    2618:	42 e2       	ldi	r20, 0x22	; 34
    261a:	50 e0       	ldi	r21, 0x00	; 0
    261c:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2620:	88 e0       	ldi	r24, 0x08	; 8
    2622:	93 e0       	ldi	r25, 0x03	; 3
    2624:	6c e0       	ldi	r22, 0x0C	; 12
    2626:	76 e0       	ldi	r23, 0x06	; 6
    2628:	40 e2       	ldi	r20, 0x20	; 32
    262a:	50 e0       	ldi	r21, 0x00	; 0
    262c:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2630:	08 95       	ret

00002632 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2632:	98 2f       	mov	r25, r24
    2634:	96 95       	lsr	r25
    2636:	96 95       	lsr	r25
    2638:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    263a:	29 2f       	mov	r18, r25
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	f9 01       	movw	r30, r18
    2640:	31 97       	sbiw	r30, 0x01	; 1
    2642:	ee 0f       	add	r30, r30
    2644:	ff 1f       	adc	r31, r31
    2646:	e6 0f       	add	r30, r22
    2648:	f7 1f       	adc	r31, r23
    264a:	01 90       	ld	r0, Z+
    264c:	f0 81       	ld	r31, Z
    264e:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2650:	22 0f       	add	r18, r18
    2652:	33 1f       	adc	r19, r19
    2654:	26 0f       	add	r18, r22
    2656:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2658:	d9 01       	movw	r26, r18
    265a:	4d 91       	ld	r20, X+
    265c:	5c 91       	ld	r21, X
    265e:	11 97       	sbiw	r26, 0x01	; 1
    2660:	4e 1b       	sub	r20, r30
    2662:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2664:	99 0f       	add	r25, r25
    2666:	99 0f       	add	r25, r25
    2668:	99 0f       	add	r25, r25
    266a:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	48 9f       	mul	r20, r24
    2670:	90 01       	movw	r18, r0
    2672:	49 9f       	mul	r20, r25
    2674:	30 0d       	add	r19, r0
    2676:	58 9f       	mul	r21, r24
    2678:	30 0d       	add	r19, r0
    267a:	11 24       	eor	r1, r1
    267c:	36 95       	lsr	r19
    267e:	27 95       	ror	r18
    2680:	36 95       	lsr	r19
    2682:	27 95       	ror	r18
    2684:	36 95       	lsr	r19
    2686:	27 95       	ror	r18
    2688:	e2 0f       	add	r30, r18
    268a:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    268c:	8e 2f       	mov	r24, r30
    268e:	9f 2f       	mov	r25, r31
    2690:	08 95       	ret

00002692 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
    269a:	a2 97       	sbiw	r28, 0x22	; 34
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    26a6:	de 01       	movw	r26, r28
    26a8:	11 96       	adiw	r26, 0x01	; 1
    26aa:	ed e8       	ldi	r30, 0x8D	; 141
    26ac:	f2 e0       	ldi	r31, 0x02	; 2
    26ae:	82 e2       	ldi	r24, 0x22	; 34
    26b0:	01 90       	ld	r0, Z+
    26b2:	0d 92       	st	X+, r0
    26b4:	81 50       	subi	r24, 0x01	; 1
    26b6:	e1 f7       	brne	.-8      	; 0x26b0 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    26b8:	aa e4       	ldi	r26, 0x4A	; 74
    26ba:	b3 e0       	ldi	r27, 0x03	; 3
    26bc:	fe 01       	movw	r30, r28
    26be:	31 96       	adiw	r30, 0x01	; 1
    26c0:	82 e2       	ldi	r24, 0x22	; 34
    26c2:	01 90       	ld	r0, Z+
    26c4:	0d 92       	st	X+, r0
    26c6:	81 50       	subi	r24, 0x01	; 1
    26c8:	e1 f7       	brne	.-8      	; 0x26c2 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    26ca:	a8 e2       	ldi	r26, 0x28	; 40
    26cc:	b3 e0       	ldi	r27, 0x03	; 3
    26ce:	fe 01       	movw	r30, r28
    26d0:	31 96       	adiw	r30, 0x01	; 1
    26d2:	82 e2       	ldi	r24, 0x22	; 34
    26d4:	01 90       	ld	r0, Z+
    26d6:	0d 92       	st	X+, r0
    26d8:	81 50       	subi	r24, 0x01	; 1
    26da:	e1 f7       	brne	.-8      	; 0x26d4 <set_one_volt_per_octave+0x42>
	
	
    26dc:	a2 96       	adiw	r28, 0x22	; 34
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    26ee:	9f b1       	in	r25, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    26f0:	89 2f       	mov	r24, r25
    26f2:	8c 70       	andi	r24, 0x0C	; 12
    26f4:	20 91 c1 02 	lds	r18, 0x02C1
    26f8:	82 2b       	or	r24, r18
    26fa:	80 93 c1 02 	sts	0x02C1, r24
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    26fe:	80 91 7a 03 	lds	r24, 0x037A
    2702:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    2704:	89 27       	eor	r24, r25
    2706:	80 93 7a 03 	sts	0x037A, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    270a:	89 23       	and	r24, r25
    270c:	08 95       	ret

0000270e <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    270e:	ed ed       	ldi	r30, 0xDD	; 221
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	90 81       	ld	r25, Z
    2714:	9f 7b       	andi	r25, 0xBF	; 191
    2716:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	21 70       	andi	r18, 0x01	; 1
    271e:	30 70       	andi	r19, 0x00	; 0
    2720:	22 0f       	add	r18, r18
    2722:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2724:	68 2f       	mov	r22, r24
    2726:	62 95       	swap	r22
    2728:	66 95       	lsr	r22
    272a:	67 70       	andi	r22, 0x07	; 7
    272c:	67 95       	ror	r22
    272e:	66 27       	eor	r22, r22
    2730:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2732:	26 2b       	or	r18, r22
    2734:	98 2f       	mov	r25, r24
    2736:	96 95       	lsr	r25
    2738:	96 95       	lsr	r25
    273a:	91 70       	andi	r25, 0x01	; 1
    273c:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    273e:	68 2f       	mov	r22, r24
    2740:	66 1f       	adc	r22, r22
    2742:	66 27       	eor	r22, r22
    2744:	66 1f       	adc	r22, r22
    2746:	66 0f       	add	r22, r22
    2748:	66 0f       	add	r22, r22
    274a:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    274c:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    274e:	a8 2f       	mov	r26, r24
    2750:	a6 95       	lsr	r26
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	a1 70       	andi	r26, 0x01	; 1
    2756:	b0 70       	andi	r27, 0x00	; 0
    2758:	bd 01       	movw	r22, r26
    275a:	66 0f       	add	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	66 0f       	add	r22, r22
    2760:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2762:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2764:	68 2f       	mov	r22, r24
    2766:	62 95       	swap	r22
    2768:	6f 70       	andi	r22, 0x0F	; 15
    276a:	70 e0       	ldi	r23, 0x00	; 0
    276c:	61 70       	andi	r22, 0x01	; 1
    276e:	70 70       	andi	r23, 0x00	; 0
    2770:	ab 01       	movw	r20, r22
    2772:	00 24       	eor	r0, r0
    2774:	56 95       	lsr	r21
    2776:	47 95       	ror	r20
    2778:	07 94       	ror	r0
    277a:	56 95       	lsr	r21
    277c:	47 95       	ror	r20
    277e:	07 94       	ror	r0
    2780:	54 2f       	mov	r21, r20
    2782:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2784:	62 2f       	mov	r22, r18
    2786:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2788:	48 2f       	mov	r20, r24
    278a:	42 95       	swap	r20
    278c:	46 95       	lsr	r20
    278e:	46 95       	lsr	r20
    2790:	43 70       	andi	r20, 0x03	; 3
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	41 70       	andi	r20, 0x01	; 1
    2796:	50 70       	andi	r21, 0x00	; 0
    2798:	9a 01       	movw	r18, r20
    279a:	22 0f       	add	r18, r18
    279c:	33 1f       	adc	r19, r19
    279e:	22 95       	swap	r18
    27a0:	32 95       	swap	r19
    27a2:	30 7f       	andi	r19, 0xF0	; 240
    27a4:	32 27       	eor	r19, r18
    27a6:	20 7f       	andi	r18, 0xF0	; 240
    27a8:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    27aa:	46 2f       	mov	r20, r22
    27ac:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    27ae:	86 95       	lsr	r24
    27b0:	86 95       	lsr	r24
    27b2:	86 95       	lsr	r24
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	21 70       	andi	r18, 0x01	; 1
    27ba:	30 70       	andi	r19, 0x00	; 0
    27bc:	c9 01       	movw	r24, r18
    27be:	82 95       	swap	r24
    27c0:	92 95       	swap	r25
    27c2:	90 7f       	andi	r25, 0xF0	; 240
    27c4:	98 27       	eor	r25, r24
    27c6:	80 7f       	andi	r24, 0xF0	; 240
    27c8:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    27ca:	84 2b       	or	r24, r20
    27cc:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    27ce:	80 81       	ld	r24, Z
    27d0:	80 64       	ori	r24, 0x40	; 64
    27d2:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    27d4:	80 81       	ld	r24, Z
    27d6:	8f 7b       	andi	r24, 0xBF	; 191
    27d8:	80 83       	st	Z, r24
	DATA_BUS = 0;
    27da:	12 b8       	out	0x02, r1	; 2
	
	
    27dc:	08 95       	ret

000027de <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    27de:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    27e0:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    27e2:	74 83       	std	Z+4, r23	; 0x04
    27e4:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    27e6:	11 82       	std	Z+1, r1	; 0x01
    27e8:	10 82       	st	Z, r1
}
    27ea:	08 95       	ret

000027ec <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    27ec:	1f 93       	push	r17
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	ec 01       	movw	r28, r24
    27f4:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    27f6:	0e 94 65 14 	call	0x28ca	; 0x28ca <store_and_clear_interrupt>
    27fa:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    27fc:	39 81       	ldd	r19, Y+1	; 0x01
    27fe:	83 2f       	mov	r24, r19
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	01 96       	adiw	r24, 0x01	; 1
    2804:	6a 81       	ldd	r22, Y+2	; 0x02
    2806:	70 e0       	ldi	r23, 0x00	; 0
    2808:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__divmodhi4>
    280c:	48 81       	ld	r20, Y
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	84 17       	cp	r24, r20
    2812:	95 07       	cpc	r25, r21
    2814:	29 f4       	brne	.+10     	; 0x2820 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2816:	82 2f       	mov	r24, r18
    2818:	0e 94 68 14 	call	0x28d0	; 0x28d0 <restore_interrupt_setting>
      return false;
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	11 c0       	rjmp	.+34     	; 0x2842 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2820:	eb 81       	ldd	r30, Y+3	; 0x03
    2822:	fc 81       	ldd	r31, Y+4	; 0x04
    2824:	e3 0f       	add	r30, r19
    2826:	f1 1d       	adc	r31, r1
    2828:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	6a 81       	ldd	r22, Y+2	; 0x02
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__divmodhi4>
    2838:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    283a:	82 2f       	mov	r24, r18
    283c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <restore_interrupt_setting>
      return true;
    2840:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	08 95       	ret

0000284a <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
    284e:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2850:	0e 94 65 14 	call	0x28ca	; 0x28ca <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2854:	29 81       	ldd	r18, Y+1	; 0x01
    2856:	98 81       	ld	r25, Y
    2858:	29 17       	cp	r18, r25
    285a:	18 f0       	brcs	.+6      	; 0x2862 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    285c:	c2 2f       	mov	r28, r18
    285e:	c9 1b       	sub	r28, r25
    2860:	03 c0       	rjmp	.+6      	; 0x2868 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2862:	ca 81       	ldd	r28, Y+2	; 0x02
    2864:	c2 0f       	add	r28, r18
    2866:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2868:	0e 94 68 14 	call	0x28d0	; 0x28d0 <restore_interrupt_setting>
   return len;
}
    286c:	8c 2f       	mov	r24, r28
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	08 95       	ret

00002874 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2874:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2876:	20 81       	ld	r18, Z
    2878:	86 2f       	mov	r24, r22
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	82 0f       	add	r24, r18
    287e:	91 1d       	adc	r25, r1
    2880:	62 81       	ldd	r22, Z+2	; 0x02
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__divmodhi4>
    2888:	03 80       	ldd	r0, Z+3	; 0x03
    288a:	f4 81       	ldd	r31, Z+4	; 0x04
    288c:	e0 2d       	mov	r30, r0
    288e:	e8 0f       	add	r30, r24
    2890:	f9 1f       	adc	r31, r25
}
    2892:	80 81       	ld	r24, Z
    2894:	08 95       	ret

00002896 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2896:	1f 93       	push	r17
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	ec 01       	movw	r28, r24
    289e:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    28a0:	0e 94 65 14 	call	0x28ca	; 0x28ca <store_and_clear_interrupt>
    28a4:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    28a6:	88 81       	ld	r24, Y
    28a8:	21 2f       	mov	r18, r17
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	28 0f       	add	r18, r24
    28ae:	31 1d       	adc	r19, r1
    28b0:	6a 81       	ldd	r22, Y+2	; 0x02
    28b2:	c9 01       	movw	r24, r18
    28b4:	70 e0       	ldi	r23, 0x00	; 0
    28b6:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__divmodhi4>
    28ba:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    28bc:	84 2f       	mov	r24, r20
    28be:	0e 94 68 14 	call	0x28d0	; 0x28d0 <restore_interrupt_setting>
}
    28c2:	df 91       	pop	r29
    28c4:	cf 91       	pop	r28
    28c6:	1f 91       	pop	r17
    28c8:	08 95       	ret

000028ca <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    28ca:	8f b7       	in	r24, 0x3f	; 63
   cli();
    28cc:	f8 94       	cli
   return sreg;
}
    28ce:	08 95       	ret

000028d0 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    28d0:	8f bf       	out	0x3f, r24	; 63
}
    28d2:	08 95       	ret

000028d4 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    28d4:	88 1f       	adc	r24, r24
    28d6:	88 27       	eor	r24, r24
    28d8:	88 1f       	adc	r24, r24
    28da:	08 95       	ret

000028dc <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    28dc:	91 e0       	ldi	r25, 0x01	; 1
    28de:	88 3f       	cpi	r24, 0xF8	; 248
    28e0:	08 f4       	brcc	.+2      	; 0x28e4 <midi_is_realtime+0x8>
    28e2:	90 e0       	ldi	r25, 0x00	; 0
}
    28e4:	89 2f       	mov	r24, r25
    28e6:	08 95       	ret

000028e8 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	20 7f       	andi	r18, 0xF0	; 240
    28ee:	30 70       	andi	r19, 0x00	; 0
    28f0:	20 3c       	cpi	r18, 0xC0	; 192
    28f2:	31 05       	cpc	r19, r1
    28f4:	e9 f1       	breq	.+122    	; 0x2970 <midi_packet_length+0x88>
    28f6:	21 3c       	cpi	r18, 0xC1	; 193
    28f8:	31 05       	cpc	r19, r1
    28fa:	8c f4       	brge	.+34     	; 0x291e <midi_packet_length+0x36>
    28fc:	20 39       	cpi	r18, 0x90	; 144
    28fe:	31 05       	cpc	r19, r1
    2900:	e1 f0       	breq	.+56     	; 0x293a <midi_packet_length+0x52>
    2902:	21 39       	cpi	r18, 0x91	; 145
    2904:	31 05       	cpc	r19, r1
    2906:	24 f4       	brge	.+8      	; 0x2910 <midi_packet_length+0x28>
    2908:	20 38       	cpi	r18, 0x80	; 128
    290a:	31 05       	cpc	r19, r1
    290c:	79 f5       	brne	.+94     	; 0x296c <midi_packet_length+0x84>
    290e:	15 c0       	rjmp	.+42     	; 0x293a <midi_packet_length+0x52>
    2910:	20 3a       	cpi	r18, 0xA0	; 160
    2912:	31 05       	cpc	r19, r1
    2914:	91 f0       	breq	.+36     	; 0x293a <midi_packet_length+0x52>
    2916:	20 3b       	cpi	r18, 0xB0	; 176
    2918:	31 05       	cpc	r19, r1
    291a:	41 f5       	brne	.+80     	; 0x296c <midi_packet_length+0x84>
    291c:	0e c0       	rjmp	.+28     	; 0x293a <midi_packet_length+0x52>
    291e:	20 3e       	cpi	r18, 0xE0	; 224
    2920:	31 05       	cpc	r19, r1
    2922:	59 f0       	breq	.+22     	; 0x293a <midi_packet_length+0x52>
    2924:	21 3e       	cpi	r18, 0xE1	; 225
    2926:	31 05       	cpc	r19, r1
    2928:	24 f4       	brge	.+8      	; 0x2932 <midi_packet_length+0x4a>
    292a:	20 3d       	cpi	r18, 0xD0	; 208
    292c:	31 05       	cpc	r19, r1
    292e:	f1 f4       	brne	.+60     	; 0x296c <midi_packet_length+0x84>
    2930:	1f c0       	rjmp	.+62     	; 0x2970 <midi_packet_length+0x88>
    2932:	20 3f       	cpi	r18, 0xF0	; 240
    2934:	31 05       	cpc	r19, r1
    2936:	d1 f4       	brne	.+52     	; 0x296c <midi_packet_length+0x84>
    2938:	02 c0       	rjmp	.+4      	; 0x293e <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    293a:	83 e0       	ldi	r24, 0x03	; 3
    293c:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    293e:	86 3f       	cpi	r24, 0xF6	; 246
    2940:	79 f0       	breq	.+30     	; 0x2960 <midi_packet_length+0x78>
    2942:	87 3f       	cpi	r24, 0xF7	; 247
    2944:	38 f4       	brcc	.+14     	; 0x2954 <midi_packet_length+0x6c>
    2946:	82 3f       	cpi	r24, 0xF2	; 242
    2948:	a9 f0       	breq	.+42     	; 0x2974 <midi_packet_length+0x8c>
    294a:	83 3f       	cpi	r24, 0xF3	; 243
    294c:	59 f0       	breq	.+22     	; 0x2964 <midi_packet_length+0x7c>
    294e:	81 3f       	cpi	r24, 0xF1	; 241
    2950:	59 f4       	brne	.+22     	; 0x2968 <midi_packet_length+0x80>
    2952:	08 c0       	rjmp	.+16     	; 0x2964 <midi_packet_length+0x7c>
    2954:	88 3f       	cpi	r24, 0xF8	; 248
    2956:	40 f0       	brcs	.+16     	; 0x2968 <midi_packet_length+0x80>
    2958:	8d 3f       	cpi	r24, 0xFD	; 253
    295a:	10 f0       	brcs	.+4      	; 0x2960 <midi_packet_length+0x78>
    295c:	8e 3f       	cpi	r24, 0xFE	; 254
    295e:	20 f0       	brcs	.+8      	; 0x2968 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2964:	82 e0       	ldi	r24, 0x02	; 2
    2966:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	08 95       	ret
         }
      default:
         return UNDEFINED;
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2970:	82 e0       	ldi	r24, 0x02	; 2
    2972:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2974:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2976:	08 95       	ret

00002978 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2978:	0f 93       	push	r16
    297a:	34 2f       	mov	r19, r20
    297c:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    297e:	46 2f       	mov	r20, r22
    2980:	4f 70       	andi	r20, 0x0F	; 15
    2982:	40 6b       	ori	r20, 0xB0	; 176
    2984:	23 2f       	mov	r18, r19
    2986:	2f 77       	andi	r18, 0x7F	; 127
    2988:	0f 77       	andi	r16, 0x7F	; 127
    298a:	dc 01       	movw	r26, r24
    298c:	ed 91       	ld	r30, X+
    298e:	fc 91       	ld	r31, X
    2990:	63 e0       	ldi	r22, 0x03	; 3
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2996:	0f 91       	pop	r16
    2998:	08 95       	ret

0000299a <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    299a:	0f 93       	push	r16
    299c:	34 2f       	mov	r19, r20
    299e:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    29a0:	46 2f       	mov	r20, r22
    29a2:	4f 70       	andi	r20, 0x0F	; 15
    29a4:	40 69       	ori	r20, 0x90	; 144
    29a6:	23 2f       	mov	r18, r19
    29a8:	2f 77       	andi	r18, 0x7F	; 127
    29aa:	0f 77       	andi	r16, 0x7F	; 127
    29ac:	dc 01       	movw	r26, r24
    29ae:	ed 91       	ld	r30, X+
    29b0:	fc 91       	ld	r31, X
    29b2:	63 e0       	ldi	r22, 0x03	; 3
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    29b8:	0f 91       	pop	r16
    29ba:	08 95       	ret

000029bc <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    29bc:	0f 93       	push	r16
    29be:	34 2f       	mov	r19, r20
    29c0:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    29c2:	46 2f       	mov	r20, r22
    29c4:	4f 70       	andi	r20, 0x0F	; 15
    29c6:	40 68       	ori	r20, 0x80	; 128
    29c8:	23 2f       	mov	r18, r19
    29ca:	2f 77       	andi	r18, 0x7F	; 127
    29cc:	0f 77       	andi	r16, 0x7F	; 127
    29ce:	dc 01       	movw	r26, r24
    29d0:	ed 91       	ld	r30, X+
    29d2:	fc 91       	ld	r31, X
    29d4:	63 e0       	ldi	r22, 0x03	; 3
    29d6:	70 e0       	ldi	r23, 0x00	; 0
    29d8:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    29da:	0f 91       	pop	r16
    29dc:	08 95       	ret

000029de <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    29de:	0f 93       	push	r16
    29e0:	34 2f       	mov	r19, r20
    29e2:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    29e4:	46 2f       	mov	r20, r22
    29e6:	4f 70       	andi	r20, 0x0F	; 15
    29e8:	40 6a       	ori	r20, 0xA0	; 160
    29ea:	23 2f       	mov	r18, r19
    29ec:	2f 77       	andi	r18, 0x7F	; 127
    29ee:	0f 77       	andi	r16, 0x7F	; 127
    29f0:	dc 01       	movw	r26, r24
    29f2:	ed 91       	ld	r30, X+
    29f4:	fc 91       	ld	r31, X
    29f6:	63 e0       	ldi	r22, 0x03	; 3
    29f8:	70 e0       	ldi	r23, 0x00	; 0
    29fa:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    29fc:	0f 91       	pop	r16
    29fe:	08 95       	ret

00002a00 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2a04:	20 e2       	ldi	r18, 0x20	; 32
    2a06:	40 30       	cpi	r20, 0x00	; 0
    2a08:	52 07       	cpc	r21, r18
    2a0a:	44 f4       	brge	.+16     	; 0x2a1c <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2a0c:	a0 ee       	ldi	r26, 0xE0	; 224
    2a0e:	40 30       	cpi	r20, 0x00	; 0
    2a10:	5a 07       	cpc	r21, r26
    2a12:	3c f0       	brlt	.+14     	; 0x2a22 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2a14:	8a 01       	movw	r16, r20
    2a16:	00 50       	subi	r16, 0x00	; 0
    2a18:	10 4e       	sbci	r17, 0xE0	; 224
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2a1c:	0f ef       	ldi	r16, 0xFF	; 255
    2a1e:	1f e3       	ldi	r17, 0x3F	; 63
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2a22:	00 e0       	ldi	r16, 0x00	; 0
    2a24:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2a26:	46 2f       	mov	r20, r22
    2a28:	4f 70       	andi	r20, 0x0F	; 15
    2a2a:	40 6e       	ori	r20, 0xE0	; 224
    2a2c:	20 2f       	mov	r18, r16
    2a2e:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2a30:	00 0f       	add	r16, r16
    2a32:	01 2f       	mov	r16, r17
    2a34:	00 1f       	adc	r16, r16
    2a36:	11 0b       	sbc	r17, r17
    2a38:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2a3a:	0f 77       	andi	r16, 0x7F	; 127
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	ed 91       	ld	r30, X+
    2a40:	fc 91       	ld	r31, X
    2a42:	63 e0       	ldi	r22, 0x03	; 3
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2a48:	1f 91       	pop	r17
    2a4a:	0f 91       	pop	r16
    2a4c:	08 95       	ret

00002a4e <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2a4e:	0f 93       	push	r16
    2a50:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2a52:	46 2f       	mov	r20, r22
    2a54:	4f 70       	andi	r20, 0x0F	; 15
    2a56:	40 6c       	ori	r20, 0xC0	; 192
    2a58:	2f 77       	andi	r18, 0x7F	; 127
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	ed 91       	ld	r30, X+
    2a5e:	fc 91       	ld	r31, X
    2a60:	62 e0       	ldi	r22, 0x02	; 2
    2a62:	70 e0       	ldi	r23, 0x00	; 0
    2a64:	00 e0       	ldi	r16, 0x00	; 0
    2a66:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2a68:	0f 91       	pop	r16
    2a6a:	08 95       	ret

00002a6c <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2a6c:	0f 93       	push	r16
    2a6e:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2a70:	46 2f       	mov	r20, r22
    2a72:	4f 70       	andi	r20, 0x0F	; 15
    2a74:	40 6d       	ori	r20, 0xD0	; 208
    2a76:	2f 77       	andi	r18, 0x7F	; 127
    2a78:	dc 01       	movw	r26, r24
    2a7a:	ed 91       	ld	r30, X+
    2a7c:	fc 91       	ld	r31, X
    2a7e:	62 e0       	ldi	r22, 0x02	; 2
    2a80:	70 e0       	ldi	r23, 0x00	; 0
    2a82:	00 e0       	ldi	r16, 0x00	; 0
    2a84:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2a86:	0f 91       	pop	r16
    2a88:	08 95       	ret

00002a8a <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2a8a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	ed 91       	ld	r30, X+
    2a90:	fc 91       	ld	r31, X
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	70 e0       	ldi	r23, 0x00	; 0
    2a96:	48 ef       	ldi	r20, 0xF8	; 248
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	00 e0       	ldi	r16, 0x00	; 0
    2a9c:	09 95       	icall
}
    2a9e:	0f 91       	pop	r16
    2aa0:	08 95       	ret

00002aa2 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    2aa2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	ed 91       	ld	r30, X+
    2aa8:	fc 91       	ld	r31, X
    2aaa:	61 e0       	ldi	r22, 0x01	; 1
    2aac:	70 e0       	ldi	r23, 0x00	; 0
    2aae:	49 ef       	ldi	r20, 0xF9	; 249
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	00 e0       	ldi	r16, 0x00	; 0
    2ab4:	09 95       	icall
}
    2ab6:	0f 91       	pop	r16
    2ab8:	08 95       	ret

00002aba <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2aba:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2abc:	dc 01       	movw	r26, r24
    2abe:	ed 91       	ld	r30, X+
    2ac0:	fc 91       	ld	r31, X
    2ac2:	61 e0       	ldi	r22, 0x01	; 1
    2ac4:	70 e0       	ldi	r23, 0x00	; 0
    2ac6:	4a ef       	ldi	r20, 0xFA	; 250
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	00 e0       	ldi	r16, 0x00	; 0
    2acc:	09 95       	icall
}
    2ace:	0f 91       	pop	r16
    2ad0:	08 95       	ret

00002ad2 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    2ad2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	ed 91       	ld	r30, X+
    2ad8:	fc 91       	ld	r31, X
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	4b ef       	ldi	r20, 0xFB	; 251
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	00 e0       	ldi	r16, 0x00	; 0
    2ae4:	09 95       	icall
}
    2ae6:	0f 91       	pop	r16
    2ae8:	08 95       	ret

00002aea <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    2aea:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    2aec:	dc 01       	movw	r26, r24
    2aee:	ed 91       	ld	r30, X+
    2af0:	fc 91       	ld	r31, X
    2af2:	61 e0       	ldi	r22, 0x01	; 1
    2af4:	70 e0       	ldi	r23, 0x00	; 0
    2af6:	4c ef       	ldi	r20, 0xFC	; 252
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	00 e0       	ldi	r16, 0x00	; 0
    2afc:	09 95       	icall
}
    2afe:	0f 91       	pop	r16
    2b00:	08 95       	ret

00002b02 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    2b02:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    2b04:	dc 01       	movw	r26, r24
    2b06:	ed 91       	ld	r30, X+
    2b08:	fc 91       	ld	r31, X
    2b0a:	61 e0       	ldi	r22, 0x01	; 1
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	4e ef       	ldi	r20, 0xFE	; 254
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	00 e0       	ldi	r16, 0x00	; 0
    2b14:	09 95       	icall
}
    2b16:	0f 91       	pop	r16
    2b18:	08 95       	ret

00002b1a <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2b1a:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	ed 91       	ld	r30, X+
    2b20:	fc 91       	ld	r31, X
    2b22:	61 e0       	ldi	r22, 0x01	; 1
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	4f ef       	ldi	r20, 0xFF	; 255
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	00 e0       	ldi	r16, 0x00	; 0
    2b2c:	09 95       	icall
}
    2b2e:	0f 91       	pop	r16
    2b30:	08 95       	ret

00002b32 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    2b32:	0f 93       	push	r16
   device->send_func(device, 2,
    2b34:	26 2f       	mov	r18, r22
    2b36:	2f 77       	andi	r18, 0x7F	; 127
    2b38:	dc 01       	movw	r26, r24
    2b3a:	ed 91       	ld	r30, X+
    2b3c:	fc 91       	ld	r31, X
    2b3e:	62 e0       	ldi	r22, 0x02	; 2
    2b40:	70 e0       	ldi	r23, 0x00	; 0
    2b42:	41 ef       	ldi	r20, 0xF1	; 241
    2b44:	00 e0       	ldi	r16, 0x00	; 0
    2b46:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2b48:	0f 91       	pop	r16
    2b4a:	08 95       	ret

00002b4c <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
   device->send_func(device, 3,
    2b50:	26 2f       	mov	r18, r22
    2b52:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2b54:	8b 01       	movw	r16, r22
    2b56:	00 0f       	add	r16, r16
    2b58:	01 2f       	mov	r16, r17
    2b5a:	00 1f       	adc	r16, r16
    2b5c:	11 0b       	sbc	r17, r17
    2b5e:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2b60:	0f 77       	andi	r16, 0x7F	; 127
    2b62:	dc 01       	movw	r26, r24
    2b64:	ed 91       	ld	r30, X+
    2b66:	fc 91       	ld	r31, X
    2b68:	63 e0       	ldi	r22, 0x03	; 3
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	42 ef       	ldi	r20, 0xF2	; 242
    2b6e:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	08 95       	ret

00002b76 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2b76:	0f 93       	push	r16
   device->send_func(device, 2,
    2b78:	26 2f       	mov	r18, r22
    2b7a:	2f 77       	andi	r18, 0x7F	; 127
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	ed 91       	ld	r30, X+
    2b80:	fc 91       	ld	r31, X
    2b82:	62 e0       	ldi	r22, 0x02	; 2
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	43 ef       	ldi	r20, 0xF3	; 243
    2b88:	00 e0       	ldi	r16, 0x00	; 0
    2b8a:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2b8c:	0f 91       	pop	r16
    2b8e:	08 95       	ret

00002b90 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2b90:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    2b92:	dc 01       	movw	r26, r24
    2b94:	ed 91       	ld	r30, X+
    2b96:	fc 91       	ld	r31, X
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	46 ef       	ldi	r20, 0xF6	; 246
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	00 e0       	ldi	r16, 0x00	; 0
    2ba2:	09 95       	icall
}
    2ba4:	0f 91       	pop	r16
    2ba6:	08 95       	ret

00002ba8 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2ba8:	0f 93       	push	r16
    2baa:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2bac:	dc 01       	movw	r26, r24
    2bae:	ed 91       	ld	r30, X+
    2bb0:	fc 91       	ld	r31, X
    2bb2:	61 e0       	ldi	r22, 0x01	; 1
    2bb4:	70 e0       	ldi	r23, 0x00	; 0
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	00 e0       	ldi	r16, 0x00	; 0
    2bba:	09 95       	icall
}
    2bbc:	0f 91       	pop	r16
    2bbe:	08 95       	ret

00002bc0 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    2bc0:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	ed 91       	ld	r30, X+
    2bc6:	fc 91       	ld	r31, X
    2bc8:	09 95       	icall
}
    2bca:	0f 91       	pop	r16
    2bcc:	08 95       	ret

00002bce <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2bce:	6f 92       	push	r6
    2bd0:	7f 92       	push	r7
    2bd2:	8f 92       	push	r8
    2bd4:	9f 92       	push	r9
    2bd6:	af 92       	push	r10
    2bd8:	bf 92       	push	r11
    2bda:	cf 92       	push	r12
    2bdc:	df 92       	push	r13
    2bde:	ef 92       	push	r14
    2be0:	ff 92       	push	r15
    2be2:	0f 93       	push	r16
    2be4:	1f 93       	push	r17
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	00 d0       	rcall	.+0      	; 0x2bec <midi_send_array+0x1e>
    2bec:	0f 92       	push	r0
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	4c 01       	movw	r8, r24
    2bf4:	6b 01       	movw	r12, r22
    2bf6:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2bf8:	61 15       	cp	r22, r1
    2bfa:	71 05       	cpc	r23, r1
    2bfc:	41 f1       	breq	.+80     	; 0x2c4e <midi_send_array+0x80>
    2bfe:	ee 24       	eor	r14, r14
    2c00:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2c02:	0f 2e       	mov	r0, r31
    2c04:	f3 e0       	ldi	r31, 0x03	; 3
    2c06:	6f 2e       	mov	r6, r31
    2c08:	77 24       	eor	r7, r7
    2c0a:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2c0c:	19 82       	std	Y+1, r1	; 0x01
    2c0e:	1a 82       	std	Y+2, r1	; 0x02
    2c10:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2c12:	86 01       	movw	r16, r12
    2c14:	0e 19       	sub	r16, r14
    2c16:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2c18:	04 30       	cpi	r16, 0x04	; 4
    2c1a:	11 05       	cpc	r17, r1
    2c1c:	08 f0       	brcs	.+2      	; 0x2c20 <midi_send_array+0x52>
    2c1e:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2c20:	b5 01       	movw	r22, r10
    2c22:	6e 0d       	add	r22, r14
    2c24:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2c26:	ce 01       	movw	r24, r28
    2c28:	01 96       	adiw	r24, 0x01	; 1
    2c2a:	40 2f       	mov	r20, r16
    2c2c:	51 2f       	mov	r21, r17
    2c2e:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2c32:	c4 01       	movw	r24, r8
    2c34:	b8 01       	movw	r22, r16
    2c36:	49 81       	ldd	r20, Y+1	; 0x01
    2c38:	2a 81       	ldd	r18, Y+2	; 0x02
    2c3a:	0b 81       	ldd	r16, Y+3	; 0x03
    2c3c:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2c40:	83 e0       	ldi	r24, 0x03	; 3
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	e8 0e       	add	r14, r24
    2c46:	f9 1e       	adc	r15, r25
    2c48:	ec 14       	cp	r14, r12
    2c4a:	fd 04       	cpc	r15, r13
    2c4c:	f8 f2       	brcs	.-66     	; 0x2c0c <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	ff 90       	pop	r15
    2c5e:	ef 90       	pop	r14
    2c60:	df 90       	pop	r13
    2c62:	cf 90       	pop	r12
    2c64:	bf 90       	pop	r11
    2c66:	af 90       	pop	r10
    2c68:	9f 90       	pop	r9
    2c6a:	8f 90       	pop	r8
    2c6c:	7f 90       	pop	r7
    2c6e:	6f 90       	pop	r6
    2c70:	08 95       	ret

00002c72 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    2c72:	fc 01       	movw	r30, r24
    2c74:	73 83       	std	Z+3, r23	; 0x03
    2c76:	62 83       	std	Z+2, r22	; 0x02
}
    2c78:	08 95       	ret

00002c7a <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	75 83       	std	Z+5, r23	; 0x05
    2c7e:	64 83       	std	Z+4, r22	; 0x04
}
    2c80:	08 95       	ret

00002c82 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    2c82:	fc 01       	movw	r30, r24
    2c84:	77 83       	std	Z+7, r23	; 0x07
    2c86:	66 83       	std	Z+6, r22	; 0x06
}
    2c88:	08 95       	ret

00002c8a <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	71 87       	std	Z+9, r23	; 0x09
    2c8e:	60 87       	std	Z+8, r22	; 0x08
}
    2c90:	08 95       	ret

00002c92 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    2c92:	fc 01       	movw	r30, r24
    2c94:	73 87       	std	Z+11, r23	; 0x0b
    2c96:	62 87       	std	Z+10, r22	; 0x0a
}
    2c98:	08 95       	ret

00002c9a <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	75 87       	std	Z+13, r23	; 0x0d
    2c9e:	64 87       	std	Z+12, r22	; 0x0c
}
    2ca0:	08 95       	ret

00002ca2 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	77 87       	std	Z+15, r23	; 0x0f
    2ca6:	66 87       	std	Z+14, r22	; 0x0e
}
    2ca8:	08 95       	ret

00002caa <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2caa:	fc 01       	movw	r30, r24
    2cac:	71 8b       	std	Z+17, r23	; 0x11
    2cae:	60 8b       	std	Z+16, r22	; 0x10
}
    2cb0:	08 95       	ret

00002cb2 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	73 8b       	std	Z+19, r23	; 0x13
    2cb6:	62 8b       	std	Z+18, r22	; 0x12
}
    2cb8:	08 95       	ret

00002cba <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    2cba:	fc 01       	movw	r30, r24
    2cbc:	75 8b       	std	Z+21, r23	; 0x15
    2cbe:	64 8b       	std	Z+20, r22	; 0x14
}
    2cc0:	08 95       	ret

00002cc2 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	77 8b       	std	Z+23, r23	; 0x17
    2cc6:	66 8b       	std	Z+22, r22	; 0x16
}
    2cc8:	08 95       	ret

00002cca <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2cca:	fc 01       	movw	r30, r24
    2ccc:	71 8f       	std	Z+25, r23	; 0x19
    2cce:	60 8f       	std	Z+24, r22	; 0x18
}
    2cd0:	08 95       	ret

00002cd2 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	73 8f       	std	Z+27, r23	; 0x1b
    2cd6:	62 8f       	std	Z+26, r22	; 0x1a
}
    2cd8:	08 95       	ret

00002cda <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2cda:	fc 01       	movw	r30, r24
    2cdc:	75 8f       	std	Z+29, r23	; 0x1d
    2cde:	64 8f       	std	Z+28, r22	; 0x1c
}
    2ce0:	08 95       	ret

00002ce2 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	77 8f       	std	Z+31, r23	; 0x1f
    2ce6:	66 8f       	std	Z+30, r22	; 0x1e
}
    2ce8:	08 95       	ret

00002cea <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    2cf0:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    2cf2:	1f a2       	lds	r17, 0x9f
    2cf4:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2cf6:	bc 01       	movw	r22, r24
    2cf8:	68 5d       	subi	r22, 0xD8	; 216
    2cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfc:	88 51       	subi	r24, 0x18	; 24
    2cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2d00:	40 ec       	ldi	r20, 0xC0	; 192
    2d02:	0e 94 ef 13 	call	0x27de	; 0x27de <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2d06:	1b 82       	std	Y+3, r1	; 0x03
    2d08:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2d0a:	1d 82       	std	Y+5, r1	; 0x05
    2d0c:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2d0e:	1f 82       	std	Y+7, r1	; 0x07
    2d10:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    2d12:	19 86       	std	Y+9, r1	; 0x09
    2d14:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2d16:	1b 86       	std	Y+11, r1	; 0x0b
    2d18:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2d1a:	1d 86       	std	Y+13, r1	; 0x0d
    2d1c:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2d1e:	1f 86       	std	Y+15, r1	; 0x0f
    2d20:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    2d22:	19 8a       	std	Y+17, r1	; 0x11
    2d24:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2d26:	1b 8a       	std	Y+19, r1	; 0x13
    2d28:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2d2a:	1d 8a       	std	Y+21, r1	; 0x15
    2d2c:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2d2e:	1f 8a       	std	Y+23, r1	; 0x17
    2d30:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    2d32:	19 8e       	std	Y+25, r1	; 0x19
    2d34:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2d36:	1b 8e       	std	Y+27, r1	; 0x1b
    2d38:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2d3a:	1d 8e       	std	Y+29, r1	; 0x1d
    2d3c:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2d3e:	1f 8e       	std	Y+31, r1	; 0x1f
    2d40:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    2d42:	19 a2       	lds	r17, 0x99
    2d44:	18 a2       	lds	r17, 0x98
}
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	08 95       	ret

00002d4c <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	1f 93       	push	r17
    2d54:	cf 93       	push	r28
    2d56:	df 93       	push	r29
    2d58:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2d5a:	66 23       	and	r22, r22
    2d5c:	99 f0       	breq	.+38     	; 0x2d84 <midi_device_input+0x38>
    2d5e:	04 2f       	mov	r16, r20
    2d60:	15 2f       	mov	r17, r21
    2d62:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    2d64:	0f 2e       	mov	r0, r31
    2d66:	f8 ee       	ldi	r31, 0xE8	; 232
    2d68:	ef 2e       	mov	r14, r31
    2d6a:	ff 24       	eor	r15, r15
    2d6c:	f0 2d       	mov	r31, r0
    2d6e:	e8 0e       	add	r14, r24
    2d70:	f9 1e       	adc	r15, r25
    2d72:	f8 01       	movw	r30, r16
    2d74:	61 91       	ld	r22, Z+
    2d76:	8f 01       	movw	r16, r30
    2d78:	c7 01       	movw	r24, r14
    2d7a:	0e 94 f6 13 	call	0x27ec	; 0x27ec <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2d7e:	cf 5f       	subi	r28, 0xFF	; 255
    2d80:	cd 17       	cp	r28, r29
    2d82:	b9 f7       	brne	.-18     	; 0x2d72 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	ff 90       	pop	r15
    2d8e:	ef 90       	pop	r14
    2d90:	08 95       	ret

00002d92 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    2d92:	fc 01       	movw	r30, r24
    2d94:	71 83       	std	Z+1, r23	; 0x01
    2d96:	60 83       	st	Z, r22
}
    2d98:	08 95       	ret

00002d9a <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	71 a3       	lds	r23, 0x51
    2d9e:	60 a3       	lds	r22, 0x50
}
    2da0:	08 95       	ret

00002da2 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    2da2:	af 92       	push	r10
    2da4:	bf 92       	push	r11
    2da6:	cf 92       	push	r12
    2da8:	df 92       	push	r13
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    2db6:	00 d0       	rcall	.+0      	; 0x2db8 <midi_input_callbacks+0x16>
    2db8:	0f 92       	push	r0
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	6c 01       	movw	r12, r24
    2dc0:	5b 01       	movw	r10, r22
    2dc2:	f4 2e       	mov	r15, r20
    2dc4:	e2 2e       	mov	r14, r18
    2dc6:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2dc8:	dc 01       	movw	r26, r24
    2dca:	95 96       	adiw	r26, 0x25	; 37
    2dcc:	8c 91       	ld	r24, X
    2dce:	95 97       	sbiw	r26, 0x25	; 37
    2dd0:	84 30       	cpi	r24, 0x04	; 4
    2dd2:	e9 f4       	brne	.+58     	; 0x2e0e <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    2dd4:	5a 96       	adiw	r26, 0x1a	; 26
    2dd6:	ed 91       	ld	r30, X+
    2dd8:	fc 91       	ld	r31, X
    2dda:	5b 97       	sbiw	r26, 0x1b	; 27
    2ddc:	30 97       	sbiw	r30, 0x00	; 0
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <midi_input_callbacks+0x40>
    2de0:	ee c0       	rjmp	.+476    	; 0x2fbe <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    2de2:	cb 01       	movw	r24, r22
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	63 e0       	ldi	r22, 0x03	; 3
    2de8:	70 e0       	ldi	r23, 0x00	; 0
    2dea:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__udivmodhi4>
    2dee:	cb 01       	movw	r24, r22
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	68 0f       	add	r22, r24
    2df6:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2df8:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2dfa:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    2dfc:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2dfe:	4a 2d       	mov	r20, r10
    2e00:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    2e02:	c6 01       	movw	r24, r12
    2e04:	9e 01       	movw	r18, r28
    2e06:	2f 5f       	subi	r18, 0xFF	; 255
    2e08:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0a:	09 95       	icall
    2e0c:	c8 c0       	rjmp	.+400    	; 0x2f9e <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    2e0e:	62 30       	cpi	r22, 0x02	; 2
    2e10:	71 05       	cpc	r23, r1
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <midi_input_callbacks+0x74>
    2e14:	5f c0       	rjmp	.+190    	; 0x2ed4 <midi_input_callbacks+0x132>
    2e16:	63 30       	cpi	r22, 0x03	; 3
    2e18:	71 05       	cpc	r23, r1
    2e1a:	29 f0       	breq	.+10     	; 0x2e26 <midi_input_callbacks+0x84>
    2e1c:	61 30       	cpi	r22, 0x01	; 1
    2e1e:	71 05       	cpc	r23, r1
    2e20:	09 f0       	breq	.+2      	; 0x2e24 <midi_input_callbacks+0x82>
    2e22:	b3 c0       	rjmp	.+358    	; 0x2f8a <midi_input_callbacks+0x1e8>
    2e24:	99 c0       	rjmp	.+306    	; 0x2f58 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2e26:	84 2f       	mov	r24, r20
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	80 7f       	andi	r24, 0xF0	; 240
    2e2c:	90 70       	andi	r25, 0x00	; 0
    2e2e:	80 3a       	cpi	r24, 0xA0	; 160
    2e30:	91 05       	cpc	r25, r1
    2e32:	29 f1       	breq	.+74     	; 0x2e7e <midi_input_callbacks+0xdc>
    2e34:	81 3a       	cpi	r24, 0xA1	; 161
    2e36:	91 05       	cpc	r25, r1
    2e38:	3c f4       	brge	.+14     	; 0x2e48 <midi_input_callbacks+0xa6>
    2e3a:	80 38       	cpi	r24, 0x80	; 128
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	c9 f0       	breq	.+50     	; 0x2e72 <midi_input_callbacks+0xd0>
    2e40:	80 39       	cpi	r24, 0x90	; 144
    2e42:	91 05       	cpc	r25, r1
    2e44:	91 f5       	brne	.+100    	; 0x2eaa <midi_input_callbacks+0x108>
    2e46:	0f c0       	rjmp	.+30     	; 0x2e66 <midi_input_callbacks+0xc4>
    2e48:	80 3e       	cpi	r24, 0xE0	; 224
    2e4a:	91 05       	cpc	r25, r1
    2e4c:	f1 f0       	breq	.+60     	; 0x2e8a <midi_input_callbacks+0xe8>
    2e4e:	80 3f       	cpi	r24, 0xF0	; 240
    2e50:	91 05       	cpc	r25, r1
    2e52:	09 f1       	breq	.+66     	; 0x2e96 <midi_input_callbacks+0xf4>
    2e54:	80 3b       	cpi	r24, 0xB0	; 176
    2e56:	91 05       	cpc	r25, r1
    2e58:	41 f5       	brne	.+80     	; 0x2eaa <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2e5a:	d6 01       	movw	r26, r12
    2e5c:	12 96       	adiw	r26, 0x02	; 2
    2e5e:	ed 91       	ld	r30, X+
    2e60:	fc 91       	ld	r31, X
    2e62:	13 97       	sbiw	r26, 0x03	; 3
              break;
    2e64:	24 c0       	rjmp	.+72     	; 0x2eae <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    2e66:	d6 01       	movw	r26, r12
    2e68:	14 96       	adiw	r26, 0x04	; 4
    2e6a:	ed 91       	ld	r30, X+
    2e6c:	fc 91       	ld	r31, X
    2e6e:	15 97       	sbiw	r26, 0x05	; 5
              break;
    2e70:	1e c0       	rjmp	.+60     	; 0x2eae <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    2e72:	d6 01       	movw	r26, r12
    2e74:	16 96       	adiw	r26, 0x06	; 6
    2e76:	ed 91       	ld	r30, X+
    2e78:	fc 91       	ld	r31, X
    2e7a:	17 97       	sbiw	r26, 0x07	; 7
              break;
    2e7c:	18 c0       	rjmp	.+48     	; 0x2eae <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    2e7e:	d6 01       	movw	r26, r12
    2e80:	18 96       	adiw	r26, 0x08	; 8
    2e82:	ed 91       	ld	r30, X+
    2e84:	fc 91       	ld	r31, X
    2e86:	19 97       	sbiw	r26, 0x09	; 9
              break;
    2e88:	12 c0       	rjmp	.+36     	; 0x2eae <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    2e8a:	d6 01       	movw	r26, r12
    2e8c:	1a 96       	adiw	r26, 0x0a	; 10
    2e8e:	ed 91       	ld	r30, X+
    2e90:	fc 91       	ld	r31, X
    2e92:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    2e94:	0c c0       	rjmp	.+24     	; 0x2eae <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    2e96:	b2 ef       	ldi	r27, 0xF2	; 242
    2e98:	4b 17       	cp	r20, r27
    2e9a:	09 f0       	breq	.+2      	; 0x2e9e <midi_input_callbacks+0xfc>
    2e9c:	90 c0       	rjmp	.+288    	; 0x2fbe <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    2e9e:	d6 01       	movw	r26, r12
    2ea0:	1c 96       	adiw	r26, 0x0c	; 12
    2ea2:	ed 91       	ld	r30, X+
    2ea4:	fc 91       	ld	r31, X
    2ea6:	1d 97       	sbiw	r26, 0x0d	; 13
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    2eaa:	e0 e0       	ldi	r30, 0x00	; 0
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    2eae:	30 97       	sbiw	r30, 0x00	; 0
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <midi_input_callbacks+0x112>
    2eb2:	85 c0       	rjmp	.+266    	; 0x2fbe <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    2eb4:	b2 ef       	ldi	r27, 0xF2	; 242
    2eb6:	fb 16       	cp	r15, r27
    2eb8:	31 f4       	brne	.+12     	; 0x2ec6 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    2eba:	c6 01       	movw	r24, r12
    2ebc:	62 ef       	ldi	r22, 0xF2	; 242
    2ebe:	4e 2d       	mov	r20, r14
    2ec0:	21 2f       	mov	r18, r17
    2ec2:	09 95       	icall
    2ec4:	6c c0       	rjmp	.+216    	; 0x2f9e <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    2ec6:	6f 2d       	mov	r22, r15
    2ec8:	6f 70       	andi	r22, 0x0F	; 15
    2eca:	c6 01       	movw	r24, r12
    2ecc:	4e 2d       	mov	r20, r14
    2ece:	21 2f       	mov	r18, r17
    2ed0:	09 95       	icall
    2ed2:	65 c0       	rjmp	.+202    	; 0x2f9e <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2ed4:	84 2f       	mov	r24, r20
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	80 7f       	andi	r24, 0xF0	; 240
    2eda:	90 70       	andi	r25, 0x00	; 0
    2edc:	80 3d       	cpi	r24, 0xD0	; 208
    2ede:	91 05       	cpc	r25, r1
    2ee0:	61 f0       	breq	.+24     	; 0x2efa <midi_input_callbacks+0x158>
    2ee2:	80 3f       	cpi	r24, 0xF0	; 240
    2ee4:	91 05       	cpc	r25, r1
    2ee6:	79 f0       	breq	.+30     	; 0x2f06 <midi_input_callbacks+0x164>
    2ee8:	80 3c       	cpi	r24, 0xC0	; 192
    2eea:	91 05       	cpc	r25, r1
    2eec:	f9 f4       	brne	.+62     	; 0x2f2c <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    2eee:	d6 01       	movw	r26, r12
    2ef0:	1e 96       	adiw	r26, 0x0e	; 14
    2ef2:	ed 91       	ld	r30, X+
    2ef4:	fc 91       	ld	r31, X
    2ef6:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2ef8:	1b c0       	rjmp	.+54     	; 0x2f30 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2efa:	d6 01       	movw	r26, r12
    2efc:	50 96       	adiw	r26, 0x10	; 16
    2efe:	ed 91       	ld	r30, X+
    2f00:	fc 91       	ld	r31, X
    2f02:	51 97       	sbiw	r26, 0x11	; 17
              break;
    2f04:	15 c0       	rjmp	.+42     	; 0x2f30 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2f06:	b3 ef       	ldi	r27, 0xF3	; 243
    2f08:	4b 17       	cp	r20, r27
    2f0a:	31 f4       	brne	.+12     	; 0x2f18 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    2f0c:	d6 01       	movw	r26, r12
    2f0e:	52 96       	adiw	r26, 0x12	; 18
    2f10:	ed 91       	ld	r30, X+
    2f12:	fc 91       	ld	r31, X
    2f14:	53 97       	sbiw	r26, 0x13	; 19
    2f16:	0c c0       	rjmp	.+24     	; 0x2f30 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2f18:	b1 ef       	ldi	r27, 0xF1	; 241
    2f1a:	4b 17       	cp	r20, r27
    2f1c:	09 f0       	breq	.+2      	; 0x2f20 <midi_input_callbacks+0x17e>
    2f1e:	4f c0       	rjmp	.+158    	; 0x2fbe <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    2f20:	d6 01       	movw	r26, r12
    2f22:	54 96       	adiw	r26, 0x14	; 20
    2f24:	ed 91       	ld	r30, X+
    2f26:	fc 91       	ld	r31, X
    2f28:	55 97       	sbiw	r26, 0x15	; 21
    2f2a:	02 c0       	rjmp	.+4      	; 0x2f30 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    2f2c:	e0 e0       	ldi	r30, 0x00	; 0
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    2f30:	30 97       	sbiw	r30, 0x00	; 0
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <midi_input_callbacks+0x194>
    2f34:	44 c0       	rjmp	.+136    	; 0x2fbe <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2f36:	b3 ef       	ldi	r27, 0xF3	; 243
    2f38:	fb 16       	cp	r15, r27
    2f3a:	19 f0       	breq	.+6      	; 0x2f42 <midi_input_callbacks+0x1a0>
    2f3c:	81 ef       	ldi	r24, 0xF1	; 241
    2f3e:	f8 16       	cp	r15, r24
    2f40:	29 f4       	brne	.+10     	; 0x2f4c <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    2f42:	c6 01       	movw	r24, r12
    2f44:	6f 2d       	mov	r22, r15
    2f46:	4e 2d       	mov	r20, r14
    2f48:	09 95       	icall
    2f4a:	29 c0       	rjmp	.+82     	; 0x2f9e <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    2f4c:	6f 2d       	mov	r22, r15
    2f4e:	6f 70       	andi	r22, 0x0F	; 15
    2f50:	c6 01       	movw	r24, r12
    2f52:	4e 2d       	mov	r20, r14
    2f54:	09 95       	icall
    2f56:	23 c0       	rjmp	.+70     	; 0x2f9e <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2f58:	84 2f       	mov	r24, r20
    2f5a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <midi_is_realtime>
    2f5e:	88 23       	and	r24, r24
    2f60:	31 f0       	breq	.+12     	; 0x2f6e <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    2f62:	d6 01       	movw	r26, r12
    2f64:	56 96       	adiw	r26, 0x16	; 22
    2f66:	ed 91       	ld	r30, X+
    2f68:	fc 91       	ld	r31, X
    2f6a:	57 97       	sbiw	r26, 0x17	; 23
    2f6c:	08 c0       	rjmp	.+16     	; 0x2f7e <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    2f6e:	b6 ef       	ldi	r27, 0xF6	; 246
    2f70:	fb 16       	cp	r15, r27
    2f72:	29 f5       	brne	.+74     	; 0x2fbe <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    2f74:	d6 01       	movw	r26, r12
    2f76:	58 96       	adiw	r26, 0x18	; 24
    2f78:	ed 91       	ld	r30, X+
    2f7a:	fc 91       	ld	r31, X
    2f7c:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    2f7e:	30 97       	sbiw	r30, 0x00	; 0
    2f80:	f1 f0       	breq	.+60     	; 0x2fbe <midi_input_callbacks+0x21c>
            func(device, byte0);
    2f82:	c6 01       	movw	r24, r12
    2f84:	6f 2d       	mov	r22, r15
    2f86:	09 95       	icall
    2f88:	0a c0       	rjmp	.+20     	; 0x2f9e <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    2f8a:	64 30       	cpi	r22, 0x04	; 4
    2f8c:	71 05       	cpc	r23, r1
    2f8e:	a8 f4       	brcc	.+42     	; 0x2fba <midi_input_callbacks+0x218>
    2f90:	16 c0       	rjmp	.+44     	; 0x2fbe <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    2f92:	c6 01       	movw	r24, r12
    2f94:	b5 01       	movw	r22, r10
    2f96:	4f 2d       	mov	r20, r15
    2f98:	2e 2d       	mov	r18, r14
    2f9a:	01 2f       	mov	r16, r17
    2f9c:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    2f9e:	d6 01       	movw	r26, r12
    2fa0:	5e 96       	adiw	r26, 0x1e	; 30
    2fa2:	ed 91       	ld	r30, X+
    2fa4:	fc 91       	ld	r31, X
    2fa6:	5f 97       	sbiw	r26, 0x1f	; 31
    2fa8:	30 97       	sbiw	r30, 0x00	; 0
    2faa:	89 f0       	breq	.+34     	; 0x2fce <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    2fac:	c6 01       	movw	r24, r12
    2fae:	b5 01       	movw	r22, r10
    2fb0:	4f 2d       	mov	r20, r15
    2fb2:	2e 2d       	mov	r18, r14
    2fb4:	01 2f       	mov	r16, r17
    2fb6:	09 95       	icall
    2fb8:	0a c0       	rjmp	.+20     	; 0x2fce <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    2fba:	aa 24       	eor	r10, r10
    2fbc:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    2fbe:	d6 01       	movw	r26, r12
    2fc0:	5c 96       	adiw	r26, 0x1c	; 28
    2fc2:	ed 91       	ld	r30, X+
    2fc4:	fc 91       	ld	r31, X
    2fc6:	5d 97       	sbiw	r26, 0x1d	; 29
    2fc8:	30 97       	sbiw	r30, 0x00	; 0
    2fca:	19 f7       	brne	.-58     	; 0x2f92 <midi_input_callbacks+0x1f0>
    2fcc:	e8 cf       	rjmp	.-48     	; 0x2f9e <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	df 91       	pop	r29
    2fd6:	cf 91       	pop	r28
    2fd8:	1f 91       	pop	r17
    2fda:	0f 91       	pop	r16
    2fdc:	ff 90       	pop	r15
    2fde:	ef 90       	pop	r14
    2fe0:	df 90       	pop	r13
    2fe2:	cf 90       	pop	r12
    2fe4:	bf 90       	pop	r11
    2fe6:	af 90       	pop	r10
    2fe8:	08 95       	ret

00002fea <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	0f 93       	push	r16
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
    2ff4:	7c 01       	movw	r14, r24
    2ff6:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    2ff8:	86 2f       	mov	r24, r22
    2ffa:	0e 94 6e 14 	call	0x28dc	; 0x28dc <midi_is_realtime>
    2ffe:	88 23       	and	r24, r24
    3000:	91 f0       	breq	.+36     	; 0x3026 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    3002:	d7 01       	movw	r26, r14
    3004:	95 96       	adiw	r26, 0x25	; 37
    3006:	dc 91       	ld	r29, X
    3008:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	95 96       	adiw	r26, 0x25	; 37
    300e:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    3010:	c7 01       	movw	r24, r14
    3012:	61 e0       	ldi	r22, 0x01	; 1
    3014:	70 e0       	ldi	r23, 0x00	; 0
    3016:	4c 2f       	mov	r20, r28
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	00 e0       	ldi	r16, 0x00	; 0
    301c:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <midi_input_callbacks>
    device->input_state = state;
    3020:	f7 01       	movw	r30, r14
    3022:	d5 a3       	lds	r29, 0x55
    3024:	b7 c0       	rjmp	.+366    	; 0x3194 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    3026:	8c 2f       	mov	r24, r28
    3028:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <midi_is_statusbyte>
    302c:	88 23       	and	r24, r24
    302e:	09 f4       	brne	.+2      	; 0x3032 <midi_process_byte+0x48>
    3030:	73 c0       	rjmp	.+230    	; 0x3118 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    3032:	d7 01       	movw	r26, r14
    3034:	95 96       	adiw	r26, 0x25	; 37
    3036:	8c 91       	ld	r24, X
    3038:	95 97       	sbiw	r26, 0x25	; 37
    303a:	84 30       	cpi	r24, 0x04	; 4
    303c:	49 f0       	breq	.+18     	; 0x3050 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    303e:	92 96       	adiw	r26, 0x22	; 34
    3040:	cc 93       	st	X, r28
    3042:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	97 96       	adiw	r26, 0x27	; 39
    304a:	9c 93       	st	X, r25
    304c:	8e 93       	st	-X, r24
    304e:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    3050:	8c 2f       	mov	r24, r28
    3052:	0e 94 74 14 	call	0x28e8	; 0x28e8 <midi_packet_length>
    3056:	81 30       	cpi	r24, 0x01	; 1
    3058:	41 f0       	breq	.+16     	; 0x306a <midi_process_byte+0x80>
    305a:	81 30       	cpi	r24, 0x01	; 1
    305c:	00 f1       	brcs	.+64     	; 0x309e <midi_process_byte+0xb4>
    305e:	82 30       	cpi	r24, 0x02	; 2
    3060:	a1 f0       	breq	.+40     	; 0x308a <midi_process_byte+0xa0>
    3062:	83 30       	cpi	r24, 0x03	; 3
    3064:	09 f0       	breq	.+2      	; 0x3068 <midi_process_byte+0x7e>
    3066:	4f c0       	rjmp	.+158    	; 0x3106 <midi_process_byte+0x11c>
    3068:	14 c0       	rjmp	.+40     	; 0x3092 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	f7 01       	movw	r30, r14
    306e:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3070:	c7 01       	movw	r24, r14
    3072:	61 e0       	ldi	r22, 0x01	; 1
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	4c 2f       	mov	r20, r28
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	00 e0       	ldi	r16, 0x00	; 0
    307c:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <midi_input_callbacks>
        device->input_state = IDLE;
    3080:	d7 01       	movw	r26, r14
    3082:	95 96       	adiw	r26, 0x25	; 37
    3084:	1c 92       	st	X, r1
    3086:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3088:	85 c0       	rjmp	.+266    	; 0x3194 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    308a:	82 e0       	ldi	r24, 0x02	; 2
    308c:	f7 01       	movw	r30, r14
    308e:	85 a3       	lds	r24, 0x55
        break;
    3090:	81 c0       	rjmp	.+258    	; 0x3194 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    3092:	83 e0       	ldi	r24, 0x03	; 3
    3094:	d7 01       	movw	r26, r14
    3096:	95 96       	adiw	r26, 0x25	; 37
    3098:	8c 93       	st	X, r24
    309a:	95 97       	sbiw	r26, 0x25	; 37
        break;
    309c:	7b c0       	rjmp	.+246    	; 0x3194 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    309e:	c0 3f       	cpi	r28, 0xF0	; 240
    30a0:	19 f0       	breq	.+6      	; 0x30a8 <midi_process_byte+0xbe>
    30a2:	c7 3f       	cpi	r28, 0xF7	; 247
    30a4:	59 f5       	brne	.+86     	; 0x30fc <midi_process_byte+0x112>
    30a6:	0a c0       	rjmp	.+20     	; 0x30bc <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    30a8:	84 e0       	ldi	r24, 0x04	; 4
    30aa:	f7 01       	movw	r30, r14
    30ac:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    30ae:	80 ef       	ldi	r24, 0xF0	; 240
    30b0:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	97 a3       	lds	r25, 0x57
    30b8:	86 a3       	lds	r24, 0x56
            break;
    30ba:	6c c0       	rjmp	.+216    	; 0x3194 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    30bc:	d7 01       	movw	r26, r14
    30be:	96 96       	adiw	r26, 0x26	; 38
    30c0:	2d 91       	ld	r18, X+
    30c2:	3c 91       	ld	r19, X
    30c4:	97 97       	sbiw	r26, 0x27	; 39
    30c6:	c9 01       	movw	r24, r18
    30c8:	63 e0       	ldi	r22, 0x03	; 3
    30ca:	70 e0       	ldi	r23, 0x00	; 0
    30cc:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__udivmodhi4>
    30d0:	f7 01       	movw	r30, r14
    30d2:	e8 0f       	add	r30, r24
    30d4:	f9 1f       	adc	r31, r25
    30d6:	87 ef       	ldi	r24, 0xF7	; 247
    30d8:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    30da:	b9 01       	movw	r22, r18
    30dc:	6f 5f       	subi	r22, 0xFF	; 255
    30de:	7f 4f       	sbci	r23, 0xFF	; 255
    30e0:	f7 01       	movw	r30, r14
    30e2:	77 a3       	lds	r23, 0x57
    30e4:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    30e6:	c7 01       	movw	r24, r14
    30e8:	42 a1       	lds	r20, 0x42
    30ea:	23 a1       	lds	r18, 0x43
    30ec:	04 a1       	lds	r16, 0x44
    30ee:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    30f2:	d7 01       	movw	r26, r14
    30f4:	95 96       	adiw	r26, 0x25	; 37
    30f6:	1c 92       	st	X, r1
    30f8:	95 97       	sbiw	r26, 0x25	; 37
            break;
    30fa:	4c c0       	rjmp	.+152    	; 0x3194 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    30fc:	f7 01       	movw	r30, r14
    30fe:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    3100:	17 a2       	lds	r17, 0x97
    3102:	16 a2       	lds	r17, 0x96
    3104:	47 c0       	rjmp	.+142    	; 0x3194 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    3106:	d7 01       	movw	r26, r14
    3108:	95 96       	adiw	r26, 0x25	; 37
    310a:	1c 92       	st	X, r1
    310c:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    310e:	97 96       	adiw	r26, 0x27	; 39
    3110:	1c 92       	st	X, r1
    3112:	1e 92       	st	-X, r1
    3114:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3116:	3e c0       	rjmp	.+124    	; 0x3194 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    3118:	f7 01       	movw	r30, r14
    311a:	25 a1       	lds	r18, 0x45
    311c:	22 23       	and	r18, r18
    311e:	d1 f1       	breq	.+116    	; 0x3194 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    3120:	06 a0       	lds	r16, 0x86
    3122:	f7 a1       	lds	r31, 0x47
    3124:	e0 2d       	mov	r30, r0
    3126:	cf 01       	movw	r24, r30
    3128:	63 e0       	ldi	r22, 0x03	; 3
    312a:	70 e0       	ldi	r23, 0x00	; 0
    312c:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__udivmodhi4>
    3130:	ac 01       	movw	r20, r24
    3132:	8e 0d       	add	r24, r14
    3134:	9f 1d       	adc	r25, r15
    3136:	dc 01       	movw	r26, r24
    3138:	92 96       	adiw	r26, 0x22	; 34
    313a:	cc 93       	st	X, r28
    313c:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    313e:	bf 01       	movw	r22, r30
    3140:	6f 5f       	subi	r22, 0xFF	; 255
    3142:	7f 4f       	sbci	r23, 0xFF	; 255
    3144:	f7 01       	movw	r30, r14
    3146:	77 a3       	lds	r23, 0x57
    3148:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    314a:	41 30       	cpi	r20, 0x01	; 1
    314c:	51 05       	cpc	r21, r1
    314e:	91 f0       	breq	.+36     	; 0x3174 <midi_process_byte+0x18a>
    3150:	42 30       	cpi	r20, 0x02	; 2
    3152:	51 05       	cpc	r21, r1
    3154:	f9 f4       	brne	.+62     	; 0x3194 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    3156:	c7 01       	movw	r24, r14
    3158:	42 a1       	lds	r20, 0x42
    315a:	23 a1       	lds	r18, 0x43
    315c:	04 a1       	lds	r16, 0x44
    315e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    3162:	f7 01       	movw	r30, r14
    3164:	85 a1       	lds	r24, 0x45
    3166:	84 30       	cpi	r24, 0x04	; 4
    3168:	a9 f0       	breq	.+42     	; 0x3194 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	97 a3       	lds	r25, 0x57
    3170:	86 a3       	lds	r24, 0x56
    3172:	10 c0       	rjmp	.+32     	; 0x3194 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3174:	22 30       	cpi	r18, 0x02	; 2
    3176:	71 f4       	brne	.+28     	; 0x3194 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3178:	c7 01       	movw	r24, r14
    317a:	42 a1       	lds	r20, 0x42
    317c:	23 a1       	lds	r18, 0x43
    317e:	00 e0       	ldi	r16, 0x00	; 0
    3180:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3184:	f7 01       	movw	r30, r14
    3186:	85 a1       	lds	r24, 0x45
    3188:	84 30       	cpi	r24, 0x04	; 4
    318a:	21 f0       	breq	.+8      	; 0x3194 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	97 a3       	lds	r25, 0x57
    3192:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    3194:	df 91       	pop	r29
    3196:	cf 91       	pop	r28
    3198:	0f 91       	pop	r16
    319a:	ff 90       	pop	r15
    319c:	ef 90       	pop	r14
    319e:	08 95       	ret

000031a0 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    31a0:	cf 92       	push	r12
    31a2:	df 92       	push	r13
    31a4:	ef 92       	push	r14
    31a6:	ff 92       	push	r15
    31a8:	0f 93       	push	r16
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    31b2:	dc 01       	movw	r26, r24
    31b4:	90 96       	adiw	r26, 0x20	; 32
    31b6:	ed 91       	ld	r30, X+
    31b8:	fc 91       	ld	r31, X
    31ba:	91 97       	sbiw	r26, 0x21	; 33
    31bc:	30 97       	sbiw	r30, 0x00	; 0
    31be:	09 f0       	breq	.+2      	; 0x31c2 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    31c0:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    31c2:	0f 2e       	mov	r0, r31
    31c4:	f8 ee       	ldi	r31, 0xE8	; 232
    31c6:	ef 2e       	mov	r14, r31
    31c8:	ff 24       	eor	r15, r15
    31ca:	f0 2d       	mov	r31, r0
    31cc:	ec 0c       	add	r14, r12
    31ce:	fd 1c       	adc	r15, r13
    31d0:	c7 01       	movw	r24, r14
    31d2:	0e 94 25 14 	call	0x284a	; 0x284a <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    31d6:	c8 2f       	mov	r28, r24
    31d8:	d0 e0       	ldi	r29, 0x00	; 0
    31da:	20 97       	sbiw	r28, 0x00	; 0
    31dc:	99 f0       	breq	.+38     	; 0x3204 <midi_device_process+0x64>
    31de:	00 e0       	ldi	r16, 0x00	; 0
    31e0:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    31e2:	c7 01       	movw	r24, r14
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	0e 94 3a 14 	call	0x2874	; 0x2874 <bytequeue_get>
    31ea:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    31ec:	c6 01       	movw	r24, r12
    31ee:	0e 94 f5 17 	call	0x2fea	; 0x2fea <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    31f2:	c7 01       	movw	r24, r14
    31f4:	61 e0       	ldi	r22, 0x01	; 1
    31f6:	0e 94 4b 14 	call	0x2896	; 0x2896 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    31fa:	0f 5f       	subi	r16, 0xFF	; 255
    31fc:	1f 4f       	sbci	r17, 0xFF	; 255
    31fe:	0c 17       	cp	r16, r28
    3200:	1d 07       	cpc	r17, r29
    3202:	78 f3       	brcs	.-34     	; 0x31e2 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	ff 90       	pop	r15
    320e:	ef 90       	pop	r14
    3210:	df 90       	pop	r13
    3212:	cf 90       	pop	r12
    3214:	08 95       	ret

00003216 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3216:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    3218:	67 e0       	ldi	r22, 0x07	; 7
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__udivmodhi4>
    3220:	48 2f       	mov	r20, r24
   if (remainder)
    3222:	88 23       	and	r24, r24
    3224:	81 f0       	breq	.+32     	; 0x3246 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    3226:	c9 01       	movw	r24, r18
    3228:	67 e0       	ldi	r22, 0x07	; 7
    322a:	70 e0       	ldi	r23, 0x00	; 0
    322c:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__udivmodhi4>
    3230:	cb 01       	movw	r24, r22
    3232:	88 0f       	add	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	88 0f       	add	r24, r24
    323c:	99 1f       	adc	r25, r25
    323e:	01 96       	adiw	r24, 0x01	; 1
    3240:	84 0f       	add	r24, r20
    3242:	91 1d       	adc	r25, r1
    3244:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3246:	c9 01       	movw	r24, r18
    3248:	67 e0       	ldi	r22, 0x07	; 7
    324a:	70 e0       	ldi	r23, 0x00	; 0
    324c:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__udivmodhi4>
    3250:	cb 01       	movw	r24, r22
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	88 0f       	add	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	88 0f       	add	r24, r24
    325c:	99 1f       	adc	r25, r25
}
    325e:	08 95       	ret

00003260 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3260:	48 2f       	mov	r20, r24
    3262:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3264:	a1 f0       	breq	.+40     	; 0x328e <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3266:	9c 01       	movw	r18, r24
    3268:	36 95       	lsr	r19
    326a:	27 95       	ror	r18
    326c:	36 95       	lsr	r19
    326e:	27 95       	ror	r18
    3270:	36 95       	lsr	r19
    3272:	27 95       	ror	r18
    3274:	c9 01       	movw	r24, r18
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	88 0f       	add	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	82 1b       	sub	r24, r18
    3284:	93 0b       	sbc	r25, r19
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	84 0f       	add	r24, r20
    328a:	91 1d       	adc	r25, r1
    328c:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    328e:	9c 01       	movw	r18, r24
    3290:	36 95       	lsr	r19
    3292:	27 95       	ror	r18
    3294:	36 95       	lsr	r19
    3296:	27 95       	ror	r18
    3298:	36 95       	lsr	r19
    329a:	27 95       	ror	r18
    329c:	c9 01       	movw	r24, r18
    329e:	88 0f       	add	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	88 0f       	add	r24, r24
    32a4:	99 1f       	adc	r25, r25
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	82 1b       	sub	r24, r18
    32ac:	93 0b       	sbc	r25, r19
}
    32ae:	08 95       	ret

000032b0 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    32b0:	2f 92       	push	r2
    32b2:	3f 92       	push	r3
    32b4:	4f 92       	push	r4
    32b6:	5f 92       	push	r5
    32b8:	6f 92       	push	r6
    32ba:	7f 92       	push	r7
    32bc:	8f 92       	push	r8
    32be:	9f 92       	push	r9
    32c0:	af 92       	push	r10
    32c2:	bf 92       	push	r11
    32c4:	cf 92       	push	r12
    32c6:	df 92       	push	r13
    32c8:	ef 92       	push	r14
    32ca:	ff 92       	push	r15
    32cc:	0f 93       	push	r16
    32ce:	1f 93       	push	r17
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <sysex_encode+0x26>
    32d6:	00 d0       	rcall	.+0      	; 0x32d8 <sysex_encode+0x28>
    32d8:	00 d0       	rcall	.+0      	; 0x32da <sysex_encode+0x2a>
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	1c 01       	movw	r2, r24
    32e0:	7a 83       	std	Y+2, r23	; 0x02
    32e2:	69 83       	std	Y+1, r22	; 0x01
    32e4:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    32e6:	ca 01       	movw	r24, r20
    32e8:	67 e0       	ldi	r22, 0x07	; 7
    32ea:	70 e0       	ldi	r23, 0x00	; 0
    32ec:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__udivmodhi4>
    32f0:	2b 01       	movw	r4, r22
    32f2:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    32f4:	61 15       	cp	r22, r1
    32f6:	71 05       	cpc	r23, r1
    32f8:	b1 f1       	breq	.+108    	; 0x3366 <sysex_encode+0xb6>
    32fa:	81 01       	movw	r16, r2
    32fc:	e9 80       	ldd	r14, Y+1	; 0x01
    32fe:	fa 80       	ldd	r15, Y+2	; 0x02
    3300:	cc 24       	eor	r12, r12
    3302:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3304:	88 24       	eor	r8, r8
    3306:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3308:	1e 83       	std	Y+6, r17	; 0x06
    330a:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    330c:	f8 01       	movw	r30, r16
    330e:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3310:	fc 82       	std	Y+4, r15	; 0x04
    3312:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3314:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3316:	ab 81       	ldd	r26, Y+3	; 0x03
    3318:	bc 81       	ldd	r27, Y+4	; 0x04
    331a:	2d 91       	ld	r18, X+
    331c:	bc 83       	std	Y+4, r27	; 0x04
    331e:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3320:	4f 5f       	subi	r20, 0xFF	; 255
    3322:	5f 4f       	sbci	r21, 0xFF	; 255
    3324:	82 2f       	mov	r24, r18
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	80 78       	andi	r24, 0x80	; 128
    332a:	90 70       	andi	r25, 0x00	; 0
    332c:	bc 01       	movw	r22, r24
    332e:	04 2e       	mov	r0, r20
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <sysex_encode+0x86>
    3332:	75 95       	asr	r23
    3334:	67 95       	ror	r22
    3336:	0a 94       	dec	r0
    3338:	e2 f7       	brpl	.-8      	; 0x3332 <sysex_encode+0x82>
    333a:	ad 81       	ldd	r26, Y+5	; 0x05
    333c:	be 81       	ldd	r27, Y+6	; 0x06
    333e:	8c 91       	ld	r24, X
    3340:	86 2b       	or	r24, r22
    3342:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3344:	2f 77       	andi	r18, 0x7F	; 127
    3346:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3348:	47 30       	cpi	r20, 0x07	; 7
    334a:	51 05       	cpc	r21, r1
    334c:	21 f7       	brne	.-56     	; 0x3316 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    334e:	08 94       	sec
    3350:	c1 1c       	adc	r12, r1
    3352:	d1 1c       	adc	r13, r1
    3354:	08 5f       	subi	r16, 0xF8	; 248
    3356:	1f 4f       	sbci	r17, 0xFF	; 255
    3358:	e7 e0       	ldi	r30, 0x07	; 7
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	ee 0e       	add	r14, r30
    335e:	ff 1e       	adc	r15, r31
    3360:	ca 14       	cp	r12, r10
    3362:	db 04       	cpc	r13, r11
    3364:	89 f6       	brne	.-94     	; 0x3308 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3366:	c3 01       	movw	r24, r6
    3368:	67 e0       	ldi	r22, 0x07	; 7
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__udivmodhi4>
   if (remainder) {
    3370:	88 23       	and	r24, r24
    3372:	d9 f1       	breq	.+118    	; 0x33ea <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3374:	82 01       	movw	r16, r4
    3376:	00 0f       	add	r16, r16
    3378:	11 1f       	adc	r17, r17
    337a:	00 0f       	add	r16, r16
    337c:	11 1f       	adc	r17, r17
    337e:	00 0f       	add	r16, r16
    3380:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3382:	78 01       	movw	r14, r16
    3384:	e4 18       	sub	r14, r4
    3386:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3388:	d1 01       	movw	r26, r2
    338a:	a0 0f       	add	r26, r16
    338c:	b1 1f       	adc	r27, r17
    338e:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3390:	68 2f       	mov	r22, r24
    3392:	70 e0       	ldi	r23, 0x00	; 0
    3394:	61 15       	cp	r22, r1
    3396:	71 05       	cpc	r23, r1
    3398:	19 f1       	breq	.+70     	; 0x33e0 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    339a:	e9 81       	ldd	r30, Y+1	; 0x01
    339c:	fa 81       	ldd	r31, Y+2	; 0x02
    339e:	ee 0e       	add	r14, r30
    33a0:	ff 1e       	adc	r15, r31
    33a2:	c8 01       	movw	r24, r16
    33a4:	01 96       	adiw	r24, 0x01	; 1
    33a6:	28 0e       	add	r2, r24
    33a8:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    33ae:	f7 01       	movw	r30, r14
    33b0:	41 91       	ld	r20, Z+
    33b2:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    33b4:	2f 5f       	subi	r18, 0xFF	; 255
    33b6:	3f 4f       	sbci	r19, 0xFF	; 255
    33b8:	84 2f       	mov	r24, r20
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	80 78       	andi	r24, 0x80	; 128
    33be:	90 70       	andi	r25, 0x00	; 0
    33c0:	02 2e       	mov	r0, r18
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <sysex_encode+0x118>
    33c4:	95 95       	asr	r25
    33c6:	87 95       	ror	r24
    33c8:	0a 94       	dec	r0
    33ca:	e2 f7       	brpl	.-8      	; 0x33c4 <sysex_encode+0x114>
    33cc:	9c 91       	ld	r25, X
    33ce:	89 2b       	or	r24, r25
    33d0:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    33d2:	4f 77       	andi	r20, 0x7F	; 127
    33d4:	f1 01       	movw	r30, r2
    33d6:	41 93       	st	Z+, r20
    33d8:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    33da:	26 17       	cp	r18, r22
    33dc:	37 07       	cpc	r19, r23
    33de:	38 f3       	brcs	.-50     	; 0x33ae <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    33e0:	c8 01       	movw	r24, r16
    33e2:	01 96       	adiw	r24, 0x01	; 1
    33e4:	86 0f       	add	r24, r22
    33e6:	97 1f       	adc	r25, r23
    33e8:	07 c0       	rjmp	.+14     	; 0x33f8 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    33ea:	c2 01       	movw	r24, r4
    33ec:	88 0f       	add	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	88 0f       	add	r24, r24
    33f2:	99 1f       	adc	r25, r25
    33f4:	88 0f       	add	r24, r24
    33f6:	99 1f       	adc	r25, r25
   }
}
    33f8:	26 96       	adiw	r28, 0x06	; 6
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	1f 91       	pop	r17
    340a:	0f 91       	pop	r16
    340c:	ff 90       	pop	r15
    340e:	ef 90       	pop	r14
    3410:	df 90       	pop	r13
    3412:	cf 90       	pop	r12
    3414:	bf 90       	pop	r11
    3416:	af 90       	pop	r10
    3418:	9f 90       	pop	r9
    341a:	8f 90       	pop	r8
    341c:	7f 90       	pop	r7
    341e:	6f 90       	pop	r6
    3420:	5f 90       	pop	r5
    3422:	4f 90       	pop	r4
    3424:	3f 90       	pop	r3
    3426:	2f 90       	pop	r2
    3428:	08 95       	ret

0000342a <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    342a:	6f 92       	push	r6
    342c:	7f 92       	push	r7
    342e:	8f 92       	push	r8
    3430:	9f 92       	push	r9
    3432:	af 92       	push	r10
    3434:	bf 92       	push	r11
    3436:	cf 92       	push	r12
    3438:	df 92       	push	r13
    343a:	ef 92       	push	r14
    343c:	ff 92       	push	r15
    343e:	0f 93       	push	r16
    3440:	1f 93       	push	r17
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	3c 01       	movw	r6, r24
    3448:	4b 01       	movw	r8, r22
    344a:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    344c:	42 30       	cpi	r20, 0x02	; 2
    344e:	51 05       	cpc	r21, r1
    3450:	08 f4       	brcc	.+2      	; 0x3454 <sysex_decode+0x2a>
    3452:	6f c0       	rjmp	.+222    	; 0x3532 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3454:	7a 01       	movw	r14, r20
    3456:	f6 94       	lsr	r15
    3458:	e7 94       	ror	r14
    345a:	f6 94       	lsr	r15
    345c:	e7 94       	ror	r14
    345e:	f6 94       	lsr	r15
    3460:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3462:	e1 14       	cp	r14, r1
    3464:	f1 04       	cpc	r15, r1
    3466:	29 f1       	breq	.+74     	; 0x34b2 <sysex_decode+0x88>
    3468:	eb 01       	movw	r28, r22
    346a:	b3 01       	movw	r22, r6
    346c:	00 e0       	ldi	r16, 0x00	; 0
    346e:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3470:	cc 24       	eor	r12, r12
    3472:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3474:	de 01       	movw	r26, r28
    3476:	11 96       	adiw	r26, 0x01	; 1
    3478:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    347a:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    347c:	2d 91       	ld	r18, X+
    347e:	2f 77       	andi	r18, 0x7F	; 127
    3480:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3482:	4f 5f       	subi	r20, 0xFF	; 255
    3484:	5f 4f       	sbci	r21, 0xFF	; 255
    3486:	88 81       	ld	r24, Y
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	04 2e       	mov	r0, r20
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <sysex_decode+0x68>
    348e:	88 0f       	add	r24, r24
    3490:	99 1f       	adc	r25, r25
    3492:	0a 94       	dec	r0
    3494:	e2 f7       	brpl	.-8      	; 0x348e <sysex_decode+0x64>
    3496:	80 78       	andi	r24, 0x80	; 128
    3498:	28 2b       	or	r18, r24
    349a:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    349c:	47 30       	cpi	r20, 0x07	; 7
    349e:	51 05       	cpc	r21, r1
    34a0:	69 f7       	brne	.-38     	; 0x347c <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    34a2:	0f 5f       	subi	r16, 0xFF	; 255
    34a4:	1f 4f       	sbci	r17, 0xFF	; 255
    34a6:	28 96       	adiw	r28, 0x08	; 8
    34a8:	69 5f       	subi	r22, 0xF9	; 249
    34aa:	7f 4f       	sbci	r23, 0xFF	; 255
    34ac:	0e 15       	cp	r16, r14
    34ae:	1f 05       	cpc	r17, r15
    34b0:	09 f7       	brne	.-62     	; 0x3474 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    34b2:	5a 2d       	mov	r21, r10
    34b4:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    34b6:	99 f1       	breq	.+102    	; 0x351e <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    34b8:	e7 01       	movw	r28, r14
    34ba:	cc 0f       	add	r28, r28
    34bc:	dd 1f       	adc	r29, r29
    34be:	cc 0f       	add	r28, r28
    34c0:	dd 1f       	adc	r29, r29
    34c2:	cc 0f       	add	r28, r28
    34c4:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    34c6:	8e 01       	movw	r16, r28
    34c8:	0e 19       	sub	r16, r14
    34ca:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    34cc:	65 2f       	mov	r22, r21
    34ce:	70 e0       	ldi	r23, 0x00	; 0
    34d0:	61 50       	subi	r22, 0x01	; 1
    34d2:	70 40       	sbci	r23, 0x00	; 0
    34d4:	f9 f0       	breq	.+62     	; 0x3514 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    34d6:	ce 01       	movw	r24, r28
    34d8:	01 96       	adiw	r24, 0x01	; 1
    34da:	d4 01       	movw	r26, r8
    34dc:	a8 0f       	add	r26, r24
    34de:	b9 1f       	adc	r27, r25
    34e0:	f3 01       	movw	r30, r6
    34e2:	e0 0f       	add	r30, r16
    34e4:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    34ea:	c8 0d       	add	r28, r8
    34ec:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    34ee:	4d 91       	ld	r20, X+
    34f0:	4f 77       	andi	r20, 0x7F	; 127
    34f2:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    34f4:	2f 5f       	subi	r18, 0xFF	; 255
    34f6:	3f 4f       	sbci	r19, 0xFF	; 255
    34f8:	88 81       	ld	r24, Y
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	02 2e       	mov	r0, r18
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <sysex_decode+0xda>
    3500:	88 0f       	add	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	0a 94       	dec	r0
    3506:	e2 f7       	brpl	.-8      	; 0x3500 <sysex_decode+0xd6>
    3508:	80 78       	andi	r24, 0x80	; 128
    350a:	48 2b       	or	r20, r24
    350c:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    350e:	26 17       	cp	r18, r22
    3510:	37 07       	cpc	r19, r23
    3512:	68 f3       	brcs	.-38     	; 0x34ee <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3514:	c8 01       	movw	r24, r16
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	85 0f       	add	r24, r21
    351a:	91 1d       	adc	r25, r1
    351c:	0c c0       	rjmp	.+24     	; 0x3536 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    351e:	c7 01       	movw	r24, r14
    3520:	88 0f       	add	r24, r24
    3522:	99 1f       	adc	r25, r25
    3524:	88 0f       	add	r24, r24
    3526:	99 1f       	adc	r25, r25
    3528:	88 0f       	add	r24, r24
    352a:	99 1f       	adc	r25, r25
    352c:	8e 19       	sub	r24, r14
    352e:	9f 09       	sbc	r25, r15
    3530:	02 c0       	rjmp	.+4      	; 0x3536 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3532:	80 e0       	ldi	r24, 0x00	; 0
    3534:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3536:	df 91       	pop	r29
    3538:	cf 91       	pop	r28
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	ff 90       	pop	r15
    3540:	ef 90       	pop	r14
    3542:	df 90       	pop	r13
    3544:	cf 90       	pop	r12
    3546:	bf 90       	pop	r11
    3548:	af 90       	pop	r10
    354a:	9f 90       	pop	r9
    354c:	8f 90       	pop	r8
    354e:	7f 90       	pop	r7
    3550:	6f 90       	pop	r6
    3552:	08 95       	ret

00003554 <__mulsi3>:
    3554:	62 9f       	mul	r22, r18
    3556:	d0 01       	movw	r26, r0
    3558:	73 9f       	mul	r23, r19
    355a:	f0 01       	movw	r30, r0
    355c:	82 9f       	mul	r24, r18
    355e:	e0 0d       	add	r30, r0
    3560:	f1 1d       	adc	r31, r1
    3562:	64 9f       	mul	r22, r20
    3564:	e0 0d       	add	r30, r0
    3566:	f1 1d       	adc	r31, r1
    3568:	92 9f       	mul	r25, r18
    356a:	f0 0d       	add	r31, r0
    356c:	83 9f       	mul	r24, r19
    356e:	f0 0d       	add	r31, r0
    3570:	74 9f       	mul	r23, r20
    3572:	f0 0d       	add	r31, r0
    3574:	65 9f       	mul	r22, r21
    3576:	f0 0d       	add	r31, r0
    3578:	99 27       	eor	r25, r25
    357a:	72 9f       	mul	r23, r18
    357c:	b0 0d       	add	r27, r0
    357e:	e1 1d       	adc	r30, r1
    3580:	f9 1f       	adc	r31, r25
    3582:	63 9f       	mul	r22, r19
    3584:	b0 0d       	add	r27, r0
    3586:	e1 1d       	adc	r30, r1
    3588:	f9 1f       	adc	r31, r25
    358a:	bd 01       	movw	r22, r26
    358c:	cf 01       	movw	r24, r30
    358e:	11 24       	eor	r1, r1
    3590:	08 95       	ret

00003592 <__udivmodhi4>:
    3592:	aa 1b       	sub	r26, r26
    3594:	bb 1b       	sub	r27, r27
    3596:	51 e1       	ldi	r21, 0x11	; 17
    3598:	07 c0       	rjmp	.+14     	; 0x35a8 <__udivmodhi4_ep>

0000359a <__udivmodhi4_loop>:
    359a:	aa 1f       	adc	r26, r26
    359c:	bb 1f       	adc	r27, r27
    359e:	a6 17       	cp	r26, r22
    35a0:	b7 07       	cpc	r27, r23
    35a2:	10 f0       	brcs	.+4      	; 0x35a8 <__udivmodhi4_ep>
    35a4:	a6 1b       	sub	r26, r22
    35a6:	b7 0b       	sbc	r27, r23

000035a8 <__udivmodhi4_ep>:
    35a8:	88 1f       	adc	r24, r24
    35aa:	99 1f       	adc	r25, r25
    35ac:	5a 95       	dec	r21
    35ae:	a9 f7       	brne	.-22     	; 0x359a <__udivmodhi4_loop>
    35b0:	80 95       	com	r24
    35b2:	90 95       	com	r25
    35b4:	bc 01       	movw	r22, r24
    35b6:	cd 01       	movw	r24, r26
    35b8:	08 95       	ret

000035ba <__divmodhi4>:
    35ba:	97 fb       	bst	r25, 7
    35bc:	09 2e       	mov	r0, r25
    35be:	07 26       	eor	r0, r23
    35c0:	0a d0       	rcall	.+20     	; 0x35d6 <__divmodhi4_neg1>
    35c2:	77 fd       	sbrc	r23, 7
    35c4:	04 d0       	rcall	.+8      	; 0x35ce <__divmodhi4_neg2>
    35c6:	e5 df       	rcall	.-54     	; 0x3592 <__udivmodhi4>
    35c8:	06 d0       	rcall	.+12     	; 0x35d6 <__divmodhi4_neg1>
    35ca:	00 20       	and	r0, r0
    35cc:	1a f4       	brpl	.+6      	; 0x35d4 <__divmodhi4_exit>

000035ce <__divmodhi4_neg2>:
    35ce:	70 95       	com	r23
    35d0:	61 95       	neg	r22
    35d2:	7f 4f       	sbci	r23, 0xFF	; 255

000035d4 <__divmodhi4_exit>:
    35d4:	08 95       	ret

000035d6 <__divmodhi4_neg1>:
    35d6:	f6 f7       	brtc	.-4      	; 0x35d4 <__divmodhi4_exit>
    35d8:	90 95       	com	r25
    35da:	81 95       	neg	r24
    35dc:	9f 4f       	sbci	r25, 0xFF	; 255
    35de:	08 95       	ret

000035e0 <memcpy>:
    35e0:	fb 01       	movw	r30, r22
    35e2:	dc 01       	movw	r26, r24
    35e4:	02 c0       	rjmp	.+4      	; 0x35ea <memcpy+0xa>
    35e6:	01 90       	ld	r0, Z+
    35e8:	0d 92       	st	X+, r0
    35ea:	41 50       	subi	r20, 0x01	; 1
    35ec:	50 40       	sbci	r21, 0x00	; 0
    35ee:	d8 f7       	brcc	.-10     	; 0x35e6 <memcpy+0x6>
    35f0:	08 95       	ret

000035f2 <memmove>:
    35f2:	68 17       	cp	r22, r24
    35f4:	79 07       	cpc	r23, r25
    35f6:	68 f4       	brcc	.+26     	; 0x3612 <memmove+0x20>
    35f8:	fb 01       	movw	r30, r22
    35fa:	dc 01       	movw	r26, r24
    35fc:	e4 0f       	add	r30, r20
    35fe:	f5 1f       	adc	r31, r21
    3600:	a4 0f       	add	r26, r20
    3602:	b5 1f       	adc	r27, r21
    3604:	02 c0       	rjmp	.+4      	; 0x360a <memmove+0x18>
    3606:	02 90       	ld	r0, -Z
    3608:	0e 92       	st	-X, r0
    360a:	41 50       	subi	r20, 0x01	; 1
    360c:	50 40       	sbci	r21, 0x00	; 0
    360e:	d8 f7       	brcc	.-10     	; 0x3606 <memmove+0x14>
    3610:	08 95       	ret
    3612:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <memcpy>

00003616 <__eerd_block_m6450a>:
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22

0000361a <__eerd_blraw_m6450a>:
    361a:	fc 01       	movw	r30, r24
    361c:	f9 99       	sbic	0x1f, 1	; 31
    361e:	fe cf       	rjmp	.-4      	; 0x361c <__eerd_blraw_m6450a+0x2>
    3620:	06 c0       	rjmp	.+12     	; 0x362e <__eerd_blraw_m6450a+0x14>
    3622:	f2 bd       	out	0x22, r31	; 34
    3624:	e1 bd       	out	0x21, r30	; 33
    3626:	f8 9a       	sbi	0x1f, 0	; 31
    3628:	31 96       	adiw	r30, 0x01	; 1
    362a:	00 b4       	in	r0, 0x20	; 32
    362c:	0d 92       	st	X+, r0
    362e:	41 50       	subi	r20, 0x01	; 1
    3630:	50 40       	sbci	r21, 0x00	; 0
    3632:	b8 f7       	brcc	.-18     	; 0x3622 <__eerd_blraw_m6450a+0x8>
    3634:	08 95       	ret

00003636 <__eerd_word_m6450a>:
    3636:	a8 e1       	ldi	r26, 0x18	; 24
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	42 e0       	ldi	r20, 0x02	; 2
    363c:	50 e0       	ldi	r21, 0x00	; 0
    363e:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <__eerd_blraw_m6450a>

00003642 <__eeupd_block_m6450a>:
    3642:	dc 01       	movw	r26, r24
    3644:	a4 0f       	add	r26, r20
    3646:	b5 1f       	adc	r27, r21
    3648:	41 50       	subi	r20, 0x01	; 1
    364a:	50 40       	sbci	r21, 0x00	; 0
    364c:	48 f0       	brcs	.+18     	; 0x3660 <__eeupd_block_m6450a+0x1e>
    364e:	cb 01       	movw	r24, r22
    3650:	84 0f       	add	r24, r20
    3652:	95 1f       	adc	r25, r21
    3654:	2e 91       	ld	r18, -X
    3656:	0e 94 32 1b 	call	0x3664	; 0x3664 <__eeupd_r18_m6450a>
    365a:	41 50       	subi	r20, 0x01	; 1
    365c:	50 40       	sbci	r21, 0x00	; 0
    365e:	d0 f7       	brcc	.-12     	; 0x3654 <__eeupd_block_m6450a+0x12>
    3660:	08 95       	ret

00003662 <__eeupd_byte_m6450a>:
    3662:	26 2f       	mov	r18, r22

00003664 <__eeupd_r18_m6450a>:
    3664:	f9 99       	sbic	0x1f, 1	; 31
    3666:	fe cf       	rjmp	.-4      	; 0x3664 <__eeupd_r18_m6450a>
    3668:	92 bd       	out	0x22, r25	; 34
    366a:	81 bd       	out	0x21, r24	; 33
    366c:	f8 9a       	sbi	0x1f, 0	; 31
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	00 b4       	in	r0, 0x20	; 32
    3672:	02 16       	cp	r0, r18
    3674:	31 f0       	breq	.+12     	; 0x3682 <__eeupd_r18_m6450a+0x1e>
    3676:	20 bd       	out	0x20, r18	; 32
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	fa 9a       	sbi	0x1f, 2	; 31
    367e:	f9 9a       	sbi	0x1f, 1	; 31
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	08 95       	ret

00003684 <__eeupd_word_m6450a>:
    3684:	01 96       	adiw	r24, 0x01	; 1
    3686:	27 2f       	mov	r18, r23
    3688:	0e 94 32 1b 	call	0x3664	; 0x3664 <__eeupd_r18_m6450a>
    368c:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <__eeupd_byte_m6450a>

00003690 <_exit>:
    3690:	f8 94       	cli

00003692 <__stop_program>:
    3692:	ff cf       	rjmp	.-2      	; 0x3692 <__stop_program>
