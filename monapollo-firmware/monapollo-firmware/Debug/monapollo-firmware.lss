
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003732  000037e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003732  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ba  008002b0  008002b0  00003996  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  0000400c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002c0  00000000  00000000  00004f40  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005b05  00000000  00000000  00005200  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001579  00000000  00000000  0000ad05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e31  00000000  00000000  0000c27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c30  00000000  00000000  0000e0b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000017fb  00000000  00000000  0000ece0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002bba  00000000  00000000  000104db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00013095  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_9>
      28:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e2 e3       	ldi	r30, 0x32	; 50
      78:	f7 e3       	ldi	r31, 0x37	; 55
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	aa 36       	cpi	r26, 0x6A	; 106
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 f5 02 	call	0x5ea	; 0x5ea <main>
      9a:	0c 94 97 1b 	jmp	0x372e	; 0x372e <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 b0 02 	lds	r24, 0x02B0
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 48 1b 	call	0x3690	; 0x3690 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 b0 02 	sts	0x02B0, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 48 1b 	call	0x3690	; 0x3690 <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 b0 02 	sts	0x02B0, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 b0 02 	sts	0x02B0, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1f6:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1f8:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1fa:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1fc:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1fe:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     200:	8c 91       	ld	r24, X
     202:	87 70       	andi	r24, 0x07	; 7
     204:	82 b9       	out	0x02, r24	; 2
     206:	66 e0       	ldi	r22, 0x06	; 6
     208:	6a 95       	dec	r22
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x12>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     20e:	ea ed       	ldi	r30, 0xDA	; 218
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	40 81       	ld	r20, Z
     214:	8c 91       	ld	r24, X
     216:	86 95       	lsr	r24
     218:	86 95       	lsr	r24
     21a:	86 95       	lsr	r24
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	b9 01       	movw	r22, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <set_control_voltage+0x34>
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <set_control_voltage+0x30>
     22e:	cb 01       	movw	r24, r22
     230:	84 2b       	or	r24, r20
     232:	80 83       	st	Z, r24
     234:	76 e0       	ldi	r23, 0x06	; 6
     236:	7a 95       	dec	r23
     238:	f1 f7       	brne	.-4      	; 0x236 <set_control_voltage+0x40>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     23c:	80 81       	ld	r24, Z
     23e:	9c 91       	ld	r25, X
     240:	96 95       	lsr	r25
     242:	96 95       	lsr	r25
     244:	96 95       	lsr	r25
     246:	97 70       	andi	r25, 0x07	; 7
     248:	02 c0       	rjmp	.+4      	; 0x24e <set_control_voltage+0x58>
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	9a 95       	dec	r25
     250:	e2 f7       	brpl	.-8      	; 0x24a <set_control_voltage+0x54>
     252:	20 95       	com	r18
     254:	28 23       	and	r18, r24
     256:	20 83       	st	Z, r18
	
}	
     258:	08 95       	ret

0000025a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     25a:	83 b3       	in	r24, 0x13	; 19
     25c:	83 60       	ori	r24, 0x03	; 3
     25e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     264:	97 b1       	in	r25, 0x07	; 7
     266:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     268:	e9 ed       	ldi	r30, 0xD9	; 217
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     272:	ea ed       	ldi	r30, 0xDA	; 218
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     27c:	84 b3       	in	r24, 0x14	; 20
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     282:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     284:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     286:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     288:	a0 9a       	sbi	0x14, 0	; 20
}
     28a:	08 95       	ret

0000028c <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2e 97       	sbiw	r28, 0x0e	; 14
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     2a4:	28 e0       	ldi	r18, 0x08	; 8
     2a6:	29 83       	std	Y+1, r18	; 0x01
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	2a 83       	std	Y+2, r18	; 0x02
     2ac:	22 e0       	ldi	r18, 0x02	; 2
     2ae:	2b 83       	std	Y+3, r18	; 0x03
     2b0:	24 e0       	ldi	r18, 0x04	; 4
     2b2:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2b4:	de 01       	movw	r26, r28
     2b6:	15 96       	adiw	r26, 0x05	; 5
     2b8:	e7 ee       	ldi	r30, 0xE7	; 231
     2ba:	f1 e0       	ldi	r31, 0x01	; 1
     2bc:	2a e0       	ldi	r18, 0x0A	; 10
     2be:	01 90       	ld	r0, Z+
     2c0:	0d 92       	st	X+, r0
     2c2:	21 50       	subi	r18, 0x01	; 1
     2c4:	e1 f7       	brne	.-8      	; 0x2be <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c6:	2f ef       	ldi	r18, 0xFF	; 255
     2c8:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2ca:	ea ed       	ldi	r30, 0xDA	; 218
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	20 81       	ld	r18, Z
     2d0:	20 61       	ori	r18, 0x10	; 16
     2d2:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d4:	20 81       	ld	r18, Z
     2d6:	2f 7e       	andi	r18, 0xEF	; 239
     2d8:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     2da:	06 2f       	mov	r16, r22
     2dc:	10 e0       	ldi	r17, 0x00	; 0
     2de:	de 01       	movw	r26, r28
     2e0:	a0 0f       	add	r26, r16
     2e2:	b1 1f       	adc	r27, r17
     2e4:	11 96       	adiw	r26, 0x01	; 1
     2e6:	2c 91       	ld	r18, X
     2e8:	11 97       	sbiw	r26, 0x01	; 1
     2ea:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2ec:	20 81       	ld	r18, Z
     2ee:	20 62       	ori	r18, 0x20	; 32
     2f0:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2f2:	20 81       	ld	r18, Z
     2f4:	2f 7d       	andi	r18, 0xDF	; 223
     2f6:	20 83       	st	Z, r18
     2f8:	48 2f       	mov	r20, r24
     2fa:	59 2f       	mov	r21, r25
     2fc:	87 e2       	ldi	r24, 0x27	; 39
     2fe:	40 31       	cpi	r20, 0x10	; 16
     300:	58 07       	cpc	r21, r24
     302:	10 f0       	brcs	.+4      	; 0x308 <display_dec+0x7c>
     304:	4f e0       	ldi	r20, 0x0F	; 15
     306:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     308:	ca 01       	movw	r24, r20
     30a:	96 95       	lsr	r25
     30c:	87 95       	ror	r24
     30e:	96 95       	lsr	r25
     310:	87 95       	ror	r24
     312:	9a 01       	movw	r18, r20
     314:	36 95       	lsr	r19
     316:	27 95       	ror	r18
     318:	28 0f       	add	r18, r24
     31a:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     31c:	c9 01       	movw	r24, r18
     31e:	92 95       	swap	r25
     320:	82 95       	swap	r24
     322:	8f 70       	andi	r24, 0x0F	; 15
     324:	89 27       	eor	r24, r25
     326:	9f 70       	andi	r25, 0x0F	; 15
     328:	89 27       	eor	r24, r25
     32a:	82 0f       	add	r24, r18
     32c:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     32e:	29 2f       	mov	r18, r25
     330:	33 27       	eor	r19, r19
     332:	82 0f       	add	r24, r18
     334:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     336:	96 95       	lsr	r25
     338:	87 95       	ror	r24
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
	r = number - q2 * 10;
     342:	28 2f       	mov	r18, r24
     344:	22 0f       	add	r18, r18
     346:	32 2f       	mov	r19, r18
     348:	33 0f       	add	r19, r19
     34a:	33 0f       	add	r19, r19
     34c:	23 0f       	add	r18, r19
     34e:	e4 2f       	mov	r30, r20
     350:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	ea 30       	cpi	r30, 0x0A	; 10
     358:	10 f4       	brcc	.+4      	; 0x35e <display_dec+0xd2>
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	68 0f       	add	r22, r24
     360:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     362:	9b 01       	movw	r18, r22
     364:	36 95       	lsr	r19
     366:	27 95       	ror	r18
     368:	36 95       	lsr	r19
     36a:	27 95       	ror	r18
     36c:	ab 01       	movw	r20, r22
     36e:	56 95       	lsr	r21
     370:	47 95       	ror	r20
     372:	24 0f       	add	r18, r20
     374:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     376:	c9 01       	movw	r24, r18
     378:	92 95       	swap	r25
     37a:	82 95       	swap	r24
     37c:	8f 70       	andi	r24, 0x0F	; 15
     37e:	89 27       	eor	r24, r25
     380:	9f 70       	andi	r25, 0x0F	; 15
     382:	89 27       	eor	r24, r25
     384:	82 0f       	add	r24, r18
     386:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     388:	29 2f       	mov	r18, r25
     38a:	33 27       	eor	r19, r19
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     390:	96 95       	lsr	r25
     392:	87 95       	ror	r24
     394:	96 95       	lsr	r25
     396:	87 95       	ror	r24
     398:	96 95       	lsr	r25
     39a:	87 95       	ror	r24
	r = qa - q3 * 10;
     39c:	98 2f       	mov	r25, r24
     39e:	99 0f       	add	r25, r25
     3a0:	29 2f       	mov	r18, r25
     3a2:	22 0f       	add	r18, r18
     3a4:	22 0f       	add	r18, r18
     3a6:	92 0f       	add	r25, r18
     3a8:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	6a 30       	cpi	r22, 0x0A	; 10
     3ae:	08 f4       	brcc	.+2      	; 0x3b2 <display_dec+0x126>
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3b4:	41 ef       	ldi	r20, 0xF1	; 241
     3b6:	51 e0       	ldi	r21, 0x01	; 1
     3b8:	da 01       	movw	r26, r20
     3ba:	a6 0f       	add	r26, r22
     3bc:	b1 1d       	adc	r27, r1
     3be:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3c0:	28 2f       	mov	r18, r24
     3c2:	26 95       	lsr	r18
     3c4:	26 95       	lsr	r18
     3c6:	98 2f       	mov	r25, r24
     3c8:	96 95       	lsr	r25
     3ca:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3cc:	29 2f       	mov	r18, r25
     3ce:	22 95       	swap	r18
     3d0:	2f 70       	andi	r18, 0x0F	; 15
     3d2:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     3d4:	96 95       	lsr	r25
     3d6:	96 95       	lsr	r25
     3d8:	96 95       	lsr	r25
	r = qb - q4 * 10;
     3da:	29 2f       	mov	r18, r25
     3dc:	22 0f       	add	r18, r18
     3de:	62 2f       	mov	r22, r18
     3e0:	66 0f       	add	r22, r22
     3e2:	66 0f       	add	r22, r22
     3e4:	26 0f       	add	r18, r22
     3e6:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     3e8:	da 01       	movw	r26, r20
     3ea:	a8 0f       	add	r26, r24
     3ec:	b1 1d       	adc	r27, r1
     3ee:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     3f0:	4e 0f       	add	r20, r30
     3f2:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     3f4:	fa 01       	movw	r30, r20
     3f6:	40 81       	ld	r20, Z
     3f8:	40 93 b3 02 	sts	0x02B3, r20
	digit_index[1] = tens_place;
     3fc:	30 93 b4 02 	sts	0x02B4, r19
	digit_index[2] = hunds_place;
     400:	20 93 b5 02 	sts	0x02B5, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	8a 30       	cpi	r24, 0x0A	; 10
     408:	08 f4       	brcc	.+2      	; 0x40c <display_dec+0x180>
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     40e:	90 93 b6 02 	sts	0x02B6, r25

	cathode_byte = dec[digit_index[place]];
     412:	f8 01       	movw	r30, r16
     414:	ed 54       	subi	r30, 0x4D	; 77
     416:	fd 4f       	sbci	r31, 0xFD	; 253
     418:	80 81       	ld	r24, Z
     41a:	fe 01       	movw	r30, r28
     41c:	e8 0f       	add	r30, r24
     41e:	f1 1d       	adc	r31, r1
     420:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     422:	90 91 05 03 	lds	r25, 0x0305
     426:	92 30       	cpi	r25, 0x02	; 2
     428:	11 f4       	brne	.+4      	; 0x42e <display_dec+0x1a2>
     42a:	80 62       	ori	r24, 0x20	; 32
     42c:	03 c0       	rjmp	.+6      	; 0x434 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     42e:	91 30       	cpi	r25, 0x01	; 1
     430:	09 f4       	brne	.+2      	; 0x434 <display_dec+0x1a8>
     432:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     434:	80 95       	com	r24
     436:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     438:	ea ed       	ldi	r30, 0xDA	; 218
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	80 61       	ori	r24, 0x10	; 16
     440:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     442:	80 81       	ld	r24, Z
     444:	8f 7e       	andi	r24, 0xEF	; 239
     446:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     448:	2e 96       	adiw	r28, 0x0e	; 14
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	08 95       	ret

0000045e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     45e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     460:	66 23       	and	r22, r22
     462:	69 f4       	brne	.+26     	; 0x47e <update_display+0x20>

		
			
		display_dec(number, place);
     464:	c0 91 b7 02 	lds	r28, 0x02B7
     468:	6c 2f       	mov	r22, r28
     46a:	0e 94 46 01 	call	0x28c	; 0x28c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     46e:	8c 2f       	mov	r24, r28
     470:	8f 5f       	subi	r24, 0xFF	; 255
     472:	80 93 b7 02 	sts	0x02B7, r24
     476:	c3 30       	cpi	r28, 0x03	; 3
     478:	11 f4       	brne	.+4      	; 0x47e <update_display+0x20>
		{
			place = 0;
     47a:	10 92 b7 02 	sts	0x02B7, r1
		
		
	}
	
	
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	8f 93       	push	r24
     48e:	9f 93       	push	r25
     490:	ef 93       	push	r30
     492:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     494:	80 91 77 03 	lds	r24, 0x0377
     498:	81 50       	subi	r24, 0x01	; 1
     49a:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     49c:	80 91 78 03 	lds	r24, 0x0378
     4a0:	88 23       	and	r24, r24
     4a2:	a1 f4       	brne	.+40     	; 0x4cc <__vector_10+0x4a>
		count_finished = FALSE;
     4a4:	10 92 75 03 	sts	0x0375, r1
		no_overflow = TRUE;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     4ae:	80 93 78 03 	sts	0x0378, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     4b2:	e1 e8       	ldi	r30, 0x81	; 129
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	90 91 76 03 	lds	r25, 0x0376
     4bc:	89 2b       	or	r24, r25
     4be:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4c0:	ef e6       	ldi	r30, 0x6F	; 111
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	81 60       	ori	r24, 0x01	; 1
     4c8:	80 83       	st	Z, r24
     4ca:	11 c0       	rjmp	.+34     	; 0x4ee <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4cc:	e4 e8       	ldi	r30, 0x84	; 132
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	91 81       	ldd	r25, Z+1	; 0x01
     4d4:	90 93 74 03 	sts	0x0374, r25
     4d8:	80 93 73 03 	sts	0x0373, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     4dc:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 75 03 	sts	0x0375, r24
		period_counter = 0;
     4e6:	10 92 78 03 	sts	0x0378, r1
		TCNT1 = 0; //reset timer/counter 1
     4ea:	11 82       	std	Z+1, r1	; 0x01
     4ec:	10 82       	st	Z, r1
	}
	
	
	
	
}
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	9f 91       	pop	r25
     4f4:	8f 91       	pop	r24
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     50a:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
     50e:	0f 90       	pop	r0
     510:	0f be       	out	0x3f, r0	; 63
     512:	0f 90       	pop	r0
     514:	1f 90       	pop	r1
     516:	18 95       	reti

00000518 <note_off_event>:
		PORTF |= (1<<GATE);
	}
	PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     518:	84 2f       	mov	r24, r20
	remove_note(note);
     51a:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     51e:	80 91 b9 02 	lds	r24, 0x02B9
     522:	81 50       	subi	r24, 0x01	; 1
     524:	80 93 b9 02 	sts	0x02B9, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     528:	88 23       	and	r24, r24
     52a:	09 f4       	brne	.+2      	; 0x52e <note_off_event+0x16>
     52c:	89 98       	cbi	0x11, 1	; 17
     52e:	08 95       	ret

00000530 <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     530:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_NOTE_RESET) & 1) PORTB |= (1<< LFO_RESET);
     532:	90 91 ff 02 	lds	r25, 0x02FF
     536:	90 fd       	sbrc	r25, 0
     538:	2c 9a       	sbi	0x05, 4	; 5
	//value_to_display = note;
	midi_note_number = note;
     53a:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) {
     53e:	22 23       	and	r18, r18
     540:	59 f4       	brne	.+22     	; 0x558 <note_on_event+0x28>
		remove_note(note);
     542:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     546:	80 91 b9 02 	lds	r24, 0x02B9
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	80 93 b9 02 	sts	0x02B9, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     550:	88 23       	and	r24, r24
     552:	59 f4       	brne	.+22     	; 0x56a <note_on_event+0x3a>
     554:	89 98       	cbi	0x11, 1	; 17
     556:	09 c0       	rjmp	.+18     	; 0x56a <note_on_event+0x3a>
				
	} else {
		new_note(note, velocity);
     558:	62 2f       	mov	r22, r18
     55a:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     55e:	80 91 b9 02 	lds	r24, 0x02B9
     562:	8f 5f       	subi	r24, 0xFF	; 255
     564:	80 93 b9 02 	sts	0x02B9, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     568:	89 9a       	sbi	0x11, 1	; 17
	}
	PORTB &= ~(1<< LFO_RESET);
     56a:	2c 98       	cbi	0x05, 4	; 5
	
}
     56c:	08 95       	ret

0000056e <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     56e:	87 e2       	ldi	r24, 0x27	; 39
     570:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     574:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     578:	88 e9       	ldi	r24, 0x98	; 152
     57a:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     57e:	08 95       	ret

00000580 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     580:	1f 92       	push	r1
     582:	0f 92       	push	r0
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	0f 92       	push	r0
     588:	11 24       	eor	r1, r1
     58a:	2f 93       	push	r18
     58c:	3f 93       	push	r19
     58e:	4f 93       	push	r20
     590:	5f 93       	push	r21
     592:	6f 93       	push	r22
     594:	7f 93       	push	r23
     596:	8f 93       	push	r24
     598:	9f 93       	push	r25
     59a:	af 93       	push	r26
     59c:	bf 93       	push	r27
     59e:	ef 93       	push	r30
     5a0:	ff 93       	push	r31
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	0f 92       	push	r0
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     5ac:	80 91 c6 00 	lds	r24, 0x00C6
     5b0:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     5b2:	8d e7       	ldi	r24, 0x7D	; 125
     5b4:	93 e0       	ldi	r25, 0x03	; 3
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	ae 01       	movw	r20, r28
     5ba:	4f 5f       	subi	r20, 0xFF	; 255
     5bc:	5f 4f       	sbci	r21, 0xFF	; 255
     5be:	0e 94 f5 16 	call	0x2dea	; 0x2dea <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     5c2:	0f 90       	pop	r0
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	ff 91       	pop	r31
     5ca:	ef 91       	pop	r30
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	7f 91       	pop	r23
     5d6:	6f 91       	pop	r22
     5d8:	5f 91       	pop	r21
     5da:	4f 91       	pop	r20
     5dc:	3f 91       	pop	r19
     5de:	2f 91       	pop	r18
     5e0:	0f 90       	pop	r0
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	0f 90       	pop	r0
     5e6:	1f 90       	pop	r1
     5e8:	18 95       	reti

000005ea <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     5ea:	c0 e8       	ldi	r28, 0x80	; 128
     5ec:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     5ee:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     5f0:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     5f2:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     5f4:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     5f6:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     5f8:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     5fa:	0e 94 1c 06 	call	0xc38	; 0xc38 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     5fe:	a9 ed       	ldi	r26, 0xD9	; 217
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	8c 91       	ld	r24, X
     604:	80 6c       	ori	r24, 0xC0	; 192
     606:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     608:	ea ed       	ldi	r30, 0xDA	; 218
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	80 6c       	ori	r24, 0xC0	; 192
     610:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     612:	81 b1       	in	r24, 0x01	; 1
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     618:	92 b1       	in	r25, 0x02	; 2
     61a:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     61c:	8c 91       	ld	r24, X
     61e:	80 63       	ori	r24, 0x30	; 48
     620:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     622:	80 81       	ld	r24, Z
     624:	8f 7c       	andi	r24, 0xCF	; 207
     626:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     628:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     62a:	ec ed       	ldi	r30, 0xDC	; 220
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	80 62       	ori	r24, 0x20	; 32
     632:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     634:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     636:	ed ed       	ldi	r30, 0xDD	; 221
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 81       	ld	r24, Z
     63c:	80 62       	ori	r24, 0x20	; 32
     63e:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     640:	80 81       	ld	r24, Z
     642:	8f 7d       	andi	r24, 0xDF	; 223
     644:	80 83       	st	Z, r24
	DATA_BUS = 0;
     646:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     648:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     64c:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     650:	0e 94 2d 01 	call	0x25a	; 0x25a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     654:	cd e7       	ldi	r28, 0x7D	; 125
     656:	d3 e0       	ldi	r29, 0x03	; 3
     658:	ce 01       	movw	r24, r28
     65a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     65e:	ce 01       	movw	r24, r28
     660:	68 e9       	ldi	r22, 0x98	; 152
     662:	72 e0       	ldi	r23, 0x02	; 2
     664:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     668:	ce 01       	movw	r24, r28
     66a:	6c e8       	ldi	r22, 0x8C	; 140
     66c:	72 e0       	ldi	r23, 0x02	; 2
     66e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     672:	0e 94 b7 02 	call	0x56e	; 0x56e <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     676:	0e 94 41 06 	call	0xc82	; 0xc82 <update_spi>
	
	
	current_patch.number = 1;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     680:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     682:	0e 94 3f 13 	call	0x267e	; 0x267e <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	0e 94 c4 08 	call	0x1188	; 0x1188 <load_patch>

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     68c:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     68e:	0f 2e       	mov	r0, r31
     690:	fb e7       	ldi	r31, 0x7B	; 123
     692:	ef 2e       	mov	r14, r31
     694:	f3 e0       	ldi	r31, 0x03	; 3
     696:	ff 2e       	mov	r15, r31
     698:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     69a:	0f 2e       	mov	r0, r31
     69c:	f5 e0       	ldi	r31, 0x05	; 5
     69e:	cf 2e       	mov	r12, r31
     6a0:	f3 e0       	ldi	r31, 0x03	; 3
     6a2:	df 2e       	mov	r13, r31
     6a4:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     6a6:	bb 24       	eor	r11, r11
     6a8:	68 94       	set
     6aa:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     6ac:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     6ae:	c8 01       	movw	r24, r16
     6b0:	0e 94 1f 19 	call	0x323e	; 0x323e <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     6b4:	80 91 fd 01 	lds	r24, 0x01FD
     6b8:	90 91 fe 01 	lds	r25, 0x01FE
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     6c2:	0e 94 90 03 	call	0x720	; 0x720 <scan_pots>
		update_control_voltages();
     6c6:	0e 94 1d 04 	call	0x83a	; 0x83a <update_control_voltages>
			
		//do SPI read/write every 5 loops - whole section needs major update
		if (switch_timer++ == 5)
     6ca:	80 91 b8 02 	lds	r24, 0x02B8
     6ce:	98 2f       	mov	r25, r24
     6d0:	9f 5f       	subi	r25, 0xFF	; 255
     6d2:	90 93 b8 02 	sts	0x02B8, r25
     6d6:	85 30       	cpi	r24, 0x05	; 5
     6d8:	51 f7       	brne	.-44     	; 0x6ae <main+0xc4>
		{
			switch_timer = 0;
     6da:	10 92 b8 02 	sts	0x02B8, r1
			switch_press = 0; //reset global switch press flag
     6de:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     6e2:	f7 01       	movw	r30, r14
     6e4:	c0 81       	ld	r28, Z
     6e6:	0e 94 c6 13 	call	0x278c	; 0x278c <read_switch_port>
     6ea:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     6ec:	f6 01       	movw	r30, r12
     6ee:	90 81       	ld	r25, Z
     6f0:	91 30       	cpi	r25, 0x01	; 1
     6f2:	11 f4       	brne	.+4      	; 0x6f8 <main+0x10e>
     6f4:	cd 2f       	mov	r28, r29
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <main+0x110>
     6f8:	c0 e0       	ldi	r28, 0x00	; 0
     6fa:	c8 2b       	or	r28, r24
     6fc:	f7 01       	movw	r30, r14
     6fe:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     700:	0e 94 41 06 	call	0xc82	; 0xc82 <update_spi>
			if (switch_press) { 
     704:	80 91 c1 02 	lds	r24, 0x02C1
     708:	88 23       	and	r24, r24
     70a:	39 f0       	breq	.+14     	; 0x71a <main+0x130>
				update_patch();
     70c:	0e 94 98 0c 	call	0x1930	; 0x1930 <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     710:	f6 01       	movw	r30, r12
     712:	80 81       	ld	r24, Z
     714:	88 23       	and	r24, r24
     716:	09 f4       	brne	.+2      	; 0x71a <main+0x130>
     718:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     71a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <update_patch_programmer>
     71e:	c7 cf       	rjmp	.-114    	; 0x6ae <main+0xc4>

00000720 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	c0 e0       	ldi	r28, 0x00	; 0
     734:	d1 e0       	ldi	r29, 0x01	; 1
     736:	02 ec       	ldi	r16, 0xC2	; 194
     738:	12 e0       	ldi	r17, 0x02	; 2
     73a:	0f 2e       	mov	r0, r31
     73c:	fc e3       	ldi	r31, 0x3C	; 60
     73e:	cf 2e       	mov	r12, r31
     740:	dd 24       	eor	r13, r13
     742:	f0 2d       	mov	r31, r0
     744:	cc 0e       	add	r12, r28
     746:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     748:	0f 2e       	mov	r0, r31
     74a:	f5 e0       	ldi	r31, 0x05	; 5
     74c:	ef 2e       	mov	r14, r31
     74e:	f3 e0       	ldi	r31, 0x03	; 3
     750:	ff 2e       	mov	r15, r31
     752:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     754:	bb 24       	eor	r11, r11
     756:	68 94       	set
     758:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     75a:	88 81       	ld	r24, Y
     75c:	99 81       	ldd	r25, Y+1	; 0x01
     75e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     762:	90 93 bc 02 	sts	0x02BC, r25
     766:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     76a:	e8 81       	ld	r30, Y
     76c:	f9 81       	ldd	r31, Y+1	; 0x01
     76e:	40 81       	ld	r20, Z
     770:	21 81       	ldd	r18, Z+1	; 0x01
     772:	52 2f       	mov	r21, r18
     774:	53 70       	andi	r21, 0x03	; 3
     776:	84 1b       	sub	r24, r20
     778:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     77a:	95 95       	asr	r25
     77c:	87 95       	ror	r24
     77e:	95 95       	asr	r25
     780:	87 95       	ror	r24
     782:	84 0f       	add	r24, r20
     784:	95 1f       	adc	r25, r21
     786:	80 83       	st	Z, r24
     788:	89 2f       	mov	r24, r25
     78a:	83 70       	andi	r24, 0x03	; 3
     78c:	2c 7f       	andi	r18, 0xFC	; 252
     78e:	28 2b       	or	r18, r24
     790:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     792:	e9 91       	ld	r30, Y+
     794:	f9 91       	ld	r31, Y+
     796:	92 81       	ldd	r25, Z+2	; 0x02
     798:	20 81       	ld	r18, Z
     79a:	81 81       	ldd	r24, Z+1	; 0x01
     79c:	38 2f       	mov	r19, r24
     79e:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     7a0:	d7 01       	movw	r26, r14
     7a2:	8c 91       	ld	r24, X
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	19 f0       	breq	.+6      	; 0x7ae <scan_pots+0x8e>
     7a8:	83 81       	ldd	r24, Z+3	; 0x03
     7aa:	88 23       	and	r24, r24
     7ac:	24 f0       	brlt	.+8      	; 0x7b6 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     7ae:	f8 01       	movw	r30, r16
     7b0:	31 83       	std	Z+1, r19	; 0x01
     7b2:	20 83       	st	Z, r18
     7b4:	14 c0       	rjmp	.+40     	; 0x7de <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     7b6:	49 2f       	mov	r20, r25
     7b8:	43 50       	subi	r20, 0x03	; 3
     7ba:	c9 01       	movw	r24, r18
     7bc:	95 95       	asr	r25
     7be:	87 95       	ror	r24
     7c0:	95 95       	asr	r25
     7c2:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     7c4:	94 2f       	mov	r25, r20
     7c6:	98 1b       	sub	r25, r24
     7c8:	9a 3f       	cpi	r25, 0xFA	; 250
     7ca:	48 f4       	brcc	.+18     	; 0x7de <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     7cc:	d8 01       	movw	r26, r16
     7ce:	11 96       	adiw	r26, 0x01	; 1
     7d0:	3c 93       	st	X, r19
     7d2:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     7d4:	83 81       	ldd	r24, Z+3	; 0x03
     7d6:	8f 77       	andi	r24, 0x7F	; 127
     7d8:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     7da:	f7 01       	movw	r30, r14
     7dc:	b0 82       	st	Z, r11
     7de:	0e 5f       	subi	r16, 0xFE	; 254
     7e0:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     7e2:	cc 15       	cp	r28, r12
     7e4:	dd 05       	cpc	r29, r13
     7e6:	09 f0       	breq	.+2      	; 0x7ea <scan_pots+0xca>
     7e8:	b8 cf       	rjmp	.-144    	; 0x75a <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     7ea:	8c e7       	ldi	r24, 0x7C	; 124
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     7f2:	90 93 bc 02 	sts	0x02BC, r25
     7f6:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     7fa:	20 91 7c 01 	lds	r18, 0x017C
     7fe:	40 91 7d 01 	lds	r20, 0x017D
     802:	34 2f       	mov	r19, r20
     804:	33 70       	andi	r19, 0x03	; 3
     806:	82 1b       	sub	r24, r18
     808:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     80a:	95 95       	asr	r25
     80c:	87 95       	ror	r24
     80e:	95 95       	asr	r25
     810:	87 95       	ror	r24
     812:	28 0f       	add	r18, r24
     814:	39 1f       	adc	r19, r25
     816:	20 93 7c 01 	sts	0x017C, r18
     81a:	83 2f       	mov	r24, r19
     81c:	83 70       	andi	r24, 0x03	; 3
     81e:	4c 7f       	andi	r20, 0xFC	; 252
     820:	48 2b       	or	r20, r24
     822:	40 93 7d 01 	sts	0x017D, r20
	
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	cf 90       	pop	r12
     836:	bf 90       	pop	r11
     838:	08 95       	ret

0000083a <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     83e:	60 91 c2 02 	lds	r22, 0x02C2
     842:	70 91 c3 02 	lds	r23, 0x02C3
     846:	62 95       	swap	r22
     848:	72 95       	swap	r23
     84a:	70 7f       	andi	r23, 0xF0	; 240
     84c:	76 27       	eor	r23, r22
     84e:	60 7f       	andi	r22, 0xF0	; 240
     850:	76 27       	eor	r23, r22
     852:	84 ee       	ldi	r24, 0xE4	; 228
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     85a:	60 91 c4 02 	lds	r22, 0x02C4
     85e:	70 91 c5 02 	lds	r23, 0x02C5
     862:	62 95       	swap	r22
     864:	72 95       	swap	r23
     866:	70 7f       	andi	r23, 0xF0	; 240
     868:	76 27       	eor	r23, r22
     86a:	60 7f       	andi	r22, 0xF0	; 240
     86c:	76 27       	eor	r23, r22
     86e:	83 ee       	ldi	r24, 0xE3	; 227
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     876:	60 91 c6 02 	lds	r22, 0x02C6
     87a:	70 91 c7 02 	lds	r23, 0x02C7
     87e:	66 0f       	add	r22, r22
     880:	77 1f       	adc	r23, r23
     882:	66 0f       	add	r22, r22
     884:	77 1f       	adc	r23, r23
     886:	66 0f       	add	r22, r22
     888:	77 1f       	adc	r23, r23
     88a:	82 ee       	ldi	r24, 0xE2	; 226
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     892:	60 91 c8 02 	lds	r22, 0x02C8
     896:	70 91 c9 02 	lds	r23, 0x02C9
     89a:	62 95       	swap	r22
     89c:	72 95       	swap	r23
     89e:	70 7f       	andi	r23, 0xF0	; 240
     8a0:	76 27       	eor	r23, r22
     8a2:	60 7f       	andi	r22, 0xF0	; 240
     8a4:	76 27       	eor	r23, r22
     8a6:	82 eb       	ldi	r24, 0xB2	; 178
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     8ae:	60 91 ca 02 	lds	r22, 0x02CA
     8b2:	70 91 cb 02 	lds	r23, 0x02CB
     8b6:	66 0f       	add	r22, r22
     8b8:	77 1f       	adc	r23, r23
     8ba:	66 0f       	add	r22, r22
     8bc:	77 1f       	adc	r23, r23
     8be:	66 0f       	add	r22, r22
     8c0:	77 1f       	adc	r23, r23
     8c2:	81 ee       	ldi	r24, 0xE1	; 225
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     8ca:	60 91 cc 02 	lds	r22, 0x02CC
     8ce:	70 91 cd 02 	lds	r23, 0x02CD
     8d2:	62 95       	swap	r22
     8d4:	72 95       	swap	r23
     8d6:	70 7f       	andi	r23, 0xF0	; 240
     8d8:	76 27       	eor	r23, r22
     8da:	60 7f       	andi	r22, 0xF0	; 240
     8dc:	76 27       	eor	r23, r22
     8de:	80 ee       	ldi	r24, 0xE0	; 224
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     8e6:	60 91 ce 02 	lds	r22, 0x02CE
     8ea:	70 91 cf 02 	lds	r23, 0x02CF
     8ee:	62 95       	swap	r22
     8f0:	72 95       	swap	r23
     8f2:	70 7f       	andi	r23, 0xF0	; 240
     8f4:	76 27       	eor	r23, r22
     8f6:	60 7f       	andi	r22, 0xF0	; 240
     8f8:	76 27       	eor	r23, r22
     8fa:	8f ed       	ldi	r24, 0xDF	; 223
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     902:	60 91 d0 02 	lds	r22, 0x02D0
     906:	70 91 d1 02 	lds	r23, 0x02D1
     90a:	62 95       	swap	r22
     90c:	72 95       	swap	r23
     90e:	70 7f       	andi	r23, 0xF0	; 240
     910:	76 27       	eor	r23, r22
     912:	60 7f       	andi	r22, 0xF0	; 240
     914:	76 27       	eor	r23, r22
     916:	8e ed       	ldi	r24, 0xDE	; 222
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     91e:	80 91 d4 02 	lds	r24, 0x02D4
     922:	90 91 d5 02 	lds	r25, 0x02D5
     926:	c0 e0       	ldi	r28, 0x00	; 0
     928:	d2 e0       	ldi	r29, 0x02	; 2
     92a:	c8 1b       	sub	r28, r24
     92c:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     92e:	60 91 6e 03 	lds	r22, 0x036E
     932:	70 91 6f 03 	lds	r23, 0x036F
     936:	60 50       	subi	r22, 0x00	; 0
     938:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     93a:	80 91 d2 02 	lds	r24, 0x02D2
     93e:	90 91 d3 02 	lds	r25, 0x02D3
     942:	68 1b       	sub	r22, r24
     944:	79 0b       	sbc	r23, r25
     946:	6c 0f       	add	r22, r28
     948:	7d 1f       	adc	r23, r29
     94a:	8d ed       	ldi	r24, 0xDD	; 221
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     952:	60 91 70 03 	lds	r22, 0x0370
     956:	70 91 71 03 	lds	r23, 0x0371
     95a:	6c 0f       	add	r22, r28
     95c:	7d 1f       	adc	r23, r29
     95e:	8c ed       	ldi	r24, 0xDC	; 220
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     966:	60 91 d6 02 	lds	r22, 0x02D6
     96a:	70 91 d7 02 	lds	r23, 0x02D7
     96e:	62 95       	swap	r22
     970:	72 95       	swap	r23
     972:	70 7f       	andi	r23, 0xF0	; 240
     974:	76 27       	eor	r23, r22
     976:	60 7f       	andi	r22, 0xF0	; 240
     978:	76 27       	eor	r23, r22
     97a:	8b ed       	ldi	r24, 0xDB	; 219
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     982:	60 91 da 02 	lds	r22, 0x02DA
     986:	70 91 db 02 	lds	r23, 0x02DB
     98a:	62 95       	swap	r22
     98c:	72 95       	swap	r23
     98e:	70 7f       	andi	r23, 0xF0	; 240
     990:	76 27       	eor	r23, r22
     992:	60 7f       	andi	r22, 0xF0	; 240
     994:	76 27       	eor	r23, r22
     996:	8a ed       	ldi	r24, 0xDA	; 218
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     99e:	60 91 dc 02 	lds	r22, 0x02DC
     9a2:	70 91 dd 02 	lds	r23, 0x02DD
     9a6:	62 95       	swap	r22
     9a8:	72 95       	swap	r23
     9aa:	70 7f       	andi	r23, 0xF0	; 240
     9ac:	76 27       	eor	r23, r22
     9ae:	60 7f       	andi	r22, 0xF0	; 240
     9b0:	76 27       	eor	r23, r22
     9b2:	89 ed       	ldi	r24, 0xD9	; 217
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     9ba:	60 91 7c 01 	lds	r22, 0x017C
     9be:	80 91 7d 01 	lds	r24, 0x017D
     9c2:	78 2f       	mov	r23, r24
     9c4:	73 70       	andi	r23, 0x03	; 3
     9c6:	62 95       	swap	r22
     9c8:	72 95       	swap	r23
     9ca:	70 7f       	andi	r23, 0xF0	; 240
     9cc:	76 27       	eor	r23, r22
     9ce:	60 7f       	andi	r22, 0xF0	; 240
     9d0:	76 27       	eor	r23, r22
     9d2:	88 ed       	ldi	r24, 0xD8	; 216
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     9da:	60 91 de 02 	lds	r22, 0x02DE
     9de:	70 91 df 02 	lds	r23, 0x02DF
     9e2:	62 95       	swap	r22
     9e4:	72 95       	swap	r23
     9e6:	70 7f       	andi	r23, 0xF0	; 240
     9e8:	76 27       	eor	r23, r22
     9ea:	60 7f       	andi	r22, 0xF0	; 240
     9ec:	76 27       	eor	r23, r22
     9ee:	87 ed       	ldi	r24, 0xD7	; 215
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     9f6:	60 91 e0 02 	lds	r22, 0x02E0
     9fa:	70 91 e1 02 	lds	r23, 0x02E1
     9fe:	62 95       	swap	r22
     a00:	72 95       	swap	r23
     a02:	70 7f       	andi	r23, 0xF0	; 240
     a04:	76 27       	eor	r23, r22
     a06:	60 7f       	andi	r22, 0xF0	; 240
     a08:	76 27       	eor	r23, r22
     a0a:	86 ed       	ldi	r24, 0xD6	; 214
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     a12:	60 91 e2 02 	lds	r22, 0x02E2
     a16:	70 91 e3 02 	lds	r23, 0x02E3
     a1a:	62 95       	swap	r22
     a1c:	72 95       	swap	r23
     a1e:	70 7f       	andi	r23, 0xF0	; 240
     a20:	76 27       	eor	r23, r22
     a22:	60 7f       	andi	r22, 0xF0	; 240
     a24:	76 27       	eor	r23, r22
     a26:	85 ed       	ldi	r24, 0xD5	; 213
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     a2e:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     a32:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     a34:	88 30       	cpi	r24, 0x08	; 8
     a36:	08 f4       	brcc	.+2      	; 0xa3a <update_control_voltages+0x200>
     a38:	c8 e0       	ldi	r28, 0x08	; 8
	value_to_display = current_patch.number + 100*note;
     a3a:	60 91 03 03 	lds	r22, 0x0303
     a3e:	4c 2f       	mov	r20, r28
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	24 e6       	ldi	r18, 0x64	; 100
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	42 9f       	mul	r20, r18
     a48:	c0 01       	movw	r24, r0
     a4a:	43 9f       	mul	r20, r19
     a4c:	90 0d       	add	r25, r0
     a4e:	52 9f       	mul	r21, r18
     a50:	90 0d       	add	r25, r0
     a52:	11 24       	eor	r1, r1
     a54:	86 0f       	add	r24, r22
     a56:	91 1d       	adc	r25, r1
     a58:	90 93 fe 01 	sts	0x01FE, r25
     a5c:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     a60:	8c 2f       	mov	r24, r28
     a62:	88 50       	subi	r24, 0x08	; 8
     a64:	6a e0       	ldi	r22, 0x0A	; 10
     a66:	73 e0       	ldi	r23, 0x03	; 3
     a68:	0e 94 68 13 	call	0x26d0	; 0x26d0 <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     a6c:	bc 01       	movw	r22, r24
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	20 91 e6 02 	lds	r18, 0x02E6
     a76:	30 91 e7 02 	lds	r19, 0x02E7
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__mulsi3>
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	07 2e       	mov	r0, r23
     a88:	7a e0       	ldi	r23, 0x0A	; 10
     a8a:	b6 95       	lsr	r27
     a8c:	a7 95       	ror	r26
     a8e:	97 95       	ror	r25
     a90:	87 95       	ror	r24
     a92:	7a 95       	dec	r23
     a94:	d1 f7       	brne	.-12     	; 0xa8a <update_control_voltages+0x250>
     a96:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     a98:	60 91 e4 02 	lds	r22, 0x02E4
     a9c:	70 91 e5 02 	lds	r23, 0x02E5
     aa0:	62 95       	swap	r22
     aa2:	72 95       	swap	r23
     aa4:	70 7f       	andi	r23, 0xF0	; 240
     aa6:	76 27       	eor	r23, r22
     aa8:	60 7f       	andi	r22, 0xF0	; 240
     aaa:	76 27       	eor	r23, r22
     aac:	86 0f       	add	r24, r22
     aae:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     ab0:	bc 01       	movw	r22, r24
     ab2:	80 e4       	ldi	r24, 0x40	; 64
     ab4:	60 30       	cpi	r22, 0x00	; 0
     ab6:	78 07       	cpc	r23, r24
     ab8:	10 f0       	brcs	.+4      	; 0xabe <update_control_voltages+0x284>
     aba:	6f ef       	ldi	r22, 0xFF	; 255
     abc:	7f e3       	ldi	r23, 0x3F	; 63
     abe:	84 ed       	ldi	r24, 0xD4	; 212
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     ac6:	60 91 e8 02 	lds	r22, 0x02E8
     aca:	70 91 e9 02 	lds	r23, 0x02E9
     ace:	62 95       	swap	r22
     ad0:	72 95       	swap	r23
     ad2:	70 7f       	andi	r23, 0xF0	; 240
     ad4:	76 27       	eor	r23, r22
     ad6:	60 7f       	andi	r22, 0xF0	; 240
     ad8:	76 27       	eor	r23, r22
     ada:	82 ed       	ldi	r24, 0xD2	; 210
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     ae2:	60 91 ea 02 	lds	r22, 0x02EA
     ae6:	70 91 eb 02 	lds	r23, 0x02EB
     aea:	62 95       	swap	r22
     aec:	72 95       	swap	r23
     aee:	70 7f       	andi	r23, 0xF0	; 240
     af0:	76 27       	eor	r23, r22
     af2:	60 7f       	andi	r22, 0xF0	; 240
     af4:	76 27       	eor	r23, r22
     af6:	81 ed       	ldi	r24, 0xD1	; 209
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     afe:	60 91 ec 02 	lds	r22, 0x02EC
     b02:	70 91 ed 02 	lds	r23, 0x02ED
     b06:	62 95       	swap	r22
     b08:	72 95       	swap	r23
     b0a:	70 7f       	andi	r23, 0xF0	; 240
     b0c:	76 27       	eor	r23, r22
     b0e:	60 7f       	andi	r22, 0xF0	; 240
     b10:	76 27       	eor	r23, r22
     b12:	80 ed       	ldi	r24, 0xD0	; 208
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     b1a:	60 91 ee 02 	lds	r22, 0x02EE
     b1e:	70 91 ef 02 	lds	r23, 0x02EF
     b22:	62 95       	swap	r22
     b24:	72 95       	swap	r23
     b26:	70 7f       	andi	r23, 0xF0	; 240
     b28:	76 27       	eor	r23, r22
     b2a:	60 7f       	andi	r22, 0xF0	; 240
     b2c:	76 27       	eor	r23, r22
     b2e:	8f ec       	ldi	r24, 0xCF	; 207
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     b36:	60 91 f0 02 	lds	r22, 0x02F0
     b3a:	70 91 f1 02 	lds	r23, 0x02F1
     b3e:	62 95       	swap	r22
     b40:	72 95       	swap	r23
     b42:	70 7f       	andi	r23, 0xF0	; 240
     b44:	76 27       	eor	r23, r22
     b46:	60 7f       	andi	r22, 0xF0	; 240
     b48:	76 27       	eor	r23, r22
     b4a:	8e ec       	ldi	r24, 0xCE	; 206
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     b52:	60 91 f2 02 	lds	r22, 0x02F2
     b56:	70 91 f3 02 	lds	r23, 0x02F3
     b5a:	62 95       	swap	r22
     b5c:	72 95       	swap	r23
     b5e:	70 7f       	andi	r23, 0xF0	; 240
     b60:	76 27       	eor	r23, r22
     b62:	60 7f       	andi	r22, 0xF0	; 240
     b64:	76 27       	eor	r23, r22
     b66:	8d ec       	ldi	r24, 0xCD	; 205
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     b6e:	60 91 f4 02 	lds	r22, 0x02F4
     b72:	70 91 f5 02 	lds	r23, 0x02F5
     b76:	62 95       	swap	r22
     b78:	72 95       	swap	r23
     b7a:	70 7f       	andi	r23, 0xF0	; 240
     b7c:	76 27       	eor	r23, r22
     b7e:	60 7f       	andi	r22, 0xF0	; 240
     b80:	76 27       	eor	r23, r22
     b82:	8c ec       	ldi	r24, 0xCC	; 204
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     b8a:	60 91 f8 02 	lds	r22, 0x02F8
     b8e:	70 91 f9 02 	lds	r23, 0x02F9
     b92:	62 95       	swap	r22
     b94:	72 95       	swap	r23
     b96:	70 7f       	andi	r23, 0xF0	; 240
     b98:	76 27       	eor	r23, r22
     b9a:	60 7f       	andi	r22, 0xF0	; 240
     b9c:	76 27       	eor	r23, r22
     b9e:	8a ec       	ldi	r24, 0xCA	; 202
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     ba6:	60 91 f6 02 	lds	r22, 0x02F6
     baa:	70 91 f7 02 	lds	r23, 0x02F7
     bae:	62 95       	swap	r22
     bb0:	72 95       	swap	r23
     bb2:	70 7f       	andi	r23, 0xF0	; 240
     bb4:	76 27       	eor	r23, r22
     bb6:	60 7f       	andi	r22, 0xF0	; 240
     bb8:	76 27       	eor	r23, r22
     bba:	8b ec       	ldi	r24, 0xCB	; 203
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     bc2:	60 91 fc 02 	lds	r22, 0x02FC
     bc6:	70 91 fd 02 	lds	r23, 0x02FD
     bca:	62 95       	swap	r22
     bcc:	72 95       	swap	r23
     bce:	70 7f       	andi	r23, 0xF0	; 240
     bd0:	76 27       	eor	r23, r22
     bd2:	60 7f       	andi	r22, 0xF0	; 240
     bd4:	76 27       	eor	r23, r22
     bd6:	88 ec       	ldi	r24, 0xC8	; 200
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     bde:	60 91 fa 02 	lds	r22, 0x02FA
     be2:	70 91 fb 02 	lds	r23, 0x02FB
     be6:	62 95       	swap	r22
     be8:	72 95       	swap	r23
     bea:	70 7f       	andi	r23, 0xF0	; 240
     bec:	76 27       	eor	r23, r22
     bee:	60 7f       	andi	r22, 0xF0	; 240
     bf0:	76 27       	eor	r23, r22
     bf2:	89 ec       	ldi	r24, 0xC9	; 201
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     bfa:	8c 2f       	mov	r24, r28
     bfc:	6f e0       	ldi	r22, 0x0F	; 15
     bfe:	0e 94 a4 0b 	call	0x1748	; 0x1748 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     c02:	6c e4       	ldi	r22, 0x4C	; 76
     c04:	73 e0       	ldi	r23, 0x03	; 3
     c06:	0e 94 68 13 	call	0x26d0	; 0x26d0 <interpolate_pitch_cv>
     c0a:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     c0c:	86 ee       	ldi	r24, 0xE6	; 230
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     c14:	8c 2f       	mov	r24, r28
     c16:	60 ef       	ldi	r22, 0xF0	; 240
     c18:	0e 94 a4 0b 	call	0x1748	; 0x1748 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     c1c:	6a e2       	ldi	r22, 0x2A	; 42
     c1e:	73 e0       	ldi	r23, 0x03	; 3
     c20:	0e 94 68 13 	call	0x26d0	; 0x26d0 <interpolate_pitch_cv>
     c24:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     c26:	85 ee       	ldi	r24, 0xE5	; 229
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     c2e:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     c30:	a1 9a       	sbi	0x14, 1	; 20
}			
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     c38:	84 b1       	in	r24, 0x04	; 4
     c3a:	87 62       	ori	r24, 0x27	; 39
     c3c:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     c3e:	ec ed       	ldi	r30, 0xDC	; 220
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	8c 65       	ori	r24, 0x5C	; 92
     c46:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     c48:	85 b1       	in	r24, 0x05	; 5
     c4a:	89 7d       	andi	r24, 0xD9	; 217
     c4c:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     c4e:	ed ed       	ldi	r30, 0xDD	; 221
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	83 7f       	andi	r24, 0xF3	; 243
     c56:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     c58:	80 e5       	ldi	r24, 0x50	; 80
     c5a:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     c5c:	80 81       	ld	r24, Z
     c5e:	87 7f       	andi	r24, 0xF7	; 247
     c60:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     c62:	80 81       	ld	r24, Z
     c64:	87 7f       	andi	r24, 0xF7	; 247
     c66:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     c68:	80 81       	ld	r24, Z
     c6a:	88 60       	ori	r24, 0x08	; 8
     c6c:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     c6e:	80 81       	ld	r24, Z
     c70:	8f 7e       	andi	r24, 0xEF	; 239
     c72:	80 83       	st	Z, r24
	
}
     c74:	08 95       	ret

00000c76 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     c76:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     c78:	0d b4       	in	r0, 0x2d	; 45
     c7a:	07 fe       	sbrs	r0, 7
     c7c:	fd cf       	rjmp	.-6      	; 0xc78 <spi_shift_byte+0x2>
	return SPDR;
     c7e:	8e b5       	in	r24, 0x2e	; 46
	
}
     c80:	08 95       	ret

00000c82 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     c82:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     c84:	80 91 02 03 	lds	r24, 0x0302
     c88:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     c8c:	90 91 c1 02 	lds	r25, 0x02C1
     c90:	98 2b       	or	r25, r24
     c92:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     c96:	20 91 bf 02 	lds	r18, 0x02BF
     c9a:	98 2f       	mov	r25, r24
     c9c:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     c9e:	89 2f       	mov	r24, r25
     ca0:	82 27       	eor	r24, r18
     ca2:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     ca6:	89 23       	and	r24, r25
     ca8:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     cac:	90 91 79 03 	lds	r25, 0x0379
     cb0:	89 27       	eor	r24, r25
     cb2:	80 93 79 03 	sts	0x0379, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     cb6:	80 91 01 03 	lds	r24, 0x0301
     cba:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     cbe:	90 91 c1 02 	lds	r25, 0x02C1
     cc2:	98 2b       	or	r25, r24
     cc4:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     cc8:	20 91 bd 02 	lds	r18, 0x02BD
     ccc:	98 2f       	mov	r25, r24
     cce:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     cd0:	89 2f       	mov	r24, r25
     cd2:	82 27       	eor	r24, r18
     cd4:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     cd8:	89 23       	and	r24, r25
     cda:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     cde:	90 91 7a 03 	lds	r25, 0x037A
     ce2:	89 27       	eor	r24, r25
     ce4:	80 93 7a 03 	sts	0x037A, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     ce8:	80 91 00 03 	lds	r24, 0x0300
     cec:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     cf0:	80 91 ff 02 	lds	r24, 0x02FF
     cf4:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     cf8:	30 91 7a 03 	lds	r19, 0x037A
     cfc:	36 95       	lsr	r19
     cfe:	36 95       	lsr	r19
     d00:	36 95       	lsr	r19
     d02:	34 70       	andi	r19, 0x04	; 4
     d04:	80 91 05 03 	lds	r24, 0x0305
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	11 f4       	brne	.+4      	; 0xd10 <update_spi+0x8e>
     d0c:	80 e8       	ldi	r24, 0x80	; 128
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <update_spi+0x90>
     d10:	80 e0       	ldi	r24, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
     d12:	90 91 7b 03 	lds	r25, 0x037B
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
     d16:	29 2f       	mov	r18, r25
     d18:	22 1f       	adc	r18, r18
     d1a:	22 27       	eor	r18, r18
     d1c:	22 1f       	adc	r18, r18
     d1e:	22 95       	swap	r18
     d20:	22 0f       	add	r18, r18
     d22:	22 0f       	add	r18, r18
     d24:	20 7c       	andi	r18, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     d26:	23 2b       	or	r18, r19
     d28:	96 95       	lsr	r25
     d2a:	96 95       	lsr	r25
     d2c:	96 95       	lsr	r25
     d2e:	91 70       	andi	r25, 0x01	; 1
     d30:	92 2b       	or	r25, r18
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     d32:	89 2b       	or	r24, r25
     d34:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     d38:	ed ed       	ldi	r30, 0xDD	; 221
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	87 7f       	andi	r24, 0xF7	; 247
     d40:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     d42:	80 81       	ld	r24, Z
     d44:	88 60       	ori	r24, 0x08	; 8
     d46:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     d48:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     d4a:	08 95       	ret

00000d4c <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b1 e0       	ldi	r27, 0x01	; 1
     d50:	9d 01       	movw	r18, r26
     d52:	24 5c       	subi	r18, 0xC4	; 196
     d54:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= 29; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     d56:	ed 91       	ld	r30, X+
     d58:	fc 91       	ld	r31, X
     d5a:	11 97       	sbiw	r26, 0x01	; 1
     d5c:	80 81       	ld	r24, Z
     d5e:	41 81       	ldd	r20, Z+1	; 0x01
     d60:	94 2f       	mov	r25, r20
     d62:	93 70       	andi	r25, 0x03	; 3
     d64:	95 95       	asr	r25
     d66:	87 95       	ror	r24
     d68:	95 95       	asr	r25
     d6a:	87 95       	ror	r24
     d6c:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     d6e:	ed 91       	ld	r30, X+
     d70:	fd 91       	ld	r31, X+
     d72:	83 81       	ldd	r24, Z+3	; 0x03
     d74:	80 68       	ori	r24, 0x80	; 128
     d76:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= 29; i++) {
     d78:	a2 17       	cp	r26, r18
     d7a:	b3 07       	cpc	r27, r19
     d7c:	61 f7       	brne	.-40     	; 0xd56 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     d7e:	08 95       	ret

00000d80 <unlock_pots>:

void unlock_pots(void) {
     d80:	e0 e0       	ldi	r30, 0x00	; 0
     d82:	f1 e0       	ldi	r31, 0x01	; 1
     d84:	cf 01       	movw	r24, r30
     d86:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked = 0;
     d88:	a1 91       	ld	r26, Z+
     d8a:	b1 91       	ld	r27, Z+
     d8c:	13 96       	adiw	r26, 0x03	; 3
     d8e:	2c 91       	ld	r18, X
     d90:	13 97       	sbiw	r26, 0x03	; 3
     d92:	2f 77       	andi	r18, 0x7F	; 127
     d94:	13 96       	adiw	r26, 0x03	; 3
     d96:	2c 93       	st	X, r18
     d98:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= 29; i++) {
     d9a:	e8 17       	cp	r30, r24
     d9c:	f9 07       	cpc	r31, r25
     d9e:	a1 f7       	brne	.-24     	; 0xd88 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
     da0:	08 95       	ret

00000da2 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	ab 97       	sbiw	r28, 0x2b	; 43
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     dba:	ee ed       	ldi	r30, 0xDE	; 222
     dbc:	f2 e0       	ldi	r31, 0x02	; 2
     dbe:	20 91 de 02 	lds	r18, 0x02DE
     dc2:	82 2f       	mov	r24, r18
     dc4:	82 95       	swap	r24
     dc6:	80 7f       	andi	r24, 0xF0	; 240
     dc8:	22 95       	swap	r18
     dca:	2f 70       	andi	r18, 0x0F	; 15
     dcc:	90 91 df 02 	lds	r25, 0x02DF
     dd0:	93 70       	andi	r25, 0x03	; 3
     dd2:	92 95       	swap	r25
     dd4:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     dd6:	df 01       	movw	r26, r30
     dd8:	5a 97       	sbiw	r26, 0x1a	; 26
     dda:	3c 91       	ld	r19, X
     ddc:	53 2f       	mov	r21, r19
     dde:	55 0f       	add	r21, r21
     de0:	55 0f       	add	r21, r21
     de2:	4a 81       	ldd	r20, Y+2	; 0x02
     de4:	43 70       	andi	r20, 0x03	; 3
     de6:	45 2b       	or	r20, r21
     de8:	4a 83       	std	Y+2, r20	; 0x02
     dea:	63 2f       	mov	r22, r19
     dec:	62 95       	swap	r22
     dee:	66 95       	lsr	r22
     df0:	66 95       	lsr	r22
     df2:	63 70       	andi	r22, 0x03	; 3
     df4:	11 96       	adiw	r26, 0x01	; 1
     df6:	4c 91       	ld	r20, X
     df8:	43 70       	andi	r20, 0x03	; 3
     dfa:	44 0f       	add	r20, r20
     dfc:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     dfe:	df 01       	movw	r26, r30
     e00:	58 97       	sbiw	r26, 0x18	; 24
     e02:	3c 91       	ld	r19, X
     e04:	53 2f       	mov	r21, r19
     e06:	52 95       	swap	r21
     e08:	50 7f       	andi	r21, 0xF0	; 240
     e0a:	46 2b       	or	r20, r22
     e0c:	45 2b       	or	r20, r21
     e0e:	4b 83       	std	Y+3, r20	; 0x03
     e10:	63 2f       	mov	r22, r19
     e12:	62 95       	swap	r22
     e14:	6f 70       	andi	r22, 0x0F	; 15
     e16:	11 96       	adiw	r26, 0x01	; 1
     e18:	4c 91       	ld	r20, X
     e1a:	43 70       	andi	r20, 0x03	; 3
     e1c:	42 95       	swap	r20
     e1e:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     e20:	df 01       	movw	r26, r30
     e22:	56 97       	sbiw	r26, 0x16	; 22
     e24:	3c 91       	ld	r19, X
     e26:	53 2f       	mov	r21, r19
     e28:	52 95       	swap	r21
     e2a:	55 0f       	add	r21, r21
     e2c:	55 0f       	add	r21, r21
     e2e:	50 7c       	andi	r21, 0xC0	; 192
     e30:	46 2b       	or	r20, r22
     e32:	45 2b       	or	r20, r21
     e34:	4c 83       	std	Y+4, r20	; 0x04
     e36:	11 96       	adiw	r26, 0x01	; 1
     e38:	4c 91       	ld	r20, X
     e3a:	42 95       	swap	r20
     e3c:	44 0f       	add	r20, r20
     e3e:	44 0f       	add	r20, r20
     e40:	40 7c       	andi	r20, 0xC0	; 192
     e42:	36 95       	lsr	r19
     e44:	36 95       	lsr	r19
     e46:	34 2b       	or	r19, r20
     e48:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     e4a:	df 01       	movw	r26, r30
     e4c:	54 97       	sbiw	r26, 0x14	; 20
     e4e:	3c 91       	ld	r19, X
     e50:	3e 83       	std	Y+6, r19	; 0x06
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     e56:	df 01       	movw	r26, r30
     e58:	52 97       	sbiw	r26, 0x12	; 18
     e5a:	3c 91       	ld	r19, X
     e5c:	53 2f       	mov	r21, r19
     e5e:	55 0f       	add	r21, r21
     e60:	55 0f       	add	r21, r21
     e62:	43 70       	andi	r20, 0x03	; 3
     e64:	45 2b       	or	r20, r21
     e66:	4f 83       	std	Y+7, r20	; 0x07
     e68:	63 2f       	mov	r22, r19
     e6a:	62 95       	swap	r22
     e6c:	66 95       	lsr	r22
     e6e:	66 95       	lsr	r22
     e70:	63 70       	andi	r22, 0x03	; 3
     e72:	11 96       	adiw	r26, 0x01	; 1
     e74:	4c 91       	ld	r20, X
     e76:	43 70       	andi	r20, 0x03	; 3
     e78:	44 0f       	add	r20, r20
     e7a:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     e7c:	df 01       	movw	r26, r30
     e7e:	50 97       	sbiw	r26, 0x10	; 16
     e80:	3c 91       	ld	r19, X
     e82:	53 2f       	mov	r21, r19
     e84:	52 95       	swap	r21
     e86:	50 7f       	andi	r21, 0xF0	; 240
     e88:	46 2b       	or	r20, r22
     e8a:	45 2b       	or	r20, r21
     e8c:	48 87       	std	Y+8, r20	; 0x08
     e8e:	63 2f       	mov	r22, r19
     e90:	62 95       	swap	r22
     e92:	6f 70       	andi	r22, 0x0F	; 15
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	4c 91       	ld	r20, X
     e98:	43 70       	andi	r20, 0x03	; 3
     e9a:	42 95       	swap	r20
     e9c:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     e9e:	df 01       	movw	r26, r30
     ea0:	1e 97       	sbiw	r26, 0x0e	; 14
     ea2:	3c 91       	ld	r19, X
     ea4:	53 2f       	mov	r21, r19
     ea6:	52 95       	swap	r21
     ea8:	55 0f       	add	r21, r21
     eaa:	55 0f       	add	r21, r21
     eac:	50 7c       	andi	r21, 0xC0	; 192
     eae:	46 2b       	or	r20, r22
     eb0:	45 2b       	or	r20, r21
     eb2:	49 87       	std	Y+9, r20	; 0x09
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	4c 91       	ld	r20, X
     eb8:	42 95       	swap	r20
     eba:	44 0f       	add	r20, r20
     ebc:	44 0f       	add	r20, r20
     ebe:	40 7c       	andi	r20, 0xC0	; 192
     ec0:	36 95       	lsr	r19
     ec2:	36 95       	lsr	r19
     ec4:	34 2b       	or	r19, r20
     ec6:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     ec8:	df 01       	movw	r26, r30
     eca:	1c 97       	sbiw	r26, 0x0c	; 12
     ecc:	3c 91       	ld	r19, X
     ece:	3b 87       	std	Y+11, r19	; 0x0b
     ed0:	11 96       	adiw	r26, 0x01	; 1
     ed2:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     ed4:	df 01       	movw	r26, r30
     ed6:	1a 97       	sbiw	r26, 0x0a	; 10
     ed8:	3c 91       	ld	r19, X
     eda:	53 2f       	mov	r21, r19
     edc:	55 0f       	add	r21, r21
     ede:	55 0f       	add	r21, r21
     ee0:	43 70       	andi	r20, 0x03	; 3
     ee2:	45 2b       	or	r20, r21
     ee4:	4c 87       	std	Y+12, r20	; 0x0c
     ee6:	63 2f       	mov	r22, r19
     ee8:	62 95       	swap	r22
     eea:	66 95       	lsr	r22
     eec:	66 95       	lsr	r22
     eee:	63 70       	andi	r22, 0x03	; 3
     ef0:	11 96       	adiw	r26, 0x01	; 1
     ef2:	4c 91       	ld	r20, X
     ef4:	43 70       	andi	r20, 0x03	; 3
     ef6:	44 0f       	add	r20, r20
     ef8:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
     efa:	df 01       	movw	r26, r30
     efc:	18 97       	sbiw	r26, 0x08	; 8
     efe:	3c 91       	ld	r19, X
     f00:	53 2f       	mov	r21, r19
     f02:	52 95       	swap	r21
     f04:	50 7f       	andi	r21, 0xF0	; 240
     f06:	46 2b       	or	r20, r22
     f08:	45 2b       	or	r20, r21
     f0a:	4d 87       	std	Y+13, r20	; 0x0d
     f0c:	63 2f       	mov	r22, r19
     f0e:	62 95       	swap	r22
     f10:	6f 70       	andi	r22, 0x0F	; 15
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	4c 91       	ld	r20, X
     f16:	43 70       	andi	r20, 0x03	; 3
     f18:	42 95       	swap	r20
     f1a:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
     f1c:	df 01       	movw	r26, r30
     f1e:	16 97       	sbiw	r26, 0x06	; 6
     f20:	3c 91       	ld	r19, X
     f22:	53 2f       	mov	r21, r19
     f24:	52 95       	swap	r21
     f26:	55 0f       	add	r21, r21
     f28:	55 0f       	add	r21, r21
     f2a:	50 7c       	andi	r21, 0xC0	; 192
     f2c:	46 2b       	or	r20, r22
     f2e:	45 2b       	or	r20, r21
     f30:	4e 87       	std	Y+14, r20	; 0x0e
     f32:	11 96       	adiw	r26, 0x01	; 1
     f34:	4c 91       	ld	r20, X
     f36:	42 95       	swap	r20
     f38:	44 0f       	add	r20, r20
     f3a:	44 0f       	add	r20, r20
     f3c:	40 7c       	andi	r20, 0xC0	; 192
     f3e:	36 95       	lsr	r19
     f40:	36 95       	lsr	r19
     f42:	34 2b       	or	r19, r20
     f44:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
     f46:	df 01       	movw	r26, r30
     f48:	14 97       	sbiw	r26, 0x04	; 4
     f4a:	3c 91       	ld	r19, X
     f4c:	38 8b       	std	Y+16, r19	; 0x10
     f4e:	11 96       	adiw	r26, 0x01	; 1
     f50:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
     f52:	df 01       	movw	r26, r30
     f54:	12 97       	sbiw	r26, 0x02	; 2
     f56:	3c 91       	ld	r19, X
     f58:	53 2f       	mov	r21, r19
     f5a:	55 0f       	add	r21, r21
     f5c:	55 0f       	add	r21, r21
     f5e:	43 70       	andi	r20, 0x03	; 3
     f60:	45 2b       	or	r20, r21
     f62:	49 8b       	std	Y+17, r20	; 0x11
     f64:	32 95       	swap	r19
     f66:	36 95       	lsr	r19
     f68:	36 95       	lsr	r19
     f6a:	33 70       	andi	r19, 0x03	; 3
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	4c 91       	ld	r20, X
     f70:	43 70       	andi	r20, 0x03	; 3
     f72:	44 0f       	add	r20, r20
     f74:	44 0f       	add	r20, r20
     f76:	83 2b       	or	r24, r19
     f78:	84 2b       	or	r24, r20
     f7a:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
     f7c:	80 91 e0 02 	lds	r24, 0x02E0
     f80:	38 2f       	mov	r19, r24
     f82:	32 95       	swap	r19
     f84:	33 0f       	add	r19, r19
     f86:	33 0f       	add	r19, r19
     f88:	30 7c       	andi	r19, 0xC0	; 192
     f8a:	92 2b       	or	r25, r18
     f8c:	93 2b       	or	r25, r19
     f8e:	9b 8b       	std	Y+19, r25	; 0x13
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	92 95       	swap	r25
     f94:	99 0f       	add	r25, r25
     f96:	99 0f       	add	r25, r25
     f98:	90 7c       	andi	r25, 0xC0	; 192
     f9a:	86 95       	lsr	r24
     f9c:	86 95       	lsr	r24
     f9e:	89 2b       	or	r24, r25
     fa0:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
     fa2:	80 91 e2 02 	lds	r24, 0x02E2
     fa6:	8d 8b       	std	Y+21, r24	; 0x15
     fa8:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
     faa:	80 91 e4 02 	lds	r24, 0x02E4
     fae:	28 2f       	mov	r18, r24
     fb0:	22 0f       	add	r18, r18
     fb2:	22 0f       	add	r18, r18
     fb4:	93 70       	andi	r25, 0x03	; 3
     fb6:	92 2b       	or	r25, r18
     fb8:	9e 8b       	std	Y+22, r25	; 0x16
     fba:	38 2f       	mov	r19, r24
     fbc:	32 95       	swap	r19
     fbe:	36 95       	lsr	r19
     fc0:	36 95       	lsr	r19
     fc2:	33 70       	andi	r19, 0x03	; 3
     fc4:	97 81       	ldd	r25, Z+7	; 0x07
     fc6:	93 70       	andi	r25, 0x03	; 3
     fc8:	99 0f       	add	r25, r25
     fca:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
     fcc:	80 91 e6 02 	lds	r24, 0x02E6
     fd0:	28 2f       	mov	r18, r24
     fd2:	22 95       	swap	r18
     fd4:	20 7f       	andi	r18, 0xF0	; 240
     fd6:	93 2b       	or	r25, r19
     fd8:	92 2b       	or	r25, r18
     fda:	9f 8b       	std	Y+23, r25	; 0x17
     fdc:	38 2f       	mov	r19, r24
     fde:	32 95       	swap	r19
     fe0:	3f 70       	andi	r19, 0x0F	; 15
     fe2:	91 85       	ldd	r25, Z+9	; 0x09
     fe4:	93 70       	andi	r25, 0x03	; 3
     fe6:	92 95       	swap	r25
     fe8:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
     fea:	80 91 e8 02 	lds	r24, 0x02E8
     fee:	28 2f       	mov	r18, r24
     ff0:	22 95       	swap	r18
     ff2:	22 0f       	add	r18, r18
     ff4:	22 0f       	add	r18, r18
     ff6:	20 7c       	andi	r18, 0xC0	; 192
     ff8:	93 2b       	or	r25, r19
     ffa:	92 2b       	or	r25, r18
     ffc:	98 8f       	std	Y+24, r25	; 0x18
     ffe:	93 85       	ldd	r25, Z+11	; 0x0b
    1000:	92 95       	swap	r25
    1002:	99 0f       	add	r25, r25
    1004:	99 0f       	add	r25, r25
    1006:	90 7c       	andi	r25, 0xC0	; 192
    1008:	86 95       	lsr	r24
    100a:	86 95       	lsr	r24
    100c:	89 2b       	or	r24, r25
    100e:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    1010:	80 91 ea 02 	lds	r24, 0x02EA
    1014:	8a 8f       	std	Y+26, r24	; 0x1a
    1016:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    1018:	80 91 ec 02 	lds	r24, 0x02EC
    101c:	28 2f       	mov	r18, r24
    101e:	22 0f       	add	r18, r18
    1020:	22 0f       	add	r18, r18
    1022:	93 70       	andi	r25, 0x03	; 3
    1024:	92 2b       	or	r25, r18
    1026:	9b 8f       	std	Y+27, r25	; 0x1b
    1028:	38 2f       	mov	r19, r24
    102a:	32 95       	swap	r19
    102c:	36 95       	lsr	r19
    102e:	36 95       	lsr	r19
    1030:	33 70       	andi	r19, 0x03	; 3
    1032:	97 85       	ldd	r25, Z+15	; 0x0f
    1034:	93 70       	andi	r25, 0x03	; 3
    1036:	99 0f       	add	r25, r25
    1038:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    103a:	80 91 ee 02 	lds	r24, 0x02EE
    103e:	28 2f       	mov	r18, r24
    1040:	22 95       	swap	r18
    1042:	20 7f       	andi	r18, 0xF0	; 240
    1044:	93 2b       	or	r25, r19
    1046:	92 2b       	or	r25, r18
    1048:	9c 8f       	std	Y+28, r25	; 0x1c
    104a:	38 2f       	mov	r19, r24
    104c:	32 95       	swap	r19
    104e:	3f 70       	andi	r19, 0x0F	; 15
    1050:	91 89       	ldd	r25, Z+17	; 0x11
    1052:	93 70       	andi	r25, 0x03	; 3
    1054:	92 95       	swap	r25
    1056:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    1058:	80 91 f0 02 	lds	r24, 0x02F0
    105c:	28 2f       	mov	r18, r24
    105e:	22 95       	swap	r18
    1060:	22 0f       	add	r18, r18
    1062:	22 0f       	add	r18, r18
    1064:	20 7c       	andi	r18, 0xC0	; 192
    1066:	93 2b       	or	r25, r19
    1068:	92 2b       	or	r25, r18
    106a:	9d 8f       	std	Y+29, r25	; 0x1d
    106c:	93 89       	ldd	r25, Z+19	; 0x13
    106e:	92 95       	swap	r25
    1070:	99 0f       	add	r25, r25
    1072:	99 0f       	add	r25, r25
    1074:	90 7c       	andi	r25, 0xC0	; 192
    1076:	86 95       	lsr	r24
    1078:	86 95       	lsr	r24
    107a:	89 2b       	or	r24, r25
    107c:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    107e:	80 91 f2 02 	lds	r24, 0x02F2
    1082:	8f 8f       	std	Y+31, r24	; 0x1f
    1084:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    1086:	80 91 f4 02 	lds	r24, 0x02F4
    108a:	28 2f       	mov	r18, r24
    108c:	22 0f       	add	r18, r18
    108e:	22 0f       	add	r18, r18
    1090:	93 70       	andi	r25, 0x03	; 3
    1092:	92 2b       	or	r25, r18
    1094:	98 a3       	lds	r25, 0x58
    1096:	38 2f       	mov	r19, r24
    1098:	32 95       	swap	r19
    109a:	36 95       	lsr	r19
    109c:	36 95       	lsr	r19
    109e:	33 70       	andi	r19, 0x03	; 3
    10a0:	97 89       	ldd	r25, Z+23	; 0x17
    10a2:	93 70       	andi	r25, 0x03	; 3
    10a4:	99 0f       	add	r25, r25
    10a6:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    10a8:	80 91 f6 02 	lds	r24, 0x02F6
    10ac:	28 2f       	mov	r18, r24
    10ae:	22 95       	swap	r18
    10b0:	20 7f       	andi	r18, 0xF0	; 240
    10b2:	93 2b       	or	r25, r19
    10b4:	92 2b       	or	r25, r18
    10b6:	99 a3       	lds	r25, 0x59
    10b8:	38 2f       	mov	r19, r24
    10ba:	32 95       	swap	r19
    10bc:	3f 70       	andi	r19, 0x0F	; 15
    10be:	91 8d       	ldd	r25, Z+25	; 0x19
    10c0:	93 70       	andi	r25, 0x03	; 3
    10c2:	92 95       	swap	r25
    10c4:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    10c6:	80 91 f8 02 	lds	r24, 0x02F8
    10ca:	28 2f       	mov	r18, r24
    10cc:	22 95       	swap	r18
    10ce:	22 0f       	add	r18, r18
    10d0:	22 0f       	add	r18, r18
    10d2:	20 7c       	andi	r18, 0xC0	; 192
    10d4:	93 2b       	or	r25, r19
    10d6:	92 2b       	or	r25, r18
    10d8:	9a a3       	lds	r25, 0x5a
    10da:	93 8d       	ldd	r25, Z+27	; 0x1b
    10dc:	92 95       	swap	r25
    10de:	99 0f       	add	r25, r25
    10e0:	99 0f       	add	r25, r25
    10e2:	90 7c       	andi	r25, 0xC0	; 192
    10e4:	86 95       	lsr	r24
    10e6:	86 95       	lsr	r24
    10e8:	89 2b       	or	r24, r25
    10ea:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    10ec:	80 91 fa 02 	lds	r24, 0x02FA
    10f0:	8c a3       	lds	r24, 0x5c
    10f2:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    10f4:	80 91 fc 02 	lds	r24, 0x02FC
    10f8:	28 2f       	mov	r18, r24
    10fa:	22 0f       	add	r18, r18
    10fc:	22 0f       	add	r18, r18
    10fe:	93 70       	andi	r25, 0x03	; 3
    1100:	92 2b       	or	r25, r18
    1102:	9d a3       	lds	r25, 0x5d
    1104:	82 95       	swap	r24
    1106:	86 95       	lsr	r24
    1108:	86 95       	lsr	r24
    110a:	83 70       	andi	r24, 0x03	; 3
    110c:	2e a1       	lds	r18, 0x4e
    110e:	20 7f       	andi	r18, 0xF0	; 240
    1110:	97 8d       	ldd	r25, Z+31	; 0x1f
    1112:	93 70       	andi	r25, 0x03	; 3
    1114:	99 0f       	add	r25, r25
    1116:	99 0f       	add	r25, r25
    1118:	82 2b       	or	r24, r18
    111a:	89 2b       	or	r24, r25
    111c:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    111e:	80 91 fe 02 	lds	r24, 0x02FE
    1122:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    1124:	80 91 ff 02 	lds	r24, 0x02FF
    1128:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    112a:	80 91 00 03 	lds	r24, 0x0300
    112e:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    1130:	80 91 01 03 	lds	r24, 0x0301
    1134:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    1136:	80 91 02 03 	lds	r24, 0x0302
    113a:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    113c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    1140:	80 91 7b 03 	lds	r24, 0x037B
    1144:	8f 77       	andi	r24, 0x7F	; 127
    1146:	80 93 7b 03 	sts	0x037B, r24
	current_patch.mode = MEMORY;
    114a:	10 92 05 03 	sts	0x0305, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    114e:	21 2f       	mov	r18, r17
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8b e2       	ldi	r24, 0x2B	; 43
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	28 9f       	mul	r18, r24
    1158:	b0 01       	movw	r22, r0
    115a:	29 9f       	mul	r18, r25
    115c:	70 0d       	add	r23, r0
    115e:	38 9f       	mul	r19, r24
    1160:	70 0d       	add	r23, r0
    1162:	11 24       	eor	r1, r1
    1164:	60 50       	subi	r22, 0x00	; 0
    1166:	70 40       	sbci	r23, 0x00	; 0
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	4b e2       	ldi	r20, 0x2B	; 43
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__eeupd_block_m6450a>
}	
    1174:	ab 96       	adiw	r28, 0x2b	; 43
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	08 95       	ret

00001188 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	c3 54       	subi	r28, 0x43	; 67
    1194:	d0 40       	sbci	r29, 0x00	; 0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	2b e2       	ldi	r18, 0x2B	; 43
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	82 9f       	mul	r24, r18
    11a8:	b0 01       	movw	r22, r0
    11aa:	83 9f       	mul	r24, r19
    11ac:	70 0d       	add	r23, r0
    11ae:	92 9f       	mul	r25, r18
    11b0:	70 0d       	add	r23, r0
    11b2:	11 24       	eor	r1, r1
    11b4:	60 50       	subi	r22, 0x00	; 0
    11b6:	70 40       	sbci	r23, 0x00	; 0
    11b8:	ce 01       	movw	r24, r28
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	4b e2       	ldi	r20, 0x2B	; 43
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    11c4:	ee ed       	ldi	r30, 0xDE	; 222
    11c6:	f2 e0       	ldi	r31, 0x02	; 2
    11c8:	8a 89       	ldd	r24, Y+18	; 0x12
    11ca:	28 2f       	mov	r18, r24
    11cc:	22 95       	swap	r18
    11ce:	2f 70       	andi	r18, 0x0F	; 15
    11d0:	9b 89       	ldd	r25, Y+19	; 0x13
    11d2:	39 2f       	mov	r19, r25
    11d4:	32 95       	swap	r19
    11d6:	30 7f       	andi	r19, 0xF0	; 240
    11d8:	32 2b       	or	r19, r18
    11da:	29 2f       	mov	r18, r25
    11dc:	22 95       	swap	r18
    11de:	2f 70       	andi	r18, 0x0F	; 15
    11e0:	23 70       	andi	r18, 0x03	; 3
    11e2:	30 93 de 02 	sts	0x02DE, r19
    11e6:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    11ea:	df 01       	movw	r26, r30
    11ec:	5a 97       	sbiw	r26, 0x1a	; 26
    11ee:	4a 81       	ldd	r20, Y+2	; 0x02
    11f0:	46 95       	lsr	r20
    11f2:	46 95       	lsr	r20
    11f4:	2b 81       	ldd	r18, Y+3	; 0x03
    11f6:	32 2f       	mov	r19, r18
    11f8:	32 95       	swap	r19
    11fa:	33 0f       	add	r19, r19
    11fc:	33 0f       	add	r19, r19
    11fe:	30 7c       	andi	r19, 0xC0	; 192
    1200:	43 2b       	or	r20, r19
    1202:	32 2f       	mov	r19, r18
    1204:	36 95       	lsr	r19
    1206:	36 95       	lsr	r19
    1208:	33 70       	andi	r19, 0x03	; 3
    120a:	4c 93       	st	X, r20
    120c:	11 96       	adiw	r26, 0x01	; 1
    120e:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    1210:	df 01       	movw	r26, r30
    1212:	58 97       	sbiw	r26, 0x18	; 24
    1214:	32 2f       	mov	r19, r18
    1216:	32 95       	swap	r19
    1218:	3f 70       	andi	r19, 0x0F	; 15
    121a:	2c 81       	ldd	r18, Y+4	; 0x04
    121c:	42 2f       	mov	r20, r18
    121e:	42 95       	swap	r20
    1220:	40 7f       	andi	r20, 0xF0	; 240
    1222:	43 2b       	or	r20, r19
    1224:	32 2f       	mov	r19, r18
    1226:	32 95       	swap	r19
    1228:	3f 70       	andi	r19, 0x0F	; 15
    122a:	33 70       	andi	r19, 0x03	; 3
    122c:	4c 93       	st	X, r20
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    1232:	df 01       	movw	r26, r30
    1234:	56 97       	sbiw	r26, 0x16	; 22
    1236:	22 95       	swap	r18
    1238:	26 95       	lsr	r18
    123a:	26 95       	lsr	r18
    123c:	23 70       	andi	r18, 0x03	; 3
    123e:	3d 81       	ldd	r19, Y+5	; 0x05
    1240:	43 2f       	mov	r20, r19
    1242:	44 0f       	add	r20, r20
    1244:	44 0f       	add	r20, r20
    1246:	24 2b       	or	r18, r20
    1248:	32 95       	swap	r19
    124a:	36 95       	lsr	r19
    124c:	36 95       	lsr	r19
    124e:	33 70       	andi	r19, 0x03	; 3
    1250:	2c 93       	st	X, r18
    1252:	11 96       	adiw	r26, 0x01	; 1
    1254:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    1256:	df 01       	movw	r26, r30
    1258:	54 97       	sbiw	r26, 0x14	; 20
    125a:	4e 81       	ldd	r20, Y+6	; 0x06
    125c:	2f 81       	ldd	r18, Y+7	; 0x07
    125e:	32 2f       	mov	r19, r18
    1260:	33 70       	andi	r19, 0x03	; 3
    1262:	4c 93       	st	X, r20
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1268:	df 01       	movw	r26, r30
    126a:	52 97       	sbiw	r26, 0x12	; 18
    126c:	32 2f       	mov	r19, r18
    126e:	36 95       	lsr	r19
    1270:	36 95       	lsr	r19
    1272:	28 85       	ldd	r18, Y+8	; 0x08
    1274:	42 2f       	mov	r20, r18
    1276:	42 95       	swap	r20
    1278:	44 0f       	add	r20, r20
    127a:	44 0f       	add	r20, r20
    127c:	40 7c       	andi	r20, 0xC0	; 192
    127e:	43 2b       	or	r20, r19
    1280:	32 2f       	mov	r19, r18
    1282:	36 95       	lsr	r19
    1284:	36 95       	lsr	r19
    1286:	33 70       	andi	r19, 0x03	; 3
    1288:	4c 93       	st	X, r20
    128a:	11 96       	adiw	r26, 0x01	; 1
    128c:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    128e:	df 01       	movw	r26, r30
    1290:	50 97       	sbiw	r26, 0x10	; 16
    1292:	32 2f       	mov	r19, r18
    1294:	32 95       	swap	r19
    1296:	3f 70       	andi	r19, 0x0F	; 15
    1298:	29 85       	ldd	r18, Y+9	; 0x09
    129a:	42 2f       	mov	r20, r18
    129c:	42 95       	swap	r20
    129e:	40 7f       	andi	r20, 0xF0	; 240
    12a0:	43 2b       	or	r20, r19
    12a2:	32 2f       	mov	r19, r18
    12a4:	32 95       	swap	r19
    12a6:	3f 70       	andi	r19, 0x0F	; 15
    12a8:	33 70       	andi	r19, 0x03	; 3
    12aa:	4c 93       	st	X, r20
    12ac:	11 96       	adiw	r26, 0x01	; 1
    12ae:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    12b0:	df 01       	movw	r26, r30
    12b2:	1e 97       	sbiw	r26, 0x0e	; 14
    12b4:	22 95       	swap	r18
    12b6:	26 95       	lsr	r18
    12b8:	26 95       	lsr	r18
    12ba:	23 70       	andi	r18, 0x03	; 3
    12bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    12be:	43 2f       	mov	r20, r19
    12c0:	44 0f       	add	r20, r20
    12c2:	44 0f       	add	r20, r20
    12c4:	24 2b       	or	r18, r20
    12c6:	32 95       	swap	r19
    12c8:	36 95       	lsr	r19
    12ca:	36 95       	lsr	r19
    12cc:	33 70       	andi	r19, 0x03	; 3
    12ce:	2c 93       	st	X, r18
    12d0:	11 96       	adiw	r26, 0x01	; 1
    12d2:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    12d4:	df 01       	movw	r26, r30
    12d6:	1c 97       	sbiw	r26, 0x0c	; 12
    12d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    12da:	2c 85       	ldd	r18, Y+12	; 0x0c
    12dc:	32 2f       	mov	r19, r18
    12de:	33 70       	andi	r19, 0x03	; 3
    12e0:	4c 93       	st	X, r20
    12e2:	11 96       	adiw	r26, 0x01	; 1
    12e4:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    12e6:	df 01       	movw	r26, r30
    12e8:	1a 97       	sbiw	r26, 0x0a	; 10
    12ea:	32 2f       	mov	r19, r18
    12ec:	36 95       	lsr	r19
    12ee:	36 95       	lsr	r19
    12f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    12f2:	42 2f       	mov	r20, r18
    12f4:	42 95       	swap	r20
    12f6:	44 0f       	add	r20, r20
    12f8:	44 0f       	add	r20, r20
    12fa:	40 7c       	andi	r20, 0xC0	; 192
    12fc:	43 2b       	or	r20, r19
    12fe:	32 2f       	mov	r19, r18
    1300:	36 95       	lsr	r19
    1302:	36 95       	lsr	r19
    1304:	33 70       	andi	r19, 0x03	; 3
    1306:	4c 93       	st	X, r20
    1308:	11 96       	adiw	r26, 0x01	; 1
    130a:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    130c:	df 01       	movw	r26, r30
    130e:	18 97       	sbiw	r26, 0x08	; 8
    1310:	32 2f       	mov	r19, r18
    1312:	32 95       	swap	r19
    1314:	3f 70       	andi	r19, 0x0F	; 15
    1316:	2e 85       	ldd	r18, Y+14	; 0x0e
    1318:	42 2f       	mov	r20, r18
    131a:	42 95       	swap	r20
    131c:	40 7f       	andi	r20, 0xF0	; 240
    131e:	43 2b       	or	r20, r19
    1320:	32 2f       	mov	r19, r18
    1322:	32 95       	swap	r19
    1324:	3f 70       	andi	r19, 0x0F	; 15
    1326:	33 70       	andi	r19, 0x03	; 3
    1328:	4c 93       	st	X, r20
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    132e:	df 01       	movw	r26, r30
    1330:	16 97       	sbiw	r26, 0x06	; 6
    1332:	22 95       	swap	r18
    1334:	26 95       	lsr	r18
    1336:	26 95       	lsr	r18
    1338:	23 70       	andi	r18, 0x03	; 3
    133a:	3f 85       	ldd	r19, Y+15	; 0x0f
    133c:	43 2f       	mov	r20, r19
    133e:	44 0f       	add	r20, r20
    1340:	44 0f       	add	r20, r20
    1342:	24 2b       	or	r18, r20
    1344:	32 95       	swap	r19
    1346:	36 95       	lsr	r19
    1348:	36 95       	lsr	r19
    134a:	33 70       	andi	r19, 0x03	; 3
    134c:	2c 93       	st	X, r18
    134e:	11 96       	adiw	r26, 0x01	; 1
    1350:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    1352:	df 01       	movw	r26, r30
    1354:	14 97       	sbiw	r26, 0x04	; 4
    1356:	48 89       	ldd	r20, Y+16	; 0x10
    1358:	29 89       	ldd	r18, Y+17	; 0x11
    135a:	32 2f       	mov	r19, r18
    135c:	33 70       	andi	r19, 0x03	; 3
    135e:	4c 93       	st	X, r20
    1360:	11 96       	adiw	r26, 0x01	; 1
    1362:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    1364:	df 01       	movw	r26, r30
    1366:	12 97       	sbiw	r26, 0x02	; 2
    1368:	26 95       	lsr	r18
    136a:	26 95       	lsr	r18
    136c:	38 2f       	mov	r19, r24
    136e:	32 95       	swap	r19
    1370:	33 0f       	add	r19, r19
    1372:	33 0f       	add	r19, r19
    1374:	30 7c       	andi	r19, 0xC0	; 192
    1376:	23 2b       	or	r18, r19
    1378:	86 95       	lsr	r24
    137a:	86 95       	lsr	r24
    137c:	83 70       	andi	r24, 0x03	; 3
    137e:	2c 93       	st	X, r18
    1380:	11 96       	adiw	r26, 0x01	; 1
    1382:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    1384:	92 95       	swap	r25
    1386:	96 95       	lsr	r25
    1388:	96 95       	lsr	r25
    138a:	93 70       	andi	r25, 0x03	; 3
    138c:	8c 89       	ldd	r24, Y+20	; 0x14
    138e:	28 2f       	mov	r18, r24
    1390:	22 0f       	add	r18, r18
    1392:	22 0f       	add	r18, r18
    1394:	92 2b       	or	r25, r18
    1396:	82 95       	swap	r24
    1398:	86 95       	lsr	r24
    139a:	86 95       	lsr	r24
    139c:	83 70       	andi	r24, 0x03	; 3
    139e:	90 93 e0 02 	sts	0x02E0, r25
    13a2:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    13a4:	2d 89       	ldd	r18, Y+21	; 0x15
    13a6:	8e 89       	ldd	r24, Y+22	; 0x16
    13a8:	98 2f       	mov	r25, r24
    13aa:	93 70       	andi	r25, 0x03	; 3
    13ac:	20 93 e2 02 	sts	0x02E2, r18
    13b0:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    13b2:	98 2f       	mov	r25, r24
    13b4:	96 95       	lsr	r25
    13b6:	96 95       	lsr	r25
    13b8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ba:	28 2f       	mov	r18, r24
    13bc:	22 95       	swap	r18
    13be:	22 0f       	add	r18, r18
    13c0:	22 0f       	add	r18, r18
    13c2:	20 7c       	andi	r18, 0xC0	; 192
    13c4:	29 2b       	or	r18, r25
    13c6:	98 2f       	mov	r25, r24
    13c8:	96 95       	lsr	r25
    13ca:	96 95       	lsr	r25
    13cc:	93 70       	andi	r25, 0x03	; 3
    13ce:	20 93 e4 02 	sts	0x02E4, r18
    13d2:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    13d4:	98 2f       	mov	r25, r24
    13d6:	92 95       	swap	r25
    13d8:	9f 70       	andi	r25, 0x0F	; 15
    13da:	88 8d       	ldd	r24, Y+24	; 0x18
    13dc:	28 2f       	mov	r18, r24
    13de:	22 95       	swap	r18
    13e0:	20 7f       	andi	r18, 0xF0	; 240
    13e2:	29 2b       	or	r18, r25
    13e4:	98 2f       	mov	r25, r24
    13e6:	92 95       	swap	r25
    13e8:	9f 70       	andi	r25, 0x0F	; 15
    13ea:	93 70       	andi	r25, 0x03	; 3
    13ec:	20 93 e6 02 	sts	0x02E6, r18
    13f0:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    13f2:	82 95       	swap	r24
    13f4:	86 95       	lsr	r24
    13f6:	86 95       	lsr	r24
    13f8:	83 70       	andi	r24, 0x03	; 3
    13fa:	99 8d       	ldd	r25, Y+25	; 0x19
    13fc:	29 2f       	mov	r18, r25
    13fe:	22 0f       	add	r18, r18
    1400:	22 0f       	add	r18, r18
    1402:	82 2b       	or	r24, r18
    1404:	92 95       	swap	r25
    1406:	96 95       	lsr	r25
    1408:	96 95       	lsr	r25
    140a:	93 70       	andi	r25, 0x03	; 3
    140c:	80 93 e8 02 	sts	0x02E8, r24
    1410:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    1412:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1414:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1416:	98 2f       	mov	r25, r24
    1418:	93 70       	andi	r25, 0x03	; 3
    141a:	20 93 ea 02 	sts	0x02EA, r18
    141e:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    1420:	98 2f       	mov	r25, r24
    1422:	96 95       	lsr	r25
    1424:	96 95       	lsr	r25
    1426:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1428:	28 2f       	mov	r18, r24
    142a:	22 95       	swap	r18
    142c:	22 0f       	add	r18, r18
    142e:	22 0f       	add	r18, r18
    1430:	20 7c       	andi	r18, 0xC0	; 192
    1432:	29 2b       	or	r18, r25
    1434:	98 2f       	mov	r25, r24
    1436:	96 95       	lsr	r25
    1438:	96 95       	lsr	r25
    143a:	93 70       	andi	r25, 0x03	; 3
    143c:	20 93 ec 02 	sts	0x02EC, r18
    1440:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    1442:	98 2f       	mov	r25, r24
    1444:	92 95       	swap	r25
    1446:	9f 70       	andi	r25, 0x0F	; 15
    1448:	8d 8d       	ldd	r24, Y+29	; 0x1d
    144a:	28 2f       	mov	r18, r24
    144c:	22 95       	swap	r18
    144e:	20 7f       	andi	r18, 0xF0	; 240
    1450:	29 2b       	or	r18, r25
    1452:	98 2f       	mov	r25, r24
    1454:	92 95       	swap	r25
    1456:	9f 70       	andi	r25, 0x0F	; 15
    1458:	93 70       	andi	r25, 0x03	; 3
    145a:	20 93 ee 02 	sts	0x02EE, r18
    145e:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    1460:	82 95       	swap	r24
    1462:	86 95       	lsr	r24
    1464:	86 95       	lsr	r24
    1466:	83 70       	andi	r24, 0x03	; 3
    1468:	9e 8d       	ldd	r25, Y+30	; 0x1e
    146a:	29 2f       	mov	r18, r25
    146c:	22 0f       	add	r18, r18
    146e:	22 0f       	add	r18, r18
    1470:	82 2b       	or	r24, r18
    1472:	92 95       	swap	r25
    1474:	96 95       	lsr	r25
    1476:	96 95       	lsr	r25
    1478:	93 70       	andi	r25, 0x03	; 3
    147a:	80 93 f0 02 	sts	0x02F0, r24
    147e:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    1480:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1482:	88 a1       	lds	r24, 0x48
    1484:	98 2f       	mov	r25, r24
    1486:	93 70       	andi	r25, 0x03	; 3
    1488:	20 93 f2 02 	sts	0x02F2, r18
    148c:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    148e:	98 2f       	mov	r25, r24
    1490:	96 95       	lsr	r25
    1492:	96 95       	lsr	r25
    1494:	89 a1       	lds	r24, 0x49
    1496:	28 2f       	mov	r18, r24
    1498:	22 95       	swap	r18
    149a:	22 0f       	add	r18, r18
    149c:	22 0f       	add	r18, r18
    149e:	20 7c       	andi	r18, 0xC0	; 192
    14a0:	29 2b       	or	r18, r25
    14a2:	98 2f       	mov	r25, r24
    14a4:	96 95       	lsr	r25
    14a6:	96 95       	lsr	r25
    14a8:	93 70       	andi	r25, 0x03	; 3
    14aa:	20 93 f4 02 	sts	0x02F4, r18
    14ae:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    14b0:	98 2f       	mov	r25, r24
    14b2:	92 95       	swap	r25
    14b4:	9f 70       	andi	r25, 0x0F	; 15
    14b6:	8a a1       	lds	r24, 0x4a
    14b8:	28 2f       	mov	r18, r24
    14ba:	22 95       	swap	r18
    14bc:	20 7f       	andi	r18, 0xF0	; 240
    14be:	29 2b       	or	r18, r25
    14c0:	98 2f       	mov	r25, r24
    14c2:	92 95       	swap	r25
    14c4:	9f 70       	andi	r25, 0x0F	; 15
    14c6:	93 70       	andi	r25, 0x03	; 3
    14c8:	20 93 f6 02 	sts	0x02F6, r18
    14cc:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    14ce:	82 95       	swap	r24
    14d0:	86 95       	lsr	r24
    14d2:	86 95       	lsr	r24
    14d4:	83 70       	andi	r24, 0x03	; 3
    14d6:	9b a1       	lds	r25, 0x4b
    14d8:	29 2f       	mov	r18, r25
    14da:	22 0f       	add	r18, r18
    14dc:	22 0f       	add	r18, r18
    14de:	82 2b       	or	r24, r18
    14e0:	92 95       	swap	r25
    14e2:	96 95       	lsr	r25
    14e4:	96 95       	lsr	r25
    14e6:	93 70       	andi	r25, 0x03	; 3
    14e8:	80 93 f8 02 	sts	0x02F8, r24
    14ec:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    14ee:	2c a1       	lds	r18, 0x4c
    14f0:	8d a1       	lds	r24, 0x4d
    14f2:	98 2f       	mov	r25, r24
    14f4:	93 70       	andi	r25, 0x03	; 3
    14f6:	20 93 fa 02 	sts	0x02FA, r18
    14fa:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    14fc:	98 2f       	mov	r25, r24
    14fe:	96 95       	lsr	r25
    1500:	96 95       	lsr	r25
    1502:	8e a1       	lds	r24, 0x4e
    1504:	28 2f       	mov	r18, r24
    1506:	22 95       	swap	r18
    1508:	22 0f       	add	r18, r18
    150a:	22 0f       	add	r18, r18
    150c:	20 7c       	andi	r18, 0xC0	; 192
    150e:	29 2b       	or	r18, r25
    1510:	86 95       	lsr	r24
    1512:	86 95       	lsr	r24
    1514:	98 2f       	mov	r25, r24
    1516:	93 70       	andi	r25, 0x03	; 3
    1518:	20 93 fc 02 	sts	0x02FC, r18
    151c:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    151e:	7f a1       	lds	r23, 0x4f
    1520:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    1524:	68 a5       	lds	r22, 0x68
    1526:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    152a:	89 a5       	lds	r24, 0x69
    152c:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    1530:	9a a5       	lds	r25, 0x6a
    1532:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    1536:	1b a5       	lds	r17, 0x6b
    1538:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    153c:	de 01       	movw	r26, r28
    153e:	9c 96       	adiw	r26, 0x2c	; 44
    1540:	ef ef       	ldi	r30, 0xFF	; 255
    1542:	f1 e0       	ldi	r31, 0x01	; 1
    1544:	28 e0       	ldi	r18, 0x08	; 8
    1546:	01 90       	ld	r0, Z+
    1548:	0d 92       	st	X+, r0
    154a:	21 50       	subi	r18, 0x01	; 1
    154c:	e1 f7       	brne	.-8      	; 0x1546 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    154e:	e9 2f       	mov	r30, r25
    1550:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	9f 01       	movw	r18, r30
    1556:	22 0f       	add	r18, r18
    1558:	33 1f       	adc	r19, r19
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	a9 01       	movw	r20, r18
    1560:	44 0f       	add	r20, r20
    1562:	55 1f       	adc	r21, r21
    1564:	44 0f       	add	r20, r20
    1566:	55 1f       	adc	r21, r21
    1568:	44 0f       	add	r20, r20
    156a:	55 1f       	adc	r21, r21
    156c:	42 1b       	sub	r20, r18
    156e:	53 0b       	sbc	r21, r19
    1570:	4e 0f       	add	r20, r30
    1572:	5f 1f       	adc	r21, r31
    1574:	55 95       	asr	r21
    1576:	47 95       	ror	r20
    1578:	55 95       	asr	r21
    157a:	47 95       	ror	r20
    157c:	55 95       	asr	r21
    157e:	47 95       	ror	r20
    1580:	55 95       	asr	r21
    1582:	47 95       	ror	r20
    1584:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1586:	fe 01       	movw	r30, r28
    1588:	e4 0f       	add	r30, r20
    158a:	f1 1d       	adc	r31, r1
    158c:	24 a5       	lds	r18, 0x64
    158e:	20 93 06 03 	sts	0x0306, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    1592:	de 01       	movw	r26, r28
    1594:	d4 96       	adiw	r26, 0x34	; 52
    1596:	e7 e0       	ldi	r30, 0x07	; 7
    1598:	f2 e0       	ldi	r31, 0x02	; 2
    159a:	28 e0       	ldi	r18, 0x08	; 8
    159c:	01 90       	ld	r0, Z+
    159e:	0d 92       	st	X+, r0
    15a0:	21 50       	subi	r18, 0x01	; 1
    15a2:	e1 f7       	brne	.-8      	; 0x159c <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    15a4:	29 2f       	mov	r18, r25
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	20 7e       	andi	r18, 0xE0	; 224
    15aa:	30 70       	andi	r19, 0x00	; 0
    15ac:	35 95       	asr	r19
    15ae:	27 95       	ror	r18
    15b0:	35 95       	asr	r19
    15b2:	27 95       	ror	r18
    15b4:	35 95       	asr	r19
    15b6:	27 95       	ror	r18
    15b8:	83 70       	andi	r24, 0x03	; 3
    15ba:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    15bc:	42 2f       	mov	r20, r18
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	ca 01       	movw	r24, r20
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	9c 01       	movw	r18, r24
    15cc:	22 0f       	add	r18, r18
    15ce:	33 1f       	adc	r19, r19
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	28 1b       	sub	r18, r24
    15da:	39 0b       	sbc	r19, r25
    15dc:	42 0f       	add	r20, r18
    15de:	53 1f       	adc	r21, r19
    15e0:	ca 01       	movw	r24, r20
    15e2:	95 95       	asr	r25
    15e4:	87 95       	ror	r24
    15e6:	95 95       	asr	r25
    15e8:	87 95       	ror	r24
    15ea:	95 95       	asr	r25
    15ec:	87 95       	ror	r24
    15ee:	95 95       	asr	r25
    15f0:	87 95       	ror	r24
    15f2:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    15f4:	fe 01       	movw	r30, r28
    15f6:	e8 0f       	add	r30, r24
    15f8:	f1 1d       	adc	r31, r1
    15fa:	84 a9       	sts	0x44, r24
    15fc:	80 93 07 03 	sts	0x0307, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    1600:	de 01       	movw	r26, r28
    1602:	dc 96       	adiw	r26, 0x3c	; 60
    1604:	ef e0       	ldi	r30, 0x0F	; 15
    1606:	f2 e0       	ldi	r31, 0x02	; 2
    1608:	88 e0       	ldi	r24, 0x08	; 8
    160a:	01 90       	ld	r0, Z+
    160c:	0d 92       	st	X+, r0
    160e:	81 50       	subi	r24, 0x01	; 1
    1610:	e1 f7       	brne	.-8      	; 0x160a <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    1612:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    1614:	46 2f       	mov	r20, r22
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	ca 01       	movw	r24, r20
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	9c 01       	movw	r18, r24
    1624:	22 0f       	add	r18, r18
    1626:	33 1f       	adc	r19, r19
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	22 0f       	add	r18, r18
    162e:	33 1f       	adc	r19, r19
    1630:	28 1b       	sub	r18, r24
    1632:	39 0b       	sbc	r19, r25
    1634:	42 0f       	add	r20, r18
    1636:	53 1f       	adc	r21, r19
    1638:	ca 01       	movw	r24, r20
    163a:	95 95       	asr	r25
    163c:	87 95       	ror	r24
    163e:	95 95       	asr	r25
    1640:	87 95       	ror	r24
    1642:	95 95       	asr	r25
    1644:	87 95       	ror	r24
    1646:	95 95       	asr	r25
    1648:	87 95       	ror	r24
    164a:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    164c:	fe 01       	movw	r30, r28
    164e:	e8 0f       	add	r30, r24
    1650:	f1 1d       	adc	r31, r1
    1652:	84 ad       	sts	0x64, r24
    1654:	80 93 08 03 	sts	0x0308, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1658:	21 2f       	mov	r18, r17
    165a:	26 95       	lsr	r18
    165c:	27 95       	ror	r18
    165e:	22 27       	eor	r18, r18
    1660:	27 95       	ror	r18
    1662:	81 2f       	mov	r24, r17
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1668:	81 2f       	mov	r24, r17
    166a:	86 95       	lsr	r24
    166c:	86 95       	lsr	r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	81 70       	andi	r24, 0x01	; 1
    1672:	90 70       	andi	r25, 0x00	; 0
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    167c:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    167e:	81 2f       	mov	r24, r17
    1680:	86 95       	lsr	r24
    1682:	86 95       	lsr	r24
    1684:	86 95       	lsr	r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	81 70       	andi	r24, 0x01	; 1
    168a:	90 70       	andi	r25, 0x00	; 0
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1690:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1692:	81 2f       	mov	r24, r17
    1694:	82 95       	swap	r24
    1696:	8f 70       	andi	r24, 0x0F	; 15
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	81 70       	andi	r24, 0x01	; 1
    169c:	90 70       	andi	r25, 0x00	; 0
    169e:	82 95       	swap	r24
    16a0:	92 95       	swap	r25
    16a2:	90 7f       	andi	r25, 0xF0	; 240
    16a4:	98 27       	eor	r25, r24
    16a6:	80 7f       	andi	r24, 0xF0	; 240
    16a8:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    16aa:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    16ac:	81 2f       	mov	r24, r17
    16ae:	82 95       	swap	r24
    16b0:	86 95       	lsr	r24
    16b2:	87 70       	andi	r24, 0x07	; 7
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	81 70       	andi	r24, 0x01	; 1
    16b8:	90 70       	andi	r25, 0x00	; 0
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	82 95       	swap	r24
    16c0:	92 95       	swap	r25
    16c2:	90 7f       	andi	r25, 0xF0	; 240
    16c4:	98 27       	eor	r25, r24
    16c6:	80 7f       	andi	r24, 0xF0	; 240
    16c8:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    16ca:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    16cc:	81 2f       	mov	r24, r17
    16ce:	82 95       	swap	r24
    16d0:	86 95       	lsr	r24
    16d2:	86 95       	lsr	r24
    16d4:	83 70       	andi	r24, 0x03	; 3
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	81 70       	andi	r24, 0x01	; 1
    16da:	90 70       	andi	r25, 0x00	; 0
    16dc:	00 24       	eor	r0, r0
    16de:	96 95       	lsr	r25
    16e0:	87 95       	ror	r24
    16e2:	07 94       	ror	r0
    16e4:	96 95       	lsr	r25
    16e6:	87 95       	ror	r24
    16e8:	07 94       	ror	r0
    16ea:	98 2f       	mov	r25, r24
    16ec:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    16ee:	82 2b       	or	r24, r18
    16f0:	80 93 79 03 	sts	0x0379, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    16f4:	87 2f       	mov	r24, r23
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	81 70       	andi	r24, 0x01	; 1
    16fa:	90 70       	andi	r25, 0x00	; 0
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1708:	90 91 7b 03 	lds	r25, 0x037B
    170c:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    170e:	89 2b       	or	r24, r25
    1710:	11 1f       	adc	r17, r17
    1712:	11 27       	eor	r17, r17
    1714:	11 1f       	adc	r17, r17
    1716:	11 0f       	add	r17, r17
    1718:	11 0f       	add	r17, r17
    171a:	81 2b       	or	r24, r17
    171c:	80 93 7b 03 	sts	0x037B, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1720:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    1724:	80 91 7b 03 	lds	r24, 0x037B
    1728:	8f 77       	andi	r24, 0x7F	; 127
    172a:	80 93 7b 03 	sts	0x037B, r24
	
	current_patch.mode = MEMORY;
    172e:	10 92 05 03 	sts	0x0305, r1
	
}
    1732:	cd 5b       	subi	r28, 0xBD	; 189
    1734:	df 4f       	sbci	r29, 0xFF	; 255
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	1f 91       	pop	r17
    1746:	08 95       	ret

00001748 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1748:	90 91 06 03 	lds	r25, 0x0306
	if (vco == VCO2) n = octave_index.vco2;
    174c:	60 3f       	cpi	r22, 0xF0	; 240
    174e:	11 f4       	brne	.+4      	; 0x1754 <transpose_note+0xc>
    1750:	90 91 07 03 	lds	r25, 0x0307

	note = (n*12) + note; //calculate MIDI note after octave addition
    1754:	29 2f       	mov	r18, r25
    1756:	22 0f       	add	r18, r18
    1758:	92 0f       	add	r25, r18
    175a:	99 0f       	add	r25, r25
    175c:	99 0f       	add	r25, r25
    175e:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1760:	89 38       	cpi	r24, 0x89	; 137
    1762:	08 f0       	brcs	.+2      	; 0x1766 <transpose_note+0x1e>
    1764:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1766:	08 95       	ret

00001768 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1768:	80 91 79 03 	lds	r24, 0x0379
    176c:	98 2f       	mov	r25, r24
    176e:	96 95       	lsr	r25
    1770:	96 95       	lsr	r25
    1772:	96 95       	lsr	r25
    1774:	90 ff       	sbrs	r25, 0
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1778:	90 91 06 03 	lds	r25, 0x0306
    177c:	9f 5f       	subi	r25, 0xFF	; 255
    177e:	90 93 06 03 	sts	0x0306, r25
    1782:	95 30       	cpi	r25, 0x05	; 5
    1784:	19 f4       	brne	.+6      	; 0x178c <update_octave_range+0x24>
    1786:	94 e0       	ldi	r25, 0x04	; 4
    1788:	90 93 06 03 	sts	0x0306, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    178c:	98 e0       	ldi	r25, 0x08	; 8
    178e:	89 27       	eor	r24, r25
    1790:	80 93 79 03 	sts	0x0379, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1794:	80 91 7a 03 	lds	r24, 0x037A
    1798:	98 2f       	mov	r25, r24
    179a:	96 95       	lsr	r25
    179c:	96 95       	lsr	r25
    179e:	96 95       	lsr	r25
    17a0:	90 ff       	sbrs	r25, 0
    17a2:	0b c0       	rjmp	.+22     	; 0x17ba <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    17a4:	90 91 06 03 	lds	r25, 0x0306
    17a8:	99 23       	and	r25, r25
    17aa:	19 f0       	breq	.+6      	; 0x17b2 <update_octave_range+0x4a>
    17ac:	91 50       	subi	r25, 0x01	; 1
    17ae:	90 93 06 03 	sts	0x0306, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    17b2:	98 e0       	ldi	r25, 0x08	; 8
    17b4:	89 27       	eor	r24, r25
    17b6:	80 93 7a 03 	sts	0x037A, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    17ba:	80 91 06 03 	lds	r24, 0x0306
    17be:	e1 e2       	ldi	r30, 0x21	; 33
    17c0:	f2 e0       	ldi	r31, 0x02	; 2
    17c2:	e8 0f       	add	r30, r24
    17c4:	f1 1d       	adc	r31, r1
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	00 80       	ld	r0, Z
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <update_octave_range+0x6a>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <update_octave_range+0x66>
    17d6:	58 2f       	mov	r21, r24
    17d8:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    17dc:	90 91 7a 03 	lds	r25, 0x037A
    17e0:	29 2f       	mov	r18, r25
    17e2:	26 95       	lsr	r18
    17e4:	26 95       	lsr	r18
    17e6:	20 ff       	sbrs	r18, 0
    17e8:	0e c0       	rjmp	.+28     	; 0x1806 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    17ea:	80 91 07 03 	lds	r24, 0x0307
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	80 93 07 03 	sts	0x0307, r24
    17f4:	85 30       	cpi	r24, 0x05	; 5
    17f6:	19 f4       	brne	.+6      	; 0x17fe <update_octave_range+0x96>
    17f8:	84 e0       	ldi	r24, 0x04	; 4
    17fa:	80 93 07 03 	sts	0x0307, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    17fe:	84 e0       	ldi	r24, 0x04	; 4
    1800:	98 27       	eor	r25, r24
    1802:	90 93 7a 03 	sts	0x037A, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1806:	90 91 7a 03 	lds	r25, 0x037A
    180a:	29 2f       	mov	r18, r25
    180c:	26 95       	lsr	r18
    180e:	20 ff       	sbrs	r18, 0
    1810:	0b c0       	rjmp	.+22     	; 0x1828 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1812:	80 91 07 03 	lds	r24, 0x0307
    1816:	88 23       	and	r24, r24
    1818:	19 f0       	breq	.+6      	; 0x1820 <update_octave_range+0xb8>
    181a:	81 50       	subi	r24, 0x01	; 1
    181c:	80 93 07 03 	sts	0x0307, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	98 27       	eor	r25, r24
    1824:	90 93 7a 03 	sts	0x037A, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1828:	40 91 00 03 	lds	r20, 0x0300
    182c:	4c 7f       	andi	r20, 0xFC	; 252
    182e:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1832:	90 91 07 03 	lds	r25, 0x0307
    1836:	93 30       	cpi	r25, 0x03	; 3
    1838:	88 f0       	brcs	.+34     	; 0x185c <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    183a:	ec e1       	ldi	r30, 0x1C	; 28
    183c:	f2 e0       	ldi	r31, 0x02	; 2
    183e:	e9 0f       	add	r30, r25
    1840:	f1 1d       	adc	r31, r1
    1842:	21 e0       	ldi	r18, 0x01	; 1
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	c9 01       	movw	r24, r18
    1848:	00 80       	ld	r0, Z
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <update_octave_range+0xe8>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <update_octave_range+0xe4>
    1854:	84 2b       	or	r24, r20
    1856:	80 93 00 03 	sts	0x0300, r24
    185a:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    185c:	ec e1       	ldi	r30, 0x1C	; 28
    185e:	f2 e0       	ldi	r31, 0x02	; 2
    1860:	e9 0f       	add	r30, r25
    1862:	f1 1d       	adc	r31, r1
    1864:	21 e0       	ldi	r18, 0x01	; 1
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	c9 01       	movw	r24, r18
    186a:	00 80       	ld	r0, Z
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <update_octave_range+0x10a>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <update_octave_range+0x106>
    1876:	85 2b       	or	r24, r21
    1878:	80 93 01 03 	sts	0x0301, r24
    187c:	08 95       	ret

0000187e <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    187e:	80 91 7a 03 	lds	r24, 0x037A
    1882:	88 23       	and	r24, r24
    1884:	64 f4       	brge	.+24     	; 0x189e <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1886:	80 58       	subi	r24, 0x80	; 128
    1888:	80 93 7a 03 	sts	0x037A, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    188c:	80 91 08 03 	lds	r24, 0x0308
    1890:	8f 5f       	subi	r24, 0xFF	; 255
    1892:	80 93 08 03 	sts	0x0308, r24
    1896:	85 30       	cpi	r24, 0x05	; 5
    1898:	11 f4       	brne	.+4      	; 0x189e <update_lfo_shape+0x20>
    189a:	10 92 08 03 	sts	0x0308, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    189e:	e0 91 08 03 	lds	r30, 0x0308
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	ea 5d       	subi	r30, 0xDA	; 218
    18aa:	fd 4f       	sbci	r31, 0xFD	; 253
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	01 80       	ldd	r0, Z+1	; 0x01
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <update_lfo_shape+0x3a>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    18bc:	90 91 ff 02 	lds	r25, 0x02FF
    18c0:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    18c2:	89 2b       	or	r24, r25
    18c4:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    18c8:	80 81       	ld	r24, Z
    18ca:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    18cc:	ed ed       	ldi	r30, 0xDD	; 221
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 62       	ori	r24, 0x20	; 32
    18d4:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    18d6:	80 81       	ld	r24, Z
    18d8:	8f 7d       	andi	r24, 0xDF	; 223
    18da:	80 83       	st	Z, r24
	
}		
    18dc:	08 95       	ret

000018de <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_led = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    18de:	80 91 7a 03 	lds	r24, 0x037A
    18e2:	80 ff       	sbrs	r24, 0
    18e4:	0d c0       	rjmp	.+26     	; 0x1900 <update_lfo_sync+0x22>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	89 27       	eor	r24, r25
    18ea:	80 93 7a 03 	sts	0x037A, r24
		if (++lfo_sync_led == 5) lfo_sync_led = 0;
    18ee:	80 91 09 03 	lds	r24, 0x0309
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	80 93 09 03 	sts	0x0309, r24
    18f8:	85 30       	cpi	r24, 0x05	; 5
    18fa:	11 f4       	brne	.+4      	; 0x1900 <update_lfo_sync+0x22>
    18fc:	10 92 09 03 	sts	0x0309, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1900:	60 91 ff 02 	lds	r22, 0x02FF
    1904:	60 7f       	andi	r22, 0xF0	; 240
    1906:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_led) current_patch.byte_2 |= (1<<(lfo_sync_led -1)); //this allows an off state when lfo_sync_led = 0;
    190a:	20 91 09 03 	lds	r18, 0x0309
    190e:	22 23       	and	r18, r18
    1910:	71 f0       	breq	.+28     	; 0x192e <update_lfo_sync+0x50>
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	21 50       	subi	r18, 0x01	; 1
    1916:	30 40       	sbci	r19, 0x00	; 0
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	ca 01       	movw	r24, r20
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <update_lfo_sync+0x46>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	2a 95       	dec	r18
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <update_lfo_sync+0x42>
    1928:	86 2b       	or	r24, r22
    192a:	80 93 ff 02 	sts	0x02FF, r24
    192e:	08 95       	ret

00001930 <update_patch>:
	
	
}		
	
void update_patch(void) {
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
		//return;
					//
	//}
	//switch_press = 0;
	
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
    1934:	85 b1       	in	r24, 0x05	; 5
    1936:	80 58       	subi	r24, 0x80	; 128
    1938:	85 b9       	out	0x05, r24	; 5
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    193a:	90 91 79 03 	lds	r25, 0x0379
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    193e:	80 91 7b 03 	lds	r24, 0x037B
    1942:	86 95       	lsr	r24
    1944:	86 95       	lsr	r24
    1946:	68 2f       	mov	r22, r24
    1948:	67 95       	ror	r22
    194a:	66 27       	eor	r22, r22
    194c:	67 95       	ror	r22
	//}
	//switch_press = 0;
	
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    194e:	29 2f       	mov	r18, r25
    1950:	21 70       	andi	r18, 0x01	; 1
    1952:	26 2b       	or	r18, r22
    1954:	69 2f       	mov	r22, r25
    1956:	66 1f       	adc	r22, r22
    1958:	66 27       	eor	r22, r22
    195a:	66 1f       	adc	r22, r22
    195c:	66 0f       	add	r22, r22
    195e:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1960:	c9 2f       	mov	r28, r25
    1962:	c6 95       	lsr	r28
    1964:	c6 95       	lsr	r28
    1966:	d0 e0       	ldi	r29, 0x00	; 0
    1968:	c1 70       	andi	r28, 0x01	; 1
    196a:	d0 70       	andi	r29, 0x00	; 0
    196c:	de 01       	movw	r26, r28
    196e:	aa 0f       	add	r26, r26
    1970:	bb 1f       	adc	r27, r27
    1972:	aa 0f       	add	r26, r26
    1974:	bb 1f       	adc	r27, r27
	//}
	//switch_press = 0;
	
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1976:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1978:	a9 2f       	mov	r26, r25
    197a:	a6 95       	lsr	r26
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	a1 70       	andi	r26, 0x01	; 1
    1980:	b0 70       	andi	r27, 0x00	; 0
    1982:	fd 01       	movw	r30, r26
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	ee 0f       	add	r30, r30
    198e:	ff 1f       	adc	r31, r31
	//}
	//switch_press = 0;
	
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1990:	a6 2f       	mov	r26, r22
    1992:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1994:	e9 2f       	mov	r30, r25
    1996:	e2 95       	swap	r30
    1998:	ef 70       	andi	r30, 0x0F	; 15
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	e1 70       	andi	r30, 0x01	; 1
    199e:	f0 70       	andi	r31, 0x00	; 0
    19a0:	bf 01       	movw	r22, r30
    19a2:	62 95       	swap	r22
    19a4:	72 95       	swap	r23
    19a6:	70 7f       	andi	r23, 0xF0	; 240
    19a8:	76 27       	eor	r23, r22
    19aa:	60 7f       	andi	r22, 0xF0	; 240
    19ac:	76 27       	eor	r23, r22
	//}
	//switch_press = 0;
	
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    19ae:	ea 2f       	mov	r30, r26
    19b0:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    19b2:	69 2f       	mov	r22, r25
    19b4:	62 95       	swap	r22
    19b6:	66 95       	lsr	r22
    19b8:	67 70       	andi	r22, 0x07	; 7
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	61 70       	andi	r22, 0x01	; 1
    19be:	70 70       	andi	r23, 0x00	; 0
    19c0:	ab 01       	movw	r20, r22
    19c2:	44 0f       	add	r20, r20
    19c4:	55 1f       	adc	r21, r21
    19c6:	42 95       	swap	r20
    19c8:	52 95       	swap	r21
    19ca:	50 7f       	andi	r21, 0xF0	; 240
    19cc:	54 27       	eor	r21, r20
    19ce:	40 7f       	andi	r20, 0xF0	; 240
    19d0:	54 27       	eor	r21, r20
	//}
	//switch_press = 0;
	
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    19d2:	6e 2f       	mov	r22, r30
    19d4:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    19d6:	49 2f       	mov	r20, r25
    19d8:	42 95       	swap	r20
    19da:	46 95       	lsr	r20
    19dc:	46 95       	lsr	r20
    19de:	43 70       	andi	r20, 0x03	; 3
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	41 70       	andi	r20, 0x01	; 1
    19e4:	50 70       	andi	r21, 0x00	; 0
    19e6:	9a 01       	movw	r18, r20
    19e8:	00 24       	eor	r0, r0
    19ea:	36 95       	lsr	r19
    19ec:	27 95       	ror	r18
    19ee:	07 94       	ror	r0
    19f0:	36 95       	lsr	r19
    19f2:	27 95       	ror	r18
    19f4:	07 94       	ror	r0
    19f6:	32 2f       	mov	r19, r18
    19f8:	20 2d       	mov	r18, r0
	//}
	//switch_press = 0;
	
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    19fa:	26 2b       	or	r18, r22
    19fc:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1a00:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1a02:	81 95       	neg	r24
    1a04:	89 27       	eor	r24, r25
    1a06:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1a08:	89 27       	eor	r24, r25
    1a0a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1a0e:	ed ed       	ldi	r30, 0xDD	; 221
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1a14:	90 91 7b 03 	lds	r25, 0x037B
    1a18:	96 95       	lsr	r25
    1a1a:	96 95       	lsr	r25
    1a1c:	96 95       	lsr	r25
    1a1e:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1a20:	91 95       	neg	r25
    1a22:	80 81       	ld	r24, Z
    1a24:	89 27       	eor	r24, r25
    1a26:	80 71       	andi	r24, 0x10	; 16
    1a28:	82 27       	eor	r24, r18
    1a2a:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1a2c:	ee ef       	ldi	r30, 0xFE	; 254
    1a2e:	f2 e0       	ldi	r31, 0x02	; 2
    1a30:	80 81       	ld	r24, Z
    1a32:	98 27       	eor	r25, r24
    1a34:	91 70       	andi	r25, 0x01	; 1
    1a36:	89 27       	eor	r24, r25
    1a38:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1a3a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1a3e:	0e 94 3f 0c 	call	0x187e	; 0x187e <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1a42:	0e 94 6f 0c 	call	0x18de	; 0x18de <update_lfo_sync>

	
	//update_patch_programmer();		
				
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) //temporary tune button hack
    1a46:	80 91 7a 03 	lds	r24, 0x037A
    1a4a:	98 2f       	mov	r25, r24
    1a4c:	92 95       	swap	r25
    1a4e:	96 95       	lsr	r25
    1a50:	97 70       	andi	r25, 0x07	; 7
    1a52:	90 ff       	sbrs	r25, 0
    1a54:	3f c0       	rjmp	.+126    	; 0x1ad4 <update_patch+0x1a4>
		{ 
				
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle read switch state
    1a56:	90 e2       	ldi	r25, 0x20	; 32
    1a58:	89 27       	eor	r24, r25
    1a5a:	80 93 7a 03 	sts	0x037A, r24


		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1a5e:	87 e0       	ldi	r24, 0x07	; 7
    1a60:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1a62:	cd ed       	ldi	r28, 0xDD	; 221
    1a64:	d0 e0       	ldi	r29, 0x00	; 0
    1a66:	88 81       	ld	r24, Y
    1a68:	80 62       	ori	r24, 0x20	; 32
    1a6a:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1a6c:	88 81       	ld	r24, Y
    1a6e:	8f 7d       	andi	r24, 0xDF	; 223
    1a70:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1a72:	12 b8       	out	0x02, r1	; 2
		
		vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    1a74:	8f e0       	ldi	r24, 0x0F	; 15
    1a76:	6f e0       	ldi	r22, 0x0F	; 15
    1a78:	7e e5       	ldi	r23, 0x5E	; 94
    1a7a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <set_vco_init_cv>
    1a7e:	90 93 71 03 	sts	0x0371, r25
    1a82:	80 93 70 03 	sts	0x0370, r24
		vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    1a86:	80 ef       	ldi	r24, 0xF0	; 240
    1a88:	6f e0       	ldi	r22, 0x0F	; 15
    1a8a:	7e e5       	ldi	r23, 0x5E	; 94
    1a8c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <set_vco_init_cv>
    1a90:	90 93 6f 03 	sts	0x036F, r25
    1a94:	80 93 6e 03 	sts	0x036E, r24
		//vco1_init_cv = vco2_init_cv;
		tune_8ths(VCO1);
    1a98:	8f e0       	ldi	r24, 0x0F	; 15
    1a9a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <tune_8ths>
		tune_8ths(VCO2);
    1a9e:	80 ef       	ldi	r24, 0xF0	; 240
    1aa0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <tune_8ths>
		tune_filter();
    1aa4:	0e 94 58 11 	call	0x22b0	; 0x22b0 <tune_filter>
		save_tuning_tables();
    1aa8:	0e 94 26 13 	call	0x264c	; 0x264c <save_tuning_tables>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1aac:	8f e4       	ldi	r24, 0x4F	; 79
    1aae:	93 ec       	ldi	r25, 0xC3	; 195
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <update_patch+0x180>
    1ab4:	00 c0       	rjmp	.+0      	; 0x1ab6 <update_patch+0x186>
    1ab6:	00 00       	nop
		_delay_ms(200);	//give some time for release to decay to avoid pops	
		
		DATA_BUS = LFO_TRI_ADDR;
    1ab8:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1aba:	88 81       	ld	r24, Y
    1abc:	80 62       	ori	r24, 0x20	; 32
    1abe:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1ac0:	88 81       	ld	r24, Y
    1ac2:	8f 7d       	andi	r24, 0xDF	; 223
    1ac4:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1ac6:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits 
    1ac8:	80 91 ff 02 	lds	r24, 0x02FF
    1acc:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1ace:	80 68       	ori	r24, 0x80	; 128
    1ad0:	80 93 ff 02 	sts	0x02FF, r24
				
		}
		
		
	
}
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	08 95       	ret

00001ada <update_patch_programmer>:
	
}

void update_patch_programmer(void) {
	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1ada:	80 91 7b 03 	lds	r24, 0x037B
    1ade:	98 2f       	mov	r25, r24
    1ae0:	92 95       	swap	r25
    1ae2:	96 95       	lsr	r25
    1ae4:	96 95       	lsr	r25
    1ae6:	93 70       	andi	r25, 0x03	; 3
    1ae8:	90 ff       	sbrs	r25, 0
    1aea:	17 c0       	rjmp	.+46     	; 0x1b1a <update_patch_programmer+0x40>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1aec:	90 e4       	ldi	r25, 0x40	; 64
    1aee:	89 27       	eor	r24, r25
    1af0:	80 93 7b 03 	sts	0x037B, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1af4:	80 91 03 03 	lds	r24, 0x0303
    1af8:	8f 5f       	subi	r24, 0xFF	; 255
    1afa:	80 93 03 03 	sts	0x0303, r24
    1afe:	85 32       	cpi	r24, 0x25	; 37
    1b00:	21 f4       	brne	.+8      	; 0x1b0a <update_patch_programmer+0x30>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1b02:	84 e2       	ldi	r24, 0x24	; 36
    1b04:	80 93 03 03 	sts	0x0303, r24
    1b08:	08 c0       	rjmp	.+16     	; 0x1b1a <update_patch_programmer+0x40>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1b0a:	90 91 05 03 	lds	r25, 0x0305
    1b0e:	93 30       	cpi	r25, 0x03	; 3
    1b10:	21 f0       	breq	.+8      	; 0x1b1a <update_patch_programmer+0x40>
			
			load_patch(current_patch.number);
    1b12:	0e 94 c4 08 	call	0x1188	; 0x1188 <load_patch>
			update_patch();
    1b16:	0e 94 98 0c 	call	0x1930	; 0x1930 <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1b1a:	80 91 7b 03 	lds	r24, 0x037B
    1b1e:	98 2f       	mov	r25, r24
    1b20:	92 95       	swap	r25
    1b22:	96 95       	lsr	r25
    1b24:	97 70       	andi	r25, 0x07	; 7
    1b26:	90 ff       	sbrs	r25, 0
    1b28:	15 c0       	rjmp	.+42     	; 0x1b54 <update_patch_programmer+0x7a>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1b2a:	90 e2       	ldi	r25, 0x20	; 32
    1b2c:	89 27       	eor	r24, r25
    1b2e:	80 93 7b 03 	sts	0x037B, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1b32:	80 91 03 03 	lds	r24, 0x0303
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <update_patch_programmer+0x66>
    1b3a:	81 50       	subi	r24, 0x01	; 1
    1b3c:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1b40:	80 91 05 03 	lds	r24, 0x0305
    1b44:	83 30       	cpi	r24, 0x03	; 3
    1b46:	31 f0       	breq	.+12     	; 0x1b54 <update_patch_programmer+0x7a>
			
			load_patch(current_patch.number); 
    1b48:	80 91 03 03 	lds	r24, 0x0303
    1b4c:	0e 94 c4 08 	call	0x1188	; 0x1188 <load_patch>
			update_patch();
    1b50:	0e 94 98 0c 	call	0x1930	; 0x1930 <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1b54:	80 91 7b 03 	lds	r24, 0x037B
    1b58:	98 2f       	mov	r25, r24
    1b5a:	92 95       	swap	r25
    1b5c:	9f 70       	andi	r25, 0x0F	; 15
    1b5e:	90 ff       	sbrs	r25, 0
    1b60:	15 c0       	rjmp	.+42     	; 0x1b8c <update_patch_programmer+0xb2>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1b62:	90 e1       	ldi	r25, 0x10	; 16
    1b64:	89 27       	eor	r24, r25
    1b66:	80 93 7b 03 	sts	0x037B, r24
		if (current_patch.mode != WRITE) {
    1b6a:	90 91 05 03 	lds	r25, 0x0305
    1b6e:	93 30       	cpi	r25, 0x03	; 3
    1b70:	49 f0       	breq	.+18     	; 0x1b84 <update_patch_programmer+0xaa>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1b72:	8f 77       	andi	r24, 0x7F	; 127
    1b74:	80 93 7b 03 	sts	0x037B, r24
			current_patch.mode = WRITE;
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	80 93 05 03 	sts	0x0305, r24
			lock_pots();
    1b7e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lock_pots>
    1b82:	04 c0       	rjmp	.+8      	; 0x1b8c <update_patch_programmer+0xb2>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1b84:	80 91 03 03 	lds	r24, 0x0303
    1b88:	0e 94 d1 06 	call	0xda2	; 0xda2 <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1b8c:	80 91 7b 03 	lds	r24, 0x037B
    1b90:	88 23       	and	r24, r24
    1b92:	44 f4       	brge	.+16     	; 0x1ba4 <update_patch_programmer+0xca>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1b94:	80 68       	ori	r24, 0x80	; 128
    1b96:	80 93 7b 03 	sts	0x037B, r24
		current_patch.mode = MANUAL;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	80 93 05 03 	sts	0x0305, r24
		unlock_pots();
    1ba0:	0e 94 c0 06 	call	0xd80	; 0xd80 <unlock_pots>
    1ba4:	08 95       	ret

00001ba6 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1ba6:	88 ed       	ldi	r24, 0xD8	; 216
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1bb2:	81 ee       	ldi	r24, 0xE1	; 225
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1bbe:	82 ee       	ldi	r24, 0xE2	; 226
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1bca:	82 eb       	ldi	r24, 0xB2	; 178
    1bcc:	92 e0       	ldi	r25, 0x02	; 2
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1bd6:	8a ed       	ldi	r24, 0xDA	; 218
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1be2:	8f ed       	ldi	r24, 0xDF	; 223
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1bee:	80 ee       	ldi	r24, 0xE0	; 224
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1bfa:	81 ed       	ldi	r24, 0xD1	; 209
    1bfc:	91 e0       	ldi	r25, 0x01	; 1
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1c06:	86 ed       	ldi	r24, 0xD6	; 214
    1c08:	91 e0       	ldi	r25, 0x01	; 1
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1c12:	82 ed       	ldi	r24, 0xD2	; 210
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1c1e:	83 ed       	ldi	r24, 0xD3	; 211
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1c2a:	84 ed       	ldi	r24, 0xD4	; 212
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	6f ef       	ldi	r22, 0xFF	; 255
    1c30:	7f e3       	ldi	r23, 0x3F	; 63
    1c32:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1c36:	85 ed       	ldi	r24, 0xD5	; 213
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1c42:	89 ed       	ldi	r24, 0xD9	; 217
    1c44:	91 e0       	ldi	r25, 0x01	; 1
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1c4e:	8e ec       	ldi	r24, 0xCE	; 206
    1c50:	91 e0       	ldi	r25, 0x01	; 1
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1c5a:	8c ec       	ldi	r24, 0xCC	; 204
    1c5c:	91 e0       	ldi	r25, 0x01	; 1
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1c66:	8a ec       	ldi	r24, 0xCA	; 202
    1c68:	91 e0       	ldi	r25, 0x01	; 1
    1c6a:	6f ef       	ldi	r22, 0xFF	; 255
    1c6c:	7f e3       	ldi	r23, 0x3F	; 63
    1c6e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1c72:	88 ec       	ldi	r24, 0xC8	; 200
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1c7e:	80 ed       	ldi	r24, 0xD0	; 208
    1c80:	91 e0       	ldi	r25, 0x01	; 1
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1c8a:	83 ee       	ldi	r24, 0xE3	; 227
    1c8c:	91 e0       	ldi	r25, 0x01	; 1
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1c96:	84 ee       	ldi	r24, 0xE4	; 228
    1c98:	91 e0       	ldi	r25, 0x01	; 1
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
}	
    1ca2:	08 95       	ret

00001ca4 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1ca4:	2f 92       	push	r2
    1ca6:	3f 92       	push	r3
    1ca8:	4f 92       	push	r4
    1caa:	5f 92       	push	r5
    1cac:	6f 92       	push	r6
    1cae:	7f 92       	push	r7
    1cb0:	8f 92       	push	r8
    1cb2:	9f 92       	push	r9
    1cb4:	af 92       	push	r10
    1cb6:	bf 92       	push	r11
    1cb8:	cf 92       	push	r12
    1cba:	df 92       	push	r13
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	2c 97       	sbiw	r28, 0x0c	; 12
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	08 2f       	mov	r16, r24
    1cda:	78 87       	std	Y+8, r23	; 0x08
    1cdc:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1cde:	80 91 76 03 	lds	r24, 0x0376
    1ce2:	83 60       	ori	r24, 0x03	; 3
    1ce4:	80 93 76 03 	sts	0x0376, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1ce8:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1cec:	10 92 75 03 	sts	0x0375, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1cf0:	0f 30       	cpi	r16, 0x0F	; 15
    1cf2:	e1 f4       	brne	.+56     	; 0x1d2c <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1cf4:	0f 2e       	mov	r0, r31
    1cf6:	f6 ee       	ldi	r31, 0xE6	; 230
    1cf8:	4f 2e       	mov	r4, r31
    1cfa:	f1 e0       	ldi	r31, 0x01	; 1
    1cfc:	5f 2e       	mov	r5, r31
    1cfe:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1d00:	0f 2e       	mov	r0, r31
    1d02:	fe ed       	ldi	r31, 0xDE	; 222
    1d04:	2f 2e       	mov	r2, r31
    1d06:	f1 e0       	ldi	r31, 0x01	; 1
    1d08:	3f 2e       	mov	r3, r31
    1d0a:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1d0c:	23 ee       	ldi	r18, 0xE3	; 227
    1d0e:	31 e0       	ldi	r19, 0x01	; 1
    1d10:	3a 83       	std	Y+2, r19	; 0x02
    1d12:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1d14:	0f 2e       	mov	r0, r31
    1d16:	fc ed       	ldi	r31, 0xDC	; 220
    1d18:	8f 2e       	mov	r8, r31
    1d1a:	f1 e0       	ldi	r31, 0x01	; 1
    1d1c:	9f 2e       	mov	r9, r31
    1d1e:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1d20:	82 e7       	ldi	r24, 0x72	; 114
    1d22:	96 e0       	ldi	r25, 0x06	; 6
    1d24:	9a 87       	std	Y+10, r25	; 0x0a
    1d26:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	1b c0       	rjmp	.+54     	; 0x1d62 <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1d2c:	0f 2e       	mov	r0, r31
    1d2e:	f5 ee       	ldi	r31, 0xE5	; 229
    1d30:	4f 2e       	mov	r4, r31
    1d32:	f1 e0       	ldi	r31, 0x01	; 1
    1d34:	5f 2e       	mov	r5, r31
    1d36:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1d38:	0f 2e       	mov	r0, r31
    1d3a:	f7 ed       	ldi	r31, 0xD7	; 215
    1d3c:	2f 2e       	mov	r2, r31
    1d3e:	f1 e0       	ldi	r31, 0x01	; 1
    1d40:	3f 2e       	mov	r3, r31
    1d42:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1d44:	e4 ee       	ldi	r30, 0xE4	; 228
    1d46:	f1 e0       	ldi	r31, 0x01	; 1
    1d48:	fa 83       	std	Y+2, r31	; 0x02
    1d4a:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1d4c:	0f 2e       	mov	r0, r31
    1d4e:	fd ed       	ldi	r31, 0xDD	; 221
    1d50:	8f 2e       	mov	r8, r31
    1d52:	f1 e0       	ldi	r31, 0x01	; 1
    1d54:	9f 2e       	mov	r9, r31
    1d56:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1d58:	20 e7       	ldi	r18, 0x70	; 112
    1d5a:	36 e0       	ldi	r19, 0x06	; 6
    1d5c:	3a 87       	std	Y+10, r19	; 0x0a
    1d5e:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1d60:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1d62:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1d64:	ed ed       	ldi	r30, 0xDD	; 221
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	80 64       	ori	r24, 0x40	; 64
    1d6c:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1d6e:	80 81       	ld	r24, Z
    1d70:	8f 7b       	andi	r24, 0xBF	; 191
    1d72:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1d74:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1d76:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1d78:	84 b5       	in	r24, 0x24	; 36
    1d7a:	8f 60       	ori	r24, 0x0F	; 15
    1d7c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1d82:	ee e6       	ldi	r30, 0x6E	; 110
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	90 81       	ld	r25, Z
    1d88:	92 60       	ori	r25, 0x02	; 2
    1d8a:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1d8c:	80 93 77 03 	sts	0x0377, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1d90:	8d e0       	ldi	r24, 0x0D	; 13
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9c 83       	std	Y+4, r25	; 0x04
    1d96:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1d98:	80 2f       	mov	r24, r16
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	8c 01       	movw	r16, r24
    1d9e:	0f 5f       	subi	r16, 0xFF	; 255
    1da0:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1da2:	0f 2e       	mov	r0, r31
    1da4:	f8 ed       	ldi	r31, 0xD8	; 216
    1da6:	ef 2e       	mov	r14, r31
    1da8:	f1 e0       	ldi	r31, 0x01	; 1
    1daa:	ff 2e       	mov	r15, r31
    1dac:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1dae:	0f 2e       	mov	r0, r31
    1db0:	f4 ed       	ldi	r31, 0xD4	; 212
    1db2:	cf 2e       	mov	r12, r31
    1db4:	f1 e0       	ldi	r31, 0x01	; 1
    1db6:	df 2e       	mov	r13, r31
    1db8:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1dba:	0f 2e       	mov	r0, r31
    1dbc:	fa ec       	ldi	r31, 0xCA	; 202
    1dbe:	af 2e       	mov	r10, r31
    1dc0:	f1 e0       	ldi	r31, 0x01	; 1
    1dc2:	bf 2e       	mov	r11, r31
    1dc4:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1dc6:	0f 2e       	mov	r0, r31
    1dc8:	fb ec       	ldi	r31, 0xCB	; 203
    1dca:	6f 2e       	mov	r6, r31
    1dcc:	f1 e0       	ldi	r31, 0x01	; 1
    1dce:	7f 2e       	mov	r7, r31
    1dd0:	f0 2d       	mov	r31, r0
    1dd2:	e0 e0       	ldi	r30, 0x00	; 0
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	fc 87       	std	Y+12, r31	; 0x0c
    1dd8:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1dda:	21 e0       	ldi	r18, 0x01	; 1
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	0b 80       	ldd	r0, Y+3	; 0x03
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <set_vco_init_cv+0x142>
    1de2:	22 0f       	add	r18, r18
    1de4:	33 1f       	adc	r19, r19
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <set_vco_init_cv+0x13e>
    1dea:	3e 83       	std	Y+6, r19	; 0x06
    1dec:	2d 83       	std	Y+5, r18	; 0x05
    1dee:	8b 85       	ldd	r24, Y+11	; 0x0b
    1df0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1df2:	82 2b       	or	r24, r18
    1df4:	93 2b       	or	r25, r19
    1df6:	9c 87       	std	Y+12, r25	; 0x0c
    1df8:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    1dfa:	c4 01       	movw	r24, r8
    1dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e00:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
		
		count_finished = FALSE;
    1e04:	10 92 75 03 	sts	0x0375, r1
		period_counter = 0;
    1e08:	10 92 78 03 	sts	0x0378, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    1e0c:	8f e0       	ldi	r24, 0x0F	; 15
    1e0e:	e8 e1       	ldi	r30, 0x18	; 24
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	a8 95       	wdr
    1e18:	e0 93 60 00 	sts	0x0060, r30
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1e22:	80 91 75 03 	lds	r24, 0x0375
    1e26:	88 23       	and	r24, r24
    1e28:	89 f5       	brne	.+98     	; 0x1e8c <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    1e2a:	c8 01       	movw	r24, r16
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    1e32:	c4 01       	movw	r24, r8
    1e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e38:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    1e3c:	c1 01       	movw	r24, r2
    1e3e:	6f ef       	ldi	r22, 0xFF	; 255
    1e40:	7f e3       	ldi	r23, 0x3F	; 63
    1e42:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    1e46:	c7 01       	movw	r24, r14
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    1e50:	c6 01       	movw	r24, r12
    1e52:	6f ef       	ldi	r22, 0xFF	; 255
    1e54:	7f e3       	ldi	r23, 0x3F	; 63
    1e56:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    1e5a:	c5 01       	movw	r24, r10
    1e5c:	6f ef       	ldi	r22, 0xFF	; 255
    1e5e:	7f e3       	ldi	r23, 0x3F	; 63
    1e60:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1e64:	c3 01       	movw	r24, r6
    1e66:	6f ef       	ldi	r22, 0xFF	; 255
    1e68:	7f e3       	ldi	r23, 0x3F	; 63
    1e6a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	6f ef       	ldi	r22, 0xFF	; 255
    1e74:	7f e3       	ldi	r23, 0x3F	; 63
    1e76:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    1e7a:	c2 01       	movw	r24, r4
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	70 e0       	ldi	r23, 0x00	; 0
    1e80:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    1e84:	80 91 75 03 	lds	r24, 0x0375
    1e88:	88 23       	and	r24, r24
    1e8a:	79 f2       	breq	.-98     	; 0x1e2a <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    1e8c:	88 e1       	ldi	r24, 0x18	; 24
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	80 93 60 00 	sts	0x0060, r24
    1e96:	10 92 60 00 	sts	0x0060, r1
    1e9a:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    1e9c:	80 91 73 03 	lds	r24, 0x0373
    1ea0:	90 91 74 03 	lds	r25, 0x0374
    1ea4:	ef 81       	ldd	r30, Y+7	; 0x07
    1ea6:	f8 85       	ldd	r31, Y+8	; 0x08
    1ea8:	e8 17       	cp	r30, r24
    1eaa:	f9 07       	cpc	r31, r25
    1eac:	20 f0       	brcs	.+8      	; 0x1eb6 <set_vco_init_cv+0x212>
    1eae:	80 91 af 02 	lds	r24, 0x02AF
    1eb2:	88 23       	and	r24, r24
    1eb4:	51 f4       	brne	.+20     	; 0x1eca <set_vco_init_cv+0x226>
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	80 95       	com	r24
    1ebc:	90 95       	com	r25
    1ebe:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ec0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ec2:	28 23       	and	r18, r24
    1ec4:	39 23       	and	r19, r25
    1ec6:	3c 87       	std	Y+12, r19	; 0x0c
    1ec8:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9c 83       	std	Y+4, r25	; 0x04
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
    1eda:	ef ef       	ldi	r30, 0xFF	; 255
    1edc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ede:	9e 07       	cpc	r25, r30
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <set_vco_init_cv+0x240>
    1ee2:	7b cf       	rjmp	.-266    	; 0x1dda <set_vco_init_cv+0x136>
    1ee4:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ee6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ee8:	3e 83       	std	Y+6, r19	; 0x06
    1eea:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    1eec:	88 ec       	ldi	r24, 0xC8	; 200
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    1ef8:	89 ec       	ldi	r24, 0xC9	; 201
    1efa:	91 e0       	ldi	r25, 0x01	; 1
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    1f04:	84 ed       	ldi	r24, 0xD4	; 212
    1f06:	91 e0       	ldi	r25, 0x01	; 1
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    1f10:	88 ed       	ldi	r24, 0xD8	; 216
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    1f1c:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1f1e:	ee e6       	ldi	r30, 0x6E	; 110
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8d 7f       	andi	r24, 0xFD	; 253
    1f26:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    1f28:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	6d 81       	ldd	r22, Y+5	; 0x05
    1f30:	7e 81       	ldd	r23, Y+6	; 0x06
    1f32:	0e 94 91 1b 	call	0x3722	; 0x3722 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	2c 96       	adiw	r28, 0x0c	; 12
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	ff 90       	pop	r15
    1f50:	ef 90       	pop	r14
    1f52:	df 90       	pop	r13
    1f54:	cf 90       	pop	r12
    1f56:	bf 90       	pop	r11
    1f58:	af 90       	pop	r10
    1f5a:	9f 90       	pop	r9
    1f5c:	8f 90       	pop	r8
    1f5e:	7f 90       	pop	r7
    1f60:	6f 90       	pop	r6
    1f62:	5f 90       	pop	r5
    1f64:	4f 90       	pop	r4
    1f66:	3f 90       	pop	r3
    1f68:	2f 90       	pop	r2
    1f6a:	08 95       	ret

00001f6c <tune_8ths>:



void tune_8ths(uint8_t vco) {
    1f6c:	2f 92       	push	r2
    1f6e:	3f 92       	push	r3
    1f70:	4f 92       	push	r4
    1f72:	5f 92       	push	r5
    1f74:	6f 92       	push	r6
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	c0 54       	subi	r28, 0x40	; 64
    1f96:	d0 40       	sbci	r29, 0x00	; 0
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    1fa4:	de 01       	movw	r26, r28
    1fa6:	11 96       	adiw	r26, 0x01	; 1
    1fa8:	e0 e3       	ldi	r30, 0x30	; 48
    1faa:	f2 e0       	ldi	r31, 0x02	; 2
    1fac:	80 e3       	ldi	r24, 0x30	; 48
    1fae:	01 90       	ld	r0, Z+
    1fb0:	0d 92       	st	X+, r0
    1fb2:	81 50       	subi	r24, 0x01	; 1
    1fb4:	e1 f7       	brne	.-8      	; 0x1fae <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    1fb6:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    1fba:	0f 30       	cpi	r16, 0x0F	; 15
    1fbc:	11 f5       	brne	.+68     	; 0x2002 <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    1fbe:	40 90 70 03 	lds	r4, 0x0370
    1fc2:	50 90 71 03 	lds	r5, 0x0371
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1fc6:	0f 2e       	mov	r0, r31
    1fc8:	f6 ee       	ldi	r31, 0xE6	; 230
    1fca:	8f 2e       	mov	r8, r31
    1fcc:	f1 e0       	ldi	r31, 0x01	; 1
    1fce:	9f 2e       	mov	r9, r31
    1fd0:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    1fd2:	0f 2e       	mov	r0, r31
    1fd4:	fe ed       	ldi	r31, 0xDE	; 222
    1fd6:	2f 2e       	mov	r2, r31
    1fd8:	f1 e0       	ldi	r31, 0x01	; 1
    1fda:	3f 2e       	mov	r3, r31
    1fdc:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    1fde:	23 ee       	ldi	r18, 0xE3	; 227
    1fe0:	31 e0       	ldi	r19, 0x01	; 1
    1fe2:	3a ab       	sts	0x5a, r19
    1fe4:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1fe6:	0f 2e       	mov	r0, r31
    1fe8:	fc ed       	ldi	r31, 0xDC	; 220
    1fea:	6f 2e       	mov	r6, r31
    1fec:	f1 e0       	ldi	r31, 0x01	; 1
    1fee:	7f 2e       	mov	r7, r31
    1ff0:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    1ff2:	0c e4       	ldi	r16, 0x4C	; 76
    1ff4:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    1ff6:	cc 24       	eor	r12, r12
    1ff8:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    1ffa:	ee 24       	eor	r14, r14
    1ffc:	68 94       	set
    1ffe:	e1 f8       	bld	r14, 1
    2000:	22 c0       	rjmp	.+68     	; 0x2046 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    2002:	40 90 6e 03 	lds	r4, 0x036E
    2006:	50 90 6f 03 	lds	r5, 0x036F
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    200a:	0f 2e       	mov	r0, r31
    200c:	f5 ee       	ldi	r31, 0xE5	; 229
    200e:	8f 2e       	mov	r8, r31
    2010:	f1 e0       	ldi	r31, 0x01	; 1
    2012:	9f 2e       	mov	r9, r31
    2014:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2016:	0f 2e       	mov	r0, r31
    2018:	f7 ed       	ldi	r31, 0xD7	; 215
    201a:	2f 2e       	mov	r2, r31
    201c:	f1 e0       	ldi	r31, 0x01	; 1
    201e:	3f 2e       	mov	r3, r31
    2020:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    2022:	44 ee       	ldi	r20, 0xE4	; 228
    2024:	51 e0       	ldi	r21, 0x01	; 1
    2026:	5a ab       	sts	0x5a, r21
    2028:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    202a:	0f 2e       	mov	r0, r31
    202c:	fd ed       	ldi	r31, 0xDD	; 221
    202e:	6f 2e       	mov	r6, r31
    2030:	f1 e0       	ldi	r31, 0x01	; 1
    2032:	7f 2e       	mov	r7, r31
    2034:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    2036:	0a e2       	ldi	r16, 0x2A	; 42
    2038:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    203a:	cc 24       	eor	r12, r12
    203c:	68 94       	set
    203e:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    2040:	ee 24       	eor	r14, r14
    2042:	68 94       	set
    2044:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    2046:	c3 01       	movw	r24, r6
    2048:	b2 01       	movw	r22, r4
    204a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    204e:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2050:	ed ed       	ldi	r30, 0xDD	; 221
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	80 64       	ori	r24, 0x40	; 64
    2058:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    205a:	80 81       	ld	r24, Z
    205c:	8f 7b       	andi	r24, 0xBF	; 191
    205e:	80 83       	st	Z, r24
		DATA_BUS = 0;
    2060:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    2062:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	80 93 77 03 	sts	0x0377, r24
		
		compare_match_counter = 0;	
    206a:	10 92 72 03 	sts	0x0372, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    206e:	8c 2d       	mov	r24, r12
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	24 e6       	ldi	r18, 0x64	; 100
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	82 9f       	mul	r24, r18
    2078:	d0 01       	movw	r26, r0
    207a:	83 9f       	mul	r24, r19
    207c:	b0 0d       	add	r27, r0
    207e:	92 9f       	mul	r25, r18
    2080:	b0 0d       	add	r27, r0
    2082:	11 24       	eor	r1, r1
    2084:	bc ab       	sts	0x5c, r27
    2086:	ab ab       	sts	0x5b, r26
    2088:	fe 01       	movw	r30, r28
    208a:	31 96       	adiw	r30, 0x01	; 1
    208c:	fc af       	sts	0x7c, r31
    208e:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    2090:	98 01       	movw	r18, r16
    2092:	2e 5f       	subi	r18, 0xFE	; 254
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	21 96       	adiw	r28, 0x01	; 1
    2098:	3f af       	sts	0x7f, r19
    209a:	2e af       	sts	0x7e, r18
    209c:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    209e:	1e ae       	sts	0xbe, r17
    20a0:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    20a2:	0f 2e       	mov	r0, r31
    20a4:	f8 ed       	ldi	r31, 0xD8	; 216
    20a6:	ef 2e       	mov	r14, r31
    20a8:	f1 e0       	ldi	r31, 0x01	; 1
    20aa:	ff 2e       	mov	r15, r31
    20ac:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    20ae:	0f 2e       	mov	r0, r31
    20b0:	f4 ed       	ldi	r31, 0xD4	; 212
    20b2:	cf 2e       	mov	r12, r31
    20b4:	f1 e0       	ldi	r31, 0x01	; 1
    20b6:	df 2e       	mov	r13, r31
    20b8:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    20ba:	0f 2e       	mov	r0, r31
    20bc:	fa ec       	ldi	r31, 0xCA	; 202
    20be:	af 2e       	mov	r10, r31
    20c0:	f1 e0       	ldi	r31, 0x01	; 1
    20c2:	bf 2e       	mov	r11, r31
    20c4:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    20c6:	eb ad       	sts	0x6b, r30
    20c8:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    20ca:	80 81       	ld	r24, Z
    20cc:	80 93 77 03 	sts	0x0377, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    20d0:	84 b5       	in	r24, 0x24	; 36
    20d2:	8f 60       	ori	r24, 0x0F	; 15
    20d4:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    20da:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    20dc:	4d ad       	sts	0x6d, r20
    20de:	5e ad       	sts	0x6e, r21
    20e0:	43 30       	cpi	r20, 0x03	; 3
    20e2:	51 05       	cpc	r21, r1
    20e4:	24 f4       	brge	.+8      	; 0x20ee <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	80 93 76 03 	sts	0x0376, r24
    20ec:	03 c0       	rjmp	.+6      	; 0x20f4 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    20ee:	82 e0       	ldi	r24, 0x02	; 2
    20f0:	80 93 76 03 	sts	0x0376, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    20f4:	81 81       	ldd	r24, Z+1	; 0x01
    20f6:	92 81       	ldd	r25, Z+2	; 0x02
    20f8:	9a af       	sts	0x7a, r25
    20fa:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    20fc:	ad e0       	ldi	r26, 0x0D	; 13
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	be ab       	sts	0x5e, r27
    2102:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    2104:	00 e0       	ldi	r16, 0x00	; 0
    2106:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2108:	e1 e0       	ldi	r30, 0x01	; 1
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	0d a8       	sts	0x8d, r16
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <tune_8ths+0x1a8>
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	0a 94       	dec	r0
    2116:	e2 f7       	brpl	.-8      	; 0x2110 <tune_8ths+0x1a4>
    2118:	f8 af       	sts	0x78, r31
    211a:	ef ab       	sts	0x5f, r30
    211c:	0e 2b       	or	r16, r30
    211e:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    2120:	ae e6       	ldi	r26, 0x6E	; 110
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	8c 91       	ld	r24, X
    2126:	8d 7f       	andi	r24, 0xFD	; 253
    2128:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    212a:	c4 01       	movw	r24, r8
    212c:	b8 01       	movw	r22, r16
    212e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
    2132:	e3 ef       	ldi	r30, 0xF3	; 243
    2134:	f1 e0       	ldi	r31, 0x01	; 1
    2136:	31 97       	sbiw	r30, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <tune_8ths+0x1ca>
    213a:	00 c0       	rjmp	.+0      	; 0x213c <tune_8ths+0x1d0>
    213c:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    213e:	ae e6       	ldi	r26, 0x6E	; 110
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	8c 91       	ld	r24, X
    2144:	82 60       	ori	r24, 0x02	; 2
    2146:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    2148:	10 92 75 03 	sts	0x0375, r1
				period_counter = 0;
    214c:	10 92 78 03 	sts	0x0378, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    2150:	e8 e1       	ldi	r30, 0x18	; 24
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	2f e0       	ldi	r18, 0x0F	; 15
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	a8 95       	wdr
    215c:	e0 93 60 00 	sts	0x0060, r30
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    2166:	80 91 75 03 	lds	r24, 0x0375
    216a:	88 23       	and	r24, r24
    216c:	81 f5       	brne	.+96     	; 0x21ce <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    216e:	80 91 77 03 	lds	r24, 0x0377
    2172:	4b a9       	sts	0x4b, r20
    2174:	5c a9       	sts	0x4c, r21
    2176:	48 0f       	add	r20, r24
    2178:	51 1d       	adc	r21, r1
    217a:	ca 01       	movw	r24, r20
    217c:	60 e0       	ldi	r22, 0x00	; 0
    217e:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    2182:	c3 01       	movw	r24, r6
    2184:	b2 01       	movw	r22, r4
    2186:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    218a:	c4 01       	movw	r24, r8
    218c:	b8 01       	movw	r22, r16
    218e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2192:	c7 01       	movw	r24, r14
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	70 e0       	ldi	r23, 0x00	; 0
    2198:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    219c:	c6 01       	movw	r24, r12
    219e:	6f ef       	ldi	r22, 0xFF	; 255
    21a0:	7f e3       	ldi	r23, 0x3F	; 63
    21a2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    21a6:	c5 01       	movw	r24, r10
    21a8:	6f ef       	ldi	r22, 0xFF	; 255
    21aa:	7f e3       	ldi	r23, 0x3F	; 63
    21ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    21b0:	c1 01       	movw	r24, r2
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	70 e2       	ldi	r23, 0x20	; 32
    21b6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    21ba:	89 a9       	sts	0x49, r24
    21bc:	9a a9       	sts	0x4a, r25
    21be:	6f ef       	ldi	r22, 0xFF	; 255
    21c0:	7f e3       	ldi	r23, 0x3F	; 63
    21c2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    21c6:	80 91 75 03 	lds	r24, 0x0375
    21ca:	88 23       	and	r24, r24
    21cc:	81 f2       	breq	.-96     	; 0x216e <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    21ce:	58 e1       	ldi	r21, 0x18	; 24
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	50 93 60 00 	sts	0x0060, r21
    21d8:	10 92 60 00 	sts	0x0060, r1
    21dc:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    21de:	80 91 73 03 	lds	r24, 0x0373
    21e2:	90 91 74 03 	lds	r25, 0x0374
    21e6:	a9 ad       	sts	0x69, r26
    21e8:	ba ad       	sts	0x6a, r27
    21ea:	a8 17       	cp	r26, r24
    21ec:	b9 07       	cpc	r27, r25
    21ee:	50 f0       	brcs	.+20     	; 0x2204 <tune_8ths+0x298>
    21f0:	80 91 af 02 	lds	r24, 0x02AF
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	31 f4       	brne	.+12     	; 0x2204 <tune_8ths+0x298>
    21f8:	8f a9       	sts	0x4f, r24
    21fa:	98 ad       	sts	0x68, r25
    21fc:	80 95       	com	r24
    21fe:	90 95       	com	r25
    2200:	08 23       	and	r16, r24
    2202:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2204:	80 91 73 03 	lds	r24, 0x0373
    2208:	90 91 74 03 	lds	r25, 0x0374
    220c:	e9 ad       	sts	0x69, r30
    220e:	fa ad       	sts	0x6a, r31
    2210:	8e 17       	cp	r24, r30
    2212:	9f 07       	cpc	r25, r31
    2214:	21 f4       	brne	.+8      	; 0x221e <tune_8ths+0x2b2>
    2216:	80 91 af 02 	lds	r24, 0x02AF
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	71 f0       	breq	.+28     	; 0x223a <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    221e:	f1 e0       	ldi	r31, 0x01	; 1
    2220:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2224:	2d a9       	sts	0x4d, r18
    2226:	3e a9       	sts	0x4e, r19
    2228:	21 50       	subi	r18, 0x01	; 1
    222a:	30 40       	sbci	r19, 0x00	; 0
    222c:	3e ab       	sts	0x5e, r19
    222e:	2d ab       	sts	0x5d, r18
    2230:	4f ef       	ldi	r20, 0xFF	; 255
    2232:	2f 3f       	cpi	r18, 0xFF	; 255
    2234:	34 07       	cpc	r19, r20
    2236:	09 f0       	breq	.+2      	; 0x223a <tune_8ths+0x2ce>
    2238:	67 cf       	rjmp	.-306    	; 0x2108 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    223a:	21 96       	adiw	r28, 0x01	; 1
    223c:	ae ad       	sts	0x6e, r26
    223e:	bf ad       	sts	0x6f, r27
    2240:	21 97       	sbiw	r28, 0x01	; 1
    2242:	0d 93       	st	X+, r16
    2244:	1d 93       	st	X+, r17
    2246:	21 96       	adiw	r28, 0x01	; 1
    2248:	bf af       	sts	0x7f, r27
    224a:	ae af       	sts	0x7e, r26
    224c:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    224e:	ee e6       	ldi	r30, 0x6E	; 110
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	8d 7f       	andi	r24, 0xFD	; 253
    2256:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    2258:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    225a:	2d ad       	sts	0x6d, r18
    225c:	3e ad       	sts	0x6e, r19
    225e:	2f 5f       	subi	r18, 0xFF	; 255
    2260:	3f 4f       	sbci	r19, 0xFF	; 255
    2262:	3e af       	sts	0x7e, r19
    2264:	2d af       	sts	0x7d, r18
    2266:	4b ad       	sts	0x6b, r20
    2268:	5c ad       	sts	0x6c, r21
    226a:	4d 5f       	subi	r20, 0xFD	; 253
    226c:	5f 4f       	sbci	r21, 0xFF	; 255
    226e:	5c af       	sts	0x7c, r21
    2270:	4b af       	sts	0x7b, r20
    2272:	20 31       	cpi	r18, 0x10	; 16
    2274:	31 05       	cpc	r19, r1
    2276:	09 f0       	breq	.+2      	; 0x227a <tune_8ths+0x30e>
    2278:	26 cf       	rjmp	.-436    	; 0x20c6 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    227a:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    227c:	c0 5c       	subi	r28, 0xC0	; 192
    227e:	df 4f       	sbci	r29, 0xFF	; 255
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	1f 91       	pop	r17
    2290:	0f 91       	pop	r16
    2292:	ff 90       	pop	r15
    2294:	ef 90       	pop	r14
    2296:	df 90       	pop	r13
    2298:	cf 90       	pop	r12
    229a:	bf 90       	pop	r11
    229c:	af 90       	pop	r10
    229e:	9f 90       	pop	r9
    22a0:	8f 90       	pop	r8
    22a2:	7f 90       	pop	r7
    22a4:	6f 90       	pop	r6
    22a6:	5f 90       	pop	r5
    22a8:	4f 90       	pop	r4
    22aa:	3f 90       	pop	r3
    22ac:	2f 90       	pop	r2
    22ae:	08 95       	ret

000022b0 <tune_filter>:
	
void tune_filter(void) {
    22b0:	2f 92       	push	r2
    22b2:	3f 92       	push	r3
    22b4:	4f 92       	push	r4
    22b6:	5f 92       	push	r5
    22b8:	6f 92       	push	r6
    22ba:	7f 92       	push	r7
    22bc:	8f 92       	push	r8
    22be:	9f 92       	push	r9
    22c0:	af 92       	push	r10
    22c2:	bf 92       	push	r11
    22c4:	cf 92       	push	r12
    22c6:	df 92       	push	r13
    22c8:	ef 92       	push	r14
    22ca:	ff 92       	push	r15
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	e9 97       	sbiw	r28, 0x39	; 57
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    22e4:	de 01       	movw	r26, r28
    22e6:	11 96       	adiw	r26, 0x01	; 1
    22e8:	e0 e6       	ldi	r30, 0x60	; 96
    22ea:	f2 e0       	ldi	r31, 0x02	; 2
    22ec:	8d e2       	ldi	r24, 0x2D	; 45
    22ee:	01 90       	ld	r0, Z+
    22f0:	0d 92       	st	X+, r0
    22f2:	81 50       	subi	r24, 0x01	; 1
    22f4:	e1 f7       	brne	.-8      	; 0x22ee <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    22f6:	88 ed       	ldi	r24, 0xD8	; 216
    22f8:	91 e0       	ldi	r25, 0x01	; 1
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2302:	81 ee       	ldi	r24, 0xE1	; 225
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	70 e0       	ldi	r23, 0x00	; 0
    230a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    230e:	82 ee       	ldi	r24, 0xE2	; 226
    2310:	91 e0       	ldi	r25, 0x01	; 1
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	70 e0       	ldi	r23, 0x00	; 0
    2316:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    231a:	82 eb       	ldi	r24, 0xB2	; 178
    231c:	92 e0       	ldi	r25, 0x02	; 2
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2326:	8a ed       	ldi	r24, 0xDA	; 218
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	60 e0       	ldi	r22, 0x00	; 0
    232c:	70 e0       	ldi	r23, 0x00	; 0
    232e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    2332:	8f ed       	ldi	r24, 0xDF	; 223
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	60 e0       	ldi	r22, 0x00	; 0
    2338:	70 e0       	ldi	r23, 0x00	; 0
    233a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    233e:	80 ee       	ldi	r24, 0xE0	; 224
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    234a:	81 ed       	ldi	r24, 0xD1	; 209
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2356:	86 ed       	ldi	r24, 0xD6	; 214
    2358:	91 e0       	ldi	r25, 0x01	; 1
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    2362:	82 ed       	ldi	r24, 0xD2	; 210
    2364:	91 e0       	ldi	r25, 0x01	; 1
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    236e:	83 ed       	ldi	r24, 0xD3	; 211
    2370:	91 e0       	ldi	r25, 0x01	; 1
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	70 e0       	ldi	r23, 0x00	; 0
    2376:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    237a:	84 ed       	ldi	r24, 0xD4	; 212
    237c:	91 e0       	ldi	r25, 0x01	; 1
    237e:	6f ef       	ldi	r22, 0xFF	; 255
    2380:	7f e3       	ldi	r23, 0x3F	; 63
    2382:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    2386:	85 ed       	ldi	r24, 0xD5	; 213
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	6f ef       	ldi	r22, 0xFF	; 255
    238c:	7f e3       	ldi	r23, 0x3F	; 63
    238e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    2392:	89 ed       	ldi	r24, 0xD9	; 217
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	70 e0       	ldi	r23, 0x00	; 0
    239a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    239e:	8e ec       	ldi	r24, 0xCE	; 206
    23a0:	91 e0       	ldi	r25, 0x01	; 1
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	70 e0       	ldi	r23, 0x00	; 0
    23a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    23aa:	8c ec       	ldi	r24, 0xCC	; 204
    23ac:	91 e0       	ldi	r25, 0x01	; 1
    23ae:	60 e0       	ldi	r22, 0x00	; 0
    23b0:	70 e0       	ldi	r23, 0x00	; 0
    23b2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    23b6:	8a ec       	ldi	r24, 0xCA	; 202
    23b8:	91 e0       	ldi	r25, 0x01	; 1
    23ba:	6f ef       	ldi	r22, 0xFF	; 255
    23bc:	7f e3       	ldi	r23, 0x3F	; 63
    23be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    23c2:	88 ec       	ldi	r24, 0xC8	; 200
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    23ce:	80 ed       	ldi	r24, 0xD0	; 208
    23d0:	91 e0       	ldi	r25, 0x01	; 1
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	70 e0       	ldi	r23, 0x00	; 0
    23d6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    23da:	83 ee       	ldi	r24, 0xE3	; 227
    23dc:	91 e0       	ldi	r25, 0x01	; 1
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    23e6:	84 ee       	ldi	r24, 0xE4	; 228
    23e8:	91 e0       	ldi	r25, 0x01	; 1
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	70 e0       	ldi	r23, 0x00	; 0
    23ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    23f2:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    23f4:	ed ed       	ldi	r30, 0xDD	; 221
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	80 64       	ori	r24, 0x40	; 64
    23fc:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    23fe:	80 81       	ld	r24, Z
    2400:	8f 7b       	andi	r24, 0xBF	; 191
    2402:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	80 93 77 03 	sts	0x0377, r24
	PORTF |= (1<<GATE); //turn gate on
    240a:	89 9a       	sbi	0x11, 1	; 17
    240c:	9e 01       	movw	r18, r28
    240e:	2f 5f       	subi	r18, 0xFF	; 255
    2410:	3f 4f       	sbci	r19, 0xFF	; 255
    2412:	3d ab       	sts	0x5d, r19
    2414:	2c ab       	sts	0x5c, r18
    2416:	8c e0       	ldi	r24, 0x0C	; 12
    2418:	93 e0       	ldi	r25, 0x03	; 3
    241a:	99 af       	sts	0x79, r25
    241c:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    241e:	1f aa       	sts	0x9f, r17
    2420:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    2422:	0f 2e       	mov	r0, r31
    2424:	f4 ed       	ldi	r31, 0xD4	; 212
    2426:	af 2e       	mov	r10, r31
    2428:	f1 e0       	ldi	r31, 0x01	; 1
    242a:	bf 2e       	mov	r11, r31
    242c:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    242e:	0f 2e       	mov	r0, r31
    2430:	f8 ed       	ldi	r31, 0xD8	; 216
    2432:	6f 2e       	mov	r6, r31
    2434:	f1 e0       	ldi	r31, 0x01	; 1
    2436:	7f 2e       	mov	r7, r31
    2438:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    243a:	0f 2e       	mov	r0, r31
    243c:	f5 ed       	ldi	r31, 0xD5	; 213
    243e:	4f 2e       	mov	r4, r31
    2440:	f1 e0       	ldi	r31, 0x01	; 1
    2442:	5f 2e       	mov	r5, r31
    2444:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    2446:	0f 2e       	mov	r0, r31
    2448:	fa ec       	ldi	r31, 0xCA	; 202
    244a:	2f 2e       	mov	r2, r31
    244c:	f1 e0       	ldi	r31, 0x01	; 1
    244e:	3f 2e       	mov	r3, r31
    2450:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    2452:	ac a9       	sts	0x4c, r26
    2454:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    2456:	8c 91       	ld	r24, X
    2458:	80 93 77 03 	sts	0x0377, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    245c:	84 b5       	in	r24, 0x24	; 36
    245e:	8f 60       	ori	r24, 0x0F	; 15
    2460:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2466:	ee e6       	ldi	r30, 0x6E	; 110
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	82 60       	ori	r24, 0x02	; 2
    246e:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    2470:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    2472:	ee a9       	sts	0x4e, r30
    2474:	ff a9       	sts	0x4f, r31
    2476:	e2 30       	cpi	r30, 0x02	; 2
    2478:	f1 05       	cpc	r31, r1
    247a:	24 f4       	brge	.+8      	; 0x2484 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    247c:	83 e0       	ldi	r24, 0x03	; 3
    247e:	80 93 76 03 	sts	0x0376, r24
    2482:	03 c0       	rjmp	.+6      	; 0x248a <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    2484:	82 e0       	ldi	r24, 0x02	; 2
    2486:	80 93 76 03 	sts	0x0376, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    248a:	11 96       	adiw	r26, 0x01	; 1
    248c:	2d 91       	ld	r18, X+
    248e:	3c 91       	ld	r19, X
    2490:	12 97       	sbiw	r26, 0x02	; 2
    2492:	3b ab       	sts	0x5b, r19
    2494:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2496:	8d e0       	ldi	r24, 0x0D	; 13
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9f a7       	lds	r25, 0x7f
    249c:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    249e:	ee 24       	eor	r14, r14
    24a0:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    24a2:	0f 2e       	mov	r0, r31
    24a4:	f1 ed       	ldi	r31, 0xD1	; 209
    24a6:	cf 2e       	mov	r12, r31
    24a8:	f1 e0       	ldi	r31, 0x01	; 1
    24aa:	df 2e       	mov	r13, r31
    24ac:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    24ae:	0f 2e       	mov	r0, r31
    24b0:	f6 ed       	ldi	r31, 0xD6	; 214
    24b2:	8f 2e       	mov	r8, r31
    24b4:	f1 e0       	ldi	r31, 0x01	; 1
    24b6:	9f 2e       	mov	r9, r31
    24b8:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	fc 01       	movw	r30, r24
    24c0:	0e a4       	lds	r16, 0xae
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <tune_filter+0x218>
    24c4:	ee 0f       	add	r30, r30
    24c6:	ff 1f       	adc	r31, r31
    24c8:	0a 94       	dec	r0
    24ca:	e2 f7       	brpl	.-8      	; 0x24c4 <tune_filter+0x214>
    24cc:	f9 ab       	sts	0x59, r31
    24ce:	e8 ab       	sts	0x58, r30
    24d0:	ee 2a       	or	r14, r30
    24d2:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    24d4:	c5 01       	movw	r24, r10
    24d6:	b7 01       	movw	r22, r14
    24d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
    24dc:	10 92 75 03 	sts	0x0375, r1
			period_counter = 0;
    24e0:	10 92 78 03 	sts	0x0378, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    24e4:	8f e0       	ldi	r24, 0x0F	; 15
    24e6:	28 e1       	ldi	r18, 0x18	; 24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	a8 95       	wdr
    24f0:	20 93 60 00 	sts	0x0060, r18
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    24fa:	80 91 75 03 	lds	r24, 0x0375
    24fe:	88 23       	and	r24, r24
    2500:	b1 f5       	brne	.+108    	; 0x256e <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    2502:	02 ed       	ldi	r16, 0xD2	; 210
    2504:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2506:	80 91 77 03 	lds	r24, 0x0377
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	84 5d       	subi	r24, 0xD4	; 212
    250e:	9e 4f       	sbci	r25, 0xFE	; 254
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2516:	c5 01       	movw	r24, r10
    2518:	b7 01       	movw	r22, r14
    251a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    251e:	c3 01       	movw	r24, r6
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	70 e0       	ldi	r23, 0x00	; 0
    2524:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2528:	c2 01       	movw	r24, r4
    252a:	6f ef       	ldi	r22, 0xFF	; 255
    252c:	7f e3       	ldi	r23, 0x3F	; 63
    252e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    2532:	c1 01       	movw	r24, r2
    2534:	6f ef       	ldi	r22, 0xFF	; 255
    2536:	7f e3       	ldi	r23, 0x3F	; 63
    2538:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    253c:	8e ec       	ldi	r24, 0xCE	; 206
    253e:	91 e0       	ldi	r25, 0x01	; 1
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	70 e0       	ldi	r23, 0x00	; 0
    2544:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2548:	c6 01       	movw	r24, r12
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    2552:	c4 01       	movw	r24, r8
    2554:	60 e0       	ldi	r22, 0x00	; 0
    2556:	70 e0       	ldi	r23, 0x00	; 0
    2558:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    255c:	c8 01       	movw	r24, r16
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    2566:	80 91 75 03 	lds	r24, 0x0375
    256a:	88 23       	and	r24, r24
    256c:	61 f2       	breq	.-104    	; 0x2506 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    256e:	88 e1       	ldi	r24, 0x18	; 24
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	80 93 60 00 	sts	0x0060, r24
    2578:	10 92 60 00 	sts	0x0060, r1
    257c:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    257e:	80 91 73 03 	lds	r24, 0x0373
    2582:	90 91 74 03 	lds	r25, 0x0374
    2586:	2a a9       	sts	0x4a, r18
    2588:	3b a9       	sts	0x4b, r19
    258a:	28 17       	cp	r18, r24
    258c:	39 07       	cpc	r19, r25
    258e:	50 f0       	brcs	.+20     	; 0x25a4 <tune_filter+0x2f4>
    2590:	80 91 af 02 	lds	r24, 0x02AF
    2594:	81 30       	cpi	r24, 0x01	; 1
    2596:	31 f4       	brne	.+12     	; 0x25a4 <tune_filter+0x2f4>
    2598:	88 a9       	sts	0x48, r24
    259a:	99 a9       	sts	0x49, r25
    259c:	80 95       	com	r24
    259e:	90 95       	com	r25
    25a0:	e8 22       	and	r14, r24
    25a2:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    25a4:	80 91 73 03 	lds	r24, 0x0373
    25a8:	90 91 74 03 	lds	r25, 0x0374
    25ac:	ea a9       	sts	0x4a, r30
    25ae:	fb a9       	sts	0x4b, r31
    25b0:	8e 17       	cp	r24, r30
    25b2:	9f 07       	cpc	r25, r31
    25b4:	21 f4       	brne	.+8      	; 0x25be <tune_filter+0x30e>
    25b6:	80 91 af 02 	lds	r24, 0x02AF
    25ba:	81 30       	cpi	r24, 0x01	; 1
    25bc:	71 f0       	breq	.+28     	; 0x25da <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    25c4:	2e a5       	lds	r18, 0x6e
    25c6:	3f a5       	lds	r19, 0x6f
    25c8:	21 50       	subi	r18, 0x01	; 1
    25ca:	30 40       	sbci	r19, 0x00	; 0
    25cc:	3f a7       	lds	r19, 0x7f
    25ce:	2e a7       	lds	r18, 0x7e
    25d0:	8f ef       	ldi	r24, 0xFF	; 255
    25d2:	2f 3f       	cpi	r18, 0xFF	; 255
    25d4:	38 07       	cpc	r19, r24
    25d6:	09 f0       	breq	.+2      	; 0x25da <tune_filter+0x32a>
    25d8:	70 cf       	rjmp	.-288    	; 0x24ba <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    25da:	ee a9       	sts	0x4e, r30
    25dc:	ff a9       	sts	0x4f, r31
    25de:	31 96       	adiw	r30, 0x01	; 1
    25e0:	ff ab       	sts	0x5f, r31
    25e2:	ee ab       	sts	0x5e, r30
    25e4:	c7 01       	movw	r24, r14
    25e6:	80 96       	adiw	r24, 0x20	; 32
    25e8:	e8 ad       	sts	0x68, r30
    25ea:	f9 ad       	sts	0x69, r31
    25ec:	81 93       	st	Z+, r24
    25ee:	91 93       	st	Z+, r25
    25f0:	f9 af       	sts	0x79, r31
    25f2:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    25f4:	ee e6       	ldi	r30, 0x6E	; 110
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	8d 7f       	andi	r24, 0xFD	; 253
    25fc:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    25fe:	14 bc       	out	0x24, r1	; 36
    2600:	2c a9       	sts	0x4c, r18
    2602:	3d a9       	sts	0x4d, r19
    2604:	2d 5f       	subi	r18, 0xFD	; 253
    2606:	3f 4f       	sbci	r19, 0xFF	; 255
    2608:	3d ab       	sts	0x5d, r19
    260a:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    260c:	8e a9       	sts	0x4e, r24
    260e:	9f a9       	sts	0x4f, r25
    2610:	8f 30       	cpi	r24, 0x0F	; 15
    2612:	91 05       	cpc	r25, r1
    2614:	09 f0       	breq	.+2      	; 0x2618 <tune_filter+0x368>
    2616:	1d cf       	rjmp	.-454    	; 0x2452 <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2618:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    261a:	e9 96       	adiw	r28, 0x39	; 57
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	df 90       	pop	r13
    2634:	cf 90       	pop	r12
    2636:	bf 90       	pop	r11
    2638:	af 90       	pop	r10
    263a:	9f 90       	pop	r9
    263c:	8f 90       	pop	r8
    263e:	7f 90       	pop	r7
    2640:	6f 90       	pop	r6
    2642:	5f 90       	pop	r5
    2644:	4f 90       	pop	r4
    2646:	3f 90       	pop	r3
    2648:	2f 90       	pop	r2
    264a:	08 95       	ret

0000264c <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    264c:	8a e0       	ldi	r24, 0x0A	; 10
    264e:	93 e0       	ldi	r25, 0x03	; 3
    2650:	6c e0       	ldi	r22, 0x0C	; 12
    2652:	76 e0       	ldi	r23, 0x06	; 6
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    265c:	8c e4       	ldi	r24, 0x4C	; 76
    265e:	93 e0       	ldi	r25, 0x03	; 3
    2660:	6e e4       	ldi	r22, 0x4E	; 78
    2662:	76 e0       	ldi	r23, 0x06	; 6
    2664:	42 e2       	ldi	r20, 0x22	; 34
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    266c:	8a e2       	ldi	r24, 0x2A	; 42
    266e:	93 e0       	ldi	r25, 0x03	; 3
    2670:	6c e2       	ldi	r22, 0x2C	; 44
    2672:	76 e0       	ldi	r23, 0x06	; 6
    2674:	42 e2       	ldi	r20, 0x22	; 34
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__eeupd_block_m6450a>
	
	
}
    267c:	08 95       	ret

0000267e <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    267e:	82 e7       	ldi	r24, 0x72	; 114
    2680:	96 e0       	ldi	r25, 0x06	; 6
    2682:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eerd_word_m6450a>
    2686:	90 93 71 03 	sts	0x0371, r25
    268a:	80 93 70 03 	sts	0x0370, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    268e:	80 e7       	ldi	r24, 0x70	; 112
    2690:	96 e0       	ldi	r25, 0x06	; 6
    2692:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eerd_word_m6450a>
    2696:	90 93 6f 03 	sts	0x036F, r25
    269a:	80 93 6e 03 	sts	0x036E, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    269e:	8c e4       	ldi	r24, 0x4C	; 76
    26a0:	93 e0       	ldi	r25, 0x03	; 3
    26a2:	6e e4       	ldi	r22, 0x4E	; 78
    26a4:	76 e0       	ldi	r23, 0x06	; 6
    26a6:	42 e2       	ldi	r20, 0x22	; 34
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    26ae:	8a e2       	ldi	r24, 0x2A	; 42
    26b0:	93 e0       	ldi	r25, 0x03	; 3
    26b2:	6c e2       	ldi	r22, 0x2C	; 44
    26b4:	76 e0       	ldi	r23, 0x06	; 6
    26b6:	42 e2       	ldi	r20, 0x22	; 34
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    26be:	8a e0       	ldi	r24, 0x0A	; 10
    26c0:	93 e0       	ldi	r25, 0x03	; 3
    26c2:	6c e0       	ldi	r22, 0x0C	; 12
    26c4:	76 e0       	ldi	r23, 0x06	; 6
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	50 e0       	ldi	r21, 0x00	; 0
    26ca:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    26ce:	08 95       	ret

000026d0 <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    26d0:	98 2f       	mov	r25, r24
    26d2:	96 95       	lsr	r25
    26d4:	96 95       	lsr	r25
    26d6:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    26d8:	29 2f       	mov	r18, r25
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	f9 01       	movw	r30, r18
    26de:	31 97       	sbiw	r30, 0x01	; 1
    26e0:	ee 0f       	add	r30, r30
    26e2:	ff 1f       	adc	r31, r31
    26e4:	e6 0f       	add	r30, r22
    26e6:	f7 1f       	adc	r31, r23
    26e8:	01 90       	ld	r0, Z+
    26ea:	f0 81       	ld	r31, Z
    26ec:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    26ee:	22 0f       	add	r18, r18
    26f0:	33 1f       	adc	r19, r19
    26f2:	26 0f       	add	r18, r22
    26f4:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    26f6:	d9 01       	movw	r26, r18
    26f8:	4d 91       	ld	r20, X+
    26fa:	5c 91       	ld	r21, X
    26fc:	11 97       	sbiw	r26, 0x01	; 1
    26fe:	4e 1b       	sub	r20, r30
    2700:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2702:	99 0f       	add	r25, r25
    2704:	99 0f       	add	r25, r25
    2706:	99 0f       	add	r25, r25
    2708:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	48 9f       	mul	r20, r24
    270e:	90 01       	movw	r18, r0
    2710:	49 9f       	mul	r20, r25
    2712:	30 0d       	add	r19, r0
    2714:	58 9f       	mul	r21, r24
    2716:	30 0d       	add	r19, r0
    2718:	11 24       	eor	r1, r1
    271a:	36 95       	lsr	r19
    271c:	27 95       	ror	r18
    271e:	36 95       	lsr	r19
    2720:	27 95       	ror	r18
    2722:	36 95       	lsr	r19
    2724:	27 95       	ror	r18
    2726:	e2 0f       	add	r30, r18
    2728:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    272a:	8e 2f       	mov	r24, r30
    272c:	9f 2f       	mov	r25, r31
    272e:	08 95       	ret

00002730 <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	a2 97       	sbiw	r28, 0x22	; 34
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2744:	de 01       	movw	r26, r28
    2746:	11 96       	adiw	r26, 0x01	; 1
    2748:	ed e8       	ldi	r30, 0x8D	; 141
    274a:	f2 e0       	ldi	r31, 0x02	; 2
    274c:	82 e2       	ldi	r24, 0x22	; 34
    274e:	01 90       	ld	r0, Z+
    2750:	0d 92       	st	X+, r0
    2752:	81 50       	subi	r24, 0x01	; 1
    2754:	e1 f7       	brne	.-8      	; 0x274e <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2756:	ac e4       	ldi	r26, 0x4C	; 76
    2758:	b3 e0       	ldi	r27, 0x03	; 3
    275a:	fe 01       	movw	r30, r28
    275c:	31 96       	adiw	r30, 0x01	; 1
    275e:	82 e2       	ldi	r24, 0x22	; 34
    2760:	01 90       	ld	r0, Z+
    2762:	0d 92       	st	X+, r0
    2764:	81 50       	subi	r24, 0x01	; 1
    2766:	e1 f7       	brne	.-8      	; 0x2760 <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2768:	aa e2       	ldi	r26, 0x2A	; 42
    276a:	b3 e0       	ldi	r27, 0x03	; 3
    276c:	fe 01       	movw	r30, r28
    276e:	31 96       	adiw	r30, 0x01	; 1
    2770:	82 e2       	ldi	r24, 0x22	; 34
    2772:	01 90       	ld	r0, Z+
    2774:	0d 92       	st	X+, r0
    2776:	81 50       	subi	r24, 0x01	; 1
    2778:	e1 f7       	brne	.-8      	; 0x2772 <set_one_volt_per_octave+0x42>
	
	
    277a:	a2 96       	adiw	r28, 0x22	; 34
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	08 95       	ret

0000278c <read_switch_port>:

uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    278c:	9f b1       	in	r25, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    278e:	89 2f       	mov	r24, r25
    2790:	8c 70       	andi	r24, 0x0C	; 12
    2792:	20 91 c1 02 	lds	r18, 0x02C1
    2796:	82 2b       	or	r24, r18
    2798:	80 93 c1 02 	sts	0x02C1, r24
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    279c:	80 91 7c 03 	lds	r24, 0x037C
    27a0:	98 27       	eor	r25, r24
	previous_port_state ^= current_port_state;
    27a2:	89 27       	eor	r24, r25
    27a4:	80 93 7c 03 	sts	0x037C, r24
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    27a8:	89 23       	and	r24, r25
    27aa:	08 95       	ret

000027ac <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    27ac:	ed ed       	ldi	r30, 0xDD	; 221
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	90 81       	ld	r25, Z
    27b2:	9f 7b       	andi	r25, 0xBF	; 191
    27b4:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	21 70       	andi	r18, 0x01	; 1
    27bc:	30 70       	andi	r19, 0x00	; 0
    27be:	22 0f       	add	r18, r18
    27c0:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    27c2:	68 2f       	mov	r22, r24
    27c4:	62 95       	swap	r22
    27c6:	66 95       	lsr	r22
    27c8:	67 70       	andi	r22, 0x07	; 7
    27ca:	67 95       	ror	r22
    27cc:	66 27       	eor	r22, r22
    27ce:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    27d0:	26 2b       	or	r18, r22
    27d2:	98 2f       	mov	r25, r24
    27d4:	96 95       	lsr	r25
    27d6:	96 95       	lsr	r25
    27d8:	91 70       	andi	r25, 0x01	; 1
    27da:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    27dc:	68 2f       	mov	r22, r24
    27de:	66 1f       	adc	r22, r22
    27e0:	66 27       	eor	r22, r22
    27e2:	66 1f       	adc	r22, r22
    27e4:	66 0f       	add	r22, r22
    27e6:	66 0f       	add	r22, r22
    27e8:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    27ea:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    27ec:	a8 2f       	mov	r26, r24
    27ee:	a6 95       	lsr	r26
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	a1 70       	andi	r26, 0x01	; 1
    27f4:	b0 70       	andi	r27, 0x00	; 0
    27f6:	bd 01       	movw	r22, r26
    27f8:	66 0f       	add	r22, r22
    27fa:	77 1f       	adc	r23, r23
    27fc:	66 0f       	add	r22, r22
    27fe:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2800:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2802:	68 2f       	mov	r22, r24
    2804:	62 95       	swap	r22
    2806:	6f 70       	andi	r22, 0x0F	; 15
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	61 70       	andi	r22, 0x01	; 1
    280c:	70 70       	andi	r23, 0x00	; 0
    280e:	ab 01       	movw	r20, r22
    2810:	00 24       	eor	r0, r0
    2812:	56 95       	lsr	r21
    2814:	47 95       	ror	r20
    2816:	07 94       	ror	r0
    2818:	56 95       	lsr	r21
    281a:	47 95       	ror	r20
    281c:	07 94       	ror	r0
    281e:	54 2f       	mov	r21, r20
    2820:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2822:	62 2f       	mov	r22, r18
    2824:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2826:	48 2f       	mov	r20, r24
    2828:	42 95       	swap	r20
    282a:	46 95       	lsr	r20
    282c:	46 95       	lsr	r20
    282e:	43 70       	andi	r20, 0x03	; 3
    2830:	50 e0       	ldi	r21, 0x00	; 0
    2832:	41 70       	andi	r20, 0x01	; 1
    2834:	50 70       	andi	r21, 0x00	; 0
    2836:	9a 01       	movw	r18, r20
    2838:	22 0f       	add	r18, r18
    283a:	33 1f       	adc	r19, r19
    283c:	22 95       	swap	r18
    283e:	32 95       	swap	r19
    2840:	30 7f       	andi	r19, 0xF0	; 240
    2842:	32 27       	eor	r19, r18
    2844:	20 7f       	andi	r18, 0xF0	; 240
    2846:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2848:	46 2f       	mov	r20, r22
    284a:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    284c:	86 95       	lsr	r24
    284e:	86 95       	lsr	r24
    2850:	86 95       	lsr	r24
    2852:	28 2f       	mov	r18, r24
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	21 70       	andi	r18, 0x01	; 1
    2858:	30 70       	andi	r19, 0x00	; 0
    285a:	c9 01       	movw	r24, r18
    285c:	82 95       	swap	r24
    285e:	92 95       	swap	r25
    2860:	90 7f       	andi	r25, 0xF0	; 240
    2862:	98 27       	eor	r25, r24
    2864:	80 7f       	andi	r24, 0xF0	; 240
    2866:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2868:	84 2b       	or	r24, r20
    286a:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    286c:	80 81       	ld	r24, Z
    286e:	80 64       	ori	r24, 0x40	; 64
    2870:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2872:	80 81       	ld	r24, Z
    2874:	8f 7b       	andi	r24, 0xBF	; 191
    2876:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2878:	12 b8       	out	0x02, r1	; 2
	
	
    287a:	08 95       	ret

0000287c <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    287c:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    287e:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2880:	74 83       	std	Z+4, r23	; 0x04
    2882:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2884:	11 82       	std	Z+1, r1	; 0x01
    2886:	10 82       	st	Z, r1
}
    2888:	08 95       	ret

0000288a <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    288a:	1f 93       	push	r17
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	ec 01       	movw	r28, r24
    2892:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2894:	0e 94 b4 14 	call	0x2968	; 0x2968 <store_and_clear_interrupt>
    2898:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    289a:	39 81       	ldd	r19, Y+1	; 0x01
    289c:	83 2f       	mov	r24, r19
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	6a 81       	ldd	r22, Y+2	; 0x02
    28a4:	70 e0       	ldi	r23, 0x00	; 0
    28a6:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__divmodhi4>
    28aa:	48 81       	ld	r20, Y
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	84 17       	cp	r24, r20
    28b0:	95 07       	cpc	r25, r21
    28b2:	29 f4       	brne	.+10     	; 0x28be <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    28b4:	82 2f       	mov	r24, r18
    28b6:	0e 94 b7 14 	call	0x296e	; 0x296e <restore_interrupt_setting>
      return false;
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	11 c0       	rjmp	.+34     	; 0x28e0 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    28be:	eb 81       	ldd	r30, Y+3	; 0x03
    28c0:	fc 81       	ldd	r31, Y+4	; 0x04
    28c2:	e3 0f       	add	r30, r19
    28c4:	f1 1d       	adc	r31, r1
    28c6:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	01 96       	adiw	r24, 0x01	; 1
    28ce:	6a 81       	ldd	r22, Y+2	; 0x02
    28d0:	70 e0       	ldi	r23, 0x00	; 0
    28d2:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__divmodhi4>
    28d6:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    28d8:	82 2f       	mov	r24, r18
    28da:	0e 94 b7 14 	call	0x296e	; 0x296e <restore_interrupt_setting>
      return true;
    28de:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	1f 91       	pop	r17
    28e6:	08 95       	ret

000028e8 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    28e8:	cf 93       	push	r28
    28ea:	df 93       	push	r29
    28ec:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    28ee:	0e 94 b4 14 	call	0x2968	; 0x2968 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    28f2:	29 81       	ldd	r18, Y+1	; 0x01
    28f4:	98 81       	ld	r25, Y
    28f6:	29 17       	cp	r18, r25
    28f8:	18 f0       	brcs	.+6      	; 0x2900 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    28fa:	c2 2f       	mov	r28, r18
    28fc:	c9 1b       	sub	r28, r25
    28fe:	03 c0       	rjmp	.+6      	; 0x2906 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2900:	ca 81       	ldd	r28, Y+2	; 0x02
    2902:	c2 0f       	add	r28, r18
    2904:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2906:	0e 94 b7 14 	call	0x296e	; 0x296e <restore_interrupt_setting>
   return len;
}
    290a:	8c 2f       	mov	r24, r28
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	08 95       	ret

00002912 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2912:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2914:	20 81       	ld	r18, Z
    2916:	86 2f       	mov	r24, r22
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	82 0f       	add	r24, r18
    291c:	91 1d       	adc	r25, r1
    291e:	62 81       	ldd	r22, Z+2	; 0x02
    2920:	70 e0       	ldi	r23, 0x00	; 0
    2922:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__divmodhi4>
    2926:	03 80       	ldd	r0, Z+3	; 0x03
    2928:	f4 81       	ldd	r31, Z+4	; 0x04
    292a:	e0 2d       	mov	r30, r0
    292c:	e8 0f       	add	r30, r24
    292e:	f9 1f       	adc	r31, r25
}
    2930:	80 81       	ld	r24, Z
    2932:	08 95       	ret

00002934 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	ec 01       	movw	r28, r24
    293c:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    293e:	0e 94 b4 14 	call	0x2968	; 0x2968 <store_and_clear_interrupt>
    2942:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2944:	88 81       	ld	r24, Y
    2946:	21 2f       	mov	r18, r17
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	28 0f       	add	r18, r24
    294c:	31 1d       	adc	r19, r1
    294e:	6a 81       	ldd	r22, Y+2	; 0x02
    2950:	c9 01       	movw	r24, r18
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__divmodhi4>
    2958:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    295a:	84 2f       	mov	r24, r20
    295c:	0e 94 b7 14 	call	0x296e	; 0x296e <restore_interrupt_setting>
}
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	1f 91       	pop	r17
    2966:	08 95       	ret

00002968 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2968:	8f b7       	in	r24, 0x3f	; 63
   cli();
    296a:	f8 94       	cli
   return sreg;
}
    296c:	08 95       	ret

0000296e <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    296e:	8f bf       	out	0x3f, r24	; 63
}
    2970:	08 95       	ret

00002972 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2972:	88 1f       	adc	r24, r24
    2974:	88 27       	eor	r24, r24
    2976:	88 1f       	adc	r24, r24
    2978:	08 95       	ret

0000297a <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    297a:	91 e0       	ldi	r25, 0x01	; 1
    297c:	88 3f       	cpi	r24, 0xF8	; 248
    297e:	08 f4       	brcc	.+2      	; 0x2982 <midi_is_realtime+0x8>
    2980:	90 e0       	ldi	r25, 0x00	; 0
}
    2982:	89 2f       	mov	r24, r25
    2984:	08 95       	ret

00002986 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	20 7f       	andi	r18, 0xF0	; 240
    298c:	30 70       	andi	r19, 0x00	; 0
    298e:	20 3c       	cpi	r18, 0xC0	; 192
    2990:	31 05       	cpc	r19, r1
    2992:	e9 f1       	breq	.+122    	; 0x2a0e <midi_packet_length+0x88>
    2994:	21 3c       	cpi	r18, 0xC1	; 193
    2996:	31 05       	cpc	r19, r1
    2998:	8c f4       	brge	.+34     	; 0x29bc <midi_packet_length+0x36>
    299a:	20 39       	cpi	r18, 0x90	; 144
    299c:	31 05       	cpc	r19, r1
    299e:	e1 f0       	breq	.+56     	; 0x29d8 <midi_packet_length+0x52>
    29a0:	21 39       	cpi	r18, 0x91	; 145
    29a2:	31 05       	cpc	r19, r1
    29a4:	24 f4       	brge	.+8      	; 0x29ae <midi_packet_length+0x28>
    29a6:	20 38       	cpi	r18, 0x80	; 128
    29a8:	31 05       	cpc	r19, r1
    29aa:	79 f5       	brne	.+94     	; 0x2a0a <midi_packet_length+0x84>
    29ac:	15 c0       	rjmp	.+42     	; 0x29d8 <midi_packet_length+0x52>
    29ae:	20 3a       	cpi	r18, 0xA0	; 160
    29b0:	31 05       	cpc	r19, r1
    29b2:	91 f0       	breq	.+36     	; 0x29d8 <midi_packet_length+0x52>
    29b4:	20 3b       	cpi	r18, 0xB0	; 176
    29b6:	31 05       	cpc	r19, r1
    29b8:	41 f5       	brne	.+80     	; 0x2a0a <midi_packet_length+0x84>
    29ba:	0e c0       	rjmp	.+28     	; 0x29d8 <midi_packet_length+0x52>
    29bc:	20 3e       	cpi	r18, 0xE0	; 224
    29be:	31 05       	cpc	r19, r1
    29c0:	59 f0       	breq	.+22     	; 0x29d8 <midi_packet_length+0x52>
    29c2:	21 3e       	cpi	r18, 0xE1	; 225
    29c4:	31 05       	cpc	r19, r1
    29c6:	24 f4       	brge	.+8      	; 0x29d0 <midi_packet_length+0x4a>
    29c8:	20 3d       	cpi	r18, 0xD0	; 208
    29ca:	31 05       	cpc	r19, r1
    29cc:	f1 f4       	brne	.+60     	; 0x2a0a <midi_packet_length+0x84>
    29ce:	1f c0       	rjmp	.+62     	; 0x2a0e <midi_packet_length+0x88>
    29d0:	20 3f       	cpi	r18, 0xF0	; 240
    29d2:	31 05       	cpc	r19, r1
    29d4:	d1 f4       	brne	.+52     	; 0x2a0a <midi_packet_length+0x84>
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    29d8:	83 e0       	ldi	r24, 0x03	; 3
    29da:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    29dc:	86 3f       	cpi	r24, 0xF6	; 246
    29de:	79 f0       	breq	.+30     	; 0x29fe <midi_packet_length+0x78>
    29e0:	87 3f       	cpi	r24, 0xF7	; 247
    29e2:	38 f4       	brcc	.+14     	; 0x29f2 <midi_packet_length+0x6c>
    29e4:	82 3f       	cpi	r24, 0xF2	; 242
    29e6:	a9 f0       	breq	.+42     	; 0x2a12 <midi_packet_length+0x8c>
    29e8:	83 3f       	cpi	r24, 0xF3	; 243
    29ea:	59 f0       	breq	.+22     	; 0x2a02 <midi_packet_length+0x7c>
    29ec:	81 3f       	cpi	r24, 0xF1	; 241
    29ee:	59 f4       	brne	.+22     	; 0x2a06 <midi_packet_length+0x80>
    29f0:	08 c0       	rjmp	.+16     	; 0x2a02 <midi_packet_length+0x7c>
    29f2:	88 3f       	cpi	r24, 0xF8	; 248
    29f4:	40 f0       	brcs	.+16     	; 0x2a06 <midi_packet_length+0x80>
    29f6:	8d 3f       	cpi	r24, 0xFD	; 253
    29f8:	10 f0       	brcs	.+4      	; 0x29fe <midi_packet_length+0x78>
    29fa:	8e 3f       	cpi	r24, 0xFE	; 254
    29fc:	20 f0       	brcs	.+8      	; 0x2a06 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2a0e:	82 e0       	ldi	r24, 0x02	; 2
    2a10:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2a12:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2a14:	08 95       	ret

00002a16 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2a16:	0f 93       	push	r16
    2a18:	34 2f       	mov	r19, r20
    2a1a:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2a1c:	46 2f       	mov	r20, r22
    2a1e:	4f 70       	andi	r20, 0x0F	; 15
    2a20:	40 6b       	ori	r20, 0xB0	; 176
    2a22:	23 2f       	mov	r18, r19
    2a24:	2f 77       	andi	r18, 0x7F	; 127
    2a26:	0f 77       	andi	r16, 0x7F	; 127
    2a28:	dc 01       	movw	r26, r24
    2a2a:	ed 91       	ld	r30, X+
    2a2c:	fc 91       	ld	r31, X
    2a2e:	63 e0       	ldi	r22, 0x03	; 3
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2a34:	0f 91       	pop	r16
    2a36:	08 95       	ret

00002a38 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2a38:	0f 93       	push	r16
    2a3a:	34 2f       	mov	r19, r20
    2a3c:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2a3e:	46 2f       	mov	r20, r22
    2a40:	4f 70       	andi	r20, 0x0F	; 15
    2a42:	40 69       	ori	r20, 0x90	; 144
    2a44:	23 2f       	mov	r18, r19
    2a46:	2f 77       	andi	r18, 0x7F	; 127
    2a48:	0f 77       	andi	r16, 0x7F	; 127
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	ed 91       	ld	r30, X+
    2a4e:	fc 91       	ld	r31, X
    2a50:	63 e0       	ldi	r22, 0x03	; 3
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2a56:	0f 91       	pop	r16
    2a58:	08 95       	ret

00002a5a <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2a5a:	0f 93       	push	r16
    2a5c:	34 2f       	mov	r19, r20
    2a5e:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2a60:	46 2f       	mov	r20, r22
    2a62:	4f 70       	andi	r20, 0x0F	; 15
    2a64:	40 68       	ori	r20, 0x80	; 128
    2a66:	23 2f       	mov	r18, r19
    2a68:	2f 77       	andi	r18, 0x7F	; 127
    2a6a:	0f 77       	andi	r16, 0x7F	; 127
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	ed 91       	ld	r30, X+
    2a70:	fc 91       	ld	r31, X
    2a72:	63 e0       	ldi	r22, 0x03	; 3
    2a74:	70 e0       	ldi	r23, 0x00	; 0
    2a76:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2a78:	0f 91       	pop	r16
    2a7a:	08 95       	ret

00002a7c <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2a7c:	0f 93       	push	r16
    2a7e:	34 2f       	mov	r19, r20
    2a80:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2a82:	46 2f       	mov	r20, r22
    2a84:	4f 70       	andi	r20, 0x0F	; 15
    2a86:	40 6a       	ori	r20, 0xA0	; 160
    2a88:	23 2f       	mov	r18, r19
    2a8a:	2f 77       	andi	r18, 0x7F	; 127
    2a8c:	0f 77       	andi	r16, 0x7F	; 127
    2a8e:	dc 01       	movw	r26, r24
    2a90:	ed 91       	ld	r30, X+
    2a92:	fc 91       	ld	r31, X
    2a94:	63 e0       	ldi	r22, 0x03	; 3
    2a96:	70 e0       	ldi	r23, 0x00	; 0
    2a98:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2a9a:	0f 91       	pop	r16
    2a9c:	08 95       	ret

00002a9e <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2aa2:	20 e2       	ldi	r18, 0x20	; 32
    2aa4:	40 30       	cpi	r20, 0x00	; 0
    2aa6:	52 07       	cpc	r21, r18
    2aa8:	44 f4       	brge	.+16     	; 0x2aba <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2aaa:	a0 ee       	ldi	r26, 0xE0	; 224
    2aac:	40 30       	cpi	r20, 0x00	; 0
    2aae:	5a 07       	cpc	r21, r26
    2ab0:	3c f0       	brlt	.+14     	; 0x2ac0 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2ab2:	8a 01       	movw	r16, r20
    2ab4:	00 50       	subi	r16, 0x00	; 0
    2ab6:	10 4e       	sbci	r17, 0xE0	; 224
    2ab8:	05 c0       	rjmp	.+10     	; 0x2ac4 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2aba:	0f ef       	ldi	r16, 0xFF	; 255
    2abc:	1f e3       	ldi	r17, 0x3F	; 63
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2ac0:	00 e0       	ldi	r16, 0x00	; 0
    2ac2:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2ac4:	46 2f       	mov	r20, r22
    2ac6:	4f 70       	andi	r20, 0x0F	; 15
    2ac8:	40 6e       	ori	r20, 0xE0	; 224
    2aca:	20 2f       	mov	r18, r16
    2acc:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2ace:	00 0f       	add	r16, r16
    2ad0:	01 2f       	mov	r16, r17
    2ad2:	00 1f       	adc	r16, r16
    2ad4:	11 0b       	sbc	r17, r17
    2ad6:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2ad8:	0f 77       	andi	r16, 0x7F	; 127
    2ada:	dc 01       	movw	r26, r24
    2adc:	ed 91       	ld	r30, X+
    2ade:	fc 91       	ld	r31, X
    2ae0:	63 e0       	ldi	r22, 0x03	; 3
    2ae2:	70 e0       	ldi	r23, 0x00	; 0
    2ae4:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	08 95       	ret

00002aec <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2aec:	0f 93       	push	r16
    2aee:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2af0:	46 2f       	mov	r20, r22
    2af2:	4f 70       	andi	r20, 0x0F	; 15
    2af4:	40 6c       	ori	r20, 0xC0	; 192
    2af6:	2f 77       	andi	r18, 0x7F	; 127
    2af8:	dc 01       	movw	r26, r24
    2afa:	ed 91       	ld	r30, X+
    2afc:	fc 91       	ld	r31, X
    2afe:	62 e0       	ldi	r22, 0x02	; 2
    2b00:	70 e0       	ldi	r23, 0x00	; 0
    2b02:	00 e0       	ldi	r16, 0x00	; 0
    2b04:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2b06:	0f 91       	pop	r16
    2b08:	08 95       	ret

00002b0a <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2b0a:	0f 93       	push	r16
    2b0c:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2b0e:	46 2f       	mov	r20, r22
    2b10:	4f 70       	andi	r20, 0x0F	; 15
    2b12:	40 6d       	ori	r20, 0xD0	; 208
    2b14:	2f 77       	andi	r18, 0x7F	; 127
    2b16:	dc 01       	movw	r26, r24
    2b18:	ed 91       	ld	r30, X+
    2b1a:	fc 91       	ld	r31, X
    2b1c:	62 e0       	ldi	r22, 0x02	; 2
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	00 e0       	ldi	r16, 0x00	; 0
    2b22:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2b24:	0f 91       	pop	r16
    2b26:	08 95       	ret

00002b28 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2b28:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	ed 91       	ld	r30, X+
    2b2e:	fc 91       	ld	r31, X
    2b30:	61 e0       	ldi	r22, 0x01	; 1
    2b32:	70 e0       	ldi	r23, 0x00	; 0
    2b34:	48 ef       	ldi	r20, 0xF8	; 248
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	00 e0       	ldi	r16, 0x00	; 0
    2b3a:	09 95       	icall
}
    2b3c:	0f 91       	pop	r16
    2b3e:	08 95       	ret

00002b40 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    2b40:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2b42:	dc 01       	movw	r26, r24
    2b44:	ed 91       	ld	r30, X+
    2b46:	fc 91       	ld	r31, X
    2b48:	61 e0       	ldi	r22, 0x01	; 1
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	49 ef       	ldi	r20, 0xF9	; 249
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	00 e0       	ldi	r16, 0x00	; 0
    2b52:	09 95       	icall
}
    2b54:	0f 91       	pop	r16
    2b56:	08 95       	ret

00002b58 <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2b58:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	ed 91       	ld	r30, X+
    2b5e:	fc 91       	ld	r31, X
    2b60:	61 e0       	ldi	r22, 0x01	; 1
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	4a ef       	ldi	r20, 0xFA	; 250
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	00 e0       	ldi	r16, 0x00	; 0
    2b6a:	09 95       	icall
}
    2b6c:	0f 91       	pop	r16
    2b6e:	08 95       	ret

00002b70 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    2b70:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    2b72:	dc 01       	movw	r26, r24
    2b74:	ed 91       	ld	r30, X+
    2b76:	fc 91       	ld	r31, X
    2b78:	61 e0       	ldi	r22, 0x01	; 1
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	4b ef       	ldi	r20, 0xFB	; 251
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	00 e0       	ldi	r16, 0x00	; 0
    2b82:	09 95       	icall
}
    2b84:	0f 91       	pop	r16
    2b86:	08 95       	ret

00002b88 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    2b88:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	ed 91       	ld	r30, X+
    2b8e:	fc 91       	ld	r31, X
    2b90:	61 e0       	ldi	r22, 0x01	; 1
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	4c ef       	ldi	r20, 0xFC	; 252
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	00 e0       	ldi	r16, 0x00	; 0
    2b9a:	09 95       	icall
}
    2b9c:	0f 91       	pop	r16
    2b9e:	08 95       	ret

00002ba0 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    2ba0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	ed 91       	ld	r30, X+
    2ba6:	fc 91       	ld	r31, X
    2ba8:	61 e0       	ldi	r22, 0x01	; 1
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	4e ef       	ldi	r20, 0xFE	; 254
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	00 e0       	ldi	r16, 0x00	; 0
    2bb2:	09 95       	icall
}
    2bb4:	0f 91       	pop	r16
    2bb6:	08 95       	ret

00002bb8 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2bb8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2bba:	dc 01       	movw	r26, r24
    2bbc:	ed 91       	ld	r30, X+
    2bbe:	fc 91       	ld	r31, X
    2bc0:	61 e0       	ldi	r22, 0x01	; 1
    2bc2:	70 e0       	ldi	r23, 0x00	; 0
    2bc4:	4f ef       	ldi	r20, 0xFF	; 255
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	00 e0       	ldi	r16, 0x00	; 0
    2bca:	09 95       	icall
}
    2bcc:	0f 91       	pop	r16
    2bce:	08 95       	ret

00002bd0 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    2bd0:	0f 93       	push	r16
   device->send_func(device, 2,
    2bd2:	26 2f       	mov	r18, r22
    2bd4:	2f 77       	andi	r18, 0x7F	; 127
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	ed 91       	ld	r30, X+
    2bda:	fc 91       	ld	r31, X
    2bdc:	62 e0       	ldi	r22, 0x02	; 2
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	41 ef       	ldi	r20, 0xF1	; 241
    2be2:	00 e0       	ldi	r16, 0x00	; 0
    2be4:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2be6:	0f 91       	pop	r16
    2be8:	08 95       	ret

00002bea <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2bea:	0f 93       	push	r16
    2bec:	1f 93       	push	r17
   device->send_func(device, 3,
    2bee:	26 2f       	mov	r18, r22
    2bf0:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2bf2:	8b 01       	movw	r16, r22
    2bf4:	00 0f       	add	r16, r16
    2bf6:	01 2f       	mov	r16, r17
    2bf8:	00 1f       	adc	r16, r16
    2bfa:	11 0b       	sbc	r17, r17
    2bfc:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2bfe:	0f 77       	andi	r16, 0x7F	; 127
    2c00:	dc 01       	movw	r26, r24
    2c02:	ed 91       	ld	r30, X+
    2c04:	fc 91       	ld	r31, X
    2c06:	63 e0       	ldi	r22, 0x03	; 3
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	42 ef       	ldi	r20, 0xF2	; 242
    2c0c:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	08 95       	ret

00002c14 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2c14:	0f 93       	push	r16
   device->send_func(device, 2,
    2c16:	26 2f       	mov	r18, r22
    2c18:	2f 77       	andi	r18, 0x7F	; 127
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	ed 91       	ld	r30, X+
    2c1e:	fc 91       	ld	r31, X
    2c20:	62 e0       	ldi	r22, 0x02	; 2
    2c22:	70 e0       	ldi	r23, 0x00	; 0
    2c24:	43 ef       	ldi	r20, 0xF3	; 243
    2c26:	00 e0       	ldi	r16, 0x00	; 0
    2c28:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2c2a:	0f 91       	pop	r16
    2c2c:	08 95       	ret

00002c2e <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2c2e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    2c30:	dc 01       	movw	r26, r24
    2c32:	ed 91       	ld	r30, X+
    2c34:	fc 91       	ld	r31, X
    2c36:	61 e0       	ldi	r22, 0x01	; 1
    2c38:	70 e0       	ldi	r23, 0x00	; 0
    2c3a:	46 ef       	ldi	r20, 0xF6	; 246
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	00 e0       	ldi	r16, 0x00	; 0
    2c40:	09 95       	icall
}
    2c42:	0f 91       	pop	r16
    2c44:	08 95       	ret

00002c46 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2c46:	0f 93       	push	r16
    2c48:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	ed 91       	ld	r30, X+
    2c4e:	fc 91       	ld	r31, X
    2c50:	61 e0       	ldi	r22, 0x01	; 1
    2c52:	70 e0       	ldi	r23, 0x00	; 0
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	00 e0       	ldi	r16, 0x00	; 0
    2c58:	09 95       	icall
}
    2c5a:	0f 91       	pop	r16
    2c5c:	08 95       	ret

00002c5e <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    2c5e:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    2c60:	dc 01       	movw	r26, r24
    2c62:	ed 91       	ld	r30, X+
    2c64:	fc 91       	ld	r31, X
    2c66:	09 95       	icall
}
    2c68:	0f 91       	pop	r16
    2c6a:	08 95       	ret

00002c6c <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2c6c:	6f 92       	push	r6
    2c6e:	7f 92       	push	r7
    2c70:	8f 92       	push	r8
    2c72:	9f 92       	push	r9
    2c74:	af 92       	push	r10
    2c76:	bf 92       	push	r11
    2c78:	cf 92       	push	r12
    2c7a:	df 92       	push	r13
    2c7c:	ef 92       	push	r14
    2c7e:	ff 92       	push	r15
    2c80:	0f 93       	push	r16
    2c82:	1f 93       	push	r17
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	00 d0       	rcall	.+0      	; 0x2c8a <midi_send_array+0x1e>
    2c8a:	0f 92       	push	r0
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	4c 01       	movw	r8, r24
    2c92:	6b 01       	movw	r12, r22
    2c94:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2c96:	61 15       	cp	r22, r1
    2c98:	71 05       	cpc	r23, r1
    2c9a:	41 f1       	breq	.+80     	; 0x2cec <midi_send_array+0x80>
    2c9c:	ee 24       	eor	r14, r14
    2c9e:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2ca0:	0f 2e       	mov	r0, r31
    2ca2:	f3 e0       	ldi	r31, 0x03	; 3
    2ca4:	6f 2e       	mov	r6, r31
    2ca6:	77 24       	eor	r7, r7
    2ca8:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2caa:	19 82       	std	Y+1, r1	; 0x01
    2cac:	1a 82       	std	Y+2, r1	; 0x02
    2cae:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2cb0:	86 01       	movw	r16, r12
    2cb2:	0e 19       	sub	r16, r14
    2cb4:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2cb6:	04 30       	cpi	r16, 0x04	; 4
    2cb8:	11 05       	cpc	r17, r1
    2cba:	08 f0       	brcs	.+2      	; 0x2cbe <midi_send_array+0x52>
    2cbc:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2cbe:	b5 01       	movw	r22, r10
    2cc0:	6e 0d       	add	r22, r14
    2cc2:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2cc4:	ce 01       	movw	r24, r28
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	40 2f       	mov	r20, r16
    2cca:	51 2f       	mov	r21, r17
    2ccc:	0e 94 3f 1b 	call	0x367e	; 0x367e <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2cd0:	c4 01       	movw	r24, r8
    2cd2:	b8 01       	movw	r22, r16
    2cd4:	49 81       	ldd	r20, Y+1	; 0x01
    2cd6:	2a 81       	ldd	r18, Y+2	; 0x02
    2cd8:	0b 81       	ldd	r16, Y+3	; 0x03
    2cda:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2cde:	83 e0       	ldi	r24, 0x03	; 3
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	e8 0e       	add	r14, r24
    2ce4:	f9 1e       	adc	r15, r25
    2ce6:	ec 14       	cp	r14, r12
    2ce8:	fd 04       	cpc	r15, r13
    2cea:	f8 f2       	brcs	.-66     	; 0x2caa <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	df 91       	pop	r29
    2cf4:	cf 91       	pop	r28
    2cf6:	1f 91       	pop	r17
    2cf8:	0f 91       	pop	r16
    2cfa:	ff 90       	pop	r15
    2cfc:	ef 90       	pop	r14
    2cfe:	df 90       	pop	r13
    2d00:	cf 90       	pop	r12
    2d02:	bf 90       	pop	r11
    2d04:	af 90       	pop	r10
    2d06:	9f 90       	pop	r9
    2d08:	8f 90       	pop	r8
    2d0a:	7f 90       	pop	r7
    2d0c:	6f 90       	pop	r6
    2d0e:	08 95       	ret

00002d10 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    2d10:	fc 01       	movw	r30, r24
    2d12:	73 83       	std	Z+3, r23	; 0x03
    2d14:	62 83       	std	Z+2, r22	; 0x02
}
    2d16:	08 95       	ret

00002d18 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2d18:	fc 01       	movw	r30, r24
    2d1a:	75 83       	std	Z+5, r23	; 0x05
    2d1c:	64 83       	std	Z+4, r22	; 0x04
}
    2d1e:	08 95       	ret

00002d20 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    2d20:	fc 01       	movw	r30, r24
    2d22:	77 83       	std	Z+7, r23	; 0x07
    2d24:	66 83       	std	Z+6, r22	; 0x06
}
    2d26:	08 95       	ret

00002d28 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2d28:	fc 01       	movw	r30, r24
    2d2a:	71 87       	std	Z+9, r23	; 0x09
    2d2c:	60 87       	std	Z+8, r22	; 0x08
}
    2d2e:	08 95       	ret

00002d30 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    2d30:	fc 01       	movw	r30, r24
    2d32:	73 87       	std	Z+11, r23	; 0x0b
    2d34:	62 87       	std	Z+10, r22	; 0x0a
}
    2d36:	08 95       	ret

00002d38 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2d38:	fc 01       	movw	r30, r24
    2d3a:	75 87       	std	Z+13, r23	; 0x0d
    2d3c:	64 87       	std	Z+12, r22	; 0x0c
}
    2d3e:	08 95       	ret

00002d40 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    2d40:	fc 01       	movw	r30, r24
    2d42:	77 87       	std	Z+15, r23	; 0x0f
    2d44:	66 87       	std	Z+14, r22	; 0x0e
}
    2d46:	08 95       	ret

00002d48 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2d48:	fc 01       	movw	r30, r24
    2d4a:	71 8b       	std	Z+17, r23	; 0x11
    2d4c:	60 8b       	std	Z+16, r22	; 0x10
}
    2d4e:	08 95       	ret

00002d50 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    2d50:	fc 01       	movw	r30, r24
    2d52:	73 8b       	std	Z+19, r23	; 0x13
    2d54:	62 8b       	std	Z+18, r22	; 0x12
}
    2d56:	08 95       	ret

00002d58 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    2d58:	fc 01       	movw	r30, r24
    2d5a:	75 8b       	std	Z+21, r23	; 0x15
    2d5c:	64 8b       	std	Z+20, r22	; 0x14
}
    2d5e:	08 95       	ret

00002d60 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    2d60:	fc 01       	movw	r30, r24
    2d62:	77 8b       	std	Z+23, r23	; 0x17
    2d64:	66 8b       	std	Z+22, r22	; 0x16
}
    2d66:	08 95       	ret

00002d68 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    2d68:	fc 01       	movw	r30, r24
    2d6a:	71 8f       	std	Z+25, r23	; 0x19
    2d6c:	60 8f       	std	Z+24, r22	; 0x18
}
    2d6e:	08 95       	ret

00002d70 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    2d70:	fc 01       	movw	r30, r24
    2d72:	73 8f       	std	Z+27, r23	; 0x1b
    2d74:	62 8f       	std	Z+26, r22	; 0x1a
}
    2d76:	08 95       	ret

00002d78 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    2d78:	fc 01       	movw	r30, r24
    2d7a:	75 8f       	std	Z+29, r23	; 0x1d
    2d7c:	64 8f       	std	Z+28, r22	; 0x1c
}
    2d7e:	08 95       	ret

00002d80 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    2d80:	fc 01       	movw	r30, r24
    2d82:	77 8f       	std	Z+31, r23	; 0x1f
    2d84:	66 8f       	std	Z+30, r22	; 0x1e
}
    2d86:	08 95       	ret

00002d88 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    2d8e:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    2d90:	1f a2       	lds	r17, 0x9f
    2d92:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    2d94:	bc 01       	movw	r22, r24
    2d96:	68 5d       	subi	r22, 0xD8	; 216
    2d98:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9a:	88 51       	subi	r24, 0x18	; 24
    2d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9e:	40 ec       	ldi	r20, 0xC0	; 192
    2da0:	0e 94 3e 14 	call	0x287c	; 0x287c <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    2da4:	1b 82       	std	Y+3, r1	; 0x03
    2da6:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    2da8:	1d 82       	std	Y+5, r1	; 0x05
    2daa:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    2dac:	1f 82       	std	Y+7, r1	; 0x07
    2dae:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    2db0:	19 86       	std	Y+9, r1	; 0x09
    2db2:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    2db4:	1b 86       	std	Y+11, r1	; 0x0b
    2db6:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    2db8:	1d 86       	std	Y+13, r1	; 0x0d
    2dba:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    2dbc:	1f 86       	std	Y+15, r1	; 0x0f
    2dbe:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    2dc0:	19 8a       	std	Y+17, r1	; 0x11
    2dc2:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    2dc4:	1b 8a       	std	Y+19, r1	; 0x13
    2dc6:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    2dc8:	1d 8a       	std	Y+21, r1	; 0x15
    2dca:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    2dcc:	1f 8a       	std	Y+23, r1	; 0x17
    2dce:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    2dd0:	19 8e       	std	Y+25, r1	; 0x19
    2dd2:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    2dd4:	1b 8e       	std	Y+27, r1	; 0x1b
    2dd6:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    2dd8:	1d 8e       	std	Y+29, r1	; 0x1d
    2dda:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    2ddc:	1f 8e       	std	Y+31, r1	; 0x1f
    2dde:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    2de0:	19 a2       	lds	r17, 0x99
    2de2:	18 a2       	lds	r17, 0x98
}
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	08 95       	ret

00002dea <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    2dea:	ef 92       	push	r14
    2dec:	ff 92       	push	r15
    2dee:	0f 93       	push	r16
    2df0:	1f 93       	push	r17
    2df2:	cf 93       	push	r28
    2df4:	df 93       	push	r29
    2df6:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2df8:	66 23       	and	r22, r22
    2dfa:	99 f0       	breq	.+38     	; 0x2e22 <midi_device_input+0x38>
    2dfc:	04 2f       	mov	r16, r20
    2dfe:	15 2f       	mov	r17, r21
    2e00:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    2e02:	0f 2e       	mov	r0, r31
    2e04:	f8 ee       	ldi	r31, 0xE8	; 232
    2e06:	ef 2e       	mov	r14, r31
    2e08:	ff 24       	eor	r15, r15
    2e0a:	f0 2d       	mov	r31, r0
    2e0c:	e8 0e       	add	r14, r24
    2e0e:	f9 1e       	adc	r15, r25
    2e10:	f8 01       	movw	r30, r16
    2e12:	61 91       	ld	r22, Z+
    2e14:	8f 01       	movw	r16, r30
    2e16:	c7 01       	movw	r24, r14
    2e18:	0e 94 45 14 	call	0x288a	; 0x288a <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    2e1c:	cf 5f       	subi	r28, 0xFF	; 255
    2e1e:	cd 17       	cp	r28, r29
    2e20:	b9 f7       	brne	.-18     	; 0x2e10 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    2e22:	df 91       	pop	r29
    2e24:	cf 91       	pop	r28
    2e26:	1f 91       	pop	r17
    2e28:	0f 91       	pop	r16
    2e2a:	ff 90       	pop	r15
    2e2c:	ef 90       	pop	r14
    2e2e:	08 95       	ret

00002e30 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    2e30:	fc 01       	movw	r30, r24
    2e32:	71 83       	std	Z+1, r23	; 0x01
    2e34:	60 83       	st	Z, r22
}
    2e36:	08 95       	ret

00002e38 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    2e38:	fc 01       	movw	r30, r24
    2e3a:	71 a3       	lds	r23, 0x51
    2e3c:	60 a3       	lds	r22, 0x50
}
    2e3e:	08 95       	ret

00002e40 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    2e40:	af 92       	push	r10
    2e42:	bf 92       	push	r11
    2e44:	cf 92       	push	r12
    2e46:	df 92       	push	r13
    2e48:	ef 92       	push	r14
    2e4a:	ff 92       	push	r15
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <midi_input_callbacks+0x16>
    2e56:	0f 92       	push	r0
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	6c 01       	movw	r12, r24
    2e5e:	5b 01       	movw	r10, r22
    2e60:	f4 2e       	mov	r15, r20
    2e62:	e2 2e       	mov	r14, r18
    2e64:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    2e66:	dc 01       	movw	r26, r24
    2e68:	95 96       	adiw	r26, 0x25	; 37
    2e6a:	8c 91       	ld	r24, X
    2e6c:	95 97       	sbiw	r26, 0x25	; 37
    2e6e:	84 30       	cpi	r24, 0x04	; 4
    2e70:	e9 f4       	brne	.+58     	; 0x2eac <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    2e72:	5a 96       	adiw	r26, 0x1a	; 26
    2e74:	ed 91       	ld	r30, X+
    2e76:	fc 91       	ld	r31, X
    2e78:	5b 97       	sbiw	r26, 0x1b	; 27
    2e7a:	30 97       	sbiw	r30, 0x00	; 0
    2e7c:	09 f4       	brne	.+2      	; 0x2e80 <midi_input_callbacks+0x40>
    2e7e:	ee c0       	rjmp	.+476    	; 0x305c <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    2e80:	cb 01       	movw	r24, r22
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	63 e0       	ldi	r22, 0x03	; 3
    2e86:	70 e0       	ldi	r23, 0x00	; 0
    2e88:	0e 94 18 1b 	call	0x3630	; 0x3630 <__udivmodhi4>
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	68 0f       	add	r22, r24
    2e94:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    2e96:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    2e98:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    2e9a:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    2e9c:	4a 2d       	mov	r20, r10
    2e9e:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    2ea0:	c6 01       	movw	r24, r12
    2ea2:	9e 01       	movw	r18, r28
    2ea4:	2f 5f       	subi	r18, 0xFF	; 255
    2ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea8:	09 95       	icall
    2eaa:	c8 c0       	rjmp	.+400    	; 0x303c <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    2eac:	62 30       	cpi	r22, 0x02	; 2
    2eae:	71 05       	cpc	r23, r1
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <midi_input_callbacks+0x74>
    2eb2:	5f c0       	rjmp	.+190    	; 0x2f72 <midi_input_callbacks+0x132>
    2eb4:	63 30       	cpi	r22, 0x03	; 3
    2eb6:	71 05       	cpc	r23, r1
    2eb8:	29 f0       	breq	.+10     	; 0x2ec4 <midi_input_callbacks+0x84>
    2eba:	61 30       	cpi	r22, 0x01	; 1
    2ebc:	71 05       	cpc	r23, r1
    2ebe:	09 f0       	breq	.+2      	; 0x2ec2 <midi_input_callbacks+0x82>
    2ec0:	b3 c0       	rjmp	.+358    	; 0x3028 <midi_input_callbacks+0x1e8>
    2ec2:	99 c0       	rjmp	.+306    	; 0x2ff6 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2ec4:	84 2f       	mov	r24, r20
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	80 7f       	andi	r24, 0xF0	; 240
    2eca:	90 70       	andi	r25, 0x00	; 0
    2ecc:	80 3a       	cpi	r24, 0xA0	; 160
    2ece:	91 05       	cpc	r25, r1
    2ed0:	29 f1       	breq	.+74     	; 0x2f1c <midi_input_callbacks+0xdc>
    2ed2:	81 3a       	cpi	r24, 0xA1	; 161
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	3c f4       	brge	.+14     	; 0x2ee6 <midi_input_callbacks+0xa6>
    2ed8:	80 38       	cpi	r24, 0x80	; 128
    2eda:	91 05       	cpc	r25, r1
    2edc:	c9 f0       	breq	.+50     	; 0x2f10 <midi_input_callbacks+0xd0>
    2ede:	80 39       	cpi	r24, 0x90	; 144
    2ee0:	91 05       	cpc	r25, r1
    2ee2:	91 f5       	brne	.+100    	; 0x2f48 <midi_input_callbacks+0x108>
    2ee4:	0f c0       	rjmp	.+30     	; 0x2f04 <midi_input_callbacks+0xc4>
    2ee6:	80 3e       	cpi	r24, 0xE0	; 224
    2ee8:	91 05       	cpc	r25, r1
    2eea:	f1 f0       	breq	.+60     	; 0x2f28 <midi_input_callbacks+0xe8>
    2eec:	80 3f       	cpi	r24, 0xF0	; 240
    2eee:	91 05       	cpc	r25, r1
    2ef0:	09 f1       	breq	.+66     	; 0x2f34 <midi_input_callbacks+0xf4>
    2ef2:	80 3b       	cpi	r24, 0xB0	; 176
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	41 f5       	brne	.+80     	; 0x2f48 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    2ef8:	d6 01       	movw	r26, r12
    2efa:	12 96       	adiw	r26, 0x02	; 2
    2efc:	ed 91       	ld	r30, X+
    2efe:	fc 91       	ld	r31, X
    2f00:	13 97       	sbiw	r26, 0x03	; 3
              break;
    2f02:	24 c0       	rjmp	.+72     	; 0x2f4c <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    2f04:	d6 01       	movw	r26, r12
    2f06:	14 96       	adiw	r26, 0x04	; 4
    2f08:	ed 91       	ld	r30, X+
    2f0a:	fc 91       	ld	r31, X
    2f0c:	15 97       	sbiw	r26, 0x05	; 5
              break;
    2f0e:	1e c0       	rjmp	.+60     	; 0x2f4c <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    2f10:	d6 01       	movw	r26, r12
    2f12:	16 96       	adiw	r26, 0x06	; 6
    2f14:	ed 91       	ld	r30, X+
    2f16:	fc 91       	ld	r31, X
    2f18:	17 97       	sbiw	r26, 0x07	; 7
              break;
    2f1a:	18 c0       	rjmp	.+48     	; 0x2f4c <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    2f1c:	d6 01       	movw	r26, r12
    2f1e:	18 96       	adiw	r26, 0x08	; 8
    2f20:	ed 91       	ld	r30, X+
    2f22:	fc 91       	ld	r31, X
    2f24:	19 97       	sbiw	r26, 0x09	; 9
              break;
    2f26:	12 c0       	rjmp	.+36     	; 0x2f4c <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    2f28:	d6 01       	movw	r26, r12
    2f2a:	1a 96       	adiw	r26, 0x0a	; 10
    2f2c:	ed 91       	ld	r30, X+
    2f2e:	fc 91       	ld	r31, X
    2f30:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    2f32:	0c c0       	rjmp	.+24     	; 0x2f4c <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    2f34:	b2 ef       	ldi	r27, 0xF2	; 242
    2f36:	4b 17       	cp	r20, r27
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <midi_input_callbacks+0xfc>
    2f3a:	90 c0       	rjmp	.+288    	; 0x305c <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    2f3c:	d6 01       	movw	r26, r12
    2f3e:	1c 96       	adiw	r26, 0x0c	; 12
    2f40:	ed 91       	ld	r30, X+
    2f42:	fc 91       	ld	r31, X
    2f44:	1d 97       	sbiw	r26, 0x0d	; 13
    2f46:	02 c0       	rjmp	.+4      	; 0x2f4c <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    2f48:	e0 e0       	ldi	r30, 0x00	; 0
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    2f4c:	30 97       	sbiw	r30, 0x00	; 0
    2f4e:	09 f4       	brne	.+2      	; 0x2f52 <midi_input_callbacks+0x112>
    2f50:	85 c0       	rjmp	.+266    	; 0x305c <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    2f52:	b2 ef       	ldi	r27, 0xF2	; 242
    2f54:	fb 16       	cp	r15, r27
    2f56:	31 f4       	brne	.+12     	; 0x2f64 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    2f58:	c6 01       	movw	r24, r12
    2f5a:	62 ef       	ldi	r22, 0xF2	; 242
    2f5c:	4e 2d       	mov	r20, r14
    2f5e:	21 2f       	mov	r18, r17
    2f60:	09 95       	icall
    2f62:	6c c0       	rjmp	.+216    	; 0x303c <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    2f64:	6f 2d       	mov	r22, r15
    2f66:	6f 70       	andi	r22, 0x0F	; 15
    2f68:	c6 01       	movw	r24, r12
    2f6a:	4e 2d       	mov	r20, r14
    2f6c:	21 2f       	mov	r18, r17
    2f6e:	09 95       	icall
    2f70:	65 c0       	rjmp	.+202    	; 0x303c <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    2f72:	84 2f       	mov	r24, r20
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	80 7f       	andi	r24, 0xF0	; 240
    2f78:	90 70       	andi	r25, 0x00	; 0
    2f7a:	80 3d       	cpi	r24, 0xD0	; 208
    2f7c:	91 05       	cpc	r25, r1
    2f7e:	61 f0       	breq	.+24     	; 0x2f98 <midi_input_callbacks+0x158>
    2f80:	80 3f       	cpi	r24, 0xF0	; 240
    2f82:	91 05       	cpc	r25, r1
    2f84:	79 f0       	breq	.+30     	; 0x2fa4 <midi_input_callbacks+0x164>
    2f86:	80 3c       	cpi	r24, 0xC0	; 192
    2f88:	91 05       	cpc	r25, r1
    2f8a:	f9 f4       	brne	.+62     	; 0x2fca <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    2f8c:	d6 01       	movw	r26, r12
    2f8e:	1e 96       	adiw	r26, 0x0e	; 14
    2f90:	ed 91       	ld	r30, X+
    2f92:	fc 91       	ld	r31, X
    2f94:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    2f96:	1b c0       	rjmp	.+54     	; 0x2fce <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    2f98:	d6 01       	movw	r26, r12
    2f9a:	50 96       	adiw	r26, 0x10	; 16
    2f9c:	ed 91       	ld	r30, X+
    2f9e:	fc 91       	ld	r31, X
    2fa0:	51 97       	sbiw	r26, 0x11	; 17
              break;
    2fa2:	15 c0       	rjmp	.+42     	; 0x2fce <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    2fa4:	b3 ef       	ldi	r27, 0xF3	; 243
    2fa6:	4b 17       	cp	r20, r27
    2fa8:	31 f4       	brne	.+12     	; 0x2fb6 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    2faa:	d6 01       	movw	r26, r12
    2fac:	52 96       	adiw	r26, 0x12	; 18
    2fae:	ed 91       	ld	r30, X+
    2fb0:	fc 91       	ld	r31, X
    2fb2:	53 97       	sbiw	r26, 0x13	; 19
    2fb4:	0c c0       	rjmp	.+24     	; 0x2fce <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    2fb6:	b1 ef       	ldi	r27, 0xF1	; 241
    2fb8:	4b 17       	cp	r20, r27
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <midi_input_callbacks+0x17e>
    2fbc:	4f c0       	rjmp	.+158    	; 0x305c <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    2fbe:	d6 01       	movw	r26, r12
    2fc0:	54 96       	adiw	r26, 0x14	; 20
    2fc2:	ed 91       	ld	r30, X+
    2fc4:	fc 91       	ld	r31, X
    2fc6:	55 97       	sbiw	r26, 0x15	; 21
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    2fca:	e0 e0       	ldi	r30, 0x00	; 0
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    2fce:	30 97       	sbiw	r30, 0x00	; 0
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <midi_input_callbacks+0x194>
    2fd2:	44 c0       	rjmp	.+136    	; 0x305c <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    2fd4:	b3 ef       	ldi	r27, 0xF3	; 243
    2fd6:	fb 16       	cp	r15, r27
    2fd8:	19 f0       	breq	.+6      	; 0x2fe0 <midi_input_callbacks+0x1a0>
    2fda:	81 ef       	ldi	r24, 0xF1	; 241
    2fdc:	f8 16       	cp	r15, r24
    2fde:	29 f4       	brne	.+10     	; 0x2fea <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    2fe0:	c6 01       	movw	r24, r12
    2fe2:	6f 2d       	mov	r22, r15
    2fe4:	4e 2d       	mov	r20, r14
    2fe6:	09 95       	icall
    2fe8:	29 c0       	rjmp	.+82     	; 0x303c <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    2fea:	6f 2d       	mov	r22, r15
    2fec:	6f 70       	andi	r22, 0x0F	; 15
    2fee:	c6 01       	movw	r24, r12
    2ff0:	4e 2d       	mov	r20, r14
    2ff2:	09 95       	icall
    2ff4:	23 c0       	rjmp	.+70     	; 0x303c <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    2ff6:	84 2f       	mov	r24, r20
    2ff8:	0e 94 bd 14 	call	0x297a	; 0x297a <midi_is_realtime>
    2ffc:	88 23       	and	r24, r24
    2ffe:	31 f0       	breq	.+12     	; 0x300c <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    3000:	d6 01       	movw	r26, r12
    3002:	56 96       	adiw	r26, 0x16	; 22
    3004:	ed 91       	ld	r30, X+
    3006:	fc 91       	ld	r31, X
    3008:	57 97       	sbiw	r26, 0x17	; 23
    300a:	08 c0       	rjmp	.+16     	; 0x301c <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    300c:	b6 ef       	ldi	r27, 0xF6	; 246
    300e:	fb 16       	cp	r15, r27
    3010:	29 f5       	brne	.+74     	; 0x305c <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    3012:	d6 01       	movw	r26, r12
    3014:	58 96       	adiw	r26, 0x18	; 24
    3016:	ed 91       	ld	r30, X+
    3018:	fc 91       	ld	r31, X
    301a:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    301c:	30 97       	sbiw	r30, 0x00	; 0
    301e:	f1 f0       	breq	.+60     	; 0x305c <midi_input_callbacks+0x21c>
            func(device, byte0);
    3020:	c6 01       	movw	r24, r12
    3022:	6f 2d       	mov	r22, r15
    3024:	09 95       	icall
    3026:	0a c0       	rjmp	.+20     	; 0x303c <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    3028:	64 30       	cpi	r22, 0x04	; 4
    302a:	71 05       	cpc	r23, r1
    302c:	a8 f4       	brcc	.+42     	; 0x3058 <midi_input_callbacks+0x218>
    302e:	16 c0       	rjmp	.+44     	; 0x305c <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    3030:	c6 01       	movw	r24, r12
    3032:	b5 01       	movw	r22, r10
    3034:	4f 2d       	mov	r20, r15
    3036:	2e 2d       	mov	r18, r14
    3038:	01 2f       	mov	r16, r17
    303a:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    303c:	d6 01       	movw	r26, r12
    303e:	5e 96       	adiw	r26, 0x1e	; 30
    3040:	ed 91       	ld	r30, X+
    3042:	fc 91       	ld	r31, X
    3044:	5f 97       	sbiw	r26, 0x1f	; 31
    3046:	30 97       	sbiw	r30, 0x00	; 0
    3048:	89 f0       	breq	.+34     	; 0x306c <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    304a:	c6 01       	movw	r24, r12
    304c:	b5 01       	movw	r22, r10
    304e:	4f 2d       	mov	r20, r15
    3050:	2e 2d       	mov	r18, r14
    3052:	01 2f       	mov	r16, r17
    3054:	09 95       	icall
    3056:	0a c0       	rjmp	.+20     	; 0x306c <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    3058:	aa 24       	eor	r10, r10
    305a:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    305c:	d6 01       	movw	r26, r12
    305e:	5c 96       	adiw	r26, 0x1c	; 28
    3060:	ed 91       	ld	r30, X+
    3062:	fc 91       	ld	r31, X
    3064:	5d 97       	sbiw	r26, 0x1d	; 29
    3066:	30 97       	sbiw	r30, 0x00	; 0
    3068:	19 f7       	brne	.-58     	; 0x3030 <midi_input_callbacks+0x1f0>
    306a:	e8 cf       	rjmp	.-48     	; 0x303c <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	df 91       	pop	r29
    3074:	cf 91       	pop	r28
    3076:	1f 91       	pop	r17
    3078:	0f 91       	pop	r16
    307a:	ff 90       	pop	r15
    307c:	ef 90       	pop	r14
    307e:	df 90       	pop	r13
    3080:	cf 90       	pop	r12
    3082:	bf 90       	pop	r11
    3084:	af 90       	pop	r10
    3086:	08 95       	ret

00003088 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    3088:	ef 92       	push	r14
    308a:	ff 92       	push	r15
    308c:	0f 93       	push	r16
    308e:	cf 93       	push	r28
    3090:	df 93       	push	r29
    3092:	7c 01       	movw	r14, r24
    3094:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    3096:	86 2f       	mov	r24, r22
    3098:	0e 94 bd 14 	call	0x297a	; 0x297a <midi_is_realtime>
    309c:	88 23       	and	r24, r24
    309e:	91 f0       	breq	.+36     	; 0x30c4 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    30a0:	d7 01       	movw	r26, r14
    30a2:	95 96       	adiw	r26, 0x25	; 37
    30a4:	dc 91       	ld	r29, X
    30a6:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	95 96       	adiw	r26, 0x25	; 37
    30ac:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    30ae:	c7 01       	movw	r24, r14
    30b0:	61 e0       	ldi	r22, 0x01	; 1
    30b2:	70 e0       	ldi	r23, 0x00	; 0
    30b4:	4c 2f       	mov	r20, r28
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	00 e0       	ldi	r16, 0x00	; 0
    30ba:	0e 94 20 17 	call	0x2e40	; 0x2e40 <midi_input_callbacks>
    device->input_state = state;
    30be:	f7 01       	movw	r30, r14
    30c0:	d5 a3       	lds	r29, 0x55
    30c2:	b7 c0       	rjmp	.+366    	; 0x3232 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    30c4:	8c 2f       	mov	r24, r28
    30c6:	0e 94 b9 14 	call	0x2972	; 0x2972 <midi_is_statusbyte>
    30ca:	88 23       	and	r24, r24
    30cc:	09 f4       	brne	.+2      	; 0x30d0 <midi_process_byte+0x48>
    30ce:	73 c0       	rjmp	.+230    	; 0x31b6 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    30d0:	d7 01       	movw	r26, r14
    30d2:	95 96       	adiw	r26, 0x25	; 37
    30d4:	8c 91       	ld	r24, X
    30d6:	95 97       	sbiw	r26, 0x25	; 37
    30d8:	84 30       	cpi	r24, 0x04	; 4
    30da:	49 f0       	breq	.+18     	; 0x30ee <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    30dc:	92 96       	adiw	r26, 0x22	; 34
    30de:	cc 93       	st	X, r28
    30e0:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	97 96       	adiw	r26, 0x27	; 39
    30e8:	9c 93       	st	X, r25
    30ea:	8e 93       	st	-X, r24
    30ec:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    30ee:	8c 2f       	mov	r24, r28
    30f0:	0e 94 c3 14 	call	0x2986	; 0x2986 <midi_packet_length>
    30f4:	81 30       	cpi	r24, 0x01	; 1
    30f6:	41 f0       	breq	.+16     	; 0x3108 <midi_process_byte+0x80>
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	00 f1       	brcs	.+64     	; 0x313c <midi_process_byte+0xb4>
    30fc:	82 30       	cpi	r24, 0x02	; 2
    30fe:	a1 f0       	breq	.+40     	; 0x3128 <midi_process_byte+0xa0>
    3100:	83 30       	cpi	r24, 0x03	; 3
    3102:	09 f0       	breq	.+2      	; 0x3106 <midi_process_byte+0x7e>
    3104:	4f c0       	rjmp	.+158    	; 0x31a4 <midi_process_byte+0x11c>
    3106:	14 c0       	rjmp	.+40     	; 0x3130 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	f7 01       	movw	r30, r14
    310c:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    310e:	c7 01       	movw	r24, r14
    3110:	61 e0       	ldi	r22, 0x01	; 1
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	4c 2f       	mov	r20, r28
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	00 e0       	ldi	r16, 0x00	; 0
    311a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <midi_input_callbacks>
        device->input_state = IDLE;
    311e:	d7 01       	movw	r26, r14
    3120:	95 96       	adiw	r26, 0x25	; 37
    3122:	1c 92       	st	X, r1
    3124:	95 97       	sbiw	r26, 0x25	; 37
        break;
    3126:	85 c0       	rjmp	.+266    	; 0x3232 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	f7 01       	movw	r30, r14
    312c:	85 a3       	lds	r24, 0x55
        break;
    312e:	81 c0       	rjmp	.+258    	; 0x3232 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    3130:	83 e0       	ldi	r24, 0x03	; 3
    3132:	d7 01       	movw	r26, r14
    3134:	95 96       	adiw	r26, 0x25	; 37
    3136:	8c 93       	st	X, r24
    3138:	95 97       	sbiw	r26, 0x25	; 37
        break;
    313a:	7b c0       	rjmp	.+246    	; 0x3232 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    313c:	c0 3f       	cpi	r28, 0xF0	; 240
    313e:	19 f0       	breq	.+6      	; 0x3146 <midi_process_byte+0xbe>
    3140:	c7 3f       	cpi	r28, 0xF7	; 247
    3142:	59 f5       	brne	.+86     	; 0x319a <midi_process_byte+0x112>
    3144:	0a c0       	rjmp	.+20     	; 0x315a <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    3146:	84 e0       	ldi	r24, 0x04	; 4
    3148:	f7 01       	movw	r30, r14
    314a:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    314c:	80 ef       	ldi	r24, 0xF0	; 240
    314e:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	97 a3       	lds	r25, 0x57
    3156:	86 a3       	lds	r24, 0x56
            break;
    3158:	6c c0       	rjmp	.+216    	; 0x3232 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    315a:	d7 01       	movw	r26, r14
    315c:	96 96       	adiw	r26, 0x26	; 38
    315e:	2d 91       	ld	r18, X+
    3160:	3c 91       	ld	r19, X
    3162:	97 97       	sbiw	r26, 0x27	; 39
    3164:	c9 01       	movw	r24, r18
    3166:	63 e0       	ldi	r22, 0x03	; 3
    3168:	70 e0       	ldi	r23, 0x00	; 0
    316a:	0e 94 18 1b 	call	0x3630	; 0x3630 <__udivmodhi4>
    316e:	f7 01       	movw	r30, r14
    3170:	e8 0f       	add	r30, r24
    3172:	f9 1f       	adc	r31, r25
    3174:	87 ef       	ldi	r24, 0xF7	; 247
    3176:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    3178:	b9 01       	movw	r22, r18
    317a:	6f 5f       	subi	r22, 0xFF	; 255
    317c:	7f 4f       	sbci	r23, 0xFF	; 255
    317e:	f7 01       	movw	r30, r14
    3180:	77 a3       	lds	r23, 0x57
    3182:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3184:	c7 01       	movw	r24, r14
    3186:	42 a1       	lds	r20, 0x42
    3188:	23 a1       	lds	r18, 0x43
    318a:	04 a1       	lds	r16, 0x44
    318c:	0e 94 20 17 	call	0x2e40	; 0x2e40 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3190:	d7 01       	movw	r26, r14
    3192:	95 96       	adiw	r26, 0x25	; 37
    3194:	1c 92       	st	X, r1
    3196:	95 97       	sbiw	r26, 0x25	; 37
            break;
    3198:	4c c0       	rjmp	.+152    	; 0x3232 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    319a:	f7 01       	movw	r30, r14
    319c:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    319e:	17 a2       	lds	r17, 0x97
    31a0:	16 a2       	lds	r17, 0x96
    31a2:	47 c0       	rjmp	.+142    	; 0x3232 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    31a4:	d7 01       	movw	r26, r14
    31a6:	95 96       	adiw	r26, 0x25	; 37
    31a8:	1c 92       	st	X, r1
    31aa:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    31ac:	97 96       	adiw	r26, 0x27	; 39
    31ae:	1c 92       	st	X, r1
    31b0:	1e 92       	st	-X, r1
    31b2:	96 97       	sbiw	r26, 0x26	; 38
        break;
    31b4:	3e c0       	rjmp	.+124    	; 0x3232 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    31b6:	f7 01       	movw	r30, r14
    31b8:	25 a1       	lds	r18, 0x45
    31ba:	22 23       	and	r18, r18
    31bc:	d1 f1       	breq	.+116    	; 0x3232 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    31be:	06 a0       	lds	r16, 0x86
    31c0:	f7 a1       	lds	r31, 0x47
    31c2:	e0 2d       	mov	r30, r0
    31c4:	cf 01       	movw	r24, r30
    31c6:	63 e0       	ldi	r22, 0x03	; 3
    31c8:	70 e0       	ldi	r23, 0x00	; 0
    31ca:	0e 94 18 1b 	call	0x3630	; 0x3630 <__udivmodhi4>
    31ce:	ac 01       	movw	r20, r24
    31d0:	8e 0d       	add	r24, r14
    31d2:	9f 1d       	adc	r25, r15
    31d4:	dc 01       	movw	r26, r24
    31d6:	92 96       	adiw	r26, 0x22	; 34
    31d8:	cc 93       	st	X, r28
    31da:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    31dc:	bf 01       	movw	r22, r30
    31de:	6f 5f       	subi	r22, 0xFF	; 255
    31e0:	7f 4f       	sbci	r23, 0xFF	; 255
    31e2:	f7 01       	movw	r30, r14
    31e4:	77 a3       	lds	r23, 0x57
    31e6:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    31e8:	41 30       	cpi	r20, 0x01	; 1
    31ea:	51 05       	cpc	r21, r1
    31ec:	91 f0       	breq	.+36     	; 0x3212 <midi_process_byte+0x18a>
    31ee:	42 30       	cpi	r20, 0x02	; 2
    31f0:	51 05       	cpc	r21, r1
    31f2:	f9 f4       	brne	.+62     	; 0x3232 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    31f4:	c7 01       	movw	r24, r14
    31f6:	42 a1       	lds	r20, 0x42
    31f8:	23 a1       	lds	r18, 0x43
    31fa:	04 a1       	lds	r16, 0x44
    31fc:	0e 94 20 17 	call	0x2e40	; 0x2e40 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    3200:	f7 01       	movw	r30, r14
    3202:	85 a1       	lds	r24, 0x45
    3204:	84 30       	cpi	r24, 0x04	; 4
    3206:	a9 f0       	breq	.+42     	; 0x3232 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	97 a3       	lds	r25, 0x57
    320e:	86 a3       	lds	r24, 0x56
    3210:	10 c0       	rjmp	.+32     	; 0x3232 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3212:	22 30       	cpi	r18, 0x02	; 2
    3214:	71 f4       	brne	.+28     	; 0x3232 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    3216:	c7 01       	movw	r24, r14
    3218:	42 a1       	lds	r20, 0x42
    321a:	23 a1       	lds	r18, 0x43
    321c:	00 e0       	ldi	r16, 0x00	; 0
    321e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3222:	f7 01       	movw	r30, r14
    3224:	85 a1       	lds	r24, 0x45
    3226:	84 30       	cpi	r24, 0x04	; 4
    3228:	21 f0       	breq	.+8      	; 0x3232 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	97 a3       	lds	r25, 0x57
    3230:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	0f 91       	pop	r16
    3238:	ff 90       	pop	r15
    323a:	ef 90       	pop	r14
    323c:	08 95       	ret

0000323e <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    323e:	cf 92       	push	r12
    3240:	df 92       	push	r13
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    3250:	dc 01       	movw	r26, r24
    3252:	90 96       	adiw	r26, 0x20	; 32
    3254:	ed 91       	ld	r30, X+
    3256:	fc 91       	ld	r31, X
    3258:	91 97       	sbiw	r26, 0x21	; 33
    325a:	30 97       	sbiw	r30, 0x00	; 0
    325c:	09 f0       	breq	.+2      	; 0x3260 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    325e:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    3260:	0f 2e       	mov	r0, r31
    3262:	f8 ee       	ldi	r31, 0xE8	; 232
    3264:	ef 2e       	mov	r14, r31
    3266:	ff 24       	eor	r15, r15
    3268:	f0 2d       	mov	r31, r0
    326a:	ec 0c       	add	r14, r12
    326c:	fd 1c       	adc	r15, r13
    326e:	c7 01       	movw	r24, r14
    3270:	0e 94 74 14 	call	0x28e8	; 0x28e8 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3274:	c8 2f       	mov	r28, r24
    3276:	d0 e0       	ldi	r29, 0x00	; 0
    3278:	20 97       	sbiw	r28, 0x00	; 0
    327a:	99 f0       	breq	.+38     	; 0x32a2 <midi_device_process+0x64>
    327c:	00 e0       	ldi	r16, 0x00	; 0
    327e:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    3280:	c7 01       	movw	r24, r14
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	0e 94 89 14 	call	0x2912	; 0x2912 <bytequeue_get>
    3288:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    328a:	c6 01       	movw	r24, r12
    328c:	0e 94 44 18 	call	0x3088	; 0x3088 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3290:	c7 01       	movw	r24, r14
    3292:	61 e0       	ldi	r22, 0x01	; 1
    3294:	0e 94 9a 14 	call	0x2934	; 0x2934 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3298:	0f 5f       	subi	r16, 0xFF	; 255
    329a:	1f 4f       	sbci	r17, 0xFF	; 255
    329c:	0c 17       	cp	r16, r28
    329e:	1d 07       	cpc	r17, r29
    32a0:	78 f3       	brcs	.-34     	; 0x3280 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	1f 91       	pop	r17
    32a8:	0f 91       	pop	r16
    32aa:	ff 90       	pop	r15
    32ac:	ef 90       	pop	r14
    32ae:	df 90       	pop	r13
    32b0:	cf 90       	pop	r12
    32b2:	08 95       	ret

000032b4 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    32b4:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    32b6:	67 e0       	ldi	r22, 0x07	; 7
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	0e 94 18 1b 	call	0x3630	; 0x3630 <__udivmodhi4>
    32be:	48 2f       	mov	r20, r24
   if (remainder)
    32c0:	88 23       	and	r24, r24
    32c2:	81 f0       	breq	.+32     	; 0x32e4 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    32c4:	c9 01       	movw	r24, r18
    32c6:	67 e0       	ldi	r22, 0x07	; 7
    32c8:	70 e0       	ldi	r23, 0x00	; 0
    32ca:	0e 94 18 1b 	call	0x3630	; 0x3630 <__udivmodhi4>
    32ce:	cb 01       	movw	r24, r22
    32d0:	88 0f       	add	r24, r24
    32d2:	99 1f       	adc	r25, r25
    32d4:	88 0f       	add	r24, r24
    32d6:	99 1f       	adc	r25, r25
    32d8:	88 0f       	add	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	01 96       	adiw	r24, 0x01	; 1
    32de:	84 0f       	add	r24, r20
    32e0:	91 1d       	adc	r25, r1
    32e2:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    32e4:	c9 01       	movw	r24, r18
    32e6:	67 e0       	ldi	r22, 0x07	; 7
    32e8:	70 e0       	ldi	r23, 0x00	; 0
    32ea:	0e 94 18 1b 	call	0x3630	; 0x3630 <__udivmodhi4>
    32ee:	cb 01       	movw	r24, r22
    32f0:	88 0f       	add	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	88 0f       	add	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	88 0f       	add	r24, r24
    32fa:	99 1f       	adc	r25, r25
}
    32fc:	08 95       	ret

000032fe <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    32fe:	48 2f       	mov	r20, r24
    3300:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3302:	a1 f0       	breq	.+40     	; 0x332c <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3304:	9c 01       	movw	r18, r24
    3306:	36 95       	lsr	r19
    3308:	27 95       	ror	r18
    330a:	36 95       	lsr	r19
    330c:	27 95       	ror	r18
    330e:	36 95       	lsr	r19
    3310:	27 95       	ror	r18
    3312:	c9 01       	movw	r24, r18
    3314:	88 0f       	add	r24, r24
    3316:	99 1f       	adc	r25, r25
    3318:	88 0f       	add	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	88 0f       	add	r24, r24
    331e:	99 1f       	adc	r25, r25
    3320:	82 1b       	sub	r24, r18
    3322:	93 0b       	sbc	r25, r19
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	84 0f       	add	r24, r20
    3328:	91 1d       	adc	r25, r1
    332a:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    332c:	9c 01       	movw	r18, r24
    332e:	36 95       	lsr	r19
    3330:	27 95       	ror	r18
    3332:	36 95       	lsr	r19
    3334:	27 95       	ror	r18
    3336:	36 95       	lsr	r19
    3338:	27 95       	ror	r18
    333a:	c9 01       	movw	r24, r18
    333c:	88 0f       	add	r24, r24
    333e:	99 1f       	adc	r25, r25
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	88 0f       	add	r24, r24
    3346:	99 1f       	adc	r25, r25
    3348:	82 1b       	sub	r24, r18
    334a:	93 0b       	sbc	r25, r19
}
    334c:	08 95       	ret

0000334e <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    334e:	2f 92       	push	r2
    3350:	3f 92       	push	r3
    3352:	4f 92       	push	r4
    3354:	5f 92       	push	r5
    3356:	6f 92       	push	r6
    3358:	7f 92       	push	r7
    335a:	8f 92       	push	r8
    335c:	9f 92       	push	r9
    335e:	af 92       	push	r10
    3360:	bf 92       	push	r11
    3362:	cf 92       	push	r12
    3364:	df 92       	push	r13
    3366:	ef 92       	push	r14
    3368:	ff 92       	push	r15
    336a:	0f 93       	push	r16
    336c:	1f 93       	push	r17
    336e:	cf 93       	push	r28
    3370:	df 93       	push	r29
    3372:	00 d0       	rcall	.+0      	; 0x3374 <sysex_encode+0x26>
    3374:	00 d0       	rcall	.+0      	; 0x3376 <sysex_encode+0x28>
    3376:	00 d0       	rcall	.+0      	; 0x3378 <sysex_encode+0x2a>
    3378:	cd b7       	in	r28, 0x3d	; 61
    337a:	de b7       	in	r29, 0x3e	; 62
    337c:	1c 01       	movw	r2, r24
    337e:	7a 83       	std	Y+2, r23	; 0x02
    3380:	69 83       	std	Y+1, r22	; 0x01
    3382:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3384:	ca 01       	movw	r24, r20
    3386:	67 e0       	ldi	r22, 0x07	; 7
    3388:	70 e0       	ldi	r23, 0x00	; 0
    338a:	0e 94 18 1b 	call	0x3630	; 0x3630 <__udivmodhi4>
    338e:	2b 01       	movw	r4, r22
    3390:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3392:	61 15       	cp	r22, r1
    3394:	71 05       	cpc	r23, r1
    3396:	b1 f1       	breq	.+108    	; 0x3404 <sysex_encode+0xb6>
    3398:	81 01       	movw	r16, r2
    339a:	e9 80       	ldd	r14, Y+1	; 0x01
    339c:	fa 80       	ldd	r15, Y+2	; 0x02
    339e:	cc 24       	eor	r12, r12
    33a0:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    33a2:	88 24       	eor	r8, r8
    33a4:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    33a6:	1e 83       	std	Y+6, r17	; 0x06
    33a8:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    33aa:	f8 01       	movw	r30, r16
    33ac:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    33ae:	fc 82       	std	Y+4, r15	; 0x04
    33b0:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    33b2:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    33b4:	ab 81       	ldd	r26, Y+3	; 0x03
    33b6:	bc 81       	ldd	r27, Y+4	; 0x04
    33b8:	2d 91       	ld	r18, X+
    33ba:	bc 83       	std	Y+4, r27	; 0x04
    33bc:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    33be:	4f 5f       	subi	r20, 0xFF	; 255
    33c0:	5f 4f       	sbci	r21, 0xFF	; 255
    33c2:	82 2f       	mov	r24, r18
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	80 78       	andi	r24, 0x80	; 128
    33c8:	90 70       	andi	r25, 0x00	; 0
    33ca:	bc 01       	movw	r22, r24
    33cc:	04 2e       	mov	r0, r20
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <sysex_encode+0x86>
    33d0:	75 95       	asr	r23
    33d2:	67 95       	ror	r22
    33d4:	0a 94       	dec	r0
    33d6:	e2 f7       	brpl	.-8      	; 0x33d0 <sysex_encode+0x82>
    33d8:	ad 81       	ldd	r26, Y+5	; 0x05
    33da:	be 81       	ldd	r27, Y+6	; 0x06
    33dc:	8c 91       	ld	r24, X
    33de:	86 2b       	or	r24, r22
    33e0:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    33e2:	2f 77       	andi	r18, 0x7F	; 127
    33e4:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    33e6:	47 30       	cpi	r20, 0x07	; 7
    33e8:	51 05       	cpc	r21, r1
    33ea:	21 f7       	brne	.-56     	; 0x33b4 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    33ec:	08 94       	sec
    33ee:	c1 1c       	adc	r12, r1
    33f0:	d1 1c       	adc	r13, r1
    33f2:	08 5f       	subi	r16, 0xF8	; 248
    33f4:	1f 4f       	sbci	r17, 0xFF	; 255
    33f6:	e7 e0       	ldi	r30, 0x07	; 7
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	ee 0e       	add	r14, r30
    33fc:	ff 1e       	adc	r15, r31
    33fe:	ca 14       	cp	r12, r10
    3400:	db 04       	cpc	r13, r11
    3402:	89 f6       	brne	.-94     	; 0x33a6 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3404:	c3 01       	movw	r24, r6
    3406:	67 e0       	ldi	r22, 0x07	; 7
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	0e 94 18 1b 	call	0x3630	; 0x3630 <__udivmodhi4>
   if (remainder) {
    340e:	88 23       	and	r24, r24
    3410:	d9 f1       	breq	.+118    	; 0x3488 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3412:	82 01       	movw	r16, r4
    3414:	00 0f       	add	r16, r16
    3416:	11 1f       	adc	r17, r17
    3418:	00 0f       	add	r16, r16
    341a:	11 1f       	adc	r17, r17
    341c:	00 0f       	add	r16, r16
    341e:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3420:	78 01       	movw	r14, r16
    3422:	e4 18       	sub	r14, r4
    3424:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3426:	d1 01       	movw	r26, r2
    3428:	a0 0f       	add	r26, r16
    342a:	b1 1f       	adc	r27, r17
    342c:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    342e:	68 2f       	mov	r22, r24
    3430:	70 e0       	ldi	r23, 0x00	; 0
    3432:	61 15       	cp	r22, r1
    3434:	71 05       	cpc	r23, r1
    3436:	19 f1       	breq	.+70     	; 0x347e <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3438:	e9 81       	ldd	r30, Y+1	; 0x01
    343a:	fa 81       	ldd	r31, Y+2	; 0x02
    343c:	ee 0e       	add	r14, r30
    343e:	ff 1e       	adc	r15, r31
    3440:	c8 01       	movw	r24, r16
    3442:	01 96       	adiw	r24, 0x01	; 1
    3444:	28 0e       	add	r2, r24
    3446:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    344c:	f7 01       	movw	r30, r14
    344e:	41 91       	ld	r20, Z+
    3450:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3452:	2f 5f       	subi	r18, 0xFF	; 255
    3454:	3f 4f       	sbci	r19, 0xFF	; 255
    3456:	84 2f       	mov	r24, r20
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	80 78       	andi	r24, 0x80	; 128
    345c:	90 70       	andi	r25, 0x00	; 0
    345e:	02 2e       	mov	r0, r18
    3460:	02 c0       	rjmp	.+4      	; 0x3466 <sysex_encode+0x118>
    3462:	95 95       	asr	r25
    3464:	87 95       	ror	r24
    3466:	0a 94       	dec	r0
    3468:	e2 f7       	brpl	.-8      	; 0x3462 <sysex_encode+0x114>
    346a:	9c 91       	ld	r25, X
    346c:	89 2b       	or	r24, r25
    346e:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3470:	4f 77       	andi	r20, 0x7F	; 127
    3472:	f1 01       	movw	r30, r2
    3474:	41 93       	st	Z+, r20
    3476:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3478:	26 17       	cp	r18, r22
    347a:	37 07       	cpc	r19, r23
    347c:	38 f3       	brcs	.-50     	; 0x344c <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    347e:	c8 01       	movw	r24, r16
    3480:	01 96       	adiw	r24, 0x01	; 1
    3482:	86 0f       	add	r24, r22
    3484:	97 1f       	adc	r25, r23
    3486:	07 c0       	rjmp	.+14     	; 0x3496 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    3488:	c2 01       	movw	r24, r4
    348a:	88 0f       	add	r24, r24
    348c:	99 1f       	adc	r25, r25
    348e:	88 0f       	add	r24, r24
    3490:	99 1f       	adc	r25, r25
    3492:	88 0f       	add	r24, r24
    3494:	99 1f       	adc	r25, r25
   }
}
    3496:	26 96       	adiw	r28, 0x06	; 6
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	ff 90       	pop	r15
    34ac:	ef 90       	pop	r14
    34ae:	df 90       	pop	r13
    34b0:	cf 90       	pop	r12
    34b2:	bf 90       	pop	r11
    34b4:	af 90       	pop	r10
    34b6:	9f 90       	pop	r9
    34b8:	8f 90       	pop	r8
    34ba:	7f 90       	pop	r7
    34bc:	6f 90       	pop	r6
    34be:	5f 90       	pop	r5
    34c0:	4f 90       	pop	r4
    34c2:	3f 90       	pop	r3
    34c4:	2f 90       	pop	r2
    34c6:	08 95       	ret

000034c8 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    34c8:	6f 92       	push	r6
    34ca:	7f 92       	push	r7
    34cc:	8f 92       	push	r8
    34ce:	9f 92       	push	r9
    34d0:	af 92       	push	r10
    34d2:	bf 92       	push	r11
    34d4:	cf 92       	push	r12
    34d6:	df 92       	push	r13
    34d8:	ef 92       	push	r14
    34da:	ff 92       	push	r15
    34dc:	0f 93       	push	r16
    34de:	1f 93       	push	r17
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	3c 01       	movw	r6, r24
    34e6:	4b 01       	movw	r8, r22
    34e8:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    34ea:	42 30       	cpi	r20, 0x02	; 2
    34ec:	51 05       	cpc	r21, r1
    34ee:	08 f4       	brcc	.+2      	; 0x34f2 <sysex_decode+0x2a>
    34f0:	6f c0       	rjmp	.+222    	; 0x35d0 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    34f2:	7a 01       	movw	r14, r20
    34f4:	f6 94       	lsr	r15
    34f6:	e7 94       	ror	r14
    34f8:	f6 94       	lsr	r15
    34fa:	e7 94       	ror	r14
    34fc:	f6 94       	lsr	r15
    34fe:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3500:	e1 14       	cp	r14, r1
    3502:	f1 04       	cpc	r15, r1
    3504:	29 f1       	breq	.+74     	; 0x3550 <sysex_decode+0x88>
    3506:	eb 01       	movw	r28, r22
    3508:	b3 01       	movw	r22, r6
    350a:	00 e0       	ldi	r16, 0x00	; 0
    350c:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    350e:	cc 24       	eor	r12, r12
    3510:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3512:	de 01       	movw	r26, r28
    3514:	11 96       	adiw	r26, 0x01	; 1
    3516:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3518:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    351a:	2d 91       	ld	r18, X+
    351c:	2f 77       	andi	r18, 0x7F	; 127
    351e:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3520:	4f 5f       	subi	r20, 0xFF	; 255
    3522:	5f 4f       	sbci	r21, 0xFF	; 255
    3524:	88 81       	ld	r24, Y
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	04 2e       	mov	r0, r20
    352a:	02 c0       	rjmp	.+4      	; 0x3530 <sysex_decode+0x68>
    352c:	88 0f       	add	r24, r24
    352e:	99 1f       	adc	r25, r25
    3530:	0a 94       	dec	r0
    3532:	e2 f7       	brpl	.-8      	; 0x352c <sysex_decode+0x64>
    3534:	80 78       	andi	r24, 0x80	; 128
    3536:	28 2b       	or	r18, r24
    3538:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    353a:	47 30       	cpi	r20, 0x07	; 7
    353c:	51 05       	cpc	r21, r1
    353e:	69 f7       	brne	.-38     	; 0x351a <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3540:	0f 5f       	subi	r16, 0xFF	; 255
    3542:	1f 4f       	sbci	r17, 0xFF	; 255
    3544:	28 96       	adiw	r28, 0x08	; 8
    3546:	69 5f       	subi	r22, 0xF9	; 249
    3548:	7f 4f       	sbci	r23, 0xFF	; 255
    354a:	0e 15       	cp	r16, r14
    354c:	1f 05       	cpc	r17, r15
    354e:	09 f7       	brne	.-62     	; 0x3512 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3550:	5a 2d       	mov	r21, r10
    3552:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3554:	99 f1       	breq	.+102    	; 0x35bc <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3556:	e7 01       	movw	r28, r14
    3558:	cc 0f       	add	r28, r28
    355a:	dd 1f       	adc	r29, r29
    355c:	cc 0f       	add	r28, r28
    355e:	dd 1f       	adc	r29, r29
    3560:	cc 0f       	add	r28, r28
    3562:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3564:	8e 01       	movw	r16, r28
    3566:	0e 19       	sub	r16, r14
    3568:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    356a:	65 2f       	mov	r22, r21
    356c:	70 e0       	ldi	r23, 0x00	; 0
    356e:	61 50       	subi	r22, 0x01	; 1
    3570:	70 40       	sbci	r23, 0x00	; 0
    3572:	f9 f0       	breq	.+62     	; 0x35b2 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3574:	ce 01       	movw	r24, r28
    3576:	01 96       	adiw	r24, 0x01	; 1
    3578:	d4 01       	movw	r26, r8
    357a:	a8 0f       	add	r26, r24
    357c:	b9 1f       	adc	r27, r25
    357e:	f3 01       	movw	r30, r6
    3580:	e0 0f       	add	r30, r16
    3582:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3588:	c8 0d       	add	r28, r8
    358a:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    358c:	4d 91       	ld	r20, X+
    358e:	4f 77       	andi	r20, 0x7F	; 127
    3590:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3592:	2f 5f       	subi	r18, 0xFF	; 255
    3594:	3f 4f       	sbci	r19, 0xFF	; 255
    3596:	88 81       	ld	r24, Y
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	02 2e       	mov	r0, r18
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <sysex_decode+0xda>
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	0a 94       	dec	r0
    35a4:	e2 f7       	brpl	.-8      	; 0x359e <sysex_decode+0xd6>
    35a6:	80 78       	andi	r24, 0x80	; 128
    35a8:	48 2b       	or	r20, r24
    35aa:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    35ac:	26 17       	cp	r18, r22
    35ae:	37 07       	cpc	r19, r23
    35b0:	68 f3       	brcs	.-38     	; 0x358c <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    35b2:	c8 01       	movw	r24, r16
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	85 0f       	add	r24, r21
    35b8:	91 1d       	adc	r25, r1
    35ba:	0c c0       	rjmp	.+24     	; 0x35d4 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    35bc:	c7 01       	movw	r24, r14
    35be:	88 0f       	add	r24, r24
    35c0:	99 1f       	adc	r25, r25
    35c2:	88 0f       	add	r24, r24
    35c4:	99 1f       	adc	r25, r25
    35c6:	88 0f       	add	r24, r24
    35c8:	99 1f       	adc	r25, r25
    35ca:	8e 19       	sub	r24, r14
    35cc:	9f 09       	sbc	r25, r15
    35ce:	02 c0       	rjmp	.+4      	; 0x35d4 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	1f 91       	pop	r17
    35da:	0f 91       	pop	r16
    35dc:	ff 90       	pop	r15
    35de:	ef 90       	pop	r14
    35e0:	df 90       	pop	r13
    35e2:	cf 90       	pop	r12
    35e4:	bf 90       	pop	r11
    35e6:	af 90       	pop	r10
    35e8:	9f 90       	pop	r9
    35ea:	8f 90       	pop	r8
    35ec:	7f 90       	pop	r7
    35ee:	6f 90       	pop	r6
    35f0:	08 95       	ret

000035f2 <__mulsi3>:
    35f2:	62 9f       	mul	r22, r18
    35f4:	d0 01       	movw	r26, r0
    35f6:	73 9f       	mul	r23, r19
    35f8:	f0 01       	movw	r30, r0
    35fa:	82 9f       	mul	r24, r18
    35fc:	e0 0d       	add	r30, r0
    35fe:	f1 1d       	adc	r31, r1
    3600:	64 9f       	mul	r22, r20
    3602:	e0 0d       	add	r30, r0
    3604:	f1 1d       	adc	r31, r1
    3606:	92 9f       	mul	r25, r18
    3608:	f0 0d       	add	r31, r0
    360a:	83 9f       	mul	r24, r19
    360c:	f0 0d       	add	r31, r0
    360e:	74 9f       	mul	r23, r20
    3610:	f0 0d       	add	r31, r0
    3612:	65 9f       	mul	r22, r21
    3614:	f0 0d       	add	r31, r0
    3616:	99 27       	eor	r25, r25
    3618:	72 9f       	mul	r23, r18
    361a:	b0 0d       	add	r27, r0
    361c:	e1 1d       	adc	r30, r1
    361e:	f9 1f       	adc	r31, r25
    3620:	63 9f       	mul	r22, r19
    3622:	b0 0d       	add	r27, r0
    3624:	e1 1d       	adc	r30, r1
    3626:	f9 1f       	adc	r31, r25
    3628:	bd 01       	movw	r22, r26
    362a:	cf 01       	movw	r24, r30
    362c:	11 24       	eor	r1, r1
    362e:	08 95       	ret

00003630 <__udivmodhi4>:
    3630:	aa 1b       	sub	r26, r26
    3632:	bb 1b       	sub	r27, r27
    3634:	51 e1       	ldi	r21, 0x11	; 17
    3636:	07 c0       	rjmp	.+14     	; 0x3646 <__udivmodhi4_ep>

00003638 <__udivmodhi4_loop>:
    3638:	aa 1f       	adc	r26, r26
    363a:	bb 1f       	adc	r27, r27
    363c:	a6 17       	cp	r26, r22
    363e:	b7 07       	cpc	r27, r23
    3640:	10 f0       	brcs	.+4      	; 0x3646 <__udivmodhi4_ep>
    3642:	a6 1b       	sub	r26, r22
    3644:	b7 0b       	sbc	r27, r23

00003646 <__udivmodhi4_ep>:
    3646:	88 1f       	adc	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	5a 95       	dec	r21
    364c:	a9 f7       	brne	.-22     	; 0x3638 <__udivmodhi4_loop>
    364e:	80 95       	com	r24
    3650:	90 95       	com	r25
    3652:	bc 01       	movw	r22, r24
    3654:	cd 01       	movw	r24, r26
    3656:	08 95       	ret

00003658 <__divmodhi4>:
    3658:	97 fb       	bst	r25, 7
    365a:	09 2e       	mov	r0, r25
    365c:	07 26       	eor	r0, r23
    365e:	0a d0       	rcall	.+20     	; 0x3674 <__divmodhi4_neg1>
    3660:	77 fd       	sbrc	r23, 7
    3662:	04 d0       	rcall	.+8      	; 0x366c <__divmodhi4_neg2>
    3664:	e5 df       	rcall	.-54     	; 0x3630 <__udivmodhi4>
    3666:	06 d0       	rcall	.+12     	; 0x3674 <__divmodhi4_neg1>
    3668:	00 20       	and	r0, r0
    366a:	1a f4       	brpl	.+6      	; 0x3672 <__divmodhi4_exit>

0000366c <__divmodhi4_neg2>:
    366c:	70 95       	com	r23
    366e:	61 95       	neg	r22
    3670:	7f 4f       	sbci	r23, 0xFF	; 255

00003672 <__divmodhi4_exit>:
    3672:	08 95       	ret

00003674 <__divmodhi4_neg1>:
    3674:	f6 f7       	brtc	.-4      	; 0x3672 <__divmodhi4_exit>
    3676:	90 95       	com	r25
    3678:	81 95       	neg	r24
    367a:	9f 4f       	sbci	r25, 0xFF	; 255
    367c:	08 95       	ret

0000367e <memcpy>:
    367e:	fb 01       	movw	r30, r22
    3680:	dc 01       	movw	r26, r24
    3682:	02 c0       	rjmp	.+4      	; 0x3688 <memcpy+0xa>
    3684:	01 90       	ld	r0, Z+
    3686:	0d 92       	st	X+, r0
    3688:	41 50       	subi	r20, 0x01	; 1
    368a:	50 40       	sbci	r21, 0x00	; 0
    368c:	d8 f7       	brcc	.-10     	; 0x3684 <memcpy+0x6>
    368e:	08 95       	ret

00003690 <memmove>:
    3690:	68 17       	cp	r22, r24
    3692:	79 07       	cpc	r23, r25
    3694:	68 f4       	brcc	.+26     	; 0x36b0 <memmove+0x20>
    3696:	fb 01       	movw	r30, r22
    3698:	dc 01       	movw	r26, r24
    369a:	e4 0f       	add	r30, r20
    369c:	f5 1f       	adc	r31, r21
    369e:	a4 0f       	add	r26, r20
    36a0:	b5 1f       	adc	r27, r21
    36a2:	02 c0       	rjmp	.+4      	; 0x36a8 <memmove+0x18>
    36a4:	02 90       	ld	r0, -Z
    36a6:	0e 92       	st	-X, r0
    36a8:	41 50       	subi	r20, 0x01	; 1
    36aa:	50 40       	sbci	r21, 0x00	; 0
    36ac:	d8 f7       	brcc	.-10     	; 0x36a4 <memmove+0x14>
    36ae:	08 95       	ret
    36b0:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <memcpy>

000036b4 <__eerd_block_m6450a>:
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22

000036b8 <__eerd_blraw_m6450a>:
    36b8:	fc 01       	movw	r30, r24
    36ba:	f9 99       	sbic	0x1f, 1	; 31
    36bc:	fe cf       	rjmp	.-4      	; 0x36ba <__eerd_blraw_m6450a+0x2>
    36be:	06 c0       	rjmp	.+12     	; 0x36cc <__eerd_blraw_m6450a+0x14>
    36c0:	f2 bd       	out	0x22, r31	; 34
    36c2:	e1 bd       	out	0x21, r30	; 33
    36c4:	f8 9a       	sbi	0x1f, 0	; 31
    36c6:	31 96       	adiw	r30, 0x01	; 1
    36c8:	00 b4       	in	r0, 0x20	; 32
    36ca:	0d 92       	st	X+, r0
    36cc:	41 50       	subi	r20, 0x01	; 1
    36ce:	50 40       	sbci	r21, 0x00	; 0
    36d0:	b8 f7       	brcc	.-18     	; 0x36c0 <__eerd_blraw_m6450a+0x8>
    36d2:	08 95       	ret

000036d4 <__eerd_word_m6450a>:
    36d4:	a8 e1       	ldi	r26, 0x18	; 24
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	42 e0       	ldi	r20, 0x02	; 2
    36da:	50 e0       	ldi	r21, 0x00	; 0
    36dc:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__eerd_blraw_m6450a>

000036e0 <__eeupd_block_m6450a>:
    36e0:	dc 01       	movw	r26, r24
    36e2:	a4 0f       	add	r26, r20
    36e4:	b5 1f       	adc	r27, r21
    36e6:	41 50       	subi	r20, 0x01	; 1
    36e8:	50 40       	sbci	r21, 0x00	; 0
    36ea:	48 f0       	brcs	.+18     	; 0x36fe <__eeupd_block_m6450a+0x1e>
    36ec:	cb 01       	movw	r24, r22
    36ee:	84 0f       	add	r24, r20
    36f0:	95 1f       	adc	r25, r21
    36f2:	2e 91       	ld	r18, -X
    36f4:	0e 94 81 1b 	call	0x3702	; 0x3702 <__eeupd_r18_m6450a>
    36f8:	41 50       	subi	r20, 0x01	; 1
    36fa:	50 40       	sbci	r21, 0x00	; 0
    36fc:	d0 f7       	brcc	.-12     	; 0x36f2 <__eeupd_block_m6450a+0x12>
    36fe:	08 95       	ret

00003700 <__eeupd_byte_m6450a>:
    3700:	26 2f       	mov	r18, r22

00003702 <__eeupd_r18_m6450a>:
    3702:	f9 99       	sbic	0x1f, 1	; 31
    3704:	fe cf       	rjmp	.-4      	; 0x3702 <__eeupd_r18_m6450a>
    3706:	92 bd       	out	0x22, r25	; 34
    3708:	81 bd       	out	0x21, r24	; 33
    370a:	f8 9a       	sbi	0x1f, 0	; 31
    370c:	01 97       	sbiw	r24, 0x01	; 1
    370e:	00 b4       	in	r0, 0x20	; 32
    3710:	02 16       	cp	r0, r18
    3712:	31 f0       	breq	.+12     	; 0x3720 <__eeupd_r18_m6450a+0x1e>
    3714:	20 bd       	out	0x20, r18	; 32
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	fa 9a       	sbi	0x1f, 2	; 31
    371c:	f9 9a       	sbi	0x1f, 1	; 31
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	08 95       	ret

00003722 <__eeupd_word_m6450a>:
    3722:	01 96       	adiw	r24, 0x01	; 1
    3724:	27 2f       	mov	r18, r23
    3726:	0e 94 81 1b 	call	0x3702	; 0x3702 <__eeupd_r18_m6450a>
    372a:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__eeupd_byte_m6450a>

0000372e <_exit>:
    372e:	f8 94       	cli

00003730 <__stop_program>:
    3730:	ff cf       	rjmp	.-2      	; 0x3730 <__stop_program>
