
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  0000258e  00002622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000258e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019a  008001ec  008001ec  0000270e  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014a  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00003090  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040e0  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001051  00000000  00000000  000073f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001944  00000000  00000000  00008441  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b14  00000000  00000000  00009d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000121d  00000000  00000000  0000a89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029b7  00000000  00000000  0000bab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000e470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_9>
      28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ee e8       	ldi	r30, 0x8E	; 142
      78:	f5 e2       	ldi	r31, 0x25	; 37
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	13 e0       	ldi	r17, 0x03	; 3
      88:	ac ee       	ldi	r26, 0xEC	; 236
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a6 38       	cpi	r26, 0x86	; 134
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 aa 02 	call	0x554	; 0x554 <main>
      9a:	0c 94 c5 12 	jmp	0x258a	; 0x258a <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     120:	80 91 ec 01 	lds	r24, 0x01EC
     124:	08 95       	ret

00000126 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	18 2f       	mov	r17, r24
     130:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	ec 01       	movw	r28, r24
     138:	22 97       	sbiw	r28, 0x02	; 2
     13a:	be 01       	movw	r22, r28
     13c:	4e e0       	ldi	r20, 0x0E	; 14
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	0e 94 b3 12 	call	0x2566	; 0x2566 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     144:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     146:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     148:	10 93 ec 01 	sts	0x01EC, r17
	
} 
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	08 95       	ret

00000156 <remove_note>:
void remove_note(uint8_t note){
     156:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     158:	c0 91 00 01 	lds	r28, 0x0100
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     15c:	c8 17       	cp	r28, r24
     15e:	41 f0       	breq	.+16     	; 0x170 <remove_note+0x1a>
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     168:	90 81       	ld	r25, Z
     16a:	98 17       	cp	r25, r24
     16c:	59 f4       	brne	.+22     	; 0x184 <remove_note+0x2e>
     16e:	02 c0       	rjmp	.+4      	; 0x174 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     174:	fa 01       	movw	r30, r20
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	e0 50       	subi	r30, 0x00	; 0
     17c:	ff 4f       	sbci	r31, 0xFF	; 255
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	80 83       	st	Z, r24
			free_slot = i;
			break;
     182:	07 c0       	rjmp	.+14     	; 0x192 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     184:	4f 5f       	subi	r20, 0xFF	; 255
     186:	5f 4f       	sbci	r21, 0xFF	; 255
     188:	32 96       	adiw	r30, 0x02	; 2
     18a:	48 30       	cpi	r20, 0x08	; 8
     18c:	51 05       	cpc	r21, r1
     18e:	61 f7       	brne	.-40     	; 0x168 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     190:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	ca 01       	movw	r24, r20
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	bc 01       	movw	r22, r24
     19c:	6e 5f       	subi	r22, 0xFE	; 254
     19e:	7e 4f       	sbci	r23, 0xFE	; 254
     1a0:	40 95       	com	r20
     1a2:	50 95       	com	r21
     1a4:	48 5f       	subi	r20, 0xF8	; 248
     1a6:	5f 4f       	sbci	r21, 0xFF	; 255
     1a8:	44 0f       	add	r20, r20
     1aa:	55 1f       	adc	r21, r21
     1ac:	80 50       	subi	r24, 0x00	; 0
     1ae:	9f 4f       	sbci	r25, 0xFF	; 255
     1b0:	0e 94 b3 12 	call	0x2566	; 0x2566 <memmove>
	note_pool[7].note = EMPTY;	
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	80 93 0e 01 	sts	0x010E, r24
	
	//check to see if this is the last note released
	if (note_pool[0].note == EMPTY) {
     1ba:	80 91 00 01 	lds	r24, 0x0100
     1be:	8f 3f       	cpi	r24, 0xFF	; 255
     1c0:	19 f4       	brne	.+6      	; 0x1c8 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1c2:	c0 93 ec 01 	sts	0x01EC, r28
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1c8:	80 93 ec 01 	sts	0x01EC, r24

	}	
	
}
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     1d0:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1d2:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1d4:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1d6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     1d8:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     1da:	8c 91       	ld	r24, X
     1dc:	82 b9       	out	0x02, r24	; 2
     1de:	8d e0       	ldi	r24, 0x0D	; 13
     1e0:	8a 95       	dec	r24
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <set_control_voltage+0x10>
     1e4:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     1e6:	ea ed       	ldi	r30, 0xDA	; 218
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	40 81       	ld	r20, Z
     1ec:	21 e0       	ldi	r18, 0x01	; 1
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	c9 01       	movw	r24, r18
     1f2:	11 96       	adiw	r26, 0x01	; 1
     1f4:	0c 90       	ld	r0, X
     1f6:	11 97       	sbiw	r26, 0x01	; 1
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_control_voltage+0x2e>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <set_control_voltage+0x2a>
     202:	84 2b       	or	r24, r20
     204:	80 83       	st	Z, r24
     206:	82 e4       	ldi	r24, 0x42	; 66
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <set_control_voltage+0x38>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <set_control_voltage+0x3e>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     20e:	80 81       	ld	r24, Z
     210:	11 96       	adiw	r26, 0x01	; 1
     212:	0c 90       	ld	r0, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	02 c0       	rjmp	.+4      	; 0x21c <set_control_voltage+0x4c>
     218:	22 0f       	add	r18, r18
     21a:	33 1f       	adc	r19, r19
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <set_control_voltage+0x48>
     220:	20 95       	com	r18
     222:	28 23       	and	r18, r24
     224:	20 83       	st	Z, r18
	
}	
     226:	08 95       	ret

00000228 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     228:	83 b3       	in	r24, 0x13	; 19
     22a:	83 60       	ori	r24, 0x03	; 3
     22c:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     232:	97 b1       	in	r25, 0x07	; 7
     234:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     236:	e9 ed       	ldi	r30, 0xD9	; 217
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8f 60       	ori	r24, 0x0F	; 15
     23e:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     240:	ea ed       	ldi	r30, 0xDA	; 218
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	80 7f       	andi	r24, 0xF0	; 240
     248:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     24a:	84 b3       	in	r24, 0x14	; 20
     24c:	83 60       	ori	r24, 0x03	; 3
     24e:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     250:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     252:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     254:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     256:	a0 9a       	sbi	0x14, 0	; 20
}
     258:	08 95       	ret

0000025a <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     25a:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     25c:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     25e:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     260:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     262:	62 b9       	out	0x02, r22	; 2
     264:	2d e0       	ldi	r18, 0x0D	; 13
     266:	2a 95       	dec	r18
     268:	f1 f7       	brne	.-4      	; 0x266 <set_dac+0xc>
     26a:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     26c:	ea ed       	ldi	r30, 0xDA	; 218
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	40 81       	ld	r20, Z
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	b9 01       	movw	r22, r18
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_dac+0x24>
     27a:	66 0f       	add	r22, r22
     27c:	77 1f       	adc	r23, r23
     27e:	8a 95       	dec	r24
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_dac+0x20>
     282:	cb 01       	movw	r24, r22
     284:	94 2f       	mov	r25, r20
     286:	98 2b       	or	r25, r24
     288:	90 83       	st	Z, r25
     28a:	72 e4       	ldi	r23, 0x42	; 66
     28c:	7a 95       	dec	r23
     28e:	f1 f7       	brne	.-4      	; 0x28c <set_dac+0x32>
     290:	00 c0       	rjmp	.+0      	; 0x292 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     292:	90 81       	ld	r25, Z
     294:	80 95       	com	r24
     296:	89 23       	and	r24, r25
     298:	80 83       	st	Z, r24
	
}
     29a:	08 95       	ret

0000029c <display_dec>:
#include "display_map.h"



void display_dec(uint16_t number, uint8_t digit)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	2a 97       	sbiw	r28, 0x0a	; 10
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     2b0:	de 01       	movw	r26, r28
     2b2:	11 96       	adiw	r26, 0x01	; 1
     2b4:	ee e4       	ldi	r30, 0x4E	; 78
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	3a e0       	ldi	r19, 0x0A	; 10
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	31 50       	subi	r19, 0x01	; 1
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2c6:	ea ed       	ldi	r30, 0xDA	; 218
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	30 81       	ld	r19, Z
     2cc:	30 61       	ori	r19, 0x10	; 16
     2ce:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2d0:	30 81       	ld	r19, Z
     2d2:	3f 7e       	andi	r19, 0xEF	; 239
     2d4:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     2d6:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     2d8:	30 81       	ld	r19, Z
     2da:	30 62       	ori	r19, 0x20	; 32
     2dc:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     2de:	30 81       	ld	r19, Z
     2e0:	3f 7d       	andi	r19, 0xDF	; 223
     2e2:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
     2e4:	62 30       	cpi	r22, 0x02	; 2
     2e6:	f9 f0       	breq	.+62     	; 0x326 <display_dec+0x8a>
     2e8:	63 30       	cpi	r22, 0x03	; 3
     2ea:	18 f4       	brcc	.+6      	; 0x2f2 <display_dec+0x56>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	a1 f5       	brne	.+104    	; 0x358 <display_dec+0xbc>
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <display_dec+0x70>
     2f2:	64 30       	cpi	r22, 0x04	; 4
     2f4:	29 f1       	breq	.+74     	; 0x340 <display_dec+0xa4>
     2f6:	68 30       	cpi	r22, 0x08	; 8
     2f8:	79 f5       	brne	.+94     	; 0x358 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     2fa:	6a e0       	ldi	r22, 0x0A	; 10
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
     302:	fe 01       	movw	r30, r28
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     30a:	26 c0       	rjmp	.+76     	; 0x358 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     30c:	64 e6       	ldi	r22, 0x64	; 100
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
     314:	6a e0       	ldi	r22, 0x0A	; 10
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
     31c:	fe 01       	movw	r30, r28
     31e:	e6 0f       	add	r30, r22
     320:	f7 1f       	adc	r31, r23
     322:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     324:	19 c0       	rjmp	.+50     	; 0x358 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     326:	68 ee       	ldi	r22, 0xE8	; 232
     328:	73 e0       	ldi	r23, 0x03	; 3
     32a:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
     32e:	64 e6       	ldi	r22, 0x64	; 100
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
     336:	fe 01       	movw	r30, r28
     338:	e6 0f       	add	r30, r22
     33a:	f7 1f       	adc	r31, r23
     33c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     33e:	0c c0       	rjmp	.+24     	; 0x358 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     340:	60 e1       	ldi	r22, 0x10	; 16
     342:	77 e2       	ldi	r23, 0x27	; 39
     344:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
     348:	68 ee       	ldi	r22, 0xE8	; 232
     34a:	73 e0       	ldi	r23, 0x03	; 3
     34c:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
     350:	fe 01       	movw	r30, r28
     352:	e6 0f       	add	r30, r22
     354:	f7 1f       	adc	r31, r23
     356:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     358:	20 95       	com	r18
     35a:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     35c:	ea ed       	ldi	r30, 0xDA	; 218
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     366:	80 81       	ld	r24, Z
     368:	8f 7e       	andi	r24, 0xEF	; 239
     36a:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     36c:	2a 96       	adiw	r28, 0x0a	; 10
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <update_display+0x8>
     386:	00 d0       	rcall	.+0      	; 0x388 <update_display+0xa>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t place = 0;
	
	uint8_t digit[] = {
     38c:	28 e0       	ldi	r18, 0x08	; 8
     38e:	29 83       	std	Y+1, r18	; 0x01
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	2a 83       	std	Y+2, r18	; 0x02
     394:	22 e0       	ldi	r18, 0x02	; 2
     396:	2b 83       	std	Y+3, r18	; 0x03
     398:	24 e0       	ldi	r18, 0x04	; 4
     39a:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	if (type == DEC) {
     39c:	66 23       	and	r22, r22
     39e:	81 f4       	brne	.+32     	; 0x3c0 <update_display+0x42>

		
			
		display_dec(number, digit[place]);
     3a0:	10 91 f1 01 	lds	r17, 0x01F1
     3a4:	fe 01       	movw	r30, r28
     3a6:	e1 0f       	add	r30, r17
     3a8:	f1 1d       	adc	r31, r1
     3aa:	61 81       	ldd	r22, Z+1	; 0x01
     3ac:	0e 94 4e 01 	call	0x29c	; 0x29c <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     3b0:	81 2f       	mov	r24, r17
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	80 93 f1 01 	sts	0x01F1, r24
     3b8:	13 30       	cpi	r17, 0x03	; 3
     3ba:	11 f4       	brne	.+4      	; 0x3c0 <update_display+0x42>
		{
			place = 0;
     3bc:	10 92 f1 01 	sts	0x01F1, r1
		
		
	}
	
	
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <__vector_10>:

#include "hardware.h"
#include "tune.h"
#include "display.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
	compare_match_counter++;
     3e2:	80 91 92 02 	lds	r24, 0x0292
     3e6:	8f 5f       	subi	r24, 0xFF	; 255
     3e8:	80 93 92 02 	sts	0x0292, r24
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     3ec:	80 91 97 02 	lds	r24, 0x0297
     3f0:	81 50       	subi	r24, 0x01	; 1
     3f2:	87 bd       	out	0x27, r24	; 39
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp sync LED
     3f4:	85 b1       	in	r24, 0x05	; 5
     3f6:	80 58       	subi	r24, 0x80	; 128
     3f8:	85 b9       	out	0x05, r24	; 5
	if (period_counter == 0) {
     3fa:	80 91 98 02 	lds	r24, 0x0298
     3fe:	88 23       	and	r24, r24
     400:	a1 f4       	brne	.+40     	; 0x42a <__vector_10+0x5a>
		count_finished = FALSE;
     402:	10 92 95 02 	sts	0x0295, r1
		no_overflow = TRUE;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 ea 01 	sts	0x01EA, r24
		period_counter = 1; //set period counter to 1
     40c:	80 93 98 02 	sts	0x0298, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     410:	e1 e8       	ldi	r30, 0x81	; 129
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	90 91 96 02 	lds	r25, 0x0296
     41a:	89 2b       	or	r24, r25
     41c:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     41e:	ef e6       	ldi	r30, 0x6F	; 111
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	81 60       	ori	r24, 0x01	; 1
     426:	80 83       	st	Z, r24
     428:	18 c0       	rjmp	.+48     	; 0x45a <__vector_10+0x8a>
	} else {
		
		osc_count = TCNT1;
     42a:	e4 e8       	ldi	r30, 0x84	; 132
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	91 81       	ldd	r25, Z+1	; 0x01
     432:	90 93 94 02 	sts	0x0294, r25
     436:	80 93 93 02 	sts	0x0293, r24
		value_to_display = compare_match_counter;//osc_count;
     43a:	80 91 92 02 	lds	r24, 0x0292
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	90 93 97 01 	sts	0x0197, r25
     444:	80 93 96 01 	sts	0x0196, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     448:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	80 93 95 02 	sts	0x0295, r24
		period_counter = 0;
     452:	10 92 98 02 	sts	0x0298, r1
		TCNT1 = 0; //reset timer/counter 1
     456:	11 82       	std	Z+1, r1	; 0x01
     458:	10 82       	st	Z, r1
	}
	
	
	
	
}
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	9f 91       	pop	r25
     460:	8f 91       	pop	r24
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_9>:



ISR (TIMER1_OVF_vect) {
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     476:	10 92 ea 01 	sts	0x01EA, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp sync LED
	
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <note_off_event>:
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     484:	84 2f       	mov	r24, r20
	remove_note(note);
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
	gate_buffer--;
     48c:	80 91 f3 01 	lds	r24, 0x01F3
     490:	81 50       	subi	r24, 0x01	; 1
     492:	80 93 f3 01 	sts	0x01F3, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     496:	88 23       	and	r24, r24
     498:	09 f4       	brne	.+2      	; 0x49c <note_off_event+0x18>
     49a:	89 98       	cbi	0x11, 1	; 17
     49c:	08 95       	ret

0000049e <note_on_event>:
//MIDI gate buffer for note stealing
static uint8_t gate_buffer = 0;



void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     49e:	84 2f       	mov	r24, r20
	
	//value_to_display = note;
	midi_note_number = note;
     4a0:	40 93 32 02 	sts	0x0232, r20
	if (velocity == 0) {
     4a4:	22 23       	and	r18, r18
     4a6:	61 f4       	brne	.+24     	; 0x4c0 <note_on_event+0x22>
		remove_note(note);
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 ab 00 	call	0x156	; 0x156 <remove_note>
		gate_buffer--;
     4ae:	80 91 f3 01 	lds	r24, 0x01F3
     4b2:	81 50       	subi	r24, 0x01	; 1
     4b4:	80 93 f3 01 	sts	0x01F3, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     4b8:	88 23       	and	r24, r24
     4ba:	69 f4       	brne	.+26     	; 0x4d6 <note_on_event+0x38>
     4bc:	89 98       	cbi	0x11, 1	; 17
     4be:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	62 2f       	mov	r22, r18
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	0e 94 93 00 	call	0x126	; 0x126 <new_note>
		gate_buffer++; //increment gate_buffer
     4ca:	80 91 f3 01 	lds	r24, 0x01F3
     4ce:	8f 5f       	subi	r24, 0xFF	; 255
     4d0:	80 93 f3 01 	sts	0x01F3, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     4d4:	89 9a       	sbi	0x11, 1	; 17
     4d6:	08 95       	ret

000004d8 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     4d8:	87 e2       	ldi	r24, 0x27	; 39
     4da:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     4de:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     4e2:	88 e9       	ldi	r24, 0x98	; 152
     4e4:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     4e8:	08 95       	ret

000004ea <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     4ea:	1f 92       	push	r1
     4ec:	0f 92       	push	r0
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	0f 92       	push	r0
     4f2:	11 24       	eor	r1, r1
     4f4:	2f 93       	push	r18
     4f6:	3f 93       	push	r19
     4f8:	4f 93       	push	r20
     4fa:	5f 93       	push	r21
     4fc:	6f 93       	push	r22
     4fe:	7f 93       	push	r23
     500:	8f 93       	push	r24
     502:	9f 93       	push	r25
     504:	af 93       	push	r26
     506:	bf 93       	push	r27
     508:	ef 93       	push	r30
     50a:	ff 93       	push	r31
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	0f 92       	push	r0
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
	 
	uint8_t inByte = UDR0;
     516:	80 91 c6 00 	lds	r24, 0x00C6
     51a:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     51c:	89 e9       	ldi	r24, 0x99	; 153
     51e:	92 e0       	ldi	r25, 0x02	; 2
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	ae 01       	movw	r20, r28
     524:	4f 5f       	subi	r20, 0xFF	; 255
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	ff 91       	pop	r31
     534:	ef 91       	pop	r30
     536:	bf 91       	pop	r27
     538:	af 91       	pop	r26
     53a:	9f 91       	pop	r25
     53c:	8f 91       	pop	r24
     53e:	7f 91       	pop	r23
     540:	6f 91       	pop	r22
     542:	5f 91       	pop	r21
     544:	4f 91       	pop	r20
     546:	3f 91       	pop	r19
     548:	2f 91       	pop	r18
     54a:	0f 90       	pop	r0
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	0f 90       	pop	r0
     550:	1f 90       	pop	r1
     552:	18 95       	reti

00000554 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     554:	80 e8       	ldi	r24, 0x80	; 128
     556:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     558:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     55a:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     55c:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     55e:	9a 9a       	sbi	0x13, 2	; 19
	//PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
	PORTG |= (1<<TUNE_SELECT);
     560:	a2 9a       	sbi	0x14, 2	; 20
	
	setup_spi(); 
     562:	0e 94 62 04 	call	0x8c4	; 0x8c4 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     566:	a9 ed       	ldi	r26, 0xD9	; 217
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	8c 91       	ld	r24, X
     56c:	80 6c       	ori	r24, 0xC0	; 192
     56e:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     570:	ea ed       	ldi	r30, 0xDA	; 218
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	80 6c       	ori	r24, 0xC0	; 192
     578:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     57a:	81 b1       	in	r24, 0x01	; 1
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     580:	92 b1       	in	r25, 0x02	; 2
     582:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     584:	8c 91       	ld	r24, X
     586:	80 63       	ori	r24, 0x30	; 48
     588:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     58a:	80 81       	ld	r24, Z
     58c:	8f 7c       	andi	r24, 0xCF	; 207
     58e:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     590:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     592:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     596:	0e 94 14 01 	call	0x228	; 0x228 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     59a:	c9 e9       	ldi	r28, 0x99	; 153
     59c:	d2 e0       	ldi	r29, 0x02	; 2
     59e:	ce 01       	movw	r24, r28
     5a0:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     5a4:	ce 01       	movw	r24, r28
     5a6:	6f e4       	ldi	r22, 0x4F	; 79
     5a8:	72 e0       	ldi	r23, 0x02	; 2
     5aa:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     5ae:	ce 01       	movw	r24, r28
     5b0:	62 e4       	ldi	r22, 0x42	; 66
     5b2:	72 e0       	ldi	r23, 0x02	; 2
     5b4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     5b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     5bc:	0e 94 87 04 	call	0x90e	; 0x90e <update_spi>
	//TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
	//TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms
	

		
	sei(); //enable global interrupts
     5c0:	78 94       	sei
	
	////set initial pitch offset CVs
	vco1_init_cv = set_vco_init_cv(VCO1, 24079);
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	6f e0       	ldi	r22, 0x0F	; 15
     5c6:	7e e5       	ldi	r23, 0x5E	; 94
     5c8:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <set_vco_init_cv>
     5cc:	90 93 91 02 	sts	0x0291, r25
     5d0:	80 93 90 02 	sts	0x0290, r24
	vco2_init_cv = set_vco_init_cv(VCO2, 24079);
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	6f e0       	ldi	r22, 0x0F	; 15
     5d8:	7e e5       	ldi	r23, 0x5E	; 94
     5da:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <set_vco_init_cv>
     5de:	90 93 8f 02 	sts	0x028F, r25
     5e2:	80 93 8e 02 	sts	0x028E, r24
	value_to_display = compare_match_counter;//vco1_init_cv;
     5e6:	80 91 92 02 	lds	r24, 0x0292
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	90 93 97 01 	sts	0x0197, r25
     5f0:	80 93 96 01 	sts	0x0196, r24
	
	

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     5f4:	ce 01       	movw	r24, r28
     5f6:	0e 94 a9 10 	call	0x2152	; 0x2152 <midi_device_process>
	
		update_display(value_to_display, DEC);
     5fa:	80 91 96 01 	lds	r24, 0x0196
     5fe:	90 91 97 01 	lds	r25, 0x0197
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
			
		scan_pots_and_update_control_voltages();
     608:	0e 94 13 03 	call	0x626	; 0x626 <scan_pots_and_update_control_voltages>
			
		//do SPI read/write every loops - whole section needs major update
		if (switch_timer++ == 5)
     60c:	80 91 f2 01 	lds	r24, 0x01F2
     610:	98 2f       	mov	r25, r24
     612:	9f 5f       	subi	r25, 0xFF	; 255
     614:	90 93 f2 01 	sts	0x01F2, r25
     618:	85 30       	cpi	r24, 0x05	; 5
     61a:	61 f7       	brne	.-40     	; 0x5f4 <main+0xa0>
		{
			switch_timer = 0;
     61c:	10 92 f2 01 	sts	0x01F2, r1
			update_spi();
     620:	0e 94 87 04 	call	0x90e	; 0x90e <update_spi>
     624:	e7 cf       	rjmp	.-50     	; 0x5f4 <main+0xa0>

00000626 <scan_pots_and_update_control_voltages>:
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     626:	4f 92       	push	r4
     628:	5f 92       	push	r5
     62a:	6f 92       	push	r6
     62c:	7f 92       	push	r7
     62e:	8f 92       	push	r8
     630:	9f 92       	push	r9
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     646:	02 e1       	ldi	r16, 0x12	; 18
     648:	12 e0       	ldi	r17, 0x02	; 2
     64a:	0f 2e       	mov	r0, r31
     64c:	f6 e7       	ldi	r31, 0x76	; 118
     64e:	cf 2e       	mov	r12, r31
     650:	f1 e0       	ldi	r31, 0x01	; 1
     652:	df 2e       	mov	r13, r31
     654:	f0 2d       	mov	r31, r0
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
	
void scan_pots_and_update_control_voltages(void) {
     656:	ee 24       	eor	r14, r14
     658:	ff 24       	eor	r15, r15
     65a:	e3 94       	inc	r14
     65c:	c0 e0       	ldi	r28, 0x00	; 0
     65e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     660:	0f 2e       	mov	r0, r31
     662:	fa e3       	ldi	r31, 0x3A	; 58
     664:	8f 2e       	mov	r8, r31
     666:	f1 e0       	ldi	r31, 0x01	; 1
     668:	9f 2e       	mov	r9, r31
     66a:	f0 2d       	mov	r31, r0
				
				break;
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     66c:	aa 24       	eor	r10, r10
     66e:	bb 24       	eor	r11, r11
     670:	68 94       	set
     672:	b1 f8       	bld	r11, 1
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     674:	0f 2e       	mov	r0, r31
     676:	f8 e3       	ldi	r31, 0x38	; 56
     678:	6f 2e       	mov	r6, r31
     67a:	f1 e0       	ldi	r31, 0x01	; 1
     67c:	7f 2e       	mov	r7, r31
     67e:	f0 2d       	mov	r31, r0
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     680:	0f 2e       	mov	r0, r31
     682:	f2 e4       	ldi	r31, 0x42	; 66
     684:	4f 2e       	mov	r4, r31
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	5f 2e       	mov	r5, r31
     68a:	f0 2d       	mov	r31, r0
     68c:	08 c0       	rjmp	.+16     	; 0x69e <scan_pots_and_update_control_voltages+0x78>
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     68e:	21 96       	adiw	r28, 0x01	; 1
     690:	08 94       	sec
     692:	e1 1c       	adc	r14, r1
     694:	f1 1c       	adc	r15, r1
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	c8 0e       	add	r12, r24
     69c:	d9 1e       	adc	r13, r25

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
	{

		adc_value = read_pot(POTMUX_EN0, i);
     69e:	86 e0       	ldi	r24, 0x06	; 6
     6a0:	6c 2f       	mov	r22, r28
     6a2:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     6a6:	90 93 38 02 	sts	0x0238, r25
     6aa:	80 93 37 02 	sts	0x0237, r24
		//implement IIR digital low pass filter - change pot value only by some fraction (>>2) of the difference between the new and old value
		int adc_change = adc_value - pot_group_0[i];
     6ae:	80 91 37 02 	lds	r24, 0x0237
     6b2:	90 91 38 02 	lds	r25, 0x0238
     6b6:	d8 01       	movw	r26, r16
     6b8:	6d 91       	ld	r22, X+
     6ba:	7c 91       	ld	r23, X
     6bc:	11 97       	sbiw	r26, 0x01	; 1
     6be:	86 1b       	sub	r24, r22
     6c0:	97 0b       	sbc	r25, r23
		pot_group_0[i] = pot_group_0[i] + (adc_change >> 2);
     6c2:	95 95       	asr	r25
     6c4:	87 95       	ror	r24
     6c6:	95 95       	asr	r25
     6c8:	87 95       	ror	r24
     6ca:	9c 01       	movw	r18, r24
     6cc:	26 0f       	add	r18, r22
     6ce:	37 1f       	adc	r19, r23
     6d0:	f8 01       	movw	r30, r16
     6d2:	21 93       	st	Z+, r18
     6d4:	31 93       	st	Z+, r19
     6d6:	8f 01       	movw	r16, r30
		int fine_offset = 0;
		
		switch (i)
     6d8:	c8 30       	cpi	r28, 0x08	; 8
     6da:	d1 05       	cpc	r29, r1
     6dc:	71 f0       	breq	.+28     	; 0x6fa <scan_pots_and_update_control_voltages+0xd4>
     6de:	c9 30       	cpi	r28, 0x09	; 9
     6e0:	d1 05       	cpc	r29, r1
     6e2:	24 f4       	brge	.+8      	; 0x6ec <scan_pots_and_update_control_voltages+0xc6>
     6e4:	c4 30       	cpi	r28, 0x04	; 4
     6e6:	d1 05       	cpc	r29, r1
     6e8:	b1 f5       	brne	.+108    	; 0x756 <scan_pots_and_update_control_voltages+0x130>
     6ea:	2a c0       	rjmp	.+84     	; 0x740 <scan_pots_and_update_control_voltages+0x11a>
     6ec:	c9 30       	cpi	r28, 0x09	; 9
     6ee:	d1 05       	cpc	r29, r1
     6f0:	b1 f0       	breq	.+44     	; 0x71e <scan_pots_and_update_control_voltages+0xf8>
     6f2:	cb 30       	cpi	r28, 0x0B	; 11
     6f4:	d1 05       	cpc	r29, r1
     6f6:	79 f5       	brne	.+94     	; 0x756 <scan_pots_and_update_control_voltages+0x130>
     6f8:	3a c0       	rjmp	.+116    	; 0x76e <scan_pots_and_update_control_voltages+0x148>
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     6fa:	60 91 8e 02 	lds	r22, 0x028E
     6fe:	70 91 8f 02 	lds	r23, 0x028F
		switch (i)
		{
			case 8: //exception for VCO2 fine
				
				//value_to_display = pot_group_0[i];
				fine_offset = 512 - pot_group_0[i];
     702:	60 50       	subi	r22, 0x00	; 0
     704:	7e 4f       	sbci	r23, 0xFE	; 254
				set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     706:	80 91 33 02 	lds	r24, 0x0233
     70a:	90 91 34 02 	lds	r25, 0x0234
     70e:	68 0f       	add	r22, r24
     710:	79 1f       	adc	r23, r25
     712:	62 1b       	sub	r22, r18
     714:	73 0b       	sbc	r23, r19
     716:	c4 01       	movw	r24, r8
     718:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				
				break;
     71c:	b8 cf       	rjmp	.-144    	; 0x68e <scan_pots_and_update_control_voltages+0x68>
			
			case 9: //exception for TUNE - apply to both VCO1 and VCO2

				tune_offset = 512 - pot_group_0[i];
     71e:	b5 01       	movw	r22, r10
     720:	62 1b       	sub	r22, r18
     722:	73 0b       	sbc	r23, r19
     724:	70 93 34 02 	sts	0x0234, r23
     728:	60 93 33 02 	sts	0x0233, r22
				set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     72c:	80 91 90 02 	lds	r24, 0x0290
     730:	90 91 91 02 	lds	r25, 0x0291
     734:	68 0f       	add	r22, r24
     736:	79 1f       	adc	r23, r25
     738:	c3 01       	movw	r24, r6
     73a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     73e:	a7 cf       	rjmp	.-178    	; 0x68e <scan_pots_and_update_control_voltages+0x68>
			
				break;
				
			case 4: //LFO pitch modulation depth control - reduce by 1/4
				
				set_control_voltage(&pitch_lfo_cv, pot_group_0[i] << 3);	//1/4 scale allows for easier vibrato settings
     740:	b9 01       	movw	r22, r18
     742:	66 0f       	add	r22, r22
     744:	77 1f       	adc	r23, r23
     746:	66 0f       	add	r22, r22
     748:	77 1f       	adc	r23, r23
     74a:	66 0f       	add	r22, r22
     74c:	77 1f       	adc	r23, r23
     74e:	c2 01       	movw	r24, r4
     750:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				break;
     754:	9c cf       	rjmp	.-200    	; 0x68e <scan_pots_and_update_control_voltages+0x68>
			
			default: //set control voltage full-scale
				set_control_voltage(pot_decoder_0[i], pot_group_0[i] << 4);
     756:	b9 01       	movw	r22, r18
     758:	62 95       	swap	r22
     75a:	72 95       	swap	r23
     75c:	70 7f       	andi	r23, 0xF0	; 240
     75e:	76 27       	eor	r23, r22
     760:	60 7f       	andi	r22, 0xF0	; 240
     762:	76 27       	eor	r23, r22
     764:	d6 01       	movw	r26, r12
     766:	8d 91       	ld	r24, X+
     768:	9c 91       	ld	r25, X
     76a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	}; 
	
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     76e:	b0 e1       	ldi	r27, 0x10	; 16
     770:	eb 16       	cp	r14, r27
     772:	f1 04       	cpc	r15, r1
     774:	0c f4       	brge	.+2      	; 0x778 <scan_pots_and_update_control_voltages+0x152>
     776:	8b cf       	rjmp	.-234    	; 0x68e <scan_pots_and_update_control_voltages+0x68>
     778:	04 ef       	ldi	r16, 0xF4	; 244
     77a:	11 e0       	ldi	r17, 0x01	; 1
     77c:	0f 2e       	mov	r0, r31
     77e:	f8 e5       	ldi	r31, 0x58	; 88
     780:	ef 2e       	mov	r14, r31
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	ff 2e       	mov	r15, r31
     786:	f0 2d       	mov	r31, r0
     788:	c1 e0       	ldi	r28, 0x01	; 1
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     78a:	87 e0       	ldi	r24, 0x07	; 7
     78c:	6c 2f       	mov	r22, r28
     78e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     792:	90 93 38 02 	sts	0x0238, r25
     796:	80 93 37 02 	sts	0x0237, r24
		int adc_change = adc_value - pot_group_1[i];
     79a:	60 91 37 02 	lds	r22, 0x0237
     79e:	70 91 38 02 	lds	r23, 0x0238
     7a2:	f8 01       	movw	r30, r16
     7a4:	80 81       	ld	r24, Z
     7a6:	91 81       	ldd	r25, Z+1	; 0x01
     7a8:	68 1b       	sub	r22, r24
     7aa:	79 0b       	sbc	r23, r25
		pot_group_1[i] = pot_group_1[i] + (adc_change >> 2);		
     7ac:	75 95       	asr	r23
     7ae:	67 95       	ror	r22
     7b0:	75 95       	asr	r23
     7b2:	67 95       	ror	r22
     7b4:	68 0f       	add	r22, r24
     7b6:	79 1f       	adc	r23, r25
     7b8:	d8 01       	movw	r26, r16
     7ba:	6d 93       	st	X+, r22
     7bc:	7d 93       	st	X+, r23
     7be:	8d 01       	movw	r16, r26
		
		set_control_voltage(pot_decoder_1[i], pot_group_1[i] <<4);
     7c0:	62 95       	swap	r22
     7c2:	72 95       	swap	r23
     7c4:	70 7f       	andi	r23, 0xF0	; 240
     7c6:	76 27       	eor	r23, r22
     7c8:	60 7f       	andi	r22, 0xF0	; 240
     7ca:	76 27       	eor	r23, r22
     7cc:	f7 01       	movw	r30, r14
     7ce:	81 91       	ld	r24, Z+
     7d0:	91 91       	ld	r25, Z+
     7d2:	7f 01       	movw	r14, r30
     7d4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
     7d8:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
	}
	
	//now read second set of pots from U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     7da:	c0 31       	cpi	r28, 0x10	; 16
     7dc:	b1 f6       	brne	.-84     	; 0x78a <scan_pots_and_update_control_voltages+0x164>
	}
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	
	uint8_t note = get_current_note();
     7de:	0e 94 90 00 	call	0x120	; 0x120 <get_current_note>
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     7e2:	88 30       	cpi	r24, 0x08	; 8
     7e4:	08 f4       	brcc	.+2      	; 0x7e8 <scan_pots_and_update_control_voltages+0x1c2>
     7e6:	88 e0       	ldi	r24, 0x08	; 8
	value_to_display = note;
     7e8:	28 2f       	mov	r18, r24
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	30 93 97 01 	sts	0x0197, r19
     7f0:	20 93 96 01 	sts	0x0196, r18
	uint8_t pitch_index = note>>3;
     7f4:	98 2f       	mov	r25, r24
     7f6:	96 95       	lsr	r25
     7f8:	96 95       	lsr	r25
     7fa:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
     7fc:	29 2f       	mov	r18, r25
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	e9 01       	movw	r28, r18
     802:	21 97       	sbiw	r28, 0x01	; 1
     804:	4c e6       	ldi	r20, 0x6C	; 108
     806:	52 e0       	ldi	r21, 0x02	; 2
     808:	cc 0f       	add	r28, r28
     80a:	dd 1f       	adc	r29, r29
     80c:	fa 01       	movw	r30, r20
     80e:	ec 0f       	add	r30, r28
     810:	fd 1f       	adc	r31, r29
     812:	01 90       	ld	r0, Z+
     814:	f0 81       	ld	r31, Z
     816:	e0 2d       	mov	r30, r0
	
	uint8_t note = get_current_note();
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
	value_to_display = note;
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
     818:	99 0f       	add	r25, r25
     81a:	99 0f       	add	r25, r25
     81c:	99 0f       	add	r25, r25
     81e:	89 1b       	sub	r24, r25
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
	uint16_t y1 = vco1_pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>
     820:	e8 2e       	mov	r14, r24
     822:	ff 24       	eor	r15, r15
	value_to_display = note;
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = vco1_pitch_table[pitch_index -1];
	uint16_t y1 = vco1_pitch_table[pitch_index];
     824:	89 01       	movw	r16, r18
     826:	00 0f       	add	r16, r16
     828:	11 1f       	adc	r17, r17
     82a:	40 0f       	add	r20, r16
     82c:	51 1f       	adc	r21, r17
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>
     82e:	da 01       	movw	r26, r20
     830:	8d 91       	ld	r24, X+
     832:	9c 91       	ld	r25, X
     834:	8e 1b       	sub	r24, r30
     836:	9f 0b       	sbc	r25, r31
     838:	8e 9d       	mul	r24, r14
     83a:	b0 01       	movw	r22, r0
     83c:	8f 9d       	mul	r24, r15
     83e:	70 0d       	add	r23, r0
     840:	9e 9d       	mul	r25, r14
     842:	70 0d       	add	r23, r0
     844:	11 24       	eor	r1, r1
     846:	76 95       	lsr	r23
     848:	67 95       	ror	r22
     84a:	76 95       	lsr	r23
     84c:	67 95       	ror	r22
     84e:	76 95       	lsr	r23
     850:	67 95       	ror	r22
     852:	6e 0f       	add	r22, r30
     854:	7f 1f       	adc	r23, r31
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     856:	8c e4       	ldi	r24, 0x4C	; 76
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	y0 = vco2_pitch_table[pitch_index - 1];
     85e:	8a e4       	ldi	r24, 0x4A	; 74
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	c8 0f       	add	r28, r24
     864:	d9 1f       	adc	r29, r25
     866:	48 81       	ld	r20, Y
     868:	59 81       	ldd	r21, Y+1	; 0x01
	y1 = vco2_pitch_table[pitch_index];
     86a:	80 0f       	add	r24, r16
     86c:	91 1f       	adc	r25, r17
	
	interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3);
     86e:	fc 01       	movw	r30, r24
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	84 1b       	sub	r24, r20
     876:	95 0b       	sbc	r25, r21
     878:	8e 9d       	mul	r24, r14
     87a:	b0 01       	movw	r22, r0
     87c:	8f 9d       	mul	r24, r15
     87e:	70 0d       	add	r23, r0
     880:	9e 9d       	mul	r25, r14
     882:	70 0d       	add	r23, r0
     884:	11 24       	eor	r1, r1
     886:	76 95       	lsr	r23
     888:	67 95       	ror	r22
     88a:	76 95       	lsr	r23
     88c:	67 95       	ror	r22
     88e:	76 95       	lsr	r23
     890:	67 95       	ror	r22
     892:	64 0f       	add	r22, r20
     894:	75 1f       	adc	r23, r21
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv); 
     896:	8a e4       	ldi	r24, 0x4A	; 74
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     89e:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     8a0:	a1 9a       	sbi	0x14, 1	; 20
	
	
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	af 90       	pop	r10
     8b6:	9f 90       	pop	r9
     8b8:	8f 90       	pop	r8
     8ba:	7f 90       	pop	r7
     8bc:	6f 90       	pop	r6
     8be:	5f 90       	pop	r5
     8c0:	4f 90       	pop	r4
     8c2:	08 95       	ret

000008c4 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     8c4:	84 b1       	in	r24, 0x04	; 4
     8c6:	87 62       	ori	r24, 0x27	; 39
     8c8:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     8ca:	ec ed       	ldi	r30, 0xDC	; 220
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	8c 65       	ori	r24, 0x5C	; 92
     8d2:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     8d4:	85 b1       	in	r24, 0x05	; 5
     8d6:	89 7d       	andi	r24, 0xD9	; 217
     8d8:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     8da:	ed ed       	ldi	r30, 0xDD	; 221
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	83 7f       	andi	r24, 0xF3	; 243
     8e2:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     8e4:	80 e5       	ldi	r24, 0x50	; 80
     8e6:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     8e8:	80 81       	ld	r24, Z
     8ea:	87 7f       	andi	r24, 0xF7	; 247
     8ec:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     8ee:	80 81       	ld	r24, Z
     8f0:	87 7f       	andi	r24, 0xF7	; 247
     8f2:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     8f4:	80 81       	ld	r24, Z
     8f6:	88 60       	ori	r24, 0x08	; 8
     8f8:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     8fa:	80 81       	ld	r24, Z
     8fc:	8f 7e       	andi	r24, 0xEF	; 239
     8fe:	80 83       	st	Z, r24
	
}
     900:	08 95       	ret

00000902 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     902:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     904:	0d b4       	in	r0, 0x2d	; 45
     906:	07 fe       	sbrs	r0, 7
     908:	fd cf       	rjmp	.-6      	; 0x904 <spi_shift_byte+0x2>
	return SPDR;
     90a:	8e b5       	in	r24, 0x2e	; 46
	
}
     90c:	08 95       	ret

0000090e <update_spi>:

void update_spi(void) {
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
	
			SPI_PORT |= SPI_SW_LATCH;
     91a:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE
			uint8_t spi_data = 
			((sw_latch_five >> ISW4_SW) & 1) << VCO_SYNC_LED |
     91c:	a0 91 3f 02 	lds	r26, 0x023F
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW_LED |
     920:	e0 90 3f 02 	lds	r14, 0x023F
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI_LED |
     924:	c0 91 3f 02 	lds	r28, 0x023F
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = 
     928:	80 91 3f 02 	lds	r24, 0x023F
			((sw_latch_five >> ISW4_SW) & 1) << VCO_SYNC_LED |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW_LED |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI_LED |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE_LED |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW_LED |
     92c:	e0 91 3f 02 	lds	r30, 0x023F
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI_LED |
     930:	40 91 3f 02 	lds	r20, 0x023F
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE_LED |
     934:	20 91 3f 02 	lds	r18, 0x023F
			BMOD_SW_ON << BMOD_LED;
     938:	90 91 42 02 	lds	r25, 0x0242
     93c:	97 95       	ror	r25
     93e:	99 27       	eor	r25, r25
     940:	97 95       	ror	r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = 
     942:	81 70       	andi	r24, 0x01	; 1
     944:	98 2b       	or	r25, r24
			((sw_latch_five >> ISW4_SW) & 1) << VCO_SYNC_LED |
     946:	aa 1f       	adc	r26, r26
     948:	aa 27       	eor	r26, r26
     94a:	aa 1f       	adc	r26, r26
     94c:	aa 0f       	add	r26, r26
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = 
     94e:	a9 2b       	or	r26, r25
			((sw_latch_five >> ISW4_SW) & 1) << VCO_SYNC_LED |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW_LED |
     950:	e6 94       	lsr	r14
     952:	e6 94       	lsr	r14
     954:	ff 24       	eor	r15, r15
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	e8 22       	and	r14, r24
     95a:	ff 24       	eor	r15, r15
     95c:	87 01       	movw	r16, r14
     95e:	00 0f       	add	r16, r16
     960:	11 1f       	adc	r17, r17
     962:	00 0f       	add	r16, r16
     964:	11 1f       	adc	r17, r17
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = 
     966:	0a 2b       	or	r16, r26
			((sw_latch_five >> ISW4_SW) & 1) << VCO_SYNC_LED |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW_LED |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI_LED |
     968:	c6 95       	lsr	r28
     96a:	d0 e0       	ldi	r29, 0x00	; 0
     96c:	c1 70       	andi	r28, 0x01	; 1
     96e:	d0 70       	andi	r29, 0x00	; 0
     970:	de 01       	movw	r26, r28
     972:	aa 0f       	add	r26, r26
     974:	bb 1f       	adc	r27, r27
     976:	aa 0f       	add	r26, r26
     978:	bb 1f       	adc	r27, r27
     97a:	aa 0f       	add	r26, r26
     97c:	bb 1f       	adc	r27, r27
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = 
     97e:	a0 2b       	or	r26, r16
			((sw_latch_five >> ISW4_SW) & 1) << VCO_SYNC_LED |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW_LED |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI_LED |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE_LED |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW_LED |
     980:	e2 95       	swap	r30
     982:	ef 70       	andi	r30, 0x0F	; 15
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	e1 70       	andi	r30, 0x01	; 1
     988:	f0 70       	andi	r31, 0x00	; 0
     98a:	bf 01       	movw	r22, r30
     98c:	62 95       	swap	r22
     98e:	72 95       	swap	r23
     990:	70 7f       	andi	r23, 0xF0	; 240
     992:	76 27       	eor	r23, r22
     994:	60 7f       	andi	r22, 0xF0	; 240
     996:	76 27       	eor	r23, r22
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = 
     998:	6a 2b       	or	r22, r26
			((sw_latch_five >> ISW4_SW) & 1) << VCO_SYNC_LED |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW_LED |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI_LED |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE_LED |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW_LED |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI_LED |
     99a:	42 95       	swap	r20
     99c:	46 95       	lsr	r20
     99e:	47 70       	andi	r20, 0x07	; 7
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	41 70       	andi	r20, 0x01	; 1
     9a4:	50 70       	andi	r21, 0x00	; 0
     9a6:	ca 01       	movw	r24, r20
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	82 95       	swap	r24
     9ae:	92 95       	swap	r25
     9b0:	90 7f       	andi	r25, 0xF0	; 240
     9b2:	98 27       	eor	r25, r24
     9b4:	80 7f       	andi	r24, 0xF0	; 240
     9b6:	98 27       	eor	r25, r24
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			uint8_t spi_data = 
     9b8:	86 2b       	or	r24, r22
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW_LED |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI_LED |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE_LED |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW_LED |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI_LED |
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE_LED |
     9ba:	22 95       	swap	r18
     9bc:	26 95       	lsr	r18
     9be:	26 95       	lsr	r18
     9c0:	23 70       	andi	r18, 0x03	; 3
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	21 70       	andi	r18, 0x01	; 1
     9c6:	30 70       	andi	r19, 0x00	; 0
     9c8:	00 24       	eor	r0, r0
     9ca:	36 95       	lsr	r19
     9cc:	27 95       	ror	r18
     9ce:	07 94       	ror	r0
     9d0:	36 95       	lsr	r19
     9d2:	27 95       	ror	r18
     9d4:	07 94       	ror	r0
     9d6:	32 2f       	mov	r19, r18
     9d8:	20 2d       	mov	r18, r0
			BMOD_SW_ON << BMOD_LED;
			
					
			//Now read SPDR for switch data shifted in from 74XX165 U14
			spi_sw_current_state = spi_shift_byte(spi_data);
     9da:	82 2b       	or	r24, r18
     9dc:	0e 94 81 04 	call	0x902	; 0x902 <spi_shift_byte>
     9e0:	80 93 41 02 	sts	0x0241, r24
			
			spi_sw_current_state ^= spi_sw_previous_state;
     9e4:	80 91 41 02 	lds	r24, 0x0241
     9e8:	90 91 40 02 	lds	r25, 0x0240
     9ec:	89 27       	eor	r24, r25
     9ee:	80 93 41 02 	sts	0x0241, r24
			spi_sw_previous_state ^= spi_sw_current_state;
     9f2:	80 91 40 02 	lds	r24, 0x0240
     9f6:	90 91 41 02 	lds	r25, 0x0241
     9fa:	89 27       	eor	r24, r25
     9fc:	80 93 40 02 	sts	0x0240, r24
			spi_sw_current_state &= spi_sw_previous_state;
     a00:	80 91 41 02 	lds	r24, 0x0241
     a04:	90 91 40 02 	lds	r25, 0x0240
     a08:	89 23       	and	r24, r25
     a0a:	80 93 41 02 	sts	0x0241, r24
			
			//toggle switch state		
			sw_latch_five ^= spi_sw_current_state; //Omar's solution.
     a0e:	80 91 3f 02 	lds	r24, 0x023F
     a12:	90 91 41 02 	lds	r25, 0x0241
     a16:	89 27       	eor	r24, r25
     a18:	80 93 3f 02 	sts	0x023F, r24
			
			//SHIFT 4th BYTE
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			spi_data = (1<<VCO2_32F | 1<<VCO1_32F);
			sw_latch_four = spi_shift_byte(spi_data);
     a1c:	82 e2       	ldi	r24, 0x22	; 34
     a1e:	0e 94 81 04 	call	0x902	; 0x902 <spi_shift_byte>
     a22:	80 93 3e 02 	sts	0x023E, r24
			//toggling not implemented here yet.
			ISW12_SW_ON = (sw_latch_four >> ISW12_SW) & 1;
     a26:	80 91 3e 02 	lds	r24, 0x023E
     a2a:	82 95       	swap	r24
     a2c:	86 95       	lsr	r24
     a2e:	87 70       	andi	r24, 0x07	; 7
     a30:	81 70       	andi	r24, 0x01	; 1
     a32:	80 93 45 02 	sts	0x0245, r24
			//check if ISW13_SW bit is set
			ISW13_SW_ON = (sw_latch_four >> ISW13_SW) & 1;
     a36:	80 91 3e 02 	lds	r24, 0x023E
     a3a:	82 95       	swap	r24
     a3c:	86 95       	lsr	r24
     a3e:	86 95       	lsr	r24
     a40:	83 70       	andi	r24, 0x03	; 3
     a42:	81 70       	andi	r24, 0x01	; 1
     a44:	80 93 44 02 	sts	0x0244, r24

			
			//SHIFT 3th BYTE
			sw_latch_three = spi_shift_byte(0);
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0e 94 81 04 	call	0x902	; 0x902 <spi_shift_byte>
     a4e:	80 93 3d 02 	sts	0x023D, r24

			//SHIFT 2th BYTE
			sw_latch_two = spi_shift_byte(0);
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	0e 94 81 04 	call	0x902	; 0x902 <spi_shift_byte>
     a58:	80 93 3c 02 	sts	0x023C, r24
			
			//SHIFT 1st BYTE
			
			spi_data = (ISW12_SW_ON << ARP_MODE_LED) | (PROG_WRITE_ON << PROG_WRITE_LED) | (EG2_INV_ON << EG2_INV_LED); 
     a5c:	20 91 45 02 	lds	r18, 0x0245
     a60:	80 91 46 02 	lds	r24, 0x0246
     a64:	90 91 47 02 	lds	r25, 0x0247
     a68:	22 0f       	add	r18, r18
     a6a:	22 0f       	add	r18, r18
     a6c:	87 95       	ror	r24
     a6e:	88 27       	eor	r24, r24
     a70:	87 95       	ror	r24
     a72:	82 2b       	or	r24, r18
			//Wait for SPI shift to complete
			sw_latch_one = spi_shift_byte(spi_data);
     a74:	89 2b       	or	r24, r25
     a76:	0e 94 81 04 	call	0x902	; 0x902 <spi_shift_byte>
     a7a:	80 93 3b 02 	sts	0x023B, r24
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     a7e:	ed ed       	ldi	r30, 0xDD	; 221
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	87 7f       	andi	r24, 0xF7	; 247
     a86:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     a88:	80 81       	ld	r24, Z
     a8a:	88 60       	ori	r24, 0x08	; 8
     a8c:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     a8e:	2d 98       	cbi	0x05, 5	; 5
			
			//now read switches directly connected to MCU
			//this toggle code works, but I haven't figured out how it works
			//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
			current_sw_state = SWITCH_PORT;
     a90:	9f b1       	in	r25, 0x0f	; 15
			current_sw_state ^= previous_sw_state;
     a92:	80 91 49 02 	lds	r24, 0x0249
     a96:	98 27       	eor	r25, r24
			previous_sw_state ^= current_sw_state;
     a98:	89 27       	eor	r24, r25
     a9a:	80 93 49 02 	sts	0x0249, r24
			current_sw_state &= previous_sw_state;
     a9e:	89 23       	and	r24, r25
     aa0:	80 93 48 02 	sts	0x0248, r24
			
			if (current_sw_state & (1<<BMOD_SW))
     aa4:	82 ff       	sbrs	r24, 2
     aa6:	06 c0       	rjmp	.+12     	; 0xab4 <update_spi+0x1a6>
			{
				BMOD_SW_ON ^= 1 << 0; //toggle switch state
     aa8:	20 91 42 02 	lds	r18, 0x0242
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	92 27       	eor	r25, r18
     ab0:	90 93 42 02 	sts	0x0242, r25
			}
			
			if (current_sw_state & (1<<PROG_WRITE)) {
     ab4:	84 ff       	sbrs	r24, 4
     ab6:	06 c0       	rjmp	.+12     	; 0xac4 <update_spi+0x1b6>
				
				PROG_WRITE_ON ^= 1 << 0; //toggle switch state
     ab8:	20 91 46 02 	lds	r18, 0x0246
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	92 27       	eor	r25, r18
     ac0:	90 93 46 02 	sts	0x0246, r25
			}
			
			if (current_sw_state & (1<<EG2_INV)) {
     ac4:	83 ff       	sbrs	r24, 3
     ac6:	06 c0       	rjmp	.+12     	; 0xad4 <update_spi+0x1c6>
				
				EG2_INV_ON ^= 1 << 0; //toggle switch state
     ac8:	90 91 47 02 	lds	r25, 0x0247
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	89 27       	eor	r24, r25
     ad0:	80 93 47 02 	sts	0x0247, r24
			}
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     ad4:	ed ed       	ldi	r30, 0xDD	; 221
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	8f 7b       	andi	r24, 0xBF	; 191
     adc:	80 83       	st	Z, r24
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
     ade:	40 91 3f 02 	lds	r20, 0x023F
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     ae2:	30 91 3f 02 	lds	r19, 0x023F
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
     ae6:	c0 91 3f 02 	lds	r28, 0x023F
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
     aea:	00 91 3f 02 	lds	r16, 0x023F
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
     aee:	60 91 3f 02 	lds	r22, 0x023F
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
     af2:	a0 91 3f 02 	lds	r26, 0x023F
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
     af6:	20 91 3f 02 	lds	r18, 0x023F
			BMOD_SW_ON << BMOD;
     afa:	80 91 42 02 	lds	r24, 0x0242
     afe:	82 95       	swap	r24
     b00:	80 7f       	andi	r24, 0xF0	; 240
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     b02:	36 95       	lsr	r19
     b04:	36 95       	lsr	r19
     b06:	31 70       	andi	r19, 0x01	; 1
     b08:	38 2b       	or	r19, r24
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
     b0a:	10 e0       	ldi	r17, 0x00	; 0
     b0c:	01 70       	andi	r16, 0x01	; 1
     b0e:	10 70       	andi	r17, 0x00	; 0
     b10:	c8 01       	movw	r24, r16
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     b16:	83 2b       	or	r24, r19
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
     b18:	a2 95       	swap	r26
     b1a:	a6 95       	lsr	r26
     b1c:	a7 70       	andi	r26, 0x07	; 7
     b1e:	a7 95       	ror	r26
     b20:	aa 27       	eor	r26, r26
     b22:	a7 95       	ror	r26
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     b24:	8a 2b       	or	r24, r26
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
     b26:	44 1f       	adc	r20, r20
     b28:	44 27       	eor	r20, r20
     b2a:	44 1f       	adc	r20, r20
     b2c:	44 0f       	add	r20, r20
     b2e:	44 0f       	add	r20, r20
     b30:	44 0f       	add	r20, r20
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     b32:	48 2b       	or	r20, r24
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
     b34:	c6 95       	lsr	r28
     b36:	d0 e0       	ldi	r29, 0x00	; 0
     b38:	c1 70       	andi	r28, 0x01	; 1
     b3a:	d0 70       	andi	r29, 0x00	; 0
     b3c:	de 01       	movw	r26, r28
     b3e:	aa 0f       	add	r26, r26
     b40:	bb 1f       	adc	r27, r27
     b42:	aa 0f       	add	r26, r26
     b44:	bb 1f       	adc	r27, r27
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     b46:	a4 2b       	or	r26, r20
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
     b48:	62 95       	swap	r22
     b4a:	6f 70       	andi	r22, 0x0F	; 15
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	61 70       	andi	r22, 0x01	; 1
     b50:	70 70       	andi	r23, 0x00	; 0
     b52:	ab 01       	movw	r20, r22
     b54:	00 24       	eor	r0, r0
     b56:	56 95       	lsr	r21
     b58:	47 95       	ror	r20
     b5a:	07 94       	ror	r0
     b5c:	56 95       	lsr	r21
     b5e:	47 95       	ror	r20
     b60:	07 94       	ror	r0
     b62:	54 2f       	mov	r21, r20
     b64:	40 2d       	mov	r20, r0
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     b66:	4a 2b       	or	r20, r26
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
     b68:	22 95       	swap	r18
     b6a:	26 95       	lsr	r18
     b6c:	26 95       	lsr	r18
     b6e:	23 70       	andi	r18, 0x03	; 3
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	21 70       	andi	r18, 0x01	; 1
     b74:	30 70       	andi	r19, 0x00	; 0
     b76:	c9 01       	movw	r24, r18
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	82 95       	swap	r24
     b7e:	92 95       	swap	r25
     b80:	90 7f       	andi	r25, 0xF0	; 240
     b82:	98 27       	eor	r25, r24
     b84:	80 7f       	andi	r24, 0xF0	; 240
     b86:	98 27       	eor	r25, r24
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     b88:	84 2b       	or	r24, r20
     b8a:	82 b9       	out	0x02, r24	; 2
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
			BMOD_SW_ON << BMOD;
			VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     b8c:	80 81       	ld	r24, Z
     b8e:	80 64       	ori	r24, 0x40	; 64
     b90:	80 83       	st	Z, r24
     b92:	00 00       	nop
			_delay_us(1); //why is this delay here????
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     b94:	80 81       	ld	r24, Z
     b96:	8f 7b       	andi	r24, 0xBF	; 191
     b98:	80 83       	st	Z, r24
			DATA_BUS = 0;
     b9a:	12 b8       	out	0x02, r1	; 2
			
			//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
			//need to make sure this doesn't interfere with anything else on this port
			EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     b9c:	90 81       	ld	r25, Z
     b9e:	80 91 47 02 	lds	r24, 0x0247
     ba2:	20 81       	ld	r18, Z
     ba4:	81 95       	neg	r24
     ba6:	82 27       	eor	r24, r18
     ba8:	80 71       	andi	r24, 0x10	; 16
     baa:	89 27       	eor	r24, r25
     bac:	80 83       	st	Z, r24
			
			if (PROG_WRITE_ON) { //temporary tune button hack
     bae:	80 91 46 02 	lds	r24, 0x0246
     bb2:	88 23       	and	r24, r24
     bb4:	91 f0       	breq	.+36     	; 0xbda <update_spi+0x2cc>
				
				PROG_WRITE_ON ^= 1<<0; //toggle switch state
     bb6:	90 91 46 02 	lds	r25, 0x0246
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	89 27       	eor	r24, r25
     bbe:	80 93 46 02 	sts	0x0246, r24
				current_sw_state ^= (1<<PROG_WRITE); //toggle read switch state
     bc2:	90 91 48 02 	lds	r25, 0x0248
     bc6:	80 e1       	ldi	r24, 0x10	; 16
     bc8:	89 27       	eor	r24, r25
     bca:	80 93 48 02 	sts	0x0248, r24
				//update_spi();
				//vco1_init_cv = set_vco_init_cv(VCO1, 24079);
				//vco2_init_cv = set_vco_init_cv(VCO2, 24079);
				tune_8ths(VCO1);
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	0e 94 c6 09 	call	0x138c	; 0x138c <tune_8ths>
				tune_8ths(VCO2);
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	0e 94 c6 09 	call	0x138c	; 0x138c <tune_8ths>
				
			}
	
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	08 95       	ret

00000be8 <set_vco_init_cv>:
volatile uint16_t vco2_init_cv = 0;

uint16_t vco1_pitch_table[17] = {0};
uint16_t vco2_pitch_table[17] = {0};
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { //should add extra argument here to set reference count for base frequency
     be8:	2f 92       	push	r2
     bea:	3f 92       	push	r3
     bec:	4f 92       	push	r4
     bee:	5f 92       	push	r5
     bf0:	6f 92       	push	r6
     bf2:	7f 92       	push	r7
     bf4:	8f 92       	push	r8
     bf6:	9f 92       	push	r9
     bf8:	af 92       	push	r10
     bfa:	bf 92       	push	r11
     bfc:	cf 92       	push	r12
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	2a 97       	sbiw	r28, 0x0a	; 10
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	08 2f       	mov	r16, r24
     c1e:	78 87       	std	Y+8, r23	; 0x08
     c20:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	 timer1_clock |= (1<<CS11) | (1<<CS10);
     c22:	80 91 96 02 	lds	r24, 0x0296
     c26:	83 60       	ori	r24, 0x03	; 3
     c28:	80 93 96 02 	sts	0x0296, r24
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     c2c:	80 e3       	ldi	r24, 0x30	; 48
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     c38:	82 e4       	ldi	r24, 0x42	; 66
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     c44:	84 e4       	ldi	r24, 0x44	; 68
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     c50:	8f ee       	ldi	r24, 0xEF	; 239
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     c5c:	84 e3       	ldi	r24, 0x34	; 52
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     c68:	8e e3       	ldi	r24, 0x3E	; 62
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     c74:	80 e4       	ldi	r24, 0x40	; 64
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     c80:	82 e2       	ldi	r24, 0x22	; 34
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     c8c:	8c e2       	ldi	r24, 0x2C	; 44
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     c98:	84 e2       	ldi	r24, 0x24	; 36
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     ca4:	86 e2       	ldi	r24, 0x26	; 38
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     cb0:	88 e2       	ldi	r24, 0x28	; 40
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	6f ef       	ldi	r22, 0xFF	; 255
     cb6:	7f e3       	ldi	r23, 0x3F	; 63
     cb8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     cbc:	8a e2       	ldi	r24, 0x2A	; 42
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     cc8:	82 e3       	ldi	r24, 0x32	; 50
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     cd4:	8c e1       	ldi	r24, 0x1C	; 28
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     ce0:	88 e1       	ldi	r24, 0x18	; 24
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     cec:	84 e1       	ldi	r24, 0x14	; 20
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	6f ef       	ldi	r22, 0xFF	; 255
     cf2:	7f e3       	ldi	r23, 0x3F	; 63
     cf4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     cf8:	80 e1       	ldi	r24, 0x10	; 16
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     d04:	80 e2       	ldi	r24, 0x20	; 32
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
     d10:	10 92 95 02 	sts	0x0295, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
     d14:	00 23       	and	r16, r16
     d16:	c1 f4       	brne	.+48     	; 0xd48 <set_vco_init_cv+0x160>
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
     d18:	0f 2e       	mov	r0, r31
     d1a:	fc e4       	ldi	r31, 0x4C	; 76
     d1c:	4f 2e       	mov	r4, r31
     d1e:	f1 e0       	ldi	r31, 0x01	; 1
     d20:	5f 2e       	mov	r5, r31
     d22:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
     d24:	0f 2e       	mov	r0, r31
     d26:	fc e3       	ldi	r31, 0x3C	; 60
     d28:	2f 2e       	mov	r2, r31
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
     d2c:	3f 2e       	mov	r3, r31
     d2e:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
     d30:	26 e4       	ldi	r18, 0x46	; 70
     d32:	31 e0       	ldi	r19, 0x01	; 1
     d34:	3a 83       	std	Y+2, r19	; 0x02
     d36:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
     d38:	0f 2e       	mov	r0, r31
     d3a:	f8 e3       	ldi	r31, 0x38	; 56
     d3c:	8f 2e       	mov	r8, r31
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	9f 2e       	mov	r9, r31
     d42:	f0 2d       	mov	r31, r0

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_SAW);
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	17 c0       	rjmp	.+46     	; 0xd76 <set_vco_init_cv+0x18e>
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
     d48:	0f 2e       	mov	r0, r31
     d4a:	fa e4       	ldi	r31, 0x4A	; 74
     d4c:	4f 2e       	mov	r4, r31
     d4e:	f1 e0       	ldi	r31, 0x01	; 1
     d50:	5f 2e       	mov	r5, r31
     d52:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
     d54:	0f 2e       	mov	r0, r31
     d56:	fe e2       	ldi	r31, 0x2E	; 46
     d58:	2f 2e       	mov	r2, r31
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	3f 2e       	mov	r3, r31
     d5e:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
     d60:	88 e4       	ldi	r24, 0x48	; 72
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	89 83       	std	Y+1, r24	; 0x01
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
     d68:	0f 2e       	mov	r0, r31
     d6a:	fa e3       	ldi	r31, 0x3A	; 58
     d6c:	8f 2e       	mov	r8, r31
     d6e:	f1 e0       	ldi	r31, 0x01	; 1
     d70:	9f 2e       	mov	r9, r31
     d72:	f0 2d       	mov	r31, r0
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_SAW);
     d74:	80 e4       	ldi	r24, 0x40	; 64
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
     d76:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     d78:	ed ed       	ldi	r30, 0xDD	; 221
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 64       	ori	r24, 0x40	; 64
     d80:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     d82:	80 81       	ld	r24, Z
     d84:	8f 7b       	andi	r24, 0xBF	; 191
     d86:	80 83       	st	Z, r24
	DATA_BUS = 0;
     d88:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
     d8a:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
     d8c:	84 b5       	in	r24, 0x24	; 36
     d8e:	8f 60       	ori	r24, 0x0F	; 15
     d90:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
     d96:	ee e6       	ldi	r30, 0x6E	; 110
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	90 81       	ld	r25, Z
     d9c:	92 60       	ori	r25, 0x02	; 2
     d9e:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
     da0:	80 93 97 02 	sts	0x0297, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     da4:	ed e0       	ldi	r30, 0x0D	; 13
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	fc 83       	std	Y+4, r31	; 0x04
     daa:	eb 83       	std	Y+3, r30	; 0x03
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
     dac:	80 2f       	mov	r24, r16
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	8c 01       	movw	r16, r24
     db2:	0f 5f       	subi	r16, 0xFF	; 255
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
     db6:	0f 2e       	mov	r0, r31
     db8:	f0 e3       	ldi	r31, 0x30	; 48
     dba:	ef 2e       	mov	r14, r31
     dbc:	f1 e0       	ldi	r31, 0x01	; 1
     dbe:	ff 2e       	mov	r15, r31
     dc0:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
     dc2:	0f 2e       	mov	r0, r31
     dc4:	f8 e2       	ldi	r31, 0x28	; 40
     dc6:	cf 2e       	mov	r12, r31
     dc8:	f1 e0       	ldi	r31, 0x01	; 1
     dca:	df 2e       	mov	r13, r31
     dcc:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
     dce:	0f 2e       	mov	r0, r31
     dd0:	f4 e1       	ldi	r31, 0x14	; 20
     dd2:	af 2e       	mov	r10, r31
     dd4:	f1 e0       	ldi	r31, 0x01	; 1
     dd6:	bf 2e       	mov	r11, r31
     dd8:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     dda:	0f 2e       	mov	r0, r31
     ddc:	f6 e1       	ldi	r31, 0x16	; 22
     dde:	6f 2e       	mov	r6, r31
     de0:	f1 e0       	ldi	r31, 0x01	; 1
     de2:	7f 2e       	mov	r7, r31
     de4:	f0 2d       	mov	r31, r0
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	3a 87       	std	Y+10, r19	; 0x0a
     dec:	29 87       	std	Y+9, r18	; 0x09
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0b 80       	ldd	r0, Y+3	; 0x03
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <set_vco_init_cv+0x212>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <set_vco_init_cv+0x20e>
     dfe:	9e 83       	std	Y+6, r25	; 0x06
     e00:	8d 83       	std	Y+5, r24	; 0x05
     e02:	e9 85       	ldd	r30, Y+9	; 0x09
     e04:	fa 85       	ldd	r31, Y+10	; 0x0a
     e06:	e8 2b       	or	r30, r24
     e08:	f9 2b       	or	r31, r25
     e0a:	fa 87       	std	Y+10, r31	; 0x0a
     e0c:	e9 87       	std	Y+9, r30	; 0x09
		
		set_control_voltage(vco_init_cv, init_cv);
     e0e:	c4 01       	movw	r24, r8
     e10:	bf 01       	movw	r22, r30
     e12:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		
		count_finished = FALSE;
     e16:	10 92 95 02 	sts	0x0295, r1
		period_counter = 0;
     e1a:	10 92 98 02 	sts	0x0298, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     e1e:	80 91 95 02 	lds	r24, 0x0295
     e22:	88 23       	and	r24, r24
     e24:	89 f5       	brne	.+98     	; 0xe88 <set_vco_init_cv+0x2a0>
			
			update_display(vco + 1, DEC);
     e26:	c8 01       	movw	r24, r16
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
     e2e:	c4 01       	movw	r24, r8
     e30:	69 85       	ldd	r22, Y+9	; 0x09
     e32:	7a 85       	ldd	r23, Y+10	; 0x0a
     e34:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
     e38:	c1 01       	movw	r24, r2
     e3a:	6f ef       	ldi	r22, 0xFF	; 255
     e3c:	7f e3       	ldi	r23, 0x3F	; 63
     e3e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
     e42:	c7 01       	movw	r24, r14
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
     e4c:	c6 01       	movw	r24, r12
     e4e:	6f ef       	ldi	r22, 0xFF	; 255
     e50:	7f e3       	ldi	r23, 0x3F	; 63
     e52:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
     e56:	c5 01       	movw	r24, r10
     e58:	6f ef       	ldi	r22, 0xFF	; 255
     e5a:	7f e3       	ldi	r23, 0x3F	; 63
     e5c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
     e60:	c3 01       	movw	r24, r6
     e62:	6f ef       	ldi	r22, 0xFF	; 255
     e64:	7f e3       	ldi	r23, 0x3F	; 63
     e66:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	6f ef       	ldi	r22, 0xFF	; 255
     e70:	7f e3       	ldi	r23, 0x3F	; 63
     e72:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
     e76:	c2 01       	movw	r24, r4
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
		count_finished = FALSE;
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
     e80:	80 91 95 02 	lds	r24, 0x0295
     e84:	88 23       	and	r24, r24
     e86:	79 f2       	breq	.-98     	; 0xe26 <set_vco_init_cv+0x23e>
			set_control_voltage(vco_pitch_cv, 0);	
			
		}
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE not AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
     e88:	80 91 93 02 	lds	r24, 0x0293
     e8c:	90 91 94 02 	lds	r25, 0x0294
     e90:	ef 81       	ldd	r30, Y+7	; 0x07
     e92:	f8 85       	ldd	r31, Y+8	; 0x08
     e94:	e8 17       	cp	r30, r24
     e96:	f9 07       	cpc	r31, r25
     e98:	20 f0       	brcs	.+8      	; 0xea2 <set_vco_init_cv+0x2ba>
     e9a:	80 91 ea 01 	lds	r24, 0x01EA
     e9e:	88 23       	and	r24, r24
     ea0:	51 f4       	brne	.+20     	; 0xeb6 <set_vco_init_cv+0x2ce>
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	80 95       	com	r24
     ea8:	90 95       	com	r25
     eaa:	29 85       	ldd	r18, Y+9	; 0x09
     eac:	3a 85       	ldd	r19, Y+10	; 0x0a
     eae:	28 23       	and	r18, r24
     eb0:	39 23       	and	r19, r25
     eb2:	3a 87       	std	Y+10, r19	; 0x0a
     eb4:	29 87       	std	Y+9, r18	; 0x09
		no_overflow = TRUE;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 ea 01 	sts	0x01EA, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	9c 83       	std	Y+4, r25	; 0x04
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	ef ef       	ldi	r30, 0xFF	; 255
     ec8:	8f 3f       	cpi	r24, 0xFF	; 255
     eca:	9e 07       	cpc	r25, r30
     ecc:	09 f0       	breq	.+2      	; 0xed0 <set_vco_init_cv+0x2e8>
     ece:	8f cf       	rjmp	.-226    	; 0xdee <set_vco_init_cv+0x206>
     ed0:	29 85       	ldd	r18, Y+9	; 0x09
     ed2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed4:	3e 83       	std	Y+6, r19	; 0x06
     ed6:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
     ed8:	80 e1       	ldi	r24, 0x10	; 16
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
     ee4:	82 e1       	ldi	r24, 0x12	; 18
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
     ef0:	88 e2       	ldi	r24, 0x28	; 40
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
     f08:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
     f0a:	ee e6       	ldi	r30, 0x6E	; 110
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8d 7f       	andi	r24, 0xFD	; 253
     f12:	80 83       	st	Z, r24
	
	return init_cv;
	
}
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	9e 81       	ldd	r25, Y+6	; 0x06
     f18:	2a 96       	adiw	r28, 0x0a	; 10
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	af 90       	pop	r10
     f38:	9f 90       	pop	r9
     f3a:	8f 90       	pop	r8
     f3c:	7f 90       	pop	r7
     f3e:	6f 90       	pop	r6
     f40:	5f 90       	pop	r5
     f42:	4f 90       	pop	r4
     f44:	3f 90       	pop	r3
     f46:	2f 90       	pop	r2
     f48:	08 95       	ret

00000f4a <tune_octave>:

void tune_octave(uint8_t octave, uint8_t vco) {
     f4a:	2f 92       	push	r2
     f4c:	3f 92       	push	r3
     f4e:	4f 92       	push	r4
     f50:	5f 92       	push	r5
     f52:	6f 92       	push	r6
     f54:	7f 92       	push	r7
     f56:	8f 92       	push	r8
     f58:	9f 92       	push	r9
     f5a:	af 92       	push	r10
     f5c:	bf 92       	push	r11
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	e6 97       	sbiw	r28, 0x36	; 54
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	f8 2e       	mov	r15, r24
     f80:	06 2f       	mov	r16, r22

	uint16_t pitch_reference[12] = { //holds the 16 bit timer counts for each note within an octave independent of octave # being tuned
     f82:	de 01       	movw	r26, r28
     f84:	11 96       	adiw	r26, 0x01	; 1
     f86:	e8 e9       	ldi	r30, 0x98	; 152
     f88:	f1 e0       	ldi	r31, 0x01	; 1
     f8a:	88 e1       	ldi	r24, 0x18	; 24
     f8c:	01 90       	ld	r0, Z+
     f8e:	0d 92       	st	X+, r0
     f90:	81 50       	subi	r24, 0x01	; 1
     f92:	e1 f7       	brne	.-8      	; 0xf8c <tune_octave+0x42>
	PITCH_Ab,
	PITCH_B
	    
    };
	
	uint8_t period_table[10] = {1, 2, 4, 1, 2, 4, 8, 16, 32, 64}; //the number of  periods that need to be counted for octaves 0-9
     f94:	de 01       	movw	r26, r28
     f96:	59 96       	adiw	r26, 0x19	; 25
     f98:	e0 eb       	ldi	r30, 0xB0	; 176
     f9a:	f1 e0       	ldi	r31, 0x01	; 1
     f9c:	8a e0       	ldi	r24, 0x0A	; 10
     f9e:	01 90       	ld	r0, Z+
     fa0:	0d 92       	st	X+, r0
     fa2:	81 50       	subi	r24, 0x01	; 1
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <tune_octave+0x54>
	//octaves 0-2 use /64 0.312500 MHz timer/counter1 clock rate
	//octaves 3-9 use /8 2.5 MHz timer/counter1 clock rate
	
	period = period_table[octave]; //set period number to be counted
     fa6:	af 2c       	mov	r10, r15
     fa8:	bb 24       	eor	r11, r11
     faa:	fe 01       	movw	r30, r28
     fac:	ea 0d       	add	r30, r10
     fae:	fb 1d       	adc	r31, r11
     fb0:	81 8d       	ldd	r24, Z+25	; 0x19
     fb2:	80 93 97 02 	sts	0x0297, r24
	
	//to do:
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     fb6:	80 e3       	ldi	r24, 0x30	; 48
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     fc2:	82 e4       	ldi	r24, 0x42	; 66
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     fce:	84 e4       	ldi	r24, 0x44	; 68
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     fda:	8f ee       	ldi	r24, 0xEF	; 239
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     fe6:	84 e3       	ldi	r24, 0x34	; 52
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     ff2:	8e e3       	ldi	r24, 0x3E	; 62
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     ffe:	80 e4       	ldi	r24, 0x40	; 64
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    100a:	82 e2       	ldi	r24, 0x22	; 34
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1016:	8c e2       	ldi	r24, 0x2C	; 44
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1022:	84 e2       	ldi	r24, 0x24	; 36
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    102e:	86 e2       	ldi	r24, 0x26	; 38
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    103a:	88 e2       	ldi	r24, 0x28	; 40
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	6f ef       	ldi	r22, 0xFF	; 255
    1040:	7f e3       	ldi	r23, 0x3F	; 63
    1042:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1046:	8a e2       	ldi	r24, 0x2A	; 42
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1052:	82 e3       	ldi	r24, 0x32	; 50
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    105e:	8c e1       	ldi	r24, 0x1C	; 28
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    106a:	88 e1       	ldi	r24, 0x18	; 24
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1076:	84 e1       	ldi	r24, 0x14	; 20
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	6f ef       	ldi	r22, 0xFF	; 255
    107c:	7f e3       	ldi	r23, 0x3F	; 63
    107e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1082:	80 e1       	ldi	r24, 0x10	; 16
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    108e:	80 e2       	ldi	r24, 0x20	; 32
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;	

	if (vco == VCO1) { //set up parameters for VCO1 tuning
    109a:	00 23       	and	r16, r16
    109c:	09 f5       	brne	.+66     	; 0x10e0 <tune_octave+0x196>
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
		init_cv = vco1_init_cv;
    109e:	20 91 90 02 	lds	r18, 0x0290
    10a2:	30 91 91 02 	lds	r19, 0x0291
    10a6:	3e a3       	lds	r19, 0x5e
    10a8:	2d a3       	lds	r18, 0x5d
		//turn on VCO1 SAW, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    10aa:	0f 2e       	mov	r0, r31
    10ac:	fc e4       	ldi	r31, 0x4C	; 76
    10ae:	2f 2e       	mov	r2, r31
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	3f 2e       	mov	r3, r31
    10b4:	f0 2d       	mov	r31, r0

		//turn on VCO1 SAW, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    10b6:	8c e3       	ldi	r24, 0x3C	; 60
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	9c a7       	lds	r25, 0x7c
    10bc:	8b a7       	lds	r24, 0x7b
	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    10be:	e6 e4       	ldi	r30, 0x46	; 70
    10c0:	f1 e0       	ldi	r31, 0x01	; 1
    10c2:	fa a7       	lds	r31, 0x7a
    10c4:	e9 a7       	lds	r30, 0x79

	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    10c6:	28 e3       	ldi	r18, 0x38	; 56
    10c8:	31 e0       	ldi	r19, 0x01	; 1
    10ca:	38 a7       	lds	r19, 0x78
    10cc:	2f a3       	lds	r18, 0x5f
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
		init_cv = vco1_init_cv;
		vco_pitch_table = vco1_pitch_table;
    10ce:	0c e6       	ldi	r16, 0x6C	; 108
    10d0:	12 e0       	ldi	r17, 0x02	; 2
		switch_byte |= (1<<VCO1_SAW);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 10; //allows second digit to display VCO being tuned
    10d2:	0f 2e       	mov	r0, r31
    10d4:	fa e0       	ldi	r31, 0x0A	; 10
    10d6:	cf 2e       	mov	r12, r31
    10d8:	f0 2d       	mov	r31, r0
	struct control_voltage *vco_pitch_cv;	

	if (vco == VCO1) { //set up parameters for VCO1 tuning

		//turn on VCO1 SAW, all others off
		switch_byte |= (1<<VCO1_SAW);
    10da:	ee 24       	eor	r14, r14
    10dc:	e3 94       	inc	r14
    10de:	21 c0       	rjmp	.+66     	; 0x1122 <__stack+0x23>
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
    10e0:	80 91 8e 02 	lds	r24, 0x028E
    10e4:	90 91 8f 02 	lds	r25, 0x028F
    10e8:	9e a3       	lds	r25, 0x5e
    10ea:	8d a3       	lds	r24, 0x5d
		//turn on VCO2 SAW, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    10ec:	0f 2e       	mov	r0, r31
    10ee:	fa e4       	ldi	r31, 0x4A	; 74
    10f0:	2f 2e       	mov	r2, r31
    10f2:	f1 e0       	ldi	r31, 0x01	; 1
    10f4:	3f 2e       	mov	r3, r31
    10f6:	f0 2d       	mov	r31, r0
		
		//turn on VCO2 SAW, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    10f8:	ee e2       	ldi	r30, 0x2E	; 46
    10fa:	f1 e0       	ldi	r31, 0x01	; 1
    10fc:	fc a7       	lds	r31, 0x7c
    10fe:	eb a7       	lds	r30, 0x7b
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1100:	28 e4       	ldi	r18, 0x48	; 72
    1102:	31 e0       	ldi	r19, 0x01	; 1
    1104:	3a a7       	lds	r19, 0x7a
    1106:	29 a7       	lds	r18, 0x79
		
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1108:	8a e3       	ldi	r24, 0x3A	; 58
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	98 a7       	lds	r25, 0x78
    110e:	8f a3       	lds	r24, 0x5f
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
		vco_pitch_table = vco2_pitch_table;
    1110:	0a e4       	ldi	r16, 0x4A	; 74
    1112:	12 e0       	ldi	r17, 0x02	; 2
		switch_byte |= (1<<VCO2_SAW);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		vco_number = 20; //allows second digit to display VCO being tuned
    1114:	0f 2e       	mov	r0, r31
    1116:	f4 e1       	ldi	r31, 0x14	; 20
    1118:	cf 2e       	mov	r12, r31
    111a:	f0 2d       	mov	r31, r0
		
		
	} else { //set up parameters for VCO2 tuning
		
		//turn on VCO2 SAW, all others off
		switch_byte |= (1<<VCO2_SAW);
    111c:	ee 24       	eor	r14, r14
    111e:	68 94       	set
    1120:	e6 f8       	bld	r14, 6
		vco_number = 20; //allows second digit to display VCO being tuned
		init_cv = vco2_init_cv;
		vco_pitch_table = vco2_pitch_table;
	}
	
	if (octave <= 2) {
    1122:	92 e0       	ldi	r25, 0x02	; 2
    1124:	9f 15       	cp	r25, r15
    1126:	20 f0       	brcs	.+8      	; 0x1130 <__stack+0x31>
		
		//set timer/counter1 to /64 0.3125 MHz
		timer1_clock = (1<<CS11) | (1<<CS10);
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	80 93 96 02 	sts	0x0296, r24
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <__stack+0x37>
		
	} else {
		
		//set timer/counter1 to /8 2.5 MHz
		timer1_clock = (1<<CS11);
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	80 93 96 02 	sts	0x0296, r24
		
	}

	//set VCO init offset CV
	set_control_voltage(vco_init_cv, init_cv);
    1136:	8f a1       	lds	r24, 0x4f
    1138:	98 a5       	lds	r25, 0x68
    113a:	6d a1       	lds	r22, 0x4d
    113c:	7e a1       	lds	r23, 0x4e
    113e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
	//latch switch data
	DATA_BUS = switch_byte;
    1142:	e2 b8       	out	0x02, r14	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1144:	ed ed       	ldi	r30, 0xDD	; 221
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	80 64       	ori	r24, 0x40	; 64
    114c:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    114e:	80 81       	ld	r24, Z
    1150:	8f 7b       	andi	r24, 0xBF	; 191
    1152:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1154:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1156:	89 9a       	sbi	0x11, 1	; 17
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1158:	84 b5       	in	r24, 0x24	; 36
    115a:	8f 60       	ori	r24, 0x0F	; 15
    115c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    1162:	ee e6       	ldi	r30, 0x6E	; 110
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	82 60       	ori	r24, 0x02	; 2
    116a:	80 83       	st	Z, r24
	compare_match_counter = 0;	
    116c:	10 92 92 02 	sts	0x0292, r1
    1170:	fe 01       	movw	r30, r28
    1172:	31 96       	adiw	r30, 0x01	; 1
    1174:	fc ab       	sts	0x5c, r31
    1176:	eb ab       	sts	0x5b, r30
	for (int note_number = 0; note_number <= 11; note_number++) 
		{
		
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
    1178:	c5 01       	movw	r24, r10
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	8a 0d       	add	r24, r10
    1180:	9b 1d       	adc	r25, r11
	
	return init_cv;
	
}

void tune_octave(uint8_t octave, uint8_t vco) {
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	02 97       	sbiw	r24, 0x02	; 2
    1190:	98 01       	movw	r18, r16
    1192:	28 0f       	add	r18, r24
    1194:	39 1f       	adc	r19, r25
    1196:	3e ab       	sts	0x5e, r19
    1198:	2d ab       	sts	0x5d, r18
    119a:	ce 01       	movw	r24, r28
    119c:	49 96       	adiw	r24, 0x19	; 25
    119e:	9c a3       	lds	r25, 0x5c
    11a0:	8b a3       	lds	r24, 0x5b
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    11a2:	ac 0c       	add	r10, r12
    11a4:	b1 1c       	adc	r11, r1
				
				//not sure what's really necessary here - definitely pitch and init_cv, but what else?
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
				set_control_voltage(vco_init_cv, init_cv);
				set_control_voltage(vco_pw_cv, MAX);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    11a6:	0f 2e       	mov	r0, r31
    11a8:	f0 e3       	ldi	r31, 0x30	; 48
    11aa:	8f 2e       	mov	r8, r31
    11ac:	f1 e0       	ldi	r31, 0x01	; 1
    11ae:	9f 2e       	mov	r9, r31
    11b0:	f0 2d       	mov	r31, r0
				set_control_voltage(&cutoff_cv, MAX);
    11b2:	0f 2e       	mov	r0, r31
    11b4:	f8 e2       	ldi	r31, 0x28	; 40
    11b6:	6f 2e       	mov	r6, r31
    11b8:	f1 e0       	ldi	r31, 0x01	; 1
    11ba:	7f 2e       	mov	r7, r31
    11bc:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    11be:	0f 2e       	mov	r0, r31
    11c0:	f4 e1       	ldi	r31, 0x14	; 20
    11c2:	4f 2e       	mov	r4, r31
    11c4:	f1 e0       	ldi	r31, 0x01	; 1
    11c6:	5f 2e       	mov	r5, r31
    11c8:	f0 2d       	mov	r31, r0
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
	compare_match_counter = 0;	
	for (int note_number = 0; note_number <= 11; note_number++) 
		{
		
		uint16_t reference_count = pitch_reference[note_number];
    11ca:	eb a9       	sts	0x4b, r30
    11cc:	fc a9       	sts	0x4c, r31
    11ce:	21 91       	ld	r18, Z+
    11d0:	31 91       	ld	r19, Z+
    11d2:	fc ab       	sts	0x5c, r31
    11d4:	eb ab       	sts	0x5b, r30
    11d6:	38 ab       	sts	0x58, r19
    11d8:	2f a7       	lds	r18, 0x7f
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
    11da:	ed a9       	sts	0x4d, r30
    11dc:	fe a9       	sts	0x4e, r31
    11de:	81 91       	ld	r24, Z+
    11e0:	91 91       	ld	r25, Z+
    11e2:	fe ab       	sts	0x5e, r31
    11e4:	ed ab       	sts	0x5d, r30
    11e6:	8c 01       	movw	r16, r24
    11e8:	08 57       	subi	r16, 0x78	; 120
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
    11ec:	26 e0       	ldi	r18, 0x06	; 6
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	3e a7       	lds	r19, 0x7e
    11f2:	2d a7       	lds	r18, 0x7d
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    11f4:	0f 2e       	mov	r0, r31
    11f6:	f4 e6       	ldi	r31, 0x64	; 100
    11f8:	cf 2e       	mov	r12, r31
    11fa:	dd 24       	eor	r13, r13
    11fc:	f0 2d       	mov	r31, r0
				set_control_voltage(vco_init_cv, init_cv);
				set_control_voltage(vco_pw_cv, MAX);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&cutoff_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    11fe:	86 e1       	ldi	r24, 0x16	; 22
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	f8 2e       	mov	r15, r24
    1204:	e9 2e       	mov	r14, r25
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
			osc_pitch_cv = (osc_pitch_cv >> dac_bit) << dac_bit; //clear bits to be set. Omar scoffed at this line as if it didn't need to be done. Why?
    1206:	c8 01       	movw	r24, r16
    1208:	0d a4       	lds	r16, 0xad
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <__stack+0x111>
    120c:	96 95       	lsr	r25
    120e:	87 95       	ror	r24
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <__stack+0x10d>
    1214:	8c 01       	movw	r16, r24
    1216:	0d a4       	lds	r16, 0xad
    1218:	02 c0       	rjmp	.+4      	; 0x121e <__stack+0x11f>
    121a:	00 0f       	add	r16, r16
    121c:	11 1f       	adc	r17, r17
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <__stack+0x11b>
			//oh, maybe because it should just be done once before loop. Doing it for each iteration after bit 7 is redundant
			osc_pitch_cv |= (1<<dac_bit);
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	fc 01       	movw	r30, r24
    1228:	0d a4       	lds	r16, 0xad
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <__stack+0x131>
    122c:	ee 0f       	add	r30, r30
    122e:	ff 1f       	adc	r31, r31
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <__stack+0x12d>
    1234:	fa ab       	sts	0x5a, r31
    1236:	e9 ab       	sts	0x59, r30
    1238:	0e 2b       	or	r16, r30
    123a:	1f 2b       	or	r17, r31

			set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    123c:	c1 01       	movw	r24, r2
    123e:	b8 01       	movw	r22, r16
    1240:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			count_finished = FALSE;
    1244:	10 92 95 02 	sts	0x0295, r1
			period_counter = 0;
    1248:	10 92 98 02 	sts	0x0298, r1
			

			while (count_finished == FALSE) {
    124c:	80 91 95 02 	lds	r24, 0x0295
    1250:	88 23       	and	r24, r24
    1252:	09 f0       	breq	.+2      	; 0x1256 <__stack+0x157>
    1254:	42 c0       	rjmp	.+132    	; 0x12da <__stack+0x1db>
				update_display(vco_number + octave + (compare_match_counter>>4)*100, DEC);	
    1256:	80 91 92 02 	lds	r24, 0x0292
    125a:	82 95       	swap	r24
    125c:	8f 70       	andi	r24, 0x0F	; 15
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	2c 9d       	mul	r18, r12
    1264:	c0 01       	movw	r24, r0
    1266:	2d 9d       	mul	r18, r13
    1268:	90 0d       	add	r25, r0
    126a:	3c 9d       	mul	r19, r12
    126c:	90 0d       	add	r25, r0
    126e:	11 24       	eor	r1, r1
    1270:	8a 0d       	add	r24, r10
    1272:	9b 1d       	adc	r25, r11
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
				//need to have a watchdog timer here to escape while loop if it takes too long
				
				//not sure what's really necessary here - definitely pitch and init_cv, but what else?
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    127a:	c1 01       	movw	r24, r2
    127c:	b8 01       	movw	r22, r16
    127e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_init_cv, init_cv);
    1282:	8f a1       	lds	r24, 0x4f
    1284:	98 a5       	lds	r25, 0x68
    1286:	6d a1       	lds	r22, 0x4d
    1288:	7e a1       	lds	r23, 0x4e
    128a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_pw_cv, MAX);
    128e:	8b a5       	lds	r24, 0x6b
    1290:	9c a5       	lds	r25, 0x6c
    1292:	6f ef       	ldi	r22, 0xFF	; 255
    1294:	7f e3       	ldi	r23, 0x3F	; 63
    1296:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    129a:	c4 01       	movw	r24, r8
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&cutoff_cv, MAX);
    12a4:	c3 01       	movw	r24, r6
    12a6:	6f ef       	ldi	r22, 0xFF	; 255
    12a8:	7f e3       	ldi	r23, 0x3F	; 63
    12aa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    12ae:	c2 01       	movw	r24, r4
    12b0:	6f ef       	ldi	r22, 0xFF	; 255
    12b2:	7f e3       	ldi	r23, 0x3F	; 63
    12b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    12b8:	8f 2d       	mov	r24, r15
    12ba:	9e 2d       	mov	r25, r14
    12bc:	6f ef       	ldi	r22, 0xFF	; 255
    12be:	7f e3       	ldi	r23, 0x3F	; 63
    12c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_mix_cv, MAX);
    12c4:	89 a5       	lds	r24, 0x69
    12c6:	9a a5       	lds	r25, 0x6a
    12c8:	6f ef       	ldi	r22, 0xFF	; 255
    12ca:	7f e3       	ldi	r23, 0x3F	; 63
    12cc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, osc_pitch_cv);
			count_finished = FALSE;
			period_counter = 0;
			

			while (count_finished == FALSE) {
    12d0:	80 91 95 02 	lds	r24, 0x0295
    12d4:	88 23       	and	r24, r24
    12d6:	09 f4       	brne	.+2      	; 0x12da <__stack+0x1db>
    12d8:	be cf       	rjmp	.-132    	; 0x1256 <__stack+0x157>
			
			
			}							
				
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    12da:	80 91 93 02 	lds	r24, 0x0293
    12de:	90 91 94 02 	lds	r25, 0x0294
    12e2:	2f a5       	lds	r18, 0x6f
    12e4:	38 a9       	sts	0x48, r19
    12e6:	28 17       	cp	r18, r24
    12e8:	39 07       	cpc	r19, r25
    12ea:	50 f0       	brcs	.+20     	; 0x1300 <__stack+0x201>
    12ec:	80 91 ea 01 	lds	r24, 0x01EA
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	31 f4       	brne	.+12     	; 0x1300 <__stack+0x201>
    12f4:	89 a9       	sts	0x49, r24
    12f6:	9a a9       	sts	0x4a, r25
    12f8:	80 95       	com	r24
    12fa:	90 95       	com	r25
    12fc:	08 23       	and	r16, r24
    12fe:	19 23       	and	r17, r25
				
			if (osc_count == reference_count && no_overflow == TRUE) {
    1300:	80 91 93 02 	lds	r24, 0x0293
    1304:	90 91 94 02 	lds	r25, 0x0294
    1308:	ef a5       	lds	r30, 0x6f
    130a:	f8 a9       	sts	0x48, r31
    130c:	8e 17       	cp	r24, r30
    130e:	9f 07       	cpc	r25, r31
    1310:	21 f4       	brne	.+8      	; 0x131a <__stack+0x21b>
    1312:	80 91 ea 01 	lds	r24, 0x01EA
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	71 f0       	breq	.+28     	; 0x1336 <__stack+0x237>
				break;	//if you hit the reference count then get out of here		
			}				
			no_overflow = TRUE;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	80 93 ea 01 	sts	0x01EA, r24
		uint16_t reference_count = pitch_reference[note_number];
		uint16_t osc_pitch_cv = 136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
		//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
		//will need to test more thoroughly
		//osc_pitch_cv = 0;
		for (int dac_bit = 6; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
    1320:	2d a5       	lds	r18, 0x6d
    1322:	3e a5       	lds	r19, 0x6e
    1324:	21 50       	subi	r18, 0x01	; 1
    1326:	30 40       	sbci	r19, 0x00	; 0
    1328:	3e a7       	lds	r19, 0x7e
    132a:	2d a7       	lds	r18, 0x7d
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	2f 3f       	cpi	r18, 0xFF	; 255
    1330:	38 07       	cpc	r19, r24
    1332:	09 f0       	breq	.+2      	; 0x1336 <__stack+0x237>
    1334:	68 cf       	rjmp	.-304    	; 0x1206 <__stack+0x107>
		}
		
		//will need to make an excpetion for C0 here as its pitch has already been determined by set_vco_init_cv() and so C0 will be 0V
		//for now maybe just start tuning octaves 1 and up
		//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
		*(vco_pitch_table + (octave*12 + note_number)) = osc_pitch_cv;		
    1336:	ed a9       	sts	0x4d, r30
    1338:	fe a9       	sts	0x4e, r31
    133a:	11 83       	std	Z+1, r17	; 0x01
    133c:	00 83       	st	Z, r16
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
	compare_match_counter = 0;	
	for (int note_number = 0; note_number <= 11; note_number++) 
    133e:	2b a9       	sts	0x4b, r18
    1340:	3c a9       	sts	0x4c, r19
    1342:	8b a1       	lds	r24, 0x4b
    1344:	9c a1       	lds	r25, 0x4c
    1346:	28 17       	cp	r18, r24
    1348:	39 07       	cpc	r19, r25
    134a:	09 f0       	breq	.+2      	; 0x134e <__stack+0x24f>
    134c:	3e cf       	rjmp	.-388    	; 0x11ca <__stack+0xcb>
		
	}
	

	
	PORTF &= ~(1<<GATE); //turn gate off
    134e:	89 98       	cbi	0x11, 1	; 17
		
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1350:	ee e6       	ldi	r30, 0x6E	; 110
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	8d 7f       	andi	r24, 0xFD	; 253
    1358:	80 83       	st	Z, r24
	
	
}
    135a:	e6 96       	adiw	r28, 0x36	; 54
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	df 90       	pop	r13
    1374:	cf 90       	pop	r12
    1376:	bf 90       	pop	r11
    1378:	af 90       	pop	r10
    137a:	9f 90       	pop	r9
    137c:	8f 90       	pop	r8
    137e:	7f 90       	pop	r7
    1380:	6f 90       	pop	r6
    1382:	5f 90       	pop	r5
    1384:	4f 90       	pop	r4
    1386:	3f 90       	pop	r3
    1388:	2f 90       	pop	r2
    138a:	08 95       	ret

0000138c <tune_8ths>:

void tune_8ths(uint8_t vco) {
    138c:	2f 92       	push	r2
    138e:	3f 92       	push	r3
    1390:	4f 92       	push	r4
    1392:	5f 92       	push	r5
    1394:	6f 92       	push	r6
    1396:	7f 92       	push	r7
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	c2 54       	subi	r28, 0x42	; 66
    13b6:	d0 40       	sbci	r29, 0x00	; 0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    13c4:	de 01       	movw	r26, r28
    13c6:	11 96       	adiw	r26, 0x01	; 1
    13c8:	ea eb       	ldi	r30, 0xBA	; 186
    13ca:	f1 e0       	ldi	r31, 0x01	; 1
    13cc:	80 e3       	ldi	r24, 0x30	; 48
    13ce:	01 90       	ld	r0, Z+
    13d0:	0d 92       	st	X+, r0
    13d2:	81 50       	subi	r24, 0x01	; 1
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    13d6:	80 e3       	ldi	r24, 0x30	; 48
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all pitch modulation
		set_control_voltage(&pitch_lfo_cv, MIN);
    13e2:	82 e4       	ldi	r24, 0x42	; 66
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pitch_eg2_cv, MIN);
    13ee:	84 e4       	ldi	r24, 0x44	; 68
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pitch_vco2_cv, MIN);
    13fa:	8f ee       	ldi	r24, 0xEF	; 239
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off glide
		set_control_voltage(&glide_cv, MIN);
    1406:	84 e3       	ldi	r24, 0x34	; 52
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all pulse width modulation
		set_control_voltage(&pwm_eg2_cv, MIN);
    1412:	8e e3       	ldi	r24, 0x3E	; 62
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&pwm_lfo_cv, MIN);
    141e:	80 e4       	ldi	r24, 0x40	; 64
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off all filter modulation
		set_control_voltage(&fil_lfo_cv, MIN);
    142a:	82 e2       	ldi	r24, 0x22	; 34
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&fil_eg2_cv, MIN);
    1436:	8c e2       	ldi	r24, 0x2C	; 44
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&fil_vco2_cv, MIN);
    1442:	84 e2       	ldi	r24, 0x24	; 36
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&key_track_cv, MIN);
    144e:	86 e2       	ldi	r24, 0x26	; 38
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//open filter with no resonance
		set_control_voltage(&cutoff_cv, MAX);
    145a:	88 e2       	ldi	r24, 0x28	; 40
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	6f ef       	ldi	r22, 0xFF	; 255
    1460:	7f e3       	ldi	r23, 0x3F	; 63
    1462:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&res_cv, MIN);
    1466:	8a e2       	ldi	r24, 0x2A	; 42
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off VCA LFO modulation
		set_control_voltage(&amp_lfo_cv, MIN);
    1472:	82 e3       	ldi	r24, 0x32	; 50
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//initialize VCA envelope
		set_control_voltage(&attack_1_cv, MIN);
    147e:	8c e1       	ldi	r24, 0x1C	; 28
    1480:	91 e0       	ldi	r25, 0x01	; 1
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&decay_1_cv, MIN);
    148a:	88 e1       	ldi	r24, 0x18	; 24
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&sustain_1_cv, MAX);
    1496:	84 e1       	ldi	r24, 0x14	; 20
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	6f ef       	ldi	r22, 0xFF	; 255
    149c:	7f e3       	ldi	r23, 0x3F	; 63
    149e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		set_control_voltage(&release_1_cv, MIN);
    14a2:	80 e1       	ldi	r24, 0x10	; 16
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		//turn off noise
		set_control_voltage(&noise_mix_cv, MIN);
    14ae:	80 e2       	ldi	r24, 0x20	; 32
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    14ba:	00 23       	and	r16, r16
    14bc:	09 f5       	brne	.+66     	; 0x1500 <tune_8ths+0x174>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    14be:	20 90 90 02 	lds	r2, 0x0290
    14c2:	30 90 91 02 	lds	r3, 0x0291
			//turn on VCO1 SAW, all others off
			switch_byte |= (1<<VCO1_SAW);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    14c6:	0f 2e       	mov	r0, r31
    14c8:	fc e4       	ldi	r31, 0x4C	; 76
    14ca:	6f 2e       	mov	r6, r31
    14cc:	f1 e0       	ldi	r31, 0x01	; 1
    14ce:	7f 2e       	mov	r7, r31
    14d0:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte |= (1<<VCO1_SAW);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    14d2:	2c e3       	ldi	r18, 0x3C	; 60
    14d4:	31 e0       	ldi	r19, 0x01	; 1
    14d6:	3c ab       	sts	0x5c, r19
    14d8:	2b ab       	sts	0x5b, r18
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte |= (1<<VCO1_SAW);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    14da:	46 e4       	ldi	r20, 0x46	; 70
    14dc:	51 e0       	ldi	r21, 0x01	; 1
    14de:	5a ab       	sts	0x5a, r21
    14e0:	49 ab       	sts	0x59, r20

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte |= (1<<VCO1_SAW);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    14e2:	0f 2e       	mov	r0, r31
    14e4:	f8 e3       	ldi	r31, 0x38	; 56
    14e6:	4f 2e       	mov	r4, r31
    14e8:	f1 e0       	ldi	r31, 0x01	; 1
    14ea:	5f 2e       	mov	r5, r31
    14ec:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    14ee:	0c e6       	ldi	r16, 0x6C	; 108
    14f0:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte |= (1<<VCO1_SAW);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 10; //allows second digit to display VCO being tuned
    14f2:	0f 2e       	mov	r0, r31
    14f4:	fa e0       	ldi	r31, 0x0A	; 10
    14f6:	cf 2e       	mov	r12, r31
    14f8:	f0 2d       	mov	r31, r0
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte |= (1<<VCO1_SAW);
    14fa:	ee 24       	eor	r14, r14
    14fc:	e3 94       	inc	r14
    14fe:	21 c0       	rjmp	.+66     	; 0x1542 <tune_8ths+0x1b6>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    1500:	20 90 8e 02 	lds	r2, 0x028E
    1504:	30 90 8f 02 	lds	r3, 0x028F
			//turn on VCO2 SAW, all others off
			switch_byte |= (1<<VCO2_SAW);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1508:	0f 2e       	mov	r0, r31
    150a:	fa e4       	ldi	r31, 0x4A	; 74
    150c:	6f 2e       	mov	r6, r31
    150e:	f1 e0       	ldi	r31, 0x01	; 1
    1510:	7f 2e       	mov	r7, r31
    1512:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte |= (1<<VCO2_SAW);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    1514:	8e e2       	ldi	r24, 0x2E	; 46
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	9c ab       	sts	0x5c, r25
    151a:	8b ab       	sts	0x5b, r24
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte |= (1<<VCO2_SAW);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    151c:	a8 e4       	ldi	r26, 0x48	; 72
    151e:	b1 e0       	ldi	r27, 0x01	; 1
    1520:	ba ab       	sts	0x5a, r27
    1522:	a9 ab       	sts	0x59, r26
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte |= (1<<VCO2_SAW);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1524:	0f 2e       	mov	r0, r31
    1526:	fa e3       	ldi	r31, 0x3A	; 58
    1528:	4f 2e       	mov	r4, r31
    152a:	f1 e0       	ldi	r31, 0x01	; 1
    152c:	5f 2e       	mov	r5, r31
    152e:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    1530:	0a e4       	ldi	r16, 0x4A	; 74
    1532:	12 e0       	ldi	r17, 0x02	; 2
			switch_byte |= (1<<VCO2_SAW);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 20; //allows second digit to display VCO being tuned
    1534:	0f 2e       	mov	r0, r31
    1536:	f4 e1       	ldi	r31, 0x14	; 20
    1538:	cf 2e       	mov	r12, r31
    153a:	f0 2d       	mov	r31, r0
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte |= (1<<VCO2_SAW);
    153c:	ee 24       	eor	r14, r14
    153e:	68 94       	set
    1540:	e6 f8       	bld	r14, 6
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    1542:	c2 01       	movw	r24, r4
    1544:	b1 01       	movw	r22, r2
    1546:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
	
		//latch switch data
		DATA_BUS = switch_byte;
    154a:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    154c:	ed ed       	ldi	r30, 0xDD	; 221
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	80 64       	ori	r24, 0x40	; 64
    1554:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1556:	80 81       	ld	r24, Z
    1558:	8f 7b       	andi	r24, 0xBF	; 191
    155a:	80 83       	st	Z, r24
		DATA_BUS = 0;
    155c:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    155e:	89 9a       	sbi	0x11, 1	; 17
	
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1560:	84 b5       	in	r24, 0x24	; 36
    1562:	8f 60       	ori	r24, 0x0F	; 15
    1564:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	87 bd       	out	0x27, r24	; 39
		//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
		//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    156a:	ee e6       	ldi	r30, 0x6E	; 110
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	82 60       	ori	r24, 0x02	; 2
    1572:	80 83       	st	Z, r24
		compare_match_counter = 0;	
    1574:	10 92 92 02 	sts	0x0292, r1
				period_counter = 0;
			

				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);	
    1578:	8c 2d       	mov	r24, r12
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	24 e6       	ldi	r18, 0x64	; 100
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	82 9f       	mul	r24, r18
    1582:	f0 01       	movw	r30, r0
    1584:	83 9f       	mul	r24, r19
    1586:	f0 0d       	add	r31, r0
    1588:	92 9f       	mul	r25, r18
    158a:	f0 0d       	add	r31, r0
    158c:	11 24       	eor	r1, r1
    158e:	fe ab       	sts	0x5e, r31
    1590:	ed ab       	sts	0x5d, r30
    1592:	9e 01       	movw	r18, r28
    1594:	2f 5f       	subi	r18, 0xFF	; 255
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	3e af       	sts	0x7e, r19
    159a:	2d af       	sts	0x7d, r18
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
	
	
}

void tune_8ths(uint8_t vco) {
    159c:	a8 01       	movw	r20, r16
    159e:	4e 5f       	subi	r20, 0xFE	; 254
    15a0:	5f 4f       	sbci	r21, 0xFF	; 255
    15a2:	23 96       	adiw	r28, 0x03	; 3
    15a4:	5f af       	sts	0x7f, r21
    15a6:	4e af       	sts	0x7e, r20
    15a8:	23 97       	sbiw	r28, 0x03	; 3
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
		//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
		//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    15aa:	21 96       	adiw	r28, 0x01	; 1
    15ac:	1f ae       	sts	0xbf, r17
    15ae:	1e ae       	sts	0xbe, r17
    15b0:	21 97       	sbiw	r28, 0x01	; 1
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pw_cv, MAX);
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    15b2:	0f 2e       	mov	r0, r31
    15b4:	f0 e3       	ldi	r31, 0x30	; 48
    15b6:	ef 2e       	mov	r14, r31
    15b8:	f1 e0       	ldi	r31, 0x01	; 1
    15ba:	ff 2e       	mov	r15, r31
    15bc:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    15be:	0f 2e       	mov	r0, r31
    15c0:	f8 e2       	ldi	r31, 0x28	; 40
    15c2:	cf 2e       	mov	r12, r31
    15c4:	f1 e0       	ldi	r31, 0x01	; 1
    15c6:	df 2e       	mov	r13, r31
    15c8:	f0 2d       	mov	r31, r0
					set_control_voltage(&sustain_1_cv, MAX);
    15ca:	0f 2e       	mov	r0, r31
    15cc:	f4 e1       	ldi	r31, 0x14	; 20
    15ce:	af 2e       	mov	r10, r31
    15d0:	f1 e0       	ldi	r31, 0x01	; 1
    15d2:	bf 2e       	mov	r11, r31
    15d4:	f0 2d       	mov	r31, r0
					set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    15d6:	0f 2e       	mov	r0, r31
    15d8:	f6 e1       	ldi	r31, 0x16	; 22
    15da:	8f 2e       	mov	r8, r31
    15dc:	f1 e0       	ldi	r31, 0x01	; 1
    15de:	9f 2e       	mov	r9, r31
    15e0:	f0 2d       	mov	r31, r0
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
	
	
}

void tune_8ths(uint8_t vco) {
    15e2:	ed ad       	sts	0x6d, r30
    15e4:	fe ad       	sts	0x6e, r31
		//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    15e6:	80 81       	ld	r24, Z
    15e8:	80 93 97 02 	sts	0x0297, r24
		
			if (note_number <= 2) {
    15ec:	21 96       	adiw	r28, 0x01	; 1
    15ee:	8e ad       	sts	0x6e, r24
    15f0:	9f ad       	sts	0x6f, r25
    15f2:	21 97       	sbiw	r28, 0x01	; 1
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	24 f4       	brge	.+8      	; 0x1602 <tune_8ths+0x276>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	80 93 96 02 	sts	0x0296, r24
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <tune_8ths+0x27c>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    1602:	92 e0       	ldi	r25, 0x02	; 2
    1604:	90 93 96 02 	sts	0x0296, r25
	
			}		
			uint16_t reference_count = reference[note_number].count;
    1608:	a1 81       	ldd	r26, Z+1	; 0x01
    160a:	b2 81       	ldd	r27, Z+2	; 0x02
    160c:	bc af       	sts	0x7c, r27
    160e:	ab af       	sts	0x7b, r26
			uint16_t osc_pitch_cv = 0;//136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
			//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
			//will need to test more thoroughly
			//osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
    1610:	ed e0       	ldi	r30, 0x0D	; 13
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	f8 af       	sts	0x78, r31
    1616:	ef ab       	sts	0x5f, r30
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
	
			}		
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;//136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
    1618:	00 e0       	ldi	r16, 0x00	; 0
    161a:	10 e0       	ldi	r17, 0x00	; 0
			//will need to test more thoroughly
			//osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
				//osc_pitch_cv = (osc_pitch_cv >> dac_bit) << dac_bit; //clear bits to be set. Omar scoffed at this line as if it didn't need to be done. Why?
				//oh, maybe because it should just be done once before loop. Doing it for each iteration after bit 7 is redundant
				osc_pitch_cv |= (1<<dac_bit);
    161c:	21 e0       	ldi	r18, 0x01	; 1
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	0f a8       	sts	0x8f, r16
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <tune_8ths+0x29c>
    1624:	22 0f       	add	r18, r18
    1626:	33 1f       	adc	r19, r19
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <tune_8ths+0x298>
    162c:	3a af       	sts	0x7a, r19
    162e:	29 af       	sts	0x79, r18
    1630:	02 2b       	or	r16, r18
    1632:	13 2b       	or	r17, r19

				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1634:	c3 01       	movw	r24, r6
    1636:	b8 01       	movw	r22, r16
    1638:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				count_finished = FALSE;
    163c:	10 92 95 02 	sts	0x0295, r1
				period_counter = 0;
    1640:	10 92 98 02 	sts	0x0298, r1
			

				while (count_finished == FALSE) {
    1644:	80 91 95 02 	lds	r24, 0x0295
    1648:	88 23       	and	r24, r24
    164a:	b1 f5       	brne	.+108    	; 0x16b8 <tune_8ths+0x32c>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);	
    164c:	80 91 97 02 	lds	r24, 0x0297
    1650:	4d a9       	sts	0x4d, r20
    1652:	5e a9       	sts	0x4e, r21
    1654:	48 0f       	add	r20, r24
    1656:	51 1d       	adc	r21, r1
    1658:	ca 01       	movw	r24, r20
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	0e 94 bf 01 	call	0x37e	; 0x37e <update_display>
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    1660:	c3 01       	movw	r24, r6
    1662:	b8 01       	movw	r22, r16
    1664:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_init_cv, init_cv);
    1668:	c2 01       	movw	r24, r4
    166a:	b1 01       	movw	r22, r2
    166c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_pw_cv, MAX);
    1670:	8b a9       	sts	0x4b, r24
    1672:	9c a9       	sts	0x4c, r25
    1674:	6f ef       	ldi	r22, 0xFF	; 255
    1676:	7f e3       	ldi	r23, 0x3F	; 63
    1678:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    167c:	c7 01       	movw	r24, r14
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    1686:	c6 01       	movw	r24, r12
    1688:	6f ef       	ldi	r22, 0xFF	; 255
    168a:	7f e3       	ldi	r23, 0x3F	; 63
    168c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&sustain_1_cv, MAX);
    1690:	c5 01       	movw	r24, r10
    1692:	6f ef       	ldi	r22, 0xFF	; 255
    1694:	7f e3       	ldi	r23, 0x3F	; 63
    1696:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    169a:	c4 01       	movw	r24, r8
    169c:	6f ef       	ldi	r22, 0xFF	; 255
    169e:	7f e3       	ldi	r23, 0x3F	; 63
    16a0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    16a4:	89 a9       	sts	0x49, r24
    16a6:	9a a9       	sts	0x4a, r25
    16a8:	6f ef       	ldi	r22, 0xFF	; 255
    16aa:	7f e3       	ldi	r23, 0x3F	; 63
    16ac:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_control_voltage>
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
				count_finished = FALSE;
				period_counter = 0;
			

				while (count_finished == FALSE) {
    16b0:	80 91 95 02 	lds	r24, 0x0295
    16b4:	88 23       	and	r24, r24
    16b6:	51 f2       	breq	.-108    	; 0x164c <tune_8ths+0x2c0>
			
			
				}							
				
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    16b8:	80 91 93 02 	lds	r24, 0x0293
    16bc:	90 91 94 02 	lds	r25, 0x0294
    16c0:	ab ad       	sts	0x6b, r26
    16c2:	bc ad       	sts	0x6c, r27
    16c4:	a8 17       	cp	r26, r24
    16c6:	b9 07       	cpc	r27, r25
    16c8:	50 f0       	brcs	.+20     	; 0x16de <tune_8ths+0x352>
    16ca:	80 91 ea 01 	lds	r24, 0x01EA
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	31 f4       	brne	.+12     	; 0x16de <tune_8ths+0x352>
    16d2:	89 ad       	sts	0x69, r24
    16d4:	9a ad       	sts	0x6a, r25
    16d6:	80 95       	com	r24
    16d8:	90 95       	com	r25
    16da:	08 23       	and	r16, r24
    16dc:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    16de:	80 91 93 02 	lds	r24, 0x0293
    16e2:	90 91 94 02 	lds	r25, 0x0294
    16e6:	eb ad       	sts	0x6b, r30
    16e8:	fc ad       	sts	0x6c, r31
    16ea:	8e 17       	cp	r24, r30
    16ec:	9f 07       	cpc	r25, r31
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <tune_8ths+0x36c>
    16f0:	80 91 ea 01 	lds	r24, 0x01EA
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	71 f0       	breq	.+28     	; 0x1714 <tune_8ths+0x388>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    16f8:	f1 e0       	ldi	r31, 0x01	; 1
    16fa:	f0 93 ea 01 	sts	0x01EA, r31
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;//136 + vco_pitch_table[(octave*12 + note_number) - 1]; //use previous pitch CV as a reference and add 136, which is ~83.333 mV on 14 bit 10V scale. ie. 1/12 of 1V
			//this method is faster than full 14 bit successive approximation, but isn't 'blind', so if there is some wacky scaling at the pitch extremes it could falter
			//will need to test more thoroughly
			//osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation on 8 LSBs
    16fe:	2f a9       	sts	0x4f, r18
    1700:	38 ad       	sts	0x68, r19
    1702:	21 50       	subi	r18, 0x01	; 1
    1704:	30 40       	sbci	r19, 0x00	; 0
    1706:	38 af       	sts	0x78, r19
    1708:	2f ab       	sts	0x5f, r18
    170a:	4f ef       	ldi	r20, 0xFF	; 255
    170c:	2f 3f       	cpi	r18, 0xFF	; 255
    170e:	34 07       	cpc	r19, r20
    1710:	09 f0       	breq	.+2      	; 0x1714 <tune_8ths+0x388>
    1712:	84 cf       	rjmp	.-248    	; 0x161c <tune_8ths+0x290>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    1714:	23 96       	adiw	r28, 0x03	; 3
    1716:	ae ad       	sts	0x6e, r26
    1718:	bf ad       	sts	0x6f, r27
    171a:	23 97       	sbiw	r28, 0x03	; 3
    171c:	0d 93       	st	X+, r16
    171e:	1d 93       	st	X+, r17
    1720:	23 96       	adiw	r28, 0x03	; 3
    1722:	bf af       	sts	0x7f, r27
    1724:	ae af       	sts	0x7e, r26
    1726:	23 97       	sbiw	r28, 0x03	; 3
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
		//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to period -1 in output compare ISR
		//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    1728:	21 96       	adiw	r28, 0x01	; 1
    172a:	ee ad       	sts	0x6e, r30
    172c:	ff ad       	sts	0x6f, r31
    172e:	21 97       	sbiw	r28, 0x01	; 1
    1730:	31 96       	adiw	r30, 0x01	; 1
    1732:	21 96       	adiw	r28, 0x01	; 1
    1734:	ff af       	sts	0x7f, r31
    1736:	ee af       	sts	0x7e, r30
    1738:	21 97       	sbiw	r28, 0x01	; 1
    173a:	2d ad       	sts	0x6d, r18
    173c:	3e ad       	sts	0x6e, r19
    173e:	2d 5f       	subi	r18, 0xFD	; 253
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	3e af       	sts	0x7e, r19
    1744:	2d af       	sts	0x7d, r18
    1746:	e0 31       	cpi	r30, 0x10	; 16
    1748:	f1 05       	cpc	r31, r1
    174a:	09 f0       	breq	.+2      	; 0x174e <tune_8ths+0x3c2>
    174c:	4a cf       	rjmp	.-364    	; 0x15e2 <tune_8ths+0x256>
		
		}
	

	
		PORTF &= ~(1<<GATE); //turn gate off
    174e:	89 98       	cbi	0x11, 1	; 17
		
		TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    1750:	ee e6       	ldi	r30, 0x6E	; 110
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8d 7f       	andi	r24, 0xFD	; 253
    1758:	80 83       	st	Z, r24
	
	
	}	
    175a:	ce 5b       	subi	r28, 0xBE	; 190
    175c:	df 4f       	sbci	r29, 0xFF	; 255
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	cf 90       	pop	r12
    1778:	bf 90       	pop	r11
    177a:	af 90       	pop	r10
    177c:	9f 90       	pop	r9
    177e:	8f 90       	pop	r8
    1780:	7f 90       	pop	r7
    1782:	6f 90       	pop	r6
    1784:	5f 90       	pop	r5
    1786:	4f 90       	pop	r4
    1788:	3f 90       	pop	r3
    178a:	2f 90       	pop	r2
    178c:	08 95       	ret

0000178e <read_switch_port>:

uint8_t read_switch_port(void) {
	
	
	
    178e:	08 95       	ret

00001790 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    1790:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    1792:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    1794:	74 83       	std	Z+4, r23	; 0x04
    1796:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    1798:	11 82       	std	Z+1, r1	; 0x01
    179a:	10 82       	st	Z, r1
}
    179c:	08 95       	ret

0000179e <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	ec 01       	movw	r28, r24
    17a6:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    17a8:	0e 94 3e 0c 	call	0x187c	; 0x187c <store_and_clear_interrupt>
    17ac:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    17ae:	39 81       	ldd	r19, Y+1	; 0x01
    17b0:	83 2f       	mov	r24, r19
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	6a 81       	ldd	r22, Y+2	; 0x02
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	0e 94 97 12 	call	0x252e	; 0x252e <__divmodhi4>
    17be:	48 81       	ld	r20, Y
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	84 17       	cp	r24, r20
    17c4:	95 07       	cpc	r25, r21
    17c6:	29 f4       	brne	.+10     	; 0x17d2 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    17c8:	82 2f       	mov	r24, r18
    17ca:	0e 94 41 0c 	call	0x1882	; 0x1882 <restore_interrupt_setting>
      return false;
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	11 c0       	rjmp	.+34     	; 0x17f4 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    17d2:	eb 81       	ldd	r30, Y+3	; 0x03
    17d4:	fc 81       	ldd	r31, Y+4	; 0x04
    17d6:	e3 0f       	add	r30, r19
    17d8:	f1 1d       	adc	r31, r1
    17da:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	6a 81       	ldd	r22, Y+2	; 0x02
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	0e 94 97 12 	call	0x252e	; 0x252e <__divmodhi4>
    17ea:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    17ec:	82 2f       	mov	r24, r18
    17ee:	0e 94 41 0c 	call	0x1882	; 0x1882 <restore_interrupt_setting>
      return true;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	08 95       	ret

000017fc <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    1802:	0e 94 3e 0c 	call	0x187c	; 0x187c <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    1806:	29 81       	ldd	r18, Y+1	; 0x01
    1808:	98 81       	ld	r25, Y
    180a:	29 17       	cp	r18, r25
    180c:	18 f0       	brcs	.+6      	; 0x1814 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    180e:	c2 2f       	mov	r28, r18
    1810:	c9 1b       	sub	r28, r25
    1812:	03 c0       	rjmp	.+6      	; 0x181a <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    1814:	ca 81       	ldd	r28, Y+2	; 0x02
    1816:	c2 0f       	add	r28, r18
    1818:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    181a:	0e 94 41 0c 	call	0x1882	; 0x1882 <restore_interrupt_setting>
   return len;
}
    181e:	8c 2f       	mov	r24, r28
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    1826:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    1828:	20 81       	ld	r18, Z
    182a:	86 2f       	mov	r24, r22
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	82 0f       	add	r24, r18
    1830:	91 1d       	adc	r25, r1
    1832:	62 81       	ldd	r22, Z+2	; 0x02
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	0e 94 97 12 	call	0x252e	; 0x252e <__divmodhi4>
    183a:	03 80       	ldd	r0, Z+3	; 0x03
    183c:	f4 81       	ldd	r31, Z+4	; 0x04
    183e:	e0 2d       	mov	r30, r0
    1840:	e8 0f       	add	r30, r24
    1842:	f9 1f       	adc	r31, r25
}
    1844:	80 81       	ld	r24, Z
    1846:	08 95       	ret

00001848 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	ec 01       	movw	r28, r24
    1850:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    1852:	0e 94 3e 0c 	call	0x187c	; 0x187c <store_and_clear_interrupt>
    1856:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    1858:	88 81       	ld	r24, Y
    185a:	21 2f       	mov	r18, r17
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	28 0f       	add	r18, r24
    1860:	31 1d       	adc	r19, r1
    1862:	6a 81       	ldd	r22, Y+2	; 0x02
    1864:	c9 01       	movw	r24, r18
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	0e 94 97 12 	call	0x252e	; 0x252e <__divmodhi4>
    186c:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    186e:	84 2f       	mov	r24, r20
    1870:	0e 94 41 0c 	call	0x1882	; 0x1882 <restore_interrupt_setting>
}
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	08 95       	ret

0000187c <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    187c:	8f b7       	in	r24, 0x3f	; 63
   cli();
    187e:	f8 94       	cli
   return sreg;
}
    1880:	08 95       	ret

00001882 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    1882:	8f bf       	out	0x3f, r24	; 63
}
    1884:	08 95       	ret

00001886 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    1886:	88 1f       	adc	r24, r24
    1888:	88 27       	eor	r24, r24
    188a:	88 1f       	adc	r24, r24
    188c:	08 95       	ret

0000188e <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	88 3f       	cpi	r24, 0xF8	; 248
    1892:	08 f4       	brcc	.+2      	; 0x1896 <midi_is_realtime+0x8>
    1894:	90 e0       	ldi	r25, 0x00	; 0
}
    1896:	89 2f       	mov	r24, r25
    1898:	08 95       	ret

0000189a <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	20 7f       	andi	r18, 0xF0	; 240
    18a0:	30 70       	andi	r19, 0x00	; 0
    18a2:	20 3c       	cpi	r18, 0xC0	; 192
    18a4:	31 05       	cpc	r19, r1
    18a6:	e9 f1       	breq	.+122    	; 0x1922 <midi_packet_length+0x88>
    18a8:	21 3c       	cpi	r18, 0xC1	; 193
    18aa:	31 05       	cpc	r19, r1
    18ac:	8c f4       	brge	.+34     	; 0x18d0 <midi_packet_length+0x36>
    18ae:	20 39       	cpi	r18, 0x90	; 144
    18b0:	31 05       	cpc	r19, r1
    18b2:	e1 f0       	breq	.+56     	; 0x18ec <midi_packet_length+0x52>
    18b4:	21 39       	cpi	r18, 0x91	; 145
    18b6:	31 05       	cpc	r19, r1
    18b8:	24 f4       	brge	.+8      	; 0x18c2 <midi_packet_length+0x28>
    18ba:	20 38       	cpi	r18, 0x80	; 128
    18bc:	31 05       	cpc	r19, r1
    18be:	79 f5       	brne	.+94     	; 0x191e <midi_packet_length+0x84>
    18c0:	15 c0       	rjmp	.+42     	; 0x18ec <midi_packet_length+0x52>
    18c2:	20 3a       	cpi	r18, 0xA0	; 160
    18c4:	31 05       	cpc	r19, r1
    18c6:	91 f0       	breq	.+36     	; 0x18ec <midi_packet_length+0x52>
    18c8:	20 3b       	cpi	r18, 0xB0	; 176
    18ca:	31 05       	cpc	r19, r1
    18cc:	41 f5       	brne	.+80     	; 0x191e <midi_packet_length+0x84>
    18ce:	0e c0       	rjmp	.+28     	; 0x18ec <midi_packet_length+0x52>
    18d0:	20 3e       	cpi	r18, 0xE0	; 224
    18d2:	31 05       	cpc	r19, r1
    18d4:	59 f0       	breq	.+22     	; 0x18ec <midi_packet_length+0x52>
    18d6:	21 3e       	cpi	r18, 0xE1	; 225
    18d8:	31 05       	cpc	r19, r1
    18da:	24 f4       	brge	.+8      	; 0x18e4 <midi_packet_length+0x4a>
    18dc:	20 3d       	cpi	r18, 0xD0	; 208
    18de:	31 05       	cpc	r19, r1
    18e0:	f1 f4       	brne	.+60     	; 0x191e <midi_packet_length+0x84>
    18e2:	1f c0       	rjmp	.+62     	; 0x1922 <midi_packet_length+0x88>
    18e4:	20 3f       	cpi	r18, 0xF0	; 240
    18e6:	31 05       	cpc	r19, r1
    18e8:	d1 f4       	brne	.+52     	; 0x191e <midi_packet_length+0x84>
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    18ec:	83 e0       	ldi	r24, 0x03	; 3
    18ee:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    18f0:	86 3f       	cpi	r24, 0xF6	; 246
    18f2:	79 f0       	breq	.+30     	; 0x1912 <midi_packet_length+0x78>
    18f4:	87 3f       	cpi	r24, 0xF7	; 247
    18f6:	38 f4       	brcc	.+14     	; 0x1906 <midi_packet_length+0x6c>
    18f8:	82 3f       	cpi	r24, 0xF2	; 242
    18fa:	a9 f0       	breq	.+42     	; 0x1926 <midi_packet_length+0x8c>
    18fc:	83 3f       	cpi	r24, 0xF3	; 243
    18fe:	59 f0       	breq	.+22     	; 0x1916 <midi_packet_length+0x7c>
    1900:	81 3f       	cpi	r24, 0xF1	; 241
    1902:	59 f4       	brne	.+22     	; 0x191a <midi_packet_length+0x80>
    1904:	08 c0       	rjmp	.+16     	; 0x1916 <midi_packet_length+0x7c>
    1906:	88 3f       	cpi	r24, 0xF8	; 248
    1908:	40 f0       	brcs	.+16     	; 0x191a <midi_packet_length+0x80>
    190a:	8d 3f       	cpi	r24, 0xFD	; 253
    190c:	10 f0       	brcs	.+4      	; 0x1912 <midi_packet_length+0x78>
    190e:	8e 3f       	cpi	r24, 0xFE	; 254
    1910:	20 f0       	brcs	.+8      	; 0x191a <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	08 95       	ret
         }
      default:
         return UNDEFINED;
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    1926:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    1928:	08 95       	ret

0000192a <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    192a:	0f 93       	push	r16
    192c:	34 2f       	mov	r19, r20
    192e:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    1930:	46 2f       	mov	r20, r22
    1932:	4f 70       	andi	r20, 0x0F	; 15
    1934:	40 6b       	ori	r20, 0xB0	; 176
    1936:	23 2f       	mov	r18, r19
    1938:	2f 77       	andi	r18, 0x7F	; 127
    193a:	0f 77       	andi	r16, 0x7F	; 127
    193c:	dc 01       	movw	r26, r24
    193e:	ed 91       	ld	r30, X+
    1940:	fc 91       	ld	r31, X
    1942:	63 e0       	ldi	r22, 0x03	; 3
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    1948:	0f 91       	pop	r16
    194a:	08 95       	ret

0000194c <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    194c:	0f 93       	push	r16
    194e:	34 2f       	mov	r19, r20
    1950:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1952:	46 2f       	mov	r20, r22
    1954:	4f 70       	andi	r20, 0x0F	; 15
    1956:	40 69       	ori	r20, 0x90	; 144
    1958:	23 2f       	mov	r18, r19
    195a:	2f 77       	andi	r18, 0x7F	; 127
    195c:	0f 77       	andi	r16, 0x7F	; 127
    195e:	dc 01       	movw	r26, r24
    1960:	ed 91       	ld	r30, X+
    1962:	fc 91       	ld	r31, X
    1964:	63 e0       	ldi	r22, 0x03	; 3
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    196a:	0f 91       	pop	r16
    196c:	08 95       	ret

0000196e <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    196e:	0f 93       	push	r16
    1970:	34 2f       	mov	r19, r20
    1972:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    1974:	46 2f       	mov	r20, r22
    1976:	4f 70       	andi	r20, 0x0F	; 15
    1978:	40 68       	ori	r20, 0x80	; 128
    197a:	23 2f       	mov	r18, r19
    197c:	2f 77       	andi	r18, 0x7F	; 127
    197e:	0f 77       	andi	r16, 0x7F	; 127
    1980:	dc 01       	movw	r26, r24
    1982:	ed 91       	ld	r30, X+
    1984:	fc 91       	ld	r31, X
    1986:	63 e0       	ldi	r22, 0x03	; 3
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    198c:	0f 91       	pop	r16
    198e:	08 95       	ret

00001990 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    1990:	0f 93       	push	r16
    1992:	34 2f       	mov	r19, r20
    1994:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    1996:	46 2f       	mov	r20, r22
    1998:	4f 70       	andi	r20, 0x0F	; 15
    199a:	40 6a       	ori	r20, 0xA0	; 160
    199c:	23 2f       	mov	r18, r19
    199e:	2f 77       	andi	r18, 0x7F	; 127
    19a0:	0f 77       	andi	r16, 0x7F	; 127
    19a2:	dc 01       	movw	r26, r24
    19a4:	ed 91       	ld	r30, X+
    19a6:	fc 91       	ld	r31, X
    19a8:	63 e0       	ldi	r22, 0x03	; 3
    19aa:	70 e0       	ldi	r23, 0x00	; 0
    19ac:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    19ae:	0f 91       	pop	r16
    19b0:	08 95       	ret

000019b2 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    19b6:	20 e2       	ldi	r18, 0x20	; 32
    19b8:	40 30       	cpi	r20, 0x00	; 0
    19ba:	52 07       	cpc	r21, r18
    19bc:	44 f4       	brge	.+16     	; 0x19ce <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    19be:	a0 ee       	ldi	r26, 0xE0	; 224
    19c0:	40 30       	cpi	r20, 0x00	; 0
    19c2:	5a 07       	cpc	r21, r26
    19c4:	3c f0       	brlt	.+14     	; 0x19d4 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    19c6:	8a 01       	movw	r16, r20
    19c8:	00 50       	subi	r16, 0x00	; 0
    19ca:	10 4e       	sbci	r17, 0xE0	; 224
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    19ce:	0f ef       	ldi	r16, 0xFF	; 255
    19d0:	1f e3       	ldi	r17, 0x3F	; 63
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    19d4:	00 e0       	ldi	r16, 0x00	; 0
    19d6:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    19d8:	46 2f       	mov	r20, r22
    19da:	4f 70       	andi	r20, 0x0F	; 15
    19dc:	40 6e       	ori	r20, 0xE0	; 224
    19de:	20 2f       	mov	r18, r16
    19e0:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    19e2:	00 0f       	add	r16, r16
    19e4:	01 2f       	mov	r16, r17
    19e6:	00 1f       	adc	r16, r16
    19e8:	11 0b       	sbc	r17, r17
    19ea:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    19ec:	0f 77       	andi	r16, 0x7F	; 127
    19ee:	dc 01       	movw	r26, r24
    19f0:	ed 91       	ld	r30, X+
    19f2:	fc 91       	ld	r31, X
    19f4:	63 e0       	ldi	r22, 0x03	; 3
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	08 95       	ret

00001a00 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    1a00:	0f 93       	push	r16
    1a02:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1a04:	46 2f       	mov	r20, r22
    1a06:	4f 70       	andi	r20, 0x0F	; 15
    1a08:	40 6c       	ori	r20, 0xC0	; 192
    1a0a:	2f 77       	andi	r18, 0x7F	; 127
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	ed 91       	ld	r30, X+
    1a10:	fc 91       	ld	r31, X
    1a12:	62 e0       	ldi	r22, 0x02	; 2
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	00 e0       	ldi	r16, 0x00	; 0
    1a18:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    1a1a:	0f 91       	pop	r16
    1a1c:	08 95       	ret

00001a1e <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    1a1e:	0f 93       	push	r16
    1a20:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    1a22:	46 2f       	mov	r20, r22
    1a24:	4f 70       	andi	r20, 0x0F	; 15
    1a26:	40 6d       	ori	r20, 0xD0	; 208
    1a28:	2f 77       	andi	r18, 0x7F	; 127
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	ed 91       	ld	r30, X+
    1a2e:	fc 91       	ld	r31, X
    1a30:	62 e0       	ldi	r22, 0x02	; 2
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	00 e0       	ldi	r16, 0x00	; 0
    1a36:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    1a3c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    1a3e:	dc 01       	movw	r26, r24
    1a40:	ed 91       	ld	r30, X+
    1a42:	fc 91       	ld	r31, X
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	48 ef       	ldi	r20, 0xF8	; 248
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	00 e0       	ldi	r16, 0x00	; 0
    1a4e:	09 95       	icall
}
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    1a54:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    1a56:	dc 01       	movw	r26, r24
    1a58:	ed 91       	ld	r30, X+
    1a5a:	fc 91       	ld	r31, X
    1a5c:	61 e0       	ldi	r22, 0x01	; 1
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	49 ef       	ldi	r20, 0xF9	; 249
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	00 e0       	ldi	r16, 0x00	; 0
    1a66:	09 95       	icall
}
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <midi_send_start>:

void midi_send_start(MidiDevice * device){
    1a6c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    1a6e:	dc 01       	movw	r26, r24
    1a70:	ed 91       	ld	r30, X+
    1a72:	fc 91       	ld	r31, X
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	4a ef       	ldi	r20, 0xFA	; 250
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	00 e0       	ldi	r16, 0x00	; 0
    1a7e:	09 95       	icall
}
    1a80:	0f 91       	pop	r16
    1a82:	08 95       	ret

00001a84 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    1a84:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    1a86:	dc 01       	movw	r26, r24
    1a88:	ed 91       	ld	r30, X+
    1a8a:	fc 91       	ld	r31, X
    1a8c:	61 e0       	ldi	r22, 0x01	; 1
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	4b ef       	ldi	r20, 0xFB	; 251
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	00 e0       	ldi	r16, 0x00	; 0
    1a96:	09 95       	icall
}
    1a98:	0f 91       	pop	r16
    1a9a:	08 95       	ret

00001a9c <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    1a9c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	ed 91       	ld	r30, X+
    1aa2:	fc 91       	ld	r31, X
    1aa4:	61 e0       	ldi	r22, 0x01	; 1
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	4c ef       	ldi	r20, 0xFC	; 252
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	00 e0       	ldi	r16, 0x00	; 0
    1aae:	09 95       	icall
}
    1ab0:	0f 91       	pop	r16
    1ab2:	08 95       	ret

00001ab4 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    1ab4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	ed 91       	ld	r30, X+
    1aba:	fc 91       	ld	r31, X
    1abc:	61 e0       	ldi	r22, 0x01	; 1
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	4e ef       	ldi	r20, 0xFE	; 254
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	00 e0       	ldi	r16, 0x00	; 0
    1ac6:	09 95       	icall
}
    1ac8:	0f 91       	pop	r16
    1aca:	08 95       	ret

00001acc <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    1acc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    1ace:	dc 01       	movw	r26, r24
    1ad0:	ed 91       	ld	r30, X+
    1ad2:	fc 91       	ld	r31, X
    1ad4:	61 e0       	ldi	r22, 0x01	; 1
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	4f ef       	ldi	r20, 0xFF	; 255
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	00 e0       	ldi	r16, 0x00	; 0
    1ade:	09 95       	icall
}
    1ae0:	0f 91       	pop	r16
    1ae2:	08 95       	ret

00001ae4 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    1ae4:	0f 93       	push	r16
   device->send_func(device, 2,
    1ae6:	26 2f       	mov	r18, r22
    1ae8:	2f 77       	andi	r18, 0x7F	; 127
    1aea:	dc 01       	movw	r26, r24
    1aec:	ed 91       	ld	r30, X+
    1aee:	fc 91       	ld	r31, X
    1af0:	62 e0       	ldi	r22, 0x02	; 2
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	41 ef       	ldi	r20, 0xF1	; 241
    1af6:	00 e0       	ldi	r16, 0x00	; 0
    1af8:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    1afa:	0f 91       	pop	r16
    1afc:	08 95       	ret

00001afe <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
   device->send_func(device, 3,
    1b02:	26 2f       	mov	r18, r22
    1b04:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    1b06:	8b 01       	movw	r16, r22
    1b08:	00 0f       	add	r16, r16
    1b0a:	01 2f       	mov	r16, r17
    1b0c:	00 1f       	adc	r16, r16
    1b0e:	11 0b       	sbc	r17, r17
    1b10:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    1b12:	0f 77       	andi	r16, 0x7F	; 127
    1b14:	dc 01       	movw	r26, r24
    1b16:	ed 91       	ld	r30, X+
    1b18:	fc 91       	ld	r31, X
    1b1a:	63 e0       	ldi	r22, 0x03	; 3
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	42 ef       	ldi	r20, 0xF2	; 242
    1b20:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	08 95       	ret

00001b28 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    1b28:	0f 93       	push	r16
   device->send_func(device, 2,
    1b2a:	26 2f       	mov	r18, r22
    1b2c:	2f 77       	andi	r18, 0x7F	; 127
    1b2e:	dc 01       	movw	r26, r24
    1b30:	ed 91       	ld	r30, X+
    1b32:	fc 91       	ld	r31, X
    1b34:	62 e0       	ldi	r22, 0x02	; 2
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	43 ef       	ldi	r20, 0xF3	; 243
    1b3a:	00 e0       	ldi	r16, 0x00	; 0
    1b3c:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    1b3e:	0f 91       	pop	r16
    1b40:	08 95       	ret

00001b42 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    1b42:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    1b44:	dc 01       	movw	r26, r24
    1b46:	ed 91       	ld	r30, X+
    1b48:	fc 91       	ld	r31, X
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	46 ef       	ldi	r20, 0xF6	; 246
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	00 e0       	ldi	r16, 0x00	; 0
    1b54:	09 95       	icall
}
    1b56:	0f 91       	pop	r16
    1b58:	08 95       	ret

00001b5a <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    1b5a:	0f 93       	push	r16
    1b5c:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    1b5e:	dc 01       	movw	r26, r24
    1b60:	ed 91       	ld	r30, X+
    1b62:	fc 91       	ld	r31, X
    1b64:	61 e0       	ldi	r22, 0x01	; 1
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	00 e0       	ldi	r16, 0x00	; 0
    1b6c:	09 95       	icall
}
    1b6e:	0f 91       	pop	r16
    1b70:	08 95       	ret

00001b72 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    1b72:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    1b74:	dc 01       	movw	r26, r24
    1b76:	ed 91       	ld	r30, X+
    1b78:	fc 91       	ld	r31, X
    1b7a:	09 95       	icall
}
    1b7c:	0f 91       	pop	r16
    1b7e:	08 95       	ret

00001b80 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1b80:	6f 92       	push	r6
    1b82:	7f 92       	push	r7
    1b84:	8f 92       	push	r8
    1b86:	9f 92       	push	r9
    1b88:	af 92       	push	r10
    1b8a:	bf 92       	push	r11
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <midi_send_array+0x1e>
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	4c 01       	movw	r8, r24
    1ba6:	6b 01       	movw	r12, r22
    1ba8:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1baa:	61 15       	cp	r22, r1
    1bac:	71 05       	cpc	r23, r1
    1bae:	41 f1       	breq	.+80     	; 0x1c00 <midi_send_array+0x80>
    1bb0:	ee 24       	eor	r14, r14
    1bb2:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    1bb4:	0f 2e       	mov	r0, r31
    1bb6:	f3 e0       	ldi	r31, 0x03	; 3
    1bb8:	6f 2e       	mov	r6, r31
    1bba:	77 24       	eor	r7, r7
    1bbc:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    1bbe:	19 82       	std	Y+1, r1	; 0x01
    1bc0:	1a 82       	std	Y+2, r1	; 0x02
    1bc2:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    1bc4:	86 01       	movw	r16, r12
    1bc6:	0e 19       	sub	r16, r14
    1bc8:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    1bca:	04 30       	cpi	r16, 0x04	; 4
    1bcc:	11 05       	cpc	r17, r1
    1bce:	08 f0       	brcs	.+2      	; 0x1bd2 <midi_send_array+0x52>
    1bd0:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    1bd2:	b5 01       	movw	r22, r10
    1bd4:	6e 0d       	add	r22, r14
    1bd6:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    1bd8:	ce 01       	movw	r24, r28
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	40 2f       	mov	r20, r16
    1bde:	51 2f       	mov	r21, r17
    1be0:	0e 94 aa 12 	call	0x2554	; 0x2554 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    1be4:	c4 01       	movw	r24, r8
    1be6:	b8 01       	movw	r22, r16
    1be8:	49 81       	ldd	r20, Y+1	; 0x01
    1bea:	2a 81       	ldd	r18, Y+2	; 0x02
    1bec:	0b 81       	ldd	r16, Y+3	; 0x03
    1bee:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	e8 0e       	add	r14, r24
    1bf8:	f9 1e       	adc	r15, r25
    1bfa:	ec 14       	cp	r14, r12
    1bfc:	fd 04       	cpc	r15, r13
    1bfe:	f8 f2       	brcs	.-66     	; 0x1bbe <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	ff 90       	pop	r15
    1c10:	ef 90       	pop	r14
    1c12:	df 90       	pop	r13
    1c14:	cf 90       	pop	r12
    1c16:	bf 90       	pop	r11
    1c18:	af 90       	pop	r10
    1c1a:	9f 90       	pop	r9
    1c1c:	8f 90       	pop	r8
    1c1e:	7f 90       	pop	r7
    1c20:	6f 90       	pop	r6
    1c22:	08 95       	ret

00001c24 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1c24:	fc 01       	movw	r30, r24
    1c26:	73 83       	std	Z+3, r23	; 0x03
    1c28:	62 83       	std	Z+2, r22	; 0x02
}
    1c2a:	08 95       	ret

00001c2c <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	75 83       	std	Z+5, r23	; 0x05
    1c30:	64 83       	std	Z+4, r22	; 0x04
}
    1c32:	08 95       	ret

00001c34 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1c34:	fc 01       	movw	r30, r24
    1c36:	77 83       	std	Z+7, r23	; 0x07
    1c38:	66 83       	std	Z+6, r22	; 0x06
}
    1c3a:	08 95       	ret

00001c3c <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	71 87       	std	Z+9, r23	; 0x09
    1c40:	60 87       	std	Z+8, r22	; 0x08
}
    1c42:	08 95       	ret

00001c44 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1c44:	fc 01       	movw	r30, r24
    1c46:	73 87       	std	Z+11, r23	; 0x0b
    1c48:	62 87       	std	Z+10, r22	; 0x0a
}
    1c4a:	08 95       	ret

00001c4c <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	75 87       	std	Z+13, r23	; 0x0d
    1c50:	64 87       	std	Z+12, r22	; 0x0c
}
    1c52:	08 95       	ret

00001c54 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1c54:	fc 01       	movw	r30, r24
    1c56:	77 87       	std	Z+15, r23	; 0x0f
    1c58:	66 87       	std	Z+14, r22	; 0x0e
}
    1c5a:	08 95       	ret

00001c5c <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	71 8b       	std	Z+17, r23	; 0x11
    1c60:	60 8b       	std	Z+16, r22	; 0x10
}
    1c62:	08 95       	ret

00001c64 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    1c64:	fc 01       	movw	r30, r24
    1c66:	73 8b       	std	Z+19, r23	; 0x13
    1c68:	62 8b       	std	Z+18, r22	; 0x12
}
    1c6a:	08 95       	ret

00001c6c <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	75 8b       	std	Z+21, r23	; 0x15
    1c70:	64 8b       	std	Z+20, r22	; 0x14
}
    1c72:	08 95       	ret

00001c74 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    1c74:	fc 01       	movw	r30, r24
    1c76:	77 8b       	std	Z+23, r23	; 0x17
    1c78:	66 8b       	std	Z+22, r22	; 0x16
}
    1c7a:	08 95       	ret

00001c7c <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	71 8f       	std	Z+25, r23	; 0x19
    1c80:	60 8f       	std	Z+24, r22	; 0x18
}
    1c82:	08 95       	ret

00001c84 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    1c84:	fc 01       	movw	r30, r24
    1c86:	73 8f       	std	Z+27, r23	; 0x1b
    1c88:	62 8f       	std	Z+26, r22	; 0x1a
}
    1c8a:	08 95       	ret

00001c8c <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	75 8f       	std	Z+29, r23	; 0x1d
    1c90:	64 8f       	std	Z+28, r22	; 0x1c
}
    1c92:	08 95       	ret

00001c94 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    1c94:	fc 01       	movw	r30, r24
    1c96:	77 8f       	std	Z+31, r23	; 0x1f
    1c98:	66 8f       	std	Z+30, r22	; 0x1e
}
    1c9a:	08 95       	ret

00001c9c <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    1ca2:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    1ca4:	1f a2       	lds	r17, 0x9f
    1ca6:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    1ca8:	bc 01       	movw	r22, r24
    1caa:	68 5d       	subi	r22, 0xD8	; 216
    1cac:	7f 4f       	sbci	r23, 0xFF	; 255
    1cae:	88 51       	subi	r24, 0x18	; 24
    1cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb2:	40 ec       	ldi	r20, 0xC0	; 192
    1cb4:	0e 94 c8 0b 	call	0x1790	; 0x1790 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    1cb8:	1b 82       	std	Y+3, r1	; 0x03
    1cba:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    1cbc:	1d 82       	std	Y+5, r1	; 0x05
    1cbe:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    1cc0:	1f 82       	std	Y+7, r1	; 0x07
    1cc2:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1cc4:	19 86       	std	Y+9, r1	; 0x09
    1cc6:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1cc8:	1b 86       	std	Y+11, r1	; 0x0b
    1cca:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1ccc:	1d 86       	std	Y+13, r1	; 0x0d
    1cce:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    1cd0:	1f 86       	std	Y+15, r1	; 0x0f
    1cd2:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1cd4:	19 8a       	std	Y+17, r1	; 0x11
    1cd6:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1cd8:	1b 8a       	std	Y+19, r1	; 0x13
    1cda:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1cdc:	1d 8a       	std	Y+21, r1	; 0x15
    1cde:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    1ce0:	1f 8a       	std	Y+23, r1	; 0x17
    1ce2:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1ce4:	19 8e       	std	Y+25, r1	; 0x19
    1ce6:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1ce8:	1b 8e       	std	Y+27, r1	; 0x1b
    1cea:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1cec:	1d 8e       	std	Y+29, r1	; 0x1d
    1cee:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    1cf0:	1f 8e       	std	Y+31, r1	; 0x1f
    1cf2:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1cf4:	19 a2       	lds	r17, 0x99
    1cf6:	18 a2       	lds	r17, 0x98
}
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	08 95       	ret

00001cfe <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    1cfe:	ef 92       	push	r14
    1d00:	ff 92       	push	r15
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1d0c:	66 23       	and	r22, r22
    1d0e:	99 f0       	breq	.+38     	; 0x1d36 <midi_device_input+0x38>
    1d10:	04 2f       	mov	r16, r20
    1d12:	15 2f       	mov	r17, r21
    1d14:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    1d16:	0f 2e       	mov	r0, r31
    1d18:	f8 ee       	ldi	r31, 0xE8	; 232
    1d1a:	ef 2e       	mov	r14, r31
    1d1c:	ff 24       	eor	r15, r15
    1d1e:	f0 2d       	mov	r31, r0
    1d20:	e8 0e       	add	r14, r24
    1d22:	f9 1e       	adc	r15, r25
    1d24:	f8 01       	movw	r30, r16
    1d26:	61 91       	ld	r22, Z+
    1d28:	8f 01       	movw	r16, r30
    1d2a:	c7 01       	movw	r24, r14
    1d2c:	0e 94 cf 0b 	call	0x179e	; 0x179e <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1d30:	cf 5f       	subi	r28, 0xFF	; 255
    1d32:	cd 17       	cp	r28, r29
    1d34:	b9 f7       	brne	.-18     	; 0x1d24 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15
    1d40:	ef 90       	pop	r14
    1d42:	08 95       	ret

00001d44 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    1d44:	fc 01       	movw	r30, r24
    1d46:	71 83       	std	Z+1, r23	; 0x01
    1d48:	60 83       	st	Z, r22
}
    1d4a:	08 95       	ret

00001d4c <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	71 a3       	lds	r23, 0x51
    1d50:	60 a3       	lds	r22, 0x50
}
    1d52:	08 95       	ret

00001d54 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1d54:	af 92       	push	r10
    1d56:	bf 92       	push	r11
    1d58:	cf 92       	push	r12
    1d5a:	df 92       	push	r13
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <midi_input_callbacks+0x16>
    1d6a:	0f 92       	push	r0
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	6c 01       	movw	r12, r24
    1d72:	5b 01       	movw	r10, r22
    1d74:	f4 2e       	mov	r15, r20
    1d76:	e2 2e       	mov	r14, r18
    1d78:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	95 96       	adiw	r26, 0x25	; 37
    1d7e:	8c 91       	ld	r24, X
    1d80:	95 97       	sbiw	r26, 0x25	; 37
    1d82:	84 30       	cpi	r24, 0x04	; 4
    1d84:	e9 f4       	brne	.+58     	; 0x1dc0 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    1d86:	5a 96       	adiw	r26, 0x1a	; 26
    1d88:	ed 91       	ld	r30, X+
    1d8a:	fc 91       	ld	r31, X
    1d8c:	5b 97       	sbiw	r26, 0x1b	; 27
    1d8e:	30 97       	sbiw	r30, 0x00	; 0
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <midi_input_callbacks+0x40>
    1d92:	ee c0       	rjmp	.+476    	; 0x1f70 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    1d94:	cb 01       	movw	r24, r22
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	63 e0       	ldi	r22, 0x03	; 3
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
    1da0:	cb 01       	movw	r24, r22
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	68 0f       	add	r22, r24
    1da8:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    1daa:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    1dac:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    1dae:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    1db0:	4a 2d       	mov	r20, r10
    1db2:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    1db4:	c6 01       	movw	r24, r12
    1db6:	9e 01       	movw	r18, r28
    1db8:	2f 5f       	subi	r18, 0xFF	; 255
    1dba:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbc:	09 95       	icall
    1dbe:	c8 c0       	rjmp	.+400    	; 0x1f50 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    1dc0:	62 30       	cpi	r22, 0x02	; 2
    1dc2:	71 05       	cpc	r23, r1
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <midi_input_callbacks+0x74>
    1dc6:	5f c0       	rjmp	.+190    	; 0x1e86 <midi_input_callbacks+0x132>
    1dc8:	63 30       	cpi	r22, 0x03	; 3
    1dca:	71 05       	cpc	r23, r1
    1dcc:	29 f0       	breq	.+10     	; 0x1dd8 <midi_input_callbacks+0x84>
    1dce:	61 30       	cpi	r22, 0x01	; 1
    1dd0:	71 05       	cpc	r23, r1
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <midi_input_callbacks+0x82>
    1dd4:	b3 c0       	rjmp	.+358    	; 0x1f3c <midi_input_callbacks+0x1e8>
    1dd6:	99 c0       	rjmp	.+306    	; 0x1f0a <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1dd8:	84 2f       	mov	r24, r20
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	80 7f       	andi	r24, 0xF0	; 240
    1dde:	90 70       	andi	r25, 0x00	; 0
    1de0:	80 3a       	cpi	r24, 0xA0	; 160
    1de2:	91 05       	cpc	r25, r1
    1de4:	29 f1       	breq	.+74     	; 0x1e30 <midi_input_callbacks+0xdc>
    1de6:	81 3a       	cpi	r24, 0xA1	; 161
    1de8:	91 05       	cpc	r25, r1
    1dea:	3c f4       	brge	.+14     	; 0x1dfa <midi_input_callbacks+0xa6>
    1dec:	80 38       	cpi	r24, 0x80	; 128
    1dee:	91 05       	cpc	r25, r1
    1df0:	c9 f0       	breq	.+50     	; 0x1e24 <midi_input_callbacks+0xd0>
    1df2:	80 39       	cpi	r24, 0x90	; 144
    1df4:	91 05       	cpc	r25, r1
    1df6:	91 f5       	brne	.+100    	; 0x1e5c <midi_input_callbacks+0x108>
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <midi_input_callbacks+0xc4>
    1dfa:	80 3e       	cpi	r24, 0xE0	; 224
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	f1 f0       	breq	.+60     	; 0x1e3c <midi_input_callbacks+0xe8>
    1e00:	80 3f       	cpi	r24, 0xF0	; 240
    1e02:	91 05       	cpc	r25, r1
    1e04:	09 f1       	breq	.+66     	; 0x1e48 <midi_input_callbacks+0xf4>
    1e06:	80 3b       	cpi	r24, 0xB0	; 176
    1e08:	91 05       	cpc	r25, r1
    1e0a:	41 f5       	brne	.+80     	; 0x1e5c <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    1e0c:	d6 01       	movw	r26, r12
    1e0e:	12 96       	adiw	r26, 0x02	; 2
    1e10:	ed 91       	ld	r30, X+
    1e12:	fc 91       	ld	r31, X
    1e14:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1e16:	24 c0       	rjmp	.+72     	; 0x1e60 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1e18:	d6 01       	movw	r26, r12
    1e1a:	14 96       	adiw	r26, 0x04	; 4
    1e1c:	ed 91       	ld	r30, X+
    1e1e:	fc 91       	ld	r31, X
    1e20:	15 97       	sbiw	r26, 0x05	; 5
              break;
    1e22:	1e c0       	rjmp	.+60     	; 0x1e60 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1e24:	d6 01       	movw	r26, r12
    1e26:	16 96       	adiw	r26, 0x06	; 6
    1e28:	ed 91       	ld	r30, X+
    1e2a:	fc 91       	ld	r31, X
    1e2c:	17 97       	sbiw	r26, 0x07	; 7
              break;
    1e2e:	18 c0       	rjmp	.+48     	; 0x1e60 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    1e30:	d6 01       	movw	r26, r12
    1e32:	18 96       	adiw	r26, 0x08	; 8
    1e34:	ed 91       	ld	r30, X+
    1e36:	fc 91       	ld	r31, X
    1e38:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1e3a:	12 c0       	rjmp	.+36     	; 0x1e60 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1e3c:	d6 01       	movw	r26, r12
    1e3e:	1a 96       	adiw	r26, 0x0a	; 10
    1e40:	ed 91       	ld	r30, X+
    1e42:	fc 91       	ld	r31, X
    1e44:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1e46:	0c c0       	rjmp	.+24     	; 0x1e60 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1e48:	b2 ef       	ldi	r27, 0xF2	; 242
    1e4a:	4b 17       	cp	r20, r27
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <midi_input_callbacks+0xfc>
    1e4e:	90 c0       	rjmp	.+288    	; 0x1f70 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    1e50:	d6 01       	movw	r26, r12
    1e52:	1c 96       	adiw	r26, 0x0c	; 12
    1e54:	ed 91       	ld	r30, X+
    1e56:	fc 91       	ld	r31, X
    1e58:	1d 97       	sbiw	r26, 0x0d	; 13
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1e5c:	e0 e0       	ldi	r30, 0x00	; 0
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    1e60:	30 97       	sbiw	r30, 0x00	; 0
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <midi_input_callbacks+0x112>
    1e64:	85 c0       	rjmp	.+266    	; 0x1f70 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    1e66:	b2 ef       	ldi	r27, 0xF2	; 242
    1e68:	fb 16       	cp	r15, r27
    1e6a:	31 f4       	brne	.+12     	; 0x1e78 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    1e6c:	c6 01       	movw	r24, r12
    1e6e:	62 ef       	ldi	r22, 0xF2	; 242
    1e70:	4e 2d       	mov	r20, r14
    1e72:	21 2f       	mov	r18, r17
    1e74:	09 95       	icall
    1e76:	6c c0       	rjmp	.+216    	; 0x1f50 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    1e78:	6f 2d       	mov	r22, r15
    1e7a:	6f 70       	andi	r22, 0x0F	; 15
    1e7c:	c6 01       	movw	r24, r12
    1e7e:	4e 2d       	mov	r20, r14
    1e80:	21 2f       	mov	r18, r17
    1e82:	09 95       	icall
    1e84:	65 c0       	rjmp	.+202    	; 0x1f50 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1e86:	84 2f       	mov	r24, r20
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	80 7f       	andi	r24, 0xF0	; 240
    1e8c:	90 70       	andi	r25, 0x00	; 0
    1e8e:	80 3d       	cpi	r24, 0xD0	; 208
    1e90:	91 05       	cpc	r25, r1
    1e92:	61 f0       	breq	.+24     	; 0x1eac <midi_input_callbacks+0x158>
    1e94:	80 3f       	cpi	r24, 0xF0	; 240
    1e96:	91 05       	cpc	r25, r1
    1e98:	79 f0       	breq	.+30     	; 0x1eb8 <midi_input_callbacks+0x164>
    1e9a:	80 3c       	cpi	r24, 0xC0	; 192
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	f9 f4       	brne	.+62     	; 0x1ede <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    1ea0:	d6 01       	movw	r26, r12
    1ea2:	1e 96       	adiw	r26, 0x0e	; 14
    1ea4:	ed 91       	ld	r30, X+
    1ea6:	fc 91       	ld	r31, X
    1ea8:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    1eaa:	1b c0       	rjmp	.+54     	; 0x1ee2 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    1eac:	d6 01       	movw	r26, r12
    1eae:	50 96       	adiw	r26, 0x10	; 16
    1eb0:	ed 91       	ld	r30, X+
    1eb2:	fc 91       	ld	r31, X
    1eb4:	51 97       	sbiw	r26, 0x11	; 17
              break;
    1eb6:	15 c0       	rjmp	.+42     	; 0x1ee2 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    1eb8:	b3 ef       	ldi	r27, 0xF3	; 243
    1eba:	4b 17       	cp	r20, r27
    1ebc:	31 f4       	brne	.+12     	; 0x1eca <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    1ebe:	d6 01       	movw	r26, r12
    1ec0:	52 96       	adiw	r26, 0x12	; 18
    1ec2:	ed 91       	ld	r30, X+
    1ec4:	fc 91       	ld	r31, X
    1ec6:	53 97       	sbiw	r26, 0x13	; 19
    1ec8:	0c c0       	rjmp	.+24     	; 0x1ee2 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1eca:	b1 ef       	ldi	r27, 0xF1	; 241
    1ecc:	4b 17       	cp	r20, r27
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <midi_input_callbacks+0x17e>
    1ed0:	4f c0       	rjmp	.+158    	; 0x1f70 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    1ed2:	d6 01       	movw	r26, r12
    1ed4:	54 96       	adiw	r26, 0x14	; 20
    1ed6:	ed 91       	ld	r30, X+
    1ed8:	fc 91       	ld	r31, X
    1eda:	55 97       	sbiw	r26, 0x15	; 21
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    1ede:	e0 e0       	ldi	r30, 0x00	; 0
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    1ee2:	30 97       	sbiw	r30, 0x00	; 0
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <midi_input_callbacks+0x194>
    1ee6:	44 c0       	rjmp	.+136    	; 0x1f70 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1ee8:	b3 ef       	ldi	r27, 0xF3	; 243
    1eea:	fb 16       	cp	r15, r27
    1eec:	19 f0       	breq	.+6      	; 0x1ef4 <midi_input_callbacks+0x1a0>
    1eee:	81 ef       	ldi	r24, 0xF1	; 241
    1ef0:	f8 16       	cp	r15, r24
    1ef2:	29 f4       	brne	.+10     	; 0x1efe <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1ef4:	c6 01       	movw	r24, r12
    1ef6:	6f 2d       	mov	r22, r15
    1ef8:	4e 2d       	mov	r20, r14
    1efa:	09 95       	icall
    1efc:	29 c0       	rjmp	.+82     	; 0x1f50 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    1efe:	6f 2d       	mov	r22, r15
    1f00:	6f 70       	andi	r22, 0x0F	; 15
    1f02:	c6 01       	movw	r24, r12
    1f04:	4e 2d       	mov	r20, r14
    1f06:	09 95       	icall
    1f08:	23 c0       	rjmp	.+70     	; 0x1f50 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1f0a:	84 2f       	mov	r24, r20
    1f0c:	0e 94 47 0c 	call	0x188e	; 0x188e <midi_is_realtime>
    1f10:	88 23       	and	r24, r24
    1f12:	31 f0       	breq	.+12     	; 0x1f20 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    1f14:	d6 01       	movw	r26, r12
    1f16:	56 96       	adiw	r26, 0x16	; 22
    1f18:	ed 91       	ld	r30, X+
    1f1a:	fc 91       	ld	r31, X
    1f1c:	57 97       	sbiw	r26, 0x17	; 23
    1f1e:	08 c0       	rjmp	.+16     	; 0x1f30 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    1f20:	b6 ef       	ldi	r27, 0xF6	; 246
    1f22:	fb 16       	cp	r15, r27
    1f24:	29 f5       	brne	.+74     	; 0x1f70 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    1f26:	d6 01       	movw	r26, r12
    1f28:	58 96       	adiw	r26, 0x18	; 24
    1f2a:	ed 91       	ld	r30, X+
    1f2c:	fc 91       	ld	r31, X
    1f2e:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    1f30:	30 97       	sbiw	r30, 0x00	; 0
    1f32:	f1 f0       	breq	.+60     	; 0x1f70 <midi_input_callbacks+0x21c>
            func(device, byte0);
    1f34:	c6 01       	movw	r24, r12
    1f36:	6f 2d       	mov	r22, r15
    1f38:	09 95       	icall
    1f3a:	0a c0       	rjmp	.+20     	; 0x1f50 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1f3c:	64 30       	cpi	r22, 0x04	; 4
    1f3e:	71 05       	cpc	r23, r1
    1f40:	a8 f4       	brcc	.+42     	; 0x1f6c <midi_input_callbacks+0x218>
    1f42:	16 c0       	rjmp	.+44     	; 0x1f70 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1f44:	c6 01       	movw	r24, r12
    1f46:	b5 01       	movw	r22, r10
    1f48:	4f 2d       	mov	r20, r15
    1f4a:	2e 2d       	mov	r18, r14
    1f4c:	01 2f       	mov	r16, r17
    1f4e:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    1f50:	d6 01       	movw	r26, r12
    1f52:	5e 96       	adiw	r26, 0x1e	; 30
    1f54:	ed 91       	ld	r30, X+
    1f56:	fc 91       	ld	r31, X
    1f58:	5f 97       	sbiw	r26, 0x1f	; 31
    1f5a:	30 97       	sbiw	r30, 0x00	; 0
    1f5c:	89 f0       	breq	.+34     	; 0x1f80 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    1f5e:	c6 01       	movw	r24, r12
    1f60:	b5 01       	movw	r22, r10
    1f62:	4f 2d       	mov	r20, r15
    1f64:	2e 2d       	mov	r18, r14
    1f66:	01 2f       	mov	r16, r17
    1f68:	09 95       	icall
    1f6a:	0a c0       	rjmp	.+20     	; 0x1f80 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    1f6c:	aa 24       	eor	r10, r10
    1f6e:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    1f70:	d6 01       	movw	r26, r12
    1f72:	5c 96       	adiw	r26, 0x1c	; 28
    1f74:	ed 91       	ld	r30, X+
    1f76:	fc 91       	ld	r31, X
    1f78:	5d 97       	sbiw	r26, 0x1d	; 29
    1f7a:	30 97       	sbiw	r30, 0x00	; 0
    1f7c:	19 f7       	brne	.-58     	; 0x1f44 <midi_input_callbacks+0x1f0>
    1f7e:	e8 cf       	rjmp	.-48     	; 0x1f50 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	df 90       	pop	r13
    1f94:	cf 90       	pop	r12
    1f96:	bf 90       	pop	r11
    1f98:	af 90       	pop	r10
    1f9a:	08 95       	ret

00001f9c <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    1f9c:	ef 92       	push	r14
    1f9e:	ff 92       	push	r15
    1fa0:	0f 93       	push	r16
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	7c 01       	movw	r14, r24
    1fa8:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    1faa:	86 2f       	mov	r24, r22
    1fac:	0e 94 47 0c 	call	0x188e	; 0x188e <midi_is_realtime>
    1fb0:	88 23       	and	r24, r24
    1fb2:	91 f0       	breq	.+36     	; 0x1fd8 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    1fb4:	d7 01       	movw	r26, r14
    1fb6:	95 96       	adiw	r26, 0x25	; 37
    1fb8:	dc 91       	ld	r29, X
    1fba:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	95 96       	adiw	r26, 0x25	; 37
    1fc0:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    1fc2:	c7 01       	movw	r24, r14
    1fc4:	61 e0       	ldi	r22, 0x01	; 1
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	4c 2f       	mov	r20, r28
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	00 e0       	ldi	r16, 0x00	; 0
    1fce:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <midi_input_callbacks>
    device->input_state = state;
    1fd2:	f7 01       	movw	r30, r14
    1fd4:	d5 a3       	lds	r29, 0x55
    1fd6:	b7 c0       	rjmp	.+366    	; 0x2146 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    1fd8:	8c 2f       	mov	r24, r28
    1fda:	0e 94 43 0c 	call	0x1886	; 0x1886 <midi_is_statusbyte>
    1fde:	88 23       	and	r24, r24
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <midi_process_byte+0x48>
    1fe2:	73 c0       	rjmp	.+230    	; 0x20ca <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1fe4:	d7 01       	movw	r26, r14
    1fe6:	95 96       	adiw	r26, 0x25	; 37
    1fe8:	8c 91       	ld	r24, X
    1fea:	95 97       	sbiw	r26, 0x25	; 37
    1fec:	84 30       	cpi	r24, 0x04	; 4
    1fee:	49 f0       	breq	.+18     	; 0x2002 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    1ff0:	92 96       	adiw	r26, 0x22	; 34
    1ff2:	cc 93       	st	X, r28
    1ff4:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	97 96       	adiw	r26, 0x27	; 39
    1ffc:	9c 93       	st	X, r25
    1ffe:	8e 93       	st	-X, r24
    2000:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    2002:	8c 2f       	mov	r24, r28
    2004:	0e 94 4d 0c 	call	0x189a	; 0x189a <midi_packet_length>
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	41 f0       	breq	.+16     	; 0x201c <midi_process_byte+0x80>
    200c:	81 30       	cpi	r24, 0x01	; 1
    200e:	00 f1       	brcs	.+64     	; 0x2050 <midi_process_byte+0xb4>
    2010:	82 30       	cpi	r24, 0x02	; 2
    2012:	a1 f0       	breq	.+40     	; 0x203c <midi_process_byte+0xa0>
    2014:	83 30       	cpi	r24, 0x03	; 3
    2016:	09 f0       	breq	.+2      	; 0x201a <midi_process_byte+0x7e>
    2018:	4f c0       	rjmp	.+158    	; 0x20b8 <midi_process_byte+0x11c>
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	f7 01       	movw	r30, r14
    2020:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    2022:	c7 01       	movw	r24, r14
    2024:	61 e0       	ldi	r22, 0x01	; 1
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	4c 2f       	mov	r20, r28
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	00 e0       	ldi	r16, 0x00	; 0
    202e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <midi_input_callbacks>
        device->input_state = IDLE;
    2032:	d7 01       	movw	r26, r14
    2034:	95 96       	adiw	r26, 0x25	; 37
    2036:	1c 92       	st	X, r1
    2038:	95 97       	sbiw	r26, 0x25	; 37
        break;
    203a:	85 c0       	rjmp	.+266    	; 0x2146 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    203c:	82 e0       	ldi	r24, 0x02	; 2
    203e:	f7 01       	movw	r30, r14
    2040:	85 a3       	lds	r24, 0x55
        break;
    2042:	81 c0       	rjmp	.+258    	; 0x2146 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    2044:	83 e0       	ldi	r24, 0x03	; 3
    2046:	d7 01       	movw	r26, r14
    2048:	95 96       	adiw	r26, 0x25	; 37
    204a:	8c 93       	st	X, r24
    204c:	95 97       	sbiw	r26, 0x25	; 37
        break;
    204e:	7b c0       	rjmp	.+246    	; 0x2146 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    2050:	c0 3f       	cpi	r28, 0xF0	; 240
    2052:	19 f0       	breq	.+6      	; 0x205a <midi_process_byte+0xbe>
    2054:	c7 3f       	cpi	r28, 0xF7	; 247
    2056:	59 f5       	brne	.+86     	; 0x20ae <midi_process_byte+0x112>
    2058:	0a c0       	rjmp	.+20     	; 0x206e <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    205a:	84 e0       	ldi	r24, 0x04	; 4
    205c:	f7 01       	movw	r30, r14
    205e:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    2060:	80 ef       	ldi	r24, 0xF0	; 240
    2062:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	97 a3       	lds	r25, 0x57
    206a:	86 a3       	lds	r24, 0x56
            break;
    206c:	6c c0       	rjmp	.+216    	; 0x2146 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    206e:	d7 01       	movw	r26, r14
    2070:	96 96       	adiw	r26, 0x26	; 38
    2072:	2d 91       	ld	r18, X+
    2074:	3c 91       	ld	r19, X
    2076:	97 97       	sbiw	r26, 0x27	; 39
    2078:	c9 01       	movw	r24, r18
    207a:	63 e0       	ldi	r22, 0x03	; 3
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
    2082:	f7 01       	movw	r30, r14
    2084:	e8 0f       	add	r30, r24
    2086:	f9 1f       	adc	r31, r25
    2088:	87 ef       	ldi	r24, 0xF7	; 247
    208a:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    208c:	b9 01       	movw	r22, r18
    208e:	6f 5f       	subi	r22, 0xFF	; 255
    2090:	7f 4f       	sbci	r23, 0xFF	; 255
    2092:	f7 01       	movw	r30, r14
    2094:	77 a3       	lds	r23, 0x57
    2096:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    2098:	c7 01       	movw	r24, r14
    209a:	42 a1       	lds	r20, 0x42
    209c:	23 a1       	lds	r18, 0x43
    209e:	04 a1       	lds	r16, 0x44
    20a0:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    20a4:	d7 01       	movw	r26, r14
    20a6:	95 96       	adiw	r26, 0x25	; 37
    20a8:	1c 92       	st	X, r1
    20aa:	95 97       	sbiw	r26, 0x25	; 37
            break;
    20ac:	4c c0       	rjmp	.+152    	; 0x2146 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    20ae:	f7 01       	movw	r30, r14
    20b0:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    20b2:	17 a2       	lds	r17, 0x97
    20b4:	16 a2       	lds	r17, 0x96
    20b6:	47 c0       	rjmp	.+142    	; 0x2146 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    20b8:	d7 01       	movw	r26, r14
    20ba:	95 96       	adiw	r26, 0x25	; 37
    20bc:	1c 92       	st	X, r1
    20be:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    20c0:	97 96       	adiw	r26, 0x27	; 39
    20c2:	1c 92       	st	X, r1
    20c4:	1e 92       	st	-X, r1
    20c6:	96 97       	sbiw	r26, 0x26	; 38
        break;
    20c8:	3e c0       	rjmp	.+124    	; 0x2146 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    20ca:	f7 01       	movw	r30, r14
    20cc:	25 a1       	lds	r18, 0x45
    20ce:	22 23       	and	r18, r18
    20d0:	d1 f1       	breq	.+116    	; 0x2146 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    20d2:	06 a0       	lds	r16, 0x86
    20d4:	f7 a1       	lds	r31, 0x47
    20d6:	e0 2d       	mov	r30, r0
    20d8:	cf 01       	movw	r24, r30
    20da:	63 e0       	ldi	r22, 0x03	; 3
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
    20e2:	ac 01       	movw	r20, r24
    20e4:	8e 0d       	add	r24, r14
    20e6:	9f 1d       	adc	r25, r15
    20e8:	dc 01       	movw	r26, r24
    20ea:	92 96       	adiw	r26, 0x22	; 34
    20ec:	cc 93       	st	X, r28
    20ee:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    20f0:	bf 01       	movw	r22, r30
    20f2:	6f 5f       	subi	r22, 0xFF	; 255
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255
    20f6:	f7 01       	movw	r30, r14
    20f8:	77 a3       	lds	r23, 0x57
    20fa:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    20fc:	41 30       	cpi	r20, 0x01	; 1
    20fe:	51 05       	cpc	r21, r1
    2100:	91 f0       	breq	.+36     	; 0x2126 <midi_process_byte+0x18a>
    2102:	42 30       	cpi	r20, 0x02	; 2
    2104:	51 05       	cpc	r21, r1
    2106:	f9 f4       	brne	.+62     	; 0x2146 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    2108:	c7 01       	movw	r24, r14
    210a:	42 a1       	lds	r20, 0x42
    210c:	23 a1       	lds	r18, 0x43
    210e:	04 a1       	lds	r16, 0x44
    2110:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    2114:	f7 01       	movw	r30, r14
    2116:	85 a1       	lds	r24, 0x45
    2118:	84 30       	cpi	r24, 0x04	; 4
    211a:	a9 f0       	breq	.+42     	; 0x2146 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	97 a3       	lds	r25, 0x57
    2122:	86 a3       	lds	r24, 0x56
    2124:	10 c0       	rjmp	.+32     	; 0x2146 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    2126:	22 30       	cpi	r18, 0x02	; 2
    2128:	71 f4       	brne	.+28     	; 0x2146 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    212a:	c7 01       	movw	r24, r14
    212c:	42 a1       	lds	r20, 0x42
    212e:	23 a1       	lds	r18, 0x43
    2130:	00 e0       	ldi	r16, 0x00	; 0
    2132:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    2136:	f7 01       	movw	r30, r14
    2138:	85 a1       	lds	r24, 0x45
    213a:	84 30       	cpi	r24, 0x04	; 4
    213c:	21 f0       	breq	.+8      	; 0x2146 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	97 a3       	lds	r25, 0x57
    2144:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	0f 91       	pop	r16
    214c:	ff 90       	pop	r15
    214e:	ef 90       	pop	r14
    2150:	08 95       	ret

00002152 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    2152:	cf 92       	push	r12
    2154:	df 92       	push	r13
    2156:	ef 92       	push	r14
    2158:	ff 92       	push	r15
    215a:	0f 93       	push	r16
    215c:	1f 93       	push	r17
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    2164:	dc 01       	movw	r26, r24
    2166:	90 96       	adiw	r26, 0x20	; 32
    2168:	ed 91       	ld	r30, X+
    216a:	fc 91       	ld	r31, X
    216c:	91 97       	sbiw	r26, 0x21	; 33
    216e:	30 97       	sbiw	r30, 0x00	; 0
    2170:	09 f0       	breq	.+2      	; 0x2174 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    2172:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    2174:	0f 2e       	mov	r0, r31
    2176:	f8 ee       	ldi	r31, 0xE8	; 232
    2178:	ef 2e       	mov	r14, r31
    217a:	ff 24       	eor	r15, r15
    217c:	f0 2d       	mov	r31, r0
    217e:	ec 0c       	add	r14, r12
    2180:	fd 1c       	adc	r15, r13
    2182:	c7 01       	movw	r24, r14
    2184:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    2188:	c8 2f       	mov	r28, r24
    218a:	d0 e0       	ldi	r29, 0x00	; 0
    218c:	20 97       	sbiw	r28, 0x00	; 0
    218e:	99 f0       	breq	.+38     	; 0x21b6 <midi_device_process+0x64>
    2190:	00 e0       	ldi	r16, 0x00	; 0
    2192:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    2194:	c7 01       	movw	r24, r14
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	0e 94 13 0c 	call	0x1826	; 0x1826 <bytequeue_get>
    219c:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    219e:	c6 01       	movw	r24, r12
    21a0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    21a4:	c7 01       	movw	r24, r14
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	0e 94 24 0c 	call	0x1848	; 0x1848 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    21ac:	0f 5f       	subi	r16, 0xFF	; 255
    21ae:	1f 4f       	sbci	r17, 0xFF	; 255
    21b0:	0c 17       	cp	r16, r28
    21b2:	1d 07       	cpc	r17, r29
    21b4:	78 f3       	brcs	.-34     	; 0x2194 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	08 95       	ret

000021c8 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    21c8:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    21ca:	67 e0       	ldi	r22, 0x07	; 7
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
    21d2:	48 2f       	mov	r20, r24
   if (remainder)
    21d4:	88 23       	and	r24, r24
    21d6:	81 f0       	breq	.+32     	; 0x21f8 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    21d8:	c9 01       	movw	r24, r18
    21da:	67 e0       	ldi	r22, 0x07	; 7
    21dc:	70 e0       	ldi	r23, 0x00	; 0
    21de:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
    21e2:	cb 01       	movw	r24, r22
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	84 0f       	add	r24, r20
    21f4:	91 1d       	adc	r25, r1
    21f6:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    21f8:	c9 01       	movw	r24, r18
    21fa:	67 e0       	ldi	r22, 0x07	; 7
    21fc:	70 e0       	ldi	r23, 0x00	; 0
    21fe:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
    2202:	cb 01       	movw	r24, r22
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
}
    2210:	08 95       	ret

00002212 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    2212:	48 2f       	mov	r20, r24
    2214:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    2216:	a1 f0       	breq	.+40     	; 0x2240 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    2218:	9c 01       	movw	r18, r24
    221a:	36 95       	lsr	r19
    221c:	27 95       	ror	r18
    221e:	36 95       	lsr	r19
    2220:	27 95       	ror	r18
    2222:	36 95       	lsr	r19
    2224:	27 95       	ror	r18
    2226:	c9 01       	movw	r24, r18
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	82 1b       	sub	r24, r18
    2236:	93 0b       	sbc	r25, r19
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	84 0f       	add	r24, r20
    223c:	91 1d       	adc	r25, r1
    223e:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    2240:	9c 01       	movw	r18, r24
    2242:	36 95       	lsr	r19
    2244:	27 95       	ror	r18
    2246:	36 95       	lsr	r19
    2248:	27 95       	ror	r18
    224a:	36 95       	lsr	r19
    224c:	27 95       	ror	r18
    224e:	c9 01       	movw	r24, r18
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	82 1b       	sub	r24, r18
    225e:	93 0b       	sbc	r25, r19
}
    2260:	08 95       	ret

00002262 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    2262:	2f 92       	push	r2
    2264:	3f 92       	push	r3
    2266:	4f 92       	push	r4
    2268:	5f 92       	push	r5
    226a:	6f 92       	push	r6
    226c:	7f 92       	push	r7
    226e:	8f 92       	push	r8
    2270:	9f 92       	push	r9
    2272:	af 92       	push	r10
    2274:	bf 92       	push	r11
    2276:	cf 92       	push	r12
    2278:	df 92       	push	r13
    227a:	ef 92       	push	r14
    227c:	ff 92       	push	r15
    227e:	0f 93       	push	r16
    2280:	1f 93       	push	r17
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	00 d0       	rcall	.+0      	; 0x2288 <sysex_encode+0x26>
    2288:	00 d0       	rcall	.+0      	; 0x228a <sysex_encode+0x28>
    228a:	00 d0       	rcall	.+0      	; 0x228c <sysex_encode+0x2a>
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	1c 01       	movw	r2, r24
    2292:	7a 83       	std	Y+2, r23	; 0x02
    2294:	69 83       	std	Y+1, r22	; 0x01
    2296:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    2298:	ca 01       	movw	r24, r20
    229a:	67 e0       	ldi	r22, 0x07	; 7
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
    22a2:	2b 01       	movw	r4, r22
    22a4:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    22a6:	61 15       	cp	r22, r1
    22a8:	71 05       	cpc	r23, r1
    22aa:	b1 f1       	breq	.+108    	; 0x2318 <sysex_encode+0xb6>
    22ac:	81 01       	movw	r16, r2
    22ae:	e9 80       	ldd	r14, Y+1	; 0x01
    22b0:	fa 80       	ldd	r15, Y+2	; 0x02
    22b2:	cc 24       	eor	r12, r12
    22b4:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    22b6:	88 24       	eor	r8, r8
    22b8:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    22ba:	1e 83       	std	Y+6, r17	; 0x06
    22bc:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    22be:	f8 01       	movw	r30, r16
    22c0:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    22c2:	fc 82       	std	Y+4, r15	; 0x04
    22c4:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    22c6:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    22c8:	ab 81       	ldd	r26, Y+3	; 0x03
    22ca:	bc 81       	ldd	r27, Y+4	; 0x04
    22cc:	2d 91       	ld	r18, X+
    22ce:	bc 83       	std	Y+4, r27	; 0x04
    22d0:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    22d2:	4f 5f       	subi	r20, 0xFF	; 255
    22d4:	5f 4f       	sbci	r21, 0xFF	; 255
    22d6:	82 2f       	mov	r24, r18
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	80 78       	andi	r24, 0x80	; 128
    22dc:	90 70       	andi	r25, 0x00	; 0
    22de:	bc 01       	movw	r22, r24
    22e0:	04 2e       	mov	r0, r20
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <sysex_encode+0x86>
    22e4:	75 95       	asr	r23
    22e6:	67 95       	ror	r22
    22e8:	0a 94       	dec	r0
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <sysex_encode+0x82>
    22ec:	ad 81       	ldd	r26, Y+5	; 0x05
    22ee:	be 81       	ldd	r27, Y+6	; 0x06
    22f0:	8c 91       	ld	r24, X
    22f2:	86 2b       	or	r24, r22
    22f4:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    22f6:	2f 77       	andi	r18, 0x7F	; 127
    22f8:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    22fa:	47 30       	cpi	r20, 0x07	; 7
    22fc:	51 05       	cpc	r21, r1
    22fe:	21 f7       	brne	.-56     	; 0x22c8 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    2300:	08 94       	sec
    2302:	c1 1c       	adc	r12, r1
    2304:	d1 1c       	adc	r13, r1
    2306:	08 5f       	subi	r16, 0xF8	; 248
    2308:	1f 4f       	sbci	r17, 0xFF	; 255
    230a:	e7 e0       	ldi	r30, 0x07	; 7
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	ee 0e       	add	r14, r30
    2310:	ff 1e       	adc	r15, r31
    2312:	ca 14       	cp	r12, r10
    2314:	db 04       	cpc	r13, r11
    2316:	89 f6       	brne	.-94     	; 0x22ba <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    2318:	c3 01       	movw	r24, r6
    231a:	67 e0       	ldi	r22, 0x07	; 7
    231c:	70 e0       	ldi	r23, 0x00	; 0
    231e:	0e 94 83 12 	call	0x2506	; 0x2506 <__udivmodhi4>
   if (remainder) {
    2322:	88 23       	and	r24, r24
    2324:	d9 f1       	breq	.+118    	; 0x239c <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    2326:	82 01       	movw	r16, r4
    2328:	00 0f       	add	r16, r16
    232a:	11 1f       	adc	r17, r17
    232c:	00 0f       	add	r16, r16
    232e:	11 1f       	adc	r17, r17
    2330:	00 0f       	add	r16, r16
    2332:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    2334:	78 01       	movw	r14, r16
    2336:	e4 18       	sub	r14, r4
    2338:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    233a:	d1 01       	movw	r26, r2
    233c:	a0 0f       	add	r26, r16
    233e:	b1 1f       	adc	r27, r17
    2340:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    2342:	68 2f       	mov	r22, r24
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	61 15       	cp	r22, r1
    2348:	71 05       	cpc	r23, r1
    234a:	19 f1       	breq	.+70     	; 0x2392 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    234c:	e9 81       	ldd	r30, Y+1	; 0x01
    234e:	fa 81       	ldd	r31, Y+2	; 0x02
    2350:	ee 0e       	add	r14, r30
    2352:	ff 1e       	adc	r15, r31
    2354:	c8 01       	movw	r24, r16
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	28 0e       	add	r2, r24
    235a:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    2360:	f7 01       	movw	r30, r14
    2362:	41 91       	ld	r20, Z+
    2364:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    2366:	2f 5f       	subi	r18, 0xFF	; 255
    2368:	3f 4f       	sbci	r19, 0xFF	; 255
    236a:	84 2f       	mov	r24, r20
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	80 78       	andi	r24, 0x80	; 128
    2370:	90 70       	andi	r25, 0x00	; 0
    2372:	02 2e       	mov	r0, r18
    2374:	02 c0       	rjmp	.+4      	; 0x237a <sysex_encode+0x118>
    2376:	95 95       	asr	r25
    2378:	87 95       	ror	r24
    237a:	0a 94       	dec	r0
    237c:	e2 f7       	brpl	.-8      	; 0x2376 <sysex_encode+0x114>
    237e:	9c 91       	ld	r25, X
    2380:	89 2b       	or	r24, r25
    2382:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    2384:	4f 77       	andi	r20, 0x7F	; 127
    2386:	f1 01       	movw	r30, r2
    2388:	41 93       	st	Z+, r20
    238a:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    238c:	26 17       	cp	r18, r22
    238e:	37 07       	cpc	r19, r23
    2390:	38 f3       	brcs	.-50     	; 0x2360 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    2392:	c8 01       	movw	r24, r16
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	86 0f       	add	r24, r22
    2398:	97 1f       	adc	r25, r23
    239a:	07 c0       	rjmp	.+14     	; 0x23aa <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    239c:	c2 01       	movw	r24, r4
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
   }
}
    23aa:	26 96       	adiw	r28, 0x06	; 6
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	1f 91       	pop	r17
    23bc:	0f 91       	pop	r16
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	cf 90       	pop	r12
    23c6:	bf 90       	pop	r11
    23c8:	af 90       	pop	r10
    23ca:	9f 90       	pop	r9
    23cc:	8f 90       	pop	r8
    23ce:	7f 90       	pop	r7
    23d0:	6f 90       	pop	r6
    23d2:	5f 90       	pop	r5
    23d4:	4f 90       	pop	r4
    23d6:	3f 90       	pop	r3
    23d8:	2f 90       	pop	r2
    23da:	08 95       	ret

000023dc <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    23dc:	6f 92       	push	r6
    23de:	7f 92       	push	r7
    23e0:	8f 92       	push	r8
    23e2:	9f 92       	push	r9
    23e4:	af 92       	push	r10
    23e6:	bf 92       	push	r11
    23e8:	cf 92       	push	r12
    23ea:	df 92       	push	r13
    23ec:	ef 92       	push	r14
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	3c 01       	movw	r6, r24
    23fa:	4b 01       	movw	r8, r22
    23fc:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    23fe:	42 30       	cpi	r20, 0x02	; 2
    2400:	51 05       	cpc	r21, r1
    2402:	08 f4       	brcc	.+2      	; 0x2406 <sysex_decode+0x2a>
    2404:	6f c0       	rjmp	.+222    	; 0x24e4 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    2406:	7a 01       	movw	r14, r20
    2408:	f6 94       	lsr	r15
    240a:	e7 94       	ror	r14
    240c:	f6 94       	lsr	r15
    240e:	e7 94       	ror	r14
    2410:	f6 94       	lsr	r15
    2412:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    2414:	e1 14       	cp	r14, r1
    2416:	f1 04       	cpc	r15, r1
    2418:	29 f1       	breq	.+74     	; 0x2464 <sysex_decode+0x88>
    241a:	eb 01       	movw	r28, r22
    241c:	b3 01       	movw	r22, r6
    241e:	00 e0       	ldi	r16, 0x00	; 0
    2420:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    2422:	cc 24       	eor	r12, r12
    2424:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2426:	de 01       	movw	r26, r28
    2428:	11 96       	adiw	r26, 0x01	; 1
    242a:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    242c:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    242e:	2d 91       	ld	r18, X+
    2430:	2f 77       	andi	r18, 0x7F	; 127
    2432:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    2434:	4f 5f       	subi	r20, 0xFF	; 255
    2436:	5f 4f       	sbci	r21, 0xFF	; 255
    2438:	88 81       	ld	r24, Y
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	04 2e       	mov	r0, r20
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <sysex_decode+0x68>
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	0a 94       	dec	r0
    2446:	e2 f7       	brpl	.-8      	; 0x2440 <sysex_decode+0x64>
    2448:	80 78       	andi	r24, 0x80	; 128
    244a:	28 2b       	or	r18, r24
    244c:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    244e:	47 30       	cpi	r20, 0x07	; 7
    2450:	51 05       	cpc	r21, r1
    2452:	69 f7       	brne	.-38     	; 0x242e <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    2454:	0f 5f       	subi	r16, 0xFF	; 255
    2456:	1f 4f       	sbci	r17, 0xFF	; 255
    2458:	28 96       	adiw	r28, 0x08	; 8
    245a:	69 5f       	subi	r22, 0xF9	; 249
    245c:	7f 4f       	sbci	r23, 0xFF	; 255
    245e:	0e 15       	cp	r16, r14
    2460:	1f 05       	cpc	r17, r15
    2462:	09 f7       	brne	.-62     	; 0x2426 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    2464:	5a 2d       	mov	r21, r10
    2466:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    2468:	99 f1       	breq	.+102    	; 0x24d0 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    246a:	e7 01       	movw	r28, r14
    246c:	cc 0f       	add	r28, r28
    246e:	dd 1f       	adc	r29, r29
    2470:	cc 0f       	add	r28, r28
    2472:	dd 1f       	adc	r29, r29
    2474:	cc 0f       	add	r28, r28
    2476:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    2478:	8e 01       	movw	r16, r28
    247a:	0e 19       	sub	r16, r14
    247c:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    247e:	65 2f       	mov	r22, r21
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	61 50       	subi	r22, 0x01	; 1
    2484:	70 40       	sbci	r23, 0x00	; 0
    2486:	f9 f0       	breq	.+62     	; 0x24c6 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    2488:	ce 01       	movw	r24, r28
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	d4 01       	movw	r26, r8
    248e:	a8 0f       	add	r26, r24
    2490:	b9 1f       	adc	r27, r25
    2492:	f3 01       	movw	r30, r6
    2494:	e0 0f       	add	r30, r16
    2496:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    249c:	c8 0d       	add	r28, r8
    249e:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    24a0:	4d 91       	ld	r20, X+
    24a2:	4f 77       	andi	r20, 0x7F	; 127
    24a4:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    24a6:	2f 5f       	subi	r18, 0xFF	; 255
    24a8:	3f 4f       	sbci	r19, 0xFF	; 255
    24aa:	88 81       	ld	r24, Y
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	02 2e       	mov	r0, r18
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <sysex_decode+0xda>
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	0a 94       	dec	r0
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <sysex_decode+0xd6>
    24ba:	80 78       	andi	r24, 0x80	; 128
    24bc:	48 2b       	or	r20, r24
    24be:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    24c0:	26 17       	cp	r18, r22
    24c2:	37 07       	cpc	r19, r23
    24c4:	68 f3       	brcs	.-38     	; 0x24a0 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    24c6:	c8 01       	movw	r24, r16
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	85 0f       	add	r24, r21
    24cc:	91 1d       	adc	r25, r1
    24ce:	0c c0       	rjmp	.+24     	; 0x24e8 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    24d0:	c7 01       	movw	r24, r14
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	8e 19       	sub	r24, r14
    24e0:	9f 09       	sbc	r25, r15
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	ff 90       	pop	r15
    24f2:	ef 90       	pop	r14
    24f4:	df 90       	pop	r13
    24f6:	cf 90       	pop	r12
    24f8:	bf 90       	pop	r11
    24fa:	af 90       	pop	r10
    24fc:	9f 90       	pop	r9
    24fe:	8f 90       	pop	r8
    2500:	7f 90       	pop	r7
    2502:	6f 90       	pop	r6
    2504:	08 95       	ret

00002506 <__udivmodhi4>:
    2506:	aa 1b       	sub	r26, r26
    2508:	bb 1b       	sub	r27, r27
    250a:	51 e1       	ldi	r21, 0x11	; 17
    250c:	07 c0       	rjmp	.+14     	; 0x251c <__udivmodhi4_ep>

0000250e <__udivmodhi4_loop>:
    250e:	aa 1f       	adc	r26, r26
    2510:	bb 1f       	adc	r27, r27
    2512:	a6 17       	cp	r26, r22
    2514:	b7 07       	cpc	r27, r23
    2516:	10 f0       	brcs	.+4      	; 0x251c <__udivmodhi4_ep>
    2518:	a6 1b       	sub	r26, r22
    251a:	b7 0b       	sbc	r27, r23

0000251c <__udivmodhi4_ep>:
    251c:	88 1f       	adc	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	5a 95       	dec	r21
    2522:	a9 f7       	brne	.-22     	; 0x250e <__udivmodhi4_loop>
    2524:	80 95       	com	r24
    2526:	90 95       	com	r25
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	08 95       	ret

0000252e <__divmodhi4>:
    252e:	97 fb       	bst	r25, 7
    2530:	09 2e       	mov	r0, r25
    2532:	07 26       	eor	r0, r23
    2534:	0a d0       	rcall	.+20     	; 0x254a <__divmodhi4_neg1>
    2536:	77 fd       	sbrc	r23, 7
    2538:	04 d0       	rcall	.+8      	; 0x2542 <__divmodhi4_neg2>
    253a:	e5 df       	rcall	.-54     	; 0x2506 <__udivmodhi4>
    253c:	06 d0       	rcall	.+12     	; 0x254a <__divmodhi4_neg1>
    253e:	00 20       	and	r0, r0
    2540:	1a f4       	brpl	.+6      	; 0x2548 <__divmodhi4_exit>

00002542 <__divmodhi4_neg2>:
    2542:	70 95       	com	r23
    2544:	61 95       	neg	r22
    2546:	7f 4f       	sbci	r23, 0xFF	; 255

00002548 <__divmodhi4_exit>:
    2548:	08 95       	ret

0000254a <__divmodhi4_neg1>:
    254a:	f6 f7       	brtc	.-4      	; 0x2548 <__divmodhi4_exit>
    254c:	90 95       	com	r25
    254e:	81 95       	neg	r24
    2550:	9f 4f       	sbci	r25, 0xFF	; 255
    2552:	08 95       	ret

00002554 <memcpy>:
    2554:	fb 01       	movw	r30, r22
    2556:	dc 01       	movw	r26, r24
    2558:	02 c0       	rjmp	.+4      	; 0x255e <memcpy+0xa>
    255a:	01 90       	ld	r0, Z+
    255c:	0d 92       	st	X+, r0
    255e:	41 50       	subi	r20, 0x01	; 1
    2560:	50 40       	sbci	r21, 0x00	; 0
    2562:	d8 f7       	brcc	.-10     	; 0x255a <memcpy+0x6>
    2564:	08 95       	ret

00002566 <memmove>:
    2566:	68 17       	cp	r22, r24
    2568:	79 07       	cpc	r23, r25
    256a:	68 f4       	brcc	.+26     	; 0x2586 <memmove+0x20>
    256c:	fb 01       	movw	r30, r22
    256e:	dc 01       	movw	r26, r24
    2570:	e4 0f       	add	r30, r20
    2572:	f5 1f       	adc	r31, r21
    2574:	a4 0f       	add	r26, r20
    2576:	b5 1f       	adc	r27, r21
    2578:	02 c0       	rjmp	.+4      	; 0x257e <memmove+0x18>
    257a:	02 90       	ld	r0, -Z
    257c:	0e 92       	st	-X, r0
    257e:	41 50       	subi	r20, 0x01	; 1
    2580:	50 40       	sbci	r21, 0x00	; 0
    2582:	d8 f7       	brcc	.-10     	; 0x257a <memmove+0x14>
    2584:	08 95       	ret
    2586:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <memcpy>

0000258a <_exit>:
    258a:	f8 94       	cli

0000258c <__stop_program>:
    258c:	ff cf       	rjmp	.-2      	; 0x258c <__stop_program>
