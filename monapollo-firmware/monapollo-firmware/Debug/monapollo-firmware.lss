
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00003c36  00003cea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c36  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000213  008002b0  008002b0  00003e9a  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00004510  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00005104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000300  00000000  00000000  00005448  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a1b  00000000  00000000  00005748  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018b0  00000000  00000000  0000c163  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000214c  00000000  00000000  0000da13  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d8c  00000000  00000000  0000fb60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000198a  00000000  00000000  000108ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002ec9  00000000  00000000  00012276  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  0001513f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_9>
      28:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e6 e3       	ldi	r30, 0x36	; 54
      78:	fc e3       	ldi	r31, 0x3C	; 60
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a3 3c       	cpi	r26, 0xC3	; 195
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 16 04 	call	0x82c	; 0x82c <main>
      9a:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:
struct arp arp;


//static struct midi_note arp_sequence[24] = {0,0};

void update_arp_sequence(void) {
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
	
	//arp.step_number = gate_buffer + arp.range * gate_buffer; //gate buffer is the number of currently held notes
	//uint8_t temp_range = 1;
	arp.step_number = gate_buffer*(arp.range + 1);
     15e:	80 91 84 03 	lds	r24, 0x0384
     162:	8f 5f       	subi	r24, 0xFF	; 255
     164:	90 91 b0 02 	lds	r25, 0x02B0
     168:	89 9f       	mul	r24, r25
     16a:	80 2d       	mov	r24, r0
     16c:	11 24       	eor	r1, r1
     16e:	80 93 85 03 	sts	0x0385, r24
     172:	00 e0       	ldi	r16, 0x00	; 0
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     174:	aa 24       	eor	r10, r10
     176:	bb 24       	eor	r11, r11
	//uint8_t temp_range = 1;
	arp.step_number = gate_buffer*(arp.range + 1);
	
	
	//set arp sequence
	uint8_t step = 0;
     178:	10 e0       	ldi	r17, 0x00	; 0
	
	for (int range = 0; range <= arp.range; range++) {
		
		
		
		for (int i = 0; i <= gate_buffer; i++) {
     17a:	88 24       	eor	r8, r8
     17c:	99 24       	eor	r9, r9
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     17e:	0f 2e       	mov	r0, r31
     180:	f9 e8       	ldi	r31, 0x89	; 137
     182:	ef 2e       	mov	r14, r31
     184:	f3 e0       	ldi	r31, 0x03	; 3
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
				
				case UP:
				
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     18a:	0f 2e       	mov	r0, r31
     18c:	f4 e8       	ldi	r31, 0x84	; 132
     18e:	cf 2e       	mov	r12, r31
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	df 2e       	mov	r13, r31
     194:	f0 2d       	mov	r31, r0
     196:	35 c0       	rjmp	.+106    	; 0x202 <update_arp_sequence+0xbc>
		
		
		
		for (int i = 0; i <= gate_buffer; i++) {
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	8c 1b       	sub	r24, r28
     19c:	0e 94 28 01 	call	0x250	; 0x250 <get_indexed_note>
     1a0:	28 2f       	mov	r18, r24
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     1a2:	f7 01       	movw	r30, r14
     1a4:	80 81       	ld	r24, Z
     1a6:	88 23       	and	r24, r24
     1a8:	19 f0       	breq	.+6      	; 0x1b0 <update_arp_sequence+0x6a>
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	c1 f4       	brne	.+48     	; 0x1de <update_arp_sequence+0x98>
     1ae:	0c c0       	rjmp	.+24     	; 0x1c8 <update_arp_sequence+0x82>
				
				case UP:
				
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1b0:	81 2f       	mov	r24, r17
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	03 96       	adiw	r24, 0x03	; 3
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	8c 0d       	add	r24, r12
     1bc:	9d 1d       	adc	r25, r13
     1be:	20 0f       	add	r18, r16
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18
     1c4:	1f 5f       	subi	r17, 0xFF	; 255
				
					break;
     1c6:	0b c0       	rjmp	.+22     	; 0x1de <update_arp_sequence+0x98>
					
				case DOWN:
				
					arp.sequence[step++].note = root_note - (range*12); //will need to handle min note out of range here
     1c8:	81 2f       	mov	r24, r17
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	03 96       	adiw	r24, 0x03	; 3
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	8c 0d       	add	r24, r12
     1d4:	9d 1d       	adc	r25, r13
     1d6:	20 1b       	sub	r18, r16
     1d8:	fc 01       	movw	r30, r24
     1da:	20 83       	st	Z, r18
     1dc:	1f 5f       	subi	r17, 0xFF	; 255
	
	for (int range = 0; range <= arp.range; range++) {
		
		
		
		for (int i = 0; i <= gate_buffer; i++) {
     1de:	21 96       	adiw	r28, 0x01	; 1
     1e0:	80 91 b0 02 	lds	r24, 0x02B0
     1e4:	28 2f       	mov	r18, r24
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	2c 17       	cp	r18, r28
     1ea:	3d 07       	cpc	r19, r29
     1ec:	ac f6       	brge	.-86     	; 0x198 <update_arp_sequence+0x52>
	
	//set arp sequence
	uint8_t step = 0;
	
	
	for (int range = 0; range <= arp.range; range++) {
     1ee:	08 94       	sec
     1f0:	a1 1c       	adc	r10, r1
     1f2:	b1 1c       	adc	r11, r1
     1f4:	04 5f       	subi	r16, 0xF4	; 244
     1f6:	f6 01       	movw	r30, r12
     1f8:	80 81       	ld	r24, Z
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	8a 15       	cp	r24, r10
     1fe:	9b 05       	cpc	r25, r11
     200:	24 f0       	brlt	.+8      	; 0x20a <update_arp_sequence+0xc4>
		
		
		
		for (int i = 0; i <= gate_buffer; i++) {
     202:	80 91 b0 02 	lds	r24, 0x02B0
     206:	e4 01       	movw	r28, r8
     208:	c7 cf       	rjmp	.-114    	; 0x198 <update_arp_sequence+0x52>
	

		
	
	
}
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	df 90       	pop	r13
     218:	cf 90       	pop	r12
     21a:	bf 90       	pop	r11
     21c:	af 90       	pop	r10
     21e:	9f 90       	pop	r9
     220:	8f 90       	pop	r8
     222:	08 95       	ret

00000224 <step_arp_note>:

void step_arp_note(void) { //updates arp note according to range, mode and keys held
	
	
	if (++arp.step_position >= arp.step_number) arp.step_position  = 0; //reset step position when at end of sequence 
     224:	80 91 86 03 	lds	r24, 0x0386
     228:	8f 5f       	subi	r24, 0xFF	; 255
     22a:	80 93 86 03 	sts	0x0386, r24
     22e:	90 91 85 03 	lds	r25, 0x0385
     232:	89 17       	cp	r24, r25
     234:	10 f0       	brcs	.+4      	; 0x23a <step_arp_note+0x16>
     236:	10 92 86 03 	sts	0x0386, r1
	
	arp.current_note = arp.sequence[arp.step_position].note;
     23a:	e0 91 86 03 	lds	r30, 0x0386
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	ee 0f       	add	r30, r30
     242:	ff 1f       	adc	r31, r31
     244:	e6 57       	subi	r30, 0x76	; 118
     246:	fc 4f       	sbci	r31, 0xFC	; 252
     248:	80 81       	ld	r24, Z
     24a:	80 93 87 03 	sts	0x0387, r24
	

     24e:	08 95       	ret

00000250 <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     250:	e8 2f       	mov	r30, r24
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	e8 54       	subi	r30, 0x48	; 72
     25a:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     25c:	80 81       	ld	r24, Z
     25e:	08 95       	ret

00000260 <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.clock_source == OFF) {
     260:	80 91 88 03 	lds	r24, 0x0388
     264:	82 30       	cpi	r24, 0x02	; 2
     266:	19 f4       	brne	.+6      	; 0x26e <get_current_note+0xe>
		
		note = current_note;
     268:	80 91 b1 02 	lds	r24, 0x02B1
     26c:	08 95       	ret

		
	} else {
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     26e:	80 91 87 03 	lds	r24, 0x0387
		
		
	}
	return note;
	
}
     272:	08 95       	ret

00000274 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	18 2f       	mov	r17, r24
     27e:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     280:	8a eb       	ldi	r24, 0xBA	; 186
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	ec 01       	movw	r28, r24
     286:	22 97       	sbiw	r28, 0x02	; 2
     288:	be 01       	movw	r22, r28
     28a:	4e e0       	ldi	r20, 0x0E	; 14
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     292:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     294:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     296:	10 93 b1 02 	sts	0x02B1, r17
	
} 
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	08 95       	ret

000002a4 <remove_note>:
void remove_note(uint8_t note){
     2a4:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     2a6:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     2aa:	c8 17       	cp	r28, r24
     2ac:	41 f0       	breq	.+16     	; 0x2be <remove_note+0x1a>
     2ae:	ea eb       	ldi	r30, 0xBA	; 186
     2b0:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2b2:	41 e0       	ldi	r20, 0x01	; 1
     2b4:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     2b6:	90 81       	ld	r25, Z
     2b8:	98 17       	cp	r25, r24
     2ba:	59 f4       	brne	.+22     	; 0x2d2 <remove_note+0x2e>
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     2c2:	fa 01       	movw	r30, r20
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	e8 54       	subi	r30, 0x48	; 72
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	80 83       	st	Z, r24
			free_slot = i;
			break;
     2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     2d2:	4f 5f       	subi	r20, 0xFF	; 255
     2d4:	5f 4f       	sbci	r21, 0xFF	; 255
     2d6:	32 96       	adiw	r30, 0x02	; 2
     2d8:	48 30       	cpi	r20, 0x08	; 8
     2da:	51 05       	cpc	r21, r1
     2dc:	61 f7       	brne	.-40     	; 0x2b6 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     2de:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	ca 01       	movw	r24, r20
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	bc 01       	movw	r22, r24
     2ea:	66 54       	subi	r22, 0x46	; 70
     2ec:	7e 4f       	sbci	r23, 0xFE	; 254
     2ee:	40 95       	com	r20
     2f0:	50 95       	com	r21
     2f2:	48 5f       	subi	r20, 0xF8	; 248
     2f4:	5f 4f       	sbci	r21, 0xFF	; 255
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	88 54       	subi	r24, 0x48	; 72
     2fc:	9e 4f       	sbci	r25, 0xFE	; 254
     2fe:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <memmove>
	note_pool[7].note = EMPTY;	
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     308:	80 91 b8 01 	lds	r24, 0x01B8
     30c:	8f 3f       	cpi	r24, 0xFF	; 255
     30e:	19 f4       	brne	.+6      	; 0x316 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     310:	c0 93 b1 02 	sts	0x02B1, r28
     314:	02 c0       	rjmp	.+4      	; 0x31a <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     316:	80 93 b1 02 	sts	0x02B1, r24

	}	
	
}
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     31e:	8d e0       	ldi	r24, 0x0D	; 13
     320:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     32a:	08 95       	ret

0000032c <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     32c:	90 93 89 00 	sts	0x0089, r25
     330:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     334:	20 91 84 00 	lds	r18, 0x0084
     338:	30 91 85 00 	lds	r19, 0x0085
     33c:	82 17       	cp	r24, r18
     33e:	93 07       	cpc	r25, r19
     340:	28 f4       	brcc	.+10     	; 0x34c <update_clock_rate+0x20>
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	90 93 85 00 	sts	0x0085, r25
     348:	80 93 84 00 	sts	0x0084, r24
     34c:	08 95       	ret

0000034e <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     34e:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     350:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     352:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     354:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     356:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     358:	8c 91       	ld	r24, X
     35a:	87 70       	andi	r24, 0x07	; 7
     35c:	82 b9       	out	0x02, r24	; 2
     35e:	66 e0       	ldi	r22, 0x06	; 6
     360:	6a 95       	dec	r22
     362:	f1 f7       	brne	.-4      	; 0x360 <set_control_voltage+0x12>
     364:	00 c0       	rjmp	.+0      	; 0x366 <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     366:	ea ed       	ldi	r30, 0xDA	; 218
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	40 81       	ld	r20, Z
     36c:	8c 91       	ld	r24, X
     36e:	86 95       	lsr	r24
     370:	86 95       	lsr	r24
     372:	86 95       	lsr	r24
     374:	87 70       	andi	r24, 0x07	; 7
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	b9 01       	movw	r22, r18
     37c:	02 c0       	rjmp	.+4      	; 0x382 <set_control_voltage+0x34>
     37e:	66 0f       	add	r22, r22
     380:	77 1f       	adc	r23, r23
     382:	8a 95       	dec	r24
     384:	e2 f7       	brpl	.-8      	; 0x37e <set_control_voltage+0x30>
     386:	cb 01       	movw	r24, r22
     388:	84 2b       	or	r24, r20
     38a:	80 83       	st	Z, r24
     38c:	76 e0       	ldi	r23, 0x06	; 6
     38e:	7a 95       	dec	r23
     390:	f1 f7       	brne	.-4      	; 0x38e <set_control_voltage+0x40>
     392:	00 c0       	rjmp	.+0      	; 0x394 <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     394:	80 81       	ld	r24, Z
     396:	9c 91       	ld	r25, X
     398:	96 95       	lsr	r25
     39a:	96 95       	lsr	r25
     39c:	96 95       	lsr	r25
     39e:	97 70       	andi	r25, 0x07	; 7
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <set_control_voltage+0x58>
     3a2:	22 0f       	add	r18, r18
     3a4:	33 1f       	adc	r19, r19
     3a6:	9a 95       	dec	r25
     3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <set_control_voltage+0x54>
     3aa:	20 95       	com	r18
     3ac:	28 23       	and	r18, r24
     3ae:	20 83       	st	Z, r18
	
}	
     3b0:	08 95       	ret

000003b2 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     3b2:	83 b3       	in	r24, 0x13	; 19
     3b4:	83 60       	ori	r24, 0x03	; 3
     3b6:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     3b8:	8f ef       	ldi	r24, 0xFF	; 255
     3ba:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     3bc:	97 b1       	in	r25, 0x07	; 7
     3be:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     3c0:	e9 ed       	ldi	r30, 0xD9	; 217
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	8f 60       	ori	r24, 0x0F	; 15
     3c8:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     3ca:	ea ed       	ldi	r30, 0xDA	; 218
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	80 7f       	andi	r24, 0xF0	; 240
     3d2:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     3d4:	84 b3       	in	r24, 0x14	; 20
     3d6:	83 60       	ori	r24, 0x03	; 3
     3d8:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     3da:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     3dc:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     3de:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     3e0:	a0 9a       	sbi	0x14, 0	; 20
}
     3e2:	08 95       	ret

000003e4 <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	2e 97       	sbiw	r28, 0x0e	; 14
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     3fc:	28 e0       	ldi	r18, 0x08	; 8
     3fe:	29 83       	std	Y+1, r18	; 0x01
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	2a 83       	std	Y+2, r18	; 0x02
     404:	22 e0       	ldi	r18, 0x02	; 2
     406:	2b 83       	std	Y+3, r18	; 0x03
     408:	24 e0       	ldi	r18, 0x04	; 4
     40a:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     40c:	de 01       	movw	r26, r28
     40e:	15 96       	adiw	r26, 0x05	; 5
     410:	e7 ee       	ldi	r30, 0xE7	; 231
     412:	f1 e0       	ldi	r31, 0x01	; 1
     414:	2a e0       	ldi	r18, 0x0A	; 10
     416:	01 90       	ld	r0, Z+
     418:	0d 92       	st	X+, r0
     41a:	21 50       	subi	r18, 0x01	; 1
     41c:	e1 f7       	brne	.-8      	; 0x416 <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     41e:	2f ef       	ldi	r18, 0xFF	; 255
     420:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     422:	ea ed       	ldi	r30, 0xDA	; 218
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	20 81       	ld	r18, Z
     428:	20 61       	ori	r18, 0x10	; 16
     42a:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     42c:	20 81       	ld	r18, Z
     42e:	2f 7e       	andi	r18, 0xEF	; 239
     430:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     432:	06 2f       	mov	r16, r22
     434:	10 e0       	ldi	r17, 0x00	; 0
     436:	de 01       	movw	r26, r28
     438:	a0 0f       	add	r26, r16
     43a:	b1 1f       	adc	r27, r17
     43c:	11 96       	adiw	r26, 0x01	; 1
     43e:	2c 91       	ld	r18, X
     440:	11 97       	sbiw	r26, 0x01	; 1
     442:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     444:	20 81       	ld	r18, Z
     446:	20 62       	ori	r18, 0x20	; 32
     448:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     44a:	20 81       	ld	r18, Z
     44c:	2f 7d       	andi	r18, 0xDF	; 223
     44e:	20 83       	st	Z, r18
     450:	48 2f       	mov	r20, r24
     452:	59 2f       	mov	r21, r25
     454:	87 e2       	ldi	r24, 0x27	; 39
     456:	40 31       	cpi	r20, 0x10	; 16
     458:	58 07       	cpc	r21, r24
     45a:	10 f0       	brcs	.+4      	; 0x460 <display_dec+0x7c>
     45c:	4f e0       	ldi	r20, 0x0F	; 15
     45e:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     460:	ca 01       	movw	r24, r20
     462:	96 95       	lsr	r25
     464:	87 95       	ror	r24
     466:	96 95       	lsr	r25
     468:	87 95       	ror	r24
     46a:	9a 01       	movw	r18, r20
     46c:	36 95       	lsr	r19
     46e:	27 95       	ror	r18
     470:	28 0f       	add	r18, r24
     472:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     474:	c9 01       	movw	r24, r18
     476:	92 95       	swap	r25
     478:	82 95       	swap	r24
     47a:	8f 70       	andi	r24, 0x0F	; 15
     47c:	89 27       	eor	r24, r25
     47e:	9f 70       	andi	r25, 0x0F	; 15
     480:	89 27       	eor	r24, r25
     482:	82 0f       	add	r24, r18
     484:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     486:	29 2f       	mov	r18, r25
     488:	33 27       	eor	r19, r19
     48a:	82 0f       	add	r24, r18
     48c:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     48e:	96 95       	lsr	r25
     490:	87 95       	ror	r24
     492:	96 95       	lsr	r25
     494:	87 95       	ror	r24
     496:	96 95       	lsr	r25
     498:	87 95       	ror	r24
	r = number - q2 * 10;
     49a:	28 2f       	mov	r18, r24
     49c:	22 0f       	add	r18, r18
     49e:	32 2f       	mov	r19, r18
     4a0:	33 0f       	add	r19, r19
     4a2:	33 0f       	add	r19, r19
     4a4:	23 0f       	add	r18, r19
     4a6:	e4 2f       	mov	r30, r20
     4a8:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	ea 30       	cpi	r30, 0x0A	; 10
     4b0:	10 f4       	brcc	.+4      	; 0x4b6 <display_dec+0xd2>
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	68 0f       	add	r22, r24
     4b8:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     4ba:	9b 01       	movw	r18, r22
     4bc:	36 95       	lsr	r19
     4be:	27 95       	ror	r18
     4c0:	36 95       	lsr	r19
     4c2:	27 95       	ror	r18
     4c4:	ab 01       	movw	r20, r22
     4c6:	56 95       	lsr	r21
     4c8:	47 95       	ror	r20
     4ca:	24 0f       	add	r18, r20
     4cc:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     4ce:	c9 01       	movw	r24, r18
     4d0:	92 95       	swap	r25
     4d2:	82 95       	swap	r24
     4d4:	8f 70       	andi	r24, 0x0F	; 15
     4d6:	89 27       	eor	r24, r25
     4d8:	9f 70       	andi	r25, 0x0F	; 15
     4da:	89 27       	eor	r24, r25
     4dc:	82 0f       	add	r24, r18
     4de:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     4e0:	29 2f       	mov	r18, r25
     4e2:	33 27       	eor	r19, r19
     4e4:	82 0f       	add	r24, r18
     4e6:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     4e8:	96 95       	lsr	r25
     4ea:	87 95       	ror	r24
     4ec:	96 95       	lsr	r25
     4ee:	87 95       	ror	r24
     4f0:	96 95       	lsr	r25
     4f2:	87 95       	ror	r24
	r = qa - q3 * 10;
     4f4:	98 2f       	mov	r25, r24
     4f6:	99 0f       	add	r25, r25
     4f8:	29 2f       	mov	r18, r25
     4fa:	22 0f       	add	r18, r18
     4fc:	22 0f       	add	r18, r18
     4fe:	92 0f       	add	r25, r18
     500:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	6a 30       	cpi	r22, 0x0A	; 10
     506:	08 f4       	brcc	.+2      	; 0x50a <display_dec+0x126>
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	89 0f       	add	r24, r25
	tens_place = rem[r];
     50c:	41 ef       	ldi	r20, 0xF1	; 241
     50e:	51 e0       	ldi	r21, 0x01	; 1
     510:	da 01       	movw	r26, r20
     512:	a6 0f       	add	r26, r22
     514:	b1 1d       	adc	r27, r1
     516:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     518:	28 2f       	mov	r18, r24
     51a:	26 95       	lsr	r18
     51c:	26 95       	lsr	r18
     51e:	98 2f       	mov	r25, r24
     520:	96 95       	lsr	r25
     522:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     524:	29 2f       	mov	r18, r25
     526:	22 95       	swap	r18
     528:	2f 70       	andi	r18, 0x0F	; 15
     52a:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     52c:	96 95       	lsr	r25
     52e:	96 95       	lsr	r25
     530:	96 95       	lsr	r25
	r = qb - q4 * 10;
     532:	29 2f       	mov	r18, r25
     534:	22 0f       	add	r18, r18
     536:	62 2f       	mov	r22, r18
     538:	66 0f       	add	r22, r22
     53a:	66 0f       	add	r22, r22
     53c:	26 0f       	add	r18, r22
     53e:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     540:	da 01       	movw	r26, r20
     542:	a8 0f       	add	r26, r24
     544:	b1 1d       	adc	r27, r1
     546:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     548:	4e 0f       	add	r20, r30
     54a:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     54c:	fa 01       	movw	r30, r20
     54e:	40 81       	ld	r20, Z
     550:	40 93 b4 02 	sts	0x02B4, r20
	digit_index[1] = tens_place;
     554:	30 93 b5 02 	sts	0x02B5, r19
	digit_index[2] = hunds_place;
     558:	20 93 b6 02 	sts	0x02B6, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	8a 30       	cpi	r24, 0x0A	; 10
     560:	08 f4       	brcc	.+2      	; 0x564 <display_dec+0x180>
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     566:	90 93 b7 02 	sts	0x02B7, r25

	cathode_byte = dec[digit_index[place]];
     56a:	f8 01       	movw	r30, r16
     56c:	ec 54       	subi	r30, 0x4C	; 76
     56e:	fd 4f       	sbci	r31, 0xFD	; 253
     570:	80 81       	ld	r24, Z
     572:	fe 01       	movw	r30, r28
     574:	e8 0f       	add	r30, r24
     576:	f1 1d       	adc	r31, r1
     578:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     57a:	90 91 07 03 	lds	r25, 0x0307
     57e:	92 30       	cpi	r25, 0x02	; 2
     580:	11 f4       	brne	.+4      	; 0x586 <display_dec+0x1a2>
     582:	80 62       	ori	r24, 0x20	; 32
     584:	03 c0       	rjmp	.+6      	; 0x58c <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     586:	91 30       	cpi	r25, 0x01	; 1
     588:	09 f4       	brne	.+2      	; 0x58c <display_dec+0x1a8>
     58a:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     58c:	80 95       	com	r24
     58e:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     590:	ea ed       	ldi	r30, 0xDA	; 218
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	80 61       	ori	r24, 0x10	; 16
     598:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     59a:	80 81       	ld	r24, Z
     59c:	8f 7e       	andi	r24, 0xEF	; 239
     59e:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     5a0:	2e 96       	adiw	r28, 0x0e	; 14
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	08 95       	ret

000005b6 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     5b6:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     5b8:	66 23       	and	r22, r22
     5ba:	69 f4       	brne	.+26     	; 0x5d6 <update_display+0x20>

		
			
		display_dec(number, place);
     5bc:	c0 91 b8 02 	lds	r28, 0x02B8
     5c0:	6c 2f       	mov	r22, r28
     5c2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     5c6:	8c 2f       	mov	r24, r28
     5c8:	8f 5f       	subi	r24, 0xFF	; 255
     5ca:	80 93 b8 02 	sts	0x02B8, r24
     5ce:	c3 30       	cpi	r28, 0x03	; 3
     5d0:	11 f4       	brne	.+4      	; 0x5d6 <update_display+0x20>
		{
			place = 0;
     5d2:	10 92 b8 02 	sts	0x02B8, r1
		
		
	}
	
	
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     5da:	1f 92       	push	r1
     5dc:	0f 92       	push	r0
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	0f 92       	push	r0
     5e2:	11 24       	eor	r1, r1
     5e4:	8f 93       	push	r24
     5e6:	9f 93       	push	r25
     5e8:	ef 93       	push	r30
     5ea:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     5ec:	80 91 7c 03 	lds	r24, 0x037C
     5f0:	81 50       	subi	r24, 0x01	; 1
     5f2:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     5f4:	80 91 7d 03 	lds	r24, 0x037D
     5f8:	88 23       	and	r24, r24
     5fa:	a1 f4       	brne	.+40     	; 0x624 <__vector_10+0x4a>
		count_finished = FALSE;
     5fc:	10 92 7a 03 	sts	0x037A, r1
		no_overflow = TRUE;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     606:	80 93 7d 03 	sts	0x037D, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     60a:	e1 e8       	ldi	r30, 0x81	; 129
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	90 91 7b 03 	lds	r25, 0x037B
     614:	89 2b       	or	r24, r25
     616:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     618:	ef e6       	ldi	r30, 0x6F	; 111
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	81 60       	ori	r24, 0x01	; 1
     620:	80 83       	st	Z, r24
     622:	11 c0       	rjmp	.+34     	; 0x646 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     624:	e4 e8       	ldi	r30, 0x84	; 132
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	90 93 79 03 	sts	0x0379, r25
     630:	80 93 78 03 	sts	0x0378, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     634:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 7a 03 	sts	0x037A, r24
		period_counter = 0;
     63e:	10 92 7d 03 	sts	0x037D, r1
		TCNT1 = 0; //reset timer/counter 1
     642:	11 82       	std	Z+1, r1	; 0x01
     644:	10 82       	st	Z, r1
	}
	
	
	
	
}
     646:	ff 91       	pop	r31
     648:	ef 91       	pop	r30
     64a:	9f 91       	pop	r25
     64c:	8f 91       	pop	r24
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	0f 90       	pop	r0
     654:	1f 90       	pop	r1
     656:	18 95       	reti

00000658 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     658:	1f 92       	push	r1
     65a:	0f 92       	push	r0
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	0f 92       	push	r0
     660:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     662:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     670:	1f 92       	push	r1
     672:	0f 92       	push	r0
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	0f 92       	push	r0
     678:	11 24       	eor	r1, r1
     67a:	2f 93       	push	r18
     67c:	3f 93       	push	r19
     67e:	4f 93       	push	r20
     680:	5f 93       	push	r21
     682:	6f 93       	push	r22
     684:	7f 93       	push	r23
     686:	8f 93       	push	r24
     688:	9f 93       	push	r25
     68a:	af 93       	push	r26
     68c:	bf 93       	push	r27
     68e:	ef 93       	push	r30
     690:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     692:	80 91 ca 03 	lds	r24, 0x03CA
     696:	86 95       	lsr	r24
     698:	90 91 cb 03 	lds	r25, 0x03CB
     69c:	98 17       	cp	r25, r24
     69e:	31 f4       	brne	.+12     	; 0x6ac <__vector_7+0x3c>
				
		PORTB &= ~ (1<<ARP_SYNC_LED);
     6a0:	2f 98       	cbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     6a2:	80 91 88 03 	lds	r24, 0x0388
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	09 f4       	brne	.+2      	; 0x6ac <__vector_7+0x3c>
     6aa:	89 98       	cbi	0x11, 1	; 17
	}	
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     6ac:	80 91 cb 03 	lds	r24, 0x03CB
     6b0:	8f 5f       	subi	r24, 0xFF	; 255
     6b2:	80 93 cb 03 	sts	0x03CB, r24
     6b6:	90 91 ca 03 	lds	r25, 0x03CA
     6ba:	89 17       	cp	r24, r25
     6bc:	69 f4       	brne	.+26     	; 0x6d8 <__vector_7+0x68>
		
		system_clock.ppqn_counter = 0;
     6be:	10 92 cb 03 	sts	0x03CB, r1
		PORTB |= (1<<ARP_SYNC_LED);
     6c2:	2f 9a       	sbi	0x05, 7	; 5
		if (arp.clock_source == INTERNAL_CLOCK) {
     6c4:	80 91 88 03 	lds	r24, 0x0388
     6c8:	81 30       	cpi	r24, 0x01	; 1
     6ca:	31 f4       	brne	.+12     	; 0x6d8 <__vector_7+0x68>
			
			//step arp note here based on range and note sequence from assigner	
			step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
     6cc:	0e 94 12 01 	call	0x224	; 0x224 <step_arp_note>
			
			if (gate_buffer) { //arp
     6d0:	80 91 b0 02 	lds	r24, 0x02B0
     6d4:	81 11       	cpse	r24, r1
				
				PORTF |= (1<<GATE);
     6d6:	89 9a       	sbi	0x11, 1	; 17
				
			//if (gate_buffer != 0) PORTF |= (1<<GATE); //if arp is running and there are notes to be played, turn gate ON
		}			
	}
	
     6d8:	ff 91       	pop	r31
     6da:	ef 91       	pop	r30
     6dc:	bf 91       	pop	r27
     6de:	af 91       	pop	r26
     6e0:	9f 91       	pop	r25
     6e2:	8f 91       	pop	r24
     6e4:	7f 91       	pop	r23
     6e6:	6f 91       	pop	r22
     6e8:	5f 91       	pop	r21
     6ea:	4f 91       	pop	r20
     6ec:	3f 91       	pop	r19
     6ee:	2f 91       	pop	r18
     6f0:	0f 90       	pop	r0
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	0f 90       	pop	r0
     6f6:	1f 90       	pop	r1
     6f8:	18 95       	reti

000006fa <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     6fa:	68 3f       	cpi	r22, 0xF8	; 248
     6fc:	19 f0       	breq	.+6      	; 0x704 <real_time_event+0xa>
     6fe:	6a 3f       	cpi	r22, 0xFA	; 250
     700:	c1 f4       	brne	.+48     	; 0x732 <real_time_event+0x38>
     702:	15 c0       	rjmp	.+42     	; 0x72e <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     704:	80 91 d1 03 	lds	r24, 0x03D1
     708:	8f 5f       	subi	r24, 0xFF	; 255
     70a:	80 93 d1 03 	sts	0x03D1, r24
     70e:	90 91 d0 03 	lds	r25, 0x03D0
     712:	89 17       	cp	r24, r25
     714:	71 f4       	brne	.+28     	; 0x732 <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     716:	2c 9a       	sbi	0x05, 4	; 5
     718:	86 e0       	ldi	r24, 0x06	; 6
     71a:	8a 95       	dec	r24
     71c:	f1 f7       	brne	.-4      	; 0x71a <real_time_event+0x20>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     720:	85 b1       	in	r24, 0x05	; 5
     722:	80 58       	subi	r24, 0x80	; 128
     724:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     726:	10 92 d1 03 	sts	0x03D1, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     72a:	2c 98       	cbi	0x05, 4	; 5
     72c:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     72e:	10 92 d1 03 	sts	0x03D1, r1
     732:	08 95       	ret

00000734 <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     734:	84 2f       	mov	r24, r20
	
	remove_note(note);
     736:	0e 94 52 01 	call	0x2a4	; 0x2a4 <remove_note>
	gate_buffer--;
     73a:	80 91 b0 02 	lds	r24, 0x02B0
     73e:	81 50       	subi	r24, 0x01	; 1
     740:	80 93 b0 02 	sts	0x02B0, r24
	if (arp.clock_source == OFF) {	//if arp is off handle gate
     744:	90 91 88 03 	lds	r25, 0x0388
     748:	92 30       	cpi	r25, 0x02	; 2
     74a:	21 f4       	brne	.+8      	; 0x754 <note_off_event+0x20>
		//gate_buffer--;
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     74c:	88 23       	and	r24, r24
     74e:	21 f4       	brne	.+8      	; 0x758 <note_off_event+0x24>
     750:	89 98       	cbi	0x11, 1	; 17
     752:	08 95       	ret
	} else {
		
		update_arp_sequence();
     754:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     758:	08 95       	ret

0000075a <note_on_event>:





void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     75a:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     75c:	90 91 ff 02 	lds	r25, 0x02FF
     760:	90 ff       	sbrs	r25, 0
     762:	06 c0       	rjmp	.+12     	; 0x770 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     764:	2c 9a       	sbi	0x05, 4	; 5
     766:	96 e0       	ldi	r25, 0x06	; 6
     768:	9a 95       	dec	r25
     76a:	f1 f7       	brne	.-4      	; 0x768 <note_on_event+0xe>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     76e:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     770:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     774:	22 23       	and	r18, r18
     776:	59 f4       	brne	.+22     	; 0x78e <note_on_event+0x34>
		remove_note(note);
     778:	0e 94 52 01 	call	0x2a4	; 0x2a4 <remove_note>
		gate_buffer--;
     77c:	80 91 b0 02 	lds	r24, 0x02B0
     780:	81 50       	subi	r24, 0x01	; 1
     782:	80 93 b0 02 	sts	0x02B0, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     786:	88 23       	and	r24, r24
     788:	91 f4       	brne	.+36     	; 0x7ae <note_on_event+0x54>
     78a:	89 98       	cbi	0x11, 1	; 17
     78c:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);
     78e:	62 2f       	mov	r22, r18
     790:	0e 94 3a 01 	call	0x274	; 0x274 <new_note>
		
		gate_buffer++;
     794:	80 91 b0 02 	lds	r24, 0x02B0
     798:	8f 5f       	subi	r24, 0xFF	; 255
     79a:	80 93 b0 02 	sts	0x02B0, r24
		if (arp.clock_source == OFF) { //if arp is off, handle gate
     79e:	80 91 88 03 	lds	r24, 0x0388
     7a2:	82 30       	cpi	r24, 0x02	; 2
     7a4:	11 f4       	brne	.+4      	; 0x7aa <note_on_event+0x50>
			//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
			//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
			//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
			//could implement this with timers. MIDI Implant is 0.5 ms. Could maybe use Timer1 here to generate 0.3-0.5 ms gate retrigger
			
			PORTF |= (1<<GATE); //if arp is OFF then turn on gate. Otherwise arpeggiator handles GATE
     7a6:	89 9a       	sbi	0x11, 1	; 17
     7a8:	08 95       	ret
		} else {
			
			update_arp_sequence();
     7aa:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     7ae:	08 95       	ret

000007b0 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     7b0:	87 e2       	ldi	r24, 0x27	; 39
     7b2:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     7b6:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     7ba:	88 e9       	ldi	r24, 0x98	; 152
     7bc:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     7c0:	08 95       	ret

000007c2 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     7c2:	1f 92       	push	r1
     7c4:	0f 92       	push	r0
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	0f 92       	push	r0
     7ca:	11 24       	eor	r1, r1
     7cc:	2f 93       	push	r18
     7ce:	3f 93       	push	r19
     7d0:	4f 93       	push	r20
     7d2:	5f 93       	push	r21
     7d4:	6f 93       	push	r22
     7d6:	7f 93       	push	r23
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	af 93       	push	r26
     7de:	bf 93       	push	r27
     7e0:	ef 93       	push	r30
     7e2:	ff 93       	push	r31
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	0f 92       	push	r0
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     7ee:	80 91 c6 00 	lds	r24, 0x00C6
     7f2:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     7f4:	86 ed       	ldi	r24, 0xD6	; 214
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	ae 01       	movw	r20, r28
     7fc:	4f 5f       	subi	r20, 0xFF	; 255
     7fe:	5f 4f       	sbci	r21, 0xFF	; 255
     800:	0e 94 77 19 	call	0x32ee	; 0x32ee <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     804:	0f 90       	pop	r0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	ff 91       	pop	r31
     80c:	ef 91       	pop	r30
     80e:	bf 91       	pop	r27
     810:	af 91       	pop	r26
     812:	9f 91       	pop	r25
     814:	8f 91       	pop	r24
     816:	7f 91       	pop	r23
     818:	6f 91       	pop	r22
     81a:	5f 91       	pop	r21
     81c:	4f 91       	pop	r20
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     82c:	c0 e8       	ldi	r28, 0x80	; 128
     82e:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     830:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     832:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     834:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     836:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     838:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     83a:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     83c:	0e 94 70 07 	call	0xee0	; 0xee0 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     840:	a9 ed       	ldi	r26, 0xD9	; 217
     842:	b0 e0       	ldi	r27, 0x00	; 0
     844:	8c 91       	ld	r24, X
     846:	80 6c       	ori	r24, 0xC0	; 192
     848:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     84a:	ea ed       	ldi	r30, 0xDA	; 218
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
     850:	80 6c       	ori	r24, 0xC0	; 192
     852:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     854:	81 b1       	in	r24, 0x01	; 1
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     85a:	92 b1       	in	r25, 0x02	; 2
     85c:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     85e:	8c 91       	ld	r24, X
     860:	80 63       	ori	r24, 0x30	; 48
     862:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     864:	80 81       	ld	r24, Z
     866:	8f 7c       	andi	r24, 0xCF	; 207
     868:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     86a:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     86c:	ec ed       	ldi	r30, 0xDC	; 220
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	80 62       	ori	r24, 0x20	; 32
     874:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     876:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     878:	ed ed       	ldi	r30, 0xDD	; 221
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	80 62       	ori	r24, 0x20	; 32
     880:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     882:	80 81       	ld	r24, Z
     884:	8f 7d       	andi	r24, 0xDF	; 223
     886:	80 83       	st	Z, r24
	DATA_BUS = 0;
     888:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     88a:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     88e:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     892:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     896:	c6 ed       	ldi	r28, 0xD6	; 214
     898:	d3 e0       	ldi	r29, 0x03	; 3
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 46 19 	call	0x328c	; 0x328c <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     8a0:	ce 01       	movw	r24, r28
     8a2:	6d ea       	ldi	r22, 0xAD	; 173
     8a4:	73 e0       	ldi	r23, 0x03	; 3
     8a6:	0e 94 0e 19 	call	0x321c	; 0x321c <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     8aa:	ce 01       	movw	r24, r28
     8ac:	6a e9       	ldi	r22, 0x9A	; 154
     8ae:	73 e0       	ldi	r23, 0x03	; 3
     8b0:	0e 94 12 19 	call	0x3224	; 0x3224 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     8b4:	ce 01       	movw	r24, r28
     8b6:	6d e7       	ldi	r22, 0x7D	; 125
     8b8:	73 e0       	ldi	r23, 0x03	; 3
     8ba:	0e 94 32 19 	call	0x3264	; 0x3264 <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     8be:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     8c2:	0e 94 95 07 	call	0xf2a	; 0xf2a <update_spi>
	
	
	current_patch.number = 1;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     8cc:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     8ce:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	0e 94 0e 0a 	call	0x141c	; 0x141c <load_patch>
	
	setup_system_clock();
     8d8:	0e 94 8f 01 	call	0x31e	; 0x31e <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     8dc:	88 e1       	ldi	r24, 0x18	; 24
     8de:	80 93 ca 03 	sts	0x03CA, r24
	arp.step_position = 0; //initialize step position
     8e2:	10 92 86 03 	sts	0x0386, r1

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     8e6:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     8e8:	0f 2e       	mov	r0, r31
     8ea:	f0 e8       	ldi	r31, 0x80	; 128
     8ec:	ef 2e       	mov	r14, r31
     8ee:	f3 e0       	ldi	r31, 0x03	; 3
     8f0:	ff 2e       	mov	r15, r31
     8f2:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     8f4:	0f 2e       	mov	r0, r31
     8f6:	f7 e0       	ldi	r31, 0x07	; 7
     8f8:	cf 2e       	mov	r12, r31
     8fa:	f3 e0       	ldi	r31, 0x03	; 3
     8fc:	df 2e       	mov	r13, r31
     8fe:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     900:	bb 24       	eor	r11, r11
     902:	68 94       	set
     904:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     906:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     908:	c8 01       	movw	r24, r16
     90a:	0e 94 a1 1b 	call	0x3742	; 0x3742 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     90e:	80 91 fd 01 	lds	r24, 0x01FD
     912:	90 91 fe 01 	lds	r25, 0x01FE
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	0e 94 db 02 	call	0x5b6	; 0x5b6 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     91c:	0e 94 bd 04 	call	0x97a	; 0x97a <scan_pots>
		update_control_voltages();
     920:	0e 94 4a 05 	call	0xa94	; 0xa94 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     924:	80 91 b9 02 	lds	r24, 0x02B9
     928:	98 2f       	mov	r25, r24
     92a:	9f 5f       	subi	r25, 0xFF	; 255
     92c:	90 93 b9 02 	sts	0x02B9, r25
     930:	85 30       	cpi	r24, 0x05	; 5
     932:	51 f7       	brne	.-44     	; 0x908 <main+0xdc>
		{
			switch_timer = 0;
     934:	10 92 b9 02 	sts	0x02B9, r1
			switch_press = 0; //reset global switch press flag
     938:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     93c:	f7 01       	movw	r30, r14
     93e:	c0 81       	ld	r28, Z
     940:	0e 94 28 16 	call	0x2c50	; 0x2c50 <read_switch_port>
     944:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     946:	f6 01       	movw	r30, r12
     948:	90 81       	ld	r25, Z
     94a:	91 30       	cpi	r25, 0x01	; 1
     94c:	11 f4       	brne	.+4      	; 0x952 <main+0x126>
     94e:	cd 2f       	mov	r28, r29
     950:	01 c0       	rjmp	.+2      	; 0x954 <main+0x128>
     952:	c0 e0       	ldi	r28, 0x00	; 0
     954:	c8 2b       	or	r28, r24
     956:	f7 01       	movw	r30, r14
     958:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     95a:	0e 94 95 07 	call	0xf2a	; 0xf2a <update_spi>
			if (switch_press) { 
     95e:	80 91 c1 02 	lds	r24, 0x02C1
     962:	88 23       	and	r24, r24
     964:	39 f0       	breq	.+14     	; 0x974 <main+0x148>
				update_patch();
     966:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     96a:	f6 01       	movw	r30, r12
     96c:	80 81       	ld	r24, Z
     96e:	88 23       	and	r24, r24
     970:	09 f4       	brne	.+2      	; 0x974 <main+0x148>
     972:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     974:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <update_patch_programmer>
     978:	c7 cf       	rjmp	.-114    	; 0x908 <main+0xdc>

0000097a <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     97a:	bf 92       	push	r11
     97c:	cf 92       	push	r12
     97e:	df 92       	push	r13
     980:	ef 92       	push	r14
     982:	ff 92       	push	r15
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	c0 e0       	ldi	r28, 0x00	; 0
     98e:	d1 e0       	ldi	r29, 0x01	; 1
     990:	02 ec       	ldi	r16, 0xC2	; 194
     992:	12 e0       	ldi	r17, 0x02	; 2
     994:	0f 2e       	mov	r0, r31
     996:	fc e3       	ldi	r31, 0x3C	; 60
     998:	cf 2e       	mov	r12, r31
     99a:	dd 24       	eor	r13, r13
     99c:	f0 2d       	mov	r31, r0
     99e:	cc 0e       	add	r12, r28
     9a0:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     9a2:	0f 2e       	mov	r0, r31
     9a4:	f7 e0       	ldi	r31, 0x07	; 7
     9a6:	ef 2e       	mov	r14, r31
     9a8:	f3 e0       	ldi	r31, 0x03	; 3
     9aa:	ff 2e       	mov	r15, r31
     9ac:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     9ae:	bb 24       	eor	r11, r11
     9b0:	68 94       	set
     9b2:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     9b4:	88 81       	ld	r24, Y
     9b6:	99 81       	ldd	r25, Y+1	; 0x01
     9b8:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     9bc:	90 93 bc 02 	sts	0x02BC, r25
     9c0:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     9c4:	e8 81       	ld	r30, Y
     9c6:	f9 81       	ldd	r31, Y+1	; 0x01
     9c8:	40 81       	ld	r20, Z
     9ca:	21 81       	ldd	r18, Z+1	; 0x01
     9cc:	52 2f       	mov	r21, r18
     9ce:	53 70       	andi	r21, 0x03	; 3
     9d0:	84 1b       	sub	r24, r20
     9d2:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     9d4:	95 95       	asr	r25
     9d6:	87 95       	ror	r24
     9d8:	95 95       	asr	r25
     9da:	87 95       	ror	r24
     9dc:	84 0f       	add	r24, r20
     9de:	95 1f       	adc	r25, r21
     9e0:	80 83       	st	Z, r24
     9e2:	89 2f       	mov	r24, r25
     9e4:	83 70       	andi	r24, 0x03	; 3
     9e6:	2c 7f       	andi	r18, 0xFC	; 252
     9e8:	28 2b       	or	r18, r24
     9ea:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     9ec:	e9 91       	ld	r30, Y+
     9ee:	f9 91       	ld	r31, Y+
     9f0:	92 81       	ldd	r25, Z+2	; 0x02
     9f2:	20 81       	ld	r18, Z
     9f4:	81 81       	ldd	r24, Z+1	; 0x01
     9f6:	38 2f       	mov	r19, r24
     9f8:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     9fa:	d7 01       	movw	r26, r14
     9fc:	8c 91       	ld	r24, X
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	19 f0       	breq	.+6      	; 0xa08 <scan_pots+0x8e>
     a02:	83 81       	ldd	r24, Z+3	; 0x03
     a04:	88 23       	and	r24, r24
     a06:	24 f0       	brlt	.+8      	; 0xa10 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     a08:	f8 01       	movw	r30, r16
     a0a:	31 83       	std	Z+1, r19	; 0x01
     a0c:	20 83       	st	Z, r18
     a0e:	14 c0       	rjmp	.+40     	; 0xa38 <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     a10:	49 2f       	mov	r20, r25
     a12:	43 50       	subi	r20, 0x03	; 3
     a14:	c9 01       	movw	r24, r18
     a16:	95 95       	asr	r25
     a18:	87 95       	ror	r24
     a1a:	95 95       	asr	r25
     a1c:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     a1e:	94 2f       	mov	r25, r20
     a20:	98 1b       	sub	r25, r24
     a22:	9a 3f       	cpi	r25, 0xFA	; 250
     a24:	48 f4       	brcc	.+18     	; 0xa38 <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     a26:	d8 01       	movw	r26, r16
     a28:	11 96       	adiw	r26, 0x01	; 1
     a2a:	3c 93       	st	X, r19
     a2c:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     a2e:	83 81       	ldd	r24, Z+3	; 0x03
     a30:	8f 77       	andi	r24, 0x7F	; 127
     a32:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     a34:	f7 01       	movw	r30, r14
     a36:	b0 82       	st	Z, r11
     a38:	0e 5f       	subi	r16, 0xFE	; 254
     a3a:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     a3c:	cc 15       	cp	r28, r12
     a3e:	dd 05       	cpc	r29, r13
     a40:	09 f0       	breq	.+2      	; 0xa44 <scan_pots+0xca>
     a42:	b8 cf       	rjmp	.-144    	; 0x9b4 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     a44:	8c e7       	ldi	r24, 0x7C	; 124
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     a4c:	90 93 bc 02 	sts	0x02BC, r25
     a50:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     a54:	20 91 7c 01 	lds	r18, 0x017C
     a58:	40 91 7d 01 	lds	r20, 0x017D
     a5c:	34 2f       	mov	r19, r20
     a5e:	33 70       	andi	r19, 0x03	; 3
     a60:	82 1b       	sub	r24, r18
     a62:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     a64:	95 95       	asr	r25
     a66:	87 95       	ror	r24
     a68:	95 95       	asr	r25
     a6a:	87 95       	ror	r24
     a6c:	28 0f       	add	r18, r24
     a6e:	39 1f       	adc	r19, r25
     a70:	20 93 7c 01 	sts	0x017C, r18
     a74:	83 2f       	mov	r24, r19
     a76:	83 70       	andi	r24, 0x03	; 3
     a78:	4c 7f       	andi	r20, 0xFC	; 252
     a7a:	48 2b       	or	r20, r24
     a7c:	40 93 7d 01 	sts	0x017D, r20
	
}
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	bf 90       	pop	r11
     a92:	08 95       	ret

00000a94 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     a98:	60 91 c2 02 	lds	r22, 0x02C2
     a9c:	70 91 c3 02 	lds	r23, 0x02C3
     aa0:	62 95       	swap	r22
     aa2:	72 95       	swap	r23
     aa4:	70 7f       	andi	r23, 0xF0	; 240
     aa6:	76 27       	eor	r23, r22
     aa8:	60 7f       	andi	r22, 0xF0	; 240
     aaa:	76 27       	eor	r23, r22
     aac:	84 ee       	ldi	r24, 0xE4	; 228
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     ab4:	60 91 c4 02 	lds	r22, 0x02C4
     ab8:	70 91 c5 02 	lds	r23, 0x02C5
     abc:	62 95       	swap	r22
     abe:	72 95       	swap	r23
     ac0:	70 7f       	andi	r23, 0xF0	; 240
     ac2:	76 27       	eor	r23, r22
     ac4:	60 7f       	andi	r22, 0xF0	; 240
     ac6:	76 27       	eor	r23, r22
     ac8:	83 ee       	ldi	r24, 0xE3	; 227
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     ad0:	60 91 c6 02 	lds	r22, 0x02C6
     ad4:	70 91 c7 02 	lds	r23, 0x02C7
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	66 0f       	add	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	66 0f       	add	r22, r22
     ae2:	77 1f       	adc	r23, r23
     ae4:	82 ee       	ldi	r24, 0xE2	; 226
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     aec:	60 91 c8 02 	lds	r22, 0x02C8
     af0:	70 91 c9 02 	lds	r23, 0x02C9
     af4:	62 95       	swap	r22
     af6:	72 95       	swap	r23
     af8:	70 7f       	andi	r23, 0xF0	; 240
     afa:	76 27       	eor	r23, r22
     afc:	60 7f       	andi	r22, 0xF0	; 240
     afe:	76 27       	eor	r23, r22
     b00:	83 eb       	ldi	r24, 0xB3	; 179
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     b08:	60 91 ca 02 	lds	r22, 0x02CA
     b0c:	70 91 cb 02 	lds	r23, 0x02CB
     b10:	66 0f       	add	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	66 0f       	add	r22, r22
     b16:	77 1f       	adc	r23, r23
     b18:	66 0f       	add	r22, r22
     b1a:	77 1f       	adc	r23, r23
     b1c:	81 ee       	ldi	r24, 0xE1	; 225
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     b24:	60 91 cc 02 	lds	r22, 0x02CC
     b28:	70 91 cd 02 	lds	r23, 0x02CD
     b2c:	62 95       	swap	r22
     b2e:	72 95       	swap	r23
     b30:	70 7f       	andi	r23, 0xF0	; 240
     b32:	76 27       	eor	r23, r22
     b34:	60 7f       	andi	r22, 0xF0	; 240
     b36:	76 27       	eor	r23, r22
     b38:	80 ee       	ldi	r24, 0xE0	; 224
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     b40:	60 91 ce 02 	lds	r22, 0x02CE
     b44:	70 91 cf 02 	lds	r23, 0x02CF
     b48:	62 95       	swap	r22
     b4a:	72 95       	swap	r23
     b4c:	70 7f       	andi	r23, 0xF0	; 240
     b4e:	76 27       	eor	r23, r22
     b50:	60 7f       	andi	r22, 0xF0	; 240
     b52:	76 27       	eor	r23, r22
     b54:	8f ed       	ldi	r24, 0xDF	; 223
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     b5c:	60 91 d0 02 	lds	r22, 0x02D0
     b60:	70 91 d1 02 	lds	r23, 0x02D1
     b64:	62 95       	swap	r22
     b66:	72 95       	swap	r23
     b68:	70 7f       	andi	r23, 0xF0	; 240
     b6a:	76 27       	eor	r23, r22
     b6c:	60 7f       	andi	r22, 0xF0	; 240
     b6e:	76 27       	eor	r23, r22
     b70:	8e ed       	ldi	r24, 0xDE	; 222
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     b78:	80 91 d4 02 	lds	r24, 0x02D4
     b7c:	90 91 d5 02 	lds	r25, 0x02D5
     b80:	c0 e0       	ldi	r28, 0x00	; 0
     b82:	d2 e0       	ldi	r29, 0x02	; 2
     b84:	c8 1b       	sub	r28, r24
     b86:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     b88:	60 91 73 03 	lds	r22, 0x0373
     b8c:	70 91 74 03 	lds	r23, 0x0374
     b90:	60 50       	subi	r22, 0x00	; 0
     b92:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     b94:	80 91 d2 02 	lds	r24, 0x02D2
     b98:	90 91 d3 02 	lds	r25, 0x02D3
     b9c:	68 1b       	sub	r22, r24
     b9e:	79 0b       	sbc	r23, r25
     ba0:	6c 0f       	add	r22, r28
     ba2:	7d 1f       	adc	r23, r29
     ba4:	8d ed       	ldi	r24, 0xDD	; 221
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     bac:	60 91 75 03 	lds	r22, 0x0375
     bb0:	70 91 76 03 	lds	r23, 0x0376
     bb4:	6c 0f       	add	r22, r28
     bb6:	7d 1f       	adc	r23, r29
     bb8:	8c ed       	ldi	r24, 0xDC	; 220
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     bc0:	60 91 d6 02 	lds	r22, 0x02D6
     bc4:	70 91 d7 02 	lds	r23, 0x02D7
     bc8:	62 95       	swap	r22
     bca:	72 95       	swap	r23
     bcc:	70 7f       	andi	r23, 0xF0	; 240
     bce:	76 27       	eor	r23, r22
     bd0:	60 7f       	andi	r22, 0xF0	; 240
     bd2:	76 27       	eor	r23, r22
     bd4:	8b ed       	ldi	r24, 0xDB	; 219
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     bdc:	60 91 da 02 	lds	r22, 0x02DA
     be0:	70 91 db 02 	lds	r23, 0x02DB
     be4:	62 95       	swap	r22
     be6:	72 95       	swap	r23
     be8:	70 7f       	andi	r23, 0xF0	; 240
     bea:	76 27       	eor	r23, r22
     bec:	60 7f       	andi	r22, 0xF0	; 240
     bee:	76 27       	eor	r23, r22
     bf0:	8a ed       	ldi	r24, 0xDA	; 218
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     bf8:	60 91 dc 02 	lds	r22, 0x02DC
     bfc:	70 91 dd 02 	lds	r23, 0x02DD
     c00:	62 95       	swap	r22
     c02:	72 95       	swap	r23
     c04:	70 7f       	andi	r23, 0xF0	; 240
     c06:	76 27       	eor	r23, r22
     c08:	60 7f       	andi	r22, 0xF0	; 240
     c0a:	76 27       	eor	r23, r22
     c0c:	89 ed       	ldi	r24, 0xD9	; 217
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     c14:	60 91 7c 01 	lds	r22, 0x017C
     c18:	80 91 7d 01 	lds	r24, 0x017D
     c1c:	78 2f       	mov	r23, r24
     c1e:	73 70       	andi	r23, 0x03	; 3
     c20:	62 95       	swap	r22
     c22:	72 95       	swap	r23
     c24:	70 7f       	andi	r23, 0xF0	; 240
     c26:	76 27       	eor	r23, r22
     c28:	60 7f       	andi	r22, 0xF0	; 240
     c2a:	76 27       	eor	r23, r22
     c2c:	88 ed       	ldi	r24, 0xD8	; 216
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     c34:	60 91 de 02 	lds	r22, 0x02DE
     c38:	70 91 df 02 	lds	r23, 0x02DF
     c3c:	62 95       	swap	r22
     c3e:	72 95       	swap	r23
     c40:	70 7f       	andi	r23, 0xF0	; 240
     c42:	76 27       	eor	r23, r22
     c44:	60 7f       	andi	r22, 0xF0	; 240
     c46:	76 27       	eor	r23, r22
     c48:	87 ed       	ldi	r24, 0xD7	; 215
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     c50:	60 91 e0 02 	lds	r22, 0x02E0
     c54:	70 91 e1 02 	lds	r23, 0x02E1
     c58:	62 95       	swap	r22
     c5a:	72 95       	swap	r23
     c5c:	70 7f       	andi	r23, 0xF0	; 240
     c5e:	76 27       	eor	r23, r22
     c60:	60 7f       	andi	r22, 0xF0	; 240
     c62:	76 27       	eor	r23, r22
     c64:	86 ed       	ldi	r24, 0xD6	; 214
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     c6c:	60 91 e2 02 	lds	r22, 0x02E2
     c70:	70 91 e3 02 	lds	r23, 0x02E3
     c74:	62 95       	swap	r22
     c76:	72 95       	swap	r23
     c78:	70 7f       	andi	r23, 0xF0	; 240
     c7a:	76 27       	eor	r23, r22
     c7c:	60 7f       	andi	r22, 0xF0	; 240
     c7e:	76 27       	eor	r23, r22
     c80:	85 ed       	ldi	r24, 0xD5	; 213
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     c88:	0e 94 30 01 	call	0x260	; 0x260 <get_current_note>
     c8c:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     c8e:	88 30       	cpi	r24, 0x08	; 8
     c90:	08 f4       	brcc	.+2      	; 0xc94 <update_control_voltages+0x200>
     c92:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = current_patch.number + 100*(arp.sequence[arp.step_position].note); //100*note;
	//value_to_display = arp.sequence[arp.step_position].note;
	uint8_t arp_note = arp.sequence[arp.step_position].note;
     c94:	80 91 86 03 	lds	r24, 0x0386
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	fc 01       	movw	r30, r24
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	e6 57       	subi	r30, 0x76	; 118
     ca2:	fc 4f       	sbci	r31, 0xFC	; 252
     ca4:	60 81       	ld	r22, Z
	if (arp_note == EMPTY) arp_note = 0;
     ca6:	6f 3f       	cpi	r22, 0xFF	; 255
     ca8:	09 f4       	brne	.+2      	; 0xcac <update_control_voltages+0x218>
     caa:	60 e0       	ldi	r22, 0x00	; 0
	value_to_display = arp_note + 100*arp.step_position;
     cac:	44 e6       	ldi	r20, 0x64	; 100
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	84 9f       	mul	r24, r20
     cb2:	90 01       	movw	r18, r0
     cb4:	85 9f       	mul	r24, r21
     cb6:	30 0d       	add	r19, r0
     cb8:	94 9f       	mul	r25, r20
     cba:	30 0d       	add	r19, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	26 0f       	add	r18, r22
     cc0:	31 1d       	adc	r19, r1
     cc2:	30 93 fe 01 	sts	0x01FE, r19
     cc6:	20 93 fd 01 	sts	0x01FD, r18
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     cca:	8c 2f       	mov	r24, r28
     ccc:	88 50       	subi	r24, 0x08	; 8
     cce:	6f e0       	ldi	r22, 0x0F	; 15
     cd0:	73 e0       	ldi	r23, 0x03	; 3
     cd2:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     cd6:	bc 01       	movw	r22, r24
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	20 91 e6 02 	lds	r18, 0x02E6
     ce0:	30 91 e7 02 	lds	r19, 0x02E7
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <__mulsi3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	07 2e       	mov	r0, r23
     cf2:	7a e0       	ldi	r23, 0x0A	; 10
     cf4:	b6 95       	lsr	r27
     cf6:	a7 95       	ror	r26
     cf8:	97 95       	ror	r25
     cfa:	87 95       	ror	r24
     cfc:	7a 95       	dec	r23
     cfe:	d1 f7       	brne	.-12     	; 0xcf4 <update_control_voltages+0x260>
     d00:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     d02:	60 91 e4 02 	lds	r22, 0x02E4
     d06:	70 91 e5 02 	lds	r23, 0x02E5
     d0a:	62 95       	swap	r22
     d0c:	72 95       	swap	r23
     d0e:	70 7f       	andi	r23, 0xF0	; 240
     d10:	76 27       	eor	r23, r22
     d12:	60 7f       	andi	r22, 0xF0	; 240
     d14:	76 27       	eor	r23, r22
     d16:	86 0f       	add	r24, r22
     d18:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     d1a:	bc 01       	movw	r22, r24
     d1c:	80 e4       	ldi	r24, 0x40	; 64
     d1e:	60 30       	cpi	r22, 0x00	; 0
     d20:	78 07       	cpc	r23, r24
     d22:	10 f0       	brcs	.+4      	; 0xd28 <update_control_voltages+0x294>
     d24:	6f ef       	ldi	r22, 0xFF	; 255
     d26:	7f e3       	ldi	r23, 0x3F	; 63
     d28:	84 ed       	ldi	r24, 0xD4	; 212
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     d30:	60 91 e8 02 	lds	r22, 0x02E8
     d34:	70 91 e9 02 	lds	r23, 0x02E9
     d38:	62 95       	swap	r22
     d3a:	72 95       	swap	r23
     d3c:	70 7f       	andi	r23, 0xF0	; 240
     d3e:	76 27       	eor	r23, r22
     d40:	60 7f       	andi	r22, 0xF0	; 240
     d42:	76 27       	eor	r23, r22
     d44:	82 ed       	ldi	r24, 0xD2	; 210
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     d4c:	60 91 ea 02 	lds	r22, 0x02EA
     d50:	70 91 eb 02 	lds	r23, 0x02EB
     d54:	62 95       	swap	r22
     d56:	72 95       	swap	r23
     d58:	70 7f       	andi	r23, 0xF0	; 240
     d5a:	76 27       	eor	r23, r22
     d5c:	60 7f       	andi	r22, 0xF0	; 240
     d5e:	76 27       	eor	r23, r22
     d60:	81 ed       	ldi	r24, 0xD1	; 209
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     d68:	60 91 ec 02 	lds	r22, 0x02EC
     d6c:	70 91 ed 02 	lds	r23, 0x02ED
     d70:	62 95       	swap	r22
     d72:	72 95       	swap	r23
     d74:	70 7f       	andi	r23, 0xF0	; 240
     d76:	76 27       	eor	r23, r22
     d78:	60 7f       	andi	r22, 0xF0	; 240
     d7a:	76 27       	eor	r23, r22
     d7c:	80 ed       	ldi	r24, 0xD0	; 208
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     d84:	60 91 ee 02 	lds	r22, 0x02EE
     d88:	70 91 ef 02 	lds	r23, 0x02EF
     d8c:	62 95       	swap	r22
     d8e:	72 95       	swap	r23
     d90:	70 7f       	andi	r23, 0xF0	; 240
     d92:	76 27       	eor	r23, r22
     d94:	60 7f       	andi	r22, 0xF0	; 240
     d96:	76 27       	eor	r23, r22
     d98:	8f ec       	ldi	r24, 0xCF	; 207
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     da0:	60 91 f0 02 	lds	r22, 0x02F0
     da4:	70 91 f1 02 	lds	r23, 0x02F1
     da8:	62 95       	swap	r22
     daa:	72 95       	swap	r23
     dac:	70 7f       	andi	r23, 0xF0	; 240
     dae:	76 27       	eor	r23, r22
     db0:	60 7f       	andi	r22, 0xF0	; 240
     db2:	76 27       	eor	r23, r22
     db4:	8e ec       	ldi	r24, 0xCE	; 206
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     dbc:	60 91 f2 02 	lds	r22, 0x02F2
     dc0:	70 91 f3 02 	lds	r23, 0x02F3
     dc4:	62 95       	swap	r22
     dc6:	72 95       	swap	r23
     dc8:	70 7f       	andi	r23, 0xF0	; 240
     dca:	76 27       	eor	r23, r22
     dcc:	60 7f       	andi	r22, 0xF0	; 240
     dce:	76 27       	eor	r23, r22
     dd0:	8d ec       	ldi	r24, 0xCD	; 205
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     dd8:	60 91 f4 02 	lds	r22, 0x02F4
     ddc:	70 91 f5 02 	lds	r23, 0x02F5
     de0:	62 95       	swap	r22
     de2:	72 95       	swap	r23
     de4:	70 7f       	andi	r23, 0xF0	; 240
     de6:	76 27       	eor	r23, r22
     de8:	60 7f       	andi	r22, 0xF0	; 240
     dea:	76 27       	eor	r23, r22
     dec:	8c ec       	ldi	r24, 0xCC	; 204
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     df4:	60 91 f8 02 	lds	r22, 0x02F8
     df8:	70 91 f9 02 	lds	r23, 0x02F9
     dfc:	62 95       	swap	r22
     dfe:	72 95       	swap	r23
     e00:	70 7f       	andi	r23, 0xF0	; 240
     e02:	76 27       	eor	r23, r22
     e04:	60 7f       	andi	r22, 0xF0	; 240
     e06:	76 27       	eor	r23, r22
     e08:	8a ec       	ldi	r24, 0xCA	; 202
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     e10:	60 91 f6 02 	lds	r22, 0x02F6
     e14:	70 91 f7 02 	lds	r23, 0x02F7
     e18:	62 95       	swap	r22
     e1a:	72 95       	swap	r23
     e1c:	70 7f       	andi	r23, 0xF0	; 240
     e1e:	76 27       	eor	r23, r22
     e20:	60 7f       	andi	r22, 0xF0	; 240
     e22:	76 27       	eor	r23, r22
     e24:	8b ec       	ldi	r24, 0xCB	; 203
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     e2c:	60 91 fc 02 	lds	r22, 0x02FC
     e30:	70 91 fd 02 	lds	r23, 0x02FD
     e34:	62 95       	swap	r22
     e36:	72 95       	swap	r23
     e38:	70 7f       	andi	r23, 0xF0	; 240
     e3a:	76 27       	eor	r23, r22
     e3c:	60 7f       	andi	r22, 0xF0	; 240
     e3e:	76 27       	eor	r23, r22
     e40:	88 ec       	ldi	r24, 0xC8	; 200
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     e48:	60 91 fa 02 	lds	r22, 0x02FA
     e4c:	70 91 fb 02 	lds	r23, 0x02FB
     e50:	62 95       	swap	r22
     e52:	72 95       	swap	r23
     e54:	70 7f       	andi	r23, 0xF0	; 240
     e56:	76 27       	eor	r23, r22
     e58:	60 7f       	andi	r22, 0xF0	; 240
     e5a:	76 27       	eor	r23, r22
     e5c:	89 ec       	ldi	r24, 0xC9	; 201
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     e64:	8c 2f       	mov	r24, r28
     e66:	6f e0       	ldi	r22, 0x0F	; 15
     e68:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     e6c:	61 e5       	ldi	r22, 0x51	; 81
     e6e:	73 e0       	ldi	r23, 0x03	; 3
     e70:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <interpolate_pitch_cv>
     e74:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     e76:	86 ee       	ldi	r24, 0xE6	; 230
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     e7e:	8c 2f       	mov	r24, r28
     e80:	60 ef       	ldi	r22, 0xF0	; 240
     e82:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     e86:	6f e2       	ldi	r22, 0x2F	; 47
     e88:	73 e0       	ldi	r23, 0x03	; 3
     e8a:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <interpolate_pitch_cv>
     e8e:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     e90:	85 ee       	ldi	r24, 0xE5	; 229
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     e98:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     e9a:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     e9c:	20 91 88 01 	lds	r18, 0x0188
     ea0:	80 91 89 01 	lds	r24, 0x0189
     ea4:	38 2f       	mov	r19, r24
     ea6:	33 70       	andi	r19, 0x03	; 3
     ea8:	83 ef       	ldi	r24, 0xF3	; 243
     eaa:	94 e0       	ldi	r25, 0x04	; 4
     eac:	82 1b       	sub	r24, r18
     eae:	93 0b       	sbc	r25, r19
     eb0:	90 93 cd 03 	sts	0x03CD, r25
     eb4:	80 93 cc 03 	sts	0x03CC, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     eb8:	20 91 ce 03 	lds	r18, 0x03CE
     ebc:	30 91 cf 03 	lds	r19, 0x03CF
     ec0:	82 17       	cp	r24, r18
     ec2:	93 07       	cpc	r25, r19
     ec4:	11 f0       	breq	.+4      	; 0xeca <update_control_voltages+0x436>
		
		update_clock_rate(system_clock.rate);
     ec6:	0e 94 96 01 	call	0x32c	; 0x32c <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     eca:	80 91 cc 03 	lds	r24, 0x03CC
     ece:	90 91 cd 03 	lds	r25, 0x03CD
     ed2:	90 93 cf 03 	sts	0x03CF, r25
     ed6:	80 93 ce 03 	sts	0x03CE, r24
	
}			
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     ee0:	84 b1       	in	r24, 0x04	; 4
     ee2:	87 62       	ori	r24, 0x27	; 39
     ee4:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     ee6:	ec ed       	ldi	r30, 0xDC	; 220
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8c 65       	ori	r24, 0x5C	; 92
     eee:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     ef0:	85 b1       	in	r24, 0x05	; 5
     ef2:	89 7d       	andi	r24, 0xD9	; 217
     ef4:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     ef6:	ed ed       	ldi	r30, 0xDD	; 221
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	83 7f       	andi	r24, 0xF3	; 243
     efe:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     f00:	80 e5       	ldi	r24, 0x50	; 80
     f02:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     f04:	80 81       	ld	r24, Z
     f06:	87 7f       	andi	r24, 0xF7	; 247
     f08:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     f0a:	80 81       	ld	r24, Z
     f0c:	87 7f       	andi	r24, 0xF7	; 247
     f0e:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     f10:	80 81       	ld	r24, Z
     f12:	88 60       	ori	r24, 0x08	; 8
     f14:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     f16:	80 81       	ld	r24, Z
     f18:	8f 7e       	andi	r24, 0xEF	; 239
     f1a:	80 83       	st	Z, r24
	
}
     f1c:	08 95       	ret

00000f1e <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     f1e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     f20:	0d b4       	in	r0, 0x2d	; 45
     f22:	07 fe       	sbrs	r0, 7
     f24:	fd cf       	rjmp	.-6      	; 0xf20 <spi_shift_byte+0x2>
	return SPDR;
     f26:	8e b5       	in	r24, 0x2e	; 46
	
}
     f28:	08 95       	ret

00000f2a <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     f2a:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     f2c:	80 91 02 03 	lds	r24, 0x0302
     f30:	0e 94 8f 07 	call	0xf1e	; 0xf1e <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     f34:	90 91 c1 02 	lds	r25, 0x02C1
     f38:	98 2b       	or	r25, r24
     f3a:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     f3e:	20 91 bf 02 	lds	r18, 0x02BF
     f42:	98 2f       	mov	r25, r24
     f44:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     f46:	89 2f       	mov	r24, r25
     f48:	82 27       	eor	r24, r18
     f4a:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     f4e:	89 23       	and	r24, r25
     f50:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     f54:	90 91 7e 03 	lds	r25, 0x037E
     f58:	89 27       	eor	r24, r25
     f5a:	80 93 7e 03 	sts	0x037E, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     f5e:	80 91 01 03 	lds	r24, 0x0301
     f62:	0e 94 8f 07 	call	0xf1e	; 0xf1e <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     f66:	90 91 c1 02 	lds	r25, 0x02C1
     f6a:	98 2b       	or	r25, r24
     f6c:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     f70:	20 91 bd 02 	lds	r18, 0x02BD
     f74:	98 2f       	mov	r25, r24
     f76:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     f78:	89 2f       	mov	r24, r25
     f7a:	82 27       	eor	r24, r18
     f7c:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     f80:	89 23       	and	r24, r25
     f82:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     f86:	90 91 7f 03 	lds	r25, 0x037F
     f8a:	89 27       	eor	r24, r25
     f8c:	80 93 7f 03 	sts	0x037F, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     f90:	80 91 00 03 	lds	r24, 0x0300
     f94:	0e 94 8f 07 	call	0xf1e	; 0xf1e <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     f98:	80 91 ff 02 	lds	r24, 0x02FF
     f9c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     fa0:	80 91 07 03 	lds	r24, 0x0307
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	11 f4       	brne	.+4      	; 0xfac <update_spi+0x82>
     fa8:	20 e8       	ldi	r18, 0x80	; 128
     faa:	01 c0       	rjmp	.+2      	; 0xfae <update_spi+0x84>
     fac:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
     fae:	80 91 80 03 	lds	r24, 0x0380
     fb2:	88 1f       	adc	r24, r24
     fb4:	88 27       	eor	r24, r24
     fb6:	88 1f       	adc	r24, r24
     fb8:	82 95       	swap	r24
     fba:	88 0f       	add	r24, r24
     fbc:	88 0f       	add	r24, r24
     fbe:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     fc0:	90 91 fe 02 	lds	r25, 0x02FE
     fc4:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     fc6:	82 2b       	or	r24, r18
     fc8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     fcc:	ed ed       	ldi	r30, 0xDD	; 221
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     fd6:	80 81       	ld	r24, Z
     fd8:	88 60       	ori	r24, 0x08	; 8
     fda:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     fdc:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     fde:	08 95       	ret

00000fe0 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     fe0:	a0 e0       	ldi	r26, 0x00	; 0
     fe2:	b1 e0       	ldi	r27, 0x01	; 1
     fe4:	9d 01       	movw	r18, r26
     fe6:	24 5c       	subi	r18, 0xC4	; 196
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     fea:	ed 91       	ld	r30, X+
     fec:	fc 91       	ld	r31, X
     fee:	11 97       	sbiw	r26, 0x01	; 1
     ff0:	80 81       	ld	r24, Z
     ff2:	41 81       	ldd	r20, Z+1	; 0x01
     ff4:	94 2f       	mov	r25, r20
     ff6:	93 70       	andi	r25, 0x03	; 3
     ff8:	95 95       	asr	r25
     ffa:	87 95       	ror	r24
     ffc:	95 95       	asr	r25
     ffe:	87 95       	ror	r24
    1000:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
    1002:	ed 91       	ld	r30, X+
    1004:	fd 91       	ld	r31, X+
    1006:	83 81       	ldd	r24, Z+3	; 0x03
    1008:	80 68       	ori	r24, 0x80	; 128
    100a:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
    100c:	a2 17       	cp	r26, r18
    100e:	b3 07       	cpc	r27, r19
    1010:	61 f7       	brne	.-40     	; 0xfea <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
    1012:	08 95       	ret

00001014 <unlock_pots>:

void unlock_pots(void) {
    1014:	e0 e0       	ldi	r30, 0x00	; 0
    1016:	f1 e0       	ldi	r31, 0x01	; 1
    1018:	cf 01       	movw	r24, r30
    101a:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
    101c:	a1 91       	ld	r26, Z+
    101e:	b1 91       	ld	r27, Z+
    1020:	13 96       	adiw	r26, 0x03	; 3
    1022:	2c 91       	ld	r18, X
    1024:	13 97       	sbiw	r26, 0x03	; 3
    1026:	2f 77       	andi	r18, 0x7F	; 127
    1028:	13 96       	adiw	r26, 0x03	; 3
    102a:	2c 93       	st	X, r18
    102c:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
    102e:	e8 17       	cp	r30, r24
    1030:	f9 07       	cpc	r31, r25
    1032:	a1 f7       	brne	.-24     	; 0x101c <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
    1034:	08 95       	ret

00001036 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	ab 97       	sbiw	r28, 0x2b	; 43
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
    104e:	ee ed       	ldi	r30, 0xDE	; 222
    1050:	f2 e0       	ldi	r31, 0x02	; 2
    1052:	20 91 de 02 	lds	r18, 0x02DE
    1056:	82 2f       	mov	r24, r18
    1058:	82 95       	swap	r24
    105a:	80 7f       	andi	r24, 0xF0	; 240
    105c:	22 95       	swap	r18
    105e:	2f 70       	andi	r18, 0x0F	; 15
    1060:	90 91 df 02 	lds	r25, 0x02DF
    1064:	93 70       	andi	r25, 0x03	; 3
    1066:	92 95       	swap	r25
    1068:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
    106a:	df 01       	movw	r26, r30
    106c:	5a 97       	sbiw	r26, 0x1a	; 26
    106e:	3c 91       	ld	r19, X
    1070:	53 2f       	mov	r21, r19
    1072:	55 0f       	add	r21, r21
    1074:	55 0f       	add	r21, r21
    1076:	4a 81       	ldd	r20, Y+2	; 0x02
    1078:	43 70       	andi	r20, 0x03	; 3
    107a:	45 2b       	or	r20, r21
    107c:	4a 83       	std	Y+2, r20	; 0x02
    107e:	63 2f       	mov	r22, r19
    1080:	62 95       	swap	r22
    1082:	66 95       	lsr	r22
    1084:	66 95       	lsr	r22
    1086:	63 70       	andi	r22, 0x03	; 3
    1088:	11 96       	adiw	r26, 0x01	; 1
    108a:	4c 91       	ld	r20, X
    108c:	43 70       	andi	r20, 0x03	; 3
    108e:	44 0f       	add	r20, r20
    1090:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    1092:	df 01       	movw	r26, r30
    1094:	58 97       	sbiw	r26, 0x18	; 24
    1096:	3c 91       	ld	r19, X
    1098:	53 2f       	mov	r21, r19
    109a:	52 95       	swap	r21
    109c:	50 7f       	andi	r21, 0xF0	; 240
    109e:	46 2b       	or	r20, r22
    10a0:	45 2b       	or	r20, r21
    10a2:	4b 83       	std	Y+3, r20	; 0x03
    10a4:	63 2f       	mov	r22, r19
    10a6:	62 95       	swap	r22
    10a8:	6f 70       	andi	r22, 0x0F	; 15
    10aa:	11 96       	adiw	r26, 0x01	; 1
    10ac:	4c 91       	ld	r20, X
    10ae:	43 70       	andi	r20, 0x03	; 3
    10b0:	42 95       	swap	r20
    10b2:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    10b4:	df 01       	movw	r26, r30
    10b6:	56 97       	sbiw	r26, 0x16	; 22
    10b8:	3c 91       	ld	r19, X
    10ba:	53 2f       	mov	r21, r19
    10bc:	52 95       	swap	r21
    10be:	55 0f       	add	r21, r21
    10c0:	55 0f       	add	r21, r21
    10c2:	50 7c       	andi	r21, 0xC0	; 192
    10c4:	46 2b       	or	r20, r22
    10c6:	45 2b       	or	r20, r21
    10c8:	4c 83       	std	Y+4, r20	; 0x04
    10ca:	11 96       	adiw	r26, 0x01	; 1
    10cc:	4c 91       	ld	r20, X
    10ce:	42 95       	swap	r20
    10d0:	44 0f       	add	r20, r20
    10d2:	44 0f       	add	r20, r20
    10d4:	40 7c       	andi	r20, 0xC0	; 192
    10d6:	36 95       	lsr	r19
    10d8:	36 95       	lsr	r19
    10da:	34 2b       	or	r19, r20
    10dc:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    10de:	df 01       	movw	r26, r30
    10e0:	54 97       	sbiw	r26, 0x14	; 20
    10e2:	3c 91       	ld	r19, X
    10e4:	3e 83       	std	Y+6, r19	; 0x06
    10e6:	11 96       	adiw	r26, 0x01	; 1
    10e8:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    10ea:	df 01       	movw	r26, r30
    10ec:	52 97       	sbiw	r26, 0x12	; 18
    10ee:	3c 91       	ld	r19, X
    10f0:	53 2f       	mov	r21, r19
    10f2:	55 0f       	add	r21, r21
    10f4:	55 0f       	add	r21, r21
    10f6:	43 70       	andi	r20, 0x03	; 3
    10f8:	45 2b       	or	r20, r21
    10fa:	4f 83       	std	Y+7, r20	; 0x07
    10fc:	63 2f       	mov	r22, r19
    10fe:	62 95       	swap	r22
    1100:	66 95       	lsr	r22
    1102:	66 95       	lsr	r22
    1104:	63 70       	andi	r22, 0x03	; 3
    1106:	11 96       	adiw	r26, 0x01	; 1
    1108:	4c 91       	ld	r20, X
    110a:	43 70       	andi	r20, 0x03	; 3
    110c:	44 0f       	add	r20, r20
    110e:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    1110:	df 01       	movw	r26, r30
    1112:	50 97       	sbiw	r26, 0x10	; 16
    1114:	3c 91       	ld	r19, X
    1116:	53 2f       	mov	r21, r19
    1118:	52 95       	swap	r21
    111a:	50 7f       	andi	r21, 0xF0	; 240
    111c:	46 2b       	or	r20, r22
    111e:	45 2b       	or	r20, r21
    1120:	48 87       	std	Y+8, r20	; 0x08
    1122:	63 2f       	mov	r22, r19
    1124:	62 95       	swap	r22
    1126:	6f 70       	andi	r22, 0x0F	; 15
    1128:	11 96       	adiw	r26, 0x01	; 1
    112a:	4c 91       	ld	r20, X
    112c:	43 70       	andi	r20, 0x03	; 3
    112e:	42 95       	swap	r20
    1130:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    1132:	df 01       	movw	r26, r30
    1134:	1e 97       	sbiw	r26, 0x0e	; 14
    1136:	3c 91       	ld	r19, X
    1138:	53 2f       	mov	r21, r19
    113a:	52 95       	swap	r21
    113c:	55 0f       	add	r21, r21
    113e:	55 0f       	add	r21, r21
    1140:	50 7c       	andi	r21, 0xC0	; 192
    1142:	46 2b       	or	r20, r22
    1144:	45 2b       	or	r20, r21
    1146:	49 87       	std	Y+9, r20	; 0x09
    1148:	11 96       	adiw	r26, 0x01	; 1
    114a:	4c 91       	ld	r20, X
    114c:	42 95       	swap	r20
    114e:	44 0f       	add	r20, r20
    1150:	44 0f       	add	r20, r20
    1152:	40 7c       	andi	r20, 0xC0	; 192
    1154:	36 95       	lsr	r19
    1156:	36 95       	lsr	r19
    1158:	34 2b       	or	r19, r20
    115a:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    115c:	df 01       	movw	r26, r30
    115e:	1c 97       	sbiw	r26, 0x0c	; 12
    1160:	3c 91       	ld	r19, X
    1162:	3b 87       	std	Y+11, r19	; 0x0b
    1164:	11 96       	adiw	r26, 0x01	; 1
    1166:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    1168:	df 01       	movw	r26, r30
    116a:	1a 97       	sbiw	r26, 0x0a	; 10
    116c:	3c 91       	ld	r19, X
    116e:	53 2f       	mov	r21, r19
    1170:	55 0f       	add	r21, r21
    1172:	55 0f       	add	r21, r21
    1174:	43 70       	andi	r20, 0x03	; 3
    1176:	45 2b       	or	r20, r21
    1178:	4c 87       	std	Y+12, r20	; 0x0c
    117a:	63 2f       	mov	r22, r19
    117c:	62 95       	swap	r22
    117e:	66 95       	lsr	r22
    1180:	66 95       	lsr	r22
    1182:	63 70       	andi	r22, 0x03	; 3
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	4c 91       	ld	r20, X
    1188:	43 70       	andi	r20, 0x03	; 3
    118a:	44 0f       	add	r20, r20
    118c:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    118e:	df 01       	movw	r26, r30
    1190:	18 97       	sbiw	r26, 0x08	; 8
    1192:	3c 91       	ld	r19, X
    1194:	53 2f       	mov	r21, r19
    1196:	52 95       	swap	r21
    1198:	50 7f       	andi	r21, 0xF0	; 240
    119a:	46 2b       	or	r20, r22
    119c:	45 2b       	or	r20, r21
    119e:	4d 87       	std	Y+13, r20	; 0x0d
    11a0:	63 2f       	mov	r22, r19
    11a2:	62 95       	swap	r22
    11a4:	6f 70       	andi	r22, 0x0F	; 15
    11a6:	11 96       	adiw	r26, 0x01	; 1
    11a8:	4c 91       	ld	r20, X
    11aa:	43 70       	andi	r20, 0x03	; 3
    11ac:	42 95       	swap	r20
    11ae:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    11b0:	df 01       	movw	r26, r30
    11b2:	16 97       	sbiw	r26, 0x06	; 6
    11b4:	3c 91       	ld	r19, X
    11b6:	53 2f       	mov	r21, r19
    11b8:	52 95       	swap	r21
    11ba:	55 0f       	add	r21, r21
    11bc:	55 0f       	add	r21, r21
    11be:	50 7c       	andi	r21, 0xC0	; 192
    11c0:	46 2b       	or	r20, r22
    11c2:	45 2b       	or	r20, r21
    11c4:	4e 87       	std	Y+14, r20	; 0x0e
    11c6:	11 96       	adiw	r26, 0x01	; 1
    11c8:	4c 91       	ld	r20, X
    11ca:	42 95       	swap	r20
    11cc:	44 0f       	add	r20, r20
    11ce:	44 0f       	add	r20, r20
    11d0:	40 7c       	andi	r20, 0xC0	; 192
    11d2:	36 95       	lsr	r19
    11d4:	36 95       	lsr	r19
    11d6:	34 2b       	or	r19, r20
    11d8:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    11da:	df 01       	movw	r26, r30
    11dc:	14 97       	sbiw	r26, 0x04	; 4
    11de:	3c 91       	ld	r19, X
    11e0:	38 8b       	std	Y+16, r19	; 0x10
    11e2:	11 96       	adiw	r26, 0x01	; 1
    11e4:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    11e6:	df 01       	movw	r26, r30
    11e8:	12 97       	sbiw	r26, 0x02	; 2
    11ea:	3c 91       	ld	r19, X
    11ec:	53 2f       	mov	r21, r19
    11ee:	55 0f       	add	r21, r21
    11f0:	55 0f       	add	r21, r21
    11f2:	43 70       	andi	r20, 0x03	; 3
    11f4:	45 2b       	or	r20, r21
    11f6:	49 8b       	std	Y+17, r20	; 0x11
    11f8:	32 95       	swap	r19
    11fa:	36 95       	lsr	r19
    11fc:	36 95       	lsr	r19
    11fe:	33 70       	andi	r19, 0x03	; 3
    1200:	11 96       	adiw	r26, 0x01	; 1
    1202:	4c 91       	ld	r20, X
    1204:	43 70       	andi	r20, 0x03	; 3
    1206:	44 0f       	add	r20, r20
    1208:	44 0f       	add	r20, r20
    120a:	83 2b       	or	r24, r19
    120c:	84 2b       	or	r24, r20
    120e:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    1210:	80 91 e0 02 	lds	r24, 0x02E0
    1214:	38 2f       	mov	r19, r24
    1216:	32 95       	swap	r19
    1218:	33 0f       	add	r19, r19
    121a:	33 0f       	add	r19, r19
    121c:	30 7c       	andi	r19, 0xC0	; 192
    121e:	92 2b       	or	r25, r18
    1220:	93 2b       	or	r25, r19
    1222:	9b 8b       	std	Y+19, r25	; 0x13
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	92 95       	swap	r25
    1228:	99 0f       	add	r25, r25
    122a:	99 0f       	add	r25, r25
    122c:	90 7c       	andi	r25, 0xC0	; 192
    122e:	86 95       	lsr	r24
    1230:	86 95       	lsr	r24
    1232:	89 2b       	or	r24, r25
    1234:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    1236:	80 91 e2 02 	lds	r24, 0x02E2
    123a:	8d 8b       	std	Y+21, r24	; 0x15
    123c:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    123e:	80 91 e4 02 	lds	r24, 0x02E4
    1242:	28 2f       	mov	r18, r24
    1244:	22 0f       	add	r18, r18
    1246:	22 0f       	add	r18, r18
    1248:	93 70       	andi	r25, 0x03	; 3
    124a:	92 2b       	or	r25, r18
    124c:	9e 8b       	std	Y+22, r25	; 0x16
    124e:	38 2f       	mov	r19, r24
    1250:	32 95       	swap	r19
    1252:	36 95       	lsr	r19
    1254:	36 95       	lsr	r19
    1256:	33 70       	andi	r19, 0x03	; 3
    1258:	97 81       	ldd	r25, Z+7	; 0x07
    125a:	93 70       	andi	r25, 0x03	; 3
    125c:	99 0f       	add	r25, r25
    125e:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    1260:	80 91 e6 02 	lds	r24, 0x02E6
    1264:	28 2f       	mov	r18, r24
    1266:	22 95       	swap	r18
    1268:	20 7f       	andi	r18, 0xF0	; 240
    126a:	93 2b       	or	r25, r19
    126c:	92 2b       	or	r25, r18
    126e:	9f 8b       	std	Y+23, r25	; 0x17
    1270:	38 2f       	mov	r19, r24
    1272:	32 95       	swap	r19
    1274:	3f 70       	andi	r19, 0x0F	; 15
    1276:	91 85       	ldd	r25, Z+9	; 0x09
    1278:	93 70       	andi	r25, 0x03	; 3
    127a:	92 95       	swap	r25
    127c:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    127e:	80 91 e8 02 	lds	r24, 0x02E8
    1282:	28 2f       	mov	r18, r24
    1284:	22 95       	swap	r18
    1286:	22 0f       	add	r18, r18
    1288:	22 0f       	add	r18, r18
    128a:	20 7c       	andi	r18, 0xC0	; 192
    128c:	93 2b       	or	r25, r19
    128e:	92 2b       	or	r25, r18
    1290:	98 8f       	std	Y+24, r25	; 0x18
    1292:	93 85       	ldd	r25, Z+11	; 0x0b
    1294:	92 95       	swap	r25
    1296:	99 0f       	add	r25, r25
    1298:	99 0f       	add	r25, r25
    129a:	90 7c       	andi	r25, 0xC0	; 192
    129c:	86 95       	lsr	r24
    129e:	86 95       	lsr	r24
    12a0:	89 2b       	or	r24, r25
    12a2:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    12a4:	80 91 ea 02 	lds	r24, 0x02EA
    12a8:	8a 8f       	std	Y+26, r24	; 0x1a
    12aa:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    12ac:	80 91 ec 02 	lds	r24, 0x02EC
    12b0:	28 2f       	mov	r18, r24
    12b2:	22 0f       	add	r18, r18
    12b4:	22 0f       	add	r18, r18
    12b6:	93 70       	andi	r25, 0x03	; 3
    12b8:	92 2b       	or	r25, r18
    12ba:	9b 8f       	std	Y+27, r25	; 0x1b
    12bc:	38 2f       	mov	r19, r24
    12be:	32 95       	swap	r19
    12c0:	36 95       	lsr	r19
    12c2:	36 95       	lsr	r19
    12c4:	33 70       	andi	r19, 0x03	; 3
    12c6:	97 85       	ldd	r25, Z+15	; 0x0f
    12c8:	93 70       	andi	r25, 0x03	; 3
    12ca:	99 0f       	add	r25, r25
    12cc:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    12ce:	80 91 ee 02 	lds	r24, 0x02EE
    12d2:	28 2f       	mov	r18, r24
    12d4:	22 95       	swap	r18
    12d6:	20 7f       	andi	r18, 0xF0	; 240
    12d8:	93 2b       	or	r25, r19
    12da:	92 2b       	or	r25, r18
    12dc:	9c 8f       	std	Y+28, r25	; 0x1c
    12de:	38 2f       	mov	r19, r24
    12e0:	32 95       	swap	r19
    12e2:	3f 70       	andi	r19, 0x0F	; 15
    12e4:	91 89       	ldd	r25, Z+17	; 0x11
    12e6:	93 70       	andi	r25, 0x03	; 3
    12e8:	92 95       	swap	r25
    12ea:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    12ec:	80 91 f0 02 	lds	r24, 0x02F0
    12f0:	28 2f       	mov	r18, r24
    12f2:	22 95       	swap	r18
    12f4:	22 0f       	add	r18, r18
    12f6:	22 0f       	add	r18, r18
    12f8:	20 7c       	andi	r18, 0xC0	; 192
    12fa:	93 2b       	or	r25, r19
    12fc:	92 2b       	or	r25, r18
    12fe:	9d 8f       	std	Y+29, r25	; 0x1d
    1300:	93 89       	ldd	r25, Z+19	; 0x13
    1302:	92 95       	swap	r25
    1304:	99 0f       	add	r25, r25
    1306:	99 0f       	add	r25, r25
    1308:	90 7c       	andi	r25, 0xC0	; 192
    130a:	86 95       	lsr	r24
    130c:	86 95       	lsr	r24
    130e:	89 2b       	or	r24, r25
    1310:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    1312:	80 91 f2 02 	lds	r24, 0x02F2
    1316:	8f 8f       	std	Y+31, r24	; 0x1f
    1318:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    131a:	80 91 f4 02 	lds	r24, 0x02F4
    131e:	28 2f       	mov	r18, r24
    1320:	22 0f       	add	r18, r18
    1322:	22 0f       	add	r18, r18
    1324:	93 70       	andi	r25, 0x03	; 3
    1326:	92 2b       	or	r25, r18
    1328:	98 a3       	lds	r25, 0x58
    132a:	38 2f       	mov	r19, r24
    132c:	32 95       	swap	r19
    132e:	36 95       	lsr	r19
    1330:	36 95       	lsr	r19
    1332:	33 70       	andi	r19, 0x03	; 3
    1334:	97 89       	ldd	r25, Z+23	; 0x17
    1336:	93 70       	andi	r25, 0x03	; 3
    1338:	99 0f       	add	r25, r25
    133a:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    133c:	80 91 f6 02 	lds	r24, 0x02F6
    1340:	28 2f       	mov	r18, r24
    1342:	22 95       	swap	r18
    1344:	20 7f       	andi	r18, 0xF0	; 240
    1346:	93 2b       	or	r25, r19
    1348:	92 2b       	or	r25, r18
    134a:	99 a3       	lds	r25, 0x59
    134c:	38 2f       	mov	r19, r24
    134e:	32 95       	swap	r19
    1350:	3f 70       	andi	r19, 0x0F	; 15
    1352:	91 8d       	ldd	r25, Z+25	; 0x19
    1354:	93 70       	andi	r25, 0x03	; 3
    1356:	92 95       	swap	r25
    1358:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    135a:	80 91 f8 02 	lds	r24, 0x02F8
    135e:	28 2f       	mov	r18, r24
    1360:	22 95       	swap	r18
    1362:	22 0f       	add	r18, r18
    1364:	22 0f       	add	r18, r18
    1366:	20 7c       	andi	r18, 0xC0	; 192
    1368:	93 2b       	or	r25, r19
    136a:	92 2b       	or	r25, r18
    136c:	9a a3       	lds	r25, 0x5a
    136e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1370:	92 95       	swap	r25
    1372:	99 0f       	add	r25, r25
    1374:	99 0f       	add	r25, r25
    1376:	90 7c       	andi	r25, 0xC0	; 192
    1378:	86 95       	lsr	r24
    137a:	86 95       	lsr	r24
    137c:	89 2b       	or	r24, r25
    137e:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    1380:	80 91 fa 02 	lds	r24, 0x02FA
    1384:	8c a3       	lds	r24, 0x5c
    1386:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    1388:	80 91 fc 02 	lds	r24, 0x02FC
    138c:	28 2f       	mov	r18, r24
    138e:	22 0f       	add	r18, r18
    1390:	22 0f       	add	r18, r18
    1392:	93 70       	andi	r25, 0x03	; 3
    1394:	92 2b       	or	r25, r18
    1396:	9d a3       	lds	r25, 0x5d
    1398:	82 95       	swap	r24
    139a:	86 95       	lsr	r24
    139c:	86 95       	lsr	r24
    139e:	83 70       	andi	r24, 0x03	; 3
    13a0:	2e a1       	lds	r18, 0x4e
    13a2:	20 7f       	andi	r18, 0xF0	; 240
    13a4:	97 8d       	ldd	r25, Z+31	; 0x1f
    13a6:	93 70       	andi	r25, 0x03	; 3
    13a8:	99 0f       	add	r25, r25
    13aa:	99 0f       	add	r25, r25
    13ac:	82 2b       	or	r24, r18
    13ae:	89 2b       	or	r24, r25
    13b0:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    13b2:	80 91 fe 02 	lds	r24, 0x02FE
    13b6:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    13b8:	80 91 ff 02 	lds	r24, 0x02FF
    13bc:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    13be:	80 91 00 03 	lds	r24, 0x0300
    13c2:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    13c4:	80 91 01 03 	lds	r24, 0x0301
    13c8:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    13ca:	80 91 02 03 	lds	r24, 0x0302
    13ce:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    13d0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    13d4:	80 91 80 03 	lds	r24, 0x0380
    13d8:	8f 77       	andi	r24, 0x7F	; 127
    13da:	80 93 80 03 	sts	0x0380, r24
	current_patch.mode = MEMORY;
    13de:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    13e2:	21 2f       	mov	r18, r17
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	8b e2       	ldi	r24, 0x2B	; 43
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	28 9f       	mul	r18, r24
    13ec:	b0 01       	movw	r22, r0
    13ee:	29 9f       	mul	r18, r25
    13f0:	70 0d       	add	r23, r0
    13f2:	38 9f       	mul	r19, r24
    13f4:	70 0d       	add	r23, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	60 50       	subi	r22, 0x00	; 0
    13fa:	70 40       	sbci	r23, 0x00	; 0
    13fc:	ce 01       	movw	r24, r28
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	4b e2       	ldi	r20, 0x2B	; 43
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__eeupd_block_m6450a>
}	
    1408:	ab 96       	adiw	r28, 0x2b	; 43
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	08 95       	ret

0000141c <load_patch>:
	
void load_patch(uint8_t patch_number) {
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	c3 54       	subi	r28, 0x43	; 67
    1428:	d0 40       	sbci	r29, 0x00	; 0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	2b e2       	ldi	r18, 0x2B	; 43
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	82 9f       	mul	r24, r18
    143c:	b0 01       	movw	r22, r0
    143e:	83 9f       	mul	r24, r19
    1440:	70 0d       	add	r23, r0
    1442:	92 9f       	mul	r25, r18
    1444:	70 0d       	add	r23, r0
    1446:	11 24       	eor	r1, r1
    1448:	60 50       	subi	r22, 0x00	; 0
    144a:	70 40       	sbci	r23, 0x00	; 0
    144c:	ce 01       	movw	r24, r28
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	4b e2       	ldi	r20, 0x2B	; 43
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    1458:	ee ed       	ldi	r30, 0xDE	; 222
    145a:	f2 e0       	ldi	r31, 0x02	; 2
    145c:	8a 89       	ldd	r24, Y+18	; 0x12
    145e:	28 2f       	mov	r18, r24
    1460:	22 95       	swap	r18
    1462:	2f 70       	andi	r18, 0x0F	; 15
    1464:	9b 89       	ldd	r25, Y+19	; 0x13
    1466:	39 2f       	mov	r19, r25
    1468:	32 95       	swap	r19
    146a:	30 7f       	andi	r19, 0xF0	; 240
    146c:	32 2b       	or	r19, r18
    146e:	29 2f       	mov	r18, r25
    1470:	22 95       	swap	r18
    1472:	2f 70       	andi	r18, 0x0F	; 15
    1474:	23 70       	andi	r18, 0x03	; 3
    1476:	30 93 de 02 	sts	0x02DE, r19
    147a:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    147e:	df 01       	movw	r26, r30
    1480:	5a 97       	sbiw	r26, 0x1a	; 26
    1482:	4a 81       	ldd	r20, Y+2	; 0x02
    1484:	46 95       	lsr	r20
    1486:	46 95       	lsr	r20
    1488:	2b 81       	ldd	r18, Y+3	; 0x03
    148a:	32 2f       	mov	r19, r18
    148c:	32 95       	swap	r19
    148e:	33 0f       	add	r19, r19
    1490:	33 0f       	add	r19, r19
    1492:	30 7c       	andi	r19, 0xC0	; 192
    1494:	43 2b       	or	r20, r19
    1496:	32 2f       	mov	r19, r18
    1498:	36 95       	lsr	r19
    149a:	36 95       	lsr	r19
    149c:	33 70       	andi	r19, 0x03	; 3
    149e:	4c 93       	st	X, r20
    14a0:	11 96       	adiw	r26, 0x01	; 1
    14a2:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    14a4:	df 01       	movw	r26, r30
    14a6:	58 97       	sbiw	r26, 0x18	; 24
    14a8:	32 2f       	mov	r19, r18
    14aa:	32 95       	swap	r19
    14ac:	3f 70       	andi	r19, 0x0F	; 15
    14ae:	2c 81       	ldd	r18, Y+4	; 0x04
    14b0:	42 2f       	mov	r20, r18
    14b2:	42 95       	swap	r20
    14b4:	40 7f       	andi	r20, 0xF0	; 240
    14b6:	43 2b       	or	r20, r19
    14b8:	32 2f       	mov	r19, r18
    14ba:	32 95       	swap	r19
    14bc:	3f 70       	andi	r19, 0x0F	; 15
    14be:	33 70       	andi	r19, 0x03	; 3
    14c0:	4c 93       	st	X, r20
    14c2:	11 96       	adiw	r26, 0x01	; 1
    14c4:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    14c6:	df 01       	movw	r26, r30
    14c8:	56 97       	sbiw	r26, 0x16	; 22
    14ca:	22 95       	swap	r18
    14cc:	26 95       	lsr	r18
    14ce:	26 95       	lsr	r18
    14d0:	23 70       	andi	r18, 0x03	; 3
    14d2:	3d 81       	ldd	r19, Y+5	; 0x05
    14d4:	43 2f       	mov	r20, r19
    14d6:	44 0f       	add	r20, r20
    14d8:	44 0f       	add	r20, r20
    14da:	24 2b       	or	r18, r20
    14dc:	32 95       	swap	r19
    14de:	36 95       	lsr	r19
    14e0:	36 95       	lsr	r19
    14e2:	33 70       	andi	r19, 0x03	; 3
    14e4:	2c 93       	st	X, r18
    14e6:	11 96       	adiw	r26, 0x01	; 1
    14e8:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    14ea:	df 01       	movw	r26, r30
    14ec:	54 97       	sbiw	r26, 0x14	; 20
    14ee:	4e 81       	ldd	r20, Y+6	; 0x06
    14f0:	2f 81       	ldd	r18, Y+7	; 0x07
    14f2:	32 2f       	mov	r19, r18
    14f4:	33 70       	andi	r19, 0x03	; 3
    14f6:	4c 93       	st	X, r20
    14f8:	11 96       	adiw	r26, 0x01	; 1
    14fa:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    14fc:	df 01       	movw	r26, r30
    14fe:	52 97       	sbiw	r26, 0x12	; 18
    1500:	32 2f       	mov	r19, r18
    1502:	36 95       	lsr	r19
    1504:	36 95       	lsr	r19
    1506:	28 85       	ldd	r18, Y+8	; 0x08
    1508:	42 2f       	mov	r20, r18
    150a:	42 95       	swap	r20
    150c:	44 0f       	add	r20, r20
    150e:	44 0f       	add	r20, r20
    1510:	40 7c       	andi	r20, 0xC0	; 192
    1512:	43 2b       	or	r20, r19
    1514:	32 2f       	mov	r19, r18
    1516:	36 95       	lsr	r19
    1518:	36 95       	lsr	r19
    151a:	33 70       	andi	r19, 0x03	; 3
    151c:	4c 93       	st	X, r20
    151e:	11 96       	adiw	r26, 0x01	; 1
    1520:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1522:	df 01       	movw	r26, r30
    1524:	50 97       	sbiw	r26, 0x10	; 16
    1526:	32 2f       	mov	r19, r18
    1528:	32 95       	swap	r19
    152a:	3f 70       	andi	r19, 0x0F	; 15
    152c:	29 85       	ldd	r18, Y+9	; 0x09
    152e:	42 2f       	mov	r20, r18
    1530:	42 95       	swap	r20
    1532:	40 7f       	andi	r20, 0xF0	; 240
    1534:	43 2b       	or	r20, r19
    1536:	32 2f       	mov	r19, r18
    1538:	32 95       	swap	r19
    153a:	3f 70       	andi	r19, 0x0F	; 15
    153c:	33 70       	andi	r19, 0x03	; 3
    153e:	4c 93       	st	X, r20
    1540:	11 96       	adiw	r26, 0x01	; 1
    1542:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    1544:	df 01       	movw	r26, r30
    1546:	1e 97       	sbiw	r26, 0x0e	; 14
    1548:	22 95       	swap	r18
    154a:	26 95       	lsr	r18
    154c:	26 95       	lsr	r18
    154e:	23 70       	andi	r18, 0x03	; 3
    1550:	3a 85       	ldd	r19, Y+10	; 0x0a
    1552:	43 2f       	mov	r20, r19
    1554:	44 0f       	add	r20, r20
    1556:	44 0f       	add	r20, r20
    1558:	24 2b       	or	r18, r20
    155a:	32 95       	swap	r19
    155c:	36 95       	lsr	r19
    155e:	36 95       	lsr	r19
    1560:	33 70       	andi	r19, 0x03	; 3
    1562:	2c 93       	st	X, r18
    1564:	11 96       	adiw	r26, 0x01	; 1
    1566:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    1568:	df 01       	movw	r26, r30
    156a:	1c 97       	sbiw	r26, 0x0c	; 12
    156c:	4b 85       	ldd	r20, Y+11	; 0x0b
    156e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1570:	32 2f       	mov	r19, r18
    1572:	33 70       	andi	r19, 0x03	; 3
    1574:	4c 93       	st	X, r20
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    157a:	df 01       	movw	r26, r30
    157c:	1a 97       	sbiw	r26, 0x0a	; 10
    157e:	32 2f       	mov	r19, r18
    1580:	36 95       	lsr	r19
    1582:	36 95       	lsr	r19
    1584:	2d 85       	ldd	r18, Y+13	; 0x0d
    1586:	42 2f       	mov	r20, r18
    1588:	42 95       	swap	r20
    158a:	44 0f       	add	r20, r20
    158c:	44 0f       	add	r20, r20
    158e:	40 7c       	andi	r20, 0xC0	; 192
    1590:	43 2b       	or	r20, r19
    1592:	32 2f       	mov	r19, r18
    1594:	36 95       	lsr	r19
    1596:	36 95       	lsr	r19
    1598:	33 70       	andi	r19, 0x03	; 3
    159a:	4c 93       	st	X, r20
    159c:	11 96       	adiw	r26, 0x01	; 1
    159e:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    15a0:	df 01       	movw	r26, r30
    15a2:	18 97       	sbiw	r26, 0x08	; 8
    15a4:	32 2f       	mov	r19, r18
    15a6:	32 95       	swap	r19
    15a8:	3f 70       	andi	r19, 0x0F	; 15
    15aa:	2e 85       	ldd	r18, Y+14	; 0x0e
    15ac:	42 2f       	mov	r20, r18
    15ae:	42 95       	swap	r20
    15b0:	40 7f       	andi	r20, 0xF0	; 240
    15b2:	43 2b       	or	r20, r19
    15b4:	32 2f       	mov	r19, r18
    15b6:	32 95       	swap	r19
    15b8:	3f 70       	andi	r19, 0x0F	; 15
    15ba:	33 70       	andi	r19, 0x03	; 3
    15bc:	4c 93       	st	X, r20
    15be:	11 96       	adiw	r26, 0x01	; 1
    15c0:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    15c2:	df 01       	movw	r26, r30
    15c4:	16 97       	sbiw	r26, 0x06	; 6
    15c6:	22 95       	swap	r18
    15c8:	26 95       	lsr	r18
    15ca:	26 95       	lsr	r18
    15cc:	23 70       	andi	r18, 0x03	; 3
    15ce:	3f 85       	ldd	r19, Y+15	; 0x0f
    15d0:	43 2f       	mov	r20, r19
    15d2:	44 0f       	add	r20, r20
    15d4:	44 0f       	add	r20, r20
    15d6:	24 2b       	or	r18, r20
    15d8:	32 95       	swap	r19
    15da:	36 95       	lsr	r19
    15dc:	36 95       	lsr	r19
    15de:	33 70       	andi	r19, 0x03	; 3
    15e0:	2c 93       	st	X, r18
    15e2:	11 96       	adiw	r26, 0x01	; 1
    15e4:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    15e6:	df 01       	movw	r26, r30
    15e8:	14 97       	sbiw	r26, 0x04	; 4
    15ea:	48 89       	ldd	r20, Y+16	; 0x10
    15ec:	29 89       	ldd	r18, Y+17	; 0x11
    15ee:	32 2f       	mov	r19, r18
    15f0:	33 70       	andi	r19, 0x03	; 3
    15f2:	4c 93       	st	X, r20
    15f4:	11 96       	adiw	r26, 0x01	; 1
    15f6:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    15f8:	df 01       	movw	r26, r30
    15fa:	12 97       	sbiw	r26, 0x02	; 2
    15fc:	26 95       	lsr	r18
    15fe:	26 95       	lsr	r18
    1600:	38 2f       	mov	r19, r24
    1602:	32 95       	swap	r19
    1604:	33 0f       	add	r19, r19
    1606:	33 0f       	add	r19, r19
    1608:	30 7c       	andi	r19, 0xC0	; 192
    160a:	23 2b       	or	r18, r19
    160c:	86 95       	lsr	r24
    160e:	86 95       	lsr	r24
    1610:	83 70       	andi	r24, 0x03	; 3
    1612:	2c 93       	st	X, r18
    1614:	11 96       	adiw	r26, 0x01	; 1
    1616:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    1618:	92 95       	swap	r25
    161a:	96 95       	lsr	r25
    161c:	96 95       	lsr	r25
    161e:	93 70       	andi	r25, 0x03	; 3
    1620:	8c 89       	ldd	r24, Y+20	; 0x14
    1622:	28 2f       	mov	r18, r24
    1624:	22 0f       	add	r18, r18
    1626:	22 0f       	add	r18, r18
    1628:	92 2b       	or	r25, r18
    162a:	82 95       	swap	r24
    162c:	86 95       	lsr	r24
    162e:	86 95       	lsr	r24
    1630:	83 70       	andi	r24, 0x03	; 3
    1632:	90 93 e0 02 	sts	0x02E0, r25
    1636:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    1638:	2d 89       	ldd	r18, Y+21	; 0x15
    163a:	8e 89       	ldd	r24, Y+22	; 0x16
    163c:	98 2f       	mov	r25, r24
    163e:	93 70       	andi	r25, 0x03	; 3
    1640:	20 93 e2 02 	sts	0x02E2, r18
    1644:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    1646:	98 2f       	mov	r25, r24
    1648:	96 95       	lsr	r25
    164a:	96 95       	lsr	r25
    164c:	8f 89       	ldd	r24, Y+23	; 0x17
    164e:	28 2f       	mov	r18, r24
    1650:	22 95       	swap	r18
    1652:	22 0f       	add	r18, r18
    1654:	22 0f       	add	r18, r18
    1656:	20 7c       	andi	r18, 0xC0	; 192
    1658:	29 2b       	or	r18, r25
    165a:	98 2f       	mov	r25, r24
    165c:	96 95       	lsr	r25
    165e:	96 95       	lsr	r25
    1660:	93 70       	andi	r25, 0x03	; 3
    1662:	20 93 e4 02 	sts	0x02E4, r18
    1666:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    1668:	98 2f       	mov	r25, r24
    166a:	92 95       	swap	r25
    166c:	9f 70       	andi	r25, 0x0F	; 15
    166e:	88 8d       	ldd	r24, Y+24	; 0x18
    1670:	28 2f       	mov	r18, r24
    1672:	22 95       	swap	r18
    1674:	20 7f       	andi	r18, 0xF0	; 240
    1676:	29 2b       	or	r18, r25
    1678:	98 2f       	mov	r25, r24
    167a:	92 95       	swap	r25
    167c:	9f 70       	andi	r25, 0x0F	; 15
    167e:	93 70       	andi	r25, 0x03	; 3
    1680:	20 93 e6 02 	sts	0x02E6, r18
    1684:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    1686:	82 95       	swap	r24
    1688:	86 95       	lsr	r24
    168a:	86 95       	lsr	r24
    168c:	83 70       	andi	r24, 0x03	; 3
    168e:	99 8d       	ldd	r25, Y+25	; 0x19
    1690:	29 2f       	mov	r18, r25
    1692:	22 0f       	add	r18, r18
    1694:	22 0f       	add	r18, r18
    1696:	82 2b       	or	r24, r18
    1698:	92 95       	swap	r25
    169a:	96 95       	lsr	r25
    169c:	96 95       	lsr	r25
    169e:	93 70       	andi	r25, 0x03	; 3
    16a0:	80 93 e8 02 	sts	0x02E8, r24
    16a4:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    16a6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16aa:	98 2f       	mov	r25, r24
    16ac:	93 70       	andi	r25, 0x03	; 3
    16ae:	20 93 ea 02 	sts	0x02EA, r18
    16b2:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    16b4:	98 2f       	mov	r25, r24
    16b6:	96 95       	lsr	r25
    16b8:	96 95       	lsr	r25
    16ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16bc:	28 2f       	mov	r18, r24
    16be:	22 95       	swap	r18
    16c0:	22 0f       	add	r18, r18
    16c2:	22 0f       	add	r18, r18
    16c4:	20 7c       	andi	r18, 0xC0	; 192
    16c6:	29 2b       	or	r18, r25
    16c8:	98 2f       	mov	r25, r24
    16ca:	96 95       	lsr	r25
    16cc:	96 95       	lsr	r25
    16ce:	93 70       	andi	r25, 0x03	; 3
    16d0:	20 93 ec 02 	sts	0x02EC, r18
    16d4:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    16d6:	98 2f       	mov	r25, r24
    16d8:	92 95       	swap	r25
    16da:	9f 70       	andi	r25, 0x0F	; 15
    16dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16de:	28 2f       	mov	r18, r24
    16e0:	22 95       	swap	r18
    16e2:	20 7f       	andi	r18, 0xF0	; 240
    16e4:	29 2b       	or	r18, r25
    16e6:	98 2f       	mov	r25, r24
    16e8:	92 95       	swap	r25
    16ea:	9f 70       	andi	r25, 0x0F	; 15
    16ec:	93 70       	andi	r25, 0x03	; 3
    16ee:	20 93 ee 02 	sts	0x02EE, r18
    16f2:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    16f4:	82 95       	swap	r24
    16f6:	86 95       	lsr	r24
    16f8:	86 95       	lsr	r24
    16fa:	83 70       	andi	r24, 0x03	; 3
    16fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16fe:	29 2f       	mov	r18, r25
    1700:	22 0f       	add	r18, r18
    1702:	22 0f       	add	r18, r18
    1704:	82 2b       	or	r24, r18
    1706:	92 95       	swap	r25
    1708:	96 95       	lsr	r25
    170a:	96 95       	lsr	r25
    170c:	93 70       	andi	r25, 0x03	; 3
    170e:	80 93 f0 02 	sts	0x02F0, r24
    1712:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    1714:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1716:	88 a1       	lds	r24, 0x48
    1718:	98 2f       	mov	r25, r24
    171a:	93 70       	andi	r25, 0x03	; 3
    171c:	20 93 f2 02 	sts	0x02F2, r18
    1720:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1722:	98 2f       	mov	r25, r24
    1724:	96 95       	lsr	r25
    1726:	96 95       	lsr	r25
    1728:	89 a1       	lds	r24, 0x49
    172a:	28 2f       	mov	r18, r24
    172c:	22 95       	swap	r18
    172e:	22 0f       	add	r18, r18
    1730:	22 0f       	add	r18, r18
    1732:	20 7c       	andi	r18, 0xC0	; 192
    1734:	29 2b       	or	r18, r25
    1736:	98 2f       	mov	r25, r24
    1738:	96 95       	lsr	r25
    173a:	96 95       	lsr	r25
    173c:	93 70       	andi	r25, 0x03	; 3
    173e:	20 93 f4 02 	sts	0x02F4, r18
    1742:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    1744:	98 2f       	mov	r25, r24
    1746:	92 95       	swap	r25
    1748:	9f 70       	andi	r25, 0x0F	; 15
    174a:	8a a1       	lds	r24, 0x4a
    174c:	28 2f       	mov	r18, r24
    174e:	22 95       	swap	r18
    1750:	20 7f       	andi	r18, 0xF0	; 240
    1752:	29 2b       	or	r18, r25
    1754:	98 2f       	mov	r25, r24
    1756:	92 95       	swap	r25
    1758:	9f 70       	andi	r25, 0x0F	; 15
    175a:	93 70       	andi	r25, 0x03	; 3
    175c:	20 93 f6 02 	sts	0x02F6, r18
    1760:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    1762:	82 95       	swap	r24
    1764:	86 95       	lsr	r24
    1766:	86 95       	lsr	r24
    1768:	83 70       	andi	r24, 0x03	; 3
    176a:	9b a1       	lds	r25, 0x4b
    176c:	29 2f       	mov	r18, r25
    176e:	22 0f       	add	r18, r18
    1770:	22 0f       	add	r18, r18
    1772:	82 2b       	or	r24, r18
    1774:	92 95       	swap	r25
    1776:	96 95       	lsr	r25
    1778:	96 95       	lsr	r25
    177a:	93 70       	andi	r25, 0x03	; 3
    177c:	80 93 f8 02 	sts	0x02F8, r24
    1780:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    1782:	2c a1       	lds	r18, 0x4c
    1784:	8d a1       	lds	r24, 0x4d
    1786:	98 2f       	mov	r25, r24
    1788:	93 70       	andi	r25, 0x03	; 3
    178a:	20 93 fa 02 	sts	0x02FA, r18
    178e:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1790:	98 2f       	mov	r25, r24
    1792:	96 95       	lsr	r25
    1794:	96 95       	lsr	r25
    1796:	8e a1       	lds	r24, 0x4e
    1798:	28 2f       	mov	r18, r24
    179a:	22 95       	swap	r18
    179c:	22 0f       	add	r18, r18
    179e:	22 0f       	add	r18, r18
    17a0:	20 7c       	andi	r18, 0xC0	; 192
    17a2:	29 2b       	or	r18, r25
    17a4:	86 95       	lsr	r24
    17a6:	86 95       	lsr	r24
    17a8:	98 2f       	mov	r25, r24
    17aa:	93 70       	andi	r25, 0x03	; 3
    17ac:	20 93 fc 02 	sts	0x02FC, r18
    17b0:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    17b2:	7f a1       	lds	r23, 0x4f
    17b4:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    17b8:	68 a5       	lds	r22, 0x68
    17ba:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    17be:	89 a5       	lds	r24, 0x69
    17c0:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    17c4:	9a a5       	lds	r25, 0x6a
    17c6:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    17ca:	1b a5       	lds	r17, 0x6b
    17cc:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    17d0:	de 01       	movw	r26, r28
    17d2:	9c 96       	adiw	r26, 0x2c	; 44
    17d4:	ef ef       	ldi	r30, 0xFF	; 255
    17d6:	f1 e0       	ldi	r31, 0x01	; 1
    17d8:	28 e0       	ldi	r18, 0x08	; 8
    17da:	01 90       	ld	r0, Z+
    17dc:	0d 92       	st	X+, r0
    17de:	21 50       	subi	r18, 0x01	; 1
    17e0:	e1 f7       	brne	.-8      	; 0x17da <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    17e2:	e9 2f       	mov	r30, r25
    17e4:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	9f 01       	movw	r18, r30
    17ea:	22 0f       	add	r18, r18
    17ec:	33 1f       	adc	r19, r19
    17ee:	22 0f       	add	r18, r18
    17f0:	33 1f       	adc	r19, r19
    17f2:	a9 01       	movw	r20, r18
    17f4:	44 0f       	add	r20, r20
    17f6:	55 1f       	adc	r21, r21
    17f8:	44 0f       	add	r20, r20
    17fa:	55 1f       	adc	r21, r21
    17fc:	44 0f       	add	r20, r20
    17fe:	55 1f       	adc	r21, r21
    1800:	42 1b       	sub	r20, r18
    1802:	53 0b       	sbc	r21, r19
    1804:	4e 0f       	add	r20, r30
    1806:	5f 1f       	adc	r21, r31
    1808:	55 95       	asr	r21
    180a:	47 95       	ror	r20
    180c:	55 95       	asr	r21
    180e:	47 95       	ror	r20
    1810:	55 95       	asr	r21
    1812:	47 95       	ror	r20
    1814:	55 95       	asr	r21
    1816:	47 95       	ror	r20
    1818:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    181a:	fe 01       	movw	r30, r28
    181c:	e4 0f       	add	r30, r20
    181e:	f1 1d       	adc	r31, r1
    1820:	24 a5       	lds	r18, 0x64
    1822:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    1826:	de 01       	movw	r26, r28
    1828:	d4 96       	adiw	r26, 0x34	; 52
    182a:	e7 e0       	ldi	r30, 0x07	; 7
    182c:	f2 e0       	ldi	r31, 0x02	; 2
    182e:	28 e0       	ldi	r18, 0x08	; 8
    1830:	01 90       	ld	r0, Z+
    1832:	0d 92       	st	X+, r0
    1834:	21 50       	subi	r18, 0x01	; 1
    1836:	e1 f7       	brne	.-8      	; 0x1830 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    1838:	29 2f       	mov	r18, r25
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	20 7e       	andi	r18, 0xE0	; 224
    183e:	30 70       	andi	r19, 0x00	; 0
    1840:	35 95       	asr	r19
    1842:	27 95       	ror	r18
    1844:	35 95       	asr	r19
    1846:	27 95       	ror	r18
    1848:	35 95       	asr	r19
    184a:	27 95       	ror	r18
    184c:	83 70       	andi	r24, 0x03	; 3
    184e:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    1850:	42 2f       	mov	r20, r18
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	ca 01       	movw	r24, r20
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	9c 01       	movw	r18, r24
    1860:	22 0f       	add	r18, r18
    1862:	33 1f       	adc	r19, r19
    1864:	22 0f       	add	r18, r18
    1866:	33 1f       	adc	r19, r19
    1868:	22 0f       	add	r18, r18
    186a:	33 1f       	adc	r19, r19
    186c:	28 1b       	sub	r18, r24
    186e:	39 0b       	sbc	r19, r25
    1870:	42 0f       	add	r20, r18
    1872:	53 1f       	adc	r21, r19
    1874:	ca 01       	movw	r24, r20
    1876:	95 95       	asr	r25
    1878:	87 95       	ror	r24
    187a:	95 95       	asr	r25
    187c:	87 95       	ror	r24
    187e:	95 95       	asr	r25
    1880:	87 95       	ror	r24
    1882:	95 95       	asr	r25
    1884:	87 95       	ror	r24
    1886:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    1888:	fe 01       	movw	r30, r28
    188a:	e8 0f       	add	r30, r24
    188c:	f1 1d       	adc	r31, r1
    188e:	84 a9       	sts	0x44, r24
    1890:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    1894:	de 01       	movw	r26, r28
    1896:	dc 96       	adiw	r26, 0x3c	; 60
    1898:	ef e0       	ldi	r30, 0x0F	; 15
    189a:	f2 e0       	ldi	r31, 0x02	; 2
    189c:	88 e0       	ldi	r24, 0x08	; 8
    189e:	01 90       	ld	r0, Z+
    18a0:	0d 92       	st	X+, r0
    18a2:	81 50       	subi	r24, 0x01	; 1
    18a4:	e1 f7       	brne	.-8      	; 0x189e <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    18a6:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    18a8:	46 2f       	mov	r20, r22
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	ca 01       	movw	r24, r20
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	9c 01       	movw	r18, r24
    18b8:	22 0f       	add	r18, r18
    18ba:	33 1f       	adc	r19, r19
    18bc:	22 0f       	add	r18, r18
    18be:	33 1f       	adc	r19, r19
    18c0:	22 0f       	add	r18, r18
    18c2:	33 1f       	adc	r19, r19
    18c4:	28 1b       	sub	r18, r24
    18c6:	39 0b       	sbc	r19, r25
    18c8:	42 0f       	add	r20, r18
    18ca:	53 1f       	adc	r21, r19
    18cc:	ca 01       	movw	r24, r20
    18ce:	95 95       	asr	r25
    18d0:	87 95       	ror	r24
    18d2:	95 95       	asr	r25
    18d4:	87 95       	ror	r24
    18d6:	95 95       	asr	r25
    18d8:	87 95       	ror	r24
    18da:	95 95       	asr	r25
    18dc:	87 95       	ror	r24
    18de:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    18e0:	fe 01       	movw	r30, r28
    18e2:	e8 0f       	add	r30, r24
    18e4:	f1 1d       	adc	r31, r1
    18e6:	84 ad       	sts	0x64, r24
    18e8:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    18ec:	21 2f       	mov	r18, r17
    18ee:	26 95       	lsr	r18
    18f0:	27 95       	ror	r18
    18f2:	22 27       	eor	r18, r18
    18f4:	27 95       	ror	r18
    18f6:	81 2f       	mov	r24, r17
    18f8:	81 70       	andi	r24, 0x01	; 1
    18fa:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    18fc:	81 2f       	mov	r24, r17
    18fe:	86 95       	lsr	r24
    1900:	86 95       	lsr	r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	81 70       	andi	r24, 0x01	; 1
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1910:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1912:	81 2f       	mov	r24, r17
    1914:	86 95       	lsr	r24
    1916:	86 95       	lsr	r24
    1918:	86 95       	lsr	r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	81 70       	andi	r24, 0x01	; 1
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1924:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1926:	81 2f       	mov	r24, r17
    1928:	82 95       	swap	r24
    192a:	8f 70       	andi	r24, 0x0F	; 15
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	81 70       	andi	r24, 0x01	; 1
    1930:	90 70       	andi	r25, 0x00	; 0
    1932:	82 95       	swap	r24
    1934:	92 95       	swap	r25
    1936:	90 7f       	andi	r25, 0xF0	; 240
    1938:	98 27       	eor	r25, r24
    193a:	80 7f       	andi	r24, 0xF0	; 240
    193c:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    193e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    1940:	81 2f       	mov	r24, r17
    1942:	82 95       	swap	r24
    1944:	86 95       	lsr	r24
    1946:	87 70       	andi	r24, 0x07	; 7
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	81 70       	andi	r24, 0x01	; 1
    194c:	90 70       	andi	r25, 0x00	; 0
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	82 95       	swap	r24
    1954:	92 95       	swap	r25
    1956:	90 7f       	andi	r25, 0xF0	; 240
    1958:	98 27       	eor	r25, r24
    195a:	80 7f       	andi	r24, 0xF0	; 240
    195c:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    195e:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1960:	81 2f       	mov	r24, r17
    1962:	82 95       	swap	r24
    1964:	86 95       	lsr	r24
    1966:	86 95       	lsr	r24
    1968:	83 70       	andi	r24, 0x03	; 3
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	81 70       	andi	r24, 0x01	; 1
    196e:	90 70       	andi	r25, 0x00	; 0
    1970:	00 24       	eor	r0, r0
    1972:	96 95       	lsr	r25
    1974:	87 95       	ror	r24
    1976:	07 94       	ror	r0
    1978:	96 95       	lsr	r25
    197a:	87 95       	ror	r24
    197c:	07 94       	ror	r0
    197e:	98 2f       	mov	r25, r24
    1980:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1982:	82 2b       	or	r24, r18
    1984:	80 93 7e 03 	sts	0x037E, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    1988:	87 2f       	mov	r24, r23
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	81 70       	andi	r24, 0x01	; 1
    198e:	90 70       	andi	r25, 0x00	; 0
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    199c:	90 91 80 03 	lds	r25, 0x0380
    19a0:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    19a2:	89 2b       	or	r24, r25
    19a4:	11 1f       	adc	r17, r17
    19a6:	11 27       	eor	r17, r17
    19a8:	11 1f       	adc	r17, r17
    19aa:	11 0f       	add	r17, r17
    19ac:	11 0f       	add	r17, r17
    19ae:	81 2b       	or	r24, r17
    19b0:	80 93 80 03 	sts	0x0380, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    19b4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    19b8:	80 91 80 03 	lds	r24, 0x0380
    19bc:	8f 77       	andi	r24, 0x7F	; 127
    19be:	80 93 80 03 	sts	0x0380, r24
	
	current_patch.mode = MEMORY;
    19c2:	10 92 07 03 	sts	0x0307, r1
	
}
    19c6:	cd 5b       	subi	r28, 0xBD	; 189
    19c8:	df 4f       	sbci	r29, 0xFF	; 255
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	08 95       	ret

000019dc <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    19dc:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    19e0:	60 3f       	cpi	r22, 0xF0	; 240
    19e2:	11 f4       	brne	.+4      	; 0x19e8 <transpose_note+0xc>
    19e4:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    19e8:	29 2f       	mov	r18, r25
    19ea:	22 0f       	add	r18, r18
    19ec:	92 0f       	add	r25, r18
    19ee:	99 0f       	add	r25, r25
    19f0:	99 0f       	add	r25, r25
    19f2:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    19f4:	89 38       	cpi	r24, 0x89	; 137
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <transpose_note+0x1e>
    19f8:	88 e8       	ldi	r24, 0x88	; 136
	
}
    19fa:	08 95       	ret

000019fc <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    19fc:	80 91 7e 03 	lds	r24, 0x037E
    1a00:	98 2f       	mov	r25, r24
    1a02:	96 95       	lsr	r25
    1a04:	96 95       	lsr	r25
    1a06:	96 95       	lsr	r25
    1a08:	90 ff       	sbrs	r25, 0
    1a0a:	0e c0       	rjmp	.+28     	; 0x1a28 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1a0c:	90 91 08 03 	lds	r25, 0x0308
    1a10:	9f 5f       	subi	r25, 0xFF	; 255
    1a12:	90 93 08 03 	sts	0x0308, r25
    1a16:	95 30       	cpi	r25, 0x05	; 5
    1a18:	19 f4       	brne	.+6      	; 0x1a20 <update_octave_range+0x24>
    1a1a:	94 e0       	ldi	r25, 0x04	; 4
    1a1c:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1a20:	98 e0       	ldi	r25, 0x08	; 8
    1a22:	89 27       	eor	r24, r25
    1a24:	80 93 7e 03 	sts	0x037E, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1a28:	80 91 7f 03 	lds	r24, 0x037F
    1a2c:	98 2f       	mov	r25, r24
    1a2e:	96 95       	lsr	r25
    1a30:	96 95       	lsr	r25
    1a32:	96 95       	lsr	r25
    1a34:	90 ff       	sbrs	r25, 0
    1a36:	0b c0       	rjmp	.+22     	; 0x1a4e <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1a38:	90 91 08 03 	lds	r25, 0x0308
    1a3c:	99 23       	and	r25, r25
    1a3e:	19 f0       	breq	.+6      	; 0x1a46 <update_octave_range+0x4a>
    1a40:	91 50       	subi	r25, 0x01	; 1
    1a42:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1a46:	98 e0       	ldi	r25, 0x08	; 8
    1a48:	89 27       	eor	r24, r25
    1a4a:	80 93 7f 03 	sts	0x037F, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1a4e:	80 91 08 03 	lds	r24, 0x0308
    1a52:	e1 e2       	ldi	r30, 0x21	; 33
    1a54:	f2 e0       	ldi	r31, 0x02	; 2
    1a56:	e8 0f       	add	r30, r24
    1a58:	f1 1d       	adc	r31, r1
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	00 80       	ld	r0, Z
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <update_octave_range+0x6a>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <update_octave_range+0x66>
    1a6a:	58 2f       	mov	r21, r24
    1a6c:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1a70:	90 91 7f 03 	lds	r25, 0x037F
    1a74:	29 2f       	mov	r18, r25
    1a76:	26 95       	lsr	r18
    1a78:	26 95       	lsr	r18
    1a7a:	20 ff       	sbrs	r18, 0
    1a7c:	0e c0       	rjmp	.+28     	; 0x1a9a <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1a7e:	80 91 09 03 	lds	r24, 0x0309
    1a82:	8f 5f       	subi	r24, 0xFF	; 255
    1a84:	80 93 09 03 	sts	0x0309, r24
    1a88:	85 30       	cpi	r24, 0x05	; 5
    1a8a:	19 f4       	brne	.+6      	; 0x1a92 <update_octave_range+0x96>
    1a8c:	84 e0       	ldi	r24, 0x04	; 4
    1a8e:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1a92:	84 e0       	ldi	r24, 0x04	; 4
    1a94:	98 27       	eor	r25, r24
    1a96:	90 93 7f 03 	sts	0x037F, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1a9a:	90 91 7f 03 	lds	r25, 0x037F
    1a9e:	29 2f       	mov	r18, r25
    1aa0:	26 95       	lsr	r18
    1aa2:	20 ff       	sbrs	r18, 0
    1aa4:	0b c0       	rjmp	.+22     	; 0x1abc <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1aa6:	80 91 09 03 	lds	r24, 0x0309
    1aaa:	88 23       	and	r24, r24
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <update_octave_range+0xb8>
    1aae:	81 50       	subi	r24, 0x01	; 1
    1ab0:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	98 27       	eor	r25, r24
    1ab8:	90 93 7f 03 	sts	0x037F, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1abc:	40 91 00 03 	lds	r20, 0x0300
    1ac0:	4c 7f       	andi	r20, 0xFC	; 252
    1ac2:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1ac6:	90 91 09 03 	lds	r25, 0x0309
    1aca:	93 30       	cpi	r25, 0x03	; 3
    1acc:	88 f0       	brcs	.+34     	; 0x1af0 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1ace:	ec e1       	ldi	r30, 0x1C	; 28
    1ad0:	f2 e0       	ldi	r31, 0x02	; 2
    1ad2:	e9 0f       	add	r30, r25
    1ad4:	f1 1d       	adc	r31, r1
    1ad6:	21 e0       	ldi	r18, 0x01	; 1
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	c9 01       	movw	r24, r18
    1adc:	00 80       	ld	r0, Z
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <update_octave_range+0xe8>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <update_octave_range+0xe4>
    1ae8:	84 2b       	or	r24, r20
    1aea:	80 93 00 03 	sts	0x0300, r24
    1aee:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1af0:	ec e1       	ldi	r30, 0x1C	; 28
    1af2:	f2 e0       	ldi	r31, 0x02	; 2
    1af4:	e9 0f       	add	r30, r25
    1af6:	f1 1d       	adc	r31, r1
    1af8:	21 e0       	ldi	r18, 0x01	; 1
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	c9 01       	movw	r24, r18
    1afe:	00 80       	ld	r0, Z
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <update_octave_range+0x10a>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <update_octave_range+0x106>
    1b0a:	85 2b       	or	r24, r21
    1b0c:	80 93 01 03 	sts	0x0301, r24
    1b10:	08 95       	ret

00001b12 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1b12:	80 91 7f 03 	lds	r24, 0x037F
    1b16:	88 23       	and	r24, r24
    1b18:	64 f4       	brge	.+24     	; 0x1b32 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1b1a:	80 58       	subi	r24, 0x80	; 128
    1b1c:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1b20:	80 91 0a 03 	lds	r24, 0x030A
    1b24:	8f 5f       	subi	r24, 0xFF	; 255
    1b26:	80 93 0a 03 	sts	0x030A, r24
    1b2a:	85 30       	cpi	r24, 0x05	; 5
    1b2c:	11 f4       	brne	.+4      	; 0x1b32 <update_lfo_shape+0x20>
    1b2e:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1b32:	e0 91 0a 03 	lds	r30, 0x030A
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	ee 0f       	add	r30, r30
    1b3a:	ff 1f       	adc	r31, r31
    1b3c:	ea 5d       	subi	r30, 0xDA	; 218
    1b3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	01 80       	ldd	r0, Z+1	; 0x01
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <update_lfo_shape+0x3a>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1b50:	90 91 ff 02 	lds	r25, 0x02FF
    1b54:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1b56:	89 2b       	or	r24, r25
    1b58:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1b5c:	80 81       	ld	r24, Z
    1b5e:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1b60:	ed ed       	ldi	r30, 0xDD	; 221
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	80 62       	ori	r24, 0x20	; 32
    1b68:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8f 7d       	andi	r24, 0xDF	; 223
    1b6e:	80 83       	st	Z, r24
	
}		
    1b70:	08 95       	ret

00001b72 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1b72:	80 91 7f 03 	lds	r24, 0x037F
    1b76:	80 ff       	sbrs	r24, 0
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	89 27       	eor	r24, r25
    1b7e:	80 93 7f 03 	sts	0x037F, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1b82:	80 91 0b 03 	lds	r24, 0x030B
    1b86:	8f 5f       	subi	r24, 0xFF	; 255
    1b88:	80 93 0b 03 	sts	0x030B, r24
    1b8c:	85 30       	cpi	r24, 0x05	; 5
    1b8e:	11 f4       	brne	.+4      	; 0x1b94 <update_lfo_sync+0x22>
    1b90:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1b94:	10 92 d1 03 	sts	0x03D1, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1b98:	60 91 ff 02 	lds	r22, 0x02FF
    1b9c:	60 7f       	andi	r22, 0xF0	; 240
    1b9e:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1ba2:	20 91 0b 03 	lds	r18, 0x030B
    1ba6:	22 23       	and	r18, r18
    1ba8:	71 f0       	breq	.+28     	; 0x1bc6 <update_lfo_sync+0x54>
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	21 50       	subi	r18, 0x01	; 1
    1bae:	30 40       	sbci	r19, 0x00	; 0
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	ca 01       	movw	r24, r20
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <update_lfo_sync+0x4a>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	2a 95       	dec	r18
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <update_lfo_sync+0x46>
    1bc0:	86 2b       	or	r24, r22
    1bc2:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1bc6:	80 91 ff 02 	lds	r24, 0x02FF
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	8f 70       	andi	r24, 0x0F	; 15
    1bce:	90 70       	andi	r25, 0x00	; 0
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	89 f0       	breq	.+34     	; 0x1bf8 <update_lfo_sync+0x86>
    1bd6:	83 30       	cpi	r24, 0x03	; 3
    1bd8:	91 05       	cpc	r25, r1
    1bda:	24 f4       	brge	.+8      	; 0x1be4 <update_lfo_sync+0x72>
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	91 05       	cpc	r25, r1
    1be0:	b9 f4       	brne	.+46     	; 0x1c10 <update_lfo_sync+0x9e>
    1be2:	07 c0       	rjmp	.+14     	; 0x1bf2 <update_lfo_sync+0x80>
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	91 05       	cpc	r25, r1
    1be8:	59 f0       	breq	.+22     	; 0x1c00 <update_lfo_sync+0x8e>
    1bea:	88 30       	cpi	r24, 0x08	; 8
    1bec:	91 05       	cpc	r25, r1
    1bee:	81 f4       	brne	.+32     	; 0x1c10 <update_lfo_sync+0x9e>
    1bf0:	0b c0       	rjmp	.+22     	; 0x1c08 <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1bf2:	10 92 d0 03 	sts	0x03D0, r1
			
			break;
    1bf6:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			midi_clock.divider = 24; //1:4
    1bf8:	88 e1       	ldi	r24, 0x18	; 24
    1bfa:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1bfe:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1c00:	8c e0       	ldi	r24, 0x0C	; 12
    1c02:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1c06:	08 95       	ret
			
		case 0b1000:
			midi_clock.divider = 6; //1:16	 		
    1c08:	86 e0       	ldi	r24, 0x06	; 6
    1c0a:	80 93 d0 03 	sts	0x03D0, r24
			break;
    1c0e:	08 95       	ret
		
		default:
			midi_clock.divider = 0; //need to turn midi sync off here. How?
    1c10:	10 92 d0 03 	sts	0x03D0, r1
    1c14:	08 95       	ret

00001c16 <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1c16:	80 91 7f 03 	lds	r24, 0x037F
    1c1a:	98 2f       	mov	r25, r24
    1c1c:	92 95       	swap	r25
    1c1e:	96 95       	lsr	r25
    1c20:	96 95       	lsr	r25
    1c22:	93 70       	andi	r25, 0x03	; 3
    1c24:	90 ff       	sbrs	r25, 0
    1c26:	0f c0       	rjmp	.+30     	; 0x1c46 <update_arp_sync+0x30>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1c28:	90 e4       	ldi	r25, 0x40	; 64
    1c2a:	89 27       	eor	r24, r25
    1c2c:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1c30:	80 91 0c 03 	lds	r24, 0x030C
    1c34:	8f 5f       	subi	r24, 0xFF	; 255
    1c36:	80 93 0c 03 	sts	0x030C, r24
    1c3a:	85 30       	cpi	r24, 0x05	; 5
    1c3c:	11 f4       	brne	.+4      	; 0x1c42 <update_arp_sync+0x2c>
    1c3e:	10 92 0c 03 	sts	0x030C, r1
		system_clock.ppqn_counter = 0; //reset counter
    1c42:	10 92 cb 03 	sts	0x03CB, r1
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1c46:	60 91 00 03 	lds	r22, 0x0300
    1c4a:	63 7c       	andi	r22, 0xC3	; 195
    1c4c:	60 93 00 03 	sts	0x0300, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1c50:	20 91 0c 03 	lds	r18, 0x030C
    1c54:	22 23       	and	r18, r18
    1c56:	71 f0       	breq	.+28     	; 0x1c74 <update_arp_sync+0x5e>
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	2f 5f       	subi	r18, 0xFF	; 255
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	50 e0       	ldi	r21, 0x00	; 0
    1c62:	ca 01       	movw	r24, r20
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <update_arp_sync+0x54>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	2a 95       	dec	r18
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <update_arp_sync+0x50>
    1c6e:	86 2b       	or	r24, r22
    1c70:	80 93 00 03 	sts	0x0300, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1c74:	80 91 00 03 	lds	r24, 0x0300
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	8c 73       	andi	r24, 0x3C	; 60
    1c7c:	90 70       	andi	r25, 0x00	; 0
    1c7e:	88 30       	cpi	r24, 0x08	; 8
    1c80:	91 05       	cpc	r25, r1
    1c82:	91 f0       	breq	.+36     	; 0x1ca8 <update_arp_sync+0x92>
    1c84:	89 30       	cpi	r24, 0x09	; 9
    1c86:	91 05       	cpc	r25, r1
    1c88:	24 f4       	brge	.+8      	; 0x1c92 <update_arp_sync+0x7c>
    1c8a:	84 30       	cpi	r24, 0x04	; 4
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	c1 f4       	brne	.+48     	; 0x1cc0 <update_arp_sync+0xaa>
    1c90:	07 c0       	rjmp	.+14     	; 0x1ca0 <update_arp_sync+0x8a>
    1c92:	80 31       	cpi	r24, 0x10	; 16
    1c94:	91 05       	cpc	r25, r1
    1c96:	61 f0       	breq	.+24     	; 0x1cb0 <update_arp_sync+0x9a>
    1c98:	80 32       	cpi	r24, 0x20	; 32
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	89 f4       	brne	.+34     	; 0x1cc0 <update_arp_sync+0xaa>
    1c9e:	0c c0       	rjmp	.+24     	; 0x1cb8 <update_arp_sync+0xa2>
			
		case 0b00000100:
			system_clock.divider = 48; //1:2
    1ca0:	80 e3       	ldi	r24, 0x30	; 48
    1ca2:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1ca6:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = 24; //1:4
    1ca8:	88 e1       	ldi	r24, 0x18	; 24
    1caa:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1cae:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = 12; //1:8
    1cb0:	8c e0       	ldi	r24, 0x0C	; 12
    1cb2:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1cb6:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = 6; //1:16	
    1cb8:	86 e0       	ldi	r24, 0x06	; 6
    1cba:	80 93 ca 03 	sts	0x03CA, r24
			break;
    1cbe:	08 95       	ret
			
		default:
			system_clock.divider = 2; //should be 1 but this never turns arp_sync_led off - need to fix this	
    1cc0:	82 e0       	ldi	r24, 0x02	; 2
    1cc2:	80 93 ca 03 	sts	0x03CA, r24
    1cc6:	08 95       	ret

00001cc8 <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1cc8:	80 91 7f 03 	lds	r24, 0x037F
    1ccc:	80 31       	cpi	r24, 0x10	; 16
    1cce:	69 f4       	brne	.+26     	; 0x1cea <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1cd0:	10 92 7f 03 	sts	0x037F, r1
		
		if (++arp_range == 4) arp_range = 0;
    1cd4:	80 91 0d 03 	lds	r24, 0x030D
    1cd8:	8f 5f       	subi	r24, 0xFF	; 255
    1cda:	80 93 0d 03 	sts	0x030D, r24
    1cde:	84 30       	cpi	r24, 0x04	; 4
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <update_arp_range+0x1e>
    1ce2:	10 92 0d 03 	sts	0x030D, r1
		arp.step_position = 0; //reset step position if range changes
    1ce6:	10 92 86 03 	sts	0x0386, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1cea:	80 91 fe 02 	lds	r24, 0x02FE
    1cee:	8d 7f       	andi	r24, 0xFD	; 253
    1cf0:	80 93 fe 02 	sts	0x02FE, r24
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1cf4:	80 91 00 03 	lds	r24, 0x0300
    1cf8:	8f 73       	andi	r24, 0x3F	; 63
    1cfa:	80 93 00 03 	sts	0x0300, r24
	
	arp.range = arp_range;
    1cfe:	80 91 0d 03 	lds	r24, 0x030D
    1d02:	80 93 84 03 	sts	0x0384, r24
	
	update_arp_sequence(); //update sequence with new settings
    1d06:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1d0a:	80 91 0d 03 	lds	r24, 0x030D
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	51 f0       	breq	.+20     	; 0x1d26 <update_arp_range+0x5e>
    1d12:	83 30       	cpi	r24, 0x03	; 3
    1d14:	71 f0       	breq	.+28     	; 0x1d32 <update_arp_range+0x6a>
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	89 f4       	brne	.+34     	; 0x1d3c <update_arp_range+0x74>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1d1a:	80 91 fe 02 	lds	r24, 0x02FE
    1d1e:	82 60       	ori	r24, 0x02	; 2
    1d20:	80 93 fe 02 	sts	0x02FE, r24
			break;
    1d24:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1d26:	80 91 00 03 	lds	r24, 0x0300
    1d2a:	80 64       	ori	r24, 0x40	; 64
    1d2c:	80 93 00 03 	sts	0x0300, r24
			break;
    1d30:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1d32:	80 91 00 03 	lds	r24, 0x0300
    1d36:	80 68       	ori	r24, 0x80	; 128
    1d38:	80 93 00 03 	sts	0x0300, r24
    1d3c:	08 95       	ret

00001d3e <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1d3e:	80 91 7f 03 	lds	r24, 0x037F
    1d42:	98 2f       	mov	r25, r24
    1d44:	92 95       	swap	r25
    1d46:	96 95       	lsr	r25
    1d48:	97 70       	andi	r25, 0x07	; 7
    1d4a:	90 ff       	sbrs	r25, 0
    1d4c:	0f c0       	rjmp	.+30     	; 0x1d6c <update_arp_mode+0x2e>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1d4e:	90 e2       	ldi	r25, 0x20	; 32
    1d50:	89 27       	eor	r24, r25
    1d52:	80 93 7f 03 	sts	0x037F, r24
		if (++arp_mode == 5) arp_mode = 0;
    1d56:	80 91 0e 03 	lds	r24, 0x030E
    1d5a:	8f 5f       	subi	r24, 0xFF	; 255
    1d5c:	80 93 0e 03 	sts	0x030E, r24
    1d60:	85 30       	cpi	r24, 0x05	; 5
    1d62:	11 f4       	brne	.+4      	; 0x1d68 <update_arp_mode+0x2a>
    1d64:	10 92 0e 03 	sts	0x030E, r1
		arp.step_position = 0; //reset step position if mode changes
    1d68:	10 92 86 03 	sts	0x0386, r1
		
	}

	arp.clock_source = INTERNAL_CLOCK;	
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	80 93 88 03 	sts	0x0388, r24

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1d72:	90 91 fe 02 	lds	r25, 0x02FE
    1d76:	93 7c       	andi	r25, 0xC3	; 195
    1d78:	90 93 fe 02 	sts	0x02FE, r25
	
	switch(arp_mode) {
    1d7c:	80 91 0e 03 	lds	r24, 0x030E
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	81 f0       	breq	.+32     	; 0x1da4 <update_arp_mode+0x66>
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	28 f0       	brcs	.+10     	; 0x1d92 <update_arp_mode+0x54>
    1d88:	82 30       	cpi	r24, 0x02	; 2
    1d8a:	91 f0       	breq	.+36     	; 0x1db0 <update_arp_mode+0x72>
    1d8c:	83 30       	cpi	r24, 0x03	; 3
    1d8e:	f1 f4       	brne	.+60     	; 0x1dcc <update_arp_mode+0x8e>
    1d90:	16 c0       	rjmp	.+44     	; 0x1dbe <update_arp_mode+0x80>
		
		case 0:
		
			//turn arp off
			arp.clock_source = OFF;
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	80 93 88 03 	sts	0x0388, r24
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    1d98:	80 91 b0 02 	lds	r24, 0x02B0
    1d9c:	88 23       	and	r24, r24
    1d9e:	e1 f4       	brne	.+56     	; 0x1dd8 <update_arp_mode+0x9a>
    1da0:	89 98       	cbi	0x11, 1	; 17
    1da2:	1a c0       	rjmp	.+52     	; 0x1dd8 <update_arp_mode+0x9a>
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1da4:	94 62       	ori	r25, 0x24	; 36
    1da6:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP;
    1daa:	10 92 89 03 	sts	0x0389, r1
			break;	
    1dae:	14 c0       	rjmp	.+40     	; 0x1dd8 <update_arp_mode+0x9a>
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1db0:	94 61       	ori	r25, 0x14	; 20
    1db2:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = DOWN;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	80 93 89 03 	sts	0x0389, r24
			break;
    1dbc:	0d c0       	rjmp	.+26     	; 0x1dd8 <update_arp_mode+0x9a>
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1dbe:	94 63       	ori	r25, 0x34	; 52
    1dc0:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = UP_DOWN;
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	80 93 89 03 	sts	0x0389, r24
			break;
    1dca:	06 c0       	rjmp	.+12     	; 0x1dd8 <update_arp_mode+0x9a>
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1dcc:	9c 60       	ori	r25, 0x0C	; 12
    1dce:	90 93 fe 02 	sts	0x02FE, r25
			arp.mode = RANDOM;
    1dd2:	84 e0       	ldi	r24, 0x04	; 4
    1dd4:	80 93 89 03 	sts	0x0389, r24
			
					
		
	}
	
	update_arp_sequence(); //update arp sequence with new mode
    1dd8:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	



}
    1ddc:	08 95       	ret

00001dde <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1dde:	90 91 7e 03 	lds	r25, 0x037E
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1de2:	80 91 80 03 	lds	r24, 0x0380
    1de6:	86 95       	lsr	r24
    1de8:	86 95       	lsr	r24
    1dea:	68 2f       	mov	r22, r24
    1dec:	67 95       	ror	r22
    1dee:	66 27       	eor	r22, r22
    1df0:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1df2:	29 2f       	mov	r18, r25
    1df4:	21 70       	andi	r18, 0x01	; 1
    1df6:	26 2b       	or	r18, r22
    1df8:	69 2f       	mov	r22, r25
    1dfa:	66 1f       	adc	r22, r22
    1dfc:	66 27       	eor	r22, r22
    1dfe:	66 1f       	adc	r22, r22
    1e00:	66 0f       	add	r22, r22
    1e02:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1e04:	29 2f       	mov	r18, r25
    1e06:	26 95       	lsr	r18
    1e08:	26 95       	lsr	r18
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	21 70       	andi	r18, 0x01	; 1
    1e0e:	30 70       	andi	r19, 0x00	; 0
    1e10:	d9 01       	movw	r26, r18
    1e12:	aa 0f       	add	r26, r26
    1e14:	bb 1f       	adc	r27, r27
    1e16:	aa 0f       	add	r26, r26
    1e18:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e1a:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1e1c:	a9 2f       	mov	r26, r25
    1e1e:	a6 95       	lsr	r26
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	a1 70       	andi	r26, 0x01	; 1
    1e24:	b0 70       	andi	r27, 0x00	; 0
    1e26:	fd 01       	movw	r30, r26
    1e28:	ee 0f       	add	r30, r30
    1e2a:	ff 1f       	adc	r31, r31
    1e2c:	ee 0f       	add	r30, r30
    1e2e:	ff 1f       	adc	r31, r31
    1e30:	ee 0f       	add	r30, r30
    1e32:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e34:	a6 2f       	mov	r26, r22
    1e36:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1e38:	e9 2f       	mov	r30, r25
    1e3a:	e2 95       	swap	r30
    1e3c:	ef 70       	andi	r30, 0x0F	; 15
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	e1 70       	andi	r30, 0x01	; 1
    1e42:	f0 70       	andi	r31, 0x00	; 0
    1e44:	bf 01       	movw	r22, r30
    1e46:	62 95       	swap	r22
    1e48:	72 95       	swap	r23
    1e4a:	70 7f       	andi	r23, 0xF0	; 240
    1e4c:	76 27       	eor	r23, r22
    1e4e:	60 7f       	andi	r22, 0xF0	; 240
    1e50:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e52:	ea 2f       	mov	r30, r26
    1e54:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1e56:	69 2f       	mov	r22, r25
    1e58:	62 95       	swap	r22
    1e5a:	66 95       	lsr	r22
    1e5c:	67 70       	andi	r22, 0x07	; 7
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	61 70       	andi	r22, 0x01	; 1
    1e62:	70 70       	andi	r23, 0x00	; 0
    1e64:	ab 01       	movw	r20, r22
    1e66:	44 0f       	add	r20, r20
    1e68:	55 1f       	adc	r21, r21
    1e6a:	42 95       	swap	r20
    1e6c:	52 95       	swap	r21
    1e6e:	50 7f       	andi	r21, 0xF0	; 240
    1e70:	54 27       	eor	r21, r20
    1e72:	40 7f       	andi	r20, 0xF0	; 240
    1e74:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e76:	6e 2f       	mov	r22, r30
    1e78:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1e7a:	49 2f       	mov	r20, r25
    1e7c:	42 95       	swap	r20
    1e7e:	46 95       	lsr	r20
    1e80:	46 95       	lsr	r20
    1e82:	43 70       	andi	r20, 0x03	; 3
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	41 70       	andi	r20, 0x01	; 1
    1e88:	50 70       	andi	r21, 0x00	; 0
    1e8a:	9a 01       	movw	r18, r20
    1e8c:	00 24       	eor	r0, r0
    1e8e:	36 95       	lsr	r19
    1e90:	27 95       	ror	r18
    1e92:	07 94       	ror	r0
    1e94:	36 95       	lsr	r19
    1e96:	27 95       	ror	r18
    1e98:	07 94       	ror	r0
    1e9a:	32 2f       	mov	r19, r18
    1e9c:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1e9e:	26 2b       	or	r18, r22
    1ea0:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1ea4:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1ea6:	81 95       	neg	r24
    1ea8:	89 27       	eor	r24, r25
    1eaa:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1eac:	89 27       	eor	r24, r25
    1eae:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1eb2:	ed ed       	ldi	r30, 0xDD	; 221
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1eb8:	90 91 80 03 	lds	r25, 0x0380
    1ebc:	96 95       	lsr	r25
    1ebe:	96 95       	lsr	r25
    1ec0:	96 95       	lsr	r25
    1ec2:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1ec4:	91 95       	neg	r25
    1ec6:	80 81       	ld	r24, Z
    1ec8:	89 27       	eor	r24, r25
    1eca:	80 71       	andi	r24, 0x10	; 16
    1ecc:	82 27       	eor	r24, r18
    1ece:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1ed0:	ee ef       	ldi	r30, 0xFE	; 254
    1ed2:	f2 e0       	ldi	r31, 0x02	; 2
    1ed4:	80 81       	ld	r24, Z
    1ed6:	98 27       	eor	r25, r24
    1ed8:	91 70       	andi	r25, 0x01	; 1
    1eda:	89 27       	eor	r24, r25
    1edc:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1ede:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1ee2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1ee6:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    1eea:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <update_arp_sync>
	update_arp_range();
    1eee:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <update_arp_range>
	update_arp_mode();
    1ef2:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    1ef6:	08 95       	ret

00001ef8 <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1efc:	90 91 07 03 	lds	r25, 0x0307
    1f00:	95 30       	cpi	r25, 0x05	; 5
    1f02:	01 f5       	brne	.+64     	; 0x1f44 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1f04:	87 e0       	ldi	r24, 0x07	; 7
    1f06:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f08:	cd ed       	ldi	r28, 0xDD	; 221
    1f0a:	d0 e0       	ldi	r29, 0x00	; 0
    1f0c:	88 81       	ld	r24, Y
    1f0e:	80 62       	ori	r24, 0x20	; 32
    1f10:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f12:	88 81       	ld	r24, Y
    1f14:	8f 7d       	andi	r24, 0xDF	; 223
    1f16:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f18:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1f1a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1f1e:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1f20:	88 81       	ld	r24, Y
    1f22:	80 62       	ori	r24, 0x20	; 32
    1f24:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1f26:	88 81       	ld	r24, Y
    1f28:	8f 7d       	andi	r24, 0xDF	; 223
    1f2a:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1f2c:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1f2e:	80 91 ff 02 	lds	r24, 0x02FF
    1f32:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1f34:	80 68       	ori	r24, 0x80	; 128
    1f36:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1f3a:	0e 94 8f 01 	call	0x31e	; 0x31e <setup_system_clock>

		current_patch.mode = MEMORY;
    1f3e:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1f42:	63 c0       	rjmp	.+198    	; 0x200a <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1f44:	80 91 80 03 	lds	r24, 0x0380
    1f48:	28 2f       	mov	r18, r24
    1f4a:	22 95       	swap	r18
    1f4c:	26 95       	lsr	r18
    1f4e:	26 95       	lsr	r18
    1f50:	23 70       	andi	r18, 0x03	; 3
    1f52:	20 ff       	sbrs	r18, 0
    1f54:	15 c0       	rjmp	.+42     	; 0x1f80 <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1f56:	20 e4       	ldi	r18, 0x40	; 64
    1f58:	82 27       	eor	r24, r18
    1f5a:	80 93 80 03 	sts	0x0380, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1f5e:	80 91 03 03 	lds	r24, 0x0303
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	80 93 03 03 	sts	0x0303, r24
    1f68:	85 32       	cpi	r24, 0x25	; 37
    1f6a:	21 f4       	brne	.+8      	; 0x1f74 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1f6c:	84 e2       	ldi	r24, 0x24	; 36
    1f6e:	80 93 03 03 	sts	0x0303, r24
    1f72:	06 c0       	rjmp	.+12     	; 0x1f80 <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1f74:	93 30       	cpi	r25, 0x03	; 3
    1f76:	21 f0       	breq	.+8      	; 0x1f80 <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1f78:	0e 94 0e 0a 	call	0x141c	; 0x141c <load_patch>
			update_patch();
    1f7c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1f80:	80 91 80 03 	lds	r24, 0x0380
    1f84:	98 2f       	mov	r25, r24
    1f86:	92 95       	swap	r25
    1f88:	96 95       	lsr	r25
    1f8a:	97 70       	andi	r25, 0x07	; 7
    1f8c:	90 ff       	sbrs	r25, 0
    1f8e:	15 c0       	rjmp	.+42     	; 0x1fba <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1f90:	90 e2       	ldi	r25, 0x20	; 32
    1f92:	89 27       	eor	r24, r25
    1f94:	80 93 80 03 	sts	0x0380, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1f98:	80 91 03 03 	lds	r24, 0x0303
    1f9c:	81 30       	cpi	r24, 0x01	; 1
    1f9e:	19 f0       	breq	.+6      	; 0x1fa6 <update_patch_programmer+0xae>
    1fa0:	81 50       	subi	r24, 0x01	; 1
    1fa2:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1fa6:	80 91 07 03 	lds	r24, 0x0307
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	31 f0       	breq	.+12     	; 0x1fba <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    1fae:	80 91 03 03 	lds	r24, 0x0303
    1fb2:	0e 94 0e 0a 	call	0x141c	; 0x141c <load_patch>
			update_patch();
    1fb6:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1fba:	80 91 80 03 	lds	r24, 0x0380
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	92 95       	swap	r25
    1fc2:	9f 70       	andi	r25, 0x0F	; 15
    1fc4:	90 ff       	sbrs	r25, 0
    1fc6:	15 c0       	rjmp	.+42     	; 0x1ff2 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1fc8:	90 e1       	ldi	r25, 0x10	; 16
    1fca:	89 27       	eor	r24, r25
    1fcc:	80 93 80 03 	sts	0x0380, r24
		if (current_patch.mode != WRITE) {
    1fd0:	90 91 07 03 	lds	r25, 0x0307
    1fd4:	93 30       	cpi	r25, 0x03	; 3
    1fd6:	49 f0       	breq	.+18     	; 0x1fea <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1fd8:	8f 77       	andi	r24, 0x7F	; 127
    1fda:	80 93 80 03 	sts	0x0380, r24
			current_patch.mode = WRITE;
    1fde:	83 e0       	ldi	r24, 0x03	; 3
    1fe0:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1fe4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lock_pots>
    1fe8:	04 c0       	rjmp	.+8      	; 0x1ff2 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1fea:	80 91 03 03 	lds	r24, 0x0303
    1fee:	0e 94 1b 08 	call	0x1036	; 0x1036 <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1ff2:	80 91 80 03 	lds	r24, 0x0380
    1ff6:	88 23       	and	r24, r24
    1ff8:	44 f4       	brge	.+16     	; 0x200a <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1ffa:	80 68       	ori	r24, 0x80	; 128
    1ffc:	80 93 80 03 	sts	0x0380, r24
		current_patch.mode = MANUAL;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    2006:	0e 94 0a 08 	call	0x1014	; 0x1014 <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	08 95       	ret

00002010 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2010:	88 ed       	ldi	r24, 0xD8	; 216
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    201c:	81 ee       	ldi	r24, 0xE1	; 225
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2028:	82 ee       	ldi	r24, 0xE2	; 226
    202a:	91 e0       	ldi	r25, 0x01	; 1
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2034:	83 eb       	ldi	r24, 0xB3	; 179
    2036:	92 e0       	ldi	r25, 0x02	; 2
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2040:	8a ed       	ldi	r24, 0xDA	; 218
    2042:	91 e0       	ldi	r25, 0x01	; 1
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    204c:	8f ed       	ldi	r24, 0xDF	; 223
    204e:	91 e0       	ldi	r25, 0x01	; 1
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    2058:	80 ee       	ldi	r24, 0xE0	; 224
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2064:	81 ed       	ldi	r24, 0xD1	; 209
    2066:	91 e0       	ldi	r25, 0x01	; 1
    2068:	60 e0       	ldi	r22, 0x00	; 0
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2070:	86 ed       	ldi	r24, 0xD6	; 214
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    207c:	82 ed       	ldi	r24, 0xD2	; 210
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    2088:	83 ed       	ldi	r24, 0xD3	; 211
    208a:	91 e0       	ldi	r25, 0x01	; 1
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    2094:	84 ed       	ldi	r24, 0xD4	; 212
    2096:	91 e0       	ldi	r25, 0x01	; 1
    2098:	6f ef       	ldi	r22, 0xFF	; 255
    209a:	7f e3       	ldi	r23, 0x3F	; 63
    209c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    20a0:	85 ed       	ldi	r24, 0xD5	; 213
    20a2:	91 e0       	ldi	r25, 0x01	; 1
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    20ac:	89 ed       	ldi	r24, 0xD9	; 217
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    20b8:	8e ec       	ldi	r24, 0xCE	; 206
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    20c4:	8c ec       	ldi	r24, 0xCC	; 204
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	60 e0       	ldi	r22, 0x00	; 0
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    20d0:	8a ec       	ldi	r24, 0xCA	; 202
    20d2:	91 e0       	ldi	r25, 0x01	; 1
    20d4:	6f ef       	ldi	r22, 0xFF	; 255
    20d6:	7f e3       	ldi	r23, 0x3F	; 63
    20d8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    20dc:	88 ec       	ldi	r24, 0xC8	; 200
    20de:	91 e0       	ldi	r25, 0x01	; 1
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    20e8:	80 ed       	ldi	r24, 0xD0	; 208
    20ea:	91 e0       	ldi	r25, 0x01	; 1
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    20f4:	83 ee       	ldi	r24, 0xE3	; 227
    20f6:	91 e0       	ldi	r25, 0x01	; 1
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2100:	84 ee       	ldi	r24, 0xE4	; 228
    2102:	91 e0       	ldi	r25, 0x01	; 1
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
}	
    210c:	08 95       	ret

0000210e <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    210e:	2f 92       	push	r2
    2110:	3f 92       	push	r3
    2112:	4f 92       	push	r4
    2114:	5f 92       	push	r5
    2116:	6f 92       	push	r6
    2118:	7f 92       	push	r7
    211a:	8f 92       	push	r8
    211c:	9f 92       	push	r9
    211e:	af 92       	push	r10
    2120:	bf 92       	push	r11
    2122:	cf 92       	push	r12
    2124:	df 92       	push	r13
    2126:	ef 92       	push	r14
    2128:	ff 92       	push	r15
    212a:	0f 93       	push	r16
    212c:	1f 93       	push	r17
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	2c 97       	sbiw	r28, 0x0c	; 12
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	08 2f       	mov	r16, r24
    2144:	78 87       	std	Y+8, r23	; 0x08
    2146:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    2148:	80 91 7b 03 	lds	r24, 0x037B
    214c:	83 60       	ori	r24, 0x03	; 3
    214e:	80 93 7b 03 	sts	0x037B, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    2152:	0e 94 08 10 	call	0x2010	; 0x2010 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    2156:	10 92 7a 03 	sts	0x037A, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    215a:	0f 30       	cpi	r16, 0x0F	; 15
    215c:	e1 f4       	brne	.+56     	; 0x2196 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    215e:	0f 2e       	mov	r0, r31
    2160:	f6 ee       	ldi	r31, 0xE6	; 230
    2162:	4f 2e       	mov	r4, r31
    2164:	f1 e0       	ldi	r31, 0x01	; 1
    2166:	5f 2e       	mov	r5, r31
    2168:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    216a:	0f 2e       	mov	r0, r31
    216c:	fe ed       	ldi	r31, 0xDE	; 222
    216e:	2f 2e       	mov	r2, r31
    2170:	f1 e0       	ldi	r31, 0x01	; 1
    2172:	3f 2e       	mov	r3, r31
    2174:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    2176:	23 ee       	ldi	r18, 0xE3	; 227
    2178:	31 e0       	ldi	r19, 0x01	; 1
    217a:	3a 83       	std	Y+2, r19	; 0x02
    217c:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    217e:	0f 2e       	mov	r0, r31
    2180:	fc ed       	ldi	r31, 0xDC	; 220
    2182:	8f 2e       	mov	r8, r31
    2184:	f1 e0       	ldi	r31, 0x01	; 1
    2186:	9f 2e       	mov	r9, r31
    2188:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    218a:	82 e7       	ldi	r24, 0x72	; 114
    218c:	96 e0       	ldi	r25, 0x06	; 6
    218e:	9a 87       	std	Y+10, r25	; 0x0a
    2190:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	1b c0       	rjmp	.+54     	; 0x21cc <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2196:	0f 2e       	mov	r0, r31
    2198:	f5 ee       	ldi	r31, 0xE5	; 229
    219a:	4f 2e       	mov	r4, r31
    219c:	f1 e0       	ldi	r31, 0x01	; 1
    219e:	5f 2e       	mov	r5, r31
    21a0:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    21a2:	0f 2e       	mov	r0, r31
    21a4:	f7 ed       	ldi	r31, 0xD7	; 215
    21a6:	2f 2e       	mov	r2, r31
    21a8:	f1 e0       	ldi	r31, 0x01	; 1
    21aa:	3f 2e       	mov	r3, r31
    21ac:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    21ae:	e4 ee       	ldi	r30, 0xE4	; 228
    21b0:	f1 e0       	ldi	r31, 0x01	; 1
    21b2:	fa 83       	std	Y+2, r31	; 0x02
    21b4:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    21b6:	0f 2e       	mov	r0, r31
    21b8:	fd ed       	ldi	r31, 0xDD	; 221
    21ba:	8f 2e       	mov	r8, r31
    21bc:	f1 e0       	ldi	r31, 0x01	; 1
    21be:	9f 2e       	mov	r9, r31
    21c0:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    21c2:	20 e7       	ldi	r18, 0x70	; 112
    21c4:	36 e0       	ldi	r19, 0x06	; 6
    21c6:	3a 87       	std	Y+10, r19	; 0x0a
    21c8:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    21ca:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    21cc:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    21ce:	ed ed       	ldi	r30, 0xDD	; 221
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	80 64       	ori	r24, 0x40	; 64
    21d6:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    21d8:	80 81       	ld	r24, Z
    21da:	8f 7b       	andi	r24, 0xBF	; 191
    21dc:	80 83       	st	Z, r24
	DATA_BUS = 0;
    21de:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    21e0:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    21e2:	84 b5       	in	r24, 0x24	; 36
    21e4:	8f 60       	ori	r24, 0x0F	; 15
    21e6:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    21ec:	ee e6       	ldi	r30, 0x6E	; 110
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	90 81       	ld	r25, Z
    21f2:	92 60       	ori	r25, 0x02	; 2
    21f4:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    21f6:	80 93 7c 03 	sts	0x037C, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    21fa:	8d e0       	ldi	r24, 0x0D	; 13
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    2202:	80 2f       	mov	r24, r16
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	8c 01       	movw	r16, r24
    2208:	0f 5f       	subi	r16, 0xFF	; 255
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    220c:	0f 2e       	mov	r0, r31
    220e:	f8 ed       	ldi	r31, 0xD8	; 216
    2210:	ef 2e       	mov	r14, r31
    2212:	f1 e0       	ldi	r31, 0x01	; 1
    2214:	ff 2e       	mov	r15, r31
    2216:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    2218:	0f 2e       	mov	r0, r31
    221a:	f4 ed       	ldi	r31, 0xD4	; 212
    221c:	cf 2e       	mov	r12, r31
    221e:	f1 e0       	ldi	r31, 0x01	; 1
    2220:	df 2e       	mov	r13, r31
    2222:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    2224:	0f 2e       	mov	r0, r31
    2226:	fa ec       	ldi	r31, 0xCA	; 202
    2228:	af 2e       	mov	r10, r31
    222a:	f1 e0       	ldi	r31, 0x01	; 1
    222c:	bf 2e       	mov	r11, r31
    222e:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    2230:	0f 2e       	mov	r0, r31
    2232:	fb ec       	ldi	r31, 0xCB	; 203
    2234:	6f 2e       	mov	r6, r31
    2236:	f1 e0       	ldi	r31, 0x01	; 1
    2238:	7f 2e       	mov	r7, r31
    223a:	f0 2d       	mov	r31, r0
    223c:	e0 e0       	ldi	r30, 0x00	; 0
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	fc 87       	std	Y+12, r31	; 0x0c
    2242:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    2244:	21 e0       	ldi	r18, 0x01	; 1
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	0b 80       	ldd	r0, Y+3	; 0x03
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <set_vco_init_cv+0x142>
    224c:	22 0f       	add	r18, r18
    224e:	33 1f       	adc	r19, r19
    2250:	0a 94       	dec	r0
    2252:	e2 f7       	brpl	.-8      	; 0x224c <set_vco_init_cv+0x13e>
    2254:	3e 83       	std	Y+6, r19	; 0x06
    2256:	2d 83       	std	Y+5, r18	; 0x05
    2258:	8b 85       	ldd	r24, Y+11	; 0x0b
    225a:	9c 85       	ldd	r25, Y+12	; 0x0c
    225c:	82 2b       	or	r24, r18
    225e:	93 2b       	or	r25, r19
    2260:	9c 87       	std	Y+12, r25	; 0x0c
    2262:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    2264:	c4 01       	movw	r24, r8
    2266:	6b 85       	ldd	r22, Y+11	; 0x0b
    2268:	7c 85       	ldd	r23, Y+12	; 0x0c
    226a:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
		
		
		count_finished = FALSE;
    226e:	10 92 7a 03 	sts	0x037A, r1
		period_counter = 0;
    2272:	10 92 7d 03 	sts	0x037D, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    2276:	8f e0       	ldi	r24, 0x0F	; 15
    2278:	e8 e1       	ldi	r30, 0x18	; 24
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	a8 95       	wdr
    2282:	e0 93 60 00 	sts	0x0060, r30
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    228c:	80 91 7a 03 	lds	r24, 0x037A
    2290:	88 23       	and	r24, r24
    2292:	89 f5       	brne	.+98     	; 0x22f6 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    2294:	c8 01       	movw	r24, r16
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	0e 94 db 02 	call	0x5b6	; 0x5b6 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    229c:	c4 01       	movw	r24, r8
    229e:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a2:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    22a6:	c1 01       	movw	r24, r2
    22a8:	6f ef       	ldi	r22, 0xFF	; 255
    22aa:	7f e3       	ldi	r23, 0x3F	; 63
    22ac:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    22b0:	c7 01       	movw	r24, r14
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    22ba:	c6 01       	movw	r24, r12
    22bc:	6f ef       	ldi	r22, 0xFF	; 255
    22be:	7f e3       	ldi	r23, 0x3F	; 63
    22c0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    22c4:	c5 01       	movw	r24, r10
    22c6:	6f ef       	ldi	r22, 0xFF	; 255
    22c8:	7f e3       	ldi	r23, 0x3F	; 63
    22ca:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    22ce:	c3 01       	movw	r24, r6
    22d0:	6f ef       	ldi	r22, 0xFF	; 255
    22d2:	7f e3       	ldi	r23, 0x3F	; 63
    22d4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	6f ef       	ldi	r22, 0xFF	; 255
    22de:	7f e3       	ldi	r23, 0x3F	; 63
    22e0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    22e4:	c2 01       	movw	r24, r4
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    22ee:	80 91 7a 03 	lds	r24, 0x037A
    22f2:	88 23       	and	r24, r24
    22f4:	79 f2       	breq	.-98     	; 0x2294 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    22f6:	88 e1       	ldi	r24, 0x18	; 24
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	80 93 60 00 	sts	0x0060, r24
    2300:	10 92 60 00 	sts	0x0060, r1
    2304:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    2306:	80 91 78 03 	lds	r24, 0x0378
    230a:	90 91 79 03 	lds	r25, 0x0379
    230e:	ef 81       	ldd	r30, Y+7	; 0x07
    2310:	f8 85       	ldd	r31, Y+8	; 0x08
    2312:	e8 17       	cp	r30, r24
    2314:	f9 07       	cpc	r31, r25
    2316:	20 f0       	brcs	.+8      	; 0x2320 <set_vco_init_cv+0x212>
    2318:	80 91 af 02 	lds	r24, 0x02AF
    231c:	88 23       	and	r24, r24
    231e:	51 f4       	brne	.+20     	; 0x2334 <set_vco_init_cv+0x226>
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	80 95       	com	r24
    2326:	90 95       	com	r25
    2328:	2b 85       	ldd	r18, Y+11	; 0x0b
    232a:	3c 85       	ldd	r19, Y+12	; 0x0c
    232c:	28 23       	and	r18, r24
    232e:	39 23       	and	r19, r25
    2330:	3c 87       	std	Y+12, r19	; 0x0c
    2332:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	9c 83       	std	Y+4, r25	; 0x04
    2342:	8b 83       	std	Y+3, r24	; 0x03
    2344:	ef ef       	ldi	r30, 0xFF	; 255
    2346:	8f 3f       	cpi	r24, 0xFF	; 255
    2348:	9e 07       	cpc	r25, r30
    234a:	09 f0       	breq	.+2      	; 0x234e <set_vco_init_cv+0x240>
    234c:	7b cf       	rjmp	.-266    	; 0x2244 <set_vco_init_cv+0x136>
    234e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2350:	3c 85       	ldd	r19, Y+12	; 0x0c
    2352:	3e 83       	std	Y+6, r19	; 0x06
    2354:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    2356:	88 ec       	ldi	r24, 0xC8	; 200
    2358:	91 e0       	ldi	r25, 0x01	; 1
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    2362:	89 ec       	ldi	r24, 0xC9	; 201
    2364:	91 e0       	ldi	r25, 0x01	; 1
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    236e:	84 ed       	ldi	r24, 0xD4	; 212
    2370:	91 e0       	ldi	r25, 0x01	; 1
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	70 e0       	ldi	r23, 0x00	; 0
    2376:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    237a:	88 ed       	ldi	r24, 0xD8	; 216
    237c:	91 e0       	ldi	r25, 0x01	; 1
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	70 e0       	ldi	r23, 0x00	; 0
    2382:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    2386:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    2388:	ee e6       	ldi	r30, 0x6E	; 110
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	8d 7f       	andi	r24, 0xFD	; 253
    2390:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2392:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    2394:	89 85       	ldd	r24, Y+9	; 0x09
    2396:	9a 85       	ldd	r25, Y+10	; 0x0a
    2398:	6d 81       	ldd	r22, Y+5	; 0x05
    239a:	7e 81       	ldd	r23, Y+6	; 0x06
    239c:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    23a0:	8d 81       	ldd	r24, Y+5	; 0x05
    23a2:	9e 81       	ldd	r25, Y+6	; 0x06
    23a4:	2c 96       	adiw	r28, 0x0c	; 12
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	ff 90       	pop	r15
    23ba:	ef 90       	pop	r14
    23bc:	df 90       	pop	r13
    23be:	cf 90       	pop	r12
    23c0:	bf 90       	pop	r11
    23c2:	af 90       	pop	r10
    23c4:	9f 90       	pop	r9
    23c6:	8f 90       	pop	r8
    23c8:	7f 90       	pop	r7
    23ca:	6f 90       	pop	r6
    23cc:	5f 90       	pop	r5
    23ce:	4f 90       	pop	r4
    23d0:	3f 90       	pop	r3
    23d2:	2f 90       	pop	r2
    23d4:	08 95       	ret

000023d6 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    23d6:	2f 92       	push	r2
    23d8:	3f 92       	push	r3
    23da:	4f 92       	push	r4
    23dc:	5f 92       	push	r5
    23de:	6f 92       	push	r6
    23e0:	7f 92       	push	r7
    23e2:	8f 92       	push	r8
    23e4:	9f 92       	push	r9
    23e6:	af 92       	push	r10
    23e8:	bf 92       	push	r11
    23ea:	cf 92       	push	r12
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	c0 54       	subi	r28, 0x40	; 64
    2400:	d0 40       	sbci	r29, 0x00	; 0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    240e:	de 01       	movw	r26, r28
    2410:	11 96       	adiw	r26, 0x01	; 1
    2412:	e0 e3       	ldi	r30, 0x30	; 48
    2414:	f2 e0       	ldi	r31, 0x02	; 2
    2416:	80 e3       	ldi	r24, 0x30	; 48
    2418:	01 90       	ld	r0, Z+
    241a:	0d 92       	st	X+, r0
    241c:	81 50       	subi	r24, 0x01	; 1
    241e:	e1 f7       	brne	.-8      	; 0x2418 <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    2420:	0e 94 08 10 	call	0x2010	; 0x2010 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    2424:	0f 30       	cpi	r16, 0x0F	; 15
    2426:	11 f5       	brne	.+68     	; 0x246c <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    2428:	40 90 75 03 	lds	r4, 0x0375
    242c:	50 90 76 03 	lds	r5, 0x0376
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    2430:	0f 2e       	mov	r0, r31
    2432:	f6 ee       	ldi	r31, 0xE6	; 230
    2434:	8f 2e       	mov	r8, r31
    2436:	f1 e0       	ldi	r31, 0x01	; 1
    2438:	9f 2e       	mov	r9, r31
    243a:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    243c:	0f 2e       	mov	r0, r31
    243e:	fe ed       	ldi	r31, 0xDE	; 222
    2440:	2f 2e       	mov	r2, r31
    2442:	f1 e0       	ldi	r31, 0x01	; 1
    2444:	3f 2e       	mov	r3, r31
    2446:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    2448:	23 ee       	ldi	r18, 0xE3	; 227
    244a:	31 e0       	ldi	r19, 0x01	; 1
    244c:	3a ab       	sts	0x5a, r19
    244e:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2450:	0f 2e       	mov	r0, r31
    2452:	fc ed       	ldi	r31, 0xDC	; 220
    2454:	6f 2e       	mov	r6, r31
    2456:	f1 e0       	ldi	r31, 0x01	; 1
    2458:	7f 2e       	mov	r7, r31
    245a:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    245c:	01 e5       	ldi	r16, 0x51	; 81
    245e:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2460:	cc 24       	eor	r12, r12
    2462:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    2464:	ee 24       	eor	r14, r14
    2466:	68 94       	set
    2468:	e1 f8       	bld	r14, 1
    246a:	22 c0       	rjmp	.+68     	; 0x24b0 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    246c:	40 90 73 03 	lds	r4, 0x0373
    2470:	50 90 74 03 	lds	r5, 0x0374
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2474:	0f 2e       	mov	r0, r31
    2476:	f5 ee       	ldi	r31, 0xE5	; 229
    2478:	8f 2e       	mov	r8, r31
    247a:	f1 e0       	ldi	r31, 0x01	; 1
    247c:	9f 2e       	mov	r9, r31
    247e:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2480:	0f 2e       	mov	r0, r31
    2482:	f7 ed       	ldi	r31, 0xD7	; 215
    2484:	2f 2e       	mov	r2, r31
    2486:	f1 e0       	ldi	r31, 0x01	; 1
    2488:	3f 2e       	mov	r3, r31
    248a:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    248c:	44 ee       	ldi	r20, 0xE4	; 228
    248e:	51 e0       	ldi	r21, 0x01	; 1
    2490:	5a ab       	sts	0x5a, r21
    2492:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2494:	0f 2e       	mov	r0, r31
    2496:	fd ed       	ldi	r31, 0xDD	; 221
    2498:	6f 2e       	mov	r6, r31
    249a:	f1 e0       	ldi	r31, 0x01	; 1
    249c:	7f 2e       	mov	r7, r31
    249e:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    24a0:	0f e2       	ldi	r16, 0x2F	; 47
    24a2:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    24a4:	cc 24       	eor	r12, r12
    24a6:	68 94       	set
    24a8:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    24aa:	ee 24       	eor	r14, r14
    24ac:	68 94       	set
    24ae:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    24b0:	c3 01       	movw	r24, r6
    24b2:	b2 01       	movw	r22, r4
    24b4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    24b8:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    24ba:	ed ed       	ldi	r30, 0xDD	; 221
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	80 64       	ori	r24, 0x40	; 64
    24c2:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    24c4:	80 81       	ld	r24, Z
    24c6:	8f 7b       	andi	r24, 0xBF	; 191
    24c8:	80 83       	st	Z, r24
		DATA_BUS = 0;
    24ca:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    24cc:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	80 93 7c 03 	sts	0x037C, r24
		
		compare_match_counter = 0;	
    24d4:	10 92 77 03 	sts	0x0377, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    24d8:	8c 2d       	mov	r24, r12
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	24 e6       	ldi	r18, 0x64	; 100
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	82 9f       	mul	r24, r18
    24e2:	d0 01       	movw	r26, r0
    24e4:	83 9f       	mul	r24, r19
    24e6:	b0 0d       	add	r27, r0
    24e8:	92 9f       	mul	r25, r18
    24ea:	b0 0d       	add	r27, r0
    24ec:	11 24       	eor	r1, r1
    24ee:	bc ab       	sts	0x5c, r27
    24f0:	ab ab       	sts	0x5b, r26
    24f2:	fe 01       	movw	r30, r28
    24f4:	31 96       	adiw	r30, 0x01	; 1
    24f6:	fc af       	sts	0x7c, r31
    24f8:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    24fa:	98 01       	movw	r18, r16
    24fc:	2e 5f       	subi	r18, 0xFE	; 254
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	21 96       	adiw	r28, 0x01	; 1
    2502:	3f af       	sts	0x7f, r19
    2504:	2e af       	sts	0x7e, r18
    2506:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2508:	1e ae       	sts	0xbe, r17
    250a:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    250c:	0f 2e       	mov	r0, r31
    250e:	f8 ed       	ldi	r31, 0xD8	; 216
    2510:	ef 2e       	mov	r14, r31
    2512:	f1 e0       	ldi	r31, 0x01	; 1
    2514:	ff 2e       	mov	r15, r31
    2516:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    2518:	0f 2e       	mov	r0, r31
    251a:	f4 ed       	ldi	r31, 0xD4	; 212
    251c:	cf 2e       	mov	r12, r31
    251e:	f1 e0       	ldi	r31, 0x01	; 1
    2520:	df 2e       	mov	r13, r31
    2522:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2524:	0f 2e       	mov	r0, r31
    2526:	fa ec       	ldi	r31, 0xCA	; 202
    2528:	af 2e       	mov	r10, r31
    252a:	f1 e0       	ldi	r31, 0x01	; 1
    252c:	bf 2e       	mov	r11, r31
    252e:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    2530:	eb ad       	sts	0x6b, r30
    2532:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    2534:	80 81       	ld	r24, Z
    2536:	80 93 7c 03 	sts	0x037C, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    253a:	84 b5       	in	r24, 0x24	; 36
    253c:	8f 60       	ori	r24, 0x0F	; 15
    253e:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    2544:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    2546:	4d ad       	sts	0x6d, r20
    2548:	5e ad       	sts	0x6e, r21
    254a:	43 30       	cpi	r20, 0x03	; 3
    254c:	51 05       	cpc	r21, r1
    254e:	24 f4       	brge	.+8      	; 0x2558 <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	80 93 7b 03 	sts	0x037B, r24
    2556:	03 c0       	rjmp	.+6      	; 0x255e <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    2558:	82 e0       	ldi	r24, 0x02	; 2
    255a:	80 93 7b 03 	sts	0x037B, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    255e:	81 81       	ldd	r24, Z+1	; 0x01
    2560:	92 81       	ldd	r25, Z+2	; 0x02
    2562:	9a af       	sts	0x7a, r25
    2564:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2566:	ad e0       	ldi	r26, 0x0D	; 13
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	be ab       	sts	0x5e, r27
    256c:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    256e:	00 e0       	ldi	r16, 0x00	; 0
    2570:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2572:	e1 e0       	ldi	r30, 0x01	; 1
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	0d a8       	sts	0x8d, r16
    2578:	02 c0       	rjmp	.+4      	; 0x257e <tune_8ths+0x1a8>
    257a:	ee 0f       	add	r30, r30
    257c:	ff 1f       	adc	r31, r31
    257e:	0a 94       	dec	r0
    2580:	e2 f7       	brpl	.-8      	; 0x257a <tune_8ths+0x1a4>
    2582:	f8 af       	sts	0x78, r31
    2584:	ef ab       	sts	0x5f, r30
    2586:	0e 2b       	or	r16, r30
    2588:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    258a:	ae e6       	ldi	r26, 0x6E	; 110
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	8c 91       	ld	r24, X
    2590:	8d 7f       	andi	r24, 0xFD	; 253
    2592:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2594:	c4 01       	movw	r24, r8
    2596:	b8 01       	movw	r22, r16
    2598:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    259c:	e3 ef       	ldi	r30, 0xF3	; 243
    259e:	f1 e0       	ldi	r31, 0x01	; 1
    25a0:	31 97       	sbiw	r30, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <tune_8ths+0x1ca>
    25a4:	00 c0       	rjmp	.+0      	; 0x25a6 <tune_8ths+0x1d0>
    25a6:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    25a8:	ae e6       	ldi	r26, 0x6E	; 110
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	8c 91       	ld	r24, X
    25ae:	82 60       	ori	r24, 0x02	; 2
    25b0:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    25b2:	10 92 7a 03 	sts	0x037A, r1
				period_counter = 0;
    25b6:	10 92 7d 03 	sts	0x037D, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    25ba:	e8 e1       	ldi	r30, 0x18	; 24
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	2f e0       	ldi	r18, 0x0F	; 15
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	a8 95       	wdr
    25c6:	e0 93 60 00 	sts	0x0060, r30
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    25d0:	80 91 7a 03 	lds	r24, 0x037A
    25d4:	88 23       	and	r24, r24
    25d6:	81 f5       	brne	.+96     	; 0x2638 <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    25d8:	80 91 7c 03 	lds	r24, 0x037C
    25dc:	4b a9       	sts	0x4b, r20
    25de:	5c a9       	sts	0x4c, r21
    25e0:	48 0f       	add	r20, r24
    25e2:	51 1d       	adc	r21, r1
    25e4:	ca 01       	movw	r24, r20
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    25ec:	c3 01       	movw	r24, r6
    25ee:	b2 01       	movw	r22, r4
    25f0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    25f4:	c4 01       	movw	r24, r8
    25f6:	b8 01       	movw	r22, r16
    25f8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    25fc:	c7 01       	movw	r24, r14
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	70 e0       	ldi	r23, 0x00	; 0
    2602:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    2606:	c6 01       	movw	r24, r12
    2608:	6f ef       	ldi	r22, 0xFF	; 255
    260a:	7f e3       	ldi	r23, 0x3F	; 63
    260c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2610:	c5 01       	movw	r24, r10
    2612:	6f ef       	ldi	r22, 0xFF	; 255
    2614:	7f e3       	ldi	r23, 0x3F	; 63
    2616:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    261a:	c1 01       	movw	r24, r2
    261c:	60 e0       	ldi	r22, 0x00	; 0
    261e:	70 e2       	ldi	r23, 0x20	; 32
    2620:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    2624:	89 a9       	sts	0x49, r24
    2626:	9a a9       	sts	0x4a, r25
    2628:	6f ef       	ldi	r22, 0xFF	; 255
    262a:	7f e3       	ldi	r23, 0x3F	; 63
    262c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    2630:	80 91 7a 03 	lds	r24, 0x037A
    2634:	88 23       	and	r24, r24
    2636:	81 f2       	breq	.-96     	; 0x25d8 <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    2638:	58 e1       	ldi	r21, 0x18	; 24
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	50 93 60 00 	sts	0x0060, r21
    2642:	10 92 60 00 	sts	0x0060, r1
    2646:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    2648:	80 91 78 03 	lds	r24, 0x0378
    264c:	90 91 79 03 	lds	r25, 0x0379
    2650:	a9 ad       	sts	0x69, r26
    2652:	ba ad       	sts	0x6a, r27
    2654:	a8 17       	cp	r26, r24
    2656:	b9 07       	cpc	r27, r25
    2658:	50 f0       	brcs	.+20     	; 0x266e <tune_8ths+0x298>
    265a:	80 91 af 02 	lds	r24, 0x02AF
    265e:	81 30       	cpi	r24, 0x01	; 1
    2660:	31 f4       	brne	.+12     	; 0x266e <tune_8ths+0x298>
    2662:	8f a9       	sts	0x4f, r24
    2664:	98 ad       	sts	0x68, r25
    2666:	80 95       	com	r24
    2668:	90 95       	com	r25
    266a:	08 23       	and	r16, r24
    266c:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    266e:	80 91 78 03 	lds	r24, 0x0378
    2672:	90 91 79 03 	lds	r25, 0x0379
    2676:	e9 ad       	sts	0x69, r30
    2678:	fa ad       	sts	0x6a, r31
    267a:	8e 17       	cp	r24, r30
    267c:	9f 07       	cpc	r25, r31
    267e:	21 f4       	brne	.+8      	; 0x2688 <tune_8ths+0x2b2>
    2680:	80 91 af 02 	lds	r24, 0x02AF
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	71 f0       	breq	.+28     	; 0x26a4 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    2688:	f1 e0       	ldi	r31, 0x01	; 1
    268a:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    268e:	2d a9       	sts	0x4d, r18
    2690:	3e a9       	sts	0x4e, r19
    2692:	21 50       	subi	r18, 0x01	; 1
    2694:	30 40       	sbci	r19, 0x00	; 0
    2696:	3e ab       	sts	0x5e, r19
    2698:	2d ab       	sts	0x5d, r18
    269a:	4f ef       	ldi	r20, 0xFF	; 255
    269c:	2f 3f       	cpi	r18, 0xFF	; 255
    269e:	34 07       	cpc	r19, r20
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <tune_8ths+0x2ce>
    26a2:	67 cf       	rjmp	.-306    	; 0x2572 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    26a4:	21 96       	adiw	r28, 0x01	; 1
    26a6:	ae ad       	sts	0x6e, r26
    26a8:	bf ad       	sts	0x6f, r27
    26aa:	21 97       	sbiw	r28, 0x01	; 1
    26ac:	0d 93       	st	X+, r16
    26ae:	1d 93       	st	X+, r17
    26b0:	21 96       	adiw	r28, 0x01	; 1
    26b2:	bf af       	sts	0x7f, r27
    26b4:	ae af       	sts	0x7e, r26
    26b6:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    26b8:	ee e6       	ldi	r30, 0x6E	; 110
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	8d 7f       	andi	r24, 0xFD	; 253
    26c0:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    26c2:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    26c4:	2d ad       	sts	0x6d, r18
    26c6:	3e ad       	sts	0x6e, r19
    26c8:	2f 5f       	subi	r18, 0xFF	; 255
    26ca:	3f 4f       	sbci	r19, 0xFF	; 255
    26cc:	3e af       	sts	0x7e, r19
    26ce:	2d af       	sts	0x7d, r18
    26d0:	4b ad       	sts	0x6b, r20
    26d2:	5c ad       	sts	0x6c, r21
    26d4:	4d 5f       	subi	r20, 0xFD	; 253
    26d6:	5f 4f       	sbci	r21, 0xFF	; 255
    26d8:	5c af       	sts	0x7c, r21
    26da:	4b af       	sts	0x7b, r20
    26dc:	20 31       	cpi	r18, 0x10	; 16
    26de:	31 05       	cpc	r19, r1
    26e0:	09 f0       	breq	.+2      	; 0x26e4 <tune_8ths+0x30e>
    26e2:	26 cf       	rjmp	.-436    	; 0x2530 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    26e4:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    26e6:	c0 5c       	subi	r28, 0xC0	; 192
    26e8:	df 4f       	sbci	r29, 0xFF	; 255
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	df 90       	pop	r13
    2702:	cf 90       	pop	r12
    2704:	bf 90       	pop	r11
    2706:	af 90       	pop	r10
    2708:	9f 90       	pop	r9
    270a:	8f 90       	pop	r8
    270c:	7f 90       	pop	r7
    270e:	6f 90       	pop	r6
    2710:	5f 90       	pop	r5
    2712:	4f 90       	pop	r4
    2714:	3f 90       	pop	r3
    2716:	2f 90       	pop	r2
    2718:	08 95       	ret

0000271a <tune_filter>:
	
void tune_filter(void) {
    271a:	2f 92       	push	r2
    271c:	3f 92       	push	r3
    271e:	4f 92       	push	r4
    2720:	5f 92       	push	r5
    2722:	6f 92       	push	r6
    2724:	7f 92       	push	r7
    2726:	8f 92       	push	r8
    2728:	9f 92       	push	r9
    272a:	af 92       	push	r10
    272c:	bf 92       	push	r11
    272e:	cf 92       	push	r12
    2730:	df 92       	push	r13
    2732:	ef 92       	push	r14
    2734:	ff 92       	push	r15
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	e9 97       	sbiw	r28, 0x39	; 57
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    274e:	de 01       	movw	r26, r28
    2750:	11 96       	adiw	r26, 0x01	; 1
    2752:	e0 e6       	ldi	r30, 0x60	; 96
    2754:	f2 e0       	ldi	r31, 0x02	; 2
    2756:	8d e2       	ldi	r24, 0x2D	; 45
    2758:	01 90       	ld	r0, Z+
    275a:	0d 92       	st	X+, r0
    275c:	81 50       	subi	r24, 0x01	; 1
    275e:	e1 f7       	brne	.-8      	; 0x2758 <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2760:	88 ed       	ldi	r24, 0xD8	; 216
    2762:	91 e0       	ldi	r25, 0x01	; 1
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    276c:	81 ee       	ldi	r24, 0xE1	; 225
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    2778:	82 ee       	ldi	r24, 0xE2	; 226
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	60 e0       	ldi	r22, 0x00	; 0
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2784:	83 eb       	ldi	r24, 0xB3	; 179
    2786:	92 e0       	ldi	r25, 0x02	; 2
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	70 e0       	ldi	r23, 0x00	; 0
    278c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2790:	8a ed       	ldi	r24, 0xDA	; 218
    2792:	91 e0       	ldi	r25, 0x01	; 1
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    279c:	8f ed       	ldi	r24, 0xDF	; 223
    279e:	91 e0       	ldi	r25, 0x01	; 1
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    27a8:	80 ee       	ldi	r24, 0xE0	; 224
    27aa:	91 e0       	ldi	r25, 0x01	; 1
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	70 e0       	ldi	r23, 0x00	; 0
    27b0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    27b4:	81 ed       	ldi	r24, 0xD1	; 209
    27b6:	91 e0       	ldi	r25, 0x01	; 1
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	70 e0       	ldi	r23, 0x00	; 0
    27bc:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    27c0:	86 ed       	ldi	r24, 0xD6	; 214
    27c2:	91 e0       	ldi	r25, 0x01	; 1
    27c4:	60 e0       	ldi	r22, 0x00	; 0
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    27cc:	82 ed       	ldi	r24, 0xD2	; 210
    27ce:	91 e0       	ldi	r25, 0x01	; 1
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    27d8:	83 ed       	ldi	r24, 0xD3	; 211
    27da:	91 e0       	ldi	r25, 0x01	; 1
    27dc:	60 e0       	ldi	r22, 0x00	; 0
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    27e4:	84 ed       	ldi	r24, 0xD4	; 212
    27e6:	91 e0       	ldi	r25, 0x01	; 1
    27e8:	6f ef       	ldi	r22, 0xFF	; 255
    27ea:	7f e3       	ldi	r23, 0x3F	; 63
    27ec:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    27f0:	85 ed       	ldi	r24, 0xD5	; 213
    27f2:	91 e0       	ldi	r25, 0x01	; 1
    27f4:	6f ef       	ldi	r22, 0xFF	; 255
    27f6:	7f e3       	ldi	r23, 0x3F	; 63
    27f8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    27fc:	89 ed       	ldi	r24, 0xD9	; 217
    27fe:	91 e0       	ldi	r25, 0x01	; 1
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    2808:	8e ec       	ldi	r24, 0xCE	; 206
    280a:	91 e0       	ldi	r25, 0x01	; 1
    280c:	60 e0       	ldi	r22, 0x00	; 0
    280e:	70 e0       	ldi	r23, 0x00	; 0
    2810:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2814:	8c ec       	ldi	r24, 0xCC	; 204
    2816:	91 e0       	ldi	r25, 0x01	; 1
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	70 e0       	ldi	r23, 0x00	; 0
    281c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2820:	8a ec       	ldi	r24, 0xCA	; 202
    2822:	91 e0       	ldi	r25, 0x01	; 1
    2824:	6f ef       	ldi	r22, 0xFF	; 255
    2826:	7f e3       	ldi	r23, 0x3F	; 63
    2828:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    282c:	88 ec       	ldi	r24, 0xC8	; 200
    282e:	91 e0       	ldi	r25, 0x01	; 1
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    2838:	80 ed       	ldi	r24, 0xD0	; 208
    283a:	91 e0       	ldi	r25, 0x01	; 1
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2844:	83 ee       	ldi	r24, 0xE3	; 227
    2846:	91 e0       	ldi	r25, 0x01	; 1
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2850:	84 ee       	ldi	r24, 0xE4	; 228
    2852:	91 e0       	ldi	r25, 0x01	; 1
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    285c:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    285e:	ed ed       	ldi	r30, 0xDD	; 221
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	80 64       	ori	r24, 0x40	; 64
    2866:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2868:	80 81       	ld	r24, Z
    286a:	8f 7b       	andi	r24, 0xBF	; 191
    286c:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	80 93 7c 03 	sts	0x037C, r24
	PORTF |= (1<<GATE); //turn gate on
    2874:	89 9a       	sbi	0x11, 1	; 17
    2876:	9e 01       	movw	r18, r28
    2878:	2f 5f       	subi	r18, 0xFF	; 255
    287a:	3f 4f       	sbci	r19, 0xFF	; 255
    287c:	3d ab       	sts	0x5d, r19
    287e:	2c ab       	sts	0x5c, r18
    2880:	81 e1       	ldi	r24, 0x11	; 17
    2882:	93 e0       	ldi	r25, 0x03	; 3
    2884:	99 af       	sts	0x79, r25
    2886:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2888:	1f aa       	sts	0x9f, r17
    288a:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    288c:	0f 2e       	mov	r0, r31
    288e:	f4 ed       	ldi	r31, 0xD4	; 212
    2890:	af 2e       	mov	r10, r31
    2892:	f1 e0       	ldi	r31, 0x01	; 1
    2894:	bf 2e       	mov	r11, r31
    2896:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2898:	0f 2e       	mov	r0, r31
    289a:	f8 ed       	ldi	r31, 0xD8	; 216
    289c:	6f 2e       	mov	r6, r31
    289e:	f1 e0       	ldi	r31, 0x01	; 1
    28a0:	7f 2e       	mov	r7, r31
    28a2:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    28a4:	0f 2e       	mov	r0, r31
    28a6:	f5 ed       	ldi	r31, 0xD5	; 213
    28a8:	4f 2e       	mov	r4, r31
    28aa:	f1 e0       	ldi	r31, 0x01	; 1
    28ac:	5f 2e       	mov	r5, r31
    28ae:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    28b0:	0f 2e       	mov	r0, r31
    28b2:	fa ec       	ldi	r31, 0xCA	; 202
    28b4:	2f 2e       	mov	r2, r31
    28b6:	f1 e0       	ldi	r31, 0x01	; 1
    28b8:	3f 2e       	mov	r3, r31
    28ba:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    28bc:	ac a9       	sts	0x4c, r26
    28be:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    28c0:	8c 91       	ld	r24, X
    28c2:	80 93 7c 03 	sts	0x037C, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    28c6:	84 b5       	in	r24, 0x24	; 36
    28c8:	8f 60       	ori	r24, 0x0F	; 15
    28ca:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    28d0:	ee e6       	ldi	r30, 0x6E	; 110
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	82 60       	ori	r24, 0x02	; 2
    28d8:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    28da:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    28dc:	ee a9       	sts	0x4e, r30
    28de:	ff a9       	sts	0x4f, r31
    28e0:	e2 30       	cpi	r30, 0x02	; 2
    28e2:	f1 05       	cpc	r31, r1
    28e4:	24 f4       	brge	.+8      	; 0x28ee <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    28e6:	83 e0       	ldi	r24, 0x03	; 3
    28e8:	80 93 7b 03 	sts	0x037B, r24
    28ec:	03 c0       	rjmp	.+6      	; 0x28f4 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    28ee:	82 e0       	ldi	r24, 0x02	; 2
    28f0:	80 93 7b 03 	sts	0x037B, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    28f4:	11 96       	adiw	r26, 0x01	; 1
    28f6:	2d 91       	ld	r18, X+
    28f8:	3c 91       	ld	r19, X
    28fa:	12 97       	sbiw	r26, 0x02	; 2
    28fc:	3b ab       	sts	0x5b, r19
    28fe:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2900:	8d e0       	ldi	r24, 0x0D	; 13
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	9f a7       	lds	r25, 0x7f
    2906:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2908:	ee 24       	eor	r14, r14
    290a:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    290c:	0f 2e       	mov	r0, r31
    290e:	f1 ed       	ldi	r31, 0xD1	; 209
    2910:	cf 2e       	mov	r12, r31
    2912:	f1 e0       	ldi	r31, 0x01	; 1
    2914:	df 2e       	mov	r13, r31
    2916:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2918:	0f 2e       	mov	r0, r31
    291a:	f6 ed       	ldi	r31, 0xD6	; 214
    291c:	8f 2e       	mov	r8, r31
    291e:	f1 e0       	ldi	r31, 0x01	; 1
    2920:	9f 2e       	mov	r9, r31
    2922:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	fc 01       	movw	r30, r24
    292a:	0e a4       	lds	r16, 0xae
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <tune_filter+0x218>
    292e:	ee 0f       	add	r30, r30
    2930:	ff 1f       	adc	r31, r31
    2932:	0a 94       	dec	r0
    2934:	e2 f7       	brpl	.-8      	; 0x292e <tune_filter+0x214>
    2936:	f9 ab       	sts	0x59, r31
    2938:	e8 ab       	sts	0x58, r30
    293a:	ee 2a       	or	r14, r30
    293c:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    293e:	c5 01       	movw	r24, r10
    2940:	b7 01       	movw	r22, r14
    2942:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			count_finished = FALSE;
    2946:	10 92 7a 03 	sts	0x037A, r1
			period_counter = 0;
    294a:	10 92 7d 03 	sts	0x037D, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    294e:	8f e0       	ldi	r24, 0x0F	; 15
    2950:	28 e1       	ldi	r18, 0x18	; 24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	a8 95       	wdr
    295a:	20 93 60 00 	sts	0x0060, r18
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2964:	80 91 7a 03 	lds	r24, 0x037A
    2968:	88 23       	and	r24, r24
    296a:	b1 f5       	brne	.+108    	; 0x29d8 <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    296c:	02 ed       	ldi	r16, 0xD2	; 210
    296e:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2970:	80 91 7c 03 	lds	r24, 0x037C
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	84 5d       	subi	r24, 0xD4	; 212
    2978:	9e 4f       	sbci	r25, 0xFE	; 254
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2980:	c5 01       	movw	r24, r10
    2982:	b7 01       	movw	r22, r14
    2984:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2988:	c3 01       	movw	r24, r6
    298a:	60 e0       	ldi	r22, 0x00	; 0
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2992:	c2 01       	movw	r24, r4
    2994:	6f ef       	ldi	r22, 0xFF	; 255
    2996:	7f e3       	ldi	r23, 0x3F	; 63
    2998:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    299c:	c1 01       	movw	r24, r2
    299e:	6f ef       	ldi	r22, 0xFF	; 255
    29a0:	7f e3       	ldi	r23, 0x3F	; 63
    29a2:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    29a6:	8e ec       	ldi	r24, 0xCE	; 206
    29a8:	91 e0       	ldi	r25, 0x01	; 1
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    29b2:	c6 01       	movw	r24, r12
    29b4:	60 e0       	ldi	r22, 0x00	; 0
    29b6:	70 e0       	ldi	r23, 0x00	; 0
    29b8:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    29bc:	c4 01       	movw	r24, r8
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    29c6:	c8 01       	movw	r24, r16
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	70 e0       	ldi	r23, 0x00	; 0
    29cc:	0e 94 a7 01 	call	0x34e	; 0x34e <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    29d0:	80 91 7a 03 	lds	r24, 0x037A
    29d4:	88 23       	and	r24, r24
    29d6:	61 f2       	breq	.-104    	; 0x2970 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    29d8:	88 e1       	ldi	r24, 0x18	; 24
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	80 93 60 00 	sts	0x0060, r24
    29e2:	10 92 60 00 	sts	0x0060, r1
    29e6:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    29e8:	80 91 78 03 	lds	r24, 0x0378
    29ec:	90 91 79 03 	lds	r25, 0x0379
    29f0:	2a a9       	sts	0x4a, r18
    29f2:	3b a9       	sts	0x4b, r19
    29f4:	28 17       	cp	r18, r24
    29f6:	39 07       	cpc	r19, r25
    29f8:	50 f0       	brcs	.+20     	; 0x2a0e <tune_filter+0x2f4>
    29fa:	80 91 af 02 	lds	r24, 0x02AF
    29fe:	81 30       	cpi	r24, 0x01	; 1
    2a00:	31 f4       	brne	.+12     	; 0x2a0e <tune_filter+0x2f4>
    2a02:	88 a9       	sts	0x48, r24
    2a04:	99 a9       	sts	0x49, r25
    2a06:	80 95       	com	r24
    2a08:	90 95       	com	r25
    2a0a:	e8 22       	and	r14, r24
    2a0c:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2a0e:	80 91 78 03 	lds	r24, 0x0378
    2a12:	90 91 79 03 	lds	r25, 0x0379
    2a16:	ea a9       	sts	0x4a, r30
    2a18:	fb a9       	sts	0x4b, r31
    2a1a:	8e 17       	cp	r24, r30
    2a1c:	9f 07       	cpc	r25, r31
    2a1e:	21 f4       	brne	.+8      	; 0x2a28 <tune_filter+0x30e>
    2a20:	80 91 af 02 	lds	r24, 0x02AF
    2a24:	81 30       	cpi	r24, 0x01	; 1
    2a26:	71 f0       	breq	.+28     	; 0x2a44 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2a2e:	2e a5       	lds	r18, 0x6e
    2a30:	3f a5       	lds	r19, 0x6f
    2a32:	21 50       	subi	r18, 0x01	; 1
    2a34:	30 40       	sbci	r19, 0x00	; 0
    2a36:	3f a7       	lds	r19, 0x7f
    2a38:	2e a7       	lds	r18, 0x7e
    2a3a:	8f ef       	ldi	r24, 0xFF	; 255
    2a3c:	2f 3f       	cpi	r18, 0xFF	; 255
    2a3e:	38 07       	cpc	r19, r24
    2a40:	09 f0       	breq	.+2      	; 0x2a44 <tune_filter+0x32a>
    2a42:	70 cf       	rjmp	.-288    	; 0x2924 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2a44:	ee a9       	sts	0x4e, r30
    2a46:	ff a9       	sts	0x4f, r31
    2a48:	31 96       	adiw	r30, 0x01	; 1
    2a4a:	ff ab       	sts	0x5f, r31
    2a4c:	ee ab       	sts	0x5e, r30
    2a4e:	c7 01       	movw	r24, r14
    2a50:	80 96       	adiw	r24, 0x20	; 32
    2a52:	e8 ad       	sts	0x68, r30
    2a54:	f9 ad       	sts	0x69, r31
    2a56:	81 93       	st	Z+, r24
    2a58:	91 93       	st	Z+, r25
    2a5a:	f9 af       	sts	0x79, r31
    2a5c:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2a5e:	ee e6       	ldi	r30, 0x6E	; 110
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	8d 7f       	andi	r24, 0xFD	; 253
    2a66:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2a68:	14 bc       	out	0x24, r1	; 36
    2a6a:	2c a9       	sts	0x4c, r18
    2a6c:	3d a9       	sts	0x4d, r19
    2a6e:	2d 5f       	subi	r18, 0xFD	; 253
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	3d ab       	sts	0x5d, r19
    2a74:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2a76:	8e a9       	sts	0x4e, r24
    2a78:	9f a9       	sts	0x4f, r25
    2a7a:	8f 30       	cpi	r24, 0x0F	; 15
    2a7c:	91 05       	cpc	r25, r1
    2a7e:	09 f0       	breq	.+2      	; 0x2a82 <tune_filter+0x368>
    2a80:	1d cf       	rjmp	.-454    	; 0x28bc <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2a82:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2a84:	e9 96       	adiw	r28, 0x39	; 57
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	1f 91       	pop	r17
    2a96:	0f 91       	pop	r16
    2a98:	ff 90       	pop	r15
    2a9a:	ef 90       	pop	r14
    2a9c:	df 90       	pop	r13
    2a9e:	cf 90       	pop	r12
    2aa0:	bf 90       	pop	r11
    2aa2:	af 90       	pop	r10
    2aa4:	9f 90       	pop	r9
    2aa6:	8f 90       	pop	r8
    2aa8:	7f 90       	pop	r7
    2aaa:	6f 90       	pop	r6
    2aac:	5f 90       	pop	r5
    2aae:	4f 90       	pop	r4
    2ab0:	3f 90       	pop	r3
    2ab2:	2f 90       	pop	r2
    2ab4:	08 95       	ret

00002ab6 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2ab6:	8f e0       	ldi	r24, 0x0F	; 15
    2ab8:	93 e0       	ldi	r25, 0x03	; 3
    2aba:	6c e0       	ldi	r22, 0x0C	; 12
    2abc:	76 e0       	ldi	r23, 0x06	; 6
    2abe:	40 e2       	ldi	r20, 0x20	; 32
    2ac0:	50 e0       	ldi	r21, 0x00	; 0
    2ac2:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2ac6:	81 e5       	ldi	r24, 0x51	; 81
    2ac8:	93 e0       	ldi	r25, 0x03	; 3
    2aca:	6e e4       	ldi	r22, 0x4E	; 78
    2acc:	76 e0       	ldi	r23, 0x06	; 6
    2ace:	42 e2       	ldi	r20, 0x22	; 34
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2ad6:	8f e2       	ldi	r24, 0x2F	; 47
    2ad8:	93 e0       	ldi	r25, 0x03	; 3
    2ada:	6c e2       	ldi	r22, 0x2C	; 44
    2adc:	76 e0       	ldi	r23, 0x06	; 6
    2ade:	42 e2       	ldi	r20, 0x22	; 34
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__eeupd_block_m6450a>
	
	
}
    2ae6:	08 95       	ret

00002ae8 <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2ae8:	82 e7       	ldi	r24, 0x72	; 114
    2aea:	96 e0       	ldi	r25, 0x06	; 6
    2aec:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__eerd_word_m6450a>
    2af0:	90 93 76 03 	sts	0x0376, r25
    2af4:	80 93 75 03 	sts	0x0375, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2af8:	80 e7       	ldi	r24, 0x70	; 112
    2afa:	96 e0       	ldi	r25, 0x06	; 6
    2afc:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__eerd_word_m6450a>
    2b00:	90 93 74 03 	sts	0x0374, r25
    2b04:	80 93 73 03 	sts	0x0373, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2b08:	81 e5       	ldi	r24, 0x51	; 81
    2b0a:	93 e0       	ldi	r25, 0x03	; 3
    2b0c:	6e e4       	ldi	r22, 0x4E	; 78
    2b0e:	76 e0       	ldi	r23, 0x06	; 6
    2b10:	42 e2       	ldi	r20, 0x22	; 34
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2b18:	8f e2       	ldi	r24, 0x2F	; 47
    2b1a:	93 e0       	ldi	r25, 0x03	; 3
    2b1c:	6c e2       	ldi	r22, 0x2C	; 44
    2b1e:	76 e0       	ldi	r23, 0x06	; 6
    2b20:	42 e2       	ldi	r20, 0x22	; 34
    2b22:	50 e0       	ldi	r21, 0x00	; 0
    2b24:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2b28:	8f e0       	ldi	r24, 0x0F	; 15
    2b2a:	93 e0       	ldi	r25, 0x03	; 3
    2b2c:	6c e0       	ldi	r22, 0x0C	; 12
    2b2e:	76 e0       	ldi	r23, 0x06	; 6
    2b30:	40 e2       	ldi	r20, 0x20	; 32
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2b38:	08 95       	ret

00002b3a <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2b3a:	98 2f       	mov	r25, r24
    2b3c:	96 95       	lsr	r25
    2b3e:	96 95       	lsr	r25
    2b40:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2b42:	29 2f       	mov	r18, r25
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	f9 01       	movw	r30, r18
    2b48:	31 97       	sbiw	r30, 0x01	; 1
    2b4a:	ee 0f       	add	r30, r30
    2b4c:	ff 1f       	adc	r31, r31
    2b4e:	e6 0f       	add	r30, r22
    2b50:	f7 1f       	adc	r31, r23
    2b52:	01 90       	ld	r0, Z+
    2b54:	f0 81       	ld	r31, Z
    2b56:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2b58:	22 0f       	add	r18, r18
    2b5a:	33 1f       	adc	r19, r19
    2b5c:	26 0f       	add	r18, r22
    2b5e:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2b60:	d9 01       	movw	r26, r18
    2b62:	4d 91       	ld	r20, X+
    2b64:	5c 91       	ld	r21, X
    2b66:	11 97       	sbiw	r26, 0x01	; 1
    2b68:	4e 1b       	sub	r20, r30
    2b6a:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2b6c:	99 0f       	add	r25, r25
    2b6e:	99 0f       	add	r25, r25
    2b70:	99 0f       	add	r25, r25
    2b72:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	48 9f       	mul	r20, r24
    2b78:	90 01       	movw	r18, r0
    2b7a:	49 9f       	mul	r20, r25
    2b7c:	30 0d       	add	r19, r0
    2b7e:	58 9f       	mul	r21, r24
    2b80:	30 0d       	add	r19, r0
    2b82:	11 24       	eor	r1, r1
    2b84:	36 95       	lsr	r19
    2b86:	27 95       	ror	r18
    2b88:	36 95       	lsr	r19
    2b8a:	27 95       	ror	r18
    2b8c:	36 95       	lsr	r19
    2b8e:	27 95       	ror	r18
    2b90:	e2 0f       	add	r30, r18
    2b92:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2b94:	8e 2f       	mov	r24, r30
    2b96:	9f 2f       	mov	r25, r31
    2b98:	08 95       	ret

00002b9a <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	a2 97       	sbiw	r28, 0x22	; 34
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2bae:	de 01       	movw	r26, r28
    2bb0:	11 96       	adiw	r26, 0x01	; 1
    2bb2:	ed e8       	ldi	r30, 0x8D	; 141
    2bb4:	f2 e0       	ldi	r31, 0x02	; 2
    2bb6:	82 e2       	ldi	r24, 0x22	; 34
    2bb8:	01 90       	ld	r0, Z+
    2bba:	0d 92       	st	X+, r0
    2bbc:	81 50       	subi	r24, 0x01	; 1
    2bbe:	e1 f7       	brne	.-8      	; 0x2bb8 <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2bc0:	a1 e5       	ldi	r26, 0x51	; 81
    2bc2:	b3 e0       	ldi	r27, 0x03	; 3
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	31 96       	adiw	r30, 0x01	; 1
    2bc8:	82 e2       	ldi	r24, 0x22	; 34
    2bca:	01 90       	ld	r0, Z+
    2bcc:	0d 92       	st	X+, r0
    2bce:	81 50       	subi	r24, 0x01	; 1
    2bd0:	e1 f7       	brne	.-8      	; 0x2bca <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2bd2:	af e2       	ldi	r26, 0x2F	; 47
    2bd4:	b3 e0       	ldi	r27, 0x03	; 3
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	31 96       	adiw	r30, 0x01	; 1
    2bda:	82 e2       	ldi	r24, 0x22	; 34
    2bdc:	01 90       	ld	r0, Z+
    2bde:	0d 92       	st	X+, r0
    2be0:	81 50       	subi	r24, 0x01	; 1
    2be2:	e1 f7       	brne	.-8      	; 0x2bdc <set_one_volt_per_octave+0x42>
	
	
}
    2be4:	a2 96       	adiw	r28, 0x22	; 34
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	f8 94       	cli
    2bea:	de bf       	out	0x3e, r29	; 62
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	cd bf       	out	0x3d, r28	; 61
    2bf0:	df 91       	pop	r29
    2bf2:	cf 91       	pop	r28
    2bf4:	08 95       	ret

00002bf6 <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2bf6:	ef e6       	ldi	r30, 0x6F	; 111
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	82 70       	andi	r24, 0x02	; 2
    2bfe:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2c00:	e1 e8       	ldi	r30, 0x81	; 129
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	87 7f       	andi	r24, 0xF7	; 247
    2c08:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2c0a:	8f e0       	ldi	r24, 0x0F	; 15
    2c0c:	6f e0       	ldi	r22, 0x0F	; 15
    2c0e:	7e e5       	ldi	r23, 0x5E	; 94
    2c10:	0e 94 87 10 	call	0x210e	; 0x210e <set_vco_init_cv>
    2c14:	90 93 76 03 	sts	0x0376, r25
    2c18:	80 93 75 03 	sts	0x0375, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2c1c:	80 ef       	ldi	r24, 0xF0	; 240
    2c1e:	6f e0       	ldi	r22, 0x0F	; 15
    2c20:	7e e5       	ldi	r23, 0x5E	; 94
    2c22:	0e 94 87 10 	call	0x210e	; 0x210e <set_vco_init_cv>
    2c26:	90 93 74 03 	sts	0x0374, r25
    2c2a:	80 93 73 03 	sts	0x0373, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2c2e:	8f e0       	ldi	r24, 0x0F	; 15
    2c30:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <tune_8ths>
			tune_8ths(VCO2);
    2c34:	80 ef       	ldi	r24, 0xF0	; 240
    2c36:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <tune_8ths>
			tune_filter();
    2c3a:	0e 94 8d 13 	call	0x271a	; 0x271a <tune_filter>
			save_tuning_tables();
    2c3e:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <save_tuning_tables>
    2c42:	8f e4       	ldi	r24, 0x4F	; 79
    2c44:	93 ec       	ldi	r25, 0xC3	; 195
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	f1 f7       	brne	.-4      	; 0x2c46 <tune+0x50>
    2c4a:	00 c0       	rjmp	.+0      	; 0x2c4c <tune+0x56>
    2c4c:	00 00       	nop
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2c4e:	08 95       	ret

00002c50 <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2c50:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2c52:	98 2f       	mov	r25, r24
    2c54:	9c 70       	andi	r25, 0x0C	; 12
    2c56:	20 91 c1 02 	lds	r18, 0x02C1
    2c5a:	92 2b       	or	r25, r18
    2c5c:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2c60:	98 2f       	mov	r25, r24
    2c62:	92 95       	swap	r25
    2c64:	96 95       	lsr	r25
    2c66:	97 70       	andi	r25, 0x07	; 7
    2c68:	90 ff       	sbrs	r25, 0
    2c6a:	16 c0       	rjmp	.+44     	; 0x2c98 <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2c6c:	20 91 81 03 	lds	r18, 0x0381
    2c70:	30 91 82 03 	lds	r19, 0x0382
    2c74:	2f 5f       	subi	r18, 0xFF	; 255
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	30 93 82 03 	sts	0x0382, r19
    2c7c:	20 93 81 03 	sts	0x0381, r18
    2c80:	92 e0       	ldi	r25, 0x02	; 2
    2c82:	28 35       	cpi	r18, 0x58	; 88
    2c84:	39 07       	cpc	r19, r25
    2c86:	61 f4       	brne	.+24     	; 0x2ca0 <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2c88:	10 92 82 03 	sts	0x0382, r1
    2c8c:	10 92 81 03 	sts	0x0381, r1
			current_patch.mode = CAL;
    2c90:	95 e0       	ldi	r25, 0x05	; 5
    2c92:	90 93 07 03 	sts	0x0307, r25
    2c96:	04 c0       	rjmp	.+8      	; 0x2ca0 <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2c98:	10 92 82 03 	sts	0x0382, r1
    2c9c:	10 92 81 03 	sts	0x0381, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2ca0:	90 91 83 03 	lds	r25, 0x0383
    2ca4:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2ca6:	98 27       	eor	r25, r24
    2ca8:	90 93 83 03 	sts	0x0383, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2cac:	89 23       	and	r24, r25
    2cae:	08 95       	ret

00002cb0 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2cb0:	ed ed       	ldi	r30, 0xDD	; 221
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	90 81       	ld	r25, Z
    2cb6:	9f 7b       	andi	r25, 0xBF	; 191
    2cb8:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	21 70       	andi	r18, 0x01	; 1
    2cc0:	30 70       	andi	r19, 0x00	; 0
    2cc2:	22 0f       	add	r18, r18
    2cc4:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2cc6:	68 2f       	mov	r22, r24
    2cc8:	62 95       	swap	r22
    2cca:	66 95       	lsr	r22
    2ccc:	67 70       	andi	r22, 0x07	; 7
    2cce:	67 95       	ror	r22
    2cd0:	66 27       	eor	r22, r22
    2cd2:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cd4:	26 2b       	or	r18, r22
    2cd6:	98 2f       	mov	r25, r24
    2cd8:	96 95       	lsr	r25
    2cda:	96 95       	lsr	r25
    2cdc:	91 70       	andi	r25, 0x01	; 1
    2cde:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2ce0:	68 2f       	mov	r22, r24
    2ce2:	66 1f       	adc	r22, r22
    2ce4:	66 27       	eor	r22, r22
    2ce6:	66 1f       	adc	r22, r22
    2ce8:	66 0f       	add	r22, r22
    2cea:	66 0f       	add	r22, r22
    2cec:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2cee:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2cf0:	a8 2f       	mov	r26, r24
    2cf2:	a6 95       	lsr	r26
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	a1 70       	andi	r26, 0x01	; 1
    2cf8:	b0 70       	andi	r27, 0x00	; 0
    2cfa:	bd 01       	movw	r22, r26
    2cfc:	66 0f       	add	r22, r22
    2cfe:	77 1f       	adc	r23, r23
    2d00:	66 0f       	add	r22, r22
    2d02:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d04:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2d06:	68 2f       	mov	r22, r24
    2d08:	62 95       	swap	r22
    2d0a:	6f 70       	andi	r22, 0x0F	; 15
    2d0c:	70 e0       	ldi	r23, 0x00	; 0
    2d0e:	61 70       	andi	r22, 0x01	; 1
    2d10:	70 70       	andi	r23, 0x00	; 0
    2d12:	ab 01       	movw	r20, r22
    2d14:	00 24       	eor	r0, r0
    2d16:	56 95       	lsr	r21
    2d18:	47 95       	ror	r20
    2d1a:	07 94       	ror	r0
    2d1c:	56 95       	lsr	r21
    2d1e:	47 95       	ror	r20
    2d20:	07 94       	ror	r0
    2d22:	54 2f       	mov	r21, r20
    2d24:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d26:	62 2f       	mov	r22, r18
    2d28:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2d2a:	48 2f       	mov	r20, r24
    2d2c:	42 95       	swap	r20
    2d2e:	46 95       	lsr	r20
    2d30:	46 95       	lsr	r20
    2d32:	43 70       	andi	r20, 0x03	; 3
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	41 70       	andi	r20, 0x01	; 1
    2d38:	50 70       	andi	r21, 0x00	; 0
    2d3a:	9a 01       	movw	r18, r20
    2d3c:	22 0f       	add	r18, r18
    2d3e:	33 1f       	adc	r19, r19
    2d40:	22 95       	swap	r18
    2d42:	32 95       	swap	r19
    2d44:	30 7f       	andi	r19, 0xF0	; 240
    2d46:	32 27       	eor	r19, r18
    2d48:	20 7f       	andi	r18, 0xF0	; 240
    2d4a:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d4c:	46 2f       	mov	r20, r22
    2d4e:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2d50:	86 95       	lsr	r24
    2d52:	86 95       	lsr	r24
    2d54:	86 95       	lsr	r24
    2d56:	28 2f       	mov	r18, r24
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	21 70       	andi	r18, 0x01	; 1
    2d5c:	30 70       	andi	r19, 0x00	; 0
    2d5e:	c9 01       	movw	r24, r18
    2d60:	82 95       	swap	r24
    2d62:	92 95       	swap	r25
    2d64:	90 7f       	andi	r25, 0xF0	; 240
    2d66:	98 27       	eor	r25, r24
    2d68:	80 7f       	andi	r24, 0xF0	; 240
    2d6a:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2d6c:	84 2b       	or	r24, r20
    2d6e:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2d70:	80 81       	ld	r24, Z
    2d72:	80 64       	ori	r24, 0x40	; 64
    2d74:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2d76:	80 81       	ld	r24, Z
    2d78:	8f 7b       	andi	r24, 0xBF	; 191
    2d7a:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2d7c:	12 b8       	out	0x02, r1	; 2
	
	
    2d7e:	08 95       	ret

00002d80 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2d80:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2d82:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2d84:	74 83       	std	Z+4, r23	; 0x04
    2d86:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2d88:	11 82       	std	Z+1, r1	; 0x01
    2d8a:	10 82       	st	Z, r1
}
    2d8c:	08 95       	ret

00002d8e <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2d8e:	1f 93       	push	r17
    2d90:	cf 93       	push	r28
    2d92:	df 93       	push	r29
    2d94:	ec 01       	movw	r28, r24
    2d96:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2d98:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <store_and_clear_interrupt>
    2d9c:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2d9e:	39 81       	ldd	r19, Y+1	; 0x01
    2da0:	83 2f       	mov	r24, r19
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	01 96       	adiw	r24, 0x01	; 1
    2da6:	6a 81       	ldd	r22, Y+2	; 0x02
    2da8:	70 e0       	ldi	r23, 0x00	; 0
    2daa:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divmodhi4>
    2dae:	48 81       	ld	r20, Y
    2db0:	50 e0       	ldi	r21, 0x00	; 0
    2db2:	84 17       	cp	r24, r20
    2db4:	95 07       	cpc	r25, r21
    2db6:	29 f4       	brne	.+10     	; 0x2dc2 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2db8:	82 2f       	mov	r24, r18
    2dba:	0e 94 39 17 	call	0x2e72	; 0x2e72 <restore_interrupt_setting>
      return false;
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	11 c0       	rjmp	.+34     	; 0x2de4 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2dc2:	eb 81       	ldd	r30, Y+3	; 0x03
    2dc4:	fc 81       	ldd	r31, Y+4	; 0x04
    2dc6:	e3 0f       	add	r30, r19
    2dc8:	f1 1d       	adc	r31, r1
    2dca:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	01 96       	adiw	r24, 0x01	; 1
    2dd2:	6a 81       	ldd	r22, Y+2	; 0x02
    2dd4:	70 e0       	ldi	r23, 0x00	; 0
    2dd6:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divmodhi4>
    2dda:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2ddc:	82 2f       	mov	r24, r18
    2dde:	0e 94 39 17 	call	0x2e72	; 0x2e72 <restore_interrupt_setting>
      return true;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	08 95       	ret

00002dec <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2dec:	cf 93       	push	r28
    2dee:	df 93       	push	r29
    2df0:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2df2:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2df6:	29 81       	ldd	r18, Y+1	; 0x01
    2df8:	98 81       	ld	r25, Y
    2dfa:	29 17       	cp	r18, r25
    2dfc:	18 f0       	brcs	.+6      	; 0x2e04 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2dfe:	c2 2f       	mov	r28, r18
    2e00:	c9 1b       	sub	r28, r25
    2e02:	03 c0       	rjmp	.+6      	; 0x2e0a <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2e04:	ca 81       	ldd	r28, Y+2	; 0x02
    2e06:	c2 0f       	add	r28, r18
    2e08:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2e0a:	0e 94 39 17 	call	0x2e72	; 0x2e72 <restore_interrupt_setting>
   return len;
}
    2e0e:	8c 2f       	mov	r24, r28
    2e10:	df 91       	pop	r29
    2e12:	cf 91       	pop	r28
    2e14:	08 95       	ret

00002e16 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2e16:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2e18:	20 81       	ld	r18, Z
    2e1a:	86 2f       	mov	r24, r22
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	82 0f       	add	r24, r18
    2e20:	91 1d       	adc	r25, r1
    2e22:	62 81       	ldd	r22, Z+2	; 0x02
    2e24:	70 e0       	ldi	r23, 0x00	; 0
    2e26:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divmodhi4>
    2e2a:	03 80       	ldd	r0, Z+3	; 0x03
    2e2c:	f4 81       	ldd	r31, Z+4	; 0x04
    2e2e:	e0 2d       	mov	r30, r0
    2e30:	e8 0f       	add	r30, r24
    2e32:	f9 1f       	adc	r31, r25
}
    2e34:	80 81       	ld	r24, Z
    2e36:	08 95       	ret

00002e38 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2e38:	1f 93       	push	r17
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	ec 01       	movw	r28, r24
    2e40:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2e42:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <store_and_clear_interrupt>
    2e46:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2e48:	88 81       	ld	r24, Y
    2e4a:	21 2f       	mov	r18, r17
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	28 0f       	add	r18, r24
    2e50:	31 1d       	adc	r19, r1
    2e52:	6a 81       	ldd	r22, Y+2	; 0x02
    2e54:	c9 01       	movw	r24, r18
    2e56:	70 e0       	ldi	r23, 0x00	; 0
    2e58:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divmodhi4>
    2e5c:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2e5e:	84 2f       	mov	r24, r20
    2e60:	0e 94 39 17 	call	0x2e72	; 0x2e72 <restore_interrupt_setting>
}
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	1f 91       	pop	r17
    2e6a:	08 95       	ret

00002e6c <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2e6c:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2e6e:	f8 94       	cli
   return sreg;
}
    2e70:	08 95       	ret

00002e72 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2e72:	8f bf       	out	0x3f, r24	; 63
}
    2e74:	08 95       	ret

00002e76 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2e76:	88 1f       	adc	r24, r24
    2e78:	88 27       	eor	r24, r24
    2e7a:	88 1f       	adc	r24, r24
    2e7c:	08 95       	ret

00002e7e <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2e7e:	91 e0       	ldi	r25, 0x01	; 1
    2e80:	88 3f       	cpi	r24, 0xF8	; 248
    2e82:	08 f4       	brcc	.+2      	; 0x2e86 <midi_is_realtime+0x8>
    2e84:	90 e0       	ldi	r25, 0x00	; 0
}
    2e86:	89 2f       	mov	r24, r25
    2e88:	08 95       	ret

00002e8a <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	20 7f       	andi	r18, 0xF0	; 240
    2e90:	30 70       	andi	r19, 0x00	; 0
    2e92:	20 3c       	cpi	r18, 0xC0	; 192
    2e94:	31 05       	cpc	r19, r1
    2e96:	e9 f1       	breq	.+122    	; 0x2f12 <midi_packet_length+0x88>
    2e98:	21 3c       	cpi	r18, 0xC1	; 193
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	8c f4       	brge	.+34     	; 0x2ec0 <midi_packet_length+0x36>
    2e9e:	20 39       	cpi	r18, 0x90	; 144
    2ea0:	31 05       	cpc	r19, r1
    2ea2:	e1 f0       	breq	.+56     	; 0x2edc <midi_packet_length+0x52>
    2ea4:	21 39       	cpi	r18, 0x91	; 145
    2ea6:	31 05       	cpc	r19, r1
    2ea8:	24 f4       	brge	.+8      	; 0x2eb2 <midi_packet_length+0x28>
    2eaa:	20 38       	cpi	r18, 0x80	; 128
    2eac:	31 05       	cpc	r19, r1
    2eae:	79 f5       	brne	.+94     	; 0x2f0e <midi_packet_length+0x84>
    2eb0:	15 c0       	rjmp	.+42     	; 0x2edc <midi_packet_length+0x52>
    2eb2:	20 3a       	cpi	r18, 0xA0	; 160
    2eb4:	31 05       	cpc	r19, r1
    2eb6:	91 f0       	breq	.+36     	; 0x2edc <midi_packet_length+0x52>
    2eb8:	20 3b       	cpi	r18, 0xB0	; 176
    2eba:	31 05       	cpc	r19, r1
    2ebc:	41 f5       	brne	.+80     	; 0x2f0e <midi_packet_length+0x84>
    2ebe:	0e c0       	rjmp	.+28     	; 0x2edc <midi_packet_length+0x52>
    2ec0:	20 3e       	cpi	r18, 0xE0	; 224
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	59 f0       	breq	.+22     	; 0x2edc <midi_packet_length+0x52>
    2ec6:	21 3e       	cpi	r18, 0xE1	; 225
    2ec8:	31 05       	cpc	r19, r1
    2eca:	24 f4       	brge	.+8      	; 0x2ed4 <midi_packet_length+0x4a>
    2ecc:	20 3d       	cpi	r18, 0xD0	; 208
    2ece:	31 05       	cpc	r19, r1
    2ed0:	f1 f4       	brne	.+60     	; 0x2f0e <midi_packet_length+0x84>
    2ed2:	1f c0       	rjmp	.+62     	; 0x2f12 <midi_packet_length+0x88>
    2ed4:	20 3f       	cpi	r18, 0xF0	; 240
    2ed6:	31 05       	cpc	r19, r1
    2ed8:	d1 f4       	brne	.+52     	; 0x2f0e <midi_packet_length+0x84>
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2edc:	83 e0       	ldi	r24, 0x03	; 3
    2ede:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2ee0:	86 3f       	cpi	r24, 0xF6	; 246
    2ee2:	79 f0       	breq	.+30     	; 0x2f02 <midi_packet_length+0x78>
    2ee4:	87 3f       	cpi	r24, 0xF7	; 247
    2ee6:	38 f4       	brcc	.+14     	; 0x2ef6 <midi_packet_length+0x6c>
    2ee8:	82 3f       	cpi	r24, 0xF2	; 242
    2eea:	a9 f0       	breq	.+42     	; 0x2f16 <midi_packet_length+0x8c>
    2eec:	83 3f       	cpi	r24, 0xF3	; 243
    2eee:	59 f0       	breq	.+22     	; 0x2f06 <midi_packet_length+0x7c>
    2ef0:	81 3f       	cpi	r24, 0xF1	; 241
    2ef2:	59 f4       	brne	.+22     	; 0x2f0a <midi_packet_length+0x80>
    2ef4:	08 c0       	rjmp	.+16     	; 0x2f06 <midi_packet_length+0x7c>
    2ef6:	88 3f       	cpi	r24, 0xF8	; 248
    2ef8:	40 f0       	brcs	.+16     	; 0x2f0a <midi_packet_length+0x80>
    2efa:	8d 3f       	cpi	r24, 0xFD	; 253
    2efc:	10 f0       	brcs	.+4      	; 0x2f02 <midi_packet_length+0x78>
    2efe:	8e 3f       	cpi	r24, 0xFE	; 254
    2f00:	20 f0       	brcs	.+8      	; 0x2f0a <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2f12:	82 e0       	ldi	r24, 0x02	; 2
    2f14:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2f16:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2f18:	08 95       	ret

00002f1a <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2f1a:	0f 93       	push	r16
    2f1c:	34 2f       	mov	r19, r20
    2f1e:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2f20:	46 2f       	mov	r20, r22
    2f22:	4f 70       	andi	r20, 0x0F	; 15
    2f24:	40 6b       	ori	r20, 0xB0	; 176
    2f26:	23 2f       	mov	r18, r19
    2f28:	2f 77       	andi	r18, 0x7F	; 127
    2f2a:	0f 77       	andi	r16, 0x7F	; 127
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	ed 91       	ld	r30, X+
    2f30:	fc 91       	ld	r31, X
    2f32:	63 e0       	ldi	r22, 0x03	; 3
    2f34:	70 e0       	ldi	r23, 0x00	; 0
    2f36:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2f38:	0f 91       	pop	r16
    2f3a:	08 95       	ret

00002f3c <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2f3c:	0f 93       	push	r16
    2f3e:	34 2f       	mov	r19, r20
    2f40:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2f42:	46 2f       	mov	r20, r22
    2f44:	4f 70       	andi	r20, 0x0F	; 15
    2f46:	40 69       	ori	r20, 0x90	; 144
    2f48:	23 2f       	mov	r18, r19
    2f4a:	2f 77       	andi	r18, 0x7F	; 127
    2f4c:	0f 77       	andi	r16, 0x7F	; 127
    2f4e:	dc 01       	movw	r26, r24
    2f50:	ed 91       	ld	r30, X+
    2f52:	fc 91       	ld	r31, X
    2f54:	63 e0       	ldi	r22, 0x03	; 3
    2f56:	70 e0       	ldi	r23, 0x00	; 0
    2f58:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2f5a:	0f 91       	pop	r16
    2f5c:	08 95       	ret

00002f5e <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2f5e:	0f 93       	push	r16
    2f60:	34 2f       	mov	r19, r20
    2f62:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2f64:	46 2f       	mov	r20, r22
    2f66:	4f 70       	andi	r20, 0x0F	; 15
    2f68:	40 68       	ori	r20, 0x80	; 128
    2f6a:	23 2f       	mov	r18, r19
    2f6c:	2f 77       	andi	r18, 0x7F	; 127
    2f6e:	0f 77       	andi	r16, 0x7F	; 127
    2f70:	dc 01       	movw	r26, r24
    2f72:	ed 91       	ld	r30, X+
    2f74:	fc 91       	ld	r31, X
    2f76:	63 e0       	ldi	r22, 0x03	; 3
    2f78:	70 e0       	ldi	r23, 0x00	; 0
    2f7a:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2f7c:	0f 91       	pop	r16
    2f7e:	08 95       	ret

00002f80 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2f80:	0f 93       	push	r16
    2f82:	34 2f       	mov	r19, r20
    2f84:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2f86:	46 2f       	mov	r20, r22
    2f88:	4f 70       	andi	r20, 0x0F	; 15
    2f8a:	40 6a       	ori	r20, 0xA0	; 160
    2f8c:	23 2f       	mov	r18, r19
    2f8e:	2f 77       	andi	r18, 0x7F	; 127
    2f90:	0f 77       	andi	r16, 0x7F	; 127
    2f92:	dc 01       	movw	r26, r24
    2f94:	ed 91       	ld	r30, X+
    2f96:	fc 91       	ld	r31, X
    2f98:	63 e0       	ldi	r22, 0x03	; 3
    2f9a:	70 e0       	ldi	r23, 0x00	; 0
    2f9c:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2f9e:	0f 91       	pop	r16
    2fa0:	08 95       	ret

00002fa2 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2fa6:	20 e2       	ldi	r18, 0x20	; 32
    2fa8:	40 30       	cpi	r20, 0x00	; 0
    2faa:	52 07       	cpc	r21, r18
    2fac:	44 f4       	brge	.+16     	; 0x2fbe <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2fae:	a0 ee       	ldi	r26, 0xE0	; 224
    2fb0:	40 30       	cpi	r20, 0x00	; 0
    2fb2:	5a 07       	cpc	r21, r26
    2fb4:	3c f0       	brlt	.+14     	; 0x2fc4 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2fb6:	8a 01       	movw	r16, r20
    2fb8:	00 50       	subi	r16, 0x00	; 0
    2fba:	10 4e       	sbci	r17, 0xE0	; 224
    2fbc:	05 c0       	rjmp	.+10     	; 0x2fc8 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2fbe:	0f ef       	ldi	r16, 0xFF	; 255
    2fc0:	1f e3       	ldi	r17, 0x3F	; 63
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2fc4:	00 e0       	ldi	r16, 0x00	; 0
    2fc6:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2fc8:	46 2f       	mov	r20, r22
    2fca:	4f 70       	andi	r20, 0x0F	; 15
    2fcc:	40 6e       	ori	r20, 0xE0	; 224
    2fce:	20 2f       	mov	r18, r16
    2fd0:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2fd2:	00 0f       	add	r16, r16
    2fd4:	01 2f       	mov	r16, r17
    2fd6:	00 1f       	adc	r16, r16
    2fd8:	11 0b       	sbc	r17, r17
    2fda:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2fdc:	0f 77       	andi	r16, 0x7F	; 127
    2fde:	dc 01       	movw	r26, r24
    2fe0:	ed 91       	ld	r30, X+
    2fe2:	fc 91       	ld	r31, X
    2fe4:	63 e0       	ldi	r22, 0x03	; 3
    2fe6:	70 e0       	ldi	r23, 0x00	; 0
    2fe8:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	08 95       	ret

00002ff0 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2ff0:	0f 93       	push	r16
    2ff2:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2ff4:	46 2f       	mov	r20, r22
    2ff6:	4f 70       	andi	r20, 0x0F	; 15
    2ff8:	40 6c       	ori	r20, 0xC0	; 192
    2ffa:	2f 77       	andi	r18, 0x7F	; 127
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	ed 91       	ld	r30, X+
    3000:	fc 91       	ld	r31, X
    3002:	62 e0       	ldi	r22, 0x02	; 2
    3004:	70 e0       	ldi	r23, 0x00	; 0
    3006:	00 e0       	ldi	r16, 0x00	; 0
    3008:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    300a:	0f 91       	pop	r16
    300c:	08 95       	ret

0000300e <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    300e:	0f 93       	push	r16
    3010:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    3012:	46 2f       	mov	r20, r22
    3014:	4f 70       	andi	r20, 0x0F	; 15
    3016:	40 6d       	ori	r20, 0xD0	; 208
    3018:	2f 77       	andi	r18, 0x7F	; 127
    301a:	dc 01       	movw	r26, r24
    301c:	ed 91       	ld	r30, X+
    301e:	fc 91       	ld	r31, X
    3020:	62 e0       	ldi	r22, 0x02	; 2
    3022:	70 e0       	ldi	r23, 0x00	; 0
    3024:	00 e0       	ldi	r16, 0x00	; 0
    3026:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    3028:	0f 91       	pop	r16
    302a:	08 95       	ret

0000302c <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    302c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    302e:	dc 01       	movw	r26, r24
    3030:	ed 91       	ld	r30, X+
    3032:	fc 91       	ld	r31, X
    3034:	61 e0       	ldi	r22, 0x01	; 1
    3036:	70 e0       	ldi	r23, 0x00	; 0
    3038:	48 ef       	ldi	r20, 0xF8	; 248
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	00 e0       	ldi	r16, 0x00	; 0
    303e:	09 95       	icall
}
    3040:	0f 91       	pop	r16
    3042:	08 95       	ret

00003044 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    3044:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    3046:	dc 01       	movw	r26, r24
    3048:	ed 91       	ld	r30, X+
    304a:	fc 91       	ld	r31, X
    304c:	61 e0       	ldi	r22, 0x01	; 1
    304e:	70 e0       	ldi	r23, 0x00	; 0
    3050:	49 ef       	ldi	r20, 0xF9	; 249
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	00 e0       	ldi	r16, 0x00	; 0
    3056:	09 95       	icall
}
    3058:	0f 91       	pop	r16
    305a:	08 95       	ret

0000305c <midi_send_start>:

void midi_send_start(MidiDevice * device){
    305c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    305e:	dc 01       	movw	r26, r24
    3060:	ed 91       	ld	r30, X+
    3062:	fc 91       	ld	r31, X
    3064:	61 e0       	ldi	r22, 0x01	; 1
    3066:	70 e0       	ldi	r23, 0x00	; 0
    3068:	4a ef       	ldi	r20, 0xFA	; 250
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	00 e0       	ldi	r16, 0x00	; 0
    306e:	09 95       	icall
}
    3070:	0f 91       	pop	r16
    3072:	08 95       	ret

00003074 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    3074:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    3076:	dc 01       	movw	r26, r24
    3078:	ed 91       	ld	r30, X+
    307a:	fc 91       	ld	r31, X
    307c:	61 e0       	ldi	r22, 0x01	; 1
    307e:	70 e0       	ldi	r23, 0x00	; 0
    3080:	4b ef       	ldi	r20, 0xFB	; 251
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	00 e0       	ldi	r16, 0x00	; 0
    3086:	09 95       	icall
}
    3088:	0f 91       	pop	r16
    308a:	08 95       	ret

0000308c <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    308c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    308e:	dc 01       	movw	r26, r24
    3090:	ed 91       	ld	r30, X+
    3092:	fc 91       	ld	r31, X
    3094:	61 e0       	ldi	r22, 0x01	; 1
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	4c ef       	ldi	r20, 0xFC	; 252
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	00 e0       	ldi	r16, 0x00	; 0
    309e:	09 95       	icall
}
    30a0:	0f 91       	pop	r16
    30a2:	08 95       	ret

000030a4 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    30a4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    30a6:	dc 01       	movw	r26, r24
    30a8:	ed 91       	ld	r30, X+
    30aa:	fc 91       	ld	r31, X
    30ac:	61 e0       	ldi	r22, 0x01	; 1
    30ae:	70 e0       	ldi	r23, 0x00	; 0
    30b0:	4e ef       	ldi	r20, 0xFE	; 254
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	00 e0       	ldi	r16, 0x00	; 0
    30b6:	09 95       	icall
}
    30b8:	0f 91       	pop	r16
    30ba:	08 95       	ret

000030bc <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    30bc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    30be:	dc 01       	movw	r26, r24
    30c0:	ed 91       	ld	r30, X+
    30c2:	fc 91       	ld	r31, X
    30c4:	61 e0       	ldi	r22, 0x01	; 1
    30c6:	70 e0       	ldi	r23, 0x00	; 0
    30c8:	4f ef       	ldi	r20, 0xFF	; 255
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	00 e0       	ldi	r16, 0x00	; 0
    30ce:	09 95       	icall
}
    30d0:	0f 91       	pop	r16
    30d2:	08 95       	ret

000030d4 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    30d4:	0f 93       	push	r16
   device->send_func(device, 2,
    30d6:	26 2f       	mov	r18, r22
    30d8:	2f 77       	andi	r18, 0x7F	; 127
    30da:	dc 01       	movw	r26, r24
    30dc:	ed 91       	ld	r30, X+
    30de:	fc 91       	ld	r31, X
    30e0:	62 e0       	ldi	r22, 0x02	; 2
    30e2:	70 e0       	ldi	r23, 0x00	; 0
    30e4:	41 ef       	ldi	r20, 0xF1	; 241
    30e6:	00 e0       	ldi	r16, 0x00	; 0
    30e8:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    30ea:	0f 91       	pop	r16
    30ec:	08 95       	ret

000030ee <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    30ee:	0f 93       	push	r16
    30f0:	1f 93       	push	r17
   device->send_func(device, 3,
    30f2:	26 2f       	mov	r18, r22
    30f4:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    30f6:	8b 01       	movw	r16, r22
    30f8:	00 0f       	add	r16, r16
    30fa:	01 2f       	mov	r16, r17
    30fc:	00 1f       	adc	r16, r16
    30fe:	11 0b       	sbc	r17, r17
    3100:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    3102:	0f 77       	andi	r16, 0x7F	; 127
    3104:	dc 01       	movw	r26, r24
    3106:	ed 91       	ld	r30, X+
    3108:	fc 91       	ld	r31, X
    310a:	63 e0       	ldi	r22, 0x03	; 3
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	42 ef       	ldi	r20, 0xF2	; 242
    3110:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	08 95       	ret

00003118 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    3118:	0f 93       	push	r16
   device->send_func(device, 2,
    311a:	26 2f       	mov	r18, r22
    311c:	2f 77       	andi	r18, 0x7F	; 127
    311e:	dc 01       	movw	r26, r24
    3120:	ed 91       	ld	r30, X+
    3122:	fc 91       	ld	r31, X
    3124:	62 e0       	ldi	r22, 0x02	; 2
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	43 ef       	ldi	r20, 0xF3	; 243
    312a:	00 e0       	ldi	r16, 0x00	; 0
    312c:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    312e:	0f 91       	pop	r16
    3130:	08 95       	ret

00003132 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    3132:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    3134:	dc 01       	movw	r26, r24
    3136:	ed 91       	ld	r30, X+
    3138:	fc 91       	ld	r31, X
    313a:	61 e0       	ldi	r22, 0x01	; 1
    313c:	70 e0       	ldi	r23, 0x00	; 0
    313e:	46 ef       	ldi	r20, 0xF6	; 246
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	00 e0       	ldi	r16, 0x00	; 0
    3144:	09 95       	icall
}
    3146:	0f 91       	pop	r16
    3148:	08 95       	ret

0000314a <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    314a:	0f 93       	push	r16
    314c:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    314e:	dc 01       	movw	r26, r24
    3150:	ed 91       	ld	r30, X+
    3152:	fc 91       	ld	r31, X
    3154:	61 e0       	ldi	r22, 0x01	; 1
    3156:	70 e0       	ldi	r23, 0x00	; 0
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	00 e0       	ldi	r16, 0x00	; 0
    315c:	09 95       	icall
}
    315e:	0f 91       	pop	r16
    3160:	08 95       	ret

00003162 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    3162:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    3164:	dc 01       	movw	r26, r24
    3166:	ed 91       	ld	r30, X+
    3168:	fc 91       	ld	r31, X
    316a:	09 95       	icall
}
    316c:	0f 91       	pop	r16
    316e:	08 95       	ret

00003170 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    3170:	6f 92       	push	r6
    3172:	7f 92       	push	r7
    3174:	8f 92       	push	r8
    3176:	9f 92       	push	r9
    3178:	af 92       	push	r10
    317a:	bf 92       	push	r11
    317c:	cf 92       	push	r12
    317e:	df 92       	push	r13
    3180:	ef 92       	push	r14
    3182:	ff 92       	push	r15
    3184:	0f 93       	push	r16
    3186:	1f 93       	push	r17
    3188:	cf 93       	push	r28
    318a:	df 93       	push	r29
    318c:	00 d0       	rcall	.+0      	; 0x318e <midi_send_array+0x1e>
    318e:	0f 92       	push	r0
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	4c 01       	movw	r8, r24
    3196:	6b 01       	movw	r12, r22
    3198:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    319a:	61 15       	cp	r22, r1
    319c:	71 05       	cpc	r23, r1
    319e:	41 f1       	breq	.+80     	; 0x31f0 <midi_send_array+0x80>
    31a0:	ee 24       	eor	r14, r14
    31a2:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    31a4:	0f 2e       	mov	r0, r31
    31a6:	f3 e0       	ldi	r31, 0x03	; 3
    31a8:	6f 2e       	mov	r6, r31
    31aa:	77 24       	eor	r7, r7
    31ac:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    31ae:	19 82       	std	Y+1, r1	; 0x01
    31b0:	1a 82       	std	Y+2, r1	; 0x02
    31b2:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    31b4:	86 01       	movw	r16, r12
    31b6:	0e 19       	sub	r16, r14
    31b8:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    31ba:	04 30       	cpi	r16, 0x04	; 4
    31bc:	11 05       	cpc	r17, r1
    31be:	08 f0       	brcs	.+2      	; 0x31c2 <midi_send_array+0x52>
    31c0:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    31c2:	b5 01       	movw	r22, r10
    31c4:	6e 0d       	add	r22, r14
    31c6:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    31c8:	ce 01       	movw	r24, r28
    31ca:	01 96       	adiw	r24, 0x01	; 1
    31cc:	40 2f       	mov	r20, r16
    31ce:	51 2f       	mov	r21, r17
    31d0:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    31d4:	c4 01       	movw	r24, r8
    31d6:	b8 01       	movw	r22, r16
    31d8:	49 81       	ldd	r20, Y+1	; 0x01
    31da:	2a 81       	ldd	r18, Y+2	; 0x02
    31dc:	0b 81       	ldd	r16, Y+3	; 0x03
    31de:	0e 94 b1 18 	call	0x3162	; 0x3162 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    31e2:	83 e0       	ldi	r24, 0x03	; 3
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	e8 0e       	add	r14, r24
    31e8:	f9 1e       	adc	r15, r25
    31ea:	ec 14       	cp	r14, r12
    31ec:	fd 04       	cpc	r15, r13
    31ee:	f8 f2       	brcs	.-66     	; 0x31ae <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	0f 90       	pop	r0
    31f6:	df 91       	pop	r29
    31f8:	cf 91       	pop	r28
    31fa:	1f 91       	pop	r17
    31fc:	0f 91       	pop	r16
    31fe:	ff 90       	pop	r15
    3200:	ef 90       	pop	r14
    3202:	df 90       	pop	r13
    3204:	cf 90       	pop	r12
    3206:	bf 90       	pop	r11
    3208:	af 90       	pop	r10
    320a:	9f 90       	pop	r9
    320c:	8f 90       	pop	r8
    320e:	7f 90       	pop	r7
    3210:	6f 90       	pop	r6
    3212:	08 95       	ret

00003214 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    3214:	fc 01       	movw	r30, r24
    3216:	73 83       	std	Z+3, r23	; 0x03
    3218:	62 83       	std	Z+2, r22	; 0x02
}
    321a:	08 95       	ret

0000321c <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    321c:	fc 01       	movw	r30, r24
    321e:	75 83       	std	Z+5, r23	; 0x05
    3220:	64 83       	std	Z+4, r22	; 0x04
}
    3222:	08 95       	ret

00003224 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    3224:	fc 01       	movw	r30, r24
    3226:	77 83       	std	Z+7, r23	; 0x07
    3228:	66 83       	std	Z+6, r22	; 0x06
}
    322a:	08 95       	ret

0000322c <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    322c:	fc 01       	movw	r30, r24
    322e:	71 87       	std	Z+9, r23	; 0x09
    3230:	60 87       	std	Z+8, r22	; 0x08
}
    3232:	08 95       	ret

00003234 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    3234:	fc 01       	movw	r30, r24
    3236:	73 87       	std	Z+11, r23	; 0x0b
    3238:	62 87       	std	Z+10, r22	; 0x0a
}
    323a:	08 95       	ret

0000323c <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    323c:	fc 01       	movw	r30, r24
    323e:	75 87       	std	Z+13, r23	; 0x0d
    3240:	64 87       	std	Z+12, r22	; 0x0c
}
    3242:	08 95       	ret

00003244 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    3244:	fc 01       	movw	r30, r24
    3246:	77 87       	std	Z+15, r23	; 0x0f
    3248:	66 87       	std	Z+14, r22	; 0x0e
}
    324a:	08 95       	ret

0000324c <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    324c:	fc 01       	movw	r30, r24
    324e:	71 8b       	std	Z+17, r23	; 0x11
    3250:	60 8b       	std	Z+16, r22	; 0x10
}
    3252:	08 95       	ret

00003254 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    3254:	fc 01       	movw	r30, r24
    3256:	73 8b       	std	Z+19, r23	; 0x13
    3258:	62 8b       	std	Z+18, r22	; 0x12
}
    325a:	08 95       	ret

0000325c <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    325c:	fc 01       	movw	r30, r24
    325e:	75 8b       	std	Z+21, r23	; 0x15
    3260:	64 8b       	std	Z+20, r22	; 0x14
}
    3262:	08 95       	ret

00003264 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    3264:	fc 01       	movw	r30, r24
    3266:	77 8b       	std	Z+23, r23	; 0x17
    3268:	66 8b       	std	Z+22, r22	; 0x16
}
    326a:	08 95       	ret

0000326c <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    326c:	fc 01       	movw	r30, r24
    326e:	71 8f       	std	Z+25, r23	; 0x19
    3270:	60 8f       	std	Z+24, r22	; 0x18
}
    3272:	08 95       	ret

00003274 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    3274:	fc 01       	movw	r30, r24
    3276:	73 8f       	std	Z+27, r23	; 0x1b
    3278:	62 8f       	std	Z+26, r22	; 0x1a
}
    327a:	08 95       	ret

0000327c <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    327c:	fc 01       	movw	r30, r24
    327e:	75 8f       	std	Z+29, r23	; 0x1d
    3280:	64 8f       	std	Z+28, r22	; 0x1c
}
    3282:	08 95       	ret

00003284 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    3284:	fc 01       	movw	r30, r24
    3286:	77 8f       	std	Z+31, r23	; 0x1f
    3288:	66 8f       	std	Z+30, r22	; 0x1e
}
    328a:	08 95       	ret

0000328c <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    328c:	cf 93       	push	r28
    328e:	df 93       	push	r29
    3290:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    3292:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    3294:	1f a2       	lds	r17, 0x9f
    3296:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    3298:	bc 01       	movw	r22, r24
    329a:	68 5d       	subi	r22, 0xD8	; 216
    329c:	7f 4f       	sbci	r23, 0xFF	; 255
    329e:	88 51       	subi	r24, 0x18	; 24
    32a0:	9f 4f       	sbci	r25, 0xFF	; 255
    32a2:	40 ec       	ldi	r20, 0xC0	; 192
    32a4:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    32a8:	1b 82       	std	Y+3, r1	; 0x03
    32aa:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    32ac:	1d 82       	std	Y+5, r1	; 0x05
    32ae:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    32b0:	1f 82       	std	Y+7, r1	; 0x07
    32b2:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    32b4:	19 86       	std	Y+9, r1	; 0x09
    32b6:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    32b8:	1b 86       	std	Y+11, r1	; 0x0b
    32ba:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    32bc:	1d 86       	std	Y+13, r1	; 0x0d
    32be:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    32c0:	1f 86       	std	Y+15, r1	; 0x0f
    32c2:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    32c4:	19 8a       	std	Y+17, r1	; 0x11
    32c6:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    32c8:	1b 8a       	std	Y+19, r1	; 0x13
    32ca:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    32cc:	1d 8a       	std	Y+21, r1	; 0x15
    32ce:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    32d0:	1f 8a       	std	Y+23, r1	; 0x17
    32d2:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    32d4:	19 8e       	std	Y+25, r1	; 0x19
    32d6:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    32d8:	1b 8e       	std	Y+27, r1	; 0x1b
    32da:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    32dc:	1d 8e       	std	Y+29, r1	; 0x1d
    32de:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    32e0:	1f 8e       	std	Y+31, r1	; 0x1f
    32e2:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    32e4:	19 a2       	lds	r17, 0x99
    32e6:	18 a2       	lds	r17, 0x98
}
    32e8:	df 91       	pop	r29
    32ea:	cf 91       	pop	r28
    32ec:	08 95       	ret

000032ee <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    32ee:	ef 92       	push	r14
    32f0:	ff 92       	push	r15
    32f2:	0f 93       	push	r16
    32f4:	1f 93       	push	r17
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    32fc:	66 23       	and	r22, r22
    32fe:	99 f0       	breq	.+38     	; 0x3326 <midi_device_input+0x38>
    3300:	04 2f       	mov	r16, r20
    3302:	15 2f       	mov	r17, r21
    3304:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    3306:	0f 2e       	mov	r0, r31
    3308:	f8 ee       	ldi	r31, 0xE8	; 232
    330a:	ef 2e       	mov	r14, r31
    330c:	ff 24       	eor	r15, r15
    330e:	f0 2d       	mov	r31, r0
    3310:	e8 0e       	add	r14, r24
    3312:	f9 1e       	adc	r15, r25
    3314:	f8 01       	movw	r30, r16
    3316:	61 91       	ld	r22, Z+
    3318:	8f 01       	movw	r16, r30
    331a:	c7 01       	movw	r24, r14
    331c:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3320:	cf 5f       	subi	r28, 0xFF	; 255
    3322:	cd 17       	cp	r28, r29
    3324:	b9 f7       	brne	.-18     	; 0x3314 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	1f 91       	pop	r17
    332c:	0f 91       	pop	r16
    332e:	ff 90       	pop	r15
    3330:	ef 90       	pop	r14
    3332:	08 95       	ret

00003334 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    3334:	fc 01       	movw	r30, r24
    3336:	71 83       	std	Z+1, r23	; 0x01
    3338:	60 83       	st	Z, r22
}
    333a:	08 95       	ret

0000333c <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    333c:	fc 01       	movw	r30, r24
    333e:	71 a3       	lds	r23, 0x51
    3340:	60 a3       	lds	r22, 0x50
}
    3342:	08 95       	ret

00003344 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    3344:	af 92       	push	r10
    3346:	bf 92       	push	r11
    3348:	cf 92       	push	r12
    334a:	df 92       	push	r13
    334c:	ef 92       	push	r14
    334e:	ff 92       	push	r15
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	00 d0       	rcall	.+0      	; 0x335a <midi_input_callbacks+0x16>
    335a:	0f 92       	push	r0
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	6c 01       	movw	r12, r24
    3362:	5b 01       	movw	r10, r22
    3364:	f4 2e       	mov	r15, r20
    3366:	e2 2e       	mov	r14, r18
    3368:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    336a:	dc 01       	movw	r26, r24
    336c:	95 96       	adiw	r26, 0x25	; 37
    336e:	8c 91       	ld	r24, X
    3370:	95 97       	sbiw	r26, 0x25	; 37
    3372:	84 30       	cpi	r24, 0x04	; 4
    3374:	e9 f4       	brne	.+58     	; 0x33b0 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    3376:	5a 96       	adiw	r26, 0x1a	; 26
    3378:	ed 91       	ld	r30, X+
    337a:	fc 91       	ld	r31, X
    337c:	5b 97       	sbiw	r26, 0x1b	; 27
    337e:	30 97       	sbiw	r30, 0x00	; 0
    3380:	09 f4       	brne	.+2      	; 0x3384 <midi_input_callbacks+0x40>
    3382:	ee c0       	rjmp	.+476    	; 0x3560 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    3384:	cb 01       	movw	r24, r22
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	63 e0       	ldi	r22, 0x03	; 3
    338a:	70 e0       	ldi	r23, 0x00	; 0
    338c:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__udivmodhi4>
    3390:	cb 01       	movw	r24, r22
    3392:	88 0f       	add	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	68 0f       	add	r22, r24
    3398:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    339a:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    339c:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    339e:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    33a0:	4a 2d       	mov	r20, r10
    33a2:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    33a4:	c6 01       	movw	r24, r12
    33a6:	9e 01       	movw	r18, r28
    33a8:	2f 5f       	subi	r18, 0xFF	; 255
    33aa:	3f 4f       	sbci	r19, 0xFF	; 255
    33ac:	09 95       	icall
    33ae:	c8 c0       	rjmp	.+400    	; 0x3540 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    33b0:	62 30       	cpi	r22, 0x02	; 2
    33b2:	71 05       	cpc	r23, r1
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <midi_input_callbacks+0x74>
    33b6:	5f c0       	rjmp	.+190    	; 0x3476 <midi_input_callbacks+0x132>
    33b8:	63 30       	cpi	r22, 0x03	; 3
    33ba:	71 05       	cpc	r23, r1
    33bc:	29 f0       	breq	.+10     	; 0x33c8 <midi_input_callbacks+0x84>
    33be:	61 30       	cpi	r22, 0x01	; 1
    33c0:	71 05       	cpc	r23, r1
    33c2:	09 f0       	breq	.+2      	; 0x33c6 <midi_input_callbacks+0x82>
    33c4:	b3 c0       	rjmp	.+358    	; 0x352c <midi_input_callbacks+0x1e8>
    33c6:	99 c0       	rjmp	.+306    	; 0x34fa <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    33c8:	84 2f       	mov	r24, r20
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	80 7f       	andi	r24, 0xF0	; 240
    33ce:	90 70       	andi	r25, 0x00	; 0
    33d0:	80 3a       	cpi	r24, 0xA0	; 160
    33d2:	91 05       	cpc	r25, r1
    33d4:	29 f1       	breq	.+74     	; 0x3420 <midi_input_callbacks+0xdc>
    33d6:	81 3a       	cpi	r24, 0xA1	; 161
    33d8:	91 05       	cpc	r25, r1
    33da:	3c f4       	brge	.+14     	; 0x33ea <midi_input_callbacks+0xa6>
    33dc:	80 38       	cpi	r24, 0x80	; 128
    33de:	91 05       	cpc	r25, r1
    33e0:	c9 f0       	breq	.+50     	; 0x3414 <midi_input_callbacks+0xd0>
    33e2:	80 39       	cpi	r24, 0x90	; 144
    33e4:	91 05       	cpc	r25, r1
    33e6:	91 f5       	brne	.+100    	; 0x344c <midi_input_callbacks+0x108>
    33e8:	0f c0       	rjmp	.+30     	; 0x3408 <midi_input_callbacks+0xc4>
    33ea:	80 3e       	cpi	r24, 0xE0	; 224
    33ec:	91 05       	cpc	r25, r1
    33ee:	f1 f0       	breq	.+60     	; 0x342c <midi_input_callbacks+0xe8>
    33f0:	80 3f       	cpi	r24, 0xF0	; 240
    33f2:	91 05       	cpc	r25, r1
    33f4:	09 f1       	breq	.+66     	; 0x3438 <midi_input_callbacks+0xf4>
    33f6:	80 3b       	cpi	r24, 0xB0	; 176
    33f8:	91 05       	cpc	r25, r1
    33fa:	41 f5       	brne	.+80     	; 0x344c <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    33fc:	d6 01       	movw	r26, r12
    33fe:	12 96       	adiw	r26, 0x02	; 2
    3400:	ed 91       	ld	r30, X+
    3402:	fc 91       	ld	r31, X
    3404:	13 97       	sbiw	r26, 0x03	; 3
              break;
    3406:	24 c0       	rjmp	.+72     	; 0x3450 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    3408:	d6 01       	movw	r26, r12
    340a:	14 96       	adiw	r26, 0x04	; 4
    340c:	ed 91       	ld	r30, X+
    340e:	fc 91       	ld	r31, X
    3410:	15 97       	sbiw	r26, 0x05	; 5
              break;
    3412:	1e c0       	rjmp	.+60     	; 0x3450 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    3414:	d6 01       	movw	r26, r12
    3416:	16 96       	adiw	r26, 0x06	; 6
    3418:	ed 91       	ld	r30, X+
    341a:	fc 91       	ld	r31, X
    341c:	17 97       	sbiw	r26, 0x07	; 7
              break;
    341e:	18 c0       	rjmp	.+48     	; 0x3450 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    3420:	d6 01       	movw	r26, r12
    3422:	18 96       	adiw	r26, 0x08	; 8
    3424:	ed 91       	ld	r30, X+
    3426:	fc 91       	ld	r31, X
    3428:	19 97       	sbiw	r26, 0x09	; 9
              break;
    342a:	12 c0       	rjmp	.+36     	; 0x3450 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    342c:	d6 01       	movw	r26, r12
    342e:	1a 96       	adiw	r26, 0x0a	; 10
    3430:	ed 91       	ld	r30, X+
    3432:	fc 91       	ld	r31, X
    3434:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    3436:	0c c0       	rjmp	.+24     	; 0x3450 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    3438:	b2 ef       	ldi	r27, 0xF2	; 242
    343a:	4b 17       	cp	r20, r27
    343c:	09 f0       	breq	.+2      	; 0x3440 <midi_input_callbacks+0xfc>
    343e:	90 c0       	rjmp	.+288    	; 0x3560 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    3440:	d6 01       	movw	r26, r12
    3442:	1c 96       	adiw	r26, 0x0c	; 12
    3444:	ed 91       	ld	r30, X+
    3446:	fc 91       	ld	r31, X
    3448:	1d 97       	sbiw	r26, 0x0d	; 13
    344a:	02 c0       	rjmp	.+4      	; 0x3450 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    344c:	e0 e0       	ldi	r30, 0x00	; 0
    344e:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    3450:	30 97       	sbiw	r30, 0x00	; 0
    3452:	09 f4       	brne	.+2      	; 0x3456 <midi_input_callbacks+0x112>
    3454:	85 c0       	rjmp	.+266    	; 0x3560 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    3456:	b2 ef       	ldi	r27, 0xF2	; 242
    3458:	fb 16       	cp	r15, r27
    345a:	31 f4       	brne	.+12     	; 0x3468 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    345c:	c6 01       	movw	r24, r12
    345e:	62 ef       	ldi	r22, 0xF2	; 242
    3460:	4e 2d       	mov	r20, r14
    3462:	21 2f       	mov	r18, r17
    3464:	09 95       	icall
    3466:	6c c0       	rjmp	.+216    	; 0x3540 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    3468:	6f 2d       	mov	r22, r15
    346a:	6f 70       	andi	r22, 0x0F	; 15
    346c:	c6 01       	movw	r24, r12
    346e:	4e 2d       	mov	r20, r14
    3470:	21 2f       	mov	r18, r17
    3472:	09 95       	icall
    3474:	65 c0       	rjmp	.+202    	; 0x3540 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3476:	84 2f       	mov	r24, r20
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	80 7f       	andi	r24, 0xF0	; 240
    347c:	90 70       	andi	r25, 0x00	; 0
    347e:	80 3d       	cpi	r24, 0xD0	; 208
    3480:	91 05       	cpc	r25, r1
    3482:	61 f0       	breq	.+24     	; 0x349c <midi_input_callbacks+0x158>
    3484:	80 3f       	cpi	r24, 0xF0	; 240
    3486:	91 05       	cpc	r25, r1
    3488:	79 f0       	breq	.+30     	; 0x34a8 <midi_input_callbacks+0x164>
    348a:	80 3c       	cpi	r24, 0xC0	; 192
    348c:	91 05       	cpc	r25, r1
    348e:	f9 f4       	brne	.+62     	; 0x34ce <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    3490:	d6 01       	movw	r26, r12
    3492:	1e 96       	adiw	r26, 0x0e	; 14
    3494:	ed 91       	ld	r30, X+
    3496:	fc 91       	ld	r31, X
    3498:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    349a:	1b c0       	rjmp	.+54     	; 0x34d2 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    349c:	d6 01       	movw	r26, r12
    349e:	50 96       	adiw	r26, 0x10	; 16
    34a0:	ed 91       	ld	r30, X+
    34a2:	fc 91       	ld	r31, X
    34a4:	51 97       	sbiw	r26, 0x11	; 17
              break;
    34a6:	15 c0       	rjmp	.+42     	; 0x34d2 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    34a8:	b3 ef       	ldi	r27, 0xF3	; 243
    34aa:	4b 17       	cp	r20, r27
    34ac:	31 f4       	brne	.+12     	; 0x34ba <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    34ae:	d6 01       	movw	r26, r12
    34b0:	52 96       	adiw	r26, 0x12	; 18
    34b2:	ed 91       	ld	r30, X+
    34b4:	fc 91       	ld	r31, X
    34b6:	53 97       	sbiw	r26, 0x13	; 19
    34b8:	0c c0       	rjmp	.+24     	; 0x34d2 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    34ba:	b1 ef       	ldi	r27, 0xF1	; 241
    34bc:	4b 17       	cp	r20, r27
    34be:	09 f0       	breq	.+2      	; 0x34c2 <midi_input_callbacks+0x17e>
    34c0:	4f c0       	rjmp	.+158    	; 0x3560 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    34c2:	d6 01       	movw	r26, r12
    34c4:	54 96       	adiw	r26, 0x14	; 20
    34c6:	ed 91       	ld	r30, X+
    34c8:	fc 91       	ld	r31, X
    34ca:	55 97       	sbiw	r26, 0x15	; 21
    34cc:	02 c0       	rjmp	.+4      	; 0x34d2 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    34ce:	e0 e0       	ldi	r30, 0x00	; 0
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    34d2:	30 97       	sbiw	r30, 0x00	; 0
    34d4:	09 f4       	brne	.+2      	; 0x34d8 <midi_input_callbacks+0x194>
    34d6:	44 c0       	rjmp	.+136    	; 0x3560 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    34d8:	b3 ef       	ldi	r27, 0xF3	; 243
    34da:	fb 16       	cp	r15, r27
    34dc:	19 f0       	breq	.+6      	; 0x34e4 <midi_input_callbacks+0x1a0>
    34de:	81 ef       	ldi	r24, 0xF1	; 241
    34e0:	f8 16       	cp	r15, r24
    34e2:	29 f4       	brne	.+10     	; 0x34ee <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    34e4:	c6 01       	movw	r24, r12
    34e6:	6f 2d       	mov	r22, r15
    34e8:	4e 2d       	mov	r20, r14
    34ea:	09 95       	icall
    34ec:	29 c0       	rjmp	.+82     	; 0x3540 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    34ee:	6f 2d       	mov	r22, r15
    34f0:	6f 70       	andi	r22, 0x0F	; 15
    34f2:	c6 01       	movw	r24, r12
    34f4:	4e 2d       	mov	r20, r14
    34f6:	09 95       	icall
    34f8:	23 c0       	rjmp	.+70     	; 0x3540 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    34fa:	84 2f       	mov	r24, r20
    34fc:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <midi_is_realtime>
    3500:	88 23       	and	r24, r24
    3502:	31 f0       	breq	.+12     	; 0x3510 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    3504:	d6 01       	movw	r26, r12
    3506:	56 96       	adiw	r26, 0x16	; 22
    3508:	ed 91       	ld	r30, X+
    350a:	fc 91       	ld	r31, X
    350c:	57 97       	sbiw	r26, 0x17	; 23
    350e:	08 c0       	rjmp	.+16     	; 0x3520 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    3510:	b6 ef       	ldi	r27, 0xF6	; 246
    3512:	fb 16       	cp	r15, r27
    3514:	29 f5       	brne	.+74     	; 0x3560 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    3516:	d6 01       	movw	r26, r12
    3518:	58 96       	adiw	r26, 0x18	; 24
    351a:	ed 91       	ld	r30, X+
    351c:	fc 91       	ld	r31, X
    351e:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    3520:	30 97       	sbiw	r30, 0x00	; 0
    3522:	f1 f0       	breq	.+60     	; 0x3560 <midi_input_callbacks+0x21c>
            func(device, byte0);
    3524:	c6 01       	movw	r24, r12
    3526:	6f 2d       	mov	r22, r15
    3528:	09 95       	icall
    352a:	0a c0       	rjmp	.+20     	; 0x3540 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    352c:	64 30       	cpi	r22, 0x04	; 4
    352e:	71 05       	cpc	r23, r1
    3530:	a8 f4       	brcc	.+42     	; 0x355c <midi_input_callbacks+0x218>
    3532:	16 c0       	rjmp	.+44     	; 0x3560 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    3534:	c6 01       	movw	r24, r12
    3536:	b5 01       	movw	r22, r10
    3538:	4f 2d       	mov	r20, r15
    353a:	2e 2d       	mov	r18, r14
    353c:	01 2f       	mov	r16, r17
    353e:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    3540:	d6 01       	movw	r26, r12
    3542:	5e 96       	adiw	r26, 0x1e	; 30
    3544:	ed 91       	ld	r30, X+
    3546:	fc 91       	ld	r31, X
    3548:	5f 97       	sbiw	r26, 0x1f	; 31
    354a:	30 97       	sbiw	r30, 0x00	; 0
    354c:	89 f0       	breq	.+34     	; 0x3570 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    354e:	c6 01       	movw	r24, r12
    3550:	b5 01       	movw	r22, r10
    3552:	4f 2d       	mov	r20, r15
    3554:	2e 2d       	mov	r18, r14
    3556:	01 2f       	mov	r16, r17
    3558:	09 95       	icall
    355a:	0a c0       	rjmp	.+20     	; 0x3570 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    355c:	aa 24       	eor	r10, r10
    355e:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    3560:	d6 01       	movw	r26, r12
    3562:	5c 96       	adiw	r26, 0x1c	; 28
    3564:	ed 91       	ld	r30, X+
    3566:	fc 91       	ld	r31, X
    3568:	5d 97       	sbiw	r26, 0x1d	; 29
    356a:	30 97       	sbiw	r30, 0x00	; 0
    356c:	19 f7       	brne	.-58     	; 0x3534 <midi_input_callbacks+0x1f0>
    356e:	e8 cf       	rjmp	.-48     	; 0x3540 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	df 91       	pop	r29
    3578:	cf 91       	pop	r28
    357a:	1f 91       	pop	r17
    357c:	0f 91       	pop	r16
    357e:	ff 90       	pop	r15
    3580:	ef 90       	pop	r14
    3582:	df 90       	pop	r13
    3584:	cf 90       	pop	r12
    3586:	bf 90       	pop	r11
    3588:	af 90       	pop	r10
    358a:	08 95       	ret

0000358c <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    358c:	ef 92       	push	r14
    358e:	ff 92       	push	r15
    3590:	0f 93       	push	r16
    3592:	cf 93       	push	r28
    3594:	df 93       	push	r29
    3596:	7c 01       	movw	r14, r24
    3598:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    359a:	86 2f       	mov	r24, r22
    359c:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <midi_is_realtime>
    35a0:	88 23       	and	r24, r24
    35a2:	91 f0       	breq	.+36     	; 0x35c8 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    35a4:	d7 01       	movw	r26, r14
    35a6:	95 96       	adiw	r26, 0x25	; 37
    35a8:	dc 91       	ld	r29, X
    35aa:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	95 96       	adiw	r26, 0x25	; 37
    35b0:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    35b2:	c7 01       	movw	r24, r14
    35b4:	61 e0       	ldi	r22, 0x01	; 1
    35b6:	70 e0       	ldi	r23, 0x00	; 0
    35b8:	4c 2f       	mov	r20, r28
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	00 e0       	ldi	r16, 0x00	; 0
    35be:	0e 94 a2 19 	call	0x3344	; 0x3344 <midi_input_callbacks>
    device->input_state = state;
    35c2:	f7 01       	movw	r30, r14
    35c4:	d5 a3       	lds	r29, 0x55
    35c6:	b7 c0       	rjmp	.+366    	; 0x3736 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    35c8:	8c 2f       	mov	r24, r28
    35ca:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <midi_is_statusbyte>
    35ce:	88 23       	and	r24, r24
    35d0:	09 f4       	brne	.+2      	; 0x35d4 <midi_process_byte+0x48>
    35d2:	73 c0       	rjmp	.+230    	; 0x36ba <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    35d4:	d7 01       	movw	r26, r14
    35d6:	95 96       	adiw	r26, 0x25	; 37
    35d8:	8c 91       	ld	r24, X
    35da:	95 97       	sbiw	r26, 0x25	; 37
    35dc:	84 30       	cpi	r24, 0x04	; 4
    35de:	49 f0       	breq	.+18     	; 0x35f2 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    35e0:	92 96       	adiw	r26, 0x22	; 34
    35e2:	cc 93       	st	X, r28
    35e4:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	97 96       	adiw	r26, 0x27	; 39
    35ec:	9c 93       	st	X, r25
    35ee:	8e 93       	st	-X, r24
    35f0:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    35f2:	8c 2f       	mov	r24, r28
    35f4:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <midi_packet_length>
    35f8:	81 30       	cpi	r24, 0x01	; 1
    35fa:	41 f0       	breq	.+16     	; 0x360c <midi_process_byte+0x80>
    35fc:	81 30       	cpi	r24, 0x01	; 1
    35fe:	00 f1       	brcs	.+64     	; 0x3640 <midi_process_byte+0xb4>
    3600:	82 30       	cpi	r24, 0x02	; 2
    3602:	a1 f0       	breq	.+40     	; 0x362c <midi_process_byte+0xa0>
    3604:	83 30       	cpi	r24, 0x03	; 3
    3606:	09 f0       	breq	.+2      	; 0x360a <midi_process_byte+0x7e>
    3608:	4f c0       	rjmp	.+158    	; 0x36a8 <midi_process_byte+0x11c>
    360a:	14 c0       	rjmp	.+40     	; 0x3634 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	f7 01       	movw	r30, r14
    3610:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3612:	c7 01       	movw	r24, r14
    3614:	61 e0       	ldi	r22, 0x01	; 1
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	4c 2f       	mov	r20, r28
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	00 e0       	ldi	r16, 0x00	; 0
    361e:	0e 94 a2 19 	call	0x3344	; 0x3344 <midi_input_callbacks>
        device->input_state = IDLE;
    3622:	d7 01       	movw	r26, r14
    3624:	95 96       	adiw	r26, 0x25	; 37
    3626:	1c 92       	st	X, r1
    3628:	95 97       	sbiw	r26, 0x25	; 37
        break;
    362a:	85 c0       	rjmp	.+266    	; 0x3736 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    362c:	82 e0       	ldi	r24, 0x02	; 2
    362e:	f7 01       	movw	r30, r14
    3630:	85 a3       	lds	r24, 0x55
        break;
    3632:	81 c0       	rjmp	.+258    	; 0x3736 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    3634:	83 e0       	ldi	r24, 0x03	; 3
    3636:	d7 01       	movw	r26, r14
    3638:	95 96       	adiw	r26, 0x25	; 37
    363a:	8c 93       	st	X, r24
    363c:	95 97       	sbiw	r26, 0x25	; 37
        break;
    363e:	7b c0       	rjmp	.+246    	; 0x3736 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    3640:	c0 3f       	cpi	r28, 0xF0	; 240
    3642:	19 f0       	breq	.+6      	; 0x364a <midi_process_byte+0xbe>
    3644:	c7 3f       	cpi	r28, 0xF7	; 247
    3646:	59 f5       	brne	.+86     	; 0x369e <midi_process_byte+0x112>
    3648:	0a c0       	rjmp	.+20     	; 0x365e <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    364a:	84 e0       	ldi	r24, 0x04	; 4
    364c:	f7 01       	movw	r30, r14
    364e:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    3650:	80 ef       	ldi	r24, 0xF0	; 240
    3652:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	97 a3       	lds	r25, 0x57
    365a:	86 a3       	lds	r24, 0x56
            break;
    365c:	6c c0       	rjmp	.+216    	; 0x3736 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    365e:	d7 01       	movw	r26, r14
    3660:	96 96       	adiw	r26, 0x26	; 38
    3662:	2d 91       	ld	r18, X+
    3664:	3c 91       	ld	r19, X
    3666:	97 97       	sbiw	r26, 0x27	; 39
    3668:	c9 01       	movw	r24, r18
    366a:	63 e0       	ldi	r22, 0x03	; 3
    366c:	70 e0       	ldi	r23, 0x00	; 0
    366e:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__udivmodhi4>
    3672:	f7 01       	movw	r30, r14
    3674:	e8 0f       	add	r30, r24
    3676:	f9 1f       	adc	r31, r25
    3678:	87 ef       	ldi	r24, 0xF7	; 247
    367a:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    367c:	b9 01       	movw	r22, r18
    367e:	6f 5f       	subi	r22, 0xFF	; 255
    3680:	7f 4f       	sbci	r23, 0xFF	; 255
    3682:	f7 01       	movw	r30, r14
    3684:	77 a3       	lds	r23, 0x57
    3686:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3688:	c7 01       	movw	r24, r14
    368a:	42 a1       	lds	r20, 0x42
    368c:	23 a1       	lds	r18, 0x43
    368e:	04 a1       	lds	r16, 0x44
    3690:	0e 94 a2 19 	call	0x3344	; 0x3344 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3694:	d7 01       	movw	r26, r14
    3696:	95 96       	adiw	r26, 0x25	; 37
    3698:	1c 92       	st	X, r1
    369a:	95 97       	sbiw	r26, 0x25	; 37
            break;
    369c:	4c c0       	rjmp	.+152    	; 0x3736 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    369e:	f7 01       	movw	r30, r14
    36a0:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    36a2:	17 a2       	lds	r17, 0x97
    36a4:	16 a2       	lds	r17, 0x96
    36a6:	47 c0       	rjmp	.+142    	; 0x3736 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    36a8:	d7 01       	movw	r26, r14
    36aa:	95 96       	adiw	r26, 0x25	; 37
    36ac:	1c 92       	st	X, r1
    36ae:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    36b0:	97 96       	adiw	r26, 0x27	; 39
    36b2:	1c 92       	st	X, r1
    36b4:	1e 92       	st	-X, r1
    36b6:	96 97       	sbiw	r26, 0x26	; 38
        break;
    36b8:	3e c0       	rjmp	.+124    	; 0x3736 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    36ba:	f7 01       	movw	r30, r14
    36bc:	25 a1       	lds	r18, 0x45
    36be:	22 23       	and	r18, r18
    36c0:	d1 f1       	breq	.+116    	; 0x3736 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    36c2:	06 a0       	lds	r16, 0x86
    36c4:	f7 a1       	lds	r31, 0x47
    36c6:	e0 2d       	mov	r30, r0
    36c8:	cf 01       	movw	r24, r30
    36ca:	63 e0       	ldi	r22, 0x03	; 3
    36cc:	70 e0       	ldi	r23, 0x00	; 0
    36ce:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__udivmodhi4>
    36d2:	ac 01       	movw	r20, r24
    36d4:	8e 0d       	add	r24, r14
    36d6:	9f 1d       	adc	r25, r15
    36d8:	dc 01       	movw	r26, r24
    36da:	92 96       	adiw	r26, 0x22	; 34
    36dc:	cc 93       	st	X, r28
    36de:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    36e0:	bf 01       	movw	r22, r30
    36e2:	6f 5f       	subi	r22, 0xFF	; 255
    36e4:	7f 4f       	sbci	r23, 0xFF	; 255
    36e6:	f7 01       	movw	r30, r14
    36e8:	77 a3       	lds	r23, 0x57
    36ea:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    36ec:	41 30       	cpi	r20, 0x01	; 1
    36ee:	51 05       	cpc	r21, r1
    36f0:	91 f0       	breq	.+36     	; 0x3716 <midi_process_byte+0x18a>
    36f2:	42 30       	cpi	r20, 0x02	; 2
    36f4:	51 05       	cpc	r21, r1
    36f6:	f9 f4       	brne	.+62     	; 0x3736 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    36f8:	c7 01       	movw	r24, r14
    36fa:	42 a1       	lds	r20, 0x42
    36fc:	23 a1       	lds	r18, 0x43
    36fe:	04 a1       	lds	r16, 0x44
    3700:	0e 94 a2 19 	call	0x3344	; 0x3344 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    3704:	f7 01       	movw	r30, r14
    3706:	85 a1       	lds	r24, 0x45
    3708:	84 30       	cpi	r24, 0x04	; 4
    370a:	a9 f0       	breq	.+42     	; 0x3736 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	97 a3       	lds	r25, 0x57
    3712:	86 a3       	lds	r24, 0x56
    3714:	10 c0       	rjmp	.+32     	; 0x3736 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3716:	22 30       	cpi	r18, 0x02	; 2
    3718:	71 f4       	brne	.+28     	; 0x3736 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    371a:	c7 01       	movw	r24, r14
    371c:	42 a1       	lds	r20, 0x42
    371e:	23 a1       	lds	r18, 0x43
    3720:	00 e0       	ldi	r16, 0x00	; 0
    3722:	0e 94 a2 19 	call	0x3344	; 0x3344 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3726:	f7 01       	movw	r30, r14
    3728:	85 a1       	lds	r24, 0x45
    372a:	84 30       	cpi	r24, 0x04	; 4
    372c:	21 f0       	breq	.+8      	; 0x3736 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	97 a3       	lds	r25, 0x57
    3734:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    3736:	df 91       	pop	r29
    3738:	cf 91       	pop	r28
    373a:	0f 91       	pop	r16
    373c:	ff 90       	pop	r15
    373e:	ef 90       	pop	r14
    3740:	08 95       	ret

00003742 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    3742:	cf 92       	push	r12
    3744:	df 92       	push	r13
    3746:	ef 92       	push	r14
    3748:	ff 92       	push	r15
    374a:	0f 93       	push	r16
    374c:	1f 93       	push	r17
    374e:	cf 93       	push	r28
    3750:	df 93       	push	r29
    3752:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    3754:	dc 01       	movw	r26, r24
    3756:	90 96       	adiw	r26, 0x20	; 32
    3758:	ed 91       	ld	r30, X+
    375a:	fc 91       	ld	r31, X
    375c:	91 97       	sbiw	r26, 0x21	; 33
    375e:	30 97       	sbiw	r30, 0x00	; 0
    3760:	09 f0       	breq	.+2      	; 0x3764 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    3762:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    3764:	0f 2e       	mov	r0, r31
    3766:	f8 ee       	ldi	r31, 0xE8	; 232
    3768:	ef 2e       	mov	r14, r31
    376a:	ff 24       	eor	r15, r15
    376c:	f0 2d       	mov	r31, r0
    376e:	ec 0c       	add	r14, r12
    3770:	fd 1c       	adc	r15, r13
    3772:	c7 01       	movw	r24, r14
    3774:	0e 94 f6 16 	call	0x2dec	; 0x2dec <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3778:	c8 2f       	mov	r28, r24
    377a:	d0 e0       	ldi	r29, 0x00	; 0
    377c:	20 97       	sbiw	r28, 0x00	; 0
    377e:	99 f0       	breq	.+38     	; 0x37a6 <midi_device_process+0x64>
    3780:	00 e0       	ldi	r16, 0x00	; 0
    3782:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    3784:	c7 01       	movw	r24, r14
    3786:	60 e0       	ldi	r22, 0x00	; 0
    3788:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <bytequeue_get>
    378c:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    378e:	c6 01       	movw	r24, r12
    3790:	0e 94 c6 1a 	call	0x358c	; 0x358c <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3794:	c7 01       	movw	r24, r14
    3796:	61 e0       	ldi	r22, 0x01	; 1
    3798:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    379c:	0f 5f       	subi	r16, 0xFF	; 255
    379e:	1f 4f       	sbci	r17, 0xFF	; 255
    37a0:	0c 17       	cp	r16, r28
    37a2:	1d 07       	cpc	r17, r29
    37a4:	78 f3       	brcs	.-34     	; 0x3784 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    37a6:	df 91       	pop	r29
    37a8:	cf 91       	pop	r28
    37aa:	1f 91       	pop	r17
    37ac:	0f 91       	pop	r16
    37ae:	ff 90       	pop	r15
    37b0:	ef 90       	pop	r14
    37b2:	df 90       	pop	r13
    37b4:	cf 90       	pop	r12
    37b6:	08 95       	ret

000037b8 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    37b8:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    37ba:	67 e0       	ldi	r22, 0x07	; 7
    37bc:	70 e0       	ldi	r23, 0x00	; 0
    37be:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__udivmodhi4>
    37c2:	48 2f       	mov	r20, r24
   if (remainder)
    37c4:	88 23       	and	r24, r24
    37c6:	81 f0       	breq	.+32     	; 0x37e8 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    37c8:	c9 01       	movw	r24, r18
    37ca:	67 e0       	ldi	r22, 0x07	; 7
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__udivmodhi4>
    37d2:	cb 01       	movw	r24, r22
    37d4:	88 0f       	add	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	88 0f       	add	r24, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	88 0f       	add	r24, r24
    37de:	99 1f       	adc	r25, r25
    37e0:	01 96       	adiw	r24, 0x01	; 1
    37e2:	84 0f       	add	r24, r20
    37e4:	91 1d       	adc	r25, r1
    37e6:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    37e8:	c9 01       	movw	r24, r18
    37ea:	67 e0       	ldi	r22, 0x07	; 7
    37ec:	70 e0       	ldi	r23, 0x00	; 0
    37ee:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__udivmodhi4>
    37f2:	cb 01       	movw	r24, r22
    37f4:	88 0f       	add	r24, r24
    37f6:	99 1f       	adc	r25, r25
    37f8:	88 0f       	add	r24, r24
    37fa:	99 1f       	adc	r25, r25
    37fc:	88 0f       	add	r24, r24
    37fe:	99 1f       	adc	r25, r25
}
    3800:	08 95       	ret

00003802 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3802:	48 2f       	mov	r20, r24
    3804:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3806:	a1 f0       	breq	.+40     	; 0x3830 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    3808:	9c 01       	movw	r18, r24
    380a:	36 95       	lsr	r19
    380c:	27 95       	ror	r18
    380e:	36 95       	lsr	r19
    3810:	27 95       	ror	r18
    3812:	36 95       	lsr	r19
    3814:	27 95       	ror	r18
    3816:	c9 01       	movw	r24, r18
    3818:	88 0f       	add	r24, r24
    381a:	99 1f       	adc	r25, r25
    381c:	88 0f       	add	r24, r24
    381e:	99 1f       	adc	r25, r25
    3820:	88 0f       	add	r24, r24
    3822:	99 1f       	adc	r25, r25
    3824:	82 1b       	sub	r24, r18
    3826:	93 0b       	sbc	r25, r19
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	84 0f       	add	r24, r20
    382c:	91 1d       	adc	r25, r1
    382e:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    3830:	9c 01       	movw	r18, r24
    3832:	36 95       	lsr	r19
    3834:	27 95       	ror	r18
    3836:	36 95       	lsr	r19
    3838:	27 95       	ror	r18
    383a:	36 95       	lsr	r19
    383c:	27 95       	ror	r18
    383e:	c9 01       	movw	r24, r18
    3840:	88 0f       	add	r24, r24
    3842:	99 1f       	adc	r25, r25
    3844:	88 0f       	add	r24, r24
    3846:	99 1f       	adc	r25, r25
    3848:	88 0f       	add	r24, r24
    384a:	99 1f       	adc	r25, r25
    384c:	82 1b       	sub	r24, r18
    384e:	93 0b       	sbc	r25, r19
}
    3850:	08 95       	ret

00003852 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3852:	2f 92       	push	r2
    3854:	3f 92       	push	r3
    3856:	4f 92       	push	r4
    3858:	5f 92       	push	r5
    385a:	6f 92       	push	r6
    385c:	7f 92       	push	r7
    385e:	8f 92       	push	r8
    3860:	9f 92       	push	r9
    3862:	af 92       	push	r10
    3864:	bf 92       	push	r11
    3866:	cf 92       	push	r12
    3868:	df 92       	push	r13
    386a:	ef 92       	push	r14
    386c:	ff 92       	push	r15
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	00 d0       	rcall	.+0      	; 0x3878 <sysex_encode+0x26>
    3878:	00 d0       	rcall	.+0      	; 0x387a <sysex_encode+0x28>
    387a:	00 d0       	rcall	.+0      	; 0x387c <sysex_encode+0x2a>
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
    3880:	1c 01       	movw	r2, r24
    3882:	7a 83       	std	Y+2, r23	; 0x02
    3884:	69 83       	std	Y+1, r22	; 0x01
    3886:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3888:	ca 01       	movw	r24, r20
    388a:	67 e0       	ldi	r22, 0x07	; 7
    388c:	70 e0       	ldi	r23, 0x00	; 0
    388e:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__udivmodhi4>
    3892:	2b 01       	movw	r4, r22
    3894:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3896:	61 15       	cp	r22, r1
    3898:	71 05       	cpc	r23, r1
    389a:	b1 f1       	breq	.+108    	; 0x3908 <sysex_encode+0xb6>
    389c:	81 01       	movw	r16, r2
    389e:	e9 80       	ldd	r14, Y+1	; 0x01
    38a0:	fa 80       	ldd	r15, Y+2	; 0x02
    38a2:	cc 24       	eor	r12, r12
    38a4:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38a6:	88 24       	eor	r8, r8
    38a8:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    38aa:	1e 83       	std	Y+6, r17	; 0x06
    38ac:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    38ae:	f8 01       	movw	r30, r16
    38b0:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    38b2:	fc 82       	std	Y+4, r15	; 0x04
    38b4:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38b6:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    38b8:	ab 81       	ldd	r26, Y+3	; 0x03
    38ba:	bc 81       	ldd	r27, Y+4	; 0x04
    38bc:	2d 91       	ld	r18, X+
    38be:	bc 83       	std	Y+4, r27	; 0x04
    38c0:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    38c2:	4f 5f       	subi	r20, 0xFF	; 255
    38c4:	5f 4f       	sbci	r21, 0xFF	; 255
    38c6:	82 2f       	mov	r24, r18
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	80 78       	andi	r24, 0x80	; 128
    38cc:	90 70       	andi	r25, 0x00	; 0
    38ce:	bc 01       	movw	r22, r24
    38d0:	04 2e       	mov	r0, r20
    38d2:	02 c0       	rjmp	.+4      	; 0x38d8 <sysex_encode+0x86>
    38d4:	75 95       	asr	r23
    38d6:	67 95       	ror	r22
    38d8:	0a 94       	dec	r0
    38da:	e2 f7       	brpl	.-8      	; 0x38d4 <sysex_encode+0x82>
    38dc:	ad 81       	ldd	r26, Y+5	; 0x05
    38de:	be 81       	ldd	r27, Y+6	; 0x06
    38e0:	8c 91       	ld	r24, X
    38e2:	86 2b       	or	r24, r22
    38e4:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    38e6:	2f 77       	andi	r18, 0x7F	; 127
    38e8:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    38ea:	47 30       	cpi	r20, 0x07	; 7
    38ec:	51 05       	cpc	r21, r1
    38ee:	21 f7       	brne	.-56     	; 0x38b8 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    38f0:	08 94       	sec
    38f2:	c1 1c       	adc	r12, r1
    38f4:	d1 1c       	adc	r13, r1
    38f6:	08 5f       	subi	r16, 0xF8	; 248
    38f8:	1f 4f       	sbci	r17, 0xFF	; 255
    38fa:	e7 e0       	ldi	r30, 0x07	; 7
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	ee 0e       	add	r14, r30
    3900:	ff 1e       	adc	r15, r31
    3902:	ca 14       	cp	r12, r10
    3904:	db 04       	cpc	r13, r11
    3906:	89 f6       	brne	.-94     	; 0x38aa <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3908:	c3 01       	movw	r24, r6
    390a:	67 e0       	ldi	r22, 0x07	; 7
    390c:	70 e0       	ldi	r23, 0x00	; 0
    390e:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__udivmodhi4>
   if (remainder) {
    3912:	88 23       	and	r24, r24
    3914:	d9 f1       	breq	.+118    	; 0x398c <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3916:	82 01       	movw	r16, r4
    3918:	00 0f       	add	r16, r16
    391a:	11 1f       	adc	r17, r17
    391c:	00 0f       	add	r16, r16
    391e:	11 1f       	adc	r17, r17
    3920:	00 0f       	add	r16, r16
    3922:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3924:	78 01       	movw	r14, r16
    3926:	e4 18       	sub	r14, r4
    3928:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    392a:	d1 01       	movw	r26, r2
    392c:	a0 0f       	add	r26, r16
    392e:	b1 1f       	adc	r27, r17
    3930:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3932:	68 2f       	mov	r22, r24
    3934:	70 e0       	ldi	r23, 0x00	; 0
    3936:	61 15       	cp	r22, r1
    3938:	71 05       	cpc	r23, r1
    393a:	19 f1       	breq	.+70     	; 0x3982 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    393c:	e9 81       	ldd	r30, Y+1	; 0x01
    393e:	fa 81       	ldd	r31, Y+2	; 0x02
    3940:	ee 0e       	add	r14, r30
    3942:	ff 1e       	adc	r15, r31
    3944:	c8 01       	movw	r24, r16
    3946:	01 96       	adiw	r24, 0x01	; 1
    3948:	28 0e       	add	r2, r24
    394a:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    3950:	f7 01       	movw	r30, r14
    3952:	41 91       	ld	r20, Z+
    3954:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3956:	2f 5f       	subi	r18, 0xFF	; 255
    3958:	3f 4f       	sbci	r19, 0xFF	; 255
    395a:	84 2f       	mov	r24, r20
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	80 78       	andi	r24, 0x80	; 128
    3960:	90 70       	andi	r25, 0x00	; 0
    3962:	02 2e       	mov	r0, r18
    3964:	02 c0       	rjmp	.+4      	; 0x396a <sysex_encode+0x118>
    3966:	95 95       	asr	r25
    3968:	87 95       	ror	r24
    396a:	0a 94       	dec	r0
    396c:	e2 f7       	brpl	.-8      	; 0x3966 <sysex_encode+0x114>
    396e:	9c 91       	ld	r25, X
    3970:	89 2b       	or	r24, r25
    3972:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3974:	4f 77       	andi	r20, 0x7F	; 127
    3976:	f1 01       	movw	r30, r2
    3978:	41 93       	st	Z+, r20
    397a:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    397c:	26 17       	cp	r18, r22
    397e:	37 07       	cpc	r19, r23
    3980:	38 f3       	brcs	.-50     	; 0x3950 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3982:	c8 01       	movw	r24, r16
    3984:	01 96       	adiw	r24, 0x01	; 1
    3986:	86 0f       	add	r24, r22
    3988:	97 1f       	adc	r25, r23
    398a:	07 c0       	rjmp	.+14     	; 0x399a <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    398c:	c2 01       	movw	r24, r4
    398e:	88 0f       	add	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	88 0f       	add	r24, r24
    3994:	99 1f       	adc	r25, r25
    3996:	88 0f       	add	r24, r24
    3998:	99 1f       	adc	r25, r25
   }
}
    399a:	26 96       	adiw	r28, 0x06	; 6
    399c:	0f b6       	in	r0, 0x3f	; 63
    399e:	f8 94       	cli
    39a0:	de bf       	out	0x3e, r29	; 62
    39a2:	0f be       	out	0x3f, r0	; 63
    39a4:	cd bf       	out	0x3d, r28	; 61
    39a6:	df 91       	pop	r29
    39a8:	cf 91       	pop	r28
    39aa:	1f 91       	pop	r17
    39ac:	0f 91       	pop	r16
    39ae:	ff 90       	pop	r15
    39b0:	ef 90       	pop	r14
    39b2:	df 90       	pop	r13
    39b4:	cf 90       	pop	r12
    39b6:	bf 90       	pop	r11
    39b8:	af 90       	pop	r10
    39ba:	9f 90       	pop	r9
    39bc:	8f 90       	pop	r8
    39be:	7f 90       	pop	r7
    39c0:	6f 90       	pop	r6
    39c2:	5f 90       	pop	r5
    39c4:	4f 90       	pop	r4
    39c6:	3f 90       	pop	r3
    39c8:	2f 90       	pop	r2
    39ca:	08 95       	ret

000039cc <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    39cc:	6f 92       	push	r6
    39ce:	7f 92       	push	r7
    39d0:	8f 92       	push	r8
    39d2:	9f 92       	push	r9
    39d4:	af 92       	push	r10
    39d6:	bf 92       	push	r11
    39d8:	cf 92       	push	r12
    39da:	df 92       	push	r13
    39dc:	ef 92       	push	r14
    39de:	ff 92       	push	r15
    39e0:	0f 93       	push	r16
    39e2:	1f 93       	push	r17
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	3c 01       	movw	r6, r24
    39ea:	4b 01       	movw	r8, r22
    39ec:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    39ee:	42 30       	cpi	r20, 0x02	; 2
    39f0:	51 05       	cpc	r21, r1
    39f2:	08 f4       	brcc	.+2      	; 0x39f6 <sysex_decode+0x2a>
    39f4:	6f c0       	rjmp	.+222    	; 0x3ad4 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    39f6:	7a 01       	movw	r14, r20
    39f8:	f6 94       	lsr	r15
    39fa:	e7 94       	ror	r14
    39fc:	f6 94       	lsr	r15
    39fe:	e7 94       	ror	r14
    3a00:	f6 94       	lsr	r15
    3a02:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3a04:	e1 14       	cp	r14, r1
    3a06:	f1 04       	cpc	r15, r1
    3a08:	29 f1       	breq	.+74     	; 0x3a54 <sysex_decode+0x88>
    3a0a:	eb 01       	movw	r28, r22
    3a0c:	b3 01       	movw	r22, r6
    3a0e:	00 e0       	ldi	r16, 0x00	; 0
    3a10:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a12:	cc 24       	eor	r12, r12
    3a14:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a16:	de 01       	movw	r26, r28
    3a18:	11 96       	adiw	r26, 0x01	; 1
    3a1a:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a1c:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3a1e:	2d 91       	ld	r18, X+
    3a20:	2f 77       	andi	r18, 0x7F	; 127
    3a22:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a24:	4f 5f       	subi	r20, 0xFF	; 255
    3a26:	5f 4f       	sbci	r21, 0xFF	; 255
    3a28:	88 81       	ld	r24, Y
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	04 2e       	mov	r0, r20
    3a2e:	02 c0       	rjmp	.+4      	; 0x3a34 <sysex_decode+0x68>
    3a30:	88 0f       	add	r24, r24
    3a32:	99 1f       	adc	r25, r25
    3a34:	0a 94       	dec	r0
    3a36:	e2 f7       	brpl	.-8      	; 0x3a30 <sysex_decode+0x64>
    3a38:	80 78       	andi	r24, 0x80	; 128
    3a3a:	28 2b       	or	r18, r24
    3a3c:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3a3e:	47 30       	cpi	r20, 0x07	; 7
    3a40:	51 05       	cpc	r21, r1
    3a42:	69 f7       	brne	.-38     	; 0x3a1e <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3a44:	0f 5f       	subi	r16, 0xFF	; 255
    3a46:	1f 4f       	sbci	r17, 0xFF	; 255
    3a48:	28 96       	adiw	r28, 0x08	; 8
    3a4a:	69 5f       	subi	r22, 0xF9	; 249
    3a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a4e:	0e 15       	cp	r16, r14
    3a50:	1f 05       	cpc	r17, r15
    3a52:	09 f7       	brne	.-62     	; 0x3a16 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3a54:	5a 2d       	mov	r21, r10
    3a56:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3a58:	99 f1       	breq	.+102    	; 0x3ac0 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3a5a:	e7 01       	movw	r28, r14
    3a5c:	cc 0f       	add	r28, r28
    3a5e:	dd 1f       	adc	r29, r29
    3a60:	cc 0f       	add	r28, r28
    3a62:	dd 1f       	adc	r29, r29
    3a64:	cc 0f       	add	r28, r28
    3a66:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3a68:	8e 01       	movw	r16, r28
    3a6a:	0e 19       	sub	r16, r14
    3a6c:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3a6e:	65 2f       	mov	r22, r21
    3a70:	70 e0       	ldi	r23, 0x00	; 0
    3a72:	61 50       	subi	r22, 0x01	; 1
    3a74:	70 40       	sbci	r23, 0x00	; 0
    3a76:	f9 f0       	breq	.+62     	; 0x3ab6 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3a78:	ce 01       	movw	r24, r28
    3a7a:	01 96       	adiw	r24, 0x01	; 1
    3a7c:	d4 01       	movw	r26, r8
    3a7e:	a8 0f       	add	r26, r24
    3a80:	b9 1f       	adc	r27, r25
    3a82:	f3 01       	movw	r30, r6
    3a84:	e0 0f       	add	r30, r16
    3a86:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a8c:	c8 0d       	add	r28, r8
    3a8e:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3a90:	4d 91       	ld	r20, X+
    3a92:	4f 77       	andi	r20, 0x7F	; 127
    3a94:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3a96:	2f 5f       	subi	r18, 0xFF	; 255
    3a98:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9a:	88 81       	ld	r24, Y
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	02 2e       	mov	r0, r18
    3aa0:	02 c0       	rjmp	.+4      	; 0x3aa6 <sysex_decode+0xda>
    3aa2:	88 0f       	add	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	0a 94       	dec	r0
    3aa8:	e2 f7       	brpl	.-8      	; 0x3aa2 <sysex_decode+0xd6>
    3aaa:	80 78       	andi	r24, 0x80	; 128
    3aac:	48 2b       	or	r20, r24
    3aae:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3ab0:	26 17       	cp	r18, r22
    3ab2:	37 07       	cpc	r19, r23
    3ab4:	68 f3       	brcs	.-38     	; 0x3a90 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3ab6:	c8 01       	movw	r24, r16
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	85 0f       	add	r24, r21
    3abc:	91 1d       	adc	r25, r1
    3abe:	0c c0       	rjmp	.+24     	; 0x3ad8 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3ac0:	c7 01       	movw	r24, r14
    3ac2:	88 0f       	add	r24, r24
    3ac4:	99 1f       	adc	r25, r25
    3ac6:	88 0f       	add	r24, r24
    3ac8:	99 1f       	adc	r25, r25
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	8e 19       	sub	r24, r14
    3ad0:	9f 09       	sbc	r25, r15
    3ad2:	02 c0       	rjmp	.+4      	; 0x3ad8 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	ff 90       	pop	r15
    3ae2:	ef 90       	pop	r14
    3ae4:	df 90       	pop	r13
    3ae6:	cf 90       	pop	r12
    3ae8:	bf 90       	pop	r11
    3aea:	af 90       	pop	r10
    3aec:	9f 90       	pop	r9
    3aee:	8f 90       	pop	r8
    3af0:	7f 90       	pop	r7
    3af2:	6f 90       	pop	r6
    3af4:	08 95       	ret

00003af6 <__mulsi3>:
    3af6:	62 9f       	mul	r22, r18
    3af8:	d0 01       	movw	r26, r0
    3afa:	73 9f       	mul	r23, r19
    3afc:	f0 01       	movw	r30, r0
    3afe:	82 9f       	mul	r24, r18
    3b00:	e0 0d       	add	r30, r0
    3b02:	f1 1d       	adc	r31, r1
    3b04:	64 9f       	mul	r22, r20
    3b06:	e0 0d       	add	r30, r0
    3b08:	f1 1d       	adc	r31, r1
    3b0a:	92 9f       	mul	r25, r18
    3b0c:	f0 0d       	add	r31, r0
    3b0e:	83 9f       	mul	r24, r19
    3b10:	f0 0d       	add	r31, r0
    3b12:	74 9f       	mul	r23, r20
    3b14:	f0 0d       	add	r31, r0
    3b16:	65 9f       	mul	r22, r21
    3b18:	f0 0d       	add	r31, r0
    3b1a:	99 27       	eor	r25, r25
    3b1c:	72 9f       	mul	r23, r18
    3b1e:	b0 0d       	add	r27, r0
    3b20:	e1 1d       	adc	r30, r1
    3b22:	f9 1f       	adc	r31, r25
    3b24:	63 9f       	mul	r22, r19
    3b26:	b0 0d       	add	r27, r0
    3b28:	e1 1d       	adc	r30, r1
    3b2a:	f9 1f       	adc	r31, r25
    3b2c:	bd 01       	movw	r22, r26
    3b2e:	cf 01       	movw	r24, r30
    3b30:	11 24       	eor	r1, r1
    3b32:	08 95       	ret

00003b34 <__udivmodhi4>:
    3b34:	aa 1b       	sub	r26, r26
    3b36:	bb 1b       	sub	r27, r27
    3b38:	51 e1       	ldi	r21, 0x11	; 17
    3b3a:	07 c0       	rjmp	.+14     	; 0x3b4a <__udivmodhi4_ep>

00003b3c <__udivmodhi4_loop>:
    3b3c:	aa 1f       	adc	r26, r26
    3b3e:	bb 1f       	adc	r27, r27
    3b40:	a6 17       	cp	r26, r22
    3b42:	b7 07       	cpc	r27, r23
    3b44:	10 f0       	brcs	.+4      	; 0x3b4a <__udivmodhi4_ep>
    3b46:	a6 1b       	sub	r26, r22
    3b48:	b7 0b       	sbc	r27, r23

00003b4a <__udivmodhi4_ep>:
    3b4a:	88 1f       	adc	r24, r24
    3b4c:	99 1f       	adc	r25, r25
    3b4e:	5a 95       	dec	r21
    3b50:	a9 f7       	brne	.-22     	; 0x3b3c <__udivmodhi4_loop>
    3b52:	80 95       	com	r24
    3b54:	90 95       	com	r25
    3b56:	bc 01       	movw	r22, r24
    3b58:	cd 01       	movw	r24, r26
    3b5a:	08 95       	ret

00003b5c <__divmodhi4>:
    3b5c:	97 fb       	bst	r25, 7
    3b5e:	09 2e       	mov	r0, r25
    3b60:	07 26       	eor	r0, r23
    3b62:	0a d0       	rcall	.+20     	; 0x3b78 <__divmodhi4_neg1>
    3b64:	77 fd       	sbrc	r23, 7
    3b66:	04 d0       	rcall	.+8      	; 0x3b70 <__divmodhi4_neg2>
    3b68:	e5 df       	rcall	.-54     	; 0x3b34 <__udivmodhi4>
    3b6a:	06 d0       	rcall	.+12     	; 0x3b78 <__divmodhi4_neg1>
    3b6c:	00 20       	and	r0, r0
    3b6e:	1a f4       	brpl	.+6      	; 0x3b76 <__divmodhi4_exit>

00003b70 <__divmodhi4_neg2>:
    3b70:	70 95       	com	r23
    3b72:	61 95       	neg	r22
    3b74:	7f 4f       	sbci	r23, 0xFF	; 255

00003b76 <__divmodhi4_exit>:
    3b76:	08 95       	ret

00003b78 <__divmodhi4_neg1>:
    3b78:	f6 f7       	brtc	.-4      	; 0x3b76 <__divmodhi4_exit>
    3b7a:	90 95       	com	r25
    3b7c:	81 95       	neg	r24
    3b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b80:	08 95       	ret

00003b82 <memcpy>:
    3b82:	fb 01       	movw	r30, r22
    3b84:	dc 01       	movw	r26, r24
    3b86:	02 c0       	rjmp	.+4      	; 0x3b8c <memcpy+0xa>
    3b88:	01 90       	ld	r0, Z+
    3b8a:	0d 92       	st	X+, r0
    3b8c:	41 50       	subi	r20, 0x01	; 1
    3b8e:	50 40       	sbci	r21, 0x00	; 0
    3b90:	d8 f7       	brcc	.-10     	; 0x3b88 <memcpy+0x6>
    3b92:	08 95       	ret

00003b94 <memmove>:
    3b94:	68 17       	cp	r22, r24
    3b96:	79 07       	cpc	r23, r25
    3b98:	68 f4       	brcc	.+26     	; 0x3bb4 <memmove+0x20>
    3b9a:	fb 01       	movw	r30, r22
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	e4 0f       	add	r30, r20
    3ba0:	f5 1f       	adc	r31, r21
    3ba2:	a4 0f       	add	r26, r20
    3ba4:	b5 1f       	adc	r27, r21
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <memmove+0x18>
    3ba8:	02 90       	ld	r0, -Z
    3baa:	0e 92       	st	-X, r0
    3bac:	41 50       	subi	r20, 0x01	; 1
    3bae:	50 40       	sbci	r21, 0x00	; 0
    3bb0:	d8 f7       	brcc	.-10     	; 0x3ba8 <memmove+0x14>
    3bb2:	08 95       	ret
    3bb4:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <memcpy>

00003bb8 <__eerd_block_m6450a>:
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22

00003bbc <__eerd_blraw_m6450a>:
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	f9 99       	sbic	0x1f, 1	; 31
    3bc0:	fe cf       	rjmp	.-4      	; 0x3bbe <__eerd_blraw_m6450a+0x2>
    3bc2:	06 c0       	rjmp	.+12     	; 0x3bd0 <__eerd_blraw_m6450a+0x14>
    3bc4:	f2 bd       	out	0x22, r31	; 34
    3bc6:	e1 bd       	out	0x21, r30	; 33
    3bc8:	f8 9a       	sbi	0x1f, 0	; 31
    3bca:	31 96       	adiw	r30, 0x01	; 1
    3bcc:	00 b4       	in	r0, 0x20	; 32
    3bce:	0d 92       	st	X+, r0
    3bd0:	41 50       	subi	r20, 0x01	; 1
    3bd2:	50 40       	sbci	r21, 0x00	; 0
    3bd4:	b8 f7       	brcc	.-18     	; 0x3bc4 <__eerd_blraw_m6450a+0x8>
    3bd6:	08 95       	ret

00003bd8 <__eerd_word_m6450a>:
    3bd8:	a8 e1       	ldi	r26, 0x18	; 24
    3bda:	b0 e0       	ldi	r27, 0x00	; 0
    3bdc:	42 e0       	ldi	r20, 0x02	; 2
    3bde:	50 e0       	ldi	r21, 0x00	; 0
    3be0:	0c 94 de 1d 	jmp	0x3bbc	; 0x3bbc <__eerd_blraw_m6450a>

00003be4 <__eeupd_block_m6450a>:
    3be4:	dc 01       	movw	r26, r24
    3be6:	a4 0f       	add	r26, r20
    3be8:	b5 1f       	adc	r27, r21
    3bea:	41 50       	subi	r20, 0x01	; 1
    3bec:	50 40       	sbci	r21, 0x00	; 0
    3bee:	48 f0       	brcs	.+18     	; 0x3c02 <__eeupd_block_m6450a+0x1e>
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	84 0f       	add	r24, r20
    3bf4:	95 1f       	adc	r25, r21
    3bf6:	2e 91       	ld	r18, -X
    3bf8:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__eeupd_r18_m6450a>
    3bfc:	41 50       	subi	r20, 0x01	; 1
    3bfe:	50 40       	sbci	r21, 0x00	; 0
    3c00:	d0 f7       	brcc	.-12     	; 0x3bf6 <__eeupd_block_m6450a+0x12>
    3c02:	08 95       	ret

00003c04 <__eeupd_byte_m6450a>:
    3c04:	26 2f       	mov	r18, r22

00003c06 <__eeupd_r18_m6450a>:
    3c06:	f9 99       	sbic	0x1f, 1	; 31
    3c08:	fe cf       	rjmp	.-4      	; 0x3c06 <__eeupd_r18_m6450a>
    3c0a:	92 bd       	out	0x22, r25	; 34
    3c0c:	81 bd       	out	0x21, r24	; 33
    3c0e:	f8 9a       	sbi	0x1f, 0	; 31
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	00 b4       	in	r0, 0x20	; 32
    3c14:	02 16       	cp	r0, r18
    3c16:	31 f0       	breq	.+12     	; 0x3c24 <__eeupd_r18_m6450a+0x1e>
    3c18:	20 bd       	out	0x20, r18	; 32
    3c1a:	0f b6       	in	r0, 0x3f	; 63
    3c1c:	f8 94       	cli
    3c1e:	fa 9a       	sbi	0x1f, 2	; 31
    3c20:	f9 9a       	sbi	0x1f, 1	; 31
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	08 95       	ret

00003c26 <__eeupd_word_m6450a>:
    3c26:	01 96       	adiw	r24, 0x01	; 1
    3c28:	27 2f       	mov	r18, r23
    3c2a:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__eeupd_r18_m6450a>
    3c2e:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <__eeupd_byte_m6450a>

00003c32 <_exit>:
    3c32:	f8 94       	cli

00003c34 <__stop_program>:
    3c34:	ff cf       	rjmp	.-2      	; 0x3c34 <__stop_program>
