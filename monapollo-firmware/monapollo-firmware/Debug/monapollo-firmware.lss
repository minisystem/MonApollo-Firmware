
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  000019a6  00001a3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000110  0080018e  0080018e  00001ac8  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00002300  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003792  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc1  00000000  00000000  00005cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015c1  00000000  00000000  00006a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000980  00000000  00000000  00008054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001027  00000000  00000000  000089d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e88  00000000  00000000  000099fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000b883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_9>
      28:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e6 ea       	ldi	r30, 0xA6	; 166
      78:	f9 e1       	ldi	r31, 0x19	; 25
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	12 e0       	ldi	r17, 0x02	; 2
      88:	ae e8       	ldi	r26, 0x8E	; 142
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ae 39       	cpi	r26, 0x9E	; 158
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 40 02 	call	0x480	; 0x480 <main>
      9a:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(uint8_t mux_select, uint8_t channel) {
	
	DATA_BUS = channel;
      c8:	62 b9       	out	0x02, r22	; 2
	POT_MUX &= ~(1<<mux_select);
      ca:	ea ed       	ldi	r30, 0xDA	; 218
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	40 81       	ld	r20, Z
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <read_pot+0x14>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <read_pot+0x10>
      e0:	cb 01       	movw	r24, r22
      e2:	26 2f       	mov	r18, r22
      e4:	20 95       	com	r18
      e6:	42 23       	and	r20, r18
      e8:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	7d e0       	ldi	r23, 0x0D	; 13
      ec:	7a 95       	dec	r23
      ee:	f1 f7       	brne	.-4      	; 0xec <read_pot+0x24>
      f0:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now.
	ADCSRA |= (1<<ADSC); //start ADC conversion
      f2:	ea e7       	ldi	r30, 0x7A	; 122
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	20 81       	ld	r18, Z
      f8:	20 64       	ori	r18, 0x40	; 64
      fa:	20 83       	st	Z, r18
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
      fc:	20 81       	ld	r18, Z
      fe:	26 fd       	sbrc	r18, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <read_pot+0x34>
	POT_MUX |= (1<<mux_select); //disable pot multiplexer U2
     102:	ea ed       	ldi	r30, 0xDA	; 218
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	90 81       	ld	r25, Z
     108:	89 2b       	or	r24, r25
     10a:	80 83       	st	Z, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     10c:	80 91 78 00 	lds	r24, 0x0078
     110:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     112:	40 91 79 00 	lds	r20, 0x0079
     116:	34 2f       	mov	r19, r20
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	82 2b       	or	r24, r18
     11c:	93 2b       	or	r25, r19
			
	return adc_read;
     11e:	08 95       	ret

00000120 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     120:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     122:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     124:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     126:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     128:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     12a:	8c 91       	ld	r24, X
     12c:	82 b9       	out	0x02, r24	; 2
     12e:	8d e0       	ldi	r24, 0x0D	; 13
     130:	8a 95       	dec	r24
     132:	f1 f7       	brne	.-4      	; 0x130 <set_control_voltage+0x10>
     134:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     136:	ea ed       	ldi	r30, 0xDA	; 218
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	40 81       	ld	r20, Z
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	c9 01       	movw	r24, r18
     142:	11 96       	adiw	r26, 0x01	; 1
     144:	0c 90       	ld	r0, X
     146:	11 97       	sbiw	r26, 0x01	; 1
     148:	02 c0       	rjmp	.+4      	; 0x14e <set_control_voltage+0x2e>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	0a 94       	dec	r0
     150:	e2 f7       	brpl	.-8      	; 0x14a <set_control_voltage+0x2a>
     152:	84 2b       	or	r24, r20
     154:	80 83       	st	Z, r24
     156:	82 e4       	ldi	r24, 0x42	; 66
     158:	8a 95       	dec	r24
     15a:	f1 f7       	brne	.-4      	; 0x158 <set_control_voltage+0x38>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <set_control_voltage+0x3e>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     15e:	80 81       	ld	r24, Z
     160:	11 96       	adiw	r26, 0x01	; 1
     162:	0c 90       	ld	r0, X
     164:	11 97       	sbiw	r26, 0x01	; 1
     166:	02 c0       	rjmp	.+4      	; 0x16c <set_control_voltage+0x4c>
     168:	22 0f       	add	r18, r18
     16a:	33 1f       	adc	r19, r19
     16c:	0a 94       	dec	r0
     16e:	e2 f7       	brpl	.-8      	; 0x168 <set_control_voltage+0x48>
     170:	20 95       	com	r18
     172:	28 23       	and	r18, r24
     174:	20 83       	st	Z, r18
	
}	
     176:	08 95       	ret

00000178 <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     178:	83 b3       	in	r24, 0x13	; 19
     17a:	83 60       	ori	r24, 0x03	; 3
     17c:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     182:	97 b1       	in	r25, 0x07	; 7
     184:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     186:	e9 ed       	ldi	r30, 0xD9	; 217
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	8f 60       	ori	r24, 0x0F	; 15
     18e:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     190:	ea ed       	ldi	r30, 0xDA	; 218
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	80 7f       	andi	r24, 0xF0	; 240
     198:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     19a:	84 b3       	in	r24, 0x14	; 20
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     1a0:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     1a2:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     1a4:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     1a6:	a0 9a       	sbi	0x14, 0	; 20
}
     1a8:	08 95       	ret

000001aa <set_dac>:

void set_dac(uint8_t dac_mux_address, uint8_t channel, uint16_t value)
{
	
	
	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     1aa:	4b b9       	out	0x0b, r20	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     1ac:	58 b9       	out	0x08, r21	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     1ae:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     1b0:	a0 9a       	sbi	0x14, 0	; 20
	
	DATA_BUS = channel; //set channel for DG408 multiplexer output
     1b2:	62 b9       	out	0x02, r22	; 2
     1b4:	2d e0       	ldi	r18, 0x0D	; 13
     1b6:	2a 95       	dec	r18
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <set_dac+0xc>
     1ba:	00 00       	nop

	_delay_us(2); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<dac_mux_address); //enable multiplexer
     1bc:	ea ed       	ldi	r30, 0xDA	; 218
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	40 81       	ld	r20, Z
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	b9 01       	movw	r22, r18
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <set_dac+0x24>
     1ca:	66 0f       	add	r22, r22
     1cc:	77 1f       	adc	r23, r23
     1ce:	8a 95       	dec	r24
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <set_dac+0x20>
     1d2:	cb 01       	movw	r24, r22
     1d4:	94 2f       	mov	r25, r20
     1d6:	98 2b       	or	r25, r24
     1d8:	90 83       	st	Z, r25
     1da:	72 e4       	ldi	r23, 0x42	; 66
     1dc:	7a 95       	dec	r23
     1de:	f1 f7       	brne	.-4      	; 0x1dc <set_dac+0x32>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <set_dac+0x38>
	_delay_us(10); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<dac_mux_address); //disable multiplexer
     1e2:	90 81       	ld	r25, Z
     1e4:	80 95       	com	r24
     1e6:	89 23       	and	r24, r25
     1e8:	80 83       	st	Z, r24
	
}
     1ea:	08 95       	ret

000001ec <display_dec>:
#include "display.h"
#include "hardware.h"
#include "display_map.h"

void display_dec(uint16_t number, uint8_t digit)
{
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	2a 97       	sbiw	r28, 0x0a	; 10
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	f8 94       	cli
     1fa:	de bf       	out	0x3e, r29	; 62
     1fc:	0f be       	out	0x3f, r0	; 63
     1fe:	cd bf       	out	0x3d, r28	; 61
	uint8_t dec[] = {
     200:	de 01       	movw	r26, r28
     202:	11 96       	adiw	r26, 0x01	; 1
     204:	ee e3       	ldi	r30, 0x3E	; 62
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	3a e0       	ldi	r19, 0x0A	; 10
     20a:	01 90       	ld	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	31 50       	subi	r19, 0x01	; 1
     210:	e1 f7       	brne	.-8      	; 0x20a <display_dec+0x1e>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     212:	3f ef       	ldi	r19, 0xFF	; 255
     214:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     216:	ea ed       	ldi	r30, 0xDA	; 218
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	30 81       	ld	r19, Z
     21c:	30 61       	ori	r19, 0x10	; 16
     21e:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     220:	30 81       	ld	r19, Z
     222:	3f 7e       	andi	r19, 0xEF	; 239
     224:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
     226:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     228:	30 81       	ld	r19, Z
     22a:	30 62       	ori	r19, 0x20	; 32
     22c:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     22e:	30 81       	ld	r19, Z
     230:	3f 7d       	andi	r19, 0xDF	; 223
     232:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
     234:	62 30       	cpi	r22, 0x02	; 2
     236:	f9 f0       	breq	.+62     	; 0x276 <display_dec+0x8a>
     238:	63 30       	cpi	r22, 0x03	; 3
     23a:	18 f4       	brcc	.+6      	; 0x242 <display_dec+0x56>
     23c:	61 30       	cpi	r22, 0x01	; 1
     23e:	a1 f5       	brne	.+104    	; 0x2a8 <display_dec+0xbc>
     240:	0d c0       	rjmp	.+26     	; 0x25c <display_dec+0x70>
     242:	64 30       	cpi	r22, 0x04	; 4
     244:	29 f1       	breq	.+74     	; 0x290 <display_dec+0xa4>
     246:	68 30       	cpi	r22, 0x08	; 8
     248:	79 f5       	brne	.+94     	; 0x2a8 <display_dec+0xbc>
		
		case ONES:
		cathode_byte = dec[(number % 10)]; //print first decimal digit
     24a:	6a e0       	ldi	r22, 0x0A	; 10
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
     252:	fe 01       	movw	r30, r28
     254:	e8 0f       	add	r30, r24
     256:	f9 1f       	adc	r31, r25
     258:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     25a:	26 c0       	rjmp	.+76     	; 0x2a8 <display_dec+0xbc>
		
		case TENS:
		cathode_byte = dec[((number % 100) / 10)]; //print second decimal digit
     25c:	64 e6       	ldi	r22, 0x64	; 100
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
     264:	6a e0       	ldi	r22, 0x0A	; 10
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
     26c:	fe 01       	movw	r30, r28
     26e:	e6 0f       	add	r30, r22
     270:	f7 1f       	adc	r31, r23
     272:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     274:	19 c0       	rjmp	.+50     	; 0x2a8 <display_dec+0xbc>
		
		case HUNDS:
		cathode_byte = dec[((number % 1000) / 100)]; //print third decimal digit
     276:	68 ee       	ldi	r22, 0xE8	; 232
     278:	73 e0       	ldi	r23, 0x03	; 3
     27a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
     27e:	64 e6       	ldi	r22, 0x64	; 100
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
     286:	fe 01       	movw	r30, r28
     288:	e6 0f       	add	r30, r22
     28a:	f7 1f       	adc	r31, r23
     28c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
     28e:	0c c0       	rjmp	.+24     	; 0x2a8 <display_dec+0xbc>
		
		case THOUS:
		cathode_byte = dec[((number % 10000) / 1000)]; //print fourth decimal digit
     290:	60 e1       	ldi	r22, 0x10	; 16
     292:	77 e2       	ldi	r23, 0x27	; 39
     294:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
     298:	68 ee       	ldi	r22, 0xE8	; 232
     29a:	73 e0       	ldi	r23, 0x03	; 3
     29c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
     2a0:	fe 01       	movw	r30, r28
     2a2:	e6 0f       	add	r30, r22
     2a4:	f7 1f       	adc	r31, r23
     2a6:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     2a8:	20 95       	com	r18
     2aa:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2ac:	ea ed       	ldi	r30, 0xDA	; 218
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	80 61       	ori	r24, 0x10	; 16
     2b4:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     2b6:	80 81       	ld	r24, Z
     2b8:	8f 7e       	andi	r24, 0xEF	; 239
     2ba:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
     2bc:	2a 96       	adiw	r28, 0x0a	; 10
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <__vector_10>:
#include <avr/interrupt.h>

#include "hardware.h"
#include "tune.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	ef 93       	push	r30
     2de:	ff 93       	push	r31
	
	PORTB ^= (1<<ARP_SYNC_LED); //toggle arp sync LED
     2e0:	85 b1       	in	r24, 0x05	; 5
     2e2:	80 58       	subi	r24, 0x80	; 128
     2e4:	85 b9       	out	0x05, r24	; 5
	if (period_counter == 0) {
     2e6:	80 91 b0 01 	lds	r24, 0x01B0
     2ea:	88 23       	and	r24, r24
     2ec:	a1 f4       	brne	.+40     	; 0x316 <__vector_10+0x48>
		
		no_overflow = TRUE;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 93 8c 01 	sts	0x018C, r24
		period_counter = 1; //set period counter to 1
     2f4:	80 93 b0 01 	sts	0x01B0, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= (1<<CS11) | (1<<CS10); //clock /64 to run at 312.5 KHz
     2f8:	e1 e8       	ldi	r30, 0x81	; 129
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	83 60       	ori	r24, 0x03	; 3
     300:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     302:	ef e6       	ldi	r30, 0x6F	; 111
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	81 60       	ori	r24, 0x01	; 1
     30a:	80 83       	st	Z, r24
		TCNT1 = 0; //clear timer1 16 bit register
     30c:	10 92 85 00 	sts	0x0085, r1
     310:	10 92 84 00 	sts	0x0084, r1
     314:	0d c0       	rjmp	.+26     	; 0x330 <__vector_10+0x62>
	} else {
		
		osc_count = TCNT1;
     316:	80 91 84 00 	lds	r24, 0x0084
     31a:	90 91 85 00 	lds	r25, 0x0085
     31e:	90 93 ae 01 	sts	0x01AE, r25
     322:	80 93 ad 01 	sts	0x01AD, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     326:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	80 93 af 01 	sts	0x01AF, r24
	}
	
	
	TCNT0 = 0; //reset timer
     330:	16 bc       	out	0x26, r1	; 38
	//value_to_display = TCNT0;
	
}
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <__vector_9>:

ISR (TIMER1_OVF_vect) {
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     34e:	10 92 8c 01 	sts	0x018C, r1
	
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <note_on_event>:
volatile uint16_t vco1_init_cv = 0;
volatile uint16_t vco2_init_cv = 0;

void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	value_to_display = note;
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	50 93 4d 01 	sts	0x014D, r21
     362:	40 93 4c 01 	sts	0x014C, r20
	
	if (velocity == 0) {
     366:	22 23       	and	r18, r18
     368:	11 f4       	brne	.+4      	; 0x36e <note_on_event+0x12>
		
		PORTF &= ~(1<<GATE);
     36a:	89 98       	cbi	0x11, 1	; 17
     36c:	08 95       	ret
	} else {
		PORTF |= (1<<GATE);
     36e:	89 9a       	sbi	0x11, 1	; 17
     370:	08 95       	ret

00000372 <note_off_event>:
	}
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
	
	PORTF &= ~(1<<GATE);
     372:	89 98       	cbi	0x11, 1	; 17
}
     374:	08 95       	ret

00000376 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     376:	87 e2       	ldi	r24, 0x27	; 39
     378:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     37c:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     380:	88 e9       	ldi	r24, 0x98	; 152
     382:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     386:	08 95       	ret

00000388 <__vector_13>:
	THOUS,
};



ISR (USART_RX_vect) { // USART receive interrupt
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	2f 93       	push	r18
     394:	3f 93       	push	r19
     396:	4f 93       	push	r20
     398:	5f 93       	push	r21
     39a:	6f 93       	push	r22
     39c:	7f 93       	push	r23
     39e:	8f 93       	push	r24
     3a0:	9f 93       	push	r25
     3a2:	af 93       	push	r26
     3a4:	bf 93       	push	r27
     3a6:	ef 93       	push	r30
     3a8:	ff 93       	push	r31
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	0f 92       	push	r0
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
	 
	uint8_t inByte = UDR0;
     3b4:	80 91 c6 00 	lds	r24, 0x00C6
     3b8:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte);	
     3ba:	81 eb       	ldi	r24, 0xB1	; 177
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	ae 01       	movw	r20, r28
     3c2:	4f 5f       	subi	r20, 0xFF	; 255
     3c4:	5f 4f       	sbci	r21, 0xFF	; 255
     3c6:	0e 94 9d 08 	call	0x113a	; 0x113a <midi_device_input>
	  	
}
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	ff 91       	pop	r31
     3d2:	ef 91       	pop	r30
     3d4:	bf 91       	pop	r27
     3d6:	af 91       	pop	r26
     3d8:	9f 91       	pop	r25
     3da:	8f 91       	pop	r24
     3dc:	7f 91       	pop	r23
     3de:	6f 91       	pop	r22
     3e0:	5f 91       	pop	r21
     3e2:	4f 91       	pop	r20
     3e4:	3f 91       	pop	r19
     3e6:	2f 91       	pop	r18
     3e8:	0f 90       	pop	r0
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	0f 90       	pop	r0
     3ee:	1f 90       	pop	r1
     3f0:	18 95       	reti

000003f2 <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
     3f2:	1f 92       	push	r1
     3f4:	0f 92       	push	r0
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	0f 92       	push	r0
     3fa:	11 24       	eor	r1, r1
     3fc:	2f 93       	push	r18
     3fe:	3f 93       	push	r19
     400:	4f 93       	push	r20
     402:	5f 93       	push	r21
     404:	6f 93       	push	r22
     406:	7f 93       	push	r23
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31
	
	display_dec(value_to_display, digit[place]);
     414:	80 91 4c 01 	lds	r24, 0x014C
     418:	90 91 4d 01 	lds	r25, 0x014D
     41c:	20 91 96 01 	lds	r18, 0x0196
     420:	e8 e4       	ldi	r30, 0x48	; 72
     422:	f1 e0       	ldi	r31, 0x01	; 1
     424:	e2 0f       	add	r30, r18
     426:	f1 1d       	adc	r31, r1
     428:	60 81       	ld	r22, Z
     42a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <display_dec>
	
	scan_pots_and_update_control_voltages();		
     42e:	0e 94 8d 02 	call	0x51a	; 0x51a <scan_pots_and_update_control_voltages>

		
	//do SPI read/write every 5 interrupts (16.5 ms)
	if (switch_timer++ == 5)
     432:	80 91 97 01 	lds	r24, 0x0197
     436:	98 2f       	mov	r25, r24
     438:	9f 5f       	subi	r25, 0xFF	; 255
     43a:	90 93 97 01 	sts	0x0197, r25
     43e:	85 30       	cpi	r24, 0x05	; 5
     440:	21 f4       	brne	.+8      	; 0x44a <__vector_5+0x58>
	{
		switch_timer = 0;
     442:	10 92 97 01 	sts	0x0197, r1
		update_spi();	
     446:	0e 94 68 03 	call	0x6d0	; 0x6d0 <update_spi>
			  	
	}
		
	//increment digit display place
	if (place++ == 3) //post increment
     44a:	80 91 96 01 	lds	r24, 0x0196
     44e:	98 2f       	mov	r25, r24
     450:	9f 5f       	subi	r25, 0xFF	; 255
     452:	90 93 96 01 	sts	0x0196, r25
     456:	83 30       	cpi	r24, 0x03	; 3
     458:	11 f4       	brne	.+4      	; 0x45e <__vector_5+0x6c>
	{
		place = 0;
     45a:	10 92 96 01 	sts	0x0196, r1
	}
	

	
}	
     45e:	ff 91       	pop	r31
     460:	ef 91       	pop	r30
     462:	bf 91       	pop	r27
     464:	af 91       	pop	r26
     466:	9f 91       	pop	r25
     468:	8f 91       	pop	r24
     46a:	7f 91       	pop	r23
     46c:	6f 91       	pop	r22
     46e:	5f 91       	pop	r21
     470:	4f 91       	pop	r20
     472:	3f 91       	pop	r19
     474:	2f 91       	pop	r18
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     480:	80 e8       	ldi	r24, 0x80	; 128
     482:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
     484:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     486:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
     488:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     48a:	9a 9a       	sbi	0x13, 2	; 19
	//PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
	PORTG |= (1<<TUNE_SELECT);
     48c:	a2 9a       	sbi	0x14, 2	; 20
	
	setup_spi(); 
     48e:	0e 94 49 03 	call	0x692	; 0x692 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     492:	a9 ed       	ldi	r26, 0xD9	; 217
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	8c 91       	ld	r24, X
     498:	80 6c       	ori	r24, 0xC0	; 192
     49a:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     49c:	ea ed       	ldi	r30, 0xDA	; 218
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	80 6c       	ori	r24, 0xC0	; 192
     4a4:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     4a6:	81 b1       	in	r24, 0x01	; 1
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     4ac:	92 b1       	in	r25, 0x02	; 2
     4ae:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     4b0:	8c 91       	ld	r24, X
     4b2:	80 63       	ori	r24, 0x30	; 48
     4b4:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     4b6:	80 81       	ld	r24, Z
     4b8:	8f 7c       	andi	r24, 0xCF	; 207
     4ba:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<ISW8_SW); //set ISW8_SW pin as input
     4bc:	82 98       	cbi	0x10, 2	; 16
	
	//setup ADC
    setup_adc();		
     4be:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     4c2:	0e 94 bc 00 	call	0x178	; 0x178 <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     4c6:	c1 eb       	ldi	r28, 0xB1	; 177
     4c8:	d1 e0       	ldi	r29, 0x01	; 1
     4ca:	ce 01       	movw	r24, r28
     4cc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     4d0:	ce 01       	movw	r24, r28
     4d2:	6e ea       	ldi	r22, 0xAE	; 174
     4d4:	71 e0       	ldi	r23, 0x01	; 1
     4d6:	0e 94 34 08 	call	0x1068	; 0x1068 <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     4da:	ce 01       	movw	r24, r28
     4dc:	69 eb       	ldi	r22, 0xB9	; 185
     4de:	71 e0       	ldi	r23, 0x01	; 1
     4e0:	0e 94 38 08 	call	0x1070	; 0x1070 <midi_register_noteoff_callback>
	//setup MIDI USART
	setup_midi_usart();
     4e4:	0e 94 bb 01 	call	0x376	; 0x376 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     4e8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <update_spi>
	
	////set initial pitch offset CVs
	//vco1_init_cv = set_vco_init_cv(VCO1);
	//vco2_init_cv = set_vco_init_cv(VCO2);
	value_to_display = vco1_init_cv;	
     4ec:	80 91 94 01 	lds	r24, 0x0194
     4f0:	90 91 95 01 	lds	r25, 0x0195
     4f4:	90 93 4d 01 	sts	0x014D, r25
     4f8:	80 93 4c 01 	sts	0x014C, r24
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
     4fc:	e0 eb       	ldi	r30, 0xB0	; 176
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	86 60       	ori	r24, 0x06	; 6
     504:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms
     506:	e0 e7       	ldi	r30, 0x70	; 112
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	81 60       	ori	r24, 0x01	; 1
     50e:	80 83       	st	Z, r24
	

		
	sei(); //enable global interrupts
     510:	78 94       	sei

	while(1)
	{	
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     512:	ce 01       	movw	r24, r28
     514:	0e 94 c7 0a 	call	0x158e	; 0x158e <midi_device_process>
     518:	fc cf       	rjmp	.-8      	; 0x512 <main+0x92>

0000051a <scan_pots_and_update_control_voltages>:
	&sustain_2_cv,
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
void scan_pots_and_update_control_voltages(void) {
     51a:	af 92       	push	r10
     51c:	bf 92       	push	r11
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     52e:	0c e6       	ldi	r16, 0x6C	; 108
     530:	11 e0       	ldi	r17, 0x01	; 1
	&sustain_2_cv,
	&sustain_1_cv,
	&release_2_cv,
	&release_1_cv
	}; 
void scan_pots_and_update_control_voltages(void) {
     532:	ee 24       	eor	r14, r14
     534:	ff 24       	eor	r15, r15
     536:	e3 94       	inc	r14
     538:	c0 e0       	ldi	r28, 0x00	; 0
     53a:	d0 e0       	ldi	r29, 0x00	; 0
		adc_value = read_pot(POTMUX_EN0, i);
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     53c:	0f 2e       	mov	r0, r31
     53e:	f5 e0       	ldi	r31, 0x05	; 5
     540:	af 2e       	mov	r10, r31
     542:	ff e1       	ldi	r31, 0x1F	; 31
     544:	bf 2e       	mov	r11, r31
     546:	f0 2d       	mov	r31, r0

		adc_value = read_pot(POTMUX_EN0, i);
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
     548:	0f 2e       	mov	r0, r31
     54a:	ff e9       	ldi	r31, 0x9F	; 159
     54c:	cf 2e       	mov	r12, r31
     54e:	f8 e1       	ldi	r31, 0x18	; 24
     550:	df 2e       	mov	r13, r31
     552:	f0 2d       	mov	r31, r0
     554:	06 c0       	rjmp	.+12     	; 0x562 <scan_pots_and_update_control_voltages+0x48>
	&release_1_cv
	}; 
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     556:	21 96       	adiw	r28, 0x01	; 1
     558:	08 94       	sec
     55a:	e1 1c       	adc	r14, r1
     55c:	f1 1c       	adc	r15, r1
     55e:	0e 5f       	subi	r16, 0xFE	; 254
     560:	1f 4f       	sbci	r17, 0xFF	; 255
	{

		adc_value = read_pot(POTMUX_EN0, i);
     562:	86 e0       	ldi	r24, 0x06	; 6
     564:	6c 2f       	mov	r22, r28
     566:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     56a:	90 93 9b 01 	sts	0x019B, r25
     56e:	80 93 9a 01 	sts	0x019A, r24
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
     572:	ce 01       	movw	r24, r28
     574:	08 97       	sbiw	r24, 0x08	; 8
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	91 05       	cpc	r25, r1
     57a:	e0 f5       	brcc	.+120    	; 0x5f4 <scan_pots_and_update_control_voltages+0xda>
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     57c:	c9 30       	cpi	r28, 0x09	; 9
     57e:	d1 05       	cpc	r29, r1
     580:	11 f0       	breq	.+4      	; 0x586 <scan_pots_and_update_control_voltages+0x6c>

		adc_value = read_pot(POTMUX_EN0, i);
		
		if (i == 8 || i == 9) //exception to handle tune and fine for VCO1 and VCO2
		{
			uint16_t tune_value = 6303;//9759; //init CV offset of about -5.8V
     582:	96 01       	movw	r18, r12
     584:	01 c0       	rjmp	.+2      	; 0x588 <scan_pots_and_update_control_voltages+0x6e>
			if (i == 9) tune_value += 1638; //add an octave (1V) to VCO2 pitch
     586:	95 01       	movw	r18, r10
			if (adc_value >= 512) {
     588:	80 91 9a 01 	lds	r24, 0x019A
     58c:	90 91 9b 01 	lds	r25, 0x019B
     590:	42 e0       	ldi	r20, 0x02	; 2
     592:	80 30       	cpi	r24, 0x00	; 0
     594:	94 07       	cpc	r25, r20
     596:	c0 f0       	brcs	.+48     	; 0x5c8 <scan_pots_and_update_control_voltages+0xae>
				set_control_voltage(pot_decoder_0[i],(tune_value + (adc_value - 512)));
     598:	60 91 9a 01 	lds	r22, 0x019A
     59c:	70 91 9b 01 	lds	r23, 0x019B
     5a0:	60 50       	subi	r22, 0x00	; 0
     5a2:	72 40       	sbci	r23, 0x02	; 2
     5a4:	62 0f       	add	r22, r18
     5a6:	73 1f       	adc	r23, r19
     5a8:	f8 01       	movw	r30, r16
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				tune_offset = adc_value - 512;
     5b2:	80 91 9a 01 	lds	r24, 0x019A
     5b6:	90 91 9b 01 	lds	r25, 0x019B
     5ba:	80 50       	subi	r24, 0x00	; 0
     5bc:	92 40       	sbci	r25, 0x02	; 2
     5be:	90 93 99 01 	sts	0x0199, r25
     5c2:	80 93 98 01 	sts	0x0198, r24
     5c6:	29 c0       	rjmp	.+82     	; 0x61a <scan_pots_and_update_control_voltages+0x100>
			} else {
				set_control_voltage(pot_decoder_0[i],(tune_value - (512- adc_value)));
     5c8:	60 91 9a 01 	lds	r22, 0x019A
     5cc:	70 91 9b 01 	lds	r23, 0x019B
     5d0:	60 50       	subi	r22, 0x00	; 0
     5d2:	72 40       	sbci	r23, 0x02	; 2
     5d4:	62 0f       	add	r22, r18
     5d6:	73 1f       	adc	r23, r19
     5d8:	f8 01       	movw	r30, r16
     5da:	80 81       	ld	r24, Z
     5dc:	91 81       	ldd	r25, Z+1	; 0x01
     5de:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
				tune_offset = adc_value;
     5e2:	80 91 9a 01 	lds	r24, 0x019A
     5e6:	90 91 9b 01 	lds	r25, 0x019B
     5ea:	90 93 99 01 	sts	0x0199, r25
     5ee:	80 93 98 01 	sts	0x0198, r24
     5f2:	13 c0       	rjmp	.+38     	; 0x61a <scan_pots_and_update_control_voltages+0x100>
			}

		} else if (i == 11) //exception to handle ARP_RATE pot
     5f4:	cb 30       	cpi	r28, 0x0B	; 11
     5f6:	d1 05       	cpc	r29, r1
     5f8:	09 f4       	brne	.+2      	; 0x5fc <scan_pots_and_update_control_voltages+0xe2>
     5fa:	ad cf       	rjmp	.-166    	; 0x556 <scan_pots_and_update_control_voltages+0x3c>
		{
			//store ARP pot value, but don't set DAC
			
		} else {
			set_control_voltage(pot_decoder_0[i], adc_value << 4);
     5fc:	60 91 9a 01 	lds	r22, 0x019A
     600:	70 91 9b 01 	lds	r23, 0x019B
     604:	62 95       	swap	r22
     606:	72 95       	swap	r23
     608:	70 7f       	andi	r23, 0xF0	; 240
     60a:	76 27       	eor	r23, r22
     60c:	60 7f       	andi	r22, 0xF0	; 240
     60e:	76 27       	eor	r23, r22
     610:	f8 01       	movw	r30, r16
     612:	80 81       	ld	r24, Z
     614:	91 81       	ldd	r25, Z+1	; 0x01
     616:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	&release_1_cv
	}; 
void scan_pots_and_update_control_voltages(void) {

	//read pots on U2 pot multiplexer and set appropriate DAC S&H channel
	for (int i = 0; i <=15; i++)
     61a:	f0 e1       	ldi	r31, 0x10	; 16
     61c:	ef 16       	cp	r14, r31
     61e:	f1 04       	cpc	r15, r1
     620:	0c f4       	brge	.+2      	; 0x624 <scan_pots_and_update_control_voltages+0x10a>
     622:	99 cf       	rjmp	.-206    	; 0x556 <scan_pots_and_update_control_voltages+0x3c>
     624:	0e e4       	ldi	r16, 0x4E	; 78
     626:	11 e0       	ldi	r17, 0x01	; 1
     628:	c1 e0       	ldi	r28, 0x01	; 1
	
	//now read second set of pots form U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
	{
		
		adc_value = read_pot(POTMUX_EN1, i+1);
     62a:	87 e0       	ldi	r24, 0x07	; 7
     62c:	6c 2f       	mov	r22, r28
     62e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     632:	90 93 9b 01 	sts	0x019B, r25
     636:	80 93 9a 01 	sts	0x019A, r24
		set_control_voltage(pot_decoder_1[i], adc_value <<4);
     63a:	60 91 9a 01 	lds	r22, 0x019A
     63e:	70 91 9b 01 	lds	r23, 0x019B
     642:	62 95       	swap	r22
     644:	72 95       	swap	r23
     646:	70 7f       	andi	r23, 0xF0	; 240
     648:	76 27       	eor	r23, r22
     64a:	60 7f       	andi	r22, 0xF0	; 240
     64c:	76 27       	eor	r23, r22
     64e:	f8 01       	movw	r30, r16
     650:	81 91       	ld	r24, Z+
     652:	91 91       	ld	r25, Z+
     654:	8f 01       	movw	r16, r30
     656:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
     65a:	cf 5f       	subi	r28, 0xFF	; 255
		}
		
	}
	
	//now read second set of pots form U4 and set appropriate DAC S&H channel
	for (int i = 0; i <=14; i++) //first U4 input is grounded - only 15 pots, not 16 on second mux
     65c:	c0 31       	cpi	r28, 0x10	; 16
     65e:	29 f7       	brne	.-54     	; 0x62a <scan_pots_and_update_control_voltages+0x110>

	}
	
	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	set_control_voltage(&vco1_pitch_cv, 0);
     660:	8c e3       	ldi	r24, 0x3C	; 60
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&vco2_pitch_cv, 0);
     66c:	8a e3       	ldi	r24, 0x3A	; 58
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     678:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);	
     67a:	a1 9a       	sbi	0x14, 1	; 20
	
	
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	08 95       	ret

00000692 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     692:	84 b1       	in	r24, 0x04	; 4
     694:	87 62       	ori	r24, 0x27	; 39
     696:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     698:	ec ed       	ldi	r30, 0xDC	; 220
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	8c 65       	ori	r24, 0x5C	; 92
     6a0:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     6a2:	85 b1       	in	r24, 0x05	; 5
     6a4:	89 7d       	andi	r24, 0xD9	; 217
     6a6:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     6a8:	ed ed       	ldi	r30, 0xDD	; 221
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 81       	ld	r24, Z
     6ae:	83 7f       	andi	r24, 0xF3	; 243
     6b0:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     6b2:	80 e5       	ldi	r24, 0x50	; 80
     6b4:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     6b6:	80 81       	ld	r24, Z
     6b8:	87 7f       	andi	r24, 0xF7	; 247
     6ba:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     6bc:	80 81       	ld	r24, Z
     6be:	87 7f       	andi	r24, 0xF7	; 247
     6c0:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     6c2:	80 81       	ld	r24, Z
     6c4:	88 60       	ori	r24, 0x08	; 8
     6c6:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     6c8:	80 81       	ld	r24, Z
     6ca:	8f 7e       	andi	r24, 0xEF	; 239
     6cc:	80 83       	st	Z, r24
	
}
     6ce:	08 95       	ret

000006d0 <update_spi>:

void update_spi(void) {
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
	
			SPI_PORT |= SPI_SW_LATCH;
     6d8:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE
			SPDR =
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     6da:	c0 91 a2 01 	lds	r28, 0x01A2
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     6de:	40 91 a2 01 	lds	r20, 0x01A2
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     6e2:	00 91 a2 01 	lds	r16, 0x01A2
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     6e6:	80 91 a2 01 	lds	r24, 0x01A2
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     6ea:	a0 91 a2 01 	lds	r26, 0x01A2
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     6ee:	60 91 a2 01 	lds	r22, 0x01A2
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     6f2:	20 91 a2 01 	lds	r18, 0x01A2
			ISW8_SW_ON << ISW8_LED;
     6f6:	90 91 a7 01 	lds	r25, 0x01A7
     6fa:	97 95       	ror	r25
     6fc:	99 27       	eor	r25, r25
     6fe:	97 95       	ror	r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     700:	81 70       	andi	r24, 0x01	; 1
     702:	98 2b       	or	r25, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
     704:	cc 1f       	adc	r28, r28
     706:	cc 27       	eor	r28, r28
     708:	cc 1f       	adc	r28, r28
     70a:	cc 0f       	add	r28, r28
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     70c:	c9 2b       	or	r28, r25
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
     70e:	46 95       	lsr	r20
     710:	46 95       	lsr	r20
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	41 70       	andi	r20, 0x01	; 1
     716:	50 70       	andi	r21, 0x00	; 0
     718:	ca 01       	movw	r24, r20
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     722:	8c 2b       	or	r24, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
     724:	06 95       	lsr	r16
     726:	10 e0       	ldi	r17, 0x00	; 0
     728:	01 70       	andi	r16, 0x01	; 1
     72a:	10 70       	andi	r17, 0x00	; 0
     72c:	e8 01       	movw	r28, r16
     72e:	cc 0f       	add	r28, r28
     730:	dd 1f       	adc	r29, r29
     732:	cc 0f       	add	r28, r28
     734:	dd 1f       	adc	r29, r29
     736:	cc 0f       	add	r28, r28
     738:	dd 1f       	adc	r29, r29
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     73a:	c8 2b       	or	r28, r24
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
     73c:	a2 95       	swap	r26
     73e:	af 70       	andi	r26, 0x0F	; 15
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	a1 70       	andi	r26, 0x01	; 1
     744:	b0 70       	andi	r27, 0x00	; 0
     746:	fd 01       	movw	r30, r26
     748:	e2 95       	swap	r30
     74a:	f2 95       	swap	r31
     74c:	f0 7f       	andi	r31, 0xF0	; 240
     74e:	fe 27       	eor	r31, r30
     750:	e0 7f       	andi	r30, 0xF0	; 240
     752:	fe 27       	eor	r31, r30
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     754:	ec 2b       	or	r30, r28
			((sw_latch_five >> ISW4_SW) & 1) << ISW4_LED |
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
     756:	62 95       	swap	r22
     758:	66 95       	lsr	r22
     75a:	67 70       	andi	r22, 0x07	; 7
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	61 70       	andi	r22, 0x01	; 1
     760:	70 70       	andi	r23, 0x00	; 0
     762:	ab 01       	movw	r20, r22
     764:	44 0f       	add	r20, r20
     766:	55 1f       	adc	r21, r21
     768:	42 95       	swap	r20
     76a:	52 95       	swap	r21
     76c:	50 7f       	andi	r21, 0xF0	; 240
     76e:	54 27       	eor	r21, r20
     770:	40 7f       	andi	r20, 0xF0	; 240
     772:	54 27       	eor	r21, r20
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     774:	4e 2b       	or	r20, r30
			((sw_latch_five >> ISW1_SW) & 1) << ISW1_LED |
			((sw_latch_five >> ISW2_SW) & 1) << ISW2_LED |
			((sw_latch_five >> ISW3_SW) & 1) << ISW3_LED |
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
     776:	22 95       	swap	r18
     778:	26 95       	lsr	r18
     77a:	26 95       	lsr	r18
     77c:	23 70       	andi	r18, 0x03	; 3
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	21 70       	andi	r18, 0x01	; 1
     782:	30 70       	andi	r19, 0x00	; 0
     784:	c9 01       	movw	r24, r18
     786:	00 24       	eor	r0, r0
     788:	96 95       	lsr	r25
     78a:	87 95       	ror	r24
     78c:	07 94       	ror	r0
     78e:	96 95       	lsr	r25
     790:	87 95       	ror	r24
     792:	07 94       	ror	r0
     794:	98 2f       	mov	r25, r24
     796:	80 2d       	mov	r24, r0
void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
			
			//SHIFT 5th BYTE
			SPDR =
     798:	84 2b       	or	r24, r20
     79a:	8e bd       	out	0x2e, r24	; 46
			((sw_latch_five >> ISW5_SW) & 1) << ISW5_LED |
			((sw_latch_five >> ISW6_SW) & 1) << ISW6_LED |
			((sw_latch_five >> ISW7_SW) & 1) << ISW7_LED |
			ISW8_SW_ON << ISW8_LED;
			
			while (!(SPSR & (1<<SPIF)));
     79c:	0d b4       	in	r0, 0x2d	; 45
     79e:	07 fe       	sbrs	r0, 7
     7a0:	fd cf       	rjmp	.-6      	; 0x79c <update_spi+0xcc>
			
			//Now read SPDR for switch data shifted in from 74XX165 U14
			spi_sw_current_state = SPDR;
     7a2:	8e b5       	in	r24, 0x2e	; 46
     7a4:	80 93 a4 01 	sts	0x01A4, r24
			
			spi_sw_current_state ^= spi_sw_previous_state;
     7a8:	80 91 a4 01 	lds	r24, 0x01A4
     7ac:	90 91 a3 01 	lds	r25, 0x01A3
     7b0:	89 27       	eor	r24, r25
     7b2:	80 93 a4 01 	sts	0x01A4, r24
			spi_sw_previous_state ^= spi_sw_current_state;
     7b6:	80 91 a3 01 	lds	r24, 0x01A3
     7ba:	90 91 a4 01 	lds	r25, 0x01A4
     7be:	89 27       	eor	r24, r25
     7c0:	80 93 a3 01 	sts	0x01A3, r24
			spi_sw_current_state &= spi_sw_previous_state;
     7c4:	80 91 a4 01 	lds	r24, 0x01A4
     7c8:	90 91 a3 01 	lds	r25, 0x01A3
     7cc:	89 23       	and	r24, r25
     7ce:	80 93 a4 01 	sts	0x01A4, r24
			
			//toggle switch state		
			sw_latch_five ^= spi_sw_current_state; //Omar's solution.
     7d2:	80 91 a2 01 	lds	r24, 0x01A2
     7d6:	90 91 a4 01 	lds	r25, 0x01A4
     7da:	89 27       	eor	r24, r25
     7dc:	80 93 a2 01 	sts	0x01A2, r24
			
			//SHIFT 4th BYTE
			SPDR = 0; //no LEDs connected in current test set up
     7e0:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     7e2:	0d b4       	in	r0, 0x2d	; 45
     7e4:	07 fe       	sbrs	r0, 7
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <update_spi+0x112>
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			sw_latch_four = SPDR;
     7e8:	8e b5       	in	r24, 0x2e	; 46
     7ea:	80 93 a1 01 	sts	0x01A1, r24
			//toggling not implemented here yet.
			ISW12_SW_ON = (sw_latch_four >> ISW12_SW) & 1;
     7ee:	80 91 a1 01 	lds	r24, 0x01A1
     7f2:	82 95       	swap	r24
     7f4:	86 95       	lsr	r24
     7f6:	87 70       	andi	r24, 0x07	; 7
     7f8:	81 70       	andi	r24, 0x01	; 1
     7fa:	80 93 aa 01 	sts	0x01AA, r24
			//check if ISW13_SW bit is set
			ISW13_SW_ON = (sw_latch_four >> ISW13_SW) & 1;
     7fe:	80 91 a1 01 	lds	r24, 0x01A1
     802:	82 95       	swap	r24
     804:	86 95       	lsr	r24
     806:	86 95       	lsr	r24
     808:	83 70       	andi	r24, 0x03	; 3
     80a:	81 70       	andi	r24, 0x01	; 1
     80c:	80 93 a9 01 	sts	0x01A9, r24

			
			//SHIFT 3th BYTE
			SPDR = 0;
     810:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     812:	0d b4       	in	r0, 0x2d	; 45
     814:	07 fe       	sbrs	r0, 7
     816:	fd cf       	rjmp	.-6      	; 0x812 <update_spi+0x142>

			//SHIFT 2th BYTE
			SPDR = 0;
     818:	1e bc       	out	0x2e, r1	; 46
			while (!(SPSR & (1<<SPIF)));
     81a:	0d b4       	in	r0, 0x2d	; 45
     81c:	07 fe       	sbrs	r0, 7
     81e:	fd cf       	rjmp	.-6      	; 0x81a <update_spi+0x14a>
			
			//SHIFT 1st BYTE
			
			SPDR = (ISW12_SW_ON << ISW12_LED) | (ISW11_SW_ON << ISW11_LED) | (ISW9_SW_ON << ISW9_LED); 
     820:	20 91 aa 01 	lds	r18, 0x01AA
     824:	80 91 ab 01 	lds	r24, 0x01AB
     828:	90 91 ac 01 	lds	r25, 0x01AC
     82c:	22 0f       	add	r18, r18
     82e:	22 0f       	add	r18, r18
     830:	87 95       	ror	r24
     832:	88 27       	eor	r24, r24
     834:	87 95       	ror	r24
     836:	82 2b       	or	r24, r18
     838:	89 2b       	or	r24, r25
     83a:	8e bd       	out	0x2e, r24	; 46
			//Wait for SPI shift to complete
			while (!(SPSR & (1<<SPIF)));
     83c:	0d b4       	in	r0, 0x2d	; 45
     83e:	07 fe       	sbrs	r0, 7
     840:	fd cf       	rjmp	.-6      	; 0x83c <update_spi+0x16c>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     842:	ed ed       	ldi	r30, 0xDD	; 221
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	87 7f       	andi	r24, 0xF7	; 247
     84a:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     84c:	80 81       	ld	r24, Z
     84e:	88 60       	ori	r24, 0x08	; 8
     850:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     852:	2d 98       	cbi	0x05, 5	; 5
			
			//now read switches directly connected to MCU
			//this toggle code works, but I haven't figured out how it works
			//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/
			current_sw_state = SWITCH_PORT;
     854:	8f b1       	in	r24, 0x0f	; 15
     856:	80 93 a5 01 	sts	0x01A5, r24
			current_sw_state ^= previous_sw_state;
     85a:	80 91 a5 01 	lds	r24, 0x01A5
     85e:	90 91 a6 01 	lds	r25, 0x01A6
     862:	89 27       	eor	r24, r25
     864:	80 93 a5 01 	sts	0x01A5, r24
			previous_sw_state ^= current_sw_state;
     868:	80 91 a6 01 	lds	r24, 0x01A6
     86c:	90 91 a5 01 	lds	r25, 0x01A5
     870:	89 27       	eor	r24, r25
     872:	80 93 a6 01 	sts	0x01A6, r24
			current_sw_state &= previous_sw_state;
     876:	80 91 a5 01 	lds	r24, 0x01A5
     87a:	90 91 a6 01 	lds	r25, 0x01A6
     87e:	89 23       	and	r24, r25
     880:	80 93 a5 01 	sts	0x01A5, r24
			
			if (current_sw_state & (1<<ISW8_SW))
     884:	80 91 a5 01 	lds	r24, 0x01A5
     888:	82 ff       	sbrs	r24, 2
     88a:	06 c0       	rjmp	.+12     	; 0x898 <update_spi+0x1c8>
			{
				ISW8_SW_ON ^= 1 << 0; //toggle switch state
     88c:	90 91 a7 01 	lds	r25, 0x01A7
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	89 27       	eor	r24, r25
     894:	80 93 a7 01 	sts	0x01A7, r24
			}
			
			if (current_sw_state & (1<<ISW11_SW)) {
     898:	80 91 a5 01 	lds	r24, 0x01A5
     89c:	84 ff       	sbrs	r24, 4
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <update_spi+0x1dc>
				
				ISW11_SW_ON ^= 1 << 0; //toggle switch state
     8a0:	90 91 ab 01 	lds	r25, 0x01AB
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	89 27       	eor	r24, r25
     8a8:	80 93 ab 01 	sts	0x01AB, r24
			}
			
			if (current_sw_state & (1<<ISW9_SW)) {
     8ac:	80 91 a5 01 	lds	r24, 0x01A5
     8b0:	83 ff       	sbrs	r24, 3
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <update_spi+0x1f0>
				
				ISW9_SW_ON ^= 1 << 0; //toggle switch state
     8b4:	90 91 ac 01 	lds	r25, 0x01AC
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	89 27       	eor	r24, r25
     8bc:	80 93 ac 01 	sts	0x01AC, r24
			}
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     8c0:	ed ed       	ldi	r30, 0xDD	; 221
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	8f 7b       	andi	r24, 0xBF	; 191
     8c8:	80 83       	st	Z, r24
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
     8ca:	40 91 a2 01 	lds	r20, 0x01A2
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8ce:	30 91 a2 01 	lds	r19, 0x01A2
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
     8d2:	c0 91 a2 01 	lds	r28, 0x01A2
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
     8d6:	00 91 a2 01 	lds	r16, 0x01A2
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
     8da:	60 91 a2 01 	lds	r22, 0x01A2
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
     8de:	a0 91 a2 01 	lds	r26, 0x01A2
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
     8e2:	20 91 a2 01 	lds	r18, 0x01A2
			ISW8_SW_ON << BMOD;
     8e6:	80 91 a7 01 	lds	r24, 0x01A7
     8ea:	82 95       	swap	r24
     8ec:	80 7f       	andi	r24, 0xF0	; 240
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     8ee:	36 95       	lsr	r19
     8f0:	36 95       	lsr	r19
     8f2:	31 70       	andi	r19, 0x01	; 1
     8f4:	38 2b       	or	r19, r24
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
     8f6:	10 e0       	ldi	r17, 0x00	; 0
     8f8:	01 70       	andi	r16, 0x01	; 1
     8fa:	10 70       	andi	r17, 0x00	; 0
     8fc:	c8 01       	movw	r24, r16
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     902:	83 2b       	or	r24, r19
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
     904:	a2 95       	swap	r26
     906:	a6 95       	lsr	r26
     908:	a7 70       	andi	r26, 0x07	; 7
     90a:	a7 95       	ror	r26
     90c:	aa 27       	eor	r26, r26
     90e:	a7 95       	ror	r26
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     910:	8a 2b       	or	r24, r26
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
     912:	44 1f       	adc	r20, r20
     914:	44 27       	eor	r20, r20
     916:	44 1f       	adc	r20, r20
     918:	44 0f       	add	r20, r20
     91a:	44 0f       	add	r20, r20
     91c:	44 0f       	add	r20, r20
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     91e:	48 2b       	or	r20, r24
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
     920:	c6 95       	lsr	r28
     922:	d0 e0       	ldi	r29, 0x00	; 0
     924:	c1 70       	andi	r28, 0x01	; 1
     926:	d0 70       	andi	r29, 0x00	; 0
     928:	de 01       	movw	r26, r28
     92a:	aa 0f       	add	r26, r26
     92c:	bb 1f       	adc	r27, r27
     92e:	aa 0f       	add	r26, r26
     930:	bb 1f       	adc	r27, r27
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     932:	a4 2b       	or	r26, r20
			((sw_latch_five >> ISW4_SW) & 1) << SYNC |
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
     934:	62 95       	swap	r22
     936:	6f 70       	andi	r22, 0x0F	; 15
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	61 70       	andi	r22, 0x01	; 1
     93c:	70 70       	andi	r23, 0x00	; 0
     93e:	ab 01       	movw	r20, r22
     940:	00 24       	eor	r0, r0
     942:	56 95       	lsr	r21
     944:	47 95       	ror	r20
     946:	07 94       	ror	r0
     948:	56 95       	lsr	r21
     94a:	47 95       	ror	r20
     94c:	07 94       	ror	r0
     94e:	54 2f       	mov	r21, r20
     950:	40 2d       	mov	r20, r0
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     952:	4a 2b       	or	r20, r26
			((sw_latch_five >> ISW1_SW) & 1) << VCO1_SAW |
			((sw_latch_five >> ISW2_SW) & 1) << VCO1_TRI |
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
     954:	22 95       	swap	r18
     956:	26 95       	lsr	r18
     958:	26 95       	lsr	r18
     95a:	23 70       	andi	r18, 0x03	; 3
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	21 70       	andi	r18, 0x01	; 1
     960:	30 70       	andi	r19, 0x00	; 0
     962:	c9 01       	movw	r24, r18
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	82 95       	swap	r24
     96a:	92 95       	swap	r25
     96c:	90 7f       	andi	r25, 0xF0	; 240
     96e:	98 27       	eor	r25, r24
     970:	80 7f       	andi	r24, 0xF0	; 240
     972:	98 27       	eor	r25, r24
			
			//update analog switch latch:
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
			//enable output on VCO analog switch latch:
			//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: SYNC 2: A TRI 1: A PULSE 0: A SAW
			DATA_BUS =
     974:	84 2b       	or	r24, r20
     976:	82 b9       	out	0x02, r24	; 2
			((sw_latch_five >> ISW3_SW) & 1) << VCO1_PULSE |
			((sw_latch_five >> ISW5_SW) & 1) << VCO2_SAW |
			((sw_latch_five >> ISW6_SW) & 1) << VCO2_TRI |
			((sw_latch_five >> ISW7_SW) & 1) << VCO2_PULSE |
			ISW8_SW_ON << BMOD;
			VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     978:	80 81       	ld	r24, Z
     97a:	80 64       	ori	r24, 0x40	; 64
     97c:	80 83       	st	Z, r24
     97e:	00 00       	nop
			_delay_us(1); //why is this delay here????
			VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     980:	80 81       	ld	r24, Z
     982:	8f 7b       	andi	r24, 0xBF	; 191
     984:	80 83       	st	Z, r24
			DATA_BUS = 0;
     986:	12 b8       	out	0x02, r1	; 2
			
			//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
			//need to make sure this doesn't interfere with anything else on this port
			EG2_POL_PORT ^= (-ISW9_SW_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
     988:	90 81       	ld	r25, Z
     98a:	80 91 ac 01 	lds	r24, 0x01AC
     98e:	20 81       	ld	r18, Z
     990:	81 95       	neg	r24
     992:	82 27       	eor	r24, r18
     994:	80 71       	andi	r24, 0x10	; 16
     996:	89 27       	eor	r24, r25
     998:	80 83       	st	Z, r24
	
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	08 95       	ret

000009a4 <set_vco_init_cv>:
volatile uint8_t period_counter = 0;
volatile uint8_t no_overflow = TRUE;
volatile uint8_t count_finished = FALSE;
volatile uint16_t osc_count = 0;

uint16_t set_vco_init_cv(uint8_t vco) {
     9a4:	8f 92       	push	r8
     9a6:	9f 92       	push	r9
     9a8:	bf 92       	push	r11
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	c8 2f       	mov	r28, r24
	//disable main scanning interrupt
	
	//disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
     9bc:	80 e2       	ldi	r24, 0x20	; 32
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
     9c8:	82 e3       	ldi	r24, 0x32	; 50
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
     9d4:	84 e3       	ldi	r24, 0x34	; 52
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
     9e0:	80 e9       	ldi	r24, 0x90	; 144
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
     9ec:	84 e2       	ldi	r24, 0x24	; 36
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
     9f8:	8e e2       	ldi	r24, 0x2E	; 46
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
     a04:	80 e3       	ldi	r24, 0x30	; 48
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
     a10:	82 e1       	ldi	r24, 0x12	; 18
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
     a1c:	8c e1       	ldi	r24, 0x1C	; 28
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
     a28:	84 e1       	ldi	r24, 0x14	; 20
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
     a34:	86 e1       	ldi	r24, 0x16	; 22
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
     a40:	88 e1       	ldi	r24, 0x18	; 24
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	6f ef       	ldi	r22, 0xFF	; 255
     a46:	7f e3       	ldi	r23, 0x3F	; 63
     a48:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
     a4c:	8a e1       	ldi	r24, 0x1A	; 26
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
     a58:	82 e2       	ldi	r24, 0x22	; 34
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
     a64:	8c e0       	ldi	r24, 0x0C	; 12
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
     a7c:	84 e0       	ldi	r24, 0x04	; 4
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	6f ef       	ldi	r22, 0xFF	; 255
     a82:	7f e3       	ldi	r23, 0x3F	; 63
     a84:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
     a94:	80 e1       	ldi	r24, 0x10	; 16
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
	
	
	uint8_t switch_byte = 0;
	struct control_voltage *vco_pitch;
	
	if (vco == VCO1) { //turn on VCO1 pulse
     aa0:	cc 23       	and	r28, r28
     aa2:	a1 f4       	brne	.+40     	; 0xacc <set_vco_init_cv+0x128>
		//this will change in v1.1 of analog board when comparator is used to generate pulse for T0 pin
		set_control_voltage(&vco1_pw_cv, 0x3000); //set pulse width to about 75%
     aa4:	8c e2       	ldi	r24, 0x2C	; 44
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e3       	ldi	r23, 0x30	; 48
     aac:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
		set_control_voltage(&vco1_mix_cv, MAX); //turn up VCO1 in mixer
     ab0:	86 e3       	ldi	r24, 0x36	; 54
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	6f ef       	ldi	r22, 0xFF	; 255
     ab6:	7f e3       	ldi	r23, 0x3F	; 63
     ab8:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
		set_control_voltage(&vco2_mix_cv, MIN); //turn off VCO2 in mixer
     abc:	88 e3       	ldi	r24, 0x38	; 56
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
		//turn on VCO1 pulse, all others off
		switch_byte |= (1<<VCO1_PULSE);
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	13 c0       	rjmp	.+38     	; 0xaf2 <set_vco_init_cv+0x14e>
		vco_pitch = &vco1_pitch_cv;
		
	} else { //turn on VCO2 pulse
		
		set_control_voltage(&vco2_pw_cv, 0x3000); //set pulse width to about 75%
     acc:	8e e1       	ldi	r24, 0x1E	; 30
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e3       	ldi	r23, 0x30	; 48
     ad4:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
		set_control_voltage(&vco2_mix_cv, MAX); //turn up VCO2 in mixer
     ad8:	88 e3       	ldi	r24, 0x38	; 56
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	6f ef       	ldi	r22, 0xFF	; 255
     ade:	7f e3       	ldi	r23, 0x3F	; 63
     ae0:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
		set_control_voltage(&vco1_mix_cv, MIN); //turn off VCO1 in mixer
     ae4:	86 e3       	ldi	r24, 0x36	; 54
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
		//turn on VCO2 pulse, all others off
		switch_byte |= (1<<VCO2_PULSE);
     af0:	80 e2       	ldi	r24, 0x20	; 32
		vco_pitch = &vco2_pitch_cv;	
		
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
     af2:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
     af4:	ed ed       	ldi	r30, 0xDD	; 221
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	80 64       	ori	r24, 0x40	; 64
     afc:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
     afe:	80 81       	ld	r24, Z
     b00:	8f 7b       	andi	r24, 0xBF	; 191
     b02:	80 83       	st	Z, r24
	DATA_BUS = 0;
     b04:	12 b8       	out	0x02, r1	; 2

	//set up timer/counter0 to be clocked by T0 input
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00); //clocked by external T0 pin, rising edge
     b06:	84 b5       	in	r24, 0x24	; 36
     b08:	87 60       	ori	r24, 0x07	; 7
     b0a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted.
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	87 bd       	out	0x27, r24	; 39
	
	PORTF |= (1<<GATE); //turn gate on
     b10:	89 9a       	sbi	0x11, 1	; 17
	
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     b12:	0f 2e       	mov	r0, r31
     b14:	fd e0       	ldi	r31, 0x0D	; 13
     b16:	ef 2e       	mov	r14, r31
     b18:	ff 24       	eor	r15, r15
     b1a:	f0 2d       	mov	r31, r0
volatile uint8_t count_finished = FALSE;
volatile uint16_t osc_count = 0;

uint16_t set_vco_init_cv(uint8_t vco) {
	
	uint16_t init_cv = 0;
     b1c:	c0 e0       	ldi	r28, 0x00	; 0
     b1e:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= dac_bit;
		
		set_control_voltage(&vco1_pitch_cv, init_cv);
     b20:	0c e3       	ldi	r16, 0x3C	; 60
     b22:	11 e0       	ldi	r17, 0x01	; 1
		
		count_finished = FALSE;
		period_counter = 0;
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
     b24:	0f 2e       	mov	r0, r31
     b26:	fe e6       	ldi	r31, 0x6E	; 110
     b28:	cf 2e       	mov	r12, r31
     b2a:	dd 24       	eor	r13, r13
     b2c:	f0 2d       	mov	r31, r0
			
			set_control_voltage(&vco1_pitch_cv, init_cv);
			
		}
		
		if ((osc_count <= 38226)  && (no_overflow == TRUE)) init_cv &= ~(1 << dac_bit);
     b2e:	88 24       	eor	r8, r8
     b30:	99 24       	eor	r9, r9
     b32:	83 94       	inc	r8
		no_overflow = TRUE;
     b34:	bb 24       	eor	r11, r11
     b36:	b3 94       	inc	r11
	
	PORTF |= (1<<GATE); //turn gate on
	
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= dac_bit;
     b38:	ce 29       	or	r28, r14
     b3a:	df 29       	or	r29, r15
		
		set_control_voltage(&vco1_pitch_cv, init_cv);
     b3c:	c8 01       	movw	r24, r16
     b3e:	be 01       	movw	r22, r28
     b40:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
		
		count_finished = FALSE;
     b44:	10 92 af 01 	sts	0x01AF, r1
		period_counter = 0;
     b48:	10 92 b0 01 	sts	0x01B0, r1
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
     b4c:	f6 01       	movw	r30, r12
     b4e:	80 81       	ld	r24, Z
     b50:	82 60       	ori	r24, 0x02	; 2
     b52:	80 83       	st	Z, r24
		
		while (count_finished == FALSE) {
     b54:	80 91 af 01 	lds	r24, 0x01AF
     b58:	88 23       	and	r24, r24
     b5a:	41 f4       	brne	.+16     	; 0xb6c <set_vco_init_cv+0x1c8>
			
			set_control_voltage(&vco1_pitch_cv, init_cv);
     b5c:	c8 01       	movw	r24, r16
     b5e:	be 01       	movw	r22, r28
     b60:	0e 94 90 00 	call	0x120	; 0x120 <set_control_voltage>
		
		count_finished = FALSE;
		period_counter = 0;
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		
		while (count_finished == FALSE) {
     b64:	80 91 af 01 	lds	r24, 0x01AF
     b68:	88 23       	and	r24, r24
     b6a:	c1 f3       	breq	.-16     	; 0xb5c <set_vco_init_cv+0x1b8>
			
			set_control_voltage(&vco1_pitch_cv, init_cv);
			
		}
		
		if ((osc_count <= 38226)  && (no_overflow == TRUE)) init_cv &= ~(1 << dac_bit);
     b6c:	80 91 ad 01 	lds	r24, 0x01AD
     b70:	90 91 ae 01 	lds	r25, 0x01AE
     b74:	f5 e9       	ldi	r31, 0x95	; 149
     b76:	83 35       	cpi	r24, 0x53	; 83
     b78:	9f 07       	cpc	r25, r31
     b7a:	78 f4       	brcc	.+30     	; 0xb9a <set_vco_init_cv+0x1f6>
     b7c:	80 91 8c 01 	lds	r24, 0x018C
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	59 f4       	brne	.+22     	; 0xb9a <set_vco_init_cv+0x1f6>
     b84:	c4 01       	movw	r24, r8
     b86:	0e 2c       	mov	r0, r14
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <set_vco_init_cv+0x1ea>
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	0a 94       	dec	r0
     b90:	e2 f7       	brpl	.-8      	; 0xb8a <set_vco_init_cv+0x1e6>
     b92:	80 95       	com	r24
     b94:	90 95       	com	r25
     b96:	c8 23       	and	r28, r24
     b98:	d9 23       	and	r29, r25
		no_overflow = TRUE;
     b9a:	b0 92 8c 01 	sts	0x018C, r11
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00); //clocked by external T0 pin, rising edge
	OCR0A = 1; //output compare register - set to number of periods to be counted.
	
	PORTF |= (1<<GATE); //turn gate on
	
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
     b9e:	08 94       	sec
     ba0:	e1 08       	sbc	r14, r1
     ba2:	f1 08       	sbc	r15, r1
     ba4:	2f ef       	ldi	r18, 0xFF	; 255
     ba6:	e2 16       	cp	r14, r18
     ba8:	2f ef       	ldi	r18, 0xFF	; 255
     baa:	f2 06       	cpc	r15, r18
     bac:	29 f6       	brne	.-118    	; 0xb38 <set_vco_init_cv+0x194>
		if ((osc_count <= 38226)  && (no_overflow == TRUE)) init_cv &= ~(1 << dac_bit);
		no_overflow = TRUE;
		
	}		
		
	PORTF &= ~(1<<GATE); //turn gate off
     bae:	89 98       	cbi	0x11, 1	; 17
	
	return init_cv;
	
     bb0:	8c 2f       	mov	r24, r28
     bb2:	9d 2f       	mov	r25, r29
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	9f 90       	pop	r9
     bc8:	8f 90       	pop	r8
     bca:	08 95       	ret

00000bcc <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
     bcc:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
     bce:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
     bd0:	74 83       	std	Z+4, r23	; 0x04
     bd2:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
     bd4:	11 82       	std	Z+1, r1	; 0x01
     bd6:	10 82       	st	Z, r1
}
     bd8:	08 95       	ret

00000bda <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
     be2:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     be4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <store_and_clear_interrupt>
     be8:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
     bea:	39 81       	ldd	r19, Y+1	; 0x01
     bec:	83 2f       	mov	r24, r19
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	6a 81       	ldd	r22, Y+2	; 0x02
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	0e 94 b5 0c 	call	0x196a	; 0x196a <__divmodhi4>
     bfa:	48 81       	ld	r20, Y
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	84 17       	cp	r24, r20
     c00:	95 07       	cpc	r25, r21
     c02:	29 f4       	brne	.+10     	; 0xc0e <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
     c04:	82 2f       	mov	r24, r18
     c06:	0e 94 5f 06 	call	0xcbe	; 0xcbe <restore_interrupt_setting>
      return false;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	11 c0       	rjmp	.+34     	; 0xc30 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
     c0e:	eb 81       	ldd	r30, Y+3	; 0x03
     c10:	fc 81       	ldd	r31, Y+4	; 0x04
     c12:	e3 0f       	add	r30, r19
     c14:	f1 1d       	adc	r31, r1
     c16:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	6a 81       	ldd	r22, Y+2	; 0x02
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	0e 94 b5 0c 	call	0x196a	; 0x196a <__divmodhi4>
     c26:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
     c28:	82 2f       	mov	r24, r18
     c2a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <restore_interrupt_setting>
      return true;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	08 95       	ret

00000c38 <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
     c3e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <store_and_clear_interrupt>
   if(queue->end >= queue->start)
     c42:	29 81       	ldd	r18, Y+1	; 0x01
     c44:	98 81       	ld	r25, Y
     c46:	29 17       	cp	r18, r25
     c48:	18 f0       	brcs	.+6      	; 0xc50 <bytequeue_length+0x18>
      len = queue->end - queue->start;
     c4a:	c2 2f       	mov	r28, r18
     c4c:	c9 1b       	sub	r28, r25
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
     c50:	ca 81       	ldd	r28, Y+2	; 0x02
     c52:	c2 0f       	add	r28, r18
     c54:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
     c56:	0e 94 5f 06 	call	0xcbe	; 0xcbe <restore_interrupt_setting>
   return len;
}
     c5a:	8c 2f       	mov	r24, r28
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
     c62:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
     c64:	20 81       	ld	r18, Z
     c66:	86 2f       	mov	r24, r22
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	82 0f       	add	r24, r18
     c6c:	91 1d       	adc	r25, r1
     c6e:	62 81       	ldd	r22, Z+2	; 0x02
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	0e 94 b5 0c 	call	0x196a	; 0x196a <__divmodhi4>
     c76:	03 80       	ldd	r0, Z+3	; 0x03
     c78:	f4 81       	ldd	r31, Z+4	; 0x04
     c7a:	e0 2d       	mov	r30, r0
     c7c:	e8 0f       	add	r30, r24
     c7e:	f9 1f       	adc	r31, r25
}
     c80:	80 81       	ld	r24, Z
     c82:	08 95       	ret

00000c84 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	ec 01       	movw	r28, r24
     c8c:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
     c8e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <store_and_clear_interrupt>
     c92:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
     c94:	88 81       	ld	r24, Y
     c96:	21 2f       	mov	r18, r17
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	28 0f       	add	r18, r24
     c9c:	31 1d       	adc	r19, r1
     c9e:	6a 81       	ldd	r22, Y+2	; 0x02
     ca0:	c9 01       	movw	r24, r18
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	0e 94 b5 0c 	call	0x196a	; 0x196a <__divmodhi4>
     ca8:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
     caa:	84 2f       	mov	r24, r20
     cac:	0e 94 5f 06 	call	0xcbe	; 0xcbe <restore_interrupt_setting>
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	08 95       	ret

00000cb8 <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
     cb8:	8f b7       	in	r24, 0x3f	; 63
   cli();
     cba:	f8 94       	cli
   return sreg;
}
     cbc:	08 95       	ret

00000cbe <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
     cbe:	8f bf       	out	0x3f, r24	; 63
}
     cc0:	08 95       	ret

00000cc2 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
     cc2:	88 1f       	adc	r24, r24
     cc4:	88 27       	eor	r24, r24
     cc6:	88 1f       	adc	r24, r24
     cc8:	08 95       	ret

00000cca <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	88 3f       	cpi	r24, 0xF8	; 248
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <midi_is_realtime+0x8>
     cd0:	90 e0       	ldi	r25, 0x00	; 0
}
     cd2:	89 2f       	mov	r24, r25
     cd4:	08 95       	ret

00000cd6 <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	20 7f       	andi	r18, 0xF0	; 240
     cdc:	30 70       	andi	r19, 0x00	; 0
     cde:	20 3c       	cpi	r18, 0xC0	; 192
     ce0:	31 05       	cpc	r19, r1
     ce2:	e9 f1       	breq	.+122    	; 0xd5e <midi_packet_length+0x88>
     ce4:	21 3c       	cpi	r18, 0xC1	; 193
     ce6:	31 05       	cpc	r19, r1
     ce8:	8c f4       	brge	.+34     	; 0xd0c <midi_packet_length+0x36>
     cea:	20 39       	cpi	r18, 0x90	; 144
     cec:	31 05       	cpc	r19, r1
     cee:	e1 f0       	breq	.+56     	; 0xd28 <midi_packet_length+0x52>
     cf0:	21 39       	cpi	r18, 0x91	; 145
     cf2:	31 05       	cpc	r19, r1
     cf4:	24 f4       	brge	.+8      	; 0xcfe <midi_packet_length+0x28>
     cf6:	20 38       	cpi	r18, 0x80	; 128
     cf8:	31 05       	cpc	r19, r1
     cfa:	79 f5       	brne	.+94     	; 0xd5a <midi_packet_length+0x84>
     cfc:	15 c0       	rjmp	.+42     	; 0xd28 <midi_packet_length+0x52>
     cfe:	20 3a       	cpi	r18, 0xA0	; 160
     d00:	31 05       	cpc	r19, r1
     d02:	91 f0       	breq	.+36     	; 0xd28 <midi_packet_length+0x52>
     d04:	20 3b       	cpi	r18, 0xB0	; 176
     d06:	31 05       	cpc	r19, r1
     d08:	41 f5       	brne	.+80     	; 0xd5a <midi_packet_length+0x84>
     d0a:	0e c0       	rjmp	.+28     	; 0xd28 <midi_packet_length+0x52>
     d0c:	20 3e       	cpi	r18, 0xE0	; 224
     d0e:	31 05       	cpc	r19, r1
     d10:	59 f0       	breq	.+22     	; 0xd28 <midi_packet_length+0x52>
     d12:	21 3e       	cpi	r18, 0xE1	; 225
     d14:	31 05       	cpc	r19, r1
     d16:	24 f4       	brge	.+8      	; 0xd20 <midi_packet_length+0x4a>
     d18:	20 3d       	cpi	r18, 0xD0	; 208
     d1a:	31 05       	cpc	r19, r1
     d1c:	f1 f4       	brne	.+60     	; 0xd5a <midi_packet_length+0x84>
     d1e:	1f c0       	rjmp	.+62     	; 0xd5e <midi_packet_length+0x88>
     d20:	20 3f       	cpi	r18, 0xF0	; 240
     d22:	31 05       	cpc	r19, r1
     d24:	d1 f4       	brne	.+52     	; 0xd5a <midi_packet_length+0x84>
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
     d2c:	86 3f       	cpi	r24, 0xF6	; 246
     d2e:	79 f0       	breq	.+30     	; 0xd4e <midi_packet_length+0x78>
     d30:	87 3f       	cpi	r24, 0xF7	; 247
     d32:	38 f4       	brcc	.+14     	; 0xd42 <midi_packet_length+0x6c>
     d34:	82 3f       	cpi	r24, 0xF2	; 242
     d36:	a9 f0       	breq	.+42     	; 0xd62 <midi_packet_length+0x8c>
     d38:	83 3f       	cpi	r24, 0xF3	; 243
     d3a:	59 f0       	breq	.+22     	; 0xd52 <midi_packet_length+0x7c>
     d3c:	81 3f       	cpi	r24, 0xF1	; 241
     d3e:	59 f4       	brne	.+22     	; 0xd56 <midi_packet_length+0x80>
     d40:	08 c0       	rjmp	.+16     	; 0xd52 <midi_packet_length+0x7c>
     d42:	88 3f       	cpi	r24, 0xF8	; 248
     d44:	40 f0       	brcs	.+16     	; 0xd56 <midi_packet_length+0x80>
     d46:	8d 3f       	cpi	r24, 0xFD	; 253
     d48:	10 f0       	brcs	.+4      	; 0xd4e <midi_packet_length+0x78>
     d4a:	8e 3f       	cpi	r24, 0xFE	; 254
     d4c:	20 f0       	brcs	.+8      	; 0xd56 <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	08 95       	ret
         }
      default:
         return UNDEFINED;
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
     d62:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
     d64:	08 95       	ret

00000d66 <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
     d66:	0f 93       	push	r16
     d68:	34 2f       	mov	r19, r20
     d6a:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
     d6c:	46 2f       	mov	r20, r22
     d6e:	4f 70       	andi	r20, 0x0F	; 15
     d70:	40 6b       	ori	r20, 0xB0	; 176
     d72:	23 2f       	mov	r18, r19
     d74:	2f 77       	andi	r18, 0x7F	; 127
     d76:	0f 77       	andi	r16, 0x7F	; 127
     d78:	dc 01       	movw	r26, r24
     d7a:	ed 91       	ld	r30, X+
     d7c:	fc 91       	ld	r31, X
     d7e:	63 e0       	ldi	r22, 0x03	; 3
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
     d84:	0f 91       	pop	r16
     d86:	08 95       	ret

00000d88 <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     d88:	0f 93       	push	r16
     d8a:	34 2f       	mov	r19, r20
     d8c:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     d8e:	46 2f       	mov	r20, r22
     d90:	4f 70       	andi	r20, 0x0F	; 15
     d92:	40 69       	ori	r20, 0x90	; 144
     d94:	23 2f       	mov	r18, r19
     d96:	2f 77       	andi	r18, 0x7F	; 127
     d98:	0f 77       	andi	r16, 0x7F	; 127
     d9a:	dc 01       	movw	r26, r24
     d9c:	ed 91       	ld	r30, X+
     d9e:	fc 91       	ld	r31, X
     da0:	63 e0       	ldi	r22, 0x03	; 3
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     da6:	0f 91       	pop	r16
     da8:	08 95       	ret

00000daa <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
     daa:	0f 93       	push	r16
     dac:	34 2f       	mov	r19, r20
     dae:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
     db0:	46 2f       	mov	r20, r22
     db2:	4f 70       	andi	r20, 0x0F	; 15
     db4:	40 68       	ori	r20, 0x80	; 128
     db6:	23 2f       	mov	r18, r19
     db8:	2f 77       	andi	r18, 0x7F	; 127
     dba:	0f 77       	andi	r16, 0x7F	; 127
     dbc:	dc 01       	movw	r26, r24
     dbe:	ed 91       	ld	r30, X+
     dc0:	fc 91       	ld	r31, X
     dc2:	63 e0       	ldi	r22, 0x03	; 3
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
     dc8:	0f 91       	pop	r16
     dca:	08 95       	ret

00000dcc <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
     dcc:	0f 93       	push	r16
     dce:	34 2f       	mov	r19, r20
     dd0:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
     dd2:	46 2f       	mov	r20, r22
     dd4:	4f 70       	andi	r20, 0x0F	; 15
     dd6:	40 6a       	ori	r20, 0xA0	; 160
     dd8:	23 2f       	mov	r18, r19
     dda:	2f 77       	andi	r18, 0x7F	; 127
     ddc:	0f 77       	andi	r16, 0x7F	; 127
     dde:	dc 01       	movw	r26, r24
     de0:	ed 91       	ld	r30, X+
     de2:	fc 91       	ld	r31, X
     de4:	63 e0       	ldi	r22, 0x03	; 3
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
     dea:	0f 91       	pop	r16
     dec:	08 95       	ret

00000dee <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
     df2:	20 e2       	ldi	r18, 0x20	; 32
     df4:	40 30       	cpi	r20, 0x00	; 0
     df6:	52 07       	cpc	r21, r18
     df8:	44 f4       	brge	.+16     	; 0xe0a <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
     dfa:	a0 ee       	ldi	r26, 0xE0	; 224
     dfc:	40 30       	cpi	r20, 0x00	; 0
     dfe:	5a 07       	cpc	r21, r26
     e00:	3c f0       	brlt	.+14     	; 0xe10 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
     e02:	8a 01       	movw	r16, r20
     e04:	00 50       	subi	r16, 0x00	; 0
     e06:	10 4e       	sbci	r17, 0xE0	; 224
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
     e0a:	0f ef       	ldi	r16, 0xFF	; 255
     e0c:	1f e3       	ldi	r17, 0x3F	; 63
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
     e10:	00 e0       	ldi	r16, 0x00	; 0
     e12:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     e14:	46 2f       	mov	r20, r22
     e16:	4f 70       	andi	r20, 0x0F	; 15
     e18:	40 6e       	ori	r20, 0xE0	; 224
     e1a:	20 2f       	mov	r18, r16
     e1c:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
     e1e:	00 0f       	add	r16, r16
     e20:	01 2f       	mov	r16, r17
     e22:	00 1f       	adc	r16, r16
     e24:	11 0b       	sbc	r17, r17
     e26:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
     e28:	0f 77       	andi	r16, 0x7F	; 127
     e2a:	dc 01       	movw	r26, r24
     e2c:	ed 91       	ld	r30, X+
     e2e:	fc 91       	ld	r31, X
     e30:	63 e0       	ldi	r22, 0x03	; 3
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	08 95       	ret

00000e3c <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
     e3c:	0f 93       	push	r16
     e3e:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     e40:	46 2f       	mov	r20, r22
     e42:	4f 70       	andi	r20, 0x0F	; 15
     e44:	40 6c       	ori	r20, 0xC0	; 192
     e46:	2f 77       	andi	r18, 0x7F	; 127
     e48:	dc 01       	movw	r26, r24
     e4a:	ed 91       	ld	r30, X+
     e4c:	fc 91       	ld	r31, X
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
     e56:	0f 91       	pop	r16
     e58:	08 95       	ret

00000e5a <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
     e5a:	0f 93       	push	r16
     e5c:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
     e5e:	46 2f       	mov	r20, r22
     e60:	4f 70       	andi	r20, 0x0F	; 15
     e62:	40 6d       	ori	r20, 0xD0	; 208
     e64:	2f 77       	andi	r18, 0x7F	; 127
     e66:	dc 01       	movw	r26, r24
     e68:	ed 91       	ld	r30, X+
     e6a:	fc 91       	ld	r31, X
     e6c:	62 e0       	ldi	r22, 0x02	; 2
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	00 e0       	ldi	r16, 0x00	; 0
     e72:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
     e74:	0f 91       	pop	r16
     e76:	08 95       	ret

00000e78 <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
     e78:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
     e7a:	dc 01       	movw	r26, r24
     e7c:	ed 91       	ld	r30, X+
     e7e:	fc 91       	ld	r31, X
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	48 ef       	ldi	r20, 0xF8	; 248
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	00 e0       	ldi	r16, 0x00	; 0
     e8a:	09 95       	icall
}
     e8c:	0f 91       	pop	r16
     e8e:	08 95       	ret

00000e90 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
     e90:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
     e92:	dc 01       	movw	r26, r24
     e94:	ed 91       	ld	r30, X+
     e96:	fc 91       	ld	r31, X
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	49 ef       	ldi	r20, 0xF9	; 249
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	00 e0       	ldi	r16, 0x00	; 0
     ea2:	09 95       	icall
}
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <midi_send_start>:

void midi_send_start(MidiDevice * device){
     ea8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
     eaa:	dc 01       	movw	r26, r24
     eac:	ed 91       	ld	r30, X+
     eae:	fc 91       	ld	r31, X
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	4a ef       	ldi	r20, 0xFA	; 250
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	00 e0       	ldi	r16, 0x00	; 0
     eba:	09 95       	icall
}
     ebc:	0f 91       	pop	r16
     ebe:	08 95       	ret

00000ec0 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
     ec0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
     ec2:	dc 01       	movw	r26, r24
     ec4:	ed 91       	ld	r30, X+
     ec6:	fc 91       	ld	r31, X
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	4b ef       	ldi	r20, 0xFB	; 251
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	09 95       	icall
}
     ed4:	0f 91       	pop	r16
     ed6:	08 95       	ret

00000ed8 <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
     ed8:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
     eda:	dc 01       	movw	r26, r24
     edc:	ed 91       	ld	r30, X+
     ede:	fc 91       	ld	r31, X
     ee0:	61 e0       	ldi	r22, 0x01	; 1
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	4c ef       	ldi	r20, 0xFC	; 252
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	00 e0       	ldi	r16, 0x00	; 0
     eea:	09 95       	icall
}
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
     ef0:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
     ef2:	dc 01       	movw	r26, r24
     ef4:	ed 91       	ld	r30, X+
     ef6:	fc 91       	ld	r31, X
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	4e ef       	ldi	r20, 0xFE	; 254
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	00 e0       	ldi	r16, 0x00	; 0
     f02:	09 95       	icall
}
     f04:	0f 91       	pop	r16
     f06:	08 95       	ret

00000f08 <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
     f08:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
     f0a:	dc 01       	movw	r26, r24
     f0c:	ed 91       	ld	r30, X+
     f0e:	fc 91       	ld	r31, X
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	4f ef       	ldi	r20, 0xFF	; 255
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	00 e0       	ldi	r16, 0x00	; 0
     f1a:	09 95       	icall
}
     f1c:	0f 91       	pop	r16
     f1e:	08 95       	ret

00000f20 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
     f20:	0f 93       	push	r16
   device->send_func(device, 2,
     f22:	26 2f       	mov	r18, r22
     f24:	2f 77       	andi	r18, 0x7F	; 127
     f26:	dc 01       	movw	r26, r24
     f28:	ed 91       	ld	r30, X+
     f2a:	fc 91       	ld	r31, X
     f2c:	62 e0       	ldi	r22, 0x02	; 2
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	41 ef       	ldi	r20, 0xF1	; 241
     f32:	00 e0       	ldi	r16, 0x00	; 0
     f34:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
   device->send_func(device, 3,
     f3e:	26 2f       	mov	r18, r22
     f40:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
     f42:	8b 01       	movw	r16, r22
     f44:	00 0f       	add	r16, r16
     f46:	01 2f       	mov	r16, r17
     f48:	00 1f       	adc	r16, r16
     f4a:	11 0b       	sbc	r17, r17
     f4c:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
     f4e:	0f 77       	andi	r16, 0x7F	; 127
     f50:	dc 01       	movw	r26, r24
     f52:	ed 91       	ld	r30, X+
     f54:	fc 91       	ld	r31, X
     f56:	63 e0       	ldi	r22, 0x03	; 3
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	42 ef       	ldi	r20, 0xF2	; 242
     f5c:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	08 95       	ret

00000f64 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
     f64:	0f 93       	push	r16
   device->send_func(device, 2,
     f66:	26 2f       	mov	r18, r22
     f68:	2f 77       	andi	r18, 0x7F	; 127
     f6a:	dc 01       	movw	r26, r24
     f6c:	ed 91       	ld	r30, X+
     f6e:	fc 91       	ld	r31, X
     f70:	62 e0       	ldi	r22, 0x02	; 2
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	43 ef       	ldi	r20, 0xF3	; 243
     f76:	00 e0       	ldi	r16, 0x00	; 0
     f78:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
     f7e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
     f80:	dc 01       	movw	r26, r24
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	46 ef       	ldi	r20, 0xF6	; 246
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	09 95       	icall
}
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
     f96:	0f 93       	push	r16
     f98:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
     f9a:	dc 01       	movw	r26, r24
     f9c:	ed 91       	ld	r30, X+
     f9e:	fc 91       	ld	r31, X
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	00 e0       	ldi	r16, 0x00	; 0
     fa8:	09 95       	icall
}
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
     fae:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
     fb0:	dc 01       	movw	r26, r24
     fb2:	ed 91       	ld	r30, X+
     fb4:	fc 91       	ld	r31, X
     fb6:	09 95       	icall
}
     fb8:	0f 91       	pop	r16
     fba:	08 95       	ret

00000fbc <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
     fbc:	6f 92       	push	r6
     fbe:	7f 92       	push	r7
     fc0:	8f 92       	push	r8
     fc2:	9f 92       	push	r9
     fc4:	af 92       	push	r10
     fc6:	bf 92       	push	r11
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	00 d0       	rcall	.+0      	; 0xfda <midi_send_array+0x1e>
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	4c 01       	movw	r8, r24
     fe2:	6b 01       	movw	r12, r22
     fe4:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
     fe6:	61 15       	cp	r22, r1
     fe8:	71 05       	cpc	r23, r1
     fea:	41 f1       	breq	.+80     	; 0x103c <midi_send_array+0x80>
     fec:	ee 24       	eor	r14, r14
     fee:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
     ff0:	0f 2e       	mov	r0, r31
     ff2:	f3 e0       	ldi	r31, 0x03	; 3
     ff4:	6f 2e       	mov	r6, r31
     ff6:	77 24       	eor	r7, r7
     ff8:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
     ffa:	19 82       	std	Y+1, r1	; 0x01
     ffc:	1a 82       	std	Y+2, r1	; 0x02
     ffe:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    1000:	86 01       	movw	r16, r12
    1002:	0e 19       	sub	r16, r14
    1004:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    1006:	04 30       	cpi	r16, 0x04	; 4
    1008:	11 05       	cpc	r17, r1
    100a:	08 f0       	brcs	.+2      	; 0x100e <midi_send_array+0x52>
    100c:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    100e:	b5 01       	movw	r22, r10
    1010:	6e 0d       	add	r22, r14
    1012:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    1014:	ce 01       	movw	r24, r28
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	40 2f       	mov	r20, r16
    101a:	51 2f       	mov	r21, r17
    101c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    1020:	c4 01       	movw	r24, r8
    1022:	b8 01       	movw	r22, r16
    1024:	49 81       	ldd	r20, Y+1	; 0x01
    1026:	2a 81       	ldd	r18, Y+2	; 0x02
    1028:	0b 81       	ldd	r16, Y+3	; 0x03
    102a:	0e 94 d7 07 	call	0xfae	; 0xfae <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	e8 0e       	add	r14, r24
    1034:	f9 1e       	adc	r15, r25
    1036:	ec 14       	cp	r14, r12
    1038:	fd 04       	cpc	r15, r13
    103a:	f8 f2       	brcs	.-66     	; 0xffa <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	9f 90       	pop	r9
    1058:	8f 90       	pop	r8
    105a:	7f 90       	pop	r7
    105c:	6f 90       	pop	r6
    105e:	08 95       	ret

00001060 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    1060:	fc 01       	movw	r30, r24
    1062:	73 83       	std	Z+3, r23	; 0x03
    1064:	62 83       	std	Z+2, r22	; 0x02
}
    1066:	08 95       	ret

00001068 <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    1068:	fc 01       	movw	r30, r24
    106a:	75 83       	std	Z+5, r23	; 0x05
    106c:	64 83       	std	Z+4, r22	; 0x04
}
    106e:	08 95       	ret

00001070 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    1070:	fc 01       	movw	r30, r24
    1072:	77 83       	std	Z+7, r23	; 0x07
    1074:	66 83       	std	Z+6, r22	; 0x06
}
    1076:	08 95       	ret

00001078 <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    1078:	fc 01       	movw	r30, r24
    107a:	71 87       	std	Z+9, r23	; 0x09
    107c:	60 87       	std	Z+8, r22	; 0x08
}
    107e:	08 95       	ret

00001080 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    1080:	fc 01       	movw	r30, r24
    1082:	73 87       	std	Z+11, r23	; 0x0b
    1084:	62 87       	std	Z+10, r22	; 0x0a
}
    1086:	08 95       	ret

00001088 <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    1088:	fc 01       	movw	r30, r24
    108a:	75 87       	std	Z+13, r23	; 0x0d
    108c:	64 87       	std	Z+12, r22	; 0x0c
}
    108e:	08 95       	ret

00001090 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    1090:	fc 01       	movw	r30, r24
    1092:	77 87       	std	Z+15, r23	; 0x0f
    1094:	66 87       	std	Z+14, r22	; 0x0e
}
    1096:	08 95       	ret

00001098 <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    1098:	fc 01       	movw	r30, r24
    109a:	71 8b       	std	Z+17, r23	; 0x11
    109c:	60 8b       	std	Z+16, r22	; 0x10
}
    109e:	08 95       	ret

000010a0 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    10a0:	fc 01       	movw	r30, r24
    10a2:	73 8b       	std	Z+19, r23	; 0x13
    10a4:	62 8b       	std	Z+18, r22	; 0x12
}
    10a6:	08 95       	ret

000010a8 <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    10a8:	fc 01       	movw	r30, r24
    10aa:	75 8b       	std	Z+21, r23	; 0x15
    10ac:	64 8b       	std	Z+20, r22	; 0x14
}
    10ae:	08 95       	ret

000010b0 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    10b0:	fc 01       	movw	r30, r24
    10b2:	77 8b       	std	Z+23, r23	; 0x17
    10b4:	66 8b       	std	Z+22, r22	; 0x16
}
    10b6:	08 95       	ret

000010b8 <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    10b8:	fc 01       	movw	r30, r24
    10ba:	71 8f       	std	Z+25, r23	; 0x19
    10bc:	60 8f       	std	Z+24, r22	; 0x18
}
    10be:	08 95       	ret

000010c0 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    10c0:	fc 01       	movw	r30, r24
    10c2:	73 8f       	std	Z+27, r23	; 0x1b
    10c4:	62 8f       	std	Z+26, r22	; 0x1a
}
    10c6:	08 95       	ret

000010c8 <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    10c8:	fc 01       	movw	r30, r24
    10ca:	75 8f       	std	Z+29, r23	; 0x1d
    10cc:	64 8f       	std	Z+28, r22	; 0x1c
}
    10ce:	08 95       	ret

000010d0 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    10d0:	fc 01       	movw	r30, r24
    10d2:	77 8f       	std	Z+31, r23	; 0x1f
    10d4:	66 8f       	std	Z+30, r22	; 0x1e
}
    10d6:	08 95       	ret

000010d8 <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    10de:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    10e0:	1f a2       	lds	r17, 0x9f
    10e2:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    10e4:	bc 01       	movw	r22, r24
    10e6:	68 5d       	subi	r22, 0xD8	; 216
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	88 51       	subi	r24, 0x18	; 24
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	40 ec       	ldi	r20, 0xC0	; 192
    10f0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    10f4:	1b 82       	std	Y+3, r1	; 0x03
    10f6:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    10f8:	1d 82       	std	Y+5, r1	; 0x05
    10fa:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    10fc:	1f 82       	std	Y+7, r1	; 0x07
    10fe:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    1100:	19 86       	std	Y+9, r1	; 0x09
    1102:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    1104:	1b 86       	std	Y+11, r1	; 0x0b
    1106:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    1108:	1d 86       	std	Y+13, r1	; 0x0d
    110a:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    110c:	1f 86       	std	Y+15, r1	; 0x0f
    110e:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    1110:	19 8a       	std	Y+17, r1	; 0x11
    1112:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    1114:	1b 8a       	std	Y+19, r1	; 0x13
    1116:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    1118:	1d 8a       	std	Y+21, r1	; 0x15
    111a:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    111c:	1f 8a       	std	Y+23, r1	; 0x17
    111e:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    1120:	19 8e       	std	Y+25, r1	; 0x19
    1122:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    1124:	1b 8e       	std	Y+27, r1	; 0x1b
    1126:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    1128:	1d 8e       	std	Y+29, r1	; 0x1d
    112a:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    112c:	1f 8e       	std	Y+31, r1	; 0x1f
    112e:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    1130:	19 a2       	lds	r17, 0x99
    1132:	18 a2       	lds	r17, 0x98
}
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	08 95       	ret

0000113a <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    1148:	66 23       	and	r22, r22
    114a:	99 f0       	breq	.+38     	; 0x1172 <midi_device_input+0x38>
    114c:	04 2f       	mov	r16, r20
    114e:	15 2f       	mov	r17, r21
    1150:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    1152:	0f 2e       	mov	r0, r31
    1154:	f8 ee       	ldi	r31, 0xE8	; 232
    1156:	ef 2e       	mov	r14, r31
    1158:	ff 24       	eor	r15, r15
    115a:	f0 2d       	mov	r31, r0
    115c:	e8 0e       	add	r14, r24
    115e:	f9 1e       	adc	r15, r25
    1160:	f8 01       	movw	r30, r16
    1162:	61 91       	ld	r22, Z+
    1164:	8f 01       	movw	r16, r30
    1166:	c7 01       	movw	r24, r14
    1168:	0e 94 ed 05 	call	0xbda	; 0xbda <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    116c:	cf 5f       	subi	r28, 0xFF	; 255
    116e:	cd 17       	cp	r28, r29
    1170:	b9 f7       	brne	.-18     	; 0x1160 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	ef 90       	pop	r14
    117e:	08 95       	ret

00001180 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    1180:	fc 01       	movw	r30, r24
    1182:	71 83       	std	Z+1, r23	; 0x01
    1184:	60 83       	st	Z, r22
}
    1186:	08 95       	ret

00001188 <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    1188:	fc 01       	movw	r30, r24
    118a:	71 a3       	lds	r23, 0x51
    118c:	60 a3       	lds	r22, 0x50
}
    118e:	08 95       	ret

00001190 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    1190:	af 92       	push	r10
    1192:	bf 92       	push	r11
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <midi_input_callbacks+0x16>
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	6c 01       	movw	r12, r24
    11ae:	5b 01       	movw	r10, r22
    11b0:	f4 2e       	mov	r15, r20
    11b2:	e2 2e       	mov	r14, r18
    11b4:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    11b6:	dc 01       	movw	r26, r24
    11b8:	95 96       	adiw	r26, 0x25	; 37
    11ba:	8c 91       	ld	r24, X
    11bc:	95 97       	sbiw	r26, 0x25	; 37
    11be:	84 30       	cpi	r24, 0x04	; 4
    11c0:	e9 f4       	brne	.+58     	; 0x11fc <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    11c2:	5a 96       	adiw	r26, 0x1a	; 26
    11c4:	ed 91       	ld	r30, X+
    11c6:	fc 91       	ld	r31, X
    11c8:	5b 97       	sbiw	r26, 0x1b	; 27
    11ca:	30 97       	sbiw	r30, 0x00	; 0
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <midi_input_callbacks+0x40>
    11ce:	ee c0       	rjmp	.+476    	; 0x13ac <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    11d0:	cb 01       	movw	r24, r22
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	63 e0       	ldi	r22, 0x03	; 3
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
    11dc:	cb 01       	movw	r24, r22
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	68 0f       	add	r22, r24
    11e4:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    11e6:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    11e8:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    11ea:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    11ec:	4a 2d       	mov	r20, r10
    11ee:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    11f0:	c6 01       	movw	r24, r12
    11f2:	9e 01       	movw	r18, r28
    11f4:	2f 5f       	subi	r18, 0xFF	; 255
    11f6:	3f 4f       	sbci	r19, 0xFF	; 255
    11f8:	09 95       	icall
    11fa:	c8 c0       	rjmp	.+400    	; 0x138c <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    11fc:	62 30       	cpi	r22, 0x02	; 2
    11fe:	71 05       	cpc	r23, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <midi_input_callbacks+0x74>
    1202:	5f c0       	rjmp	.+190    	; 0x12c2 <midi_input_callbacks+0x132>
    1204:	63 30       	cpi	r22, 0x03	; 3
    1206:	71 05       	cpc	r23, r1
    1208:	29 f0       	breq	.+10     	; 0x1214 <midi_input_callbacks+0x84>
    120a:	61 30       	cpi	r22, 0x01	; 1
    120c:	71 05       	cpc	r23, r1
    120e:	09 f0       	breq	.+2      	; 0x1212 <midi_input_callbacks+0x82>
    1210:	b3 c0       	rjmp	.+358    	; 0x1378 <midi_input_callbacks+0x1e8>
    1212:	99 c0       	rjmp	.+306    	; 0x1346 <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    1214:	84 2f       	mov	r24, r20
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	80 7f       	andi	r24, 0xF0	; 240
    121a:	90 70       	andi	r25, 0x00	; 0
    121c:	80 3a       	cpi	r24, 0xA0	; 160
    121e:	91 05       	cpc	r25, r1
    1220:	29 f1       	breq	.+74     	; 0x126c <midi_input_callbacks+0xdc>
    1222:	81 3a       	cpi	r24, 0xA1	; 161
    1224:	91 05       	cpc	r25, r1
    1226:	3c f4       	brge	.+14     	; 0x1236 <midi_input_callbacks+0xa6>
    1228:	80 38       	cpi	r24, 0x80	; 128
    122a:	91 05       	cpc	r25, r1
    122c:	c9 f0       	breq	.+50     	; 0x1260 <midi_input_callbacks+0xd0>
    122e:	80 39       	cpi	r24, 0x90	; 144
    1230:	91 05       	cpc	r25, r1
    1232:	91 f5       	brne	.+100    	; 0x1298 <midi_input_callbacks+0x108>
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <midi_input_callbacks+0xc4>
    1236:	80 3e       	cpi	r24, 0xE0	; 224
    1238:	91 05       	cpc	r25, r1
    123a:	f1 f0       	breq	.+60     	; 0x1278 <midi_input_callbacks+0xe8>
    123c:	80 3f       	cpi	r24, 0xF0	; 240
    123e:	91 05       	cpc	r25, r1
    1240:	09 f1       	breq	.+66     	; 0x1284 <midi_input_callbacks+0xf4>
    1242:	80 3b       	cpi	r24, 0xB0	; 176
    1244:	91 05       	cpc	r25, r1
    1246:	41 f5       	brne	.+80     	; 0x1298 <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    1248:	d6 01       	movw	r26, r12
    124a:	12 96       	adiw	r26, 0x02	; 2
    124c:	ed 91       	ld	r30, X+
    124e:	fc 91       	ld	r31, X
    1250:	13 97       	sbiw	r26, 0x03	; 3
              break;
    1252:	24 c0       	rjmp	.+72     	; 0x129c <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    1254:	d6 01       	movw	r26, r12
    1256:	14 96       	adiw	r26, 0x04	; 4
    1258:	ed 91       	ld	r30, X+
    125a:	fc 91       	ld	r31, X
    125c:	15 97       	sbiw	r26, 0x05	; 5
              break;
    125e:	1e c0       	rjmp	.+60     	; 0x129c <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    1260:	d6 01       	movw	r26, r12
    1262:	16 96       	adiw	r26, 0x06	; 6
    1264:	ed 91       	ld	r30, X+
    1266:	fc 91       	ld	r31, X
    1268:	17 97       	sbiw	r26, 0x07	; 7
              break;
    126a:	18 c0       	rjmp	.+48     	; 0x129c <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    126c:	d6 01       	movw	r26, r12
    126e:	18 96       	adiw	r26, 0x08	; 8
    1270:	ed 91       	ld	r30, X+
    1272:	fc 91       	ld	r31, X
    1274:	19 97       	sbiw	r26, 0x09	; 9
              break;
    1276:	12 c0       	rjmp	.+36     	; 0x129c <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    1278:	d6 01       	movw	r26, r12
    127a:	1a 96       	adiw	r26, 0x0a	; 10
    127c:	ed 91       	ld	r30, X+
    127e:	fc 91       	ld	r31, X
    1280:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    1282:	0c c0       	rjmp	.+24     	; 0x129c <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    1284:	b2 ef       	ldi	r27, 0xF2	; 242
    1286:	4b 17       	cp	r20, r27
    1288:	09 f0       	breq	.+2      	; 0x128c <midi_input_callbacks+0xfc>
    128a:	90 c0       	rjmp	.+288    	; 0x13ac <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    128c:	d6 01       	movw	r26, r12
    128e:	1c 96       	adiw	r26, 0x0c	; 12
    1290:	ed 91       	ld	r30, X+
    1292:	fc 91       	ld	r31, X
    1294:	1d 97       	sbiw	r26, 0x0d	; 13
    1296:	02 c0       	rjmp	.+4      	; 0x129c <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    1298:	e0 e0       	ldi	r30, 0x00	; 0
    129a:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    129c:	30 97       	sbiw	r30, 0x00	; 0
    129e:	09 f4       	brne	.+2      	; 0x12a2 <midi_input_callbacks+0x112>
    12a0:	85 c0       	rjmp	.+266    	; 0x13ac <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    12a2:	b2 ef       	ldi	r27, 0xF2	; 242
    12a4:	fb 16       	cp	r15, r27
    12a6:	31 f4       	brne	.+12     	; 0x12b4 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    12a8:	c6 01       	movw	r24, r12
    12aa:	62 ef       	ldi	r22, 0xF2	; 242
    12ac:	4e 2d       	mov	r20, r14
    12ae:	21 2f       	mov	r18, r17
    12b0:	09 95       	icall
    12b2:	6c c0       	rjmp	.+216    	; 0x138c <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    12b4:	6f 2d       	mov	r22, r15
    12b6:	6f 70       	andi	r22, 0x0F	; 15
    12b8:	c6 01       	movw	r24, r12
    12ba:	4e 2d       	mov	r20, r14
    12bc:	21 2f       	mov	r18, r17
    12be:	09 95       	icall
    12c0:	65 c0       	rjmp	.+202    	; 0x138c <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    12c2:	84 2f       	mov	r24, r20
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	80 7f       	andi	r24, 0xF0	; 240
    12c8:	90 70       	andi	r25, 0x00	; 0
    12ca:	80 3d       	cpi	r24, 0xD0	; 208
    12cc:	91 05       	cpc	r25, r1
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <midi_input_callbacks+0x158>
    12d0:	80 3f       	cpi	r24, 0xF0	; 240
    12d2:	91 05       	cpc	r25, r1
    12d4:	79 f0       	breq	.+30     	; 0x12f4 <midi_input_callbacks+0x164>
    12d6:	80 3c       	cpi	r24, 0xC0	; 192
    12d8:	91 05       	cpc	r25, r1
    12da:	f9 f4       	brne	.+62     	; 0x131a <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    12dc:	d6 01       	movw	r26, r12
    12de:	1e 96       	adiw	r26, 0x0e	; 14
    12e0:	ed 91       	ld	r30, X+
    12e2:	fc 91       	ld	r31, X
    12e4:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    12e6:	1b c0       	rjmp	.+54     	; 0x131e <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    12e8:	d6 01       	movw	r26, r12
    12ea:	50 96       	adiw	r26, 0x10	; 16
    12ec:	ed 91       	ld	r30, X+
    12ee:	fc 91       	ld	r31, X
    12f0:	51 97       	sbiw	r26, 0x11	; 17
              break;
    12f2:	15 c0       	rjmp	.+42     	; 0x131e <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    12f4:	b3 ef       	ldi	r27, 0xF3	; 243
    12f6:	4b 17       	cp	r20, r27
    12f8:	31 f4       	brne	.+12     	; 0x1306 <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    12fa:	d6 01       	movw	r26, r12
    12fc:	52 96       	adiw	r26, 0x12	; 18
    12fe:	ed 91       	ld	r30, X+
    1300:	fc 91       	ld	r31, X
    1302:	53 97       	sbiw	r26, 0x13	; 19
    1304:	0c c0       	rjmp	.+24     	; 0x131e <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    1306:	b1 ef       	ldi	r27, 0xF1	; 241
    1308:	4b 17       	cp	r20, r27
    130a:	09 f0       	breq	.+2      	; 0x130e <midi_input_callbacks+0x17e>
    130c:	4f c0       	rjmp	.+158    	; 0x13ac <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    130e:	d6 01       	movw	r26, r12
    1310:	54 96       	adiw	r26, 0x14	; 20
    1312:	ed 91       	ld	r30, X+
    1314:	fc 91       	ld	r31, X
    1316:	55 97       	sbiw	r26, 0x15	; 21
    1318:	02 c0       	rjmp	.+4      	; 0x131e <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    131a:	e0 e0       	ldi	r30, 0x00	; 0
    131c:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    131e:	30 97       	sbiw	r30, 0x00	; 0
    1320:	09 f4       	brne	.+2      	; 0x1324 <midi_input_callbacks+0x194>
    1322:	44 c0       	rjmp	.+136    	; 0x13ac <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    1324:	b3 ef       	ldi	r27, 0xF3	; 243
    1326:	fb 16       	cp	r15, r27
    1328:	19 f0       	breq	.+6      	; 0x1330 <midi_input_callbacks+0x1a0>
    132a:	81 ef       	ldi	r24, 0xF1	; 241
    132c:	f8 16       	cp	r15, r24
    132e:	29 f4       	brne	.+10     	; 0x133a <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    1330:	c6 01       	movw	r24, r12
    1332:	6f 2d       	mov	r22, r15
    1334:	4e 2d       	mov	r20, r14
    1336:	09 95       	icall
    1338:	29 c0       	rjmp	.+82     	; 0x138c <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    133a:	6f 2d       	mov	r22, r15
    133c:	6f 70       	andi	r22, 0x0F	; 15
    133e:	c6 01       	movw	r24, r12
    1340:	4e 2d       	mov	r20, r14
    1342:	09 95       	icall
    1344:	23 c0       	rjmp	.+70     	; 0x138c <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    1346:	84 2f       	mov	r24, r20
    1348:	0e 94 65 06 	call	0xcca	; 0xcca <midi_is_realtime>
    134c:	88 23       	and	r24, r24
    134e:	31 f0       	breq	.+12     	; 0x135c <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    1350:	d6 01       	movw	r26, r12
    1352:	56 96       	adiw	r26, 0x16	; 22
    1354:	ed 91       	ld	r30, X+
    1356:	fc 91       	ld	r31, X
    1358:	57 97       	sbiw	r26, 0x17	; 23
    135a:	08 c0       	rjmp	.+16     	; 0x136c <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    135c:	b6 ef       	ldi	r27, 0xF6	; 246
    135e:	fb 16       	cp	r15, r27
    1360:	29 f5       	brne	.+74     	; 0x13ac <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    1362:	d6 01       	movw	r26, r12
    1364:	58 96       	adiw	r26, 0x18	; 24
    1366:	ed 91       	ld	r30, X+
    1368:	fc 91       	ld	r31, X
    136a:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    136c:	30 97       	sbiw	r30, 0x00	; 0
    136e:	f1 f0       	breq	.+60     	; 0x13ac <midi_input_callbacks+0x21c>
            func(device, byte0);
    1370:	c6 01       	movw	r24, r12
    1372:	6f 2d       	mov	r22, r15
    1374:	09 95       	icall
    1376:	0a c0       	rjmp	.+20     	; 0x138c <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    1378:	64 30       	cpi	r22, 0x04	; 4
    137a:	71 05       	cpc	r23, r1
    137c:	a8 f4       	brcc	.+42     	; 0x13a8 <midi_input_callbacks+0x218>
    137e:	16 c0       	rjmp	.+44     	; 0x13ac <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    1380:	c6 01       	movw	r24, r12
    1382:	b5 01       	movw	r22, r10
    1384:	4f 2d       	mov	r20, r15
    1386:	2e 2d       	mov	r18, r14
    1388:	01 2f       	mov	r16, r17
    138a:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    138c:	d6 01       	movw	r26, r12
    138e:	5e 96       	adiw	r26, 0x1e	; 30
    1390:	ed 91       	ld	r30, X+
    1392:	fc 91       	ld	r31, X
    1394:	5f 97       	sbiw	r26, 0x1f	; 31
    1396:	30 97       	sbiw	r30, 0x00	; 0
    1398:	89 f0       	breq	.+34     	; 0x13bc <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    139a:	c6 01       	movw	r24, r12
    139c:	b5 01       	movw	r22, r10
    139e:	4f 2d       	mov	r20, r15
    13a0:	2e 2d       	mov	r18, r14
    13a2:	01 2f       	mov	r16, r17
    13a4:	09 95       	icall
    13a6:	0a c0       	rjmp	.+20     	; 0x13bc <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    13a8:	aa 24       	eor	r10, r10
    13aa:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    13ac:	d6 01       	movw	r26, r12
    13ae:	5c 96       	adiw	r26, 0x1c	; 28
    13b0:	ed 91       	ld	r30, X+
    13b2:	fc 91       	ld	r31, X
    13b4:	5d 97       	sbiw	r26, 0x1d	; 29
    13b6:	30 97       	sbiw	r30, 0x00	; 0
    13b8:	19 f7       	brne	.-58     	; 0x1380 <midi_input_callbacks+0x1f0>
    13ba:	e8 cf       	rjmp	.-48     	; 0x138c <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	bf 90       	pop	r11
    13d4:	af 90       	pop	r10
    13d6:	08 95       	ret

000013d8 <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	7c 01       	movw	r14, r24
    13e4:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    13e6:	86 2f       	mov	r24, r22
    13e8:	0e 94 65 06 	call	0xcca	; 0xcca <midi_is_realtime>
    13ec:	88 23       	and	r24, r24
    13ee:	91 f0       	breq	.+36     	; 0x1414 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    13f0:	d7 01       	movw	r26, r14
    13f2:	95 96       	adiw	r26, 0x25	; 37
    13f4:	dc 91       	ld	r29, X
    13f6:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	95 96       	adiw	r26, 0x25	; 37
    13fc:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    13fe:	c7 01       	movw	r24, r14
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	4c 2f       	mov	r20, r28
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	00 e0       	ldi	r16, 0x00	; 0
    140a:	0e 94 c8 08 	call	0x1190	; 0x1190 <midi_input_callbacks>
    device->input_state = state;
    140e:	f7 01       	movw	r30, r14
    1410:	d5 a3       	lds	r29, 0x55
    1412:	b7 c0       	rjmp	.+366    	; 0x1582 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    1414:	8c 2f       	mov	r24, r28
    1416:	0e 94 61 06 	call	0xcc2	; 0xcc2 <midi_is_statusbyte>
    141a:	88 23       	and	r24, r24
    141c:	09 f4       	brne	.+2      	; 0x1420 <midi_process_byte+0x48>
    141e:	73 c0       	rjmp	.+230    	; 0x1506 <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    1420:	d7 01       	movw	r26, r14
    1422:	95 96       	adiw	r26, 0x25	; 37
    1424:	8c 91       	ld	r24, X
    1426:	95 97       	sbiw	r26, 0x25	; 37
    1428:	84 30       	cpi	r24, 0x04	; 4
    142a:	49 f0       	breq	.+18     	; 0x143e <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    142c:	92 96       	adiw	r26, 0x22	; 34
    142e:	cc 93       	st	X, r28
    1430:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	97 96       	adiw	r26, 0x27	; 39
    1438:	9c 93       	st	X, r25
    143a:	8e 93       	st	-X, r24
    143c:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    143e:	8c 2f       	mov	r24, r28
    1440:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <midi_packet_length>
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	41 f0       	breq	.+16     	; 0x1458 <midi_process_byte+0x80>
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	00 f1       	brcs	.+64     	; 0x148c <midi_process_byte+0xb4>
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	a1 f0       	breq	.+40     	; 0x1478 <midi_process_byte+0xa0>
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	09 f0       	breq	.+2      	; 0x1456 <midi_process_byte+0x7e>
    1454:	4f c0       	rjmp	.+158    	; 0x14f4 <midi_process_byte+0x11c>
    1456:	14 c0       	rjmp	.+40     	; 0x1480 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	f7 01       	movw	r30, r14
    145c:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    145e:	c7 01       	movw	r24, r14
    1460:	61 e0       	ldi	r22, 0x01	; 1
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	4c 2f       	mov	r20, r28
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	00 e0       	ldi	r16, 0x00	; 0
    146a:	0e 94 c8 08 	call	0x1190	; 0x1190 <midi_input_callbacks>
        device->input_state = IDLE;
    146e:	d7 01       	movw	r26, r14
    1470:	95 96       	adiw	r26, 0x25	; 37
    1472:	1c 92       	st	X, r1
    1474:	95 97       	sbiw	r26, 0x25	; 37
        break;
    1476:	85 c0       	rjmp	.+266    	; 0x1582 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	f7 01       	movw	r30, r14
    147c:	85 a3       	lds	r24, 0x55
        break;
    147e:	81 c0       	rjmp	.+258    	; 0x1582 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    1480:	83 e0       	ldi	r24, 0x03	; 3
    1482:	d7 01       	movw	r26, r14
    1484:	95 96       	adiw	r26, 0x25	; 37
    1486:	8c 93       	st	X, r24
    1488:	95 97       	sbiw	r26, 0x25	; 37
        break;
    148a:	7b c0       	rjmp	.+246    	; 0x1582 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    148c:	c0 3f       	cpi	r28, 0xF0	; 240
    148e:	19 f0       	breq	.+6      	; 0x1496 <midi_process_byte+0xbe>
    1490:	c7 3f       	cpi	r28, 0xF7	; 247
    1492:	59 f5       	brne	.+86     	; 0x14ea <midi_process_byte+0x112>
    1494:	0a c0       	rjmp	.+20     	; 0x14aa <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    1496:	84 e0       	ldi	r24, 0x04	; 4
    1498:	f7 01       	movw	r30, r14
    149a:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    149c:	80 ef       	ldi	r24, 0xF0	; 240
    149e:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	97 a3       	lds	r25, 0x57
    14a6:	86 a3       	lds	r24, 0x56
            break;
    14a8:	6c c0       	rjmp	.+216    	; 0x1582 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    14aa:	d7 01       	movw	r26, r14
    14ac:	96 96       	adiw	r26, 0x26	; 38
    14ae:	2d 91       	ld	r18, X+
    14b0:	3c 91       	ld	r19, X
    14b2:	97 97       	sbiw	r26, 0x27	; 39
    14b4:	c9 01       	movw	r24, r18
    14b6:	63 e0       	ldi	r22, 0x03	; 3
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
    14be:	f7 01       	movw	r30, r14
    14c0:	e8 0f       	add	r30, r24
    14c2:	f9 1f       	adc	r31, r25
    14c4:	87 ef       	ldi	r24, 0xF7	; 247
    14c6:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    14c8:	b9 01       	movw	r22, r18
    14ca:	6f 5f       	subi	r22, 0xFF	; 255
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	f7 01       	movw	r30, r14
    14d0:	77 a3       	lds	r23, 0x57
    14d2:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    14d4:	c7 01       	movw	r24, r14
    14d6:	42 a1       	lds	r20, 0x42
    14d8:	23 a1       	lds	r18, 0x43
    14da:	04 a1       	lds	r16, 0x44
    14dc:	0e 94 c8 08 	call	0x1190	; 0x1190 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    14e0:	d7 01       	movw	r26, r14
    14e2:	95 96       	adiw	r26, 0x25	; 37
    14e4:	1c 92       	st	X, r1
    14e6:	95 97       	sbiw	r26, 0x25	; 37
            break;
    14e8:	4c c0       	rjmp	.+152    	; 0x1582 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    14ea:	f7 01       	movw	r30, r14
    14ec:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    14ee:	17 a2       	lds	r17, 0x97
    14f0:	16 a2       	lds	r17, 0x96
    14f2:	47 c0       	rjmp	.+142    	; 0x1582 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    14f4:	d7 01       	movw	r26, r14
    14f6:	95 96       	adiw	r26, 0x25	; 37
    14f8:	1c 92       	st	X, r1
    14fa:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    14fc:	97 96       	adiw	r26, 0x27	; 39
    14fe:	1c 92       	st	X, r1
    1500:	1e 92       	st	-X, r1
    1502:	96 97       	sbiw	r26, 0x26	; 38
        break;
    1504:	3e c0       	rjmp	.+124    	; 0x1582 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    1506:	f7 01       	movw	r30, r14
    1508:	25 a1       	lds	r18, 0x45
    150a:	22 23       	and	r18, r18
    150c:	d1 f1       	breq	.+116    	; 0x1582 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    150e:	06 a0       	lds	r16, 0x86
    1510:	f7 a1       	lds	r31, 0x47
    1512:	e0 2d       	mov	r30, r0
    1514:	cf 01       	movw	r24, r30
    1516:	63 e0       	ldi	r22, 0x03	; 3
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
    151e:	ac 01       	movw	r20, r24
    1520:	8e 0d       	add	r24, r14
    1522:	9f 1d       	adc	r25, r15
    1524:	dc 01       	movw	r26, r24
    1526:	92 96       	adiw	r26, 0x22	; 34
    1528:	cc 93       	st	X, r28
    152a:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    152c:	bf 01       	movw	r22, r30
    152e:	6f 5f       	subi	r22, 0xFF	; 255
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
    1532:	f7 01       	movw	r30, r14
    1534:	77 a3       	lds	r23, 0x57
    1536:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    1538:	41 30       	cpi	r20, 0x01	; 1
    153a:	51 05       	cpc	r21, r1
    153c:	91 f0       	breq	.+36     	; 0x1562 <midi_process_byte+0x18a>
    153e:	42 30       	cpi	r20, 0x02	; 2
    1540:	51 05       	cpc	r21, r1
    1542:	f9 f4       	brne	.+62     	; 0x1582 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    1544:	c7 01       	movw	r24, r14
    1546:	42 a1       	lds	r20, 0x42
    1548:	23 a1       	lds	r18, 0x43
    154a:	04 a1       	lds	r16, 0x44
    154c:	0e 94 c8 08 	call	0x1190	; 0x1190 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    1550:	f7 01       	movw	r30, r14
    1552:	85 a1       	lds	r24, 0x45
    1554:	84 30       	cpi	r24, 0x04	; 4
    1556:	a9 f0       	breq	.+42     	; 0x1582 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	97 a3       	lds	r25, 0x57
    155e:	86 a3       	lds	r24, 0x56
    1560:	10 c0       	rjmp	.+32     	; 0x1582 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	71 f4       	brne	.+28     	; 0x1582 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    1566:	c7 01       	movw	r24, r14
    1568:	42 a1       	lds	r20, 0x42
    156a:	23 a1       	lds	r18, 0x43
    156c:	00 e0       	ldi	r16, 0x00	; 0
    156e:	0e 94 c8 08 	call	0x1190	; 0x1190 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    1572:	f7 01       	movw	r30, r14
    1574:	85 a1       	lds	r24, 0x45
    1576:	84 30       	cpi	r24, 0x04	; 4
    1578:	21 f0       	breq	.+8      	; 0x1582 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	97 a3       	lds	r25, 0x57
    1580:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	08 95       	ret

0000158e <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    15a0:	dc 01       	movw	r26, r24
    15a2:	90 96       	adiw	r26, 0x20	; 32
    15a4:	ed 91       	ld	r30, X+
    15a6:	fc 91       	ld	r31, X
    15a8:	91 97       	sbiw	r26, 0x21	; 33
    15aa:	30 97       	sbiw	r30, 0x00	; 0
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    15ae:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    15b0:	0f 2e       	mov	r0, r31
    15b2:	f8 ee       	ldi	r31, 0xE8	; 232
    15b4:	ef 2e       	mov	r14, r31
    15b6:	ff 24       	eor	r15, r15
    15b8:	f0 2d       	mov	r31, r0
    15ba:	ec 0c       	add	r14, r12
    15bc:	fd 1c       	adc	r15, r13
    15be:	c7 01       	movw	r24, r14
    15c0:	0e 94 1c 06 	call	0xc38	; 0xc38 <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    15c4:	c8 2f       	mov	r28, r24
    15c6:	d0 e0       	ldi	r29, 0x00	; 0
    15c8:	20 97       	sbiw	r28, 0x00	; 0
    15ca:	99 f0       	breq	.+38     	; 0x15f2 <midi_device_process+0x64>
    15cc:	00 e0       	ldi	r16, 0x00	; 0
    15ce:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    15d0:	c7 01       	movw	r24, r14
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	0e 94 31 06 	call	0xc62	; 0xc62 <bytequeue_get>
    15d8:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    15da:	c6 01       	movw	r24, r12
    15dc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    15e0:	c7 01       	movw	r24, r14
    15e2:	61 e0       	ldi	r22, 0x01	; 1
    15e4:	0e 94 42 06 	call	0xc84	; 0xc84 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    15e8:	0f 5f       	subi	r16, 0xFF	; 255
    15ea:	1f 4f       	sbci	r17, 0xFF	; 255
    15ec:	0c 17       	cp	r16, r28
    15ee:	1d 07       	cpc	r17, r29
    15f0:	78 f3       	brcs	.-34     	; 0x15d0 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	df 90       	pop	r13
    1600:	cf 90       	pop	r12
    1602:	08 95       	ret

00001604 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    1604:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    1606:	67 e0       	ldi	r22, 0x07	; 7
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
    160e:	48 2f       	mov	r20, r24
   if (remainder)
    1610:	88 23       	and	r24, r24
    1612:	81 f0       	breq	.+32     	; 0x1634 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    1614:	c9 01       	movw	r24, r18
    1616:	67 e0       	ldi	r22, 0x07	; 7
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
    161e:	cb 01       	movw	r24, r22
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	84 0f       	add	r24, r20
    1630:	91 1d       	adc	r25, r1
    1632:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    1634:	c9 01       	movw	r24, r18
    1636:	67 e0       	ldi	r22, 0x07	; 7
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
    163e:	cb 01       	movw	r24, r22
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
}
    164c:	08 95       	ret

0000164e <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    164e:	48 2f       	mov	r20, r24
    1650:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    1652:	a1 f0       	breq	.+40     	; 0x167c <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    1654:	9c 01       	movw	r18, r24
    1656:	36 95       	lsr	r19
    1658:	27 95       	ror	r18
    165a:	36 95       	lsr	r19
    165c:	27 95       	ror	r18
    165e:	36 95       	lsr	r19
    1660:	27 95       	ror	r18
    1662:	c9 01       	movw	r24, r18
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	82 1b       	sub	r24, r18
    1672:	93 0b       	sbc	r25, r19
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	84 0f       	add	r24, r20
    1678:	91 1d       	adc	r25, r1
    167a:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    167c:	9c 01       	movw	r18, r24
    167e:	36 95       	lsr	r19
    1680:	27 95       	ror	r18
    1682:	36 95       	lsr	r19
    1684:	27 95       	ror	r18
    1686:	36 95       	lsr	r19
    1688:	27 95       	ror	r18
    168a:	c9 01       	movw	r24, r18
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	82 1b       	sub	r24, r18
    169a:	93 0b       	sbc	r25, r19
}
    169c:	08 95       	ret

0000169e <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    169e:	2f 92       	push	r2
    16a0:	3f 92       	push	r3
    16a2:	4f 92       	push	r4
    16a4:	5f 92       	push	r5
    16a6:	6f 92       	push	r6
    16a8:	7f 92       	push	r7
    16aa:	8f 92       	push	r8
    16ac:	9f 92       	push	r9
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <sysex_encode+0x26>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <sysex_encode+0x28>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <sysex_encode+0x2a>
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	1c 01       	movw	r2, r24
    16ce:	7a 83       	std	Y+2, r23	; 0x02
    16d0:	69 83       	std	Y+1, r22	; 0x01
    16d2:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    16d4:	ca 01       	movw	r24, r20
    16d6:	67 e0       	ldi	r22, 0x07	; 7
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
    16de:	2b 01       	movw	r4, r22
    16e0:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    16e2:	61 15       	cp	r22, r1
    16e4:	71 05       	cpc	r23, r1
    16e6:	b1 f1       	breq	.+108    	; 0x1754 <sysex_encode+0xb6>
    16e8:	81 01       	movw	r16, r2
    16ea:	e9 80       	ldd	r14, Y+1	; 0x01
    16ec:	fa 80       	ldd	r15, Y+2	; 0x02
    16ee:	cc 24       	eor	r12, r12
    16f0:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    16f2:	88 24       	eor	r8, r8
    16f4:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    16f6:	1e 83       	std	Y+6, r17	; 0x06
    16f8:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    16fa:	f8 01       	movw	r30, r16
    16fc:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    16fe:	fc 82       	std	Y+4, r15	; 0x04
    1700:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1702:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    1704:	ab 81       	ldd	r26, Y+3	; 0x03
    1706:	bc 81       	ldd	r27, Y+4	; 0x04
    1708:	2d 91       	ld	r18, X+
    170a:	bc 83       	std	Y+4, r27	; 0x04
    170c:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    170e:	4f 5f       	subi	r20, 0xFF	; 255
    1710:	5f 4f       	sbci	r21, 0xFF	; 255
    1712:	82 2f       	mov	r24, r18
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	80 78       	andi	r24, 0x80	; 128
    1718:	90 70       	andi	r25, 0x00	; 0
    171a:	bc 01       	movw	r22, r24
    171c:	04 2e       	mov	r0, r20
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <sysex_encode+0x86>
    1720:	75 95       	asr	r23
    1722:	67 95       	ror	r22
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <sysex_encode+0x82>
    1728:	ad 81       	ldd	r26, Y+5	; 0x05
    172a:	be 81       	ldd	r27, Y+6	; 0x06
    172c:	8c 91       	ld	r24, X
    172e:	86 2b       	or	r24, r22
    1730:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    1732:	2f 77       	andi	r18, 0x7F	; 127
    1734:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    1736:	47 30       	cpi	r20, 0x07	; 7
    1738:	51 05       	cpc	r21, r1
    173a:	21 f7       	brne	.-56     	; 0x1704 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    173c:	08 94       	sec
    173e:	c1 1c       	adc	r12, r1
    1740:	d1 1c       	adc	r13, r1
    1742:	08 5f       	subi	r16, 0xF8	; 248
    1744:	1f 4f       	sbci	r17, 0xFF	; 255
    1746:	e7 e0       	ldi	r30, 0x07	; 7
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	ee 0e       	add	r14, r30
    174c:	ff 1e       	adc	r15, r31
    174e:	ca 14       	cp	r12, r10
    1750:	db 04       	cpc	r13, r11
    1752:	89 f6       	brne	.-94     	; 0x16f6 <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    1754:	c3 01       	movw	r24, r6
    1756:	67 e0       	ldi	r22, 0x07	; 7
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__udivmodhi4>
   if (remainder) {
    175e:	88 23       	and	r24, r24
    1760:	d9 f1       	breq	.+118    	; 0x17d8 <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    1762:	82 01       	movw	r16, r4
    1764:	00 0f       	add	r16, r16
    1766:	11 1f       	adc	r17, r17
    1768:	00 0f       	add	r16, r16
    176a:	11 1f       	adc	r17, r17
    176c:	00 0f       	add	r16, r16
    176e:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    1770:	78 01       	movw	r14, r16
    1772:	e4 18       	sub	r14, r4
    1774:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    1776:	d1 01       	movw	r26, r2
    1778:	a0 0f       	add	r26, r16
    177a:	b1 1f       	adc	r27, r17
    177c:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    177e:	68 2f       	mov	r22, r24
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	61 15       	cp	r22, r1
    1784:	71 05       	cpc	r23, r1
    1786:	19 f1       	breq	.+70     	; 0x17ce <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	ee 0e       	add	r14, r30
    178e:	ff 1e       	adc	r15, r31
    1790:	c8 01       	movw	r24, r16
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	28 0e       	add	r2, r24
    1796:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    179c:	f7 01       	movw	r30, r14
    179e:	41 91       	ld	r20, Z+
    17a0:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    17a2:	2f 5f       	subi	r18, 0xFF	; 255
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	84 2f       	mov	r24, r20
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	80 78       	andi	r24, 0x80	; 128
    17ac:	90 70       	andi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <sysex_encode+0x118>
    17b2:	95 95       	asr	r25
    17b4:	87 95       	ror	r24
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <sysex_encode+0x114>
    17ba:	9c 91       	ld	r25, X
    17bc:	89 2b       	or	r24, r25
    17be:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    17c0:	4f 77       	andi	r20, 0x7F	; 127
    17c2:	f1 01       	movw	r30, r2
    17c4:	41 93       	st	Z+, r20
    17c6:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    17c8:	26 17       	cp	r18, r22
    17ca:	37 07       	cpc	r19, r23
    17cc:	38 f3       	brcs	.-50     	; 0x179c <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    17ce:	c8 01       	movw	r24, r16
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	86 0f       	add	r24, r22
    17d4:	97 1f       	adc	r25, r23
    17d6:	07 c0       	rjmp	.+14     	; 0x17e6 <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    17d8:	c2 01       	movw	r24, r4
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
   }
}
    17e6:	26 96       	adiw	r28, 0x06	; 6
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	df 90       	pop	r13
    1800:	cf 90       	pop	r12
    1802:	bf 90       	pop	r11
    1804:	af 90       	pop	r10
    1806:	9f 90       	pop	r9
    1808:	8f 90       	pop	r8
    180a:	7f 90       	pop	r7
    180c:	6f 90       	pop	r6
    180e:	5f 90       	pop	r5
    1810:	4f 90       	pop	r4
    1812:	3f 90       	pop	r3
    1814:	2f 90       	pop	r2
    1816:	08 95       	ret

00001818 <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1818:	6f 92       	push	r6
    181a:	7f 92       	push	r7
    181c:	8f 92       	push	r8
    181e:	9f 92       	push	r9
    1820:	af 92       	push	r10
    1822:	bf 92       	push	r11
    1824:	cf 92       	push	r12
    1826:	df 92       	push	r13
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	3c 01       	movw	r6, r24
    1836:	4b 01       	movw	r8, r22
    1838:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    183a:	42 30       	cpi	r20, 0x02	; 2
    183c:	51 05       	cpc	r21, r1
    183e:	08 f4       	brcc	.+2      	; 0x1842 <sysex_decode+0x2a>
    1840:	6f c0       	rjmp	.+222    	; 0x1920 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    1842:	7a 01       	movw	r14, r20
    1844:	f6 94       	lsr	r15
    1846:	e7 94       	ror	r14
    1848:	f6 94       	lsr	r15
    184a:	e7 94       	ror	r14
    184c:	f6 94       	lsr	r15
    184e:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    1850:	e1 14       	cp	r14, r1
    1852:	f1 04       	cpc	r15, r1
    1854:	29 f1       	breq	.+74     	; 0x18a0 <sysex_decode+0x88>
    1856:	eb 01       	movw	r28, r22
    1858:	b3 01       	movw	r22, r6
    185a:	00 e0       	ldi	r16, 0x00	; 0
    185c:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    185e:	cc 24       	eor	r12, r12
    1860:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    1862:	de 01       	movw	r26, r28
    1864:	11 96       	adiw	r26, 0x01	; 1
    1866:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    1868:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    186a:	2d 91       	ld	r18, X+
    186c:	2f 77       	andi	r18, 0x7F	; 127
    186e:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    1870:	4f 5f       	subi	r20, 0xFF	; 255
    1872:	5f 4f       	sbci	r21, 0xFF	; 255
    1874:	88 81       	ld	r24, Y
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	04 2e       	mov	r0, r20
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <sysex_decode+0x68>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <sysex_decode+0x64>
    1884:	80 78       	andi	r24, 0x80	; 128
    1886:	28 2b       	or	r18, r24
    1888:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    188a:	47 30       	cpi	r20, 0x07	; 7
    188c:	51 05       	cpc	r21, r1
    188e:	69 f7       	brne	.-38     	; 0x186a <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    1890:	0f 5f       	subi	r16, 0xFF	; 255
    1892:	1f 4f       	sbci	r17, 0xFF	; 255
    1894:	28 96       	adiw	r28, 0x08	; 8
    1896:	69 5f       	subi	r22, 0xF9	; 249
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	0e 15       	cp	r16, r14
    189c:	1f 05       	cpc	r17, r15
    189e:	09 f7       	brne	.-62     	; 0x1862 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    18a0:	5a 2d       	mov	r21, r10
    18a2:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    18a4:	99 f1       	breq	.+102    	; 0x190c <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    18a6:	e7 01       	movw	r28, r14
    18a8:	cc 0f       	add	r28, r28
    18aa:	dd 1f       	adc	r29, r29
    18ac:	cc 0f       	add	r28, r28
    18ae:	dd 1f       	adc	r29, r29
    18b0:	cc 0f       	add	r28, r28
    18b2:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    18b4:	8e 01       	movw	r16, r28
    18b6:	0e 19       	sub	r16, r14
    18b8:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    18ba:	65 2f       	mov	r22, r21
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	61 50       	subi	r22, 0x01	; 1
    18c0:	70 40       	sbci	r23, 0x00	; 0
    18c2:	f9 f0       	breq	.+62     	; 0x1902 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    18c4:	ce 01       	movw	r24, r28
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	d4 01       	movw	r26, r8
    18ca:	a8 0f       	add	r26, r24
    18cc:	b9 1f       	adc	r27, r25
    18ce:	f3 01       	movw	r30, r6
    18d0:	e0 0f       	add	r30, r16
    18d2:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    18d8:	c8 0d       	add	r28, r8
    18da:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    18dc:	4d 91       	ld	r20, X+
    18de:	4f 77       	andi	r20, 0x7F	; 127
    18e0:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    18e2:	2f 5f       	subi	r18, 0xFF	; 255
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	88 81       	ld	r24, Y
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 2e       	mov	r0, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <sysex_decode+0xda>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <sysex_decode+0xd6>
    18f6:	80 78       	andi	r24, 0x80	; 128
    18f8:	48 2b       	or	r20, r24
    18fa:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    18fc:	26 17       	cp	r18, r22
    18fe:	37 07       	cpc	r19, r23
    1900:	68 f3       	brcs	.-38     	; 0x18dc <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    1902:	c8 01       	movw	r24, r16
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	85 0f       	add	r24, r21
    1908:	91 1d       	adc	r25, r1
    190a:	0c c0       	rjmp	.+24     	; 0x1924 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    190c:	c7 01       	movw	r24, r14
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	8e 19       	sub	r24, r14
    191c:	9f 09       	sbc	r25, r15
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	ff 90       	pop	r15
    192e:	ef 90       	pop	r14
    1930:	df 90       	pop	r13
    1932:	cf 90       	pop	r12
    1934:	bf 90       	pop	r11
    1936:	af 90       	pop	r10
    1938:	9f 90       	pop	r9
    193a:	8f 90       	pop	r8
    193c:	7f 90       	pop	r7
    193e:	6f 90       	pop	r6
    1940:	08 95       	ret

00001942 <__udivmodhi4>:
    1942:	aa 1b       	sub	r26, r26
    1944:	bb 1b       	sub	r27, r27
    1946:	51 e1       	ldi	r21, 0x11	; 17
    1948:	07 c0       	rjmp	.+14     	; 0x1958 <__udivmodhi4_ep>

0000194a <__udivmodhi4_loop>:
    194a:	aa 1f       	adc	r26, r26
    194c:	bb 1f       	adc	r27, r27
    194e:	a6 17       	cp	r26, r22
    1950:	b7 07       	cpc	r27, r23
    1952:	10 f0       	brcs	.+4      	; 0x1958 <__udivmodhi4_ep>
    1954:	a6 1b       	sub	r26, r22
    1956:	b7 0b       	sbc	r27, r23

00001958 <__udivmodhi4_ep>:
    1958:	88 1f       	adc	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	5a 95       	dec	r21
    195e:	a9 f7       	brne	.-22     	; 0x194a <__udivmodhi4_loop>
    1960:	80 95       	com	r24
    1962:	90 95       	com	r25
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	08 95       	ret

0000196a <__divmodhi4>:
    196a:	97 fb       	bst	r25, 7
    196c:	09 2e       	mov	r0, r25
    196e:	07 26       	eor	r0, r23
    1970:	0a d0       	rcall	.+20     	; 0x1986 <__divmodhi4_neg1>
    1972:	77 fd       	sbrc	r23, 7
    1974:	04 d0       	rcall	.+8      	; 0x197e <__divmodhi4_neg2>
    1976:	e5 df       	rcall	.-54     	; 0x1942 <__udivmodhi4>
    1978:	06 d0       	rcall	.+12     	; 0x1986 <__divmodhi4_neg1>
    197a:	00 20       	and	r0, r0
    197c:	1a f4       	brpl	.+6      	; 0x1984 <__divmodhi4_exit>

0000197e <__divmodhi4_neg2>:
    197e:	70 95       	com	r23
    1980:	61 95       	neg	r22
    1982:	7f 4f       	sbci	r23, 0xFF	; 255

00001984 <__divmodhi4_exit>:
    1984:	08 95       	ret

00001986 <__divmodhi4_neg1>:
    1986:	f6 f7       	brtc	.-4      	; 0x1984 <__divmodhi4_exit>
    1988:	90 95       	com	r25
    198a:	81 95       	neg	r24
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	08 95       	ret

00001990 <memcpy>:
    1990:	fb 01       	movw	r30, r22
    1992:	dc 01       	movw	r26, r24
    1994:	02 c0       	rjmp	.+4      	; 0x199a <memcpy+0xa>
    1996:	01 90       	ld	r0, Z+
    1998:	0d 92       	st	X+, r0
    199a:	41 50       	subi	r20, 0x01	; 1
    199c:	50 40       	sbci	r21, 0x00	; 0
    199e:	d8 f7       	brcc	.-10     	; 0x1996 <memcpy+0x6>
    19a0:	08 95       	ret

000019a2 <_exit>:
    19a2:	f8 94       	cli

000019a4 <__stop_program>:
    19a4:	ff cf       	rjmp	.-2      	; 0x19a4 <__stop_program>
