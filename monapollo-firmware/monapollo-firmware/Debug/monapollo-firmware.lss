
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b4  00800100  00003f4c  00004000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f4c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000217  008002b4  008002b4  000041b4  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  000041b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  00004828  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  0000541c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000003b8  00000000  00000000  00005760  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006fee  00000000  00000000  00005b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019d6  00000000  00000000  0000cb06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024cb  00000000  00000000  0000e4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e10  00000000  00000000  000109a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a11  00000000  00000000  000117b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002fee  00000000  00000000  000131c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  000161b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_9>
      28:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	ec e4       	ldi	r30, 0x4C	; 76
      78:	ff e3       	ldi	r31, 0x3F	; 63
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a4 eb       	ldi	r26, 0xB4	; 180
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ab 3c       	cpi	r26, 0xCB	; 203
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 c4 04 	call	0x988	; 0x988 <main>
      9a:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <update_arp_sequence>:
//#include "display.h"

struct arp arp;


void update_arp_sequence(void) {
     146:	4f 92       	push	r4
     148:	5f 92       	push	r5
     14a:	6f 92       	push	r6
     14c:	7f 92       	push	r7
     14e:	8f 92       	push	r8
     150:	9f 92       	push	r9
     152:	af 92       	push	r10
     154:	bf 92       	push	r11
     156:	cf 92       	push	r12
     158:	df 92       	push	r13
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
	


	arp.step_number = gate_buffer*(arp.range + 1);
     166:	90 91 88 03 	lds	r25, 0x0388
     16a:	9f 5f       	subi	r25, 0xFF	; 255
     16c:	80 91 b4 02 	lds	r24, 0x02B4
     170:	98 9f       	mul	r25, r24
     172:	80 2d       	mov	r24, r0
     174:	11 24       	eor	r1, r1
     176:	80 93 89 03 	sts	0x0389, r24
     17a:	88 24       	eor	r8, r8
     17c:	99 24       	eor	r9, r9
	//arp.step_position = 0;
	
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
     17e:	66 24       	eor	r6, r6
     180:	77 24       	eor	r7, r7


	arp.step_number = gate_buffer*(arp.range + 1);
	//arp.step_position = 0;
	
	uint8_t step = 0;
     182:	ff 24       	eor	r15, r15
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     184:	44 24       	eor	r4, r4
     186:	55 24       	eor	r5, r5
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     188:	0f 2e       	mov	r0, r31
     18a:	f1 e9       	ldi	r31, 0x91	; 145
     18c:	cf 2e       	mov	r12, r31
     18e:	f3 e0       	ldi	r31, 0x03	; 3
     190:	df 2e       	mov	r13, r31
     192:	f0 2d       	mov	r31, r0
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
						
						root_note += 12;
						
					}
					arp.sequence[step++].note = root_note - (range*12);
     194:	0f 2e       	mov	r0, r31
     196:	f8 e8       	ldi	r31, 0x88	; 136
     198:	af 2e       	mov	r10, r31
     19a:	f3 e0       	ldi	r31, 0x03	; 3
     19c:	bf 2e       	mov	r11, r31
     19e:	f0 2d       	mov	r31, r0
     1a0:	4c c0       	rjmp	.+152    	; 0x23a <update_arp_sequence+0xf4>
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
			
			uint8_t root_note = get_indexed_note(gate_buffer - i - 1); //need to get notes in reverse order out of note pool
     1a2:	81 50       	subi	r24, 0x01	; 1
     1a4:	80 1b       	sub	r24, r16
     1a6:	0e 94 86 01 	call	0x30c	; 0x30c <get_indexed_note>
     1aa:	28 2f       	mov	r18, r24
			//uint8_t root_note = get_indexed_note(i);
				
			switch(arp.mode) {
     1ac:	f6 01       	movw	r30, r12
     1ae:	80 81       	ld	r24, Z
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	41 f0       	breq	.+16     	; 0x1c4 <update_arp_sequence+0x7e>
     1b4:	83 30       	cpi	r24, 0x03	; 3
     1b6:	18 f4       	brcc	.+6      	; 0x1be <update_arp_sequence+0x78>
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	49 f5       	brne	.+82     	; 0x20e <update_arp_sequence+0xc8>
     1bc:	0a c0       	rjmp	.+20     	; 0x1d2 <update_arp_sequence+0x8c>
     1be:	85 30       	cpi	r24, 0x05	; 5
     1c0:	30 f5       	brcc	.+76     	; 0x20e <update_arp_sequence+0xc8>
     1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <update_arp_sequence+0x8c>
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     1c4:	ce 01       	movw	r24, r28
     1c6:	82 0f       	add	r24, r18
     1c8:	91 1d       	adc	r25, r1
     1ca:	88 30       	cpi	r24, 0x08	; 8
     1cc:	91 05       	cpc	r25, r1
     1ce:	6c f0       	brlt	.+26     	; 0x1ea <update_arp_sequence+0xa4>
     1d0:	13 c0       	rjmp	.+38     	; 0x1f8 <update_arp_sequence+0xb2>
			switch(arp.mode) {
				
				case UP:
				case UP_DOWN:
				case RANDOM:
					arp.sequence[step++].note = root_note + (range*12); //will need to handle max note out of range here
     1d2:	8f 2d       	mov	r24, r15
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	05 96       	adiw	r24, 0x05	; 5
     1d8:	88 0f       	add	r24, r24
     1da:	99 1f       	adc	r25, r25
     1dc:	8a 0d       	add	r24, r10
     1de:	9b 1d       	adc	r25, r11
     1e0:	2e 19       	sub	r18, r14
     1e2:	fc 01       	movw	r30, r24
     1e4:	20 83       	st	Z, r18
     1e6:	f3 94       	inc	r15
				
					break;
     1e8:	12 c0       	rjmp	.+36     	; 0x20e <update_arp_sequence+0xc8>
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
						
						root_note += 12;
     1ea:	24 5f       	subi	r18, 0xF4	; 244
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     1ec:	ce 01       	movw	r24, r28
     1ee:	82 0f       	add	r24, r18
     1f0:	91 1d       	adc	r25, r1
     1f2:	88 30       	cpi	r24, 0x08	; 8
     1f4:	91 05       	cpc	r25, r1
     1f6:	cc f3       	brlt	.-14     	; 0x1ea <update_arp_sequence+0xa4>
						
						root_note += 12;
						
					}
					arp.sequence[step++].note = root_note - (range*12);
     1f8:	8f 2d       	mov	r24, r15
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	05 96       	adiw	r24, 0x05	; 5
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	8a 0d       	add	r24, r10
     204:	9b 1d       	adc	r25, r11
     206:	2e 0d       	add	r18, r14
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18
     20c:	f3 94       	inc	r15
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     20e:	0f 5f       	subi	r16, 0xFF	; 255
     210:	1f 4f       	sbci	r17, 0xFF	; 255
     212:	80 91 b4 02 	lds	r24, 0x02B4
     216:	28 2f       	mov	r18, r24
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	02 17       	cp	r16, r18
     21c:	13 07       	cpc	r17, r19
     21e:	0c f2       	brlt	.-126    	; 0x1a2 <update_arp_sequence+0x5c>
	//arp.step_position = 0;
	
	uint8_t step = 0;
	
	//set arp sequence
	for (int range = 0; range <= arp.range; range++) {
     220:	08 94       	sec
     222:	61 1c       	adc	r6, r1
     224:	71 1c       	adc	r7, r1
     226:	84 ef       	ldi	r24, 0xF4	; 244
     228:	9f ef       	ldi	r25, 0xFF	; 255
     22a:	88 0e       	add	r8, r24
     22c:	99 1e       	adc	r9, r25
     22e:	f5 01       	movw	r30, r10
     230:	80 81       	ld	r24, Z
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	86 15       	cp	r24, r6
     236:	97 05       	cpc	r25, r7
     238:	44 f0       	brlt	.+16     	; 0x24a <update_arp_sequence+0x104>
			
		for (int i = 0; i < gate_buffer; i++) { // NOTE < rather than <= - <= was causing extra iteration that was over incrementing step!!!!!
     23a:	80 91 b4 02 	lds	r24, 0x02B4
     23e:	88 23       	and	r24, r24
     240:	79 f3       	breq	.-34     	; 0x220 <update_arp_sequence+0xda>
//#include "display.h"

struct arp arp;


void update_arp_sequence(void) {
     242:	e8 2c       	mov	r14, r8
					break;
					
				case DOWN:
					
					 //handle min note out of range here
					while (((int)root_note - (range*12)) < MIN_NOTE) { //tested
     244:	e4 01       	movw	r28, r8
     246:	82 01       	movw	r16, r4
     248:	ac cf       	rjmp	.-168    	; 0x1a2 <update_arp_sequence+0x5c>
		//value_to_display = step;

	}
	
	
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	df 90       	pop	r13
     258:	cf 90       	pop	r12
     25a:	bf 90       	pop	r11
     25c:	af 90       	pop	r10
     25e:	9f 90       	pop	r9
     260:	8f 90       	pop	r8
     262:	7f 90       	pop	r7
     264:	6f 90       	pop	r6
     266:	5f 90       	pop	r5
     268:	4f 90       	pop	r4
     26a:	08 95       	ret

0000026c <step_arp_note>:

void step_arp_note(void) { //updates arp note according to step position in sequence
	
	arp.current_note = arp.sequence[arp.step_position].note;
     26c:	90 91 8a 03 	lds	r25, 0x038A
     270:	a9 2f       	mov	r26, r25
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	15 96       	adiw	r26, 0x05	; 5
     276:	e8 e8       	ldi	r30, 0x88	; 136
     278:	f3 e0       	ldi	r31, 0x03	; 3
     27a:	aa 0f       	add	r26, r26
     27c:	bb 1f       	adc	r27, r27
     27e:	ae 0f       	add	r26, r30
     280:	bf 1f       	adc	r27, r31
     282:	8c 91       	ld	r24, X
     284:	85 83       	std	Z+5, r24	; 0x05
	arp.previous_note = arp.current_note;
     286:	84 83       	std	Z+4, r24	; 0x04
	
	switch (arp.mode) {
     288:	81 85       	ldd	r24, Z+9	; 0x09
     28a:	83 30       	cpi	r24, 0x03	; 3
     28c:	19 f0       	breq	.+6      	; 0x294 <step_arp_note+0x28>
     28e:	84 30       	cpi	r24, 0x04	; 4
     290:	99 f5       	brne	.+102    	; 0x2f8 <step_arp_note+0x8c>
     292:	28 c0       	rjmp	.+80     	; 0x2e4 <step_arp_note+0x78>
		
		case UP_DOWN:
			
			if (arp.direction == UP) {
     294:	80 91 8b 03 	lds	r24, 0x038B
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	91 f4       	brne	.+36     	; 0x2c0 <step_arp_note+0x54>
				arp.step_position++;	
     29c:	9f 5f       	subi	r25, 0xFF	; 255
     29e:	90 93 8a 03 	sts	0x038A, r25
				
				if (arp.step_position >= arp.step_number) {
     2a2:	80 91 89 03 	lds	r24, 0x0389
     2a6:	98 17       	cp	r25, r24
     2a8:	80 f1       	brcs	.+96     	; 0x30a <step_arp_note+0x9e>
					arp.step_position = arp.step_number == 1 ? 0 : arp.step_number - 2; //Omar handles edge case here
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <step_arp_note+0x46>
     2ae:	82 50       	subi	r24, 0x02	; 2
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <step_arp_note+0x48>
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	80 93 8a 03 	sts	0x038A, r24
					arp.direction = DOWN;
     2b8:	82 e0       	ldi	r24, 0x02	; 2
     2ba:	80 93 8b 03 	sts	0x038B, r24
     2be:	08 95       	ret
				}				
				
			} else {
				if (arp.step_position <= 0) {
     2c0:	99 23       	and	r25, r25
     2c2:	61 f4       	brne	.+24     	; 0x2dc <step_arp_note+0x70>
					
					arp.step_position = arp.step_number == 1 ? 0 : 1; //Omar handles edge case here
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 91 89 03 	lds	r25, 0x0389
     2ca:	91 30       	cpi	r25, 0x01	; 1
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <step_arp_note+0x64>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	80 93 8a 03 	sts	0x038A, r24
					arp.direction = UP;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	80 93 8b 03 	sts	0x038B, r24
     2da:	08 95       	ret
					
				} else {
					arp.step_position--;
     2dc:	91 50       	subi	r25, 0x01	; 1
     2de:	90 93 8a 03 	sts	0x038A, r25
     2e2:	08 95       	ret
			
			break;
			
		case RANDOM:
		
			arp.step_position = random() % arp.step_number;
     2e4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <random>
     2e8:	60 91 89 03 	lds	r22, 0x0389
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__divmodhi4>
     2f2:	80 93 8a 03 	sts	0x038A, r24
		
			break;
     2f6:	08 95       	ret
			
		default:
		
			if (++arp.step_position >= arp.step_number) arp.step_position  = 0;//reset step position when at end of sequence 
     2f8:	9f 5f       	subi	r25, 0xFF	; 255
     2fa:	90 93 8a 03 	sts	0x038A, r25
     2fe:	80 91 89 03 	lds	r24, 0x0389
     302:	98 17       	cp	r25, r24
     304:	10 f0       	brcs	.+4      	; 0x30a <step_arp_note+0x9e>
     306:	10 92 8a 03 	sts	0x038A, r1
     30a:	08 95       	ret

0000030c <get_indexed_note>:

static uint8_t current_note = 0; //this acts as a buffer for the current note to maintain pitch during release stage of envelopes

uint8_t get_indexed_note(uint8_t index) {
	
	return note_pool[index].note;
     30c:	e8 2f       	mov	r30, r24
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	ee 0f       	add	r30, r30
     312:	ff 1f       	adc	r31, r31
     314:	e8 54       	subi	r30, 0x48	; 72
     316:	fe 4f       	sbci	r31, 0xFE	; 254
	
	
	
}
     318:	80 81       	ld	r24, Z
     31a:	08 95       	ret

0000031c <get_current_note>:
uint8_t get_current_note() { //Force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	uint8_t note = 0;
	if (arp.mode) {
     31c:	80 91 91 03 	lds	r24, 0x0391
     320:	88 23       	and	r24, r24
     322:	19 f0       	breq	.+6      	; 0x32a <get_current_note+0xe>
		
		
		//do something here to determine what arp note should be
		note = arp.current_note; //yeah, like this!
     324:	80 91 8d 03 	lds	r24, 0x038D
     328:	08 95       	ret
		

		
	} else {
		
		note = current_note;
     32a:	80 91 b5 02 	lds	r24, 0x02B5
				
	}
	return note;
	
}
     32e:	08 95       	ret

00000330 <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	18 2f       	mov	r17, r24
     33a:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     33c:	8a eb       	ldi	r24, 0xBA	; 186
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	ec 01       	movw	r28, r24
     342:	22 97       	sbiw	r28, 0x02	; 2
     344:	be 01       	movw	r22, r28
     346:	4e e0       	ldi	r20, 0x0E	; 14
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     34e:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     350:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     352:	10 93 b5 02 	sts	0x02B5, r17
	
} 
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	08 95       	ret

00000360 <remove_note>:
void remove_note(uint8_t note){
     360:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     362:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     366:	c8 17       	cp	r28, r24
     368:	41 f0       	breq	.+16     	; 0x37a <remove_note+0x1a>
     36a:	ea eb       	ldi	r30, 0xBA	; 186
     36c:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     372:	90 81       	ld	r25, Z
     374:	98 17       	cp	r25, r24
     376:	59 f4       	brne	.+22     	; 0x38e <remove_note+0x2e>
     378:	02 c0       	rjmp	.+4      	; 0x37e <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     37e:	fa 01       	movw	r30, r20
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	e8 54       	subi	r30, 0x48	; 72
     386:	fe 4f       	sbci	r31, 0xFE	; 254
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	80 83       	st	Z, r24
			free_slot = i;
			break;
     38c:	07 c0       	rjmp	.+14     	; 0x39c <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     38e:	4f 5f       	subi	r20, 0xFF	; 255
     390:	5f 4f       	sbci	r21, 0xFF	; 255
     392:	32 96       	adiw	r30, 0x02	; 2
     394:	48 30       	cpi	r20, 0x08	; 8
     396:	51 05       	cpc	r21, r1
     398:	61 f7       	brne	.-40     	; 0x372 <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     39a:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     39c:	50 e0       	ldi	r21, 0x00	; 0
     39e:	ca 01       	movw	r24, r20
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	bc 01       	movw	r22, r24
     3a6:	66 54       	subi	r22, 0x46	; 70
     3a8:	7e 4f       	sbci	r23, 0xFE	; 254
     3aa:	40 95       	com	r20
     3ac:	50 95       	com	r21
     3ae:	48 5f       	subi	r20, 0xF8	; 248
     3b0:	5f 4f       	sbci	r21, 0xFF	; 255
     3b2:	44 0f       	add	r20, r20
     3b4:	55 1f       	adc	r21, r21
     3b6:	88 54       	subi	r24, 0x48	; 72
     3b8:	9e 4f       	sbci	r25, 0xFE	; 254
     3ba:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <memmove>
	note_pool[7].note = EMPTY;	
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     3c4:	80 91 b8 01 	lds	r24, 0x01B8
     3c8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ca:	19 f4       	brne	.+6      	; 0x3d2 <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     3cc:	c0 93 b5 02 	sts	0x02B5, r28
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     3d2:	80 93 b5 02 	sts	0x02B5, r24

	}	
	
}
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     3da:	8d e0       	ldi	r24, 0x0D	; 13
     3dc:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     3e6:	08 95       	ret

000003e8 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     3e8:	90 93 89 00 	sts	0x0089, r25
     3ec:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     3f0:	20 91 84 00 	lds	r18, 0x0084
     3f4:	30 91 85 00 	lds	r19, 0x0085
     3f8:	82 17       	cp	r24, r18
     3fa:	93 07       	cpc	r25, r19
     3fc:	28 f4       	brcc	.+10     	; 0x408 <update_clock_rate+0x20>
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	90 93 85 00 	sts	0x0085, r25
     404:	80 93 84 00 	sts	0x0084, r24
     408:	08 95       	ret

0000040a <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     40a:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     40c:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     40e:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     410:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     412:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     414:	8c 91       	ld	r24, X
     416:	87 70       	andi	r24, 0x07	; 7
     418:	82 b9       	out	0x02, r24	; 2
     41a:	66 e0       	ldi	r22, 0x06	; 6
     41c:	6a 95       	dec	r22
     41e:	f1 f7       	brne	.-4      	; 0x41c <set_control_voltage+0x12>
     420:	00 c0       	rjmp	.+0      	; 0x422 <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     422:	ea ed       	ldi	r30, 0xDA	; 218
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	40 81       	ld	r20, Z
     428:	8c 91       	ld	r24, X
     42a:	86 95       	lsr	r24
     42c:	86 95       	lsr	r24
     42e:	86 95       	lsr	r24
     430:	87 70       	andi	r24, 0x07	; 7
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	b9 01       	movw	r22, r18
     438:	02 c0       	rjmp	.+4      	; 0x43e <set_control_voltage+0x34>
     43a:	66 0f       	add	r22, r22
     43c:	77 1f       	adc	r23, r23
     43e:	8a 95       	dec	r24
     440:	e2 f7       	brpl	.-8      	; 0x43a <set_control_voltage+0x30>
     442:	cb 01       	movw	r24, r22
     444:	84 2b       	or	r24, r20
     446:	80 83       	st	Z, r24
     448:	76 e0       	ldi	r23, 0x06	; 6
     44a:	7a 95       	dec	r23
     44c:	f1 f7       	brne	.-4      	; 0x44a <set_control_voltage+0x40>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     450:	80 81       	ld	r24, Z
     452:	9c 91       	ld	r25, X
     454:	96 95       	lsr	r25
     456:	96 95       	lsr	r25
     458:	96 95       	lsr	r25
     45a:	97 70       	andi	r25, 0x07	; 7
     45c:	02 c0       	rjmp	.+4      	; 0x462 <set_control_voltage+0x58>
     45e:	22 0f       	add	r18, r18
     460:	33 1f       	adc	r19, r19
     462:	9a 95       	dec	r25
     464:	e2 f7       	brpl	.-8      	; 0x45e <set_control_voltage+0x54>
     466:	20 95       	com	r18
     468:	28 23       	and	r18, r24
     46a:	20 83       	st	Z, r18
	
}	
     46c:	08 95       	ret

0000046e <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     46e:	83 b3       	in	r24, 0x13	; 19
     470:	83 60       	ori	r24, 0x03	; 3
     472:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     474:	8f ef       	ldi	r24, 0xFF	; 255
     476:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     478:	97 b1       	in	r25, 0x07	; 7
     47a:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     47c:	e9 ed       	ldi	r30, 0xD9	; 217
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	8f 60       	ori	r24, 0x0F	; 15
     484:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     486:	ea ed       	ldi	r30, 0xDA	; 218
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	80 7f       	andi	r24, 0xF0	; 240
     48e:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     490:	84 b3       	in	r24, 0x14	; 20
     492:	83 60       	ori	r24, 0x03	; 3
     494:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     496:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     498:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     49a:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     49c:	a0 9a       	sbi	0x14, 0	; 20
}
     49e:	08 95       	ret

000004a0 <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	2e 97       	sbiw	r28, 0x0e	; 14
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     4b8:	28 e0       	ldi	r18, 0x08	; 8
     4ba:	29 83       	std	Y+1, r18	; 0x01
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 83       	std	Y+2, r18	; 0x02
     4c0:	22 e0       	ldi	r18, 0x02	; 2
     4c2:	2b 83       	std	Y+3, r18	; 0x03
     4c4:	24 e0       	ldi	r18, 0x04	; 4
     4c6:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     4c8:	de 01       	movw	r26, r28
     4ca:	15 96       	adiw	r26, 0x05	; 5
     4cc:	e7 ee       	ldi	r30, 0xE7	; 231
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	2a e0       	ldi	r18, 0x0A	; 10
     4d2:	01 90       	ld	r0, Z+
     4d4:	0d 92       	st	X+, r0
     4d6:	21 50       	subi	r18, 0x01	; 1
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     4da:	2f ef       	ldi	r18, 0xFF	; 255
     4dc:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     4de:	ea ed       	ldi	r30, 0xDA	; 218
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	20 81       	ld	r18, Z
     4e4:	20 61       	ori	r18, 0x10	; 16
     4e6:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     4e8:	20 81       	ld	r18, Z
     4ea:	2f 7e       	andi	r18, 0xEF	; 239
     4ec:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     4ee:	06 2f       	mov	r16, r22
     4f0:	10 e0       	ldi	r17, 0x00	; 0
     4f2:	de 01       	movw	r26, r28
     4f4:	a0 0f       	add	r26, r16
     4f6:	b1 1f       	adc	r27, r17
     4f8:	11 96       	adiw	r26, 0x01	; 1
     4fa:	2c 91       	ld	r18, X
     4fc:	11 97       	sbiw	r26, 0x01	; 1
     4fe:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     500:	20 81       	ld	r18, Z
     502:	20 62       	ori	r18, 0x20	; 32
     504:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     506:	20 81       	ld	r18, Z
     508:	2f 7d       	andi	r18, 0xDF	; 223
     50a:	20 83       	st	Z, r18
     50c:	48 2f       	mov	r20, r24
     50e:	59 2f       	mov	r21, r25
     510:	87 e2       	ldi	r24, 0x27	; 39
     512:	40 31       	cpi	r20, 0x10	; 16
     514:	58 07       	cpc	r21, r24
     516:	10 f0       	brcs	.+4      	; 0x51c <display_dec+0x7c>
     518:	4f e0       	ldi	r20, 0x0F	; 15
     51a:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     51c:	ca 01       	movw	r24, r20
     51e:	96 95       	lsr	r25
     520:	87 95       	ror	r24
     522:	96 95       	lsr	r25
     524:	87 95       	ror	r24
     526:	9a 01       	movw	r18, r20
     528:	36 95       	lsr	r19
     52a:	27 95       	ror	r18
     52c:	28 0f       	add	r18, r24
     52e:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     530:	c9 01       	movw	r24, r18
     532:	92 95       	swap	r25
     534:	82 95       	swap	r24
     536:	8f 70       	andi	r24, 0x0F	; 15
     538:	89 27       	eor	r24, r25
     53a:	9f 70       	andi	r25, 0x0F	; 15
     53c:	89 27       	eor	r24, r25
     53e:	82 0f       	add	r24, r18
     540:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     542:	29 2f       	mov	r18, r25
     544:	33 27       	eor	r19, r19
     546:	82 0f       	add	r24, r18
     548:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     54a:	96 95       	lsr	r25
     54c:	87 95       	ror	r24
     54e:	96 95       	lsr	r25
     550:	87 95       	ror	r24
     552:	96 95       	lsr	r25
     554:	87 95       	ror	r24
	r = number - q2 * 10;
     556:	28 2f       	mov	r18, r24
     558:	22 0f       	add	r18, r18
     55a:	32 2f       	mov	r19, r18
     55c:	33 0f       	add	r19, r19
     55e:	33 0f       	add	r19, r19
     560:	23 0f       	add	r18, r19
     562:	e4 2f       	mov	r30, r20
     564:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	ea 30       	cpi	r30, 0x0A	; 10
     56c:	10 f4       	brcc	.+4      	; 0x572 <display_dec+0xd2>
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	68 0f       	add	r22, r24
     574:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     576:	9b 01       	movw	r18, r22
     578:	36 95       	lsr	r19
     57a:	27 95       	ror	r18
     57c:	36 95       	lsr	r19
     57e:	27 95       	ror	r18
     580:	ab 01       	movw	r20, r22
     582:	56 95       	lsr	r21
     584:	47 95       	ror	r20
     586:	24 0f       	add	r18, r20
     588:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     58a:	c9 01       	movw	r24, r18
     58c:	92 95       	swap	r25
     58e:	82 95       	swap	r24
     590:	8f 70       	andi	r24, 0x0F	; 15
     592:	89 27       	eor	r24, r25
     594:	9f 70       	andi	r25, 0x0F	; 15
     596:	89 27       	eor	r24, r25
     598:	82 0f       	add	r24, r18
     59a:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     59c:	29 2f       	mov	r18, r25
     59e:	33 27       	eor	r19, r19
     5a0:	82 0f       	add	r24, r18
     5a2:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     5a4:	96 95       	lsr	r25
     5a6:	87 95       	ror	r24
     5a8:	96 95       	lsr	r25
     5aa:	87 95       	ror	r24
     5ac:	96 95       	lsr	r25
     5ae:	87 95       	ror	r24
	r = qa - q3 * 10;
     5b0:	98 2f       	mov	r25, r24
     5b2:	99 0f       	add	r25, r25
     5b4:	29 2f       	mov	r18, r25
     5b6:	22 0f       	add	r18, r18
     5b8:	22 0f       	add	r18, r18
     5ba:	92 0f       	add	r25, r18
     5bc:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	6a 30       	cpi	r22, 0x0A	; 10
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <display_dec+0x126>
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	89 0f       	add	r24, r25
	tens_place = rem[r];
     5c8:	41 ef       	ldi	r20, 0xF1	; 241
     5ca:	51 e0       	ldi	r21, 0x01	; 1
     5cc:	da 01       	movw	r26, r20
     5ce:	a6 0f       	add	r26, r22
     5d0:	b1 1d       	adc	r27, r1
     5d2:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     5d4:	28 2f       	mov	r18, r24
     5d6:	26 95       	lsr	r18
     5d8:	26 95       	lsr	r18
     5da:	98 2f       	mov	r25, r24
     5dc:	96 95       	lsr	r25
     5de:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     5e0:	29 2f       	mov	r18, r25
     5e2:	22 95       	swap	r18
     5e4:	2f 70       	andi	r18, 0x0F	; 15
     5e6:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     5e8:	96 95       	lsr	r25
     5ea:	96 95       	lsr	r25
     5ec:	96 95       	lsr	r25
	r = qb - q4 * 10;
     5ee:	29 2f       	mov	r18, r25
     5f0:	22 0f       	add	r18, r18
     5f2:	62 2f       	mov	r22, r18
     5f4:	66 0f       	add	r22, r22
     5f6:	66 0f       	add	r22, r22
     5f8:	26 0f       	add	r18, r22
     5fa:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     5fc:	da 01       	movw	r26, r20
     5fe:	a8 0f       	add	r26, r24
     600:	b1 1d       	adc	r27, r1
     602:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     604:	4e 0f       	add	r20, r30
     606:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     608:	fa 01       	movw	r30, r20
     60a:	40 81       	ld	r20, Z
     60c:	40 93 b8 02 	sts	0x02B8, r20
	digit_index[1] = tens_place;
     610:	30 93 b9 02 	sts	0x02B9, r19
	digit_index[2] = hunds_place;
     614:	20 93 ba 02 	sts	0x02BA, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     618:	21 e0       	ldi	r18, 0x01	; 1
     61a:	8a 30       	cpi	r24, 0x0A	; 10
     61c:	08 f4       	brcc	.+2      	; 0x620 <display_dec+0x180>
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     622:	90 93 bb 02 	sts	0x02BB, r25

	cathode_byte = dec[digit_index[place]];
     626:	f8 01       	movw	r30, r16
     628:	e8 54       	subi	r30, 0x48	; 72
     62a:	fd 4f       	sbci	r31, 0xFD	; 253
     62c:	80 81       	ld	r24, Z
     62e:	fe 01       	movw	r30, r28
     630:	e8 0f       	add	r30, r24
     632:	f1 1d       	adc	r31, r1
     634:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     636:	90 91 0b 03 	lds	r25, 0x030B
     63a:	92 30       	cpi	r25, 0x02	; 2
     63c:	11 f4       	brne	.+4      	; 0x642 <display_dec+0x1a2>
     63e:	80 62       	ori	r24, 0x20	; 32
     640:	03 c0       	rjmp	.+6      	; 0x648 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     642:	91 30       	cpi	r25, 0x01	; 1
     644:	09 f4       	brne	.+2      	; 0x648 <display_dec+0x1a8>
     646:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     648:	80 95       	com	r24
     64a:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     64c:	ea ed       	ldi	r30, 0xDA	; 218
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	80 61       	ori	r24, 0x10	; 16
     654:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     656:	80 81       	ld	r24, Z
     658:	8f 7e       	andi	r24, 0xEF	; 239
     65a:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     65c:	2e 96       	adiw	r28, 0x0e	; 14
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <update_display>:

void update_display(uint16_t number, uint8_t type) {
     672:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     674:	66 23       	and	r22, r22
     676:	69 f4       	brne	.+26     	; 0x692 <update_display+0x20>

		
			
		display_dec(number, place);
     678:	c0 91 bc 02 	lds	r28, 0x02BC
     67c:	6c 2f       	mov	r22, r28
     67e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     682:	8c 2f       	mov	r24, r28
     684:	8f 5f       	subi	r24, 0xFF	; 255
     686:	80 93 bc 02 	sts	0x02BC, r24
     68a:	c3 30       	cpi	r28, 0x03	; 3
     68c:	11 f4       	brne	.+4      	; 0x692 <update_display+0x20>
		{
			place = 0;
     68e:	10 92 bc 02 	sts	0x02BC, r1
		
		
	}
	
	
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <__vector_10>:
#include "display.h"
#include "clock.h"
#include "assigner.h"
#include "arp.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     696:	1f 92       	push	r1
     698:	0f 92       	push	r0
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     6a8:	80 91 80 03 	lds	r24, 0x0380
     6ac:	81 50       	subi	r24, 0x01	; 1
     6ae:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     6b0:	80 91 81 03 	lds	r24, 0x0381
     6b4:	88 23       	and	r24, r24
     6b6:	a1 f4       	brne	.+40     	; 0x6e0 <__vector_10+0x4a>
		count_finished = FALSE;
     6b8:	10 92 7e 03 	sts	0x037E, r1
		no_overflow = TRUE;
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     6c2:	80 93 81 03 	sts	0x0381, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     6c6:	e1 e8       	ldi	r30, 0x81	; 129
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	80 81       	ld	r24, Z
     6cc:	90 91 7f 03 	lds	r25, 0x037F
     6d0:	89 2b       	or	r24, r25
     6d2:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     6d4:	ef e6       	ldi	r30, 0x6F	; 111
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	80 81       	ld	r24, Z
     6da:	81 60       	ori	r24, 0x01	; 1
     6dc:	80 83       	st	Z, r24
     6de:	11 c0       	rjmp	.+34     	; 0x702 <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     6e0:	e4 e8       	ldi	r30, 0x84	; 132
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	90 93 7d 03 	sts	0x037D, r25
     6ec:	80 93 7c 03 	sts	0x037C, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     6f0:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 7e 03 	sts	0x037E, r24
		period_counter = 0;
     6fa:	10 92 81 03 	sts	0x0381, r1
		TCNT1 = 0; //reset timer/counter 1
     6fe:	11 82       	std	Z+1, r1	; 0x01
     700:	10 82       	st	Z, r1
	}
	
	
	
	
}
     702:	ff 91       	pop	r31
     704:	ef 91       	pop	r30
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	0f 90       	pop	r0
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	0f 90       	pop	r0
     710:	1f 90       	pop	r1
     712:	18 95       	reti

00000714 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     714:	1f 92       	push	r1
     716:	0f 92       	push	r0
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     71e:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     74e:	80 91 d2 03 	lds	r24, 0x03D2
     752:	86 95       	lsr	r24
     754:	90 91 d3 03 	lds	r25, 0x03D3
     758:	98 17       	cp	r25, r24
     75a:	51 f4       	brne	.+20     	; 0x770 <__vector_7+0x44>
				
		
		if ((arp.clock_source == INTERNAL_CLOCK) && (arp.mode)) {
     75c:	80 91 90 03 	lds	r24, 0x0390
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	31 f4       	brne	.+12     	; 0x770 <__vector_7+0x44>
     764:	80 91 91 03 	lds	r24, 0x0391
     768:	88 23       	and	r24, r24
     76a:	11 f0       	breq	.+4      	; 0x770 <__vector_7+0x44>
			
			PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     76c:	89 98       	cbi	0x11, 1	; 17
			PORTB &= ~ (1<<ARP_SYNC_LED); //turn off arp sync LED
     76e:	2f 98       	cbi	0x05, 7	; 5
			
		}
	}			
		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     770:	80 91 d3 03 	lds	r24, 0x03D3
     774:	8f 5f       	subi	r24, 0xFF	; 255
     776:	80 93 d3 03 	sts	0x03D3, r24
     77a:	90 91 d2 03 	lds	r25, 0x03D2
     77e:	89 17       	cp	r24, r25
     780:	91 f4       	brne	.+36     	; 0x7a6 <__vector_7+0x7a>
		
		system_clock.ppqn_counter = 0;
     782:	10 92 d3 03 	sts	0x03D3, r1
		
		if ((arp.clock_source == INTERNAL_CLOCK) && (arp.mode)) {
     786:	80 91 90 03 	lds	r24, 0x0390
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	61 f4       	brne	.+24     	; 0x7a6 <__vector_7+0x7a>
     78e:	80 91 91 03 	lds	r24, 0x0391
     792:	88 23       	and	r24, r24
     794:	41 f0       	breq	.+16     	; 0x7a6 <__vector_7+0x7a>
			
			//step arp note here based on range and note sequence from assigner	
			
			if (gate_buffer) { //if there are still notes in gate buffer
     796:	80 91 b4 02 	lds	r24, 0x02B4
     79a:	88 23       	and	r24, r24
     79c:	21 f0       	breq	.+8      	; 0x7a6 <__vector_7+0x7a>
				step_arp_note(); //will need to force inline this function. It will need to be used elsewhere for arp MIDI sync.
     79e:	0e 94 36 01 	call	0x26c	; 0x26c <step_arp_note>
				PORTF |= (1<<GATE);
     7a2:	89 9a       	sbi	0x11, 1	; 17
				PORTB |= (1<<ARP_SYNC_LED);
     7a4:	2f 9a       	sbi	0x05, 7	; 5
			} 
		}			
	}
	
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     7c8:	6a 3f       	cpi	r22, 0xFA	; 250
     7ca:	09 f4       	brne	.+2      	; 0x7ce <real_time_event+0x6>
     7cc:	40 c0       	rjmp	.+128    	; 0x84e <real_time_event+0x86>
     7ce:	6c 3f       	cpi	r22, 0xFC	; 252
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <real_time_event+0xc>
     7d2:	49 c0       	rjmp	.+146    	; 0x866 <real_time_event+0x9e>
     7d4:	68 3f       	cpi	r22, 0xF8	; 248
     7d6:	09 f0       	breq	.+2      	; 0x7da <real_time_event+0x12>
     7d8:	49 c0       	rjmp	.+146    	; 0x86c <real_time_event+0xa4>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     7da:	80 91 d9 03 	lds	r24, 0x03D9
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	80 93 d9 03 	sts	0x03D9, r24
     7e4:	90 91 d8 03 	lds	r25, 0x03D8
     7e8:	89 17       	cp	r24, r25
     7ea:	41 f4       	brne	.+16     	; 0x7fc <real_time_event+0x34>
				PORTB |= (1<< LFO_RESET);
     7ec:	2c 9a       	sbi	0x05, 4	; 5
     7ee:	86 e0       	ldi	r24, 0x06	; 6
     7f0:	8a 95       	dec	r24
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <real_time_event+0x28>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <real_time_event+0x2e>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				//PORTB ^= (1<<ARP_SYNC_LED);
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     7f6:	10 92 d9 03 	sts	0x03D9, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     7fa:	2c 98       	cbi	0x05, 4	; 5
			}
			
			if (arp.mode) { 
     7fc:	80 91 91 03 	lds	r24, 0x0391
     800:	88 23       	and	r24, r24
     802:	a1 f1       	breq	.+104    	; 0x86c <real_time_event+0xa4>
				if (arp.ppqn_counter == arp.divider - (arp.divider >> 1)) {
     804:	40 91 8f 03 	lds	r20, 0x038F
     808:	20 91 8e 03 	lds	r18, 0x038E
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	84 2f       	mov	r24, r20
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	46 95       	lsr	r20
     814:	84 1b       	sub	r24, r20
     816:	91 09       	sbc	r25, r1
     818:	28 17       	cp	r18, r24
     81a:	39 07       	cpc	r19, r25
     81c:	11 f4       	brne	.+4      	; 0x822 <real_time_event+0x5a>
				
					PORTF &= ~(1<<GATE); //if arp is running, turn gate off
     81e:	89 98       	cbi	0x11, 1	; 17
					PORTB &= ~ (1<<ARP_SYNC_LED); //turn off arp sync LED			
     820:	2f 98       	cbi	0x05, 7	; 5
				
				}
			
				if (arp.ppqn_counter == arp.divider) {
     822:	90 91 8e 03 	lds	r25, 0x038E
     826:	80 91 8f 03 	lds	r24, 0x038F
     82a:	98 17       	cp	r25, r24
     82c:	51 f4       	brne	.+20     	; 0x842 <real_time_event+0x7a>
				
				
					arp.ppqn_counter = 0;
     82e:	10 92 8e 03 	sts	0x038E, r1
					if (gate_buffer) { //if there are still notes in gate buffer
     832:	80 91 b4 02 	lds	r24, 0x02B4
     836:	88 23       	and	r24, r24
     838:	21 f0       	breq	.+8      	; 0x842 <real_time_event+0x7a>
						step_arp_note(); //should force inline this function.
     83a:	0e 94 36 01 	call	0x26c	; 0x26c <step_arp_note>
						PORTF |= (1<<GATE);
     83e:	89 9a       	sbi	0x11, 1	; 17
						PORTB |= (1<<ARP_SYNC_LED);
     840:	2f 9a       	sbi	0x05, 7	; 5
					}	
				
				}
				arp.ppqn_counter++;
     842:	80 91 8e 03 	lds	r24, 0x038E
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	80 93 8e 03 	sts	0x038E, r24
     84c:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     84e:	10 92 d9 03 	sts	0x03D9, r1
			arp.ppqn_counter = arp.divider;// -1;
     852:	80 91 8f 03 	lds	r24, 0x038F
     856:	80 93 8e 03 	sts	0x038E, r24
			arp.clock_source = MIDI_CLOCK;
     85a:	88 ef       	ldi	r24, 0xF8	; 248
     85c:	80 93 90 03 	sts	0x0390, r24
			arp.step_position = 0;
     860:	10 92 8a 03 	sts	0x038A, r1
			break;
     864:	08 95       	ret
			
		case MIDI_STOP:
		
			arp.clock_source = INTERNAL_CLOCK;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 90 03 	sts	0x0390, r24
     86c:	08 95       	ret

0000086e <note_off_event>:
		}		
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     86e:	84 2f       	mov	r24, r20
	
	remove_note(note);
     870:	0e 94 b0 01 	call	0x360	; 0x360 <remove_note>
	gate_buffer--;
     874:	80 91 b4 02 	lds	r24, 0x02B4
     878:	81 50       	subi	r24, 0x01	; 1
     87a:	80 93 b4 02 	sts	0x02B4, r24
	//
	if (arp.mode) {	//if arp on, update arp sequence
     87e:	90 91 91 03 	lds	r25, 0x0391
     882:	99 23       	and	r25, r25
     884:	91 f0       	breq	.+36     	; 0x8aa <note_off_event+0x3c>
		//gate_buffer--;
		if (gate_buffer == 0) {
     886:	88 23       	and	r24, r24
     888:	69 f4       	brne	.+26     	; 0x8a4 <note_off_event+0x36>
			arp.current_note = arp.previous_note; //handle last note prevservation for release phase
     88a:	80 91 8c 03 	lds	r24, 0x038C
     88e:	80 93 8d 03 	sts	0x038D, r24
			if (arp.clock_source == INTERNAL_CLOCK) arp.step_position = 0; //if arp is synced to MIDI clock, then step position is reset when MIDI START message received
     892:	80 91 90 03 	lds	r24, 0x0390
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	11 f4       	brne	.+4      	; 0x89e <note_off_event+0x30>
     89a:	10 92 8a 03 	sts	0x038A, r1
			//arp.step_position = 0;
			arp.direction = UP; //this is to initialize UP/DOWN mode
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 8b 03 	sts	0x038B, r24
		}			
		update_arp_sequence();
     8a4:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
     8a8:	08 95       	ret
	} else {
		
		//update_arp_sequence();
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     8aa:	88 23       	and	r24, r24
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <note_off_event+0x42>
     8ae:	89 98       	cbi	0x11, 1	; 17
     8b0:	08 95       	ret

000008b2 <note_on_event>:





void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     8b2:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     8b4:	90 91 03 03 	lds	r25, 0x0303
     8b8:	90 ff       	sbrs	r25, 0
     8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     8bc:	2c 9a       	sbi	0x05, 4	; 5
     8be:	96 e0       	ldi	r25, 0x06	; 6
     8c0:	9a 95       	dec	r25
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <note_on_event+0xe>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     8c6:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	
	midi_note_number = note;
     8c8:	80 93 be 02 	sts	0x02BE, r24
	if (velocity == 0) { //if velocity is 0 then it is a note off event - just call note off function rather than duplicate code here. arp will need to handle this too
     8cc:	22 23       	and	r18, r18
     8ce:	59 f4       	brne	.+22     	; 0x8e6 <note_on_event+0x34>
		remove_note(note);
     8d0:	0e 94 b0 01 	call	0x360	; 0x360 <remove_note>
		gate_buffer--;
     8d4:	80 91 b4 02 	lds	r24, 0x02B4
     8d8:	81 50       	subi	r24, 0x01	; 1
     8da:	80 93 b4 02 	sts	0x02B4, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     8de:	88 23       	and	r24, r24
     8e0:	a1 f4       	brne	.+40     	; 0x90a <note_on_event+0x58>
     8e2:	89 98       	cbi	0x11, 1	; 17
     8e4:	08 95       	ret
				
	} else {
		
		new_note(note, velocity);
     8e6:	62 2f       	mov	r22, r18
     8e8:	0e 94 98 01 	call	0x330	; 0x330 <new_note>
		
		gate_buffer++;
     8ec:	80 91 b4 02 	lds	r24, 0x02B4
     8f0:	8f 5f       	subi	r24, 0xFF	; 255
     8f2:	80 93 b4 02 	sts	0x02B4, r24
		if (arp.mode) { //if arp is off, handle gate
     8f6:	80 91 91 03 	lds	r24, 0x0391
     8fa:	88 23       	and	r24, r24
     8fc:	29 f0       	breq	.+10     	; 0x908 <note_on_event+0x56>
			//new_note(note, velocity);
			//gate_buffer++; //increment gate_buffer
			
			update_arp_sequence();
     8fe:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
			arp.step_position = 0; //reset step position when new note arrives?
     902:	10 92 8a 03 	sts	0x038A, r1
     906:	08 95       	ret
			
		} else {
			PORTF |= (1<<GATE); //if arp is OFF then turn on gate. Otherwise arpeggiator handles GATE
     908:	89 9a       	sbi	0x11, 1	; 17
     90a:	08 95       	ret

0000090c <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     90c:	87 e2       	ldi	r24, 0x27	; 39
     90e:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     912:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     916:	88 e9       	ldi	r24, 0x98	; 152
     918:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     91c:	08 95       	ret

0000091e <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     91e:	1f 92       	push	r1
     920:	0f 92       	push	r0
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	0f 92       	push	r0
     926:	11 24       	eor	r1, r1
     928:	2f 93       	push	r18
     92a:	3f 93       	push	r19
     92c:	4f 93       	push	r20
     92e:	5f 93       	push	r21
     930:	6f 93       	push	r22
     932:	7f 93       	push	r23
     934:	8f 93       	push	r24
     936:	9f 93       	push	r25
     938:	af 93       	push	r26
     93a:	bf 93       	push	r27
     93c:	ef 93       	push	r30
     93e:	ff 93       	push	r31
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	0f 92       	push	r0
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     94a:	80 91 c6 00 	lds	r24, 0x00C6
     94e:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     950:	8e ed       	ldi	r24, 0xDE	; 222
     952:	93 e0       	ldi	r25, 0x03	; 3
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	ae 01       	movw	r20, r28
     958:	4f 5f       	subi	r20, 0xFF	; 255
     95a:	5f 4f       	sbci	r21, 0xFF	; 255
     95c:	0e 94 30 1a 	call	0x3460	; 0x3460 <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	ff 91       	pop	r31
     968:	ef 91       	pop	r30
     96a:	bf 91       	pop	r27
     96c:	af 91       	pop	r26
     96e:	9f 91       	pop	r25
     970:	8f 91       	pop	r24
     972:	7f 91       	pop	r23
     974:	6f 91       	pop	r22
     976:	5f 91       	pop	r21
     978:	4f 91       	pop	r20
     97a:	3f 91       	pop	r19
     97c:	2f 91       	pop	r18
     97e:	0f 90       	pop	r0
     980:	0f be       	out	0x3f, r0	; 63
     982:	0f 90       	pop	r0
     984:	1f 90       	pop	r1
     986:	18 95       	reti

00000988 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     988:	c0 e8       	ldi	r28, 0x80	; 128
     98a:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     98c:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     98e:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     990:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     992:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     994:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     996:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     998:	0e 94 1c 08 	call	0x1038	; 0x1038 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     99c:	a9 ed       	ldi	r26, 0xD9	; 217
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	8c 91       	ld	r24, X
     9a2:	80 6c       	ori	r24, 0xC0	; 192
     9a4:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     9a6:	ea ed       	ldi	r30, 0xDA	; 218
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	80 6c       	ori	r24, 0xC0	; 192
     9ae:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     9b0:	81 b1       	in	r24, 0x01	; 1
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     9b6:	92 b1       	in	r25, 0x02	; 2
     9b8:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     9ba:	8c 91       	ld	r24, X
     9bc:	80 63       	ori	r24, 0x30	; 48
     9be:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     9c0:	80 81       	ld	r24, Z
     9c2:	8f 7c       	andi	r24, 0xCF	; 207
     9c4:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     9c6:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     9c8:	ec ed       	ldi	r30, 0xDC	; 220
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	80 62       	ori	r24, 0x20	; 32
     9d0:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     9d2:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     9d4:	ed ed       	ldi	r30, 0xDD	; 221
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	80 62       	ori	r24, 0x20	; 32
     9dc:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     9de:	80 81       	ld	r24, Z
     9e0:	8f 7d       	andi	r24, 0xDF	; 223
     9e2:	80 83       	st	Z, r24
	DATA_BUS = 0;
     9e4:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     9e6:	c0 93 03 03 	sts	0x0303, r28
	
	//setup ADC
    setup_adc();		
     9ea:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     9ee:	0e 94 37 02 	call	0x46e	; 0x46e <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     9f2:	ce ed       	ldi	r28, 0xDE	; 222
     9f4:	d3 e0       	ldi	r29, 0x03	; 3
     9f6:	ce 01       	movw	r24, r28
     9f8:	0e 94 ff 19 	call	0x33fe	; 0x33fe <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     9fc:	ce 01       	movw	r24, r28
     9fe:	69 e5       	ldi	r22, 0x59	; 89
     a00:	74 e0       	ldi	r23, 0x04	; 4
     a02:	0e 94 c7 19 	call	0x338e	; 0x338e <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     a06:	ce 01       	movw	r24, r28
     a08:	67 e3       	ldi	r22, 0x37	; 55
     a0a:	74 e0       	ldi	r23, 0x04	; 4
     a0c:	0e 94 cb 19 	call	0x3396	; 0x3396 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     a10:	ce 01       	movw	r24, r28
     a12:	64 ee       	ldi	r22, 0xE4	; 228
     a14:	73 e0       	ldi	r23, 0x03	; 3
     a16:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     a1a:	0e 94 86 04 	call	0x90c	; 0x90c <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     a1e:	0e 94 41 08 	call	0x1082	; 0x1082 <update_spi>
	
	
	current_patch.number = 1;
     a22:	c1 e0       	ldi	r28, 0x01	; 1
     a24:	c0 93 07 03 	sts	0x0307, r28
		
	sei(); //enable global interrupts
     a28:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     a2a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 ba 0a 	call	0x1574	; 0x1574 <load_patch>
	
	setup_system_clock();
     a34:	0e 94 ed 01 	call	0x3da	; 0x3da <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     a38:	88 e1       	ldi	r24, 0x18	; 24
     a3a:	80 93 d2 03 	sts	0x03D2, r24
	arp.step_position = 0; //initialize step position
     a3e:	10 92 8a 03 	sts	0x038A, r1
	arp.clock_source = INTERNAL_CLOCK;
     a42:	c0 93 90 03 	sts	0x0390, r28
	arp.mode = OFF;
     a46:	10 92 91 03 	sts	0x0391, r1

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     a4a:	0e ed       	ldi	r16, 0xDE	; 222
     a4c:	13 e0       	ldi	r17, 0x03	; 3
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     a4e:	0f 2e       	mov	r0, r31
     a50:	f4 e8       	ldi	r31, 0x84	; 132
     a52:	ef 2e       	mov	r14, r31
     a54:	f3 e0       	ldi	r31, 0x03	; 3
     a56:	ff 2e       	mov	r15, r31
     a58:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     a5a:	0f 2e       	mov	r0, r31
     a5c:	fb e0       	ldi	r31, 0x0B	; 11
     a5e:	cf 2e       	mov	r12, r31
     a60:	f3 e0       	ldi	r31, 0x03	; 3
     a62:	df 2e       	mov	r13, r31
     a64:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     a66:	bb 24       	eor	r11, r11
     a68:	68 94       	set
     a6a:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     a6c:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     a6e:	c8 01       	movw	r24, r16
     a70:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     a74:	80 91 fd 01 	lds	r24, 0x01FD
     a78:	90 91 fe 01 	lds	r25, 0x01FE
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	0e 94 39 03 	call	0x672	; 0x672 <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     a82:	0e 94 70 05 	call	0xae0	; 0xae0 <scan_pots>
		update_control_voltages();
     a86:	0e 94 fd 05 	call	0xbfa	; 0xbfa <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     a8a:	80 91 bd 02 	lds	r24, 0x02BD
     a8e:	98 2f       	mov	r25, r24
     a90:	9f 5f       	subi	r25, 0xFF	; 255
     a92:	90 93 bd 02 	sts	0x02BD, r25
     a96:	85 30       	cpi	r24, 0x05	; 5
     a98:	51 f7       	brne	.-44     	; 0xa6e <main+0xe6>
		{
			switch_timer = 0;
     a9a:	10 92 bd 02 	sts	0x02BD, r1
			switch_press = 0; //reset global switch press flag
     a9e:	10 92 c5 02 	sts	0x02C5, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     aa2:	f7 01       	movw	r30, r14
     aa4:	c0 81       	ld	r28, Z
     aa6:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <read_switch_port>
     aaa:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     aac:	f6 01       	movw	r30, r12
     aae:	90 81       	ld	r25, Z
     ab0:	91 30       	cpi	r25, 0x01	; 1
     ab2:	11 f4       	brne	.+4      	; 0xab8 <main+0x130>
     ab4:	cd 2f       	mov	r28, r29
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <main+0x132>
     ab8:	c0 e0       	ldi	r28, 0x00	; 0
     aba:	c8 2b       	or	r28, r24
     abc:	f7 01       	movw	r30, r14
     abe:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     ac0:	0e 94 41 08 	call	0x1082	; 0x1082 <update_spi>
			if (switch_press) { 
     ac4:	80 91 c5 02 	lds	r24, 0x02C5
     ac8:	88 23       	and	r24, r24
     aca:	39 f0       	breq	.+14     	; 0xada <main+0x152>
				update_patch();
     acc:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     ad0:	f6 01       	movw	r30, r12
     ad2:	80 81       	ld	r24, Z
     ad4:	88 23       	and	r24, r24
     ad6:	09 f4       	brne	.+2      	; 0xada <main+0x152>
     ad8:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     ada:	0e 94 35 10 	call	0x206a	; 0x206a <update_patch_programmer>
     ade:	c7 cf       	rjmp	.-114    	; 0xa6e <main+0xe6>

00000ae0 <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     ae0:	bf 92       	push	r11
     ae2:	cf 92       	push	r12
     ae4:	df 92       	push	r13
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	c0 e0       	ldi	r28, 0x00	; 0
     af4:	d1 e0       	ldi	r29, 0x01	; 1
     af6:	06 ec       	ldi	r16, 0xC6	; 198
     af8:	12 e0       	ldi	r17, 0x02	; 2
     afa:	0f 2e       	mov	r0, r31
     afc:	fc e3       	ldi	r31, 0x3C	; 60
     afe:	cf 2e       	mov	r12, r31
     b00:	dd 24       	eor	r13, r13
     b02:	f0 2d       	mov	r31, r0
     b04:	cc 0e       	add	r12, r28
     b06:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     b08:	0f 2e       	mov	r0, r31
     b0a:	fb e0       	ldi	r31, 0x0B	; 11
     b0c:	ef 2e       	mov	r14, r31
     b0e:	f3 e0       	ldi	r31, 0x03	; 3
     b10:	ff 2e       	mov	r15, r31
     b12:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     b14:	bb 24       	eor	r11, r11
     b16:	68 94       	set
     b18:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
		
		adc_value = read_pot(pot_id[i]);
     b1a:	88 81       	ld	r24, Y
     b1c:	99 81       	ldd	r25, Y+1	; 0x01
     b1e:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     b22:	90 93 c0 02 	sts	0x02C0, r25
     b26:	80 93 bf 02 	sts	0x02BF, r24
		adc_change = adc_value - pot_id[i]->value;
     b2a:	e8 81       	ld	r30, Y
     b2c:	f9 81       	ldd	r31, Y+1	; 0x01
     b2e:	40 81       	ld	r20, Z
     b30:	21 81       	ldd	r18, Z+1	; 0x01
     b32:	52 2f       	mov	r21, r18
     b34:	53 70       	andi	r21, 0x03	; 3
     b36:	84 1b       	sub	r24, r20
     b38:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     b3a:	95 95       	asr	r25
     b3c:	87 95       	ror	r24
     b3e:	95 95       	asr	r25
     b40:	87 95       	ror	r24
     b42:	84 0f       	add	r24, r20
     b44:	95 1f       	adc	r25, r21
     b46:	80 83       	st	Z, r24
     b48:	89 2f       	mov	r24, r25
     b4a:	83 70       	andi	r24, 0x03	; 3
     b4c:	2c 7f       	andi	r18, 0xFC	; 252
     b4e:	28 2b       	or	r18, r24
     b50:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     b52:	e9 91       	ld	r30, Y+
     b54:	f9 91       	ld	r31, Y+
     b56:	92 81       	ldd	r25, Z+2	; 0x02
     b58:	20 81       	ld	r18, Z
     b5a:	81 81       	ldd	r24, Z+1	; 0x01
     b5c:	38 2f       	mov	r19, r24
     b5e:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     b60:	d7 01       	movw	r26, r14
     b62:	8c 91       	ld	r24, X
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	19 f0       	breq	.+6      	; 0xb6e <scan_pots+0x8e>
     b68:	83 81       	ldd	r24, Z+3	; 0x03
     b6a:	88 23       	and	r24, r24
     b6c:	24 f0       	brlt	.+8      	; 0xb76 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     b6e:	f8 01       	movw	r30, r16
     b70:	31 83       	std	Z+1, r19	; 0x01
     b72:	20 83       	st	Z, r18
     b74:	14 c0       	rjmp	.+40     	; 0xb9e <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     b76:	49 2f       	mov	r20, r25
     b78:	43 50       	subi	r20, 0x03	; 3
     b7a:	c9 01       	movw	r24, r18
     b7c:	95 95       	asr	r25
     b7e:	87 95       	ror	r24
     b80:	95 95       	asr	r25
     b82:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     b84:	94 2f       	mov	r25, r20
     b86:	98 1b       	sub	r25, r24
     b88:	9a 3f       	cpi	r25, 0xFA	; 250
     b8a:	48 f4       	brcc	.+18     	; 0xb9e <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     b8c:	d8 01       	movw	r26, r16
     b8e:	11 96       	adiw	r26, 0x01	; 1
     b90:	3c 93       	st	X, r19
     b92:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     b94:	83 81       	ldd	r24, Z+3	; 0x03
     b96:	8f 77       	andi	r24, 0x7F	; 127
     b98:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     b9a:	f7 01       	movw	r30, r14
     b9c:	b0 82       	st	Z, r11
     b9e:	0e 5f       	subi	r16, 0xFE	; 254
     ba0:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= NUM_POTS; i++) {
     ba2:	cc 15       	cp	r28, r12
     ba4:	dd 05       	cpc	r29, r13
     ba6:	09 f0       	breq	.+2      	; 0xbaa <scan_pots+0xca>
     ba8:	b8 cf       	rjmp	.-144    	; 0xb1a <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     baa:	8c e7       	ldi	r24, 0x7C	; 124
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     bb2:	90 93 c0 02 	sts	0x02C0, r25
     bb6:	80 93 bf 02 	sts	0x02BF, r24
	adc_change = adc_value - volume_pot.value;
     bba:	20 91 7c 01 	lds	r18, 0x017C
     bbe:	40 91 7d 01 	lds	r20, 0x017D
     bc2:	34 2f       	mov	r19, r20
     bc4:	33 70       	andi	r19, 0x03	; 3
     bc6:	82 1b       	sub	r24, r18
     bc8:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     bca:	95 95       	asr	r25
     bcc:	87 95       	ror	r24
     bce:	95 95       	asr	r25
     bd0:	87 95       	ror	r24
     bd2:	28 0f       	add	r18, r24
     bd4:	39 1f       	adc	r19, r25
     bd6:	20 93 7c 01 	sts	0x017C, r18
     bda:	83 2f       	mov	r24, r19
     bdc:	83 70       	andi	r24, 0x03	; 3
     bde:	4c 7f       	andi	r20, 0xFC	; 252
     be0:	48 2b       	or	r20, r24
     be2:	40 93 7d 01 	sts	0x017D, r20
	
}
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	cf 90       	pop	r12
     bf6:	bf 90       	pop	r11
     bf8:	08 95       	ret

00000bfa <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     bfe:	60 91 c6 02 	lds	r22, 0x02C6
     c02:	70 91 c7 02 	lds	r23, 0x02C7
     c06:	62 95       	swap	r22
     c08:	72 95       	swap	r23
     c0a:	70 7f       	andi	r23, 0xF0	; 240
     c0c:	76 27       	eor	r23, r22
     c0e:	60 7f       	andi	r22, 0xF0	; 240
     c10:	76 27       	eor	r23, r22
     c12:	84 ee       	ldi	r24, 0xE4	; 228
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     c1a:	60 91 c8 02 	lds	r22, 0x02C8
     c1e:	70 91 c9 02 	lds	r23, 0x02C9
     c22:	62 95       	swap	r22
     c24:	72 95       	swap	r23
     c26:	70 7f       	andi	r23, 0xF0	; 240
     c28:	76 27       	eor	r23, r22
     c2a:	60 7f       	andi	r22, 0xF0	; 240
     c2c:	76 27       	eor	r23, r22
     c2e:	83 ee       	ldi	r24, 0xE3	; 227
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     c36:	60 91 ca 02 	lds	r22, 0x02CA
     c3a:	70 91 cb 02 	lds	r23, 0x02CB
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	66 0f       	add	r22, r22
     c44:	77 1f       	adc	r23, r23
     c46:	66 0f       	add	r22, r22
     c48:	77 1f       	adc	r23, r23
     c4a:	82 ee       	ldi	r24, 0xE2	; 226
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     c52:	60 91 cc 02 	lds	r22, 0x02CC
     c56:	70 91 cd 02 	lds	r23, 0x02CD
     c5a:	62 95       	swap	r22
     c5c:	72 95       	swap	r23
     c5e:	70 7f       	andi	r23, 0xF0	; 240
     c60:	76 27       	eor	r23, r22
     c62:	60 7f       	andi	r22, 0xF0	; 240
     c64:	76 27       	eor	r23, r22
     c66:	87 eb       	ldi	r24, 0xB7	; 183
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     c6e:	60 91 ce 02 	lds	r22, 0x02CE
     c72:	70 91 cf 02 	lds	r23, 0x02CF
     c76:	66 0f       	add	r22, r22
     c78:	77 1f       	adc	r23, r23
     c7a:	66 0f       	add	r22, r22
     c7c:	77 1f       	adc	r23, r23
     c7e:	66 0f       	add	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	81 ee       	ldi	r24, 0xE1	; 225
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     c8a:	60 91 d0 02 	lds	r22, 0x02D0
     c8e:	70 91 d1 02 	lds	r23, 0x02D1
     c92:	62 95       	swap	r22
     c94:	72 95       	swap	r23
     c96:	70 7f       	andi	r23, 0xF0	; 240
     c98:	76 27       	eor	r23, r22
     c9a:	60 7f       	andi	r22, 0xF0	; 240
     c9c:	76 27       	eor	r23, r22
     c9e:	80 ee       	ldi	r24, 0xE0	; 224
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     ca6:	60 91 d2 02 	lds	r22, 0x02D2
     caa:	70 91 d3 02 	lds	r23, 0x02D3
     cae:	62 95       	swap	r22
     cb0:	72 95       	swap	r23
     cb2:	70 7f       	andi	r23, 0xF0	; 240
     cb4:	76 27       	eor	r23, r22
     cb6:	60 7f       	andi	r22, 0xF0	; 240
     cb8:	76 27       	eor	r23, r22
     cba:	8f ed       	ldi	r24, 0xDF	; 223
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     cc2:	60 91 d4 02 	lds	r22, 0x02D4
     cc6:	70 91 d5 02 	lds	r23, 0x02D5
     cca:	62 95       	swap	r22
     ccc:	72 95       	swap	r23
     cce:	70 7f       	andi	r23, 0xF0	; 240
     cd0:	76 27       	eor	r23, r22
     cd2:	60 7f       	andi	r22, 0xF0	; 240
     cd4:	76 27       	eor	r23, r22
     cd6:	8e ed       	ldi	r24, 0xDE	; 222
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     cde:	80 91 d8 02 	lds	r24, 0x02D8
     ce2:	90 91 d9 02 	lds	r25, 0x02D9
     ce6:	c0 e0       	ldi	r28, 0x00	; 0
     ce8:	d2 e0       	ldi	r29, 0x02	; 2
     cea:	c8 1b       	sub	r28, r24
     cec:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     cee:	60 91 77 03 	lds	r22, 0x0377
     cf2:	70 91 78 03 	lds	r23, 0x0378
     cf6:	60 50       	subi	r22, 0x00	; 0
     cf8:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     cfa:	80 91 d6 02 	lds	r24, 0x02D6
     cfe:	90 91 d7 02 	lds	r25, 0x02D7
     d02:	68 1b       	sub	r22, r24
     d04:	79 0b       	sbc	r23, r25
     d06:	6c 0f       	add	r22, r28
     d08:	7d 1f       	adc	r23, r29
     d0a:	8d ed       	ldi	r24, 0xDD	; 221
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     d12:	60 91 79 03 	lds	r22, 0x0379
     d16:	70 91 7a 03 	lds	r23, 0x037A
     d1a:	6c 0f       	add	r22, r28
     d1c:	7d 1f       	adc	r23, r29
     d1e:	8c ed       	ldi	r24, 0xDC	; 220
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     d26:	60 91 da 02 	lds	r22, 0x02DA
     d2a:	70 91 db 02 	lds	r23, 0x02DB
     d2e:	62 95       	swap	r22
     d30:	72 95       	swap	r23
     d32:	70 7f       	andi	r23, 0xF0	; 240
     d34:	76 27       	eor	r23, r22
     d36:	60 7f       	andi	r22, 0xF0	; 240
     d38:	76 27       	eor	r23, r22
     d3a:	8b ed       	ldi	r24, 0xDB	; 219
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     d42:	60 91 de 02 	lds	r22, 0x02DE
     d46:	70 91 df 02 	lds	r23, 0x02DF
     d4a:	62 95       	swap	r22
     d4c:	72 95       	swap	r23
     d4e:	70 7f       	andi	r23, 0xF0	; 240
     d50:	76 27       	eor	r23, r22
     d52:	60 7f       	andi	r22, 0xF0	; 240
     d54:	76 27       	eor	r23, r22
     d56:	8a ed       	ldi	r24, 0xDA	; 218
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     d5e:	60 91 e0 02 	lds	r22, 0x02E0
     d62:	70 91 e1 02 	lds	r23, 0x02E1
     d66:	62 95       	swap	r22
     d68:	72 95       	swap	r23
     d6a:	70 7f       	andi	r23, 0xF0	; 240
     d6c:	76 27       	eor	r23, r22
     d6e:	60 7f       	andi	r22, 0xF0	; 240
     d70:	76 27       	eor	r23, r22
     d72:	89 ed       	ldi	r24, 0xD9	; 217
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     d7a:	60 91 7c 01 	lds	r22, 0x017C
     d7e:	80 91 7d 01 	lds	r24, 0x017D
     d82:	78 2f       	mov	r23, r24
     d84:	73 70       	andi	r23, 0x03	; 3
     d86:	62 95       	swap	r22
     d88:	72 95       	swap	r23
     d8a:	70 7f       	andi	r23, 0xF0	; 240
     d8c:	76 27       	eor	r23, r22
     d8e:	60 7f       	andi	r22, 0xF0	; 240
     d90:	76 27       	eor	r23, r22
     d92:	88 ed       	ldi	r24, 0xD8	; 216
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     d9a:	60 91 e2 02 	lds	r22, 0x02E2
     d9e:	70 91 e3 02 	lds	r23, 0x02E3
     da2:	62 95       	swap	r22
     da4:	72 95       	swap	r23
     da6:	70 7f       	andi	r23, 0xF0	; 240
     da8:	76 27       	eor	r23, r22
     daa:	60 7f       	andi	r22, 0xF0	; 240
     dac:	76 27       	eor	r23, r22
     dae:	87 ed       	ldi	r24, 0xD7	; 215
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     db6:	60 91 e4 02 	lds	r22, 0x02E4
     dba:	70 91 e5 02 	lds	r23, 0x02E5
     dbe:	62 95       	swap	r22
     dc0:	72 95       	swap	r23
     dc2:	70 7f       	andi	r23, 0xF0	; 240
     dc4:	76 27       	eor	r23, r22
     dc6:	60 7f       	andi	r22, 0xF0	; 240
     dc8:	76 27       	eor	r23, r22
     dca:	86 ed       	ldi	r24, 0xD6	; 214
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     dd2:	60 91 e6 02 	lds	r22, 0x02E6
     dd6:	70 91 e7 02 	lds	r23, 0x02E7
     dda:	62 95       	swap	r22
     ddc:	72 95       	swap	r23
     dde:	70 7f       	andi	r23, 0xF0	; 240
     de0:	76 27       	eor	r23, r22
     de2:	60 7f       	andi	r22, 0xF0	; 240
     de4:	76 27       	eor	r23, r22
     de6:	85 ed       	ldi	r24, 0xD5	; 213
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     dee:	0e 94 8e 01 	call	0x31c	; 0x31c <get_current_note>
     df2:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     df4:	88 30       	cpi	r24, 0x08	; 8
     df6:	08 f4       	brcc	.+2      	; 0xdfa <update_control_voltages+0x200>
     df8:	c8 e0       	ldi	r28, 0x08	; 8
	//value_to_display = current_patch.number + 100*(arp.sequence[arp.step_position].note); //100*note;
	//value_to_display = arp.sequence[arp.step_position].note;
	//uint8_t arp_note = arp.sequence[arp.step_position].note;
	//if (arp_note == EMPTY) arp_note = 0;
	value_to_display = current_patch.number + 100*arp.step_position;
     dfa:	60 91 07 03 	lds	r22, 0x0307
     dfe:	40 91 8a 03 	lds	r20, 0x038A
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	24 e6       	ldi	r18, 0x64	; 100
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	42 9f       	mul	r20, r18
     e0a:	c0 01       	movw	r24, r0
     e0c:	43 9f       	mul	r20, r19
     e0e:	90 0d       	add	r25, r0
     e10:	52 9f       	mul	r21, r18
     e12:	90 0d       	add	r25, r0
     e14:	11 24       	eor	r1, r1
     e16:	86 0f       	add	r24, r22
     e18:	91 1d       	adc	r25, r1
     e1a:	90 93 fe 01 	sts	0x01FE, r25
     e1e:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     e22:	8c 2f       	mov	r24, r28
     e24:	88 50       	subi	r24, 0x08	; 8
     e26:	63 e1       	ldi	r22, 0x13	; 19
     e28:	73 e0       	ldi	r23, 0x03	; 3
     e2a:	0e 94 56 16 	call	0x2cac	; 0x2cac <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     e2e:	bc 01       	movw	r22, r24
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	20 91 ea 02 	lds	r18, 0x02EA
     e38:	30 91 eb 02 	lds	r19, 0x02EB
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <__mulsi3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	07 2e       	mov	r0, r23
     e4a:	7a e0       	ldi	r23, 0x0A	; 10
     e4c:	b6 95       	lsr	r27
     e4e:	a7 95       	ror	r26
     e50:	97 95       	ror	r25
     e52:	87 95       	ror	r24
     e54:	7a 95       	dec	r23
     e56:	d1 f7       	brne	.-12     	; 0xe4c <update_control_voltages+0x252>
     e58:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     e5a:	60 91 e8 02 	lds	r22, 0x02E8
     e5e:	70 91 e9 02 	lds	r23, 0x02E9
     e62:	62 95       	swap	r22
     e64:	72 95       	swap	r23
     e66:	70 7f       	andi	r23, 0xF0	; 240
     e68:	76 27       	eor	r23, r22
     e6a:	60 7f       	andi	r22, 0xF0	; 240
     e6c:	76 27       	eor	r23, r22
     e6e:	86 0f       	add	r24, r22
     e70:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     e72:	bc 01       	movw	r22, r24
     e74:	80 e4       	ldi	r24, 0x40	; 64
     e76:	60 30       	cpi	r22, 0x00	; 0
     e78:	78 07       	cpc	r23, r24
     e7a:	10 f0       	brcs	.+4      	; 0xe80 <update_control_voltages+0x286>
     e7c:	6f ef       	ldi	r22, 0xFF	; 255
     e7e:	7f e3       	ldi	r23, 0x3F	; 63
     e80:	84 ed       	ldi	r24, 0xD4	; 212
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     e88:	60 91 ec 02 	lds	r22, 0x02EC
     e8c:	70 91 ed 02 	lds	r23, 0x02ED
     e90:	62 95       	swap	r22
     e92:	72 95       	swap	r23
     e94:	70 7f       	andi	r23, 0xF0	; 240
     e96:	76 27       	eor	r23, r22
     e98:	60 7f       	andi	r22, 0xF0	; 240
     e9a:	76 27       	eor	r23, r22
     e9c:	82 ed       	ldi	r24, 0xD2	; 210
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     ea4:	60 91 ee 02 	lds	r22, 0x02EE
     ea8:	70 91 ef 02 	lds	r23, 0x02EF
     eac:	62 95       	swap	r22
     eae:	72 95       	swap	r23
     eb0:	70 7f       	andi	r23, 0xF0	; 240
     eb2:	76 27       	eor	r23, r22
     eb4:	60 7f       	andi	r22, 0xF0	; 240
     eb6:	76 27       	eor	r23, r22
     eb8:	81 ed       	ldi	r24, 0xD1	; 209
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     ec0:	60 91 f0 02 	lds	r22, 0x02F0
     ec4:	70 91 f1 02 	lds	r23, 0x02F1
     ec8:	62 95       	swap	r22
     eca:	72 95       	swap	r23
     ecc:	70 7f       	andi	r23, 0xF0	; 240
     ece:	76 27       	eor	r23, r22
     ed0:	60 7f       	andi	r22, 0xF0	; 240
     ed2:	76 27       	eor	r23, r22
     ed4:	80 ed       	ldi	r24, 0xD0	; 208
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     edc:	60 91 f2 02 	lds	r22, 0x02F2
     ee0:	70 91 f3 02 	lds	r23, 0x02F3
     ee4:	62 95       	swap	r22
     ee6:	72 95       	swap	r23
     ee8:	70 7f       	andi	r23, 0xF0	; 240
     eea:	76 27       	eor	r23, r22
     eec:	60 7f       	andi	r22, 0xF0	; 240
     eee:	76 27       	eor	r23, r22
     ef0:	8f ec       	ldi	r24, 0xCF	; 207
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     ef8:	60 91 f4 02 	lds	r22, 0x02F4
     efc:	70 91 f5 02 	lds	r23, 0x02F5
     f00:	62 95       	swap	r22
     f02:	72 95       	swap	r23
     f04:	70 7f       	andi	r23, 0xF0	; 240
     f06:	76 27       	eor	r23, r22
     f08:	60 7f       	andi	r22, 0xF0	; 240
     f0a:	76 27       	eor	r23, r22
     f0c:	8e ec       	ldi	r24, 0xCE	; 206
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     f14:	60 91 f6 02 	lds	r22, 0x02F6
     f18:	70 91 f7 02 	lds	r23, 0x02F7
     f1c:	62 95       	swap	r22
     f1e:	72 95       	swap	r23
     f20:	70 7f       	andi	r23, 0xF0	; 240
     f22:	76 27       	eor	r23, r22
     f24:	60 7f       	andi	r22, 0xF0	; 240
     f26:	76 27       	eor	r23, r22
     f28:	8d ec       	ldi	r24, 0xCD	; 205
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     f30:	60 91 f8 02 	lds	r22, 0x02F8
     f34:	70 91 f9 02 	lds	r23, 0x02F9
     f38:	62 95       	swap	r22
     f3a:	72 95       	swap	r23
     f3c:	70 7f       	andi	r23, 0xF0	; 240
     f3e:	76 27       	eor	r23, r22
     f40:	60 7f       	andi	r22, 0xF0	; 240
     f42:	76 27       	eor	r23, r22
     f44:	8c ec       	ldi	r24, 0xCC	; 204
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     f4c:	60 91 fc 02 	lds	r22, 0x02FC
     f50:	70 91 fd 02 	lds	r23, 0x02FD
     f54:	62 95       	swap	r22
     f56:	72 95       	swap	r23
     f58:	70 7f       	andi	r23, 0xF0	; 240
     f5a:	76 27       	eor	r23, r22
     f5c:	60 7f       	andi	r22, 0xF0	; 240
     f5e:	76 27       	eor	r23, r22
     f60:	8a ec       	ldi	r24, 0xCA	; 202
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     f68:	60 91 fa 02 	lds	r22, 0x02FA
     f6c:	70 91 fb 02 	lds	r23, 0x02FB
     f70:	62 95       	swap	r22
     f72:	72 95       	swap	r23
     f74:	70 7f       	andi	r23, 0xF0	; 240
     f76:	76 27       	eor	r23, r22
     f78:	60 7f       	andi	r22, 0xF0	; 240
     f7a:	76 27       	eor	r23, r22
     f7c:	8b ec       	ldi	r24, 0xCB	; 203
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     f84:	60 91 00 03 	lds	r22, 0x0300
     f88:	70 91 01 03 	lds	r23, 0x0301
     f8c:	62 95       	swap	r22
     f8e:	72 95       	swap	r23
     f90:	70 7f       	andi	r23, 0xF0	; 240
     f92:	76 27       	eor	r23, r22
     f94:	60 7f       	andi	r22, 0xF0	; 240
     f96:	76 27       	eor	r23, r22
     f98:	88 ec       	ldi	r24, 0xC8	; 200
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     fa0:	60 91 fe 02 	lds	r22, 0x02FE
     fa4:	70 91 ff 02 	lds	r23, 0x02FF
     fa8:	62 95       	swap	r22
     faa:	72 95       	swap	r23
     fac:	70 7f       	andi	r23, 0xF0	; 240
     fae:	76 27       	eor	r23, r22
     fb0:	60 7f       	andi	r22, 0xF0	; 240
     fb2:	76 27       	eor	r23, r22
     fb4:	89 ec       	ldi	r24, 0xC9	; 201
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     fbc:	8c 2f       	mov	r24, r28
     fbe:	6f e0       	ldi	r22, 0x0F	; 15
     fc0:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     fc4:	65 e5       	ldi	r22, 0x55	; 85
     fc6:	73 e0       	ldi	r23, 0x03	; 3
     fc8:	0e 94 56 16 	call	0x2cac	; 0x2cac <interpolate_pitch_cv>
     fcc:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     fce:	86 ee       	ldi	r24, 0xE6	; 230
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     fd6:	8c 2f       	mov	r24, r28
     fd8:	60 ef       	ldi	r22, 0xF0	; 240
     fda:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     fde:	63 e3       	ldi	r22, 0x33	; 51
     fe0:	73 e0       	ldi	r23, 0x03	; 3
     fe2:	0e 94 56 16 	call	0x2cac	; 0x2cac <interpolate_pitch_cv>
     fe6:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     fe8:	85 ee       	ldi	r24, 0xE5	; 229
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     ff0:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     ff2:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     ff4:	20 91 88 01 	lds	r18, 0x0188
     ff8:	80 91 89 01 	lds	r24, 0x0189
     ffc:	38 2f       	mov	r19, r24
     ffe:	33 70       	andi	r19, 0x03	; 3
    1000:	83 ef       	ldi	r24, 0xF3	; 243
    1002:	94 e0       	ldi	r25, 0x04	; 4
    1004:	82 1b       	sub	r24, r18
    1006:	93 0b       	sbc	r25, r19
    1008:	90 93 d5 03 	sts	0x03D5, r25
    100c:	80 93 d4 03 	sts	0x03D4, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
    1010:	20 91 d6 03 	lds	r18, 0x03D6
    1014:	30 91 d7 03 	lds	r19, 0x03D7
    1018:	82 17       	cp	r24, r18
    101a:	93 07       	cpc	r25, r19
    101c:	11 f0       	breq	.+4      	; 0x1022 <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
    101e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
    1022:	80 91 d4 03 	lds	r24, 0x03D4
    1026:	90 91 d5 03 	lds	r25, 0x03D5
    102a:	90 93 d7 03 	sts	0x03D7, r25
    102e:	80 93 d6 03 	sts	0x03D6, r24
	
}			
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
    1038:	84 b1       	in	r24, 0x04	; 4
    103a:	87 62       	ori	r24, 0x27	; 39
    103c:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
    103e:	ec ed       	ldi	r30, 0xDC	; 220
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8c 65       	ori	r24, 0x5C	; 92
    1046:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
    1048:	85 b1       	in	r24, 0x05	; 5
    104a:	89 7d       	andi	r24, 0xD9	; 217
    104c:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
    104e:	ed ed       	ldi	r30, 0xDD	; 221
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	83 7f       	andi	r24, 0xF3	; 243
    1056:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
    1058:	80 e5       	ldi	r24, 0x50	; 80
    105a:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
    105c:	80 81       	ld	r24, Z
    105e:	87 7f       	andi	r24, 0xF7	; 247
    1060:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
    1062:	80 81       	ld	r24, Z
    1064:	87 7f       	andi	r24, 0xF7	; 247
    1066:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
    1068:	80 81       	ld	r24, Z
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
    106e:	80 81       	ld	r24, Z
    1070:	8f 7e       	andi	r24, 0xEF	; 239
    1072:	80 83       	st	Z, r24
	
}
    1074:	08 95       	ret

00001076 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
    1076:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    1078:	0d b4       	in	r0, 0x2d	; 45
    107a:	07 fe       	sbrs	r0, 7
    107c:	fd cf       	rjmp	.-6      	; 0x1078 <spi_shift_byte+0x2>
	return SPDR;
    107e:	8e b5       	in	r24, 0x2e	; 46
	
}
    1080:	08 95       	ret

00001082 <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
    1082:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
    1084:	80 91 06 03 	lds	r24, 0x0306
    1088:	0e 94 3b 08 	call	0x1076	; 0x1076 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
    108c:	90 91 c5 02 	lds	r25, 0x02C5
    1090:	98 2b       	or	r25, r24
    1092:	90 93 c5 02 	sts	0x02C5, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
    1096:	20 91 c3 02 	lds	r18, 0x02C3
    109a:	98 2f       	mov	r25, r24
    109c:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
    109e:	89 2f       	mov	r24, r25
    10a0:	82 27       	eor	r24, r18
    10a2:	80 93 c3 02 	sts	0x02C3, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
    10a6:	89 23       	and	r24, r25
    10a8:	80 93 c4 02 	sts	0x02C4, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
    10ac:	90 91 82 03 	lds	r25, 0x0382
    10b0:	89 27       	eor	r24, r25
    10b2:	80 93 82 03 	sts	0x0382, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
    10b6:	80 91 05 03 	lds	r24, 0x0305
    10ba:	0e 94 3b 08 	call	0x1076	; 0x1076 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
    10be:	90 91 c5 02 	lds	r25, 0x02C5
    10c2:	98 2b       	or	r25, r24
    10c4:	90 93 c5 02 	sts	0x02C5, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
    10c8:	20 91 c1 02 	lds	r18, 0x02C1
    10cc:	98 2f       	mov	r25, r24
    10ce:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
    10d0:	89 2f       	mov	r24, r25
    10d2:	82 27       	eor	r24, r18
    10d4:	80 93 c1 02 	sts	0x02C1, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
    10d8:	89 23       	and	r24, r25
    10da:	80 93 c2 02 	sts	0x02C2, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
    10de:	90 91 83 03 	lds	r25, 0x0383
    10e2:	89 27       	eor	r24, r25
    10e4:	80 93 83 03 	sts	0x0383, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
    10e8:	80 91 04 03 	lds	r24, 0x0304
    10ec:	0e 94 3b 08 	call	0x1076	; 0x1076 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
    10f0:	80 91 03 03 	lds	r24, 0x0303
    10f4:	0e 94 3b 08 	call	0x1076	; 0x1076 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    10f8:	80 91 0b 03 	lds	r24, 0x030B
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	11 f4       	brne	.+4      	; 0x1104 <__stack+0x5>
    1100:	20 e8       	ldi	r18, 0x80	; 128
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <__stack+0x7>
    1104:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
    1106:	80 91 84 03 	lds	r24, 0x0384
    110a:	88 1f       	adc	r24, r24
    110c:	88 27       	eor	r24, r24
    110e:	88 1f       	adc	r24, r24
    1110:	82 95       	swap	r24
    1112:	88 0f       	add	r24, r24
    1114:	88 0f       	add	r24, r24
    1116:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	//((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
    1118:	90 91 02 03 	lds	r25, 0x0302
    111c:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
    111e:	82 2b       	or	r24, r18
    1120:	0e 94 3b 08 	call	0x1076	; 0x1076 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
    1124:	ed ed       	ldi	r30, 0xDD	; 221
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	87 7f       	andi	r24, 0xF7	; 247
    112c:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
    112e:	80 81       	ld	r24, Z
    1130:	88 60       	ori	r24, 0x08	; 8
    1132:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
    1134:	2d 98       	cbi	0x05, 5	; 5
			
			

	
    1136:	08 95       	ret

00001138 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
    1138:	a0 e0       	ldi	r26, 0x00	; 0
    113a:	b1 e0       	ldi	r27, 0x01	; 1
    113c:	9d 01       	movw	r18, r26
    113e:	24 5c       	subi	r18, 0xC4	; 196
    1140:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= NUM_POTS; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
    1142:	ed 91       	ld	r30, X+
    1144:	fc 91       	ld	r31, X
    1146:	11 97       	sbiw	r26, 0x01	; 1
    1148:	80 81       	ld	r24, Z
    114a:	41 81       	ldd	r20, Z+1	; 0x01
    114c:	94 2f       	mov	r25, r20
    114e:	93 70       	andi	r25, 0x03	; 3
    1150:	95 95       	asr	r25
    1152:	87 95       	ror	r24
    1154:	95 95       	asr	r25
    1156:	87 95       	ror	r24
    1158:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
    115a:	ed 91       	ld	r30, X+
    115c:	fd 91       	ld	r31, X+
    115e:	83 81       	ldd	r24, Z+3	; 0x03
    1160:	80 68       	ori	r24, 0x80	; 128
    1162:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= NUM_POTS; i++) {
    1164:	a2 17       	cp	r26, r18
    1166:	b3 07       	cpc	r27, r19
    1168:	61 f7       	brne	.-40     	; 0x1142 <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
    116a:	08 95       	ret

0000116c <unlock_pots>:

void unlock_pots(void) {
    116c:	e0 e0       	ldi	r30, 0x00	; 0
    116e:	f1 e0       	ldi	r31, 0x01	; 1
    1170:	cf 01       	movw	r24, r30
    1172:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= NUM_POTS; i++) {
		
		pot_id[i]->locked = 0;
    1174:	a1 91       	ld	r26, Z+
    1176:	b1 91       	ld	r27, Z+
    1178:	13 96       	adiw	r26, 0x03	; 3
    117a:	2c 91       	ld	r18, X
    117c:	13 97       	sbiw	r26, 0x03	; 3
    117e:	2f 77       	andi	r18, 0x7F	; 127
    1180:	13 96       	adiw	r26, 0x03	; 3
    1182:	2c 93       	st	X, r18
    1184:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= NUM_POTS; i++) {
    1186:	e8 17       	cp	r30, r24
    1188:	f9 07       	cpc	r31, r25
    118a:	a1 f7       	brne	.-24     	; 0x1174 <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
    118c:	08 95       	ret

0000118e <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	ab 97       	sbiw	r28, 0x2b	; 43
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
    11a6:	e2 ee       	ldi	r30, 0xE2	; 226
    11a8:	f2 e0       	ldi	r31, 0x02	; 2
    11aa:	20 91 e2 02 	lds	r18, 0x02E2
    11ae:	82 2f       	mov	r24, r18
    11b0:	82 95       	swap	r24
    11b2:	80 7f       	andi	r24, 0xF0	; 240
    11b4:	22 95       	swap	r18
    11b6:	2f 70       	andi	r18, 0x0F	; 15
    11b8:	90 91 e3 02 	lds	r25, 0x02E3
    11bc:	93 70       	andi	r25, 0x03	; 3
    11be:	92 95       	swap	r25
    11c0:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
    11c2:	df 01       	movw	r26, r30
    11c4:	5a 97       	sbiw	r26, 0x1a	; 26
    11c6:	3c 91       	ld	r19, X
    11c8:	53 2f       	mov	r21, r19
    11ca:	55 0f       	add	r21, r21
    11cc:	55 0f       	add	r21, r21
    11ce:	4a 81       	ldd	r20, Y+2	; 0x02
    11d0:	43 70       	andi	r20, 0x03	; 3
    11d2:	45 2b       	or	r20, r21
    11d4:	4a 83       	std	Y+2, r20	; 0x02
    11d6:	63 2f       	mov	r22, r19
    11d8:	62 95       	swap	r22
    11da:	66 95       	lsr	r22
    11dc:	66 95       	lsr	r22
    11de:	63 70       	andi	r22, 0x03	; 3
    11e0:	11 96       	adiw	r26, 0x01	; 1
    11e2:	4c 91       	ld	r20, X
    11e4:	43 70       	andi	r20, 0x03	; 3
    11e6:	44 0f       	add	r20, r20
    11e8:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
    11ea:	df 01       	movw	r26, r30
    11ec:	58 97       	sbiw	r26, 0x18	; 24
    11ee:	3c 91       	ld	r19, X
    11f0:	53 2f       	mov	r21, r19
    11f2:	52 95       	swap	r21
    11f4:	50 7f       	andi	r21, 0xF0	; 240
    11f6:	46 2b       	or	r20, r22
    11f8:	45 2b       	or	r20, r21
    11fa:	4b 83       	std	Y+3, r20	; 0x03
    11fc:	63 2f       	mov	r22, r19
    11fe:	62 95       	swap	r22
    1200:	6f 70       	andi	r22, 0x0F	; 15
    1202:	11 96       	adiw	r26, 0x01	; 1
    1204:	4c 91       	ld	r20, X
    1206:	43 70       	andi	r20, 0x03	; 3
    1208:	42 95       	swap	r20
    120a:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
    120c:	df 01       	movw	r26, r30
    120e:	56 97       	sbiw	r26, 0x16	; 22
    1210:	3c 91       	ld	r19, X
    1212:	53 2f       	mov	r21, r19
    1214:	52 95       	swap	r21
    1216:	55 0f       	add	r21, r21
    1218:	55 0f       	add	r21, r21
    121a:	50 7c       	andi	r21, 0xC0	; 192
    121c:	46 2b       	or	r20, r22
    121e:	45 2b       	or	r20, r21
    1220:	4c 83       	std	Y+4, r20	; 0x04
    1222:	11 96       	adiw	r26, 0x01	; 1
    1224:	4c 91       	ld	r20, X
    1226:	42 95       	swap	r20
    1228:	44 0f       	add	r20, r20
    122a:	44 0f       	add	r20, r20
    122c:	40 7c       	andi	r20, 0xC0	; 192
    122e:	36 95       	lsr	r19
    1230:	36 95       	lsr	r19
    1232:	34 2b       	or	r19, r20
    1234:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
    1236:	df 01       	movw	r26, r30
    1238:	54 97       	sbiw	r26, 0x14	; 20
    123a:	3c 91       	ld	r19, X
    123c:	3e 83       	std	Y+6, r19	; 0x06
    123e:	11 96       	adiw	r26, 0x01	; 1
    1240:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
    1242:	df 01       	movw	r26, r30
    1244:	52 97       	sbiw	r26, 0x12	; 18
    1246:	3c 91       	ld	r19, X
    1248:	53 2f       	mov	r21, r19
    124a:	55 0f       	add	r21, r21
    124c:	55 0f       	add	r21, r21
    124e:	43 70       	andi	r20, 0x03	; 3
    1250:	45 2b       	or	r20, r21
    1252:	4f 83       	std	Y+7, r20	; 0x07
    1254:	63 2f       	mov	r22, r19
    1256:	62 95       	swap	r22
    1258:	66 95       	lsr	r22
    125a:	66 95       	lsr	r22
    125c:	63 70       	andi	r22, 0x03	; 3
    125e:	11 96       	adiw	r26, 0x01	; 1
    1260:	4c 91       	ld	r20, X
    1262:	43 70       	andi	r20, 0x03	; 3
    1264:	44 0f       	add	r20, r20
    1266:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
    1268:	df 01       	movw	r26, r30
    126a:	50 97       	sbiw	r26, 0x10	; 16
    126c:	3c 91       	ld	r19, X
    126e:	53 2f       	mov	r21, r19
    1270:	52 95       	swap	r21
    1272:	50 7f       	andi	r21, 0xF0	; 240
    1274:	46 2b       	or	r20, r22
    1276:	45 2b       	or	r20, r21
    1278:	48 87       	std	Y+8, r20	; 0x08
    127a:	63 2f       	mov	r22, r19
    127c:	62 95       	swap	r22
    127e:	6f 70       	andi	r22, 0x0F	; 15
    1280:	11 96       	adiw	r26, 0x01	; 1
    1282:	4c 91       	ld	r20, X
    1284:	43 70       	andi	r20, 0x03	; 3
    1286:	42 95       	swap	r20
    1288:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
    128a:	df 01       	movw	r26, r30
    128c:	1e 97       	sbiw	r26, 0x0e	; 14
    128e:	3c 91       	ld	r19, X
    1290:	53 2f       	mov	r21, r19
    1292:	52 95       	swap	r21
    1294:	55 0f       	add	r21, r21
    1296:	55 0f       	add	r21, r21
    1298:	50 7c       	andi	r21, 0xC0	; 192
    129a:	46 2b       	or	r20, r22
    129c:	45 2b       	or	r20, r21
    129e:	49 87       	std	Y+9, r20	; 0x09
    12a0:	11 96       	adiw	r26, 0x01	; 1
    12a2:	4c 91       	ld	r20, X
    12a4:	42 95       	swap	r20
    12a6:	44 0f       	add	r20, r20
    12a8:	44 0f       	add	r20, r20
    12aa:	40 7c       	andi	r20, 0xC0	; 192
    12ac:	36 95       	lsr	r19
    12ae:	36 95       	lsr	r19
    12b0:	34 2b       	or	r19, r20
    12b2:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
    12b4:	df 01       	movw	r26, r30
    12b6:	1c 97       	sbiw	r26, 0x0c	; 12
    12b8:	3c 91       	ld	r19, X
    12ba:	3b 87       	std	Y+11, r19	; 0x0b
    12bc:	11 96       	adiw	r26, 0x01	; 1
    12be:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    12c0:	df 01       	movw	r26, r30
    12c2:	1a 97       	sbiw	r26, 0x0a	; 10
    12c4:	3c 91       	ld	r19, X
    12c6:	53 2f       	mov	r21, r19
    12c8:	55 0f       	add	r21, r21
    12ca:	55 0f       	add	r21, r21
    12cc:	43 70       	andi	r20, 0x03	; 3
    12ce:	45 2b       	or	r20, r21
    12d0:	4c 87       	std	Y+12, r20	; 0x0c
    12d2:	63 2f       	mov	r22, r19
    12d4:	62 95       	swap	r22
    12d6:	66 95       	lsr	r22
    12d8:	66 95       	lsr	r22
    12da:	63 70       	andi	r22, 0x03	; 3
    12dc:	11 96       	adiw	r26, 0x01	; 1
    12de:	4c 91       	ld	r20, X
    12e0:	43 70       	andi	r20, 0x03	; 3
    12e2:	44 0f       	add	r20, r20
    12e4:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    12e6:	df 01       	movw	r26, r30
    12e8:	18 97       	sbiw	r26, 0x08	; 8
    12ea:	3c 91       	ld	r19, X
    12ec:	53 2f       	mov	r21, r19
    12ee:	52 95       	swap	r21
    12f0:	50 7f       	andi	r21, 0xF0	; 240
    12f2:	46 2b       	or	r20, r22
    12f4:	45 2b       	or	r20, r21
    12f6:	4d 87       	std	Y+13, r20	; 0x0d
    12f8:	63 2f       	mov	r22, r19
    12fa:	62 95       	swap	r22
    12fc:	6f 70       	andi	r22, 0x0F	; 15
    12fe:	11 96       	adiw	r26, 0x01	; 1
    1300:	4c 91       	ld	r20, X
    1302:	43 70       	andi	r20, 0x03	; 3
    1304:	42 95       	swap	r20
    1306:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    1308:	df 01       	movw	r26, r30
    130a:	16 97       	sbiw	r26, 0x06	; 6
    130c:	3c 91       	ld	r19, X
    130e:	53 2f       	mov	r21, r19
    1310:	52 95       	swap	r21
    1312:	55 0f       	add	r21, r21
    1314:	55 0f       	add	r21, r21
    1316:	50 7c       	andi	r21, 0xC0	; 192
    1318:	46 2b       	or	r20, r22
    131a:	45 2b       	or	r20, r21
    131c:	4e 87       	std	Y+14, r20	; 0x0e
    131e:	11 96       	adiw	r26, 0x01	; 1
    1320:	4c 91       	ld	r20, X
    1322:	42 95       	swap	r20
    1324:	44 0f       	add	r20, r20
    1326:	44 0f       	add	r20, r20
    1328:	40 7c       	andi	r20, 0xC0	; 192
    132a:	36 95       	lsr	r19
    132c:	36 95       	lsr	r19
    132e:	34 2b       	or	r19, r20
    1330:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    1332:	df 01       	movw	r26, r30
    1334:	14 97       	sbiw	r26, 0x04	; 4
    1336:	3c 91       	ld	r19, X
    1338:	38 8b       	std	Y+16, r19	; 0x10
    133a:	11 96       	adiw	r26, 0x01	; 1
    133c:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    133e:	df 01       	movw	r26, r30
    1340:	12 97       	sbiw	r26, 0x02	; 2
    1342:	3c 91       	ld	r19, X
    1344:	53 2f       	mov	r21, r19
    1346:	55 0f       	add	r21, r21
    1348:	55 0f       	add	r21, r21
    134a:	43 70       	andi	r20, 0x03	; 3
    134c:	45 2b       	or	r20, r21
    134e:	49 8b       	std	Y+17, r20	; 0x11
    1350:	32 95       	swap	r19
    1352:	36 95       	lsr	r19
    1354:	36 95       	lsr	r19
    1356:	33 70       	andi	r19, 0x03	; 3
    1358:	11 96       	adiw	r26, 0x01	; 1
    135a:	4c 91       	ld	r20, X
    135c:	43 70       	andi	r20, 0x03	; 3
    135e:	44 0f       	add	r20, r20
    1360:	44 0f       	add	r20, r20
    1362:	83 2b       	or	r24, r19
    1364:	84 2b       	or	r24, r20
    1366:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    1368:	80 91 e4 02 	lds	r24, 0x02E4
    136c:	38 2f       	mov	r19, r24
    136e:	32 95       	swap	r19
    1370:	33 0f       	add	r19, r19
    1372:	33 0f       	add	r19, r19
    1374:	30 7c       	andi	r19, 0xC0	; 192
    1376:	92 2b       	or	r25, r18
    1378:	93 2b       	or	r25, r19
    137a:	9b 8b       	std	Y+19, r25	; 0x13
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	92 95       	swap	r25
    1380:	99 0f       	add	r25, r25
    1382:	99 0f       	add	r25, r25
    1384:	90 7c       	andi	r25, 0xC0	; 192
    1386:	86 95       	lsr	r24
    1388:	86 95       	lsr	r24
    138a:	89 2b       	or	r24, r25
    138c:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    138e:	80 91 e6 02 	lds	r24, 0x02E6
    1392:	8d 8b       	std	Y+21, r24	; 0x15
    1394:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    1396:	80 91 e8 02 	lds	r24, 0x02E8
    139a:	28 2f       	mov	r18, r24
    139c:	22 0f       	add	r18, r18
    139e:	22 0f       	add	r18, r18
    13a0:	93 70       	andi	r25, 0x03	; 3
    13a2:	92 2b       	or	r25, r18
    13a4:	9e 8b       	std	Y+22, r25	; 0x16
    13a6:	38 2f       	mov	r19, r24
    13a8:	32 95       	swap	r19
    13aa:	36 95       	lsr	r19
    13ac:	36 95       	lsr	r19
    13ae:	33 70       	andi	r19, 0x03	; 3
    13b0:	97 81       	ldd	r25, Z+7	; 0x07
    13b2:	93 70       	andi	r25, 0x03	; 3
    13b4:	99 0f       	add	r25, r25
    13b6:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    13b8:	80 91 ea 02 	lds	r24, 0x02EA
    13bc:	28 2f       	mov	r18, r24
    13be:	22 95       	swap	r18
    13c0:	20 7f       	andi	r18, 0xF0	; 240
    13c2:	93 2b       	or	r25, r19
    13c4:	92 2b       	or	r25, r18
    13c6:	9f 8b       	std	Y+23, r25	; 0x17
    13c8:	38 2f       	mov	r19, r24
    13ca:	32 95       	swap	r19
    13cc:	3f 70       	andi	r19, 0x0F	; 15
    13ce:	91 85       	ldd	r25, Z+9	; 0x09
    13d0:	93 70       	andi	r25, 0x03	; 3
    13d2:	92 95       	swap	r25
    13d4:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    13d6:	80 91 ec 02 	lds	r24, 0x02EC
    13da:	28 2f       	mov	r18, r24
    13dc:	22 95       	swap	r18
    13de:	22 0f       	add	r18, r18
    13e0:	22 0f       	add	r18, r18
    13e2:	20 7c       	andi	r18, 0xC0	; 192
    13e4:	93 2b       	or	r25, r19
    13e6:	92 2b       	or	r25, r18
    13e8:	98 8f       	std	Y+24, r25	; 0x18
    13ea:	93 85       	ldd	r25, Z+11	; 0x0b
    13ec:	92 95       	swap	r25
    13ee:	99 0f       	add	r25, r25
    13f0:	99 0f       	add	r25, r25
    13f2:	90 7c       	andi	r25, 0xC0	; 192
    13f4:	86 95       	lsr	r24
    13f6:	86 95       	lsr	r24
    13f8:	89 2b       	or	r24, r25
    13fa:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    13fc:	80 91 ee 02 	lds	r24, 0x02EE
    1400:	8a 8f       	std	Y+26, r24	; 0x1a
    1402:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    1404:	80 91 f0 02 	lds	r24, 0x02F0
    1408:	28 2f       	mov	r18, r24
    140a:	22 0f       	add	r18, r18
    140c:	22 0f       	add	r18, r18
    140e:	93 70       	andi	r25, 0x03	; 3
    1410:	92 2b       	or	r25, r18
    1412:	9b 8f       	std	Y+27, r25	; 0x1b
    1414:	38 2f       	mov	r19, r24
    1416:	32 95       	swap	r19
    1418:	36 95       	lsr	r19
    141a:	36 95       	lsr	r19
    141c:	33 70       	andi	r19, 0x03	; 3
    141e:	97 85       	ldd	r25, Z+15	; 0x0f
    1420:	93 70       	andi	r25, 0x03	; 3
    1422:	99 0f       	add	r25, r25
    1424:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    1426:	80 91 f2 02 	lds	r24, 0x02F2
    142a:	28 2f       	mov	r18, r24
    142c:	22 95       	swap	r18
    142e:	20 7f       	andi	r18, 0xF0	; 240
    1430:	93 2b       	or	r25, r19
    1432:	92 2b       	or	r25, r18
    1434:	9c 8f       	std	Y+28, r25	; 0x1c
    1436:	38 2f       	mov	r19, r24
    1438:	32 95       	swap	r19
    143a:	3f 70       	andi	r19, 0x0F	; 15
    143c:	91 89       	ldd	r25, Z+17	; 0x11
    143e:	93 70       	andi	r25, 0x03	; 3
    1440:	92 95       	swap	r25
    1442:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    1444:	80 91 f4 02 	lds	r24, 0x02F4
    1448:	28 2f       	mov	r18, r24
    144a:	22 95       	swap	r18
    144c:	22 0f       	add	r18, r18
    144e:	22 0f       	add	r18, r18
    1450:	20 7c       	andi	r18, 0xC0	; 192
    1452:	93 2b       	or	r25, r19
    1454:	92 2b       	or	r25, r18
    1456:	9d 8f       	std	Y+29, r25	; 0x1d
    1458:	93 89       	ldd	r25, Z+19	; 0x13
    145a:	92 95       	swap	r25
    145c:	99 0f       	add	r25, r25
    145e:	99 0f       	add	r25, r25
    1460:	90 7c       	andi	r25, 0xC0	; 192
    1462:	86 95       	lsr	r24
    1464:	86 95       	lsr	r24
    1466:	89 2b       	or	r24, r25
    1468:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    146a:	80 91 f6 02 	lds	r24, 0x02F6
    146e:	8f 8f       	std	Y+31, r24	; 0x1f
    1470:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    1472:	80 91 f8 02 	lds	r24, 0x02F8
    1476:	28 2f       	mov	r18, r24
    1478:	22 0f       	add	r18, r18
    147a:	22 0f       	add	r18, r18
    147c:	93 70       	andi	r25, 0x03	; 3
    147e:	92 2b       	or	r25, r18
    1480:	98 a3       	lds	r25, 0x58
    1482:	38 2f       	mov	r19, r24
    1484:	32 95       	swap	r19
    1486:	36 95       	lsr	r19
    1488:	36 95       	lsr	r19
    148a:	33 70       	andi	r19, 0x03	; 3
    148c:	97 89       	ldd	r25, Z+23	; 0x17
    148e:	93 70       	andi	r25, 0x03	; 3
    1490:	99 0f       	add	r25, r25
    1492:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    1494:	80 91 fa 02 	lds	r24, 0x02FA
    1498:	28 2f       	mov	r18, r24
    149a:	22 95       	swap	r18
    149c:	20 7f       	andi	r18, 0xF0	; 240
    149e:	93 2b       	or	r25, r19
    14a0:	92 2b       	or	r25, r18
    14a2:	99 a3       	lds	r25, 0x59
    14a4:	38 2f       	mov	r19, r24
    14a6:	32 95       	swap	r19
    14a8:	3f 70       	andi	r19, 0x0F	; 15
    14aa:	91 8d       	ldd	r25, Z+25	; 0x19
    14ac:	93 70       	andi	r25, 0x03	; 3
    14ae:	92 95       	swap	r25
    14b0:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    14b2:	80 91 fc 02 	lds	r24, 0x02FC
    14b6:	28 2f       	mov	r18, r24
    14b8:	22 95       	swap	r18
    14ba:	22 0f       	add	r18, r18
    14bc:	22 0f       	add	r18, r18
    14be:	20 7c       	andi	r18, 0xC0	; 192
    14c0:	93 2b       	or	r25, r19
    14c2:	92 2b       	or	r25, r18
    14c4:	9a a3       	lds	r25, 0x5a
    14c6:	93 8d       	ldd	r25, Z+27	; 0x1b
    14c8:	92 95       	swap	r25
    14ca:	99 0f       	add	r25, r25
    14cc:	99 0f       	add	r25, r25
    14ce:	90 7c       	andi	r25, 0xC0	; 192
    14d0:	86 95       	lsr	r24
    14d2:	86 95       	lsr	r24
    14d4:	89 2b       	or	r24, r25
    14d6:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    14d8:	80 91 fe 02 	lds	r24, 0x02FE
    14dc:	8c a3       	lds	r24, 0x5c
    14de:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    14e0:	80 91 00 03 	lds	r24, 0x0300
    14e4:	28 2f       	mov	r18, r24
    14e6:	22 0f       	add	r18, r18
    14e8:	22 0f       	add	r18, r18
    14ea:	93 70       	andi	r25, 0x03	; 3
    14ec:	92 2b       	or	r25, r18
    14ee:	9d a3       	lds	r25, 0x5d
    14f0:	82 95       	swap	r24
    14f2:	86 95       	lsr	r24
    14f4:	86 95       	lsr	r24
    14f6:	83 70       	andi	r24, 0x03	; 3
    14f8:	2e a1       	lds	r18, 0x4e
    14fa:	20 7f       	andi	r18, 0xF0	; 240
    14fc:	97 8d       	ldd	r25, Z+31	; 0x1f
    14fe:	93 70       	andi	r25, 0x03	; 3
    1500:	99 0f       	add	r25, r25
    1502:	99 0f       	add	r25, r25
    1504:	82 2b       	or	r24, r18
    1506:	89 2b       	or	r24, r25
    1508:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    150a:	80 91 02 03 	lds	r24, 0x0302
    150e:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    1510:	80 91 03 03 	lds	r24, 0x0303
    1514:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    1516:	80 91 04 03 	lds	r24, 0x0304
    151a:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    151c:	80 91 05 03 	lds	r24, 0x0305
    1520:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    1522:	80 91 06 03 	lds	r24, 0x0306
    1526:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    1528:	0e 94 9c 08 	call	0x1138	; 0x1138 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    152c:	80 91 84 03 	lds	r24, 0x0384
    1530:	8f 77       	andi	r24, 0x7F	; 127
    1532:	80 93 84 03 	sts	0x0384, r24
	current_patch.mode = MEMORY;
    1536:	10 92 0b 03 	sts	0x030B, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    153a:	21 2f       	mov	r18, r17
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	8b e2       	ldi	r24, 0x2B	; 43
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	28 9f       	mul	r18, r24
    1544:	b0 01       	movw	r22, r0
    1546:	29 9f       	mul	r18, r25
    1548:	70 0d       	add	r23, r0
    154a:	38 9f       	mul	r19, r24
    154c:	70 0d       	add	r23, r0
    154e:	11 24       	eor	r1, r1
    1550:	60 50       	subi	r22, 0x00	; 0
    1552:	70 40       	sbci	r23, 0x00	; 0
    1554:	ce 01       	movw	r24, r28
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	4b e2       	ldi	r20, 0x2B	; 43
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <__eeupd_block_m6450a>
}	
    1560:	ab 96       	adiw	r28, 0x2b	; 43
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	08 95       	ret

00001574 <load_patch>:
	
void load_patch(uint8_t patch_number) {
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	c3 54       	subi	r28, 0x43	; 67
    1580:	d0 40       	sbci	r29, 0x00	; 0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	2b e2       	ldi	r18, 0x2B	; 43
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	82 9f       	mul	r24, r18
    1594:	b0 01       	movw	r22, r0
    1596:	83 9f       	mul	r24, r19
    1598:	70 0d       	add	r23, r0
    159a:	92 9f       	mul	r25, r18
    159c:	70 0d       	add	r23, r0
    159e:	11 24       	eor	r1, r1
    15a0:	60 50       	subi	r22, 0x00	; 0
    15a2:	70 40       	sbci	r23, 0x00	; 0
    15a4:	ce 01       	movw	r24, r28
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	4b e2       	ldi	r20, 0x2B	; 43
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    15b0:	e2 ee       	ldi	r30, 0xE2	; 226
    15b2:	f2 e0       	ldi	r31, 0x02	; 2
    15b4:	8a 89       	ldd	r24, Y+18	; 0x12
    15b6:	28 2f       	mov	r18, r24
    15b8:	22 95       	swap	r18
    15ba:	2f 70       	andi	r18, 0x0F	; 15
    15bc:	9b 89       	ldd	r25, Y+19	; 0x13
    15be:	39 2f       	mov	r19, r25
    15c0:	32 95       	swap	r19
    15c2:	30 7f       	andi	r19, 0xF0	; 240
    15c4:	32 2b       	or	r19, r18
    15c6:	29 2f       	mov	r18, r25
    15c8:	22 95       	swap	r18
    15ca:	2f 70       	andi	r18, 0x0F	; 15
    15cc:	23 70       	andi	r18, 0x03	; 3
    15ce:	30 93 e2 02 	sts	0x02E2, r19
    15d2:	20 93 e3 02 	sts	0x02E3, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    15d6:	df 01       	movw	r26, r30
    15d8:	5a 97       	sbiw	r26, 0x1a	; 26
    15da:	4a 81       	ldd	r20, Y+2	; 0x02
    15dc:	46 95       	lsr	r20
    15de:	46 95       	lsr	r20
    15e0:	2b 81       	ldd	r18, Y+3	; 0x03
    15e2:	32 2f       	mov	r19, r18
    15e4:	32 95       	swap	r19
    15e6:	33 0f       	add	r19, r19
    15e8:	33 0f       	add	r19, r19
    15ea:	30 7c       	andi	r19, 0xC0	; 192
    15ec:	43 2b       	or	r20, r19
    15ee:	32 2f       	mov	r19, r18
    15f0:	36 95       	lsr	r19
    15f2:	36 95       	lsr	r19
    15f4:	33 70       	andi	r19, 0x03	; 3
    15f6:	4c 93       	st	X, r20
    15f8:	11 96       	adiw	r26, 0x01	; 1
    15fa:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    15fc:	df 01       	movw	r26, r30
    15fe:	58 97       	sbiw	r26, 0x18	; 24
    1600:	32 2f       	mov	r19, r18
    1602:	32 95       	swap	r19
    1604:	3f 70       	andi	r19, 0x0F	; 15
    1606:	2c 81       	ldd	r18, Y+4	; 0x04
    1608:	42 2f       	mov	r20, r18
    160a:	42 95       	swap	r20
    160c:	40 7f       	andi	r20, 0xF0	; 240
    160e:	43 2b       	or	r20, r19
    1610:	32 2f       	mov	r19, r18
    1612:	32 95       	swap	r19
    1614:	3f 70       	andi	r19, 0x0F	; 15
    1616:	33 70       	andi	r19, 0x03	; 3
    1618:	4c 93       	st	X, r20
    161a:	11 96       	adiw	r26, 0x01	; 1
    161c:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    161e:	df 01       	movw	r26, r30
    1620:	56 97       	sbiw	r26, 0x16	; 22
    1622:	22 95       	swap	r18
    1624:	26 95       	lsr	r18
    1626:	26 95       	lsr	r18
    1628:	23 70       	andi	r18, 0x03	; 3
    162a:	3d 81       	ldd	r19, Y+5	; 0x05
    162c:	43 2f       	mov	r20, r19
    162e:	44 0f       	add	r20, r20
    1630:	44 0f       	add	r20, r20
    1632:	24 2b       	or	r18, r20
    1634:	32 95       	swap	r19
    1636:	36 95       	lsr	r19
    1638:	36 95       	lsr	r19
    163a:	33 70       	andi	r19, 0x03	; 3
    163c:	2c 93       	st	X, r18
    163e:	11 96       	adiw	r26, 0x01	; 1
    1640:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    1642:	df 01       	movw	r26, r30
    1644:	54 97       	sbiw	r26, 0x14	; 20
    1646:	4e 81       	ldd	r20, Y+6	; 0x06
    1648:	2f 81       	ldd	r18, Y+7	; 0x07
    164a:	32 2f       	mov	r19, r18
    164c:	33 70       	andi	r19, 0x03	; 3
    164e:	4c 93       	st	X, r20
    1650:	11 96       	adiw	r26, 0x01	; 1
    1652:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    1654:	df 01       	movw	r26, r30
    1656:	52 97       	sbiw	r26, 0x12	; 18
    1658:	32 2f       	mov	r19, r18
    165a:	36 95       	lsr	r19
    165c:	36 95       	lsr	r19
    165e:	28 85       	ldd	r18, Y+8	; 0x08
    1660:	42 2f       	mov	r20, r18
    1662:	42 95       	swap	r20
    1664:	44 0f       	add	r20, r20
    1666:	44 0f       	add	r20, r20
    1668:	40 7c       	andi	r20, 0xC0	; 192
    166a:	43 2b       	or	r20, r19
    166c:	32 2f       	mov	r19, r18
    166e:	36 95       	lsr	r19
    1670:	36 95       	lsr	r19
    1672:	33 70       	andi	r19, 0x03	; 3
    1674:	4c 93       	st	X, r20
    1676:	11 96       	adiw	r26, 0x01	; 1
    1678:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    167a:	df 01       	movw	r26, r30
    167c:	50 97       	sbiw	r26, 0x10	; 16
    167e:	32 2f       	mov	r19, r18
    1680:	32 95       	swap	r19
    1682:	3f 70       	andi	r19, 0x0F	; 15
    1684:	29 85       	ldd	r18, Y+9	; 0x09
    1686:	42 2f       	mov	r20, r18
    1688:	42 95       	swap	r20
    168a:	40 7f       	andi	r20, 0xF0	; 240
    168c:	43 2b       	or	r20, r19
    168e:	32 2f       	mov	r19, r18
    1690:	32 95       	swap	r19
    1692:	3f 70       	andi	r19, 0x0F	; 15
    1694:	33 70       	andi	r19, 0x03	; 3
    1696:	4c 93       	st	X, r20
    1698:	11 96       	adiw	r26, 0x01	; 1
    169a:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    169c:	df 01       	movw	r26, r30
    169e:	1e 97       	sbiw	r26, 0x0e	; 14
    16a0:	22 95       	swap	r18
    16a2:	26 95       	lsr	r18
    16a4:	26 95       	lsr	r18
    16a6:	23 70       	andi	r18, 0x03	; 3
    16a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16aa:	43 2f       	mov	r20, r19
    16ac:	44 0f       	add	r20, r20
    16ae:	44 0f       	add	r20, r20
    16b0:	24 2b       	or	r18, r20
    16b2:	32 95       	swap	r19
    16b4:	36 95       	lsr	r19
    16b6:	36 95       	lsr	r19
    16b8:	33 70       	andi	r19, 0x03	; 3
    16ba:	2c 93       	st	X, r18
    16bc:	11 96       	adiw	r26, 0x01	; 1
    16be:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    16c0:	df 01       	movw	r26, r30
    16c2:	1c 97       	sbiw	r26, 0x0c	; 12
    16c4:	4b 85       	ldd	r20, Y+11	; 0x0b
    16c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    16c8:	32 2f       	mov	r19, r18
    16ca:	33 70       	andi	r19, 0x03	; 3
    16cc:	4c 93       	st	X, r20
    16ce:	11 96       	adiw	r26, 0x01	; 1
    16d0:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    16d2:	df 01       	movw	r26, r30
    16d4:	1a 97       	sbiw	r26, 0x0a	; 10
    16d6:	32 2f       	mov	r19, r18
    16d8:	36 95       	lsr	r19
    16da:	36 95       	lsr	r19
    16dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    16de:	42 2f       	mov	r20, r18
    16e0:	42 95       	swap	r20
    16e2:	44 0f       	add	r20, r20
    16e4:	44 0f       	add	r20, r20
    16e6:	40 7c       	andi	r20, 0xC0	; 192
    16e8:	43 2b       	or	r20, r19
    16ea:	32 2f       	mov	r19, r18
    16ec:	36 95       	lsr	r19
    16ee:	36 95       	lsr	r19
    16f0:	33 70       	andi	r19, 0x03	; 3
    16f2:	4c 93       	st	X, r20
    16f4:	11 96       	adiw	r26, 0x01	; 1
    16f6:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    16f8:	df 01       	movw	r26, r30
    16fa:	18 97       	sbiw	r26, 0x08	; 8
    16fc:	32 2f       	mov	r19, r18
    16fe:	32 95       	swap	r19
    1700:	3f 70       	andi	r19, 0x0F	; 15
    1702:	2e 85       	ldd	r18, Y+14	; 0x0e
    1704:	42 2f       	mov	r20, r18
    1706:	42 95       	swap	r20
    1708:	40 7f       	andi	r20, 0xF0	; 240
    170a:	43 2b       	or	r20, r19
    170c:	32 2f       	mov	r19, r18
    170e:	32 95       	swap	r19
    1710:	3f 70       	andi	r19, 0x0F	; 15
    1712:	33 70       	andi	r19, 0x03	; 3
    1714:	4c 93       	st	X, r20
    1716:	11 96       	adiw	r26, 0x01	; 1
    1718:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    171a:	df 01       	movw	r26, r30
    171c:	16 97       	sbiw	r26, 0x06	; 6
    171e:	22 95       	swap	r18
    1720:	26 95       	lsr	r18
    1722:	26 95       	lsr	r18
    1724:	23 70       	andi	r18, 0x03	; 3
    1726:	3f 85       	ldd	r19, Y+15	; 0x0f
    1728:	43 2f       	mov	r20, r19
    172a:	44 0f       	add	r20, r20
    172c:	44 0f       	add	r20, r20
    172e:	24 2b       	or	r18, r20
    1730:	32 95       	swap	r19
    1732:	36 95       	lsr	r19
    1734:	36 95       	lsr	r19
    1736:	33 70       	andi	r19, 0x03	; 3
    1738:	2c 93       	st	X, r18
    173a:	11 96       	adiw	r26, 0x01	; 1
    173c:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    173e:	df 01       	movw	r26, r30
    1740:	14 97       	sbiw	r26, 0x04	; 4
    1742:	48 89       	ldd	r20, Y+16	; 0x10
    1744:	29 89       	ldd	r18, Y+17	; 0x11
    1746:	32 2f       	mov	r19, r18
    1748:	33 70       	andi	r19, 0x03	; 3
    174a:	4c 93       	st	X, r20
    174c:	11 96       	adiw	r26, 0x01	; 1
    174e:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    1750:	df 01       	movw	r26, r30
    1752:	12 97       	sbiw	r26, 0x02	; 2
    1754:	26 95       	lsr	r18
    1756:	26 95       	lsr	r18
    1758:	38 2f       	mov	r19, r24
    175a:	32 95       	swap	r19
    175c:	33 0f       	add	r19, r19
    175e:	33 0f       	add	r19, r19
    1760:	30 7c       	andi	r19, 0xC0	; 192
    1762:	23 2b       	or	r18, r19
    1764:	86 95       	lsr	r24
    1766:	86 95       	lsr	r24
    1768:	83 70       	andi	r24, 0x03	; 3
    176a:	2c 93       	st	X, r18
    176c:	11 96       	adiw	r26, 0x01	; 1
    176e:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    1770:	92 95       	swap	r25
    1772:	96 95       	lsr	r25
    1774:	96 95       	lsr	r25
    1776:	93 70       	andi	r25, 0x03	; 3
    1778:	8c 89       	ldd	r24, Y+20	; 0x14
    177a:	28 2f       	mov	r18, r24
    177c:	22 0f       	add	r18, r18
    177e:	22 0f       	add	r18, r18
    1780:	92 2b       	or	r25, r18
    1782:	82 95       	swap	r24
    1784:	86 95       	lsr	r24
    1786:	86 95       	lsr	r24
    1788:	83 70       	andi	r24, 0x03	; 3
    178a:	90 93 e4 02 	sts	0x02E4, r25
    178e:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    1790:	2d 89       	ldd	r18, Y+21	; 0x15
    1792:	8e 89       	ldd	r24, Y+22	; 0x16
    1794:	98 2f       	mov	r25, r24
    1796:	93 70       	andi	r25, 0x03	; 3
    1798:	20 93 e6 02 	sts	0x02E6, r18
    179c:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    179e:	98 2f       	mov	r25, r24
    17a0:	96 95       	lsr	r25
    17a2:	96 95       	lsr	r25
    17a4:	8f 89       	ldd	r24, Y+23	; 0x17
    17a6:	28 2f       	mov	r18, r24
    17a8:	22 95       	swap	r18
    17aa:	22 0f       	add	r18, r18
    17ac:	22 0f       	add	r18, r18
    17ae:	20 7c       	andi	r18, 0xC0	; 192
    17b0:	29 2b       	or	r18, r25
    17b2:	98 2f       	mov	r25, r24
    17b4:	96 95       	lsr	r25
    17b6:	96 95       	lsr	r25
    17b8:	93 70       	andi	r25, 0x03	; 3
    17ba:	20 93 e8 02 	sts	0x02E8, r18
    17be:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    17c0:	98 2f       	mov	r25, r24
    17c2:	92 95       	swap	r25
    17c4:	9f 70       	andi	r25, 0x0F	; 15
    17c6:	88 8d       	ldd	r24, Y+24	; 0x18
    17c8:	28 2f       	mov	r18, r24
    17ca:	22 95       	swap	r18
    17cc:	20 7f       	andi	r18, 0xF0	; 240
    17ce:	29 2b       	or	r18, r25
    17d0:	98 2f       	mov	r25, r24
    17d2:	92 95       	swap	r25
    17d4:	9f 70       	andi	r25, 0x0F	; 15
    17d6:	93 70       	andi	r25, 0x03	; 3
    17d8:	20 93 ea 02 	sts	0x02EA, r18
    17dc:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    17de:	82 95       	swap	r24
    17e0:	86 95       	lsr	r24
    17e2:	86 95       	lsr	r24
    17e4:	83 70       	andi	r24, 0x03	; 3
    17e6:	99 8d       	ldd	r25, Y+25	; 0x19
    17e8:	29 2f       	mov	r18, r25
    17ea:	22 0f       	add	r18, r18
    17ec:	22 0f       	add	r18, r18
    17ee:	82 2b       	or	r24, r18
    17f0:	92 95       	swap	r25
    17f2:	96 95       	lsr	r25
    17f4:	96 95       	lsr	r25
    17f6:	93 70       	andi	r25, 0x03	; 3
    17f8:	80 93 ec 02 	sts	0x02EC, r24
    17fc:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    17fe:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1800:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1802:	98 2f       	mov	r25, r24
    1804:	93 70       	andi	r25, 0x03	; 3
    1806:	20 93 ee 02 	sts	0x02EE, r18
    180a:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    180c:	98 2f       	mov	r25, r24
    180e:	96 95       	lsr	r25
    1810:	96 95       	lsr	r25
    1812:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1814:	28 2f       	mov	r18, r24
    1816:	22 95       	swap	r18
    1818:	22 0f       	add	r18, r18
    181a:	22 0f       	add	r18, r18
    181c:	20 7c       	andi	r18, 0xC0	; 192
    181e:	29 2b       	or	r18, r25
    1820:	98 2f       	mov	r25, r24
    1822:	96 95       	lsr	r25
    1824:	96 95       	lsr	r25
    1826:	93 70       	andi	r25, 0x03	; 3
    1828:	20 93 f0 02 	sts	0x02F0, r18
    182c:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    182e:	98 2f       	mov	r25, r24
    1830:	92 95       	swap	r25
    1832:	9f 70       	andi	r25, 0x0F	; 15
    1834:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1836:	28 2f       	mov	r18, r24
    1838:	22 95       	swap	r18
    183a:	20 7f       	andi	r18, 0xF0	; 240
    183c:	29 2b       	or	r18, r25
    183e:	98 2f       	mov	r25, r24
    1840:	92 95       	swap	r25
    1842:	9f 70       	andi	r25, 0x0F	; 15
    1844:	93 70       	andi	r25, 0x03	; 3
    1846:	20 93 f2 02 	sts	0x02F2, r18
    184a:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    184c:	82 95       	swap	r24
    184e:	86 95       	lsr	r24
    1850:	86 95       	lsr	r24
    1852:	83 70       	andi	r24, 0x03	; 3
    1854:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1856:	29 2f       	mov	r18, r25
    1858:	22 0f       	add	r18, r18
    185a:	22 0f       	add	r18, r18
    185c:	82 2b       	or	r24, r18
    185e:	92 95       	swap	r25
    1860:	96 95       	lsr	r25
    1862:	96 95       	lsr	r25
    1864:	93 70       	andi	r25, 0x03	; 3
    1866:	80 93 f4 02 	sts	0x02F4, r24
    186a:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    186c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    186e:	88 a1       	lds	r24, 0x48
    1870:	98 2f       	mov	r25, r24
    1872:	93 70       	andi	r25, 0x03	; 3
    1874:	20 93 f6 02 	sts	0x02F6, r18
    1878:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    187a:	98 2f       	mov	r25, r24
    187c:	96 95       	lsr	r25
    187e:	96 95       	lsr	r25
    1880:	89 a1       	lds	r24, 0x49
    1882:	28 2f       	mov	r18, r24
    1884:	22 95       	swap	r18
    1886:	22 0f       	add	r18, r18
    1888:	22 0f       	add	r18, r18
    188a:	20 7c       	andi	r18, 0xC0	; 192
    188c:	29 2b       	or	r18, r25
    188e:	98 2f       	mov	r25, r24
    1890:	96 95       	lsr	r25
    1892:	96 95       	lsr	r25
    1894:	93 70       	andi	r25, 0x03	; 3
    1896:	20 93 f8 02 	sts	0x02F8, r18
    189a:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    189c:	98 2f       	mov	r25, r24
    189e:	92 95       	swap	r25
    18a0:	9f 70       	andi	r25, 0x0F	; 15
    18a2:	8a a1       	lds	r24, 0x4a
    18a4:	28 2f       	mov	r18, r24
    18a6:	22 95       	swap	r18
    18a8:	20 7f       	andi	r18, 0xF0	; 240
    18aa:	29 2b       	or	r18, r25
    18ac:	98 2f       	mov	r25, r24
    18ae:	92 95       	swap	r25
    18b0:	9f 70       	andi	r25, 0x0F	; 15
    18b2:	93 70       	andi	r25, 0x03	; 3
    18b4:	20 93 fa 02 	sts	0x02FA, r18
    18b8:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    18ba:	82 95       	swap	r24
    18bc:	86 95       	lsr	r24
    18be:	86 95       	lsr	r24
    18c0:	83 70       	andi	r24, 0x03	; 3
    18c2:	9b a1       	lds	r25, 0x4b
    18c4:	29 2f       	mov	r18, r25
    18c6:	22 0f       	add	r18, r18
    18c8:	22 0f       	add	r18, r18
    18ca:	82 2b       	or	r24, r18
    18cc:	92 95       	swap	r25
    18ce:	96 95       	lsr	r25
    18d0:	96 95       	lsr	r25
    18d2:	93 70       	andi	r25, 0x03	; 3
    18d4:	80 93 fc 02 	sts	0x02FC, r24
    18d8:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    18da:	2c a1       	lds	r18, 0x4c
    18dc:	8d a1       	lds	r24, 0x4d
    18de:	98 2f       	mov	r25, r24
    18e0:	93 70       	andi	r25, 0x03	; 3
    18e2:	20 93 fe 02 	sts	0x02FE, r18
    18e6:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    18e8:	98 2f       	mov	r25, r24
    18ea:	96 95       	lsr	r25
    18ec:	96 95       	lsr	r25
    18ee:	8e a1       	lds	r24, 0x4e
    18f0:	28 2f       	mov	r18, r24
    18f2:	22 95       	swap	r18
    18f4:	22 0f       	add	r18, r18
    18f6:	22 0f       	add	r18, r18
    18f8:	20 7c       	andi	r18, 0xC0	; 192
    18fa:	29 2b       	or	r18, r25
    18fc:	86 95       	lsr	r24
    18fe:	86 95       	lsr	r24
    1900:	98 2f       	mov	r25, r24
    1902:	93 70       	andi	r25, 0x03	; 3
    1904:	20 93 00 03 	sts	0x0300, r18
    1908:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    190a:	7f a1       	lds	r23, 0x4f
    190c:	70 93 02 03 	sts	0x0302, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    1910:	68 a5       	lds	r22, 0x68
    1912:	60 93 03 03 	sts	0x0303, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    1916:	89 a5       	lds	r24, 0x69
    1918:	80 93 04 03 	sts	0x0304, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    191c:	9a a5       	lds	r25, 0x6a
    191e:	90 93 05 03 	sts	0x0305, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    1922:	1b a5       	lds	r17, 0x6b
    1924:	10 93 06 03 	sts	0x0306, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1928:	de 01       	movw	r26, r28
    192a:	9c 96       	adiw	r26, 0x2c	; 44
    192c:	ef ef       	ldi	r30, 0xFF	; 255
    192e:	f1 e0       	ldi	r31, 0x01	; 1
    1930:	28 e0       	ldi	r18, 0x08	; 8
    1932:	01 90       	ld	r0, Z+
    1934:	0d 92       	st	X+, r0
    1936:	21 50       	subi	r18, 0x01	; 1
    1938:	e1 f7       	brne	.-8      	; 0x1932 <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    193a:	e9 2f       	mov	r30, r25
    193c:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	9f 01       	movw	r18, r30
    1942:	22 0f       	add	r18, r18
    1944:	33 1f       	adc	r19, r19
    1946:	22 0f       	add	r18, r18
    1948:	33 1f       	adc	r19, r19
    194a:	a9 01       	movw	r20, r18
    194c:	44 0f       	add	r20, r20
    194e:	55 1f       	adc	r21, r21
    1950:	44 0f       	add	r20, r20
    1952:	55 1f       	adc	r21, r21
    1954:	44 0f       	add	r20, r20
    1956:	55 1f       	adc	r21, r21
    1958:	42 1b       	sub	r20, r18
    195a:	53 0b       	sbc	r21, r19
    195c:	4e 0f       	add	r20, r30
    195e:	5f 1f       	adc	r21, r31
    1960:	55 95       	asr	r21
    1962:	47 95       	ror	r20
    1964:	55 95       	asr	r21
    1966:	47 95       	ror	r20
    1968:	55 95       	asr	r21
    196a:	47 95       	ror	r20
    196c:	55 95       	asr	r21
    196e:	47 95       	ror	r20
    1970:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    1972:	fe 01       	movw	r30, r28
    1974:	e4 0f       	add	r30, r20
    1976:	f1 1d       	adc	r31, r1
    1978:	24 a5       	lds	r18, 0x64
    197a:	20 93 0c 03 	sts	0x030C, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    197e:	de 01       	movw	r26, r28
    1980:	d4 96       	adiw	r26, 0x34	; 52
    1982:	e7 e0       	ldi	r30, 0x07	; 7
    1984:	f2 e0       	ldi	r31, 0x02	; 2
    1986:	28 e0       	ldi	r18, 0x08	; 8
    1988:	01 90       	ld	r0, Z+
    198a:	0d 92       	st	X+, r0
    198c:	21 50       	subi	r18, 0x01	; 1
    198e:	e1 f7       	brne	.-8      	; 0x1988 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    1990:	29 2f       	mov	r18, r25
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	20 7e       	andi	r18, 0xE0	; 224
    1996:	30 70       	andi	r19, 0x00	; 0
    1998:	35 95       	asr	r19
    199a:	27 95       	ror	r18
    199c:	35 95       	asr	r19
    199e:	27 95       	ror	r18
    19a0:	35 95       	asr	r19
    19a2:	27 95       	ror	r18
    19a4:	83 70       	andi	r24, 0x03	; 3
    19a6:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    19a8:	42 2f       	mov	r20, r18
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	ca 01       	movw	r24, r20
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	9c 01       	movw	r18, r24
    19b8:	22 0f       	add	r18, r18
    19ba:	33 1f       	adc	r19, r19
    19bc:	22 0f       	add	r18, r18
    19be:	33 1f       	adc	r19, r19
    19c0:	22 0f       	add	r18, r18
    19c2:	33 1f       	adc	r19, r19
    19c4:	28 1b       	sub	r18, r24
    19c6:	39 0b       	sbc	r19, r25
    19c8:	42 0f       	add	r20, r18
    19ca:	53 1f       	adc	r21, r19
    19cc:	ca 01       	movw	r24, r20
    19ce:	95 95       	asr	r25
    19d0:	87 95       	ror	r24
    19d2:	95 95       	asr	r25
    19d4:	87 95       	ror	r24
    19d6:	95 95       	asr	r25
    19d8:	87 95       	ror	r24
    19da:	95 95       	asr	r25
    19dc:	87 95       	ror	r24
    19de:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    19e0:	fe 01       	movw	r30, r28
    19e2:	e8 0f       	add	r30, r24
    19e4:	f1 1d       	adc	r31, r1
    19e6:	84 a9       	sts	0x44, r24
    19e8:	80 93 0d 03 	sts	0x030D, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    19ec:	de 01       	movw	r26, r28
    19ee:	dc 96       	adiw	r26, 0x3c	; 60
    19f0:	ef e0       	ldi	r30, 0x0F	; 15
    19f2:	f2 e0       	ldi	r31, 0x02	; 2
    19f4:	88 e0       	ldi	r24, 0x08	; 8
    19f6:	01 90       	ld	r0, Z+
    19f8:	0d 92       	st	X+, r0
    19fa:	81 50       	subi	r24, 0x01	; 1
    19fc:	e1 f7       	brne	.-8      	; 0x19f6 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    19fe:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    1a00:	46 2f       	mov	r20, r22
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	ca 01       	movw	r24, r20
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	9c 01       	movw	r18, r24
    1a10:	22 0f       	add	r18, r18
    1a12:	33 1f       	adc	r19, r19
    1a14:	22 0f       	add	r18, r18
    1a16:	33 1f       	adc	r19, r19
    1a18:	22 0f       	add	r18, r18
    1a1a:	33 1f       	adc	r19, r19
    1a1c:	28 1b       	sub	r18, r24
    1a1e:	39 0b       	sbc	r19, r25
    1a20:	42 0f       	add	r20, r18
    1a22:	53 1f       	adc	r21, r19
    1a24:	ca 01       	movw	r24, r20
    1a26:	95 95       	asr	r25
    1a28:	87 95       	ror	r24
    1a2a:	95 95       	asr	r25
    1a2c:	87 95       	ror	r24
    1a2e:	95 95       	asr	r25
    1a30:	87 95       	ror	r24
    1a32:	95 95       	asr	r25
    1a34:	87 95       	ror	r24
    1a36:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e8 0f       	add	r30, r24
    1a3c:	f1 1d       	adc	r31, r1
    1a3e:	84 ad       	sts	0x64, r24
    1a40:	80 93 0e 03 	sts	0x030E, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1a44:	21 2f       	mov	r18, r17
    1a46:	26 95       	lsr	r18
    1a48:	27 95       	ror	r18
    1a4a:	22 27       	eor	r18, r18
    1a4c:	27 95       	ror	r18
    1a4e:	81 2f       	mov	r24, r17
    1a50:	81 70       	andi	r24, 0x01	; 1
    1a52:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    1a54:	81 2f       	mov	r24, r17
    1a56:	86 95       	lsr	r24
    1a58:	86 95       	lsr	r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	81 70       	andi	r24, 0x01	; 1
    1a5e:	90 70       	andi	r25, 0x00	; 0
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1a68:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1a6a:	81 2f       	mov	r24, r17
    1a6c:	86 95       	lsr	r24
    1a6e:	86 95       	lsr	r24
    1a70:	86 95       	lsr	r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	81 70       	andi	r24, 0x01	; 1
    1a76:	90 70       	andi	r25, 0x00	; 0
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1a7c:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1a7e:	81 2f       	mov	r24, r17
    1a80:	82 95       	swap	r24
    1a82:	8f 70       	andi	r24, 0x0F	; 15
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	81 70       	andi	r24, 0x01	; 1
    1a88:	90 70       	andi	r25, 0x00	; 0
    1a8a:	82 95       	swap	r24
    1a8c:	92 95       	swap	r25
    1a8e:	90 7f       	andi	r25, 0xF0	; 240
    1a90:	98 27       	eor	r25, r24
    1a92:	80 7f       	andi	r24, 0xF0	; 240
    1a94:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1a96:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    1a98:	81 2f       	mov	r24, r17
    1a9a:	82 95       	swap	r24
    1a9c:	86 95       	lsr	r24
    1a9e:	87 70       	andi	r24, 0x07	; 7
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	81 70       	andi	r24, 0x01	; 1
    1aa4:	90 70       	andi	r25, 0x00	; 0
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	82 95       	swap	r24
    1aac:	92 95       	swap	r25
    1aae:	90 7f       	andi	r25, 0xF0	; 240
    1ab0:	98 27       	eor	r25, r24
    1ab2:	80 7f       	andi	r24, 0xF0	; 240
    1ab4:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1ab6:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    1ab8:	81 2f       	mov	r24, r17
    1aba:	82 95       	swap	r24
    1abc:	86 95       	lsr	r24
    1abe:	86 95       	lsr	r24
    1ac0:	83 70       	andi	r24, 0x03	; 3
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	81 70       	andi	r24, 0x01	; 1
    1ac6:	90 70       	andi	r25, 0x00	; 0
    1ac8:	00 24       	eor	r0, r0
    1aca:	96 95       	lsr	r25
    1acc:	87 95       	ror	r24
    1ace:	07 94       	ror	r0
    1ad0:	96 95       	lsr	r25
    1ad2:	87 95       	ror	r24
    1ad4:	07 94       	ror	r0
    1ad6:	98 2f       	mov	r25, r24
    1ad8:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1ada:	82 2b       	or	r24, r18
    1adc:	80 93 82 03 	sts	0x0382, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    1ae0:	87 2f       	mov	r24, r23
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	81 70       	andi	r24, 0x01	; 1
    1ae6:	90 70       	andi	r25, 0x00	; 0
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    1af4:	90 91 84 03 	lds	r25, 0x0384
    1af8:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1afa:	89 2b       	or	r24, r25
    1afc:	11 1f       	adc	r17, r17
    1afe:	11 27       	eor	r17, r17
    1b00:	11 1f       	adc	r17, r17
    1b02:	11 0f       	add	r17, r17
    1b04:	11 0f       	add	r17, r17
    1b06:	81 2b       	or	r24, r17
    1b08:	80 93 84 03 	sts	0x0384, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1b0c:	0e 94 9c 08 	call	0x1138	; 0x1138 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    1b10:	80 91 84 03 	lds	r24, 0x0384
    1b14:	8f 77       	andi	r24, 0x7F	; 127
    1b16:	80 93 84 03 	sts	0x0384, r24
	
	current_patch.mode = MEMORY;
    1b1a:	10 92 0b 03 	sts	0x030B, r1
	
}
    1b1e:	cd 5b       	subi	r28, 0xBD	; 189
    1b20:	df 4f       	sbci	r29, 0xFF	; 255
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	08 95       	ret

00001b34 <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    1b34:	90 91 0c 03 	lds	r25, 0x030C
	if (vco == VCO2) n = octave_index.vco2;
    1b38:	60 3f       	cpi	r22, 0xF0	; 240
    1b3a:	11 f4       	brne	.+4      	; 0x1b40 <transpose_note+0xc>
    1b3c:	90 91 0d 03 	lds	r25, 0x030D

	note = (n*12) + note; //calculate MIDI note after octave addition
    1b40:	29 2f       	mov	r18, r25
    1b42:	22 0f       	add	r18, r18
    1b44:	92 0f       	add	r25, r18
    1b46:	99 0f       	add	r25, r25
    1b48:	99 0f       	add	r25, r25
    1b4a:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1b4c:	89 38       	cpi	r24, 0x89	; 137
    1b4e:	08 f0       	brcs	.+2      	; 0x1b52 <transpose_note+0x1e>
    1b50:	88 e8       	ldi	r24, 0x88	; 136
	
}
    1b52:	08 95       	ret

00001b54 <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    1b54:	80 91 82 03 	lds	r24, 0x0382
    1b58:	98 2f       	mov	r25, r24
    1b5a:	96 95       	lsr	r25
    1b5c:	96 95       	lsr	r25
    1b5e:	96 95       	lsr	r25
    1b60:	90 ff       	sbrs	r25, 0
    1b62:	0e c0       	rjmp	.+28     	; 0x1b80 <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    1b64:	90 91 0c 03 	lds	r25, 0x030C
    1b68:	9f 5f       	subi	r25, 0xFF	; 255
    1b6a:	90 93 0c 03 	sts	0x030C, r25
    1b6e:	95 30       	cpi	r25, 0x05	; 5
    1b70:	19 f4       	brne	.+6      	; 0x1b78 <update_octave_range+0x24>
    1b72:	94 e0       	ldi	r25, 0x04	; 4
    1b74:	90 93 0c 03 	sts	0x030C, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1b78:	98 e0       	ldi	r25, 0x08	; 8
    1b7a:	89 27       	eor	r24, r25
    1b7c:	80 93 82 03 	sts	0x0382, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    1b80:	80 91 83 03 	lds	r24, 0x0383
    1b84:	98 2f       	mov	r25, r24
    1b86:	96 95       	lsr	r25
    1b88:	96 95       	lsr	r25
    1b8a:	96 95       	lsr	r25
    1b8c:	90 ff       	sbrs	r25, 0
    1b8e:	0b c0       	rjmp	.+22     	; 0x1ba6 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    1b90:	90 91 0c 03 	lds	r25, 0x030C
    1b94:	99 23       	and	r25, r25
    1b96:	19 f0       	breq	.+6      	; 0x1b9e <update_octave_range+0x4a>
    1b98:	91 50       	subi	r25, 0x01	; 1
    1b9a:	90 93 0c 03 	sts	0x030C, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    1b9e:	98 e0       	ldi	r25, 0x08	; 8
    1ba0:	89 27       	eor	r24, r25
    1ba2:	80 93 83 03 	sts	0x0383, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    1ba6:	80 91 0c 03 	lds	r24, 0x030C
    1baa:	e1 e2       	ldi	r30, 0x21	; 33
    1bac:	f2 e0       	ldi	r31, 0x02	; 2
    1bae:	e8 0f       	add	r30, r24
    1bb0:	f1 1d       	adc	r31, r1
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	00 80       	ld	r0, Z
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <update_octave_range+0x6a>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <update_octave_range+0x66>
    1bc2:	58 2f       	mov	r21, r24
    1bc4:	80 93 05 03 	sts	0x0305, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    1bc8:	90 91 83 03 	lds	r25, 0x0383
    1bcc:	29 2f       	mov	r18, r25
    1bce:	26 95       	lsr	r18
    1bd0:	26 95       	lsr	r18
    1bd2:	20 ff       	sbrs	r18, 0
    1bd4:	0e c0       	rjmp	.+28     	; 0x1bf2 <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    1bd6:	80 91 0d 03 	lds	r24, 0x030D
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	80 93 0d 03 	sts	0x030D, r24
    1be0:	85 30       	cpi	r24, 0x05	; 5
    1be2:	19 f4       	brne	.+6      	; 0x1bea <update_octave_range+0x96>
    1be4:	84 e0       	ldi	r24, 0x04	; 4
    1be6:	80 93 0d 03 	sts	0x030D, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1bea:	84 e0       	ldi	r24, 0x04	; 4
    1bec:	98 27       	eor	r25, r24
    1bee:	90 93 83 03 	sts	0x0383, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    1bf2:	90 91 83 03 	lds	r25, 0x0383
    1bf6:	29 2f       	mov	r18, r25
    1bf8:	26 95       	lsr	r18
    1bfa:	20 ff       	sbrs	r18, 0
    1bfc:	0b c0       	rjmp	.+22     	; 0x1c14 <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1bfe:	80 91 0d 03 	lds	r24, 0x030D
    1c02:	88 23       	and	r24, r24
    1c04:	19 f0       	breq	.+6      	; 0x1c0c <update_octave_range+0xb8>
    1c06:	81 50       	subi	r24, 0x01	; 1
    1c08:	80 93 0d 03 	sts	0x030D, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	98 27       	eor	r25, r24
    1c10:	90 93 83 03 	sts	0x0383, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    1c14:	40 91 04 03 	lds	r20, 0x0304
    1c18:	4c 7f       	andi	r20, 0xFC	; 252
    1c1a:	40 93 04 03 	sts	0x0304, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1c1e:	90 91 0d 03 	lds	r25, 0x030D
    1c22:	93 30       	cpi	r25, 0x03	; 3
    1c24:	88 f0       	brcs	.+34     	; 0x1c48 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1c26:	ec e1       	ldi	r30, 0x1C	; 28
    1c28:	f2 e0       	ldi	r31, 0x02	; 2
    1c2a:	e9 0f       	add	r30, r25
    1c2c:	f1 1d       	adc	r31, r1
    1c2e:	21 e0       	ldi	r18, 0x01	; 1
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	c9 01       	movw	r24, r18
    1c34:	00 80       	ld	r0, Z
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <update_octave_range+0xe8>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	0a 94       	dec	r0
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <update_octave_range+0xe4>
    1c40:	84 2b       	or	r24, r20
    1c42:	80 93 04 03 	sts	0x0304, r24
    1c46:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1c48:	ec e1       	ldi	r30, 0x1C	; 28
    1c4a:	f2 e0       	ldi	r31, 0x02	; 2
    1c4c:	e9 0f       	add	r30, r25
    1c4e:	f1 1d       	adc	r31, r1
    1c50:	21 e0       	ldi	r18, 0x01	; 1
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	c9 01       	movw	r24, r18
    1c56:	00 80       	ld	r0, Z
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <update_octave_range+0x10a>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <update_octave_range+0x106>
    1c62:	85 2b       	or	r24, r21
    1c64:	80 93 05 03 	sts	0x0305, r24
    1c68:	08 95       	ret

00001c6a <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1c6a:	80 91 83 03 	lds	r24, 0x0383
    1c6e:	88 23       	and	r24, r24
    1c70:	64 f4       	brge	.+24     	; 0x1c8a <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    1c72:	80 58       	subi	r24, 0x80	; 128
    1c74:	80 93 83 03 	sts	0x0383, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1c78:	80 91 0e 03 	lds	r24, 0x030E
    1c7c:	8f 5f       	subi	r24, 0xFF	; 255
    1c7e:	80 93 0e 03 	sts	0x030E, r24
    1c82:	85 30       	cpi	r24, 0x05	; 5
    1c84:	11 f4       	brne	.+4      	; 0x1c8a <update_lfo_shape+0x20>
    1c86:	10 92 0e 03 	sts	0x030E, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1c8a:	e0 91 0e 03 	lds	r30, 0x030E
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	ee 0f       	add	r30, r30
    1c92:	ff 1f       	adc	r31, r31
    1c94:	ea 5d       	subi	r30, 0xDA	; 218
    1c96:	fd 4f       	sbci	r31, 0xFD	; 253
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	01 80       	ldd	r0, Z+1	; 0x01
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <update_lfo_shape+0x3a>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	0a 94       	dec	r0
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1ca8:	90 91 03 03 	lds	r25, 0x0303
    1cac:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    1cae:	89 2b       	or	r24, r25
    1cb0:	80 93 03 03 	sts	0x0303, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    1cb4:	80 81       	ld	r24, Z
    1cb6:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1cb8:	ed ed       	ldi	r30, 0xDD	; 221
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 62       	ori	r24, 0x20	; 32
    1cc0:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8f 7d       	andi	r24, 0xDF	; 223
    1cc6:	80 83       	st	Z, r24
	
}		
    1cc8:	08 95       	ret

00001cca <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    1cca:	80 91 83 03 	lds	r24, 0x0383
    1cce:	80 ff       	sbrs	r24, 0
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    1cd2:	91 e0       	ldi	r25, 0x01	; 1
    1cd4:	89 27       	eor	r24, r25
    1cd6:	80 93 83 03 	sts	0x0383, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    1cda:	80 91 0f 03 	lds	r24, 0x030F
    1cde:	8f 5f       	subi	r24, 0xFF	; 255
    1ce0:	80 93 0f 03 	sts	0x030F, r24
    1ce4:	85 30       	cpi	r24, 0x05	; 5
    1ce6:	11 f4       	brne	.+4      	; 0x1cec <update_lfo_sync+0x22>
    1ce8:	10 92 0f 03 	sts	0x030F, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1cec:	10 92 d9 03 	sts	0x03D9, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1cf0:	60 91 03 03 	lds	r22, 0x0303
    1cf4:	60 7f       	andi	r22, 0xF0	; 240
    1cf6:	60 93 03 03 	sts	0x0303, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1cfa:	20 91 0f 03 	lds	r18, 0x030F
    1cfe:	22 23       	and	r18, r18
    1d00:	71 f0       	breq	.+28     	; 0x1d1e <update_lfo_sync+0x54>
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	21 50       	subi	r18, 0x01	; 1
    1d06:	30 40       	sbci	r19, 0x00	; 0
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	ca 01       	movw	r24, r20
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <update_lfo_sync+0x4a>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	2a 95       	dec	r18
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <update_lfo_sync+0x46>
    1d18:	86 2b       	or	r24, r22
    1d1a:	80 93 03 03 	sts	0x0303, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1d1e:	80 91 03 03 	lds	r24, 0x0303
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	8f 70       	andi	r24, 0x0F	; 15
    1d26:	90 70       	andi	r25, 0x00	; 0
    1d28:	82 30       	cpi	r24, 0x02	; 2
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	89 f0       	breq	.+34     	; 0x1d50 <update_lfo_sync+0x86>
    1d2e:	83 30       	cpi	r24, 0x03	; 3
    1d30:	91 05       	cpc	r25, r1
    1d32:	24 f4       	brge	.+8      	; 0x1d3c <update_lfo_sync+0x72>
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	91 05       	cpc	r25, r1
    1d38:	b9 f4       	brne	.+46     	; 0x1d68 <update_lfo_sync+0x9e>
    1d3a:	07 c0       	rjmp	.+14     	; 0x1d4a <update_lfo_sync+0x80>
    1d3c:	84 30       	cpi	r24, 0x04	; 4
    1d3e:	91 05       	cpc	r25, r1
    1d40:	59 f0       	breq	.+22     	; 0x1d58 <update_lfo_sync+0x8e>
    1d42:	88 30       	cpi	r24, 0x08	; 8
    1d44:	91 05       	cpc	r25, r1
    1d46:	81 f4       	brne	.+32     	; 0x1d68 <update_lfo_sync+0x9e>
    1d48:	0b c0       	rjmp	.+22     	; 0x1d60 <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1d4a:	10 92 d8 03 	sts	0x03D8, r1
			
			break;
    1d4e:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			midi_clock.divider = 24; //1:4
    1d50:	88 e1       	ldi	r24, 0x18	; 24
    1d52:	80 93 d8 03 	sts	0x03D8, r24
			break;
    1d56:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1d58:	8c e0       	ldi	r24, 0x0C	; 12
    1d5a:	80 93 d8 03 	sts	0x03D8, r24
			break;
    1d5e:	08 95       	ret
			
		case 0b1000:
			midi_clock.divider = 6; //1:16	 		
    1d60:	86 e0       	ldi	r24, 0x06	; 6
    1d62:	80 93 d8 03 	sts	0x03D8, r24
			break;
    1d66:	08 95       	ret
		
		default:
			midi_clock.divider = 0; //need to turn midi sync off here. How?
    1d68:	10 92 d8 03 	sts	0x03D8, r1
    1d6c:	08 95       	ret

00001d6e <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1d6e:	80 91 83 03 	lds	r24, 0x0383
    1d72:	98 2f       	mov	r25, r24
    1d74:	92 95       	swap	r25
    1d76:	96 95       	lsr	r25
    1d78:	96 95       	lsr	r25
    1d7a:	93 70       	andi	r25, 0x03	; 3
    1d7c:	90 ff       	sbrs	r25, 0
    1d7e:	15 c0       	rjmp	.+42     	; 0x1daa <update_arp_sync+0x3c>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1d80:	90 e4       	ldi	r25, 0x40	; 64
    1d82:	89 27       	eor	r24, r25
    1d84:	80 93 83 03 	sts	0x0383, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1d88:	80 91 10 03 	lds	r24, 0x0310
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	80 93 10 03 	sts	0x0310, r24
    1d92:	85 30       	cpi	r24, 0x05	; 5
    1d94:	11 f4       	brne	.+4      	; 0x1d9a <update_arp_sync+0x2c>
    1d96:	10 92 10 03 	sts	0x0310, r1
		if (arp.clock_source == MIDI_CLOCK) arp.ppqn_counter = 0; //this will need to be handled elsewhere to take into account current ppqn count and and new divider value 
    1d9a:	80 91 90 03 	lds	r24, 0x0390
    1d9e:	88 23       	and	r24, r24
    1da0:	11 f4       	brne	.+4      	; 0x1da6 <update_arp_sync+0x38>
    1da2:	10 92 8e 03 	sts	0x038E, r1
		system_clock.ppqn_counter = 0;	//same applies to system clock ppqn counter
    1da6:	10 92 d3 03 	sts	0x03D3, r1
		
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1daa:	60 91 04 03 	lds	r22, 0x0304
    1dae:	63 7c       	andi	r22, 0xC3	; 195
    1db0:	60 93 04 03 	sts	0x0304, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1db4:	20 91 10 03 	lds	r18, 0x0310
    1db8:	22 23       	and	r18, r18
    1dba:	71 f0       	breq	.+28     	; 0x1dd8 <update_arp_sync+0x6a>
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	2f 5f       	subi	r18, 0xFF	; 255
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	ca 01       	movw	r24, r20
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <update_arp_sync+0x60>
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	2a 95       	dec	r18
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <update_arp_sync+0x5c>
    1dd2:	86 2b       	or	r24, r22
    1dd4:	80 93 04 03 	sts	0x0304, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1dd8:	80 91 04 03 	lds	r24, 0x0304
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	8c 73       	andi	r24, 0x3C	; 60
    1de0:	90 70       	andi	r25, 0x00	; 0
    1de2:	88 30       	cpi	r24, 0x08	; 8
    1de4:	91 05       	cpc	r25, r1
    1de6:	a1 f0       	breq	.+40     	; 0x1e10 <update_arp_sync+0xa2>
    1de8:	89 30       	cpi	r24, 0x09	; 9
    1dea:	91 05       	cpc	r25, r1
    1dec:	24 f4       	brge	.+8      	; 0x1df6 <update_arp_sync+0x88>
    1dee:	84 30       	cpi	r24, 0x04	; 4
    1df0:	91 05       	cpc	r25, r1
    1df2:	01 f5       	brne	.+64     	; 0x1e34 <update_arp_sync+0xc6>
    1df4:	07 c0       	rjmp	.+14     	; 0x1e04 <update_arp_sync+0x96>
    1df6:	80 31       	cpi	r24, 0x10	; 16
    1df8:	91 05       	cpc	r25, r1
    1dfa:	81 f0       	breq	.+32     	; 0x1e1c <update_arp_sync+0xae>
    1dfc:	80 32       	cpi	r24, 0x20	; 32
    1dfe:	91 05       	cpc	r25, r1
    1e00:	c9 f4       	brne	.+50     	; 0x1e34 <update_arp_sync+0xc6>
    1e02:	12 c0       	rjmp	.+36     	; 0x1e28 <update_arp_sync+0xba>
			
		case 0b00000100:
			system_clock.divider = arp.divider = 48; //1:2
    1e04:	80 e3       	ldi	r24, 0x30	; 48
    1e06:	80 93 8f 03 	sts	0x038F, r24
    1e0a:	80 93 d2 03 	sts	0x03D2, r24
			break;
    1e0e:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = arp.divider = 24; //1:4
    1e10:	88 e1       	ldi	r24, 0x18	; 24
    1e12:	80 93 8f 03 	sts	0x038F, r24
    1e16:	80 93 d2 03 	sts	0x03D2, r24
			break;
    1e1a:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = arp.divider = 12; //1:8
    1e1c:	8c e0       	ldi	r24, 0x0C	; 12
    1e1e:	80 93 8f 03 	sts	0x038F, r24
    1e22:	80 93 d2 03 	sts	0x03D2, r24
			break;
    1e26:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = arp.divider = 6; //1:16	
    1e28:	86 e0       	ldi	r24, 0x06	; 6
    1e2a:	80 93 8f 03 	sts	0x038F, r24
    1e2e:	80 93 d2 03 	sts	0x03D2, r24
			break;
    1e32:	08 95       	ret
			
		default:
			system_clock.divider = arp.divider = 4; //should be 1 but this never turns arp_sync_led off - need to fix this	
    1e34:	84 e0       	ldi	r24, 0x04	; 4
    1e36:	80 93 8f 03 	sts	0x038F, r24
    1e3a:	80 93 d2 03 	sts	0x03D2, r24
    1e3e:	08 95       	ret

00001e40 <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1e40:	80 91 83 03 	lds	r24, 0x0383
    1e44:	80 31       	cpi	r24, 0x10	; 16
    1e46:	69 f4       	brne	.+26     	; 0x1e62 <update_arp_range+0x22>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1e48:	10 92 83 03 	sts	0x0383, r1
		
		if (++arp_range == 4) arp_range = 0;
    1e4c:	80 91 11 03 	lds	r24, 0x0311
    1e50:	8f 5f       	subi	r24, 0xFF	; 255
    1e52:	80 93 11 03 	sts	0x0311, r24
    1e56:	84 30       	cpi	r24, 0x04	; 4
    1e58:	11 f4       	brne	.+4      	; 0x1e5e <update_arp_range+0x1e>
    1e5a:	10 92 11 03 	sts	0x0311, r1
		arp.step_position = 0; //reset step position if range changes
    1e5e:	10 92 8a 03 	sts	0x038A, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1e62:	80 91 02 03 	lds	r24, 0x0302
    1e66:	8d 7f       	andi	r24, 0xFD	; 253
    1e68:	80 93 02 03 	sts	0x0302, r24
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1e6c:	80 91 04 03 	lds	r24, 0x0304
    1e70:	8f 73       	andi	r24, 0x3F	; 63
    1e72:	80 93 04 03 	sts	0x0304, r24
	
	arp.range = arp_range;
    1e76:	80 91 11 03 	lds	r24, 0x0311
    1e7a:	80 93 88 03 	sts	0x0388, r24
	
	update_arp_sequence(); //update sequence with new settings
    1e7e:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1e82:	80 91 11 03 	lds	r24, 0x0311
    1e86:	82 30       	cpi	r24, 0x02	; 2
    1e88:	51 f0       	breq	.+20     	; 0x1e9e <update_arp_range+0x5e>
    1e8a:	83 30       	cpi	r24, 0x03	; 3
    1e8c:	71 f0       	breq	.+28     	; 0x1eaa <update_arp_range+0x6a>
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	89 f4       	brne	.+34     	; 0x1eb4 <update_arp_range+0x74>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1e92:	80 91 02 03 	lds	r24, 0x0302
    1e96:	82 60       	ori	r24, 0x02	; 2
    1e98:	80 93 02 03 	sts	0x0302, r24
			break;
    1e9c:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1e9e:	80 91 04 03 	lds	r24, 0x0304
    1ea2:	80 64       	ori	r24, 0x40	; 64
    1ea4:	80 93 04 03 	sts	0x0304, r24
			break;
    1ea8:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1eaa:	80 91 04 03 	lds	r24, 0x0304
    1eae:	80 68       	ori	r24, 0x80	; 128
    1eb0:	80 93 04 03 	sts	0x0304, r24
    1eb4:	08 95       	ret

00001eb6 <update_arp_mode>:

void update_arp_mode(void) {

	static uint8_t arp_mode = 0;
	
	if ((switch_states.byte1 >> ARP_MODE_SW) & 1) {
    1eb6:	80 91 83 03 	lds	r24, 0x0383
    1eba:	98 2f       	mov	r25, r24
    1ebc:	92 95       	swap	r25
    1ebe:	96 95       	lsr	r25
    1ec0:	97 70       	andi	r25, 0x07	; 7
    1ec2:	90 ff       	sbrs	r25, 0
    1ec4:	0f c0       	rjmp	.+30     	; 0x1ee4 <update_arp_mode+0x2e>
		
		switch_states.byte1 ^= (1<<ARP_MODE_SW); //toggle switch state
    1ec6:	90 e2       	ldi	r25, 0x20	; 32
    1ec8:	89 27       	eor	r24, r25
    1eca:	80 93 83 03 	sts	0x0383, r24
		if (++arp_mode == 5) arp_mode = 0;
    1ece:	80 91 12 03 	lds	r24, 0x0312
    1ed2:	8f 5f       	subi	r24, 0xFF	; 255
    1ed4:	80 93 12 03 	sts	0x0312, r24
    1ed8:	85 30       	cpi	r24, 0x05	; 5
    1eda:	11 f4       	brne	.+4      	; 0x1ee0 <update_arp_mode+0x2a>
    1edc:	10 92 12 03 	sts	0x0312, r1
		arp.step_position = 0; //reset step position if mode changes
    1ee0:	10 92 8a 03 	sts	0x038A, r1
		
	}

	//if (arp.clock_source != MIDI_CLOCK) arp.clock_source = INTERNAL_CLOCK;	

	current_patch.byte_1 &= 0b11000011; //clear middle 4 bits UP, DOWN, RANDOM, MODE correspond to bits 6>>2
    1ee4:	90 91 02 03 	lds	r25, 0x0302
    1ee8:	93 7c       	andi	r25, 0xC3	; 195
    1eea:	90 93 02 03 	sts	0x0302, r25
	
	switch(arp_mode) {
    1eee:	80 91 12 03 	lds	r24, 0x0312
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	79 f0       	breq	.+30     	; 0x1f14 <update_arp_mode+0x5e>
    1ef6:	81 30       	cpi	r24, 0x01	; 1
    1ef8:	28 f0       	brcs	.+10     	; 0x1f04 <update_arp_mode+0x4e>
    1efa:	82 30       	cpi	r24, 0x02	; 2
    1efc:	91 f0       	breq	.+36     	; 0x1f22 <update_arp_mode+0x6c>
    1efe:	83 30       	cpi	r24, 0x03	; 3
    1f00:	f1 f4       	brne	.+60     	; 0x1f3e <update_arp_mode+0x88>
    1f02:	16 c0       	rjmp	.+44     	; 0x1f30 <update_arp_mode+0x7a>
		
		case 0:
		
			//turn arp off
			arp.mode = OFF;
    1f04:	10 92 91 03 	sts	0x0391, r1
			if (gate_buffer == 0) PORTF &= ~(1<<GATE); //turn gate off.
    1f08:	80 91 b4 02 	lds	r24, 0x02B4
    1f0c:	88 23       	and	r24, r24
    1f0e:	e9 f4       	brne	.+58     	; 0x1f4a <update_arp_mode+0x94>
    1f10:	89 98       	cbi	0x11, 1	; 17
    1f12:	1b c0       	rjmp	.+54     	; 0x1f4a <update_arp_mode+0x94>
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_ON);
    1f14:	94 62       	ori	r25, 0x24	; 36
    1f16:	90 93 02 03 	sts	0x0302, r25
			arp.mode = UP;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	80 93 91 03 	sts	0x0391, r24
			break;	
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <update_arp_mode+0x94>
		
		case 2:
			current_patch.byte_1 |= (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1f22:	94 61       	ori	r25, 0x14	; 20
    1f24:	90 93 02 03 	sts	0x0302, r25
			arp.mode = DOWN;
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	80 93 91 03 	sts	0x0391, r24
			break;
    1f2e:	0d c0       	rjmp	.+26     	; 0x1f4a <update_arp_mode+0x94>
			
		case 3:
			current_patch.byte_1 |= (1<<ARP_MODE_UP) | (1<<ARP_MODE_DN) | (1<<ARP_ON);
    1f30:	94 63       	ori	r25, 0x34	; 52
    1f32:	90 93 02 03 	sts	0x0302, r25
			arp.mode = UP_DOWN;
    1f36:	83 e0       	ldi	r24, 0x03	; 3
    1f38:	80 93 91 03 	sts	0x0391, r24
			break;
    1f3c:	06 c0       	rjmp	.+12     	; 0x1f4a <update_arp_mode+0x94>
			
		default:
			current_patch.byte_1 |= (1<<ARP_MODE_RD) | (1<<ARP_ON);
    1f3e:	9c 60       	ori	r25, 0x0C	; 12
    1f40:	90 93 02 03 	sts	0x0302, r25
			arp.mode = RANDOM;
    1f44:	84 e0       	ldi	r24, 0x04	; 4
    1f46:	80 93 91 03 	sts	0x0391, r24
			
					
		
	}
	
	update_arp_sequence(); //update arp sequence with new mode
    1f4a:	0e 94 a3 00 	call	0x146	; 0x146 <update_arp_sequence>
	



}
    1f4e:	08 95       	ret

00001f50 <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1f50:	90 91 82 03 	lds	r25, 0x0382
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1f54:	80 91 84 03 	lds	r24, 0x0384
    1f58:	86 95       	lsr	r24
    1f5a:	86 95       	lsr	r24
    1f5c:	68 2f       	mov	r22, r24
    1f5e:	67 95       	ror	r22
    1f60:	66 27       	eor	r22, r22
    1f62:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1f64:	29 2f       	mov	r18, r25
    1f66:	21 70       	andi	r18, 0x01	; 1
    1f68:	26 2b       	or	r18, r22
    1f6a:	69 2f       	mov	r22, r25
    1f6c:	66 1f       	adc	r22, r22
    1f6e:	66 27       	eor	r22, r22
    1f70:	66 1f       	adc	r22, r22
    1f72:	66 0f       	add	r22, r22
    1f74:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1f76:	29 2f       	mov	r18, r25
    1f78:	26 95       	lsr	r18
    1f7a:	26 95       	lsr	r18
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	21 70       	andi	r18, 0x01	; 1
    1f80:	30 70       	andi	r19, 0x00	; 0
    1f82:	d9 01       	movw	r26, r18
    1f84:	aa 0f       	add	r26, r26
    1f86:	bb 1f       	adc	r27, r27
    1f88:	aa 0f       	add	r26, r26
    1f8a:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1f8c:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1f8e:	a9 2f       	mov	r26, r25
    1f90:	a6 95       	lsr	r26
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	a1 70       	andi	r26, 0x01	; 1
    1f96:	b0 70       	andi	r27, 0x00	; 0
    1f98:	fd 01       	movw	r30, r26
    1f9a:	ee 0f       	add	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	ee 0f       	add	r30, r30
    1fa0:	ff 1f       	adc	r31, r31
    1fa2:	ee 0f       	add	r30, r30
    1fa4:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1fa6:	a6 2f       	mov	r26, r22
    1fa8:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1faa:	e9 2f       	mov	r30, r25
    1fac:	e2 95       	swap	r30
    1fae:	ef 70       	andi	r30, 0x0F	; 15
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	e1 70       	andi	r30, 0x01	; 1
    1fb4:	f0 70       	andi	r31, 0x00	; 0
    1fb6:	bf 01       	movw	r22, r30
    1fb8:	62 95       	swap	r22
    1fba:	72 95       	swap	r23
    1fbc:	70 7f       	andi	r23, 0xF0	; 240
    1fbe:	76 27       	eor	r23, r22
    1fc0:	60 7f       	andi	r22, 0xF0	; 240
    1fc2:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1fc4:	ea 2f       	mov	r30, r26
    1fc6:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1fc8:	69 2f       	mov	r22, r25
    1fca:	62 95       	swap	r22
    1fcc:	66 95       	lsr	r22
    1fce:	67 70       	andi	r22, 0x07	; 7
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	61 70       	andi	r22, 0x01	; 1
    1fd4:	70 70       	andi	r23, 0x00	; 0
    1fd6:	ab 01       	movw	r20, r22
    1fd8:	44 0f       	add	r20, r20
    1fda:	55 1f       	adc	r21, r21
    1fdc:	42 95       	swap	r20
    1fde:	52 95       	swap	r21
    1fe0:	50 7f       	andi	r21, 0xF0	; 240
    1fe2:	54 27       	eor	r21, r20
    1fe4:	40 7f       	andi	r20, 0xF0	; 240
    1fe6:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1fe8:	6e 2f       	mov	r22, r30
    1fea:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1fec:	49 2f       	mov	r20, r25
    1fee:	42 95       	swap	r20
    1ff0:	46 95       	lsr	r20
    1ff2:	46 95       	lsr	r20
    1ff4:	43 70       	andi	r20, 0x03	; 3
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	41 70       	andi	r20, 0x01	; 1
    1ffa:	50 70       	andi	r21, 0x00	; 0
    1ffc:	9a 01       	movw	r18, r20
    1ffe:	00 24       	eor	r0, r0
    2000:	36 95       	lsr	r19
    2002:	27 95       	ror	r18
    2004:	07 94       	ror	r0
    2006:	36 95       	lsr	r19
    2008:	27 95       	ror	r18
    200a:	07 94       	ror	r0
    200c:	32 2f       	mov	r19, r18
    200e:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    2010:	26 2b       	or	r18, r22
    2012:	20 93 06 03 	sts	0x0306, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    2016:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    2018:	81 95       	neg	r24
    201a:	89 27       	eor	r24, r25
    201c:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    201e:	89 27       	eor	r24, r25
    2020:	0e 94 11 17 	call	0x2e22	; 0x2e22 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    2024:	ed ed       	ldi	r30, 0xDD	; 221
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    202a:	90 91 84 03 	lds	r25, 0x0384
    202e:	96 95       	lsr	r25
    2030:	96 95       	lsr	r25
    2032:	96 95       	lsr	r25
    2034:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    2036:	91 95       	neg	r25
    2038:	80 81       	ld	r24, Z
    203a:	89 27       	eor	r24, r25
    203c:	80 71       	andi	r24, 0x10	; 16
    203e:	82 27       	eor	r24, r18
    2040:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    2042:	e2 e0       	ldi	r30, 0x02	; 2
    2044:	f3 e0       	ldi	r31, 0x03	; 3
    2046:	80 81       	ld	r24, Z
    2048:	98 27       	eor	r25, r24
    204a:	91 70       	andi	r25, 0x01	; 1
    204c:	89 27       	eor	r24, r25
    204e:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    2050:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    2054:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    2058:	0e 94 65 0e 	call	0x1cca	; 0x1cca <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    205c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <update_arp_sync>
	update_arp_range();
    2060:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <update_arp_range>
	update_arp_mode();
    2064:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <update_arp_mode>
	//update_patch_programmer();		
				

		
	
}
    2068:	08 95       	ret

0000206a <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    206e:	90 91 0b 03 	lds	r25, 0x030B
    2072:	95 30       	cpi	r25, 0x05	; 5
    2074:	01 f5       	brne	.+64     	; 0x20b6 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    2076:	87 e0       	ldi	r24, 0x07	; 7
    2078:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    207a:	cd ed       	ldi	r28, 0xDD	; 221
    207c:	d0 e0       	ldi	r29, 0x00	; 0
    207e:	88 81       	ld	r24, Y
    2080:	80 62       	ori	r24, 0x20	; 32
    2082:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    2084:	88 81       	ld	r24, Y
    2086:	8f 7d       	andi	r24, 0xDF	; 223
    2088:	88 83       	st	Y, r24
		DATA_BUS = 0;
    208a:	12 b8       	out	0x02, r1	; 2
		
		tune();
    208c:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    2090:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    2092:	88 81       	ld	r24, Y
    2094:	80 62       	ori	r24, 0x20	; 32
    2096:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    2098:	88 81       	ld	r24, Y
    209a:	8f 7d       	andi	r24, 0xDF	; 223
    209c:	88 83       	st	Y, r24
		DATA_BUS = 0;
    209e:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    20a0:	80 91 03 03 	lds	r24, 0x0303
    20a4:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    20a6:	80 68       	ori	r24, 0x80	; 128
    20a8:	80 93 03 03 	sts	0x0303, r24
		
		setup_system_clock(); //restore system clock settings
    20ac:	0e 94 ed 01 	call	0x3da	; 0x3da <setup_system_clock>

		current_patch.mode = MEMORY;
    20b0:	10 92 0b 03 	sts	0x030B, r1
		
		return;
    20b4:	63 c0       	rjmp	.+198    	; 0x217c <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    20b6:	80 91 84 03 	lds	r24, 0x0384
    20ba:	28 2f       	mov	r18, r24
    20bc:	22 95       	swap	r18
    20be:	26 95       	lsr	r18
    20c0:	26 95       	lsr	r18
    20c2:	23 70       	andi	r18, 0x03	; 3
    20c4:	20 ff       	sbrs	r18, 0
    20c6:	15 c0       	rjmp	.+42     	; 0x20f2 <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    20c8:	20 e4       	ldi	r18, 0x40	; 64
    20ca:	82 27       	eor	r24, r18
    20cc:	80 93 84 03 	sts	0x0384, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    20d0:	80 91 07 03 	lds	r24, 0x0307
    20d4:	8f 5f       	subi	r24, 0xFF	; 255
    20d6:	80 93 07 03 	sts	0x0307, r24
    20da:	85 32       	cpi	r24, 0x25	; 37
    20dc:	21 f4       	brne	.+8      	; 0x20e6 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    20de:	84 e2       	ldi	r24, 0x24	; 36
    20e0:	80 93 07 03 	sts	0x0307, r24
    20e4:	06 c0       	rjmp	.+12     	; 0x20f2 <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    20e6:	93 30       	cpi	r25, 0x03	; 3
    20e8:	21 f0       	breq	.+8      	; 0x20f2 <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    20ea:	0e 94 ba 0a 	call	0x1574	; 0x1574 <load_patch>
			update_patch();
    20ee:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    20f2:	80 91 84 03 	lds	r24, 0x0384
    20f6:	98 2f       	mov	r25, r24
    20f8:	92 95       	swap	r25
    20fa:	96 95       	lsr	r25
    20fc:	97 70       	andi	r25, 0x07	; 7
    20fe:	90 ff       	sbrs	r25, 0
    2100:	15 c0       	rjmp	.+42     	; 0x212c <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    2102:	90 e2       	ldi	r25, 0x20	; 32
    2104:	89 27       	eor	r24, r25
    2106:	80 93 84 03 	sts	0x0384, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    210a:	80 91 07 03 	lds	r24, 0x0307
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	19 f0       	breq	.+6      	; 0x2118 <update_patch_programmer+0xae>
    2112:	81 50       	subi	r24, 0x01	; 1
    2114:	80 93 07 03 	sts	0x0307, r24
		
		if (current_patch.mode != WRITE) {
    2118:	80 91 0b 03 	lds	r24, 0x030B
    211c:	83 30       	cpi	r24, 0x03	; 3
    211e:	31 f0       	breq	.+12     	; 0x212c <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    2120:	80 91 07 03 	lds	r24, 0x0307
    2124:	0e 94 ba 0a 	call	0x1574	; 0x1574 <load_patch>
			update_patch();
    2128:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    212c:	80 91 84 03 	lds	r24, 0x0384
    2130:	98 2f       	mov	r25, r24
    2132:	92 95       	swap	r25
    2134:	9f 70       	andi	r25, 0x0F	; 15
    2136:	90 ff       	sbrs	r25, 0
    2138:	15 c0       	rjmp	.+42     	; 0x2164 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    213a:	90 e1       	ldi	r25, 0x10	; 16
    213c:	89 27       	eor	r24, r25
    213e:	80 93 84 03 	sts	0x0384, r24
		if (current_patch.mode != WRITE) {
    2142:	90 91 0b 03 	lds	r25, 0x030B
    2146:	93 30       	cpi	r25, 0x03	; 3
    2148:	49 f0       	breq	.+18     	; 0x215c <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    214a:	8f 77       	andi	r24, 0x7F	; 127
    214c:	80 93 84 03 	sts	0x0384, r24
			current_patch.mode = WRITE;
    2150:	83 e0       	ldi	r24, 0x03	; 3
    2152:	80 93 0b 03 	sts	0x030B, r24
			lock_pots();
    2156:	0e 94 9c 08 	call	0x1138	; 0x1138 <lock_pots>
    215a:	04 c0       	rjmp	.+8      	; 0x2164 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    215c:	80 91 07 03 	lds	r24, 0x0307
    2160:	0e 94 c7 08 	call	0x118e	; 0x118e <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    2164:	80 91 84 03 	lds	r24, 0x0384
    2168:	88 23       	and	r24, r24
    216a:	44 f4       	brge	.+16     	; 0x217c <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    216c:	80 68       	ori	r24, 0x80	; 128
    216e:	80 93 84 03 	sts	0x0384, r24
		current_patch.mode = MANUAL;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	80 93 0b 03 	sts	0x030B, r24
		unlock_pots();
    2178:	0e 94 b6 08 	call	0x116c	; 0x116c <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	08 95       	ret

00002182 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2182:	88 ed       	ldi	r24, 0xD8	; 216
    2184:	91 e0       	ldi	r25, 0x01	; 1
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    218e:	81 ee       	ldi	r24, 0xE1	; 225
    2190:	91 e0       	ldi	r25, 0x01	; 1
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    219a:	82 ee       	ldi	r24, 0xE2	; 226
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    21a6:	87 eb       	ldi	r24, 0xB7	; 183
    21a8:	92 e0       	ldi	r25, 0x02	; 2
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    21b2:	8a ed       	ldi	r24, 0xDA	; 218
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	70 e0       	ldi	r23, 0x00	; 0
    21ba:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    21be:	8f ed       	ldi	r24, 0xDF	; 223
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    21ca:	80 ee       	ldi	r24, 0xE0	; 224
    21cc:	91 e0       	ldi	r25, 0x01	; 1
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    21d6:	81 ed       	ldi	r24, 0xD1	; 209
    21d8:	91 e0       	ldi	r25, 0x01	; 1
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	70 e0       	ldi	r23, 0x00	; 0
    21de:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    21e2:	86 ed       	ldi	r24, 0xD6	; 214
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    21ee:	82 ed       	ldi	r24, 0xD2	; 210
    21f0:	91 e0       	ldi	r25, 0x01	; 1
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    21fa:	83 ed       	ldi	r24, 0xD3	; 211
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    2206:	84 ed       	ldi	r24, 0xD4	; 212
    2208:	91 e0       	ldi	r25, 0x01	; 1
    220a:	6f ef       	ldi	r22, 0xFF	; 255
    220c:	7f e3       	ldi	r23, 0x3F	; 63
    220e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    2212:	85 ed       	ldi	r24, 0xD5	; 213
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    221e:	89 ed       	ldi	r24, 0xD9	; 217
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    222a:	8e ec       	ldi	r24, 0xCE	; 206
    222c:	91 e0       	ldi	r25, 0x01	; 1
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2236:	8c ec       	ldi	r24, 0xCC	; 204
    2238:	91 e0       	ldi	r25, 0x01	; 1
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2242:	8a ec       	ldi	r24, 0xCA	; 202
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	6f ef       	ldi	r22, 0xFF	; 255
    2248:	7f e3       	ldi	r23, 0x3F	; 63
    224a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    224e:	88 ec       	ldi	r24, 0xC8	; 200
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    225a:	80 ed       	ldi	r24, 0xD0	; 208
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	60 e0       	ldi	r22, 0x00	; 0
    2260:	70 e0       	ldi	r23, 0x00	; 0
    2262:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    2266:	83 ee       	ldi	r24, 0xE3	; 227
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	70 e0       	ldi	r23, 0x00	; 0
    226e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2272:	84 ee       	ldi	r24, 0xE4	; 228
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	70 e0       	ldi	r23, 0x00	; 0
    227a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
}	
    227e:	08 95       	ret

00002280 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    2280:	2f 92       	push	r2
    2282:	3f 92       	push	r3
    2284:	4f 92       	push	r4
    2286:	5f 92       	push	r5
    2288:	6f 92       	push	r6
    228a:	7f 92       	push	r7
    228c:	8f 92       	push	r8
    228e:	9f 92       	push	r9
    2290:	af 92       	push	r10
    2292:	bf 92       	push	r11
    2294:	cf 92       	push	r12
    2296:	df 92       	push	r13
    2298:	ef 92       	push	r14
    229a:	ff 92       	push	r15
    229c:	0f 93       	push	r16
    229e:	1f 93       	push	r17
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	2c 97       	sbiw	r28, 0x0c	; 12
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	08 2f       	mov	r16, r24
    22b6:	78 87       	std	Y+8, r23	; 0x08
    22b8:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    22ba:	80 91 7f 03 	lds	r24, 0x037F
    22be:	83 60       	ori	r24, 0x03	; 3
    22c0:	80 93 7f 03 	sts	0x037F, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    22c4:	0e 94 c1 10 	call	0x2182	; 0x2182 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    22c8:	10 92 7e 03 	sts	0x037E, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    22cc:	0f 30       	cpi	r16, 0x0F	; 15
    22ce:	e1 f4       	brne	.+56     	; 0x2308 <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    22d0:	0f 2e       	mov	r0, r31
    22d2:	f6 ee       	ldi	r31, 0xE6	; 230
    22d4:	4f 2e       	mov	r4, r31
    22d6:	f1 e0       	ldi	r31, 0x01	; 1
    22d8:	5f 2e       	mov	r5, r31
    22da:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    22dc:	0f 2e       	mov	r0, r31
    22de:	fe ed       	ldi	r31, 0xDE	; 222
    22e0:	2f 2e       	mov	r2, r31
    22e2:	f1 e0       	ldi	r31, 0x01	; 1
    22e4:	3f 2e       	mov	r3, r31
    22e6:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    22e8:	23 ee       	ldi	r18, 0xE3	; 227
    22ea:	31 e0       	ldi	r19, 0x01	; 1
    22ec:	3a 83       	std	Y+2, r19	; 0x02
    22ee:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    22f0:	0f 2e       	mov	r0, r31
    22f2:	fc ed       	ldi	r31, 0xDC	; 220
    22f4:	8f 2e       	mov	r8, r31
    22f6:	f1 e0       	ldi	r31, 0x01	; 1
    22f8:	9f 2e       	mov	r9, r31
    22fa:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    22fc:	82 e7       	ldi	r24, 0x72	; 114
    22fe:	96 e0       	ldi	r25, 0x06	; 6
    2300:	9a 87       	std	Y+10, r25	; 0x0a
    2302:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	1b c0       	rjmp	.+54     	; 0x233e <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2308:	0f 2e       	mov	r0, r31
    230a:	f5 ee       	ldi	r31, 0xE5	; 229
    230c:	4f 2e       	mov	r4, r31
    230e:	f1 e0       	ldi	r31, 0x01	; 1
    2310:	5f 2e       	mov	r5, r31
    2312:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    2314:	0f 2e       	mov	r0, r31
    2316:	f7 ed       	ldi	r31, 0xD7	; 215
    2318:	2f 2e       	mov	r2, r31
    231a:	f1 e0       	ldi	r31, 0x01	; 1
    231c:	3f 2e       	mov	r3, r31
    231e:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    2320:	e4 ee       	ldi	r30, 0xE4	; 228
    2322:	f1 e0       	ldi	r31, 0x01	; 1
    2324:	fa 83       	std	Y+2, r31	; 0x02
    2326:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2328:	0f 2e       	mov	r0, r31
    232a:	fd ed       	ldi	r31, 0xDD	; 221
    232c:	8f 2e       	mov	r8, r31
    232e:	f1 e0       	ldi	r31, 0x01	; 1
    2330:	9f 2e       	mov	r9, r31
    2332:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    2334:	20 e7       	ldi	r18, 0x70	; 112
    2336:	36 e0       	ldi	r19, 0x06	; 6
    2338:	3a 87       	std	Y+10, r19	; 0x0a
    233a:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    233c:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    233e:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2340:	ed ed       	ldi	r30, 0xDD	; 221
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	80 64       	ori	r24, 0x40	; 64
    2348:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    234a:	80 81       	ld	r24, Z
    234c:	8f 7b       	andi	r24, 0xBF	; 191
    234e:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2350:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    2352:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2354:	84 b5       	in	r24, 0x24	; 36
    2356:	8f 60       	ori	r24, 0x0F	; 15
    2358:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    235e:	ee e6       	ldi	r30, 0x6E	; 110
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	90 81       	ld	r25, Z
    2364:	92 60       	ori	r25, 0x02	; 2
    2366:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    2368:	80 93 80 03 	sts	0x0380, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    236c:	8d e0       	ldi	r24, 0x0D	; 13
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    2374:	80 2f       	mov	r24, r16
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	8c 01       	movw	r16, r24
    237a:	0f 5f       	subi	r16, 0xFF	; 255
    237c:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    237e:	0f 2e       	mov	r0, r31
    2380:	f8 ed       	ldi	r31, 0xD8	; 216
    2382:	ef 2e       	mov	r14, r31
    2384:	f1 e0       	ldi	r31, 0x01	; 1
    2386:	ff 2e       	mov	r15, r31
    2388:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    238a:	0f 2e       	mov	r0, r31
    238c:	f4 ed       	ldi	r31, 0xD4	; 212
    238e:	cf 2e       	mov	r12, r31
    2390:	f1 e0       	ldi	r31, 0x01	; 1
    2392:	df 2e       	mov	r13, r31
    2394:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    2396:	0f 2e       	mov	r0, r31
    2398:	fa ec       	ldi	r31, 0xCA	; 202
    239a:	af 2e       	mov	r10, r31
    239c:	f1 e0       	ldi	r31, 0x01	; 1
    239e:	bf 2e       	mov	r11, r31
    23a0:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    23a2:	0f 2e       	mov	r0, r31
    23a4:	fb ec       	ldi	r31, 0xCB	; 203
    23a6:	6f 2e       	mov	r6, r31
    23a8:	f1 e0       	ldi	r31, 0x01	; 1
    23aa:	7f 2e       	mov	r7, r31
    23ac:	f0 2d       	mov	r31, r0
    23ae:	e0 e0       	ldi	r30, 0x00	; 0
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	fc 87       	std	Y+12, r31	; 0x0c
    23b4:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    23b6:	21 e0       	ldi	r18, 0x01	; 1
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	0b 80       	ldd	r0, Y+3	; 0x03
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <set_vco_init_cv+0x142>
    23be:	22 0f       	add	r18, r18
    23c0:	33 1f       	adc	r19, r19
    23c2:	0a 94       	dec	r0
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <set_vco_init_cv+0x13e>
    23c6:	3e 83       	std	Y+6, r19	; 0x06
    23c8:	2d 83       	std	Y+5, r18	; 0x05
    23ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    23cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    23ce:	82 2b       	or	r24, r18
    23d0:	93 2b       	or	r25, r19
    23d2:	9c 87       	std	Y+12, r25	; 0x0c
    23d4:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    23d6:	c4 01       	movw	r24, r8
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
		
		
		count_finished = FALSE;
    23e0:	10 92 7e 03 	sts	0x037E, r1
		period_counter = 0;
    23e4:	10 92 81 03 	sts	0x0381, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    23e8:	8f e0       	ldi	r24, 0x0F	; 15
    23ea:	e8 e1       	ldi	r30, 0x18	; 24
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	a8 95       	wdr
    23f4:	e0 93 60 00 	sts	0x0060, r30
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    23fe:	80 91 7e 03 	lds	r24, 0x037E
    2402:	88 23       	and	r24, r24
    2404:	89 f5       	brne	.+98     	; 0x2468 <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    2406:	c8 01       	movw	r24, r16
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	0e 94 39 03 	call	0x672	; 0x672 <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    240e:	c4 01       	movw	r24, r8
    2410:	6b 85       	ldd	r22, Y+11	; 0x0b
    2412:	7c 85       	ldd	r23, Y+12	; 0x0c
    2414:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    2418:	c1 01       	movw	r24, r2
    241a:	6f ef       	ldi	r22, 0xFF	; 255
    241c:	7f e3       	ldi	r23, 0x3F	; 63
    241e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    2422:	c7 01       	movw	r24, r14
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    242c:	c6 01       	movw	r24, r12
    242e:	6f ef       	ldi	r22, 0xFF	; 255
    2430:	7f e3       	ldi	r23, 0x3F	; 63
    2432:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    2436:	c5 01       	movw	r24, r10
    2438:	6f ef       	ldi	r22, 0xFF	; 255
    243a:	7f e3       	ldi	r23, 0x3F	; 63
    243c:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    2440:	c3 01       	movw	r24, r6
    2442:	6f ef       	ldi	r22, 0xFF	; 255
    2444:	7f e3       	ldi	r23, 0x3F	; 63
    2446:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	6f ef       	ldi	r22, 0xFF	; 255
    2450:	7f e3       	ldi	r23, 0x3F	; 63
    2452:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    2456:	c2 01       	movw	r24, r4
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    2460:	80 91 7e 03 	lds	r24, 0x037E
    2464:	88 23       	and	r24, r24
    2466:	79 f2       	breq	.-98     	; 0x2406 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    2468:	88 e1       	ldi	r24, 0x18	; 24
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	80 93 60 00 	sts	0x0060, r24
    2472:	10 92 60 00 	sts	0x0060, r1
    2476:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    2478:	80 91 7c 03 	lds	r24, 0x037C
    247c:	90 91 7d 03 	lds	r25, 0x037D
    2480:	ef 81       	ldd	r30, Y+7	; 0x07
    2482:	f8 85       	ldd	r31, Y+8	; 0x08
    2484:	e8 17       	cp	r30, r24
    2486:	f9 07       	cpc	r31, r25
    2488:	20 f0       	brcs	.+8      	; 0x2492 <set_vco_init_cv+0x212>
    248a:	80 91 af 02 	lds	r24, 0x02AF
    248e:	88 23       	and	r24, r24
    2490:	51 f4       	brne	.+20     	; 0x24a6 <set_vco_init_cv+0x226>
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	9e 81       	ldd	r25, Y+6	; 0x06
    2496:	80 95       	com	r24
    2498:	90 95       	com	r25
    249a:	2b 85       	ldd	r18, Y+11	; 0x0b
    249c:	3c 85       	ldd	r19, Y+12	; 0x0c
    249e:	28 23       	and	r18, r24
    24a0:	39 23       	and	r19, r25
    24a2:	3c 87       	std	Y+12, r19	; 0x0c
    24a4:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	9c 83       	std	Y+4, r25	; 0x04
    24b4:	8b 83       	std	Y+3, r24	; 0x03
    24b6:	ef ef       	ldi	r30, 0xFF	; 255
    24b8:	8f 3f       	cpi	r24, 0xFF	; 255
    24ba:	9e 07       	cpc	r25, r30
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <set_vco_init_cv+0x240>
    24be:	7b cf       	rjmp	.-266    	; 0x23b6 <set_vco_init_cv+0x136>
    24c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    24c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    24c4:	3e 83       	std	Y+6, r19	; 0x06
    24c6:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    24c8:	88 ec       	ldi	r24, 0xC8	; 200
    24ca:	91 e0       	ldi	r25, 0x01	; 1
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	70 e0       	ldi	r23, 0x00	; 0
    24d0:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    24d4:	89 ec       	ldi	r24, 0xC9	; 201
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    24e0:	84 ed       	ldi	r24, 0xD4	; 212
    24e2:	91 e0       	ldi	r25, 0x01	; 1
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    24ec:	88 ed       	ldi	r24, 0xD8	; 216
    24ee:	91 e0       	ldi	r25, 0x01	; 1
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	70 e0       	ldi	r23, 0x00	; 0
    24f4:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    24f8:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    24fa:	ee e6       	ldi	r30, 0x6E	; 110
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	8d 7f       	andi	r24, 0xFD	; 253
    2502:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2504:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	6d 81       	ldd	r22, Y+5	; 0x05
    250c:	7e 81       	ldd	r23, Y+6	; 0x06
    250e:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	2c 96       	adiw	r28, 0x0c	; 12
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	ff 90       	pop	r15
    252c:	ef 90       	pop	r14
    252e:	df 90       	pop	r13
    2530:	cf 90       	pop	r12
    2532:	bf 90       	pop	r11
    2534:	af 90       	pop	r10
    2536:	9f 90       	pop	r9
    2538:	8f 90       	pop	r8
    253a:	7f 90       	pop	r7
    253c:	6f 90       	pop	r6
    253e:	5f 90       	pop	r5
    2540:	4f 90       	pop	r4
    2542:	3f 90       	pop	r3
    2544:	2f 90       	pop	r2
    2546:	08 95       	ret

00002548 <tune_8ths>:



void tune_8ths(uint8_t vco) {
    2548:	2f 92       	push	r2
    254a:	3f 92       	push	r3
    254c:	4f 92       	push	r4
    254e:	5f 92       	push	r5
    2550:	6f 92       	push	r6
    2552:	7f 92       	push	r7
    2554:	8f 92       	push	r8
    2556:	9f 92       	push	r9
    2558:	af 92       	push	r10
    255a:	bf 92       	push	r11
    255c:	cf 92       	push	r12
    255e:	df 92       	push	r13
    2560:	ef 92       	push	r14
    2562:	ff 92       	push	r15
    2564:	0f 93       	push	r16
    2566:	1f 93       	push	r17
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	c0 54       	subi	r28, 0x40	; 64
    2572:	d0 40       	sbci	r29, 0x00	; 0
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    2580:	de 01       	movw	r26, r28
    2582:	11 96       	adiw	r26, 0x01	; 1
    2584:	e0 e3       	ldi	r30, 0x30	; 48
    2586:	f2 e0       	ldi	r31, 0x02	; 2
    2588:	80 e3       	ldi	r24, 0x30	; 48
    258a:	01 90       	ld	r0, Z+
    258c:	0d 92       	st	X+, r0
    258e:	81 50       	subi	r24, 0x01	; 1
    2590:	e1 f7       	brne	.-8      	; 0x258a <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    2592:	0e 94 c1 10 	call	0x2182	; 0x2182 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    2596:	0f 30       	cpi	r16, 0x0F	; 15
    2598:	11 f5       	brne	.+68     	; 0x25de <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    259a:	40 90 79 03 	lds	r4, 0x0379
    259e:	50 90 7a 03 	lds	r5, 0x037A
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    25a2:	0f 2e       	mov	r0, r31
    25a4:	f6 ee       	ldi	r31, 0xE6	; 230
    25a6:	8f 2e       	mov	r8, r31
    25a8:	f1 e0       	ldi	r31, 0x01	; 1
    25aa:	9f 2e       	mov	r9, r31
    25ac:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    25ae:	0f 2e       	mov	r0, r31
    25b0:	fe ed       	ldi	r31, 0xDE	; 222
    25b2:	2f 2e       	mov	r2, r31
    25b4:	f1 e0       	ldi	r31, 0x01	; 1
    25b6:	3f 2e       	mov	r3, r31
    25b8:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    25ba:	23 ee       	ldi	r18, 0xE3	; 227
    25bc:	31 e0       	ldi	r19, 0x01	; 1
    25be:	3a ab       	sts	0x5a, r19
    25c0:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    25c2:	0f 2e       	mov	r0, r31
    25c4:	fc ed       	ldi	r31, 0xDC	; 220
    25c6:	6f 2e       	mov	r6, r31
    25c8:	f1 e0       	ldi	r31, 0x01	; 1
    25ca:	7f 2e       	mov	r7, r31
    25cc:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    25ce:	05 e5       	ldi	r16, 0x55	; 85
    25d0:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    25d2:	cc 24       	eor	r12, r12
    25d4:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    25d6:	ee 24       	eor	r14, r14
    25d8:	68 94       	set
    25da:	e1 f8       	bld	r14, 1
    25dc:	22 c0       	rjmp	.+68     	; 0x2622 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    25de:	40 90 77 03 	lds	r4, 0x0377
    25e2:	50 90 78 03 	lds	r5, 0x0378
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    25e6:	0f 2e       	mov	r0, r31
    25e8:	f5 ee       	ldi	r31, 0xE5	; 229
    25ea:	8f 2e       	mov	r8, r31
    25ec:	f1 e0       	ldi	r31, 0x01	; 1
    25ee:	9f 2e       	mov	r9, r31
    25f0:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    25f2:	0f 2e       	mov	r0, r31
    25f4:	f7 ed       	ldi	r31, 0xD7	; 215
    25f6:	2f 2e       	mov	r2, r31
    25f8:	f1 e0       	ldi	r31, 0x01	; 1
    25fa:	3f 2e       	mov	r3, r31
    25fc:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    25fe:	44 ee       	ldi	r20, 0xE4	; 228
    2600:	51 e0       	ldi	r21, 0x01	; 1
    2602:	5a ab       	sts	0x5a, r21
    2604:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2606:	0f 2e       	mov	r0, r31
    2608:	fd ed       	ldi	r31, 0xDD	; 221
    260a:	6f 2e       	mov	r6, r31
    260c:	f1 e0       	ldi	r31, 0x01	; 1
    260e:	7f 2e       	mov	r7, r31
    2610:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    2612:	03 e3       	ldi	r16, 0x33	; 51
    2614:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    2616:	cc 24       	eor	r12, r12
    2618:	68 94       	set
    261a:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    261c:	ee 24       	eor	r14, r14
    261e:	68 94       	set
    2620:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    2622:	c3 01       	movw	r24, r6
    2624:	b2 01       	movw	r22, r4
    2626:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    262a:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    262c:	ed ed       	ldi	r30, 0xDD	; 221
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	80 64       	ori	r24, 0x40	; 64
    2634:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2636:	80 81       	ld	r24, Z
    2638:	8f 7b       	andi	r24, 0xBF	; 191
    263a:	80 83       	st	Z, r24
		DATA_BUS = 0;
    263c:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    263e:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	80 93 80 03 	sts	0x0380, r24
		
		compare_match_counter = 0;	
    2646:	10 92 7b 03 	sts	0x037B, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    264a:	8c 2d       	mov	r24, r12
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	24 e6       	ldi	r18, 0x64	; 100
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	82 9f       	mul	r24, r18
    2654:	d0 01       	movw	r26, r0
    2656:	83 9f       	mul	r24, r19
    2658:	b0 0d       	add	r27, r0
    265a:	92 9f       	mul	r25, r18
    265c:	b0 0d       	add	r27, r0
    265e:	11 24       	eor	r1, r1
    2660:	bc ab       	sts	0x5c, r27
    2662:	ab ab       	sts	0x5b, r26
    2664:	fe 01       	movw	r30, r28
    2666:	31 96       	adiw	r30, 0x01	; 1
    2668:	fc af       	sts	0x7c, r31
    266a:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    266c:	98 01       	movw	r18, r16
    266e:	2e 5f       	subi	r18, 0xFE	; 254
    2670:	3f 4f       	sbci	r19, 0xFF	; 255
    2672:	21 96       	adiw	r28, 0x01	; 1
    2674:	3f af       	sts	0x7f, r19
    2676:	2e af       	sts	0x7e, r18
    2678:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    267a:	1e ae       	sts	0xbe, r17
    267c:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    267e:	0f 2e       	mov	r0, r31
    2680:	f8 ed       	ldi	r31, 0xD8	; 216
    2682:	ef 2e       	mov	r14, r31
    2684:	f1 e0       	ldi	r31, 0x01	; 1
    2686:	ff 2e       	mov	r15, r31
    2688:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    268a:	0f 2e       	mov	r0, r31
    268c:	f4 ed       	ldi	r31, 0xD4	; 212
    268e:	cf 2e       	mov	r12, r31
    2690:	f1 e0       	ldi	r31, 0x01	; 1
    2692:	df 2e       	mov	r13, r31
    2694:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2696:	0f 2e       	mov	r0, r31
    2698:	fa ec       	ldi	r31, 0xCA	; 202
    269a:	af 2e       	mov	r10, r31
    269c:	f1 e0       	ldi	r31, 0x01	; 1
    269e:	bf 2e       	mov	r11, r31
    26a0:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    26a2:	eb ad       	sts	0x6b, r30
    26a4:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    26a6:	80 81       	ld	r24, Z
    26a8:	80 93 80 03 	sts	0x0380, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    26ac:	84 b5       	in	r24, 0x24	; 36
    26ae:	8f 60       	ori	r24, 0x0F	; 15
    26b0:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    26b6:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    26b8:	4d ad       	sts	0x6d, r20
    26ba:	5e ad       	sts	0x6e, r21
    26bc:	43 30       	cpi	r20, 0x03	; 3
    26be:	51 05       	cpc	r21, r1
    26c0:	24 f4       	brge	.+8      	; 0x26ca <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    26c2:	83 e0       	ldi	r24, 0x03	; 3
    26c4:	80 93 7f 03 	sts	0x037F, r24
    26c8:	03 c0       	rjmp	.+6      	; 0x26d0 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	80 93 7f 03 	sts	0x037F, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    26d0:	81 81       	ldd	r24, Z+1	; 0x01
    26d2:	92 81       	ldd	r25, Z+2	; 0x02
    26d4:	9a af       	sts	0x7a, r25
    26d6:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    26d8:	ad e0       	ldi	r26, 0x0D	; 13
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	be ab       	sts	0x5e, r27
    26de:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    26e0:	00 e0       	ldi	r16, 0x00	; 0
    26e2:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    26e4:	e1 e0       	ldi	r30, 0x01	; 1
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	0d a8       	sts	0x8d, r16
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <tune_8ths+0x1a8>
    26ec:	ee 0f       	add	r30, r30
    26ee:	ff 1f       	adc	r31, r31
    26f0:	0a 94       	dec	r0
    26f2:	e2 f7       	brpl	.-8      	; 0x26ec <tune_8ths+0x1a4>
    26f4:	f8 af       	sts	0x78, r31
    26f6:	ef ab       	sts	0x5f, r30
    26f8:	0e 2b       	or	r16, r30
    26fa:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    26fc:	ae e6       	ldi	r26, 0x6E	; 110
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	8c 91       	ld	r24, X
    2702:	8d 7f       	andi	r24, 0xFD	; 253
    2704:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2706:	c4 01       	movw	r24, r8
    2708:	b8 01       	movw	r22, r16
    270a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    270e:	e3 ef       	ldi	r30, 0xF3	; 243
    2710:	f1 e0       	ldi	r31, 0x01	; 1
    2712:	31 97       	sbiw	r30, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <tune_8ths+0x1ca>
    2716:	00 c0       	rjmp	.+0      	; 0x2718 <tune_8ths+0x1d0>
    2718:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    271a:	ae e6       	ldi	r26, 0x6E	; 110
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	8c 91       	ld	r24, X
    2720:	82 60       	ori	r24, 0x02	; 2
    2722:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    2724:	10 92 7e 03 	sts	0x037E, r1
				period_counter = 0;
    2728:	10 92 81 03 	sts	0x0381, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    272c:	e8 e1       	ldi	r30, 0x18	; 24
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	2f e0       	ldi	r18, 0x0F	; 15
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	f8 94       	cli
    2736:	a8 95       	wdr
    2738:	e0 93 60 00 	sts	0x0060, r30
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    2742:	80 91 7e 03 	lds	r24, 0x037E
    2746:	88 23       	and	r24, r24
    2748:	81 f5       	brne	.+96     	; 0x27aa <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    274a:	80 91 80 03 	lds	r24, 0x0380
    274e:	4b a9       	sts	0x4b, r20
    2750:	5c a9       	sts	0x4c, r21
    2752:	48 0f       	add	r20, r24
    2754:	51 1d       	adc	r21, r1
    2756:	ca 01       	movw	r24, r20
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	0e 94 39 03 	call	0x672	; 0x672 <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    275e:	c3 01       	movw	r24, r6
    2760:	b2 01       	movw	r22, r4
    2762:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2766:	c4 01       	movw	r24, r8
    2768:	b8 01       	movw	r22, r16
    276a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    276e:	c7 01       	movw	r24, r14
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    2778:	c6 01       	movw	r24, r12
    277a:	6f ef       	ldi	r22, 0xFF	; 255
    277c:	7f e3       	ldi	r23, 0x3F	; 63
    277e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    2782:	c5 01       	movw	r24, r10
    2784:	6f ef       	ldi	r22, 0xFF	; 255
    2786:	7f e3       	ldi	r23, 0x3F	; 63
    2788:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    278c:	c1 01       	movw	r24, r2
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	70 e2       	ldi	r23, 0x20	; 32
    2792:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    2796:	89 a9       	sts	0x49, r24
    2798:	9a a9       	sts	0x4a, r25
    279a:	6f ef       	ldi	r22, 0xFF	; 255
    279c:	7f e3       	ldi	r23, 0x3F	; 63
    279e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    27a2:	80 91 7e 03 	lds	r24, 0x037E
    27a6:	88 23       	and	r24, r24
    27a8:	81 f2       	breq	.-96     	; 0x274a <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    27aa:	58 e1       	ldi	r21, 0x18	; 24
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	50 93 60 00 	sts	0x0060, r21
    27b4:	10 92 60 00 	sts	0x0060, r1
    27b8:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    27ba:	80 91 7c 03 	lds	r24, 0x037C
    27be:	90 91 7d 03 	lds	r25, 0x037D
    27c2:	a9 ad       	sts	0x69, r26
    27c4:	ba ad       	sts	0x6a, r27
    27c6:	a8 17       	cp	r26, r24
    27c8:	b9 07       	cpc	r27, r25
    27ca:	50 f0       	brcs	.+20     	; 0x27e0 <tune_8ths+0x298>
    27cc:	80 91 af 02 	lds	r24, 0x02AF
    27d0:	81 30       	cpi	r24, 0x01	; 1
    27d2:	31 f4       	brne	.+12     	; 0x27e0 <tune_8ths+0x298>
    27d4:	8f a9       	sts	0x4f, r24
    27d6:	98 ad       	sts	0x68, r25
    27d8:	80 95       	com	r24
    27da:	90 95       	com	r25
    27dc:	08 23       	and	r16, r24
    27de:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    27e0:	80 91 7c 03 	lds	r24, 0x037C
    27e4:	90 91 7d 03 	lds	r25, 0x037D
    27e8:	e9 ad       	sts	0x69, r30
    27ea:	fa ad       	sts	0x6a, r31
    27ec:	8e 17       	cp	r24, r30
    27ee:	9f 07       	cpc	r25, r31
    27f0:	21 f4       	brne	.+8      	; 0x27fa <tune_8ths+0x2b2>
    27f2:	80 91 af 02 	lds	r24, 0x02AF
    27f6:	81 30       	cpi	r24, 0x01	; 1
    27f8:	71 f0       	breq	.+28     	; 0x2816 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    27fa:	f1 e0       	ldi	r31, 0x01	; 1
    27fc:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2800:	2d a9       	sts	0x4d, r18
    2802:	3e a9       	sts	0x4e, r19
    2804:	21 50       	subi	r18, 0x01	; 1
    2806:	30 40       	sbci	r19, 0x00	; 0
    2808:	3e ab       	sts	0x5e, r19
    280a:	2d ab       	sts	0x5d, r18
    280c:	4f ef       	ldi	r20, 0xFF	; 255
    280e:	2f 3f       	cpi	r18, 0xFF	; 255
    2810:	34 07       	cpc	r19, r20
    2812:	09 f0       	breq	.+2      	; 0x2816 <tune_8ths+0x2ce>
    2814:	67 cf       	rjmp	.-306    	; 0x26e4 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    2816:	21 96       	adiw	r28, 0x01	; 1
    2818:	ae ad       	sts	0x6e, r26
    281a:	bf ad       	sts	0x6f, r27
    281c:	21 97       	sbiw	r28, 0x01	; 1
    281e:	0d 93       	st	X+, r16
    2820:	1d 93       	st	X+, r17
    2822:	21 96       	adiw	r28, 0x01	; 1
    2824:	bf af       	sts	0x7f, r27
    2826:	ae af       	sts	0x7e, r26
    2828:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    282a:	ee e6       	ldi	r30, 0x6E	; 110
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	8d 7f       	andi	r24, 0xFD	; 253
    2832:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    2834:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2836:	2d ad       	sts	0x6d, r18
    2838:	3e ad       	sts	0x6e, r19
    283a:	2f 5f       	subi	r18, 0xFF	; 255
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	3e af       	sts	0x7e, r19
    2840:	2d af       	sts	0x7d, r18
    2842:	4b ad       	sts	0x6b, r20
    2844:	5c ad       	sts	0x6c, r21
    2846:	4d 5f       	subi	r20, 0xFD	; 253
    2848:	5f 4f       	sbci	r21, 0xFF	; 255
    284a:	5c af       	sts	0x7c, r21
    284c:	4b af       	sts	0x7b, r20
    284e:	20 31       	cpi	r18, 0x10	; 16
    2850:	31 05       	cpc	r19, r1
    2852:	09 f0       	breq	.+2      	; 0x2856 <tune_8ths+0x30e>
    2854:	26 cf       	rjmp	.-436    	; 0x26a2 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    2856:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    2858:	c0 5c       	subi	r28, 0xC0	; 192
    285a:	df 4f       	sbci	r29, 0xFF	; 255
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	1f 91       	pop	r17
    286c:	0f 91       	pop	r16
    286e:	ff 90       	pop	r15
    2870:	ef 90       	pop	r14
    2872:	df 90       	pop	r13
    2874:	cf 90       	pop	r12
    2876:	bf 90       	pop	r11
    2878:	af 90       	pop	r10
    287a:	9f 90       	pop	r9
    287c:	8f 90       	pop	r8
    287e:	7f 90       	pop	r7
    2880:	6f 90       	pop	r6
    2882:	5f 90       	pop	r5
    2884:	4f 90       	pop	r4
    2886:	3f 90       	pop	r3
    2888:	2f 90       	pop	r2
    288a:	08 95       	ret

0000288c <tune_filter>:
	
void tune_filter(void) {
    288c:	2f 92       	push	r2
    288e:	3f 92       	push	r3
    2890:	4f 92       	push	r4
    2892:	5f 92       	push	r5
    2894:	6f 92       	push	r6
    2896:	7f 92       	push	r7
    2898:	8f 92       	push	r8
    289a:	9f 92       	push	r9
    289c:	af 92       	push	r10
    289e:	bf 92       	push	r11
    28a0:	cf 92       	push	r12
    28a2:	df 92       	push	r13
    28a4:	ef 92       	push	r14
    28a6:	ff 92       	push	r15
    28a8:	0f 93       	push	r16
    28aa:	1f 93       	push	r17
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	e9 97       	sbiw	r28, 0x39	; 57
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    28c0:	de 01       	movw	r26, r28
    28c2:	11 96       	adiw	r26, 0x01	; 1
    28c4:	e0 e6       	ldi	r30, 0x60	; 96
    28c6:	f2 e0       	ldi	r31, 0x02	; 2
    28c8:	8d e2       	ldi	r24, 0x2D	; 45
    28ca:	01 90       	ld	r0, Z+
    28cc:	0d 92       	st	X+, r0
    28ce:	81 50       	subi	r24, 0x01	; 1
    28d0:	e1 f7       	brne	.-8      	; 0x28ca <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    28d2:	88 ed       	ldi	r24, 0xD8	; 216
    28d4:	91 e0       	ldi	r25, 0x01	; 1
    28d6:	60 e0       	ldi	r22, 0x00	; 0
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    28de:	81 ee       	ldi	r24, 0xE1	; 225
    28e0:	91 e0       	ldi	r25, 0x01	; 1
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    28ea:	82 ee       	ldi	r24, 0xE2	; 226
    28ec:	91 e0       	ldi	r25, 0x01	; 1
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    28f6:	87 eb       	ldi	r24, 0xB7	; 183
    28f8:	92 e0       	ldi	r25, 0x02	; 2
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2902:	8a ed       	ldi	r24, 0xDA	; 218
    2904:	91 e0       	ldi	r25, 0x01	; 1
    2906:	60 e0       	ldi	r22, 0x00	; 0
    2908:	70 e0       	ldi	r23, 0x00	; 0
    290a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    290e:	8f ed       	ldi	r24, 0xDF	; 223
    2910:	91 e0       	ldi	r25, 0x01	; 1
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	70 e0       	ldi	r23, 0x00	; 0
    2916:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    291a:	80 ee       	ldi	r24, 0xE0	; 224
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	70 e0       	ldi	r23, 0x00	; 0
    2922:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2926:	81 ed       	ldi	r24, 0xD1	; 209
    2928:	91 e0       	ldi	r25, 0x01	; 1
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2932:	86 ed       	ldi	r24, 0xD6	; 214
    2934:	91 e0       	ldi	r25, 0x01	; 1
    2936:	60 e0       	ldi	r22, 0x00	; 0
    2938:	70 e0       	ldi	r23, 0x00	; 0
    293a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    293e:	82 ed       	ldi	r24, 0xD2	; 210
    2940:	91 e0       	ldi	r25, 0x01	; 1
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    294a:	83 ed       	ldi	r24, 0xD3	; 211
    294c:	91 e0       	ldi	r25, 0x01	; 1
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    2956:	84 ed       	ldi	r24, 0xD4	; 212
    2958:	91 e0       	ldi	r25, 0x01	; 1
    295a:	6f ef       	ldi	r22, 0xFF	; 255
    295c:	7f e3       	ldi	r23, 0x3F	; 63
    295e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    2962:	85 ed       	ldi	r24, 0xD5	; 213
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	6f ef       	ldi	r22, 0xFF	; 255
    2968:	7f e3       	ldi	r23, 0x3F	; 63
    296a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    296e:	89 ed       	ldi	r24, 0xD9	; 217
    2970:	91 e0       	ldi	r25, 0x01	; 1
    2972:	60 e0       	ldi	r22, 0x00	; 0
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    297a:	8e ec       	ldi	r24, 0xCE	; 206
    297c:	91 e0       	ldi	r25, 0x01	; 1
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    2986:	8c ec       	ldi	r24, 0xCC	; 204
    2988:	91 e0       	ldi	r25, 0x01	; 1
    298a:	60 e0       	ldi	r22, 0x00	; 0
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    2992:	8a ec       	ldi	r24, 0xCA	; 202
    2994:	91 e0       	ldi	r25, 0x01	; 1
    2996:	6f ef       	ldi	r22, 0xFF	; 255
    2998:	7f e3       	ldi	r23, 0x3F	; 63
    299a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    299e:	88 ec       	ldi	r24, 0xC8	; 200
    29a0:	91 e0       	ldi	r25, 0x01	; 1
    29a2:	60 e0       	ldi	r22, 0x00	; 0
    29a4:	70 e0       	ldi	r23, 0x00	; 0
    29a6:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    29aa:	80 ed       	ldi	r24, 0xD0	; 208
    29ac:	91 e0       	ldi	r25, 0x01	; 1
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    29b6:	83 ee       	ldi	r24, 0xE3	; 227
    29b8:	91 e0       	ldi	r25, 0x01	; 1
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    29c2:	84 ee       	ldi	r24, 0xE4	; 228
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	60 e0       	ldi	r22, 0x00	; 0
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    29ce:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    29d0:	ed ed       	ldi	r30, 0xDD	; 221
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	80 64       	ori	r24, 0x40	; 64
    29d8:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    29da:	80 81       	ld	r24, Z
    29dc:	8f 7b       	andi	r24, 0xBF	; 191
    29de:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	80 93 80 03 	sts	0x0380, r24
	PORTF |= (1<<GATE); //turn gate on
    29e6:	89 9a       	sbi	0x11, 1	; 17
    29e8:	9e 01       	movw	r18, r28
    29ea:	2f 5f       	subi	r18, 0xFF	; 255
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
    29ee:	3d ab       	sts	0x5d, r19
    29f0:	2c ab       	sts	0x5c, r18
    29f2:	85 e1       	ldi	r24, 0x15	; 21
    29f4:	93 e0       	ldi	r25, 0x03	; 3
    29f6:	99 af       	sts	0x79, r25
    29f8:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    29fa:	1f aa       	sts	0x9f, r17
    29fc:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    29fe:	0f 2e       	mov	r0, r31
    2a00:	f4 ed       	ldi	r31, 0xD4	; 212
    2a02:	af 2e       	mov	r10, r31
    2a04:	f1 e0       	ldi	r31, 0x01	; 1
    2a06:	bf 2e       	mov	r11, r31
    2a08:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2a0a:	0f 2e       	mov	r0, r31
    2a0c:	f8 ed       	ldi	r31, 0xD8	; 216
    2a0e:	6f 2e       	mov	r6, r31
    2a10:	f1 e0       	ldi	r31, 0x01	; 1
    2a12:	7f 2e       	mov	r7, r31
    2a14:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2a16:	0f 2e       	mov	r0, r31
    2a18:	f5 ed       	ldi	r31, 0xD5	; 213
    2a1a:	4f 2e       	mov	r4, r31
    2a1c:	f1 e0       	ldi	r31, 0x01	; 1
    2a1e:	5f 2e       	mov	r5, r31
    2a20:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    2a22:	0f 2e       	mov	r0, r31
    2a24:	fa ec       	ldi	r31, 0xCA	; 202
    2a26:	2f 2e       	mov	r2, r31
    2a28:	f1 e0       	ldi	r31, 0x01	; 1
    2a2a:	3f 2e       	mov	r3, r31
    2a2c:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    2a2e:	ac a9       	sts	0x4c, r26
    2a30:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    2a32:	8c 91       	ld	r24, X
    2a34:	80 93 80 03 	sts	0x0380, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    2a38:	84 b5       	in	r24, 0x24	; 36
    2a3a:	8f 60       	ori	r24, 0x0F	; 15
    2a3c:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2a42:	ee e6       	ldi	r30, 0x6E	; 110
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	82 60       	ori	r24, 0x02	; 2
    2a4a:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    2a4c:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    2a4e:	ee a9       	sts	0x4e, r30
    2a50:	ff a9       	sts	0x4f, r31
    2a52:	e2 30       	cpi	r30, 0x02	; 2
    2a54:	f1 05       	cpc	r31, r1
    2a56:	24 f4       	brge	.+8      	; 0x2a60 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    2a58:	83 e0       	ldi	r24, 0x03	; 3
    2a5a:	80 93 7f 03 	sts	0x037F, r24
    2a5e:	03 c0       	rjmp	.+6      	; 0x2a66 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    2a60:	82 e0       	ldi	r24, 0x02	; 2
    2a62:	80 93 7f 03 	sts	0x037F, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    2a66:	11 96       	adiw	r26, 0x01	; 1
    2a68:	2d 91       	ld	r18, X+
    2a6a:	3c 91       	ld	r19, X
    2a6c:	12 97       	sbiw	r26, 0x02	; 2
    2a6e:	3b ab       	sts	0x5b, r19
    2a70:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2a72:	8d e0       	ldi	r24, 0x0D	; 13
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	9f a7       	lds	r25, 0x7f
    2a78:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    2a7a:	ee 24       	eor	r14, r14
    2a7c:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2a7e:	0f 2e       	mov	r0, r31
    2a80:	f1 ed       	ldi	r31, 0xD1	; 209
    2a82:	cf 2e       	mov	r12, r31
    2a84:	f1 e0       	ldi	r31, 0x01	; 1
    2a86:	df 2e       	mov	r13, r31
    2a88:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    2a8a:	0f 2e       	mov	r0, r31
    2a8c:	f6 ed       	ldi	r31, 0xD6	; 214
    2a8e:	8f 2e       	mov	r8, r31
    2a90:	f1 e0       	ldi	r31, 0x01	; 1
    2a92:	9f 2e       	mov	r9, r31
    2a94:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	0e a4       	lds	r16, 0xae
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <tune_filter+0x218>
    2aa0:	ee 0f       	add	r30, r30
    2aa2:	ff 1f       	adc	r31, r31
    2aa4:	0a 94       	dec	r0
    2aa6:	e2 f7       	brpl	.-8      	; 0x2aa0 <tune_filter+0x214>
    2aa8:	f9 ab       	sts	0x59, r31
    2aaa:	e8 ab       	sts	0x58, r30
    2aac:	ee 2a       	or	r14, r30
    2aae:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    2ab0:	c5 01       	movw	r24, r10
    2ab2:	b7 01       	movw	r22, r14
    2ab4:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
			count_finished = FALSE;
    2ab8:	10 92 7e 03 	sts	0x037E, r1
			period_counter = 0;
    2abc:	10 92 81 03 	sts	0x0381, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2ac0:	8f e0       	ldi	r24, 0x0F	; 15
    2ac2:	28 e1       	ldi	r18, 0x18	; 24
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	a8 95       	wdr
    2acc:	20 93 60 00 	sts	0x0060, r18
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2ad6:	80 91 7e 03 	lds	r24, 0x037E
    2ada:	88 23       	and	r24, r24
    2adc:	b1 f5       	brne	.+108    	; 0x2b4a <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    2ade:	02 ed       	ldi	r16, 0xD2	; 210
    2ae0:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2ae2:	80 91 80 03 	lds	r24, 0x0380
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	84 5d       	subi	r24, 0xD4	; 212
    2aea:	9e 4f       	sbci	r25, 0xFE	; 254
    2aec:	60 e0       	ldi	r22, 0x00	; 0
    2aee:	0e 94 39 03 	call	0x672	; 0x672 <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2af2:	c5 01       	movw	r24, r10
    2af4:	b7 01       	movw	r22, r14
    2af6:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    2afa:	c3 01       	movw	r24, r6
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	70 e0       	ldi	r23, 0x00	; 0
    2b00:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2b04:	c2 01       	movw	r24, r4
    2b06:	6f ef       	ldi	r22, 0xFF	; 255
    2b08:	7f e3       	ldi	r23, 0x3F	; 63
    2b0a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    2b0e:	c1 01       	movw	r24, r2
    2b10:	6f ef       	ldi	r22, 0xFF	; 255
    2b12:	7f e3       	ldi	r23, 0x3F	; 63
    2b14:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    2b18:	8e ec       	ldi	r24, 0xCE	; 206
    2b1a:	91 e0       	ldi	r25, 0x01	; 1
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2b24:	c6 01       	movw	r24, r12
    2b26:	60 e0       	ldi	r22, 0x00	; 0
    2b28:	70 e0       	ldi	r23, 0x00	; 0
    2b2a:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    2b2e:	c4 01       	movw	r24, r8
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	70 e0       	ldi	r23, 0x00	; 0
    2b34:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    2b38:	c8 01       	movw	r24, r16
    2b3a:	60 e0       	ldi	r22, 0x00	; 0
    2b3c:	70 e0       	ldi	r23, 0x00	; 0
    2b3e:	0e 94 05 02 	call	0x40a	; 0x40a <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    2b42:	80 91 7e 03 	lds	r24, 0x037E
    2b46:	88 23       	and	r24, r24
    2b48:	61 f2       	breq	.-104    	; 0x2ae2 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    2b4a:	88 e1       	ldi	r24, 0x18	; 24
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	80 93 60 00 	sts	0x0060, r24
    2b54:	10 92 60 00 	sts	0x0060, r1
    2b58:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    2b5a:	80 91 7c 03 	lds	r24, 0x037C
    2b5e:	90 91 7d 03 	lds	r25, 0x037D
    2b62:	2a a9       	sts	0x4a, r18
    2b64:	3b a9       	sts	0x4b, r19
    2b66:	28 17       	cp	r18, r24
    2b68:	39 07       	cpc	r19, r25
    2b6a:	50 f0       	brcs	.+20     	; 0x2b80 <tune_filter+0x2f4>
    2b6c:	80 91 af 02 	lds	r24, 0x02AF
    2b70:	81 30       	cpi	r24, 0x01	; 1
    2b72:	31 f4       	brne	.+12     	; 0x2b80 <tune_filter+0x2f4>
    2b74:	88 a9       	sts	0x48, r24
    2b76:	99 a9       	sts	0x49, r25
    2b78:	80 95       	com	r24
    2b7a:	90 95       	com	r25
    2b7c:	e8 22       	and	r14, r24
    2b7e:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    2b80:	80 91 7c 03 	lds	r24, 0x037C
    2b84:	90 91 7d 03 	lds	r25, 0x037D
    2b88:	ea a9       	sts	0x4a, r30
    2b8a:	fb a9       	sts	0x4b, r31
    2b8c:	8e 17       	cp	r24, r30
    2b8e:	9f 07       	cpc	r25, r31
    2b90:	21 f4       	brne	.+8      	; 0x2b9a <tune_filter+0x30e>
    2b92:	80 91 af 02 	lds	r24, 0x02AF
    2b96:	81 30       	cpi	r24, 0x01	; 1
    2b98:	71 f0       	breq	.+28     	; 0x2bb6 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2ba0:	2e a5       	lds	r18, 0x6e
    2ba2:	3f a5       	lds	r19, 0x6f
    2ba4:	21 50       	subi	r18, 0x01	; 1
    2ba6:	30 40       	sbci	r19, 0x00	; 0
    2ba8:	3f a7       	lds	r19, 0x7f
    2baa:	2e a7       	lds	r18, 0x7e
    2bac:	8f ef       	ldi	r24, 0xFF	; 255
    2bae:	2f 3f       	cpi	r18, 0xFF	; 255
    2bb0:	38 07       	cpc	r19, r24
    2bb2:	09 f0       	breq	.+2      	; 0x2bb6 <tune_filter+0x32a>
    2bb4:	70 cf       	rjmp	.-288    	; 0x2a96 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    2bb6:	ee a9       	sts	0x4e, r30
    2bb8:	ff a9       	sts	0x4f, r31
    2bba:	31 96       	adiw	r30, 0x01	; 1
    2bbc:	ff ab       	sts	0x5f, r31
    2bbe:	ee ab       	sts	0x5e, r30
    2bc0:	c7 01       	movw	r24, r14
    2bc2:	80 96       	adiw	r24, 0x20	; 32
    2bc4:	e8 ad       	sts	0x68, r30
    2bc6:	f9 ad       	sts	0x69, r31
    2bc8:	81 93       	st	Z+, r24
    2bca:	91 93       	st	Z+, r25
    2bcc:	f9 af       	sts	0x79, r31
    2bce:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2bd0:	ee e6       	ldi	r30, 0x6E	; 110
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	8d 7f       	andi	r24, 0xFD	; 253
    2bd8:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    2bda:	14 bc       	out	0x24, r1	; 36
    2bdc:	2c a9       	sts	0x4c, r18
    2bde:	3d a9       	sts	0x4d, r19
    2be0:	2d 5f       	subi	r18, 0xFD	; 253
    2be2:	3f 4f       	sbci	r19, 0xFF	; 255
    2be4:	3d ab       	sts	0x5d, r19
    2be6:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    2be8:	8e a9       	sts	0x4e, r24
    2bea:	9f a9       	sts	0x4f, r25
    2bec:	8f 30       	cpi	r24, 0x0F	; 15
    2bee:	91 05       	cpc	r25, r1
    2bf0:	09 f0       	breq	.+2      	; 0x2bf4 <tune_filter+0x368>
    2bf2:	1d cf       	rjmp	.-454    	; 0x2a2e <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2bf4:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2bf6:	e9 96       	adiw	r28, 0x39	; 57
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	ff 90       	pop	r15
    2c0c:	ef 90       	pop	r14
    2c0e:	df 90       	pop	r13
    2c10:	cf 90       	pop	r12
    2c12:	bf 90       	pop	r11
    2c14:	af 90       	pop	r10
    2c16:	9f 90       	pop	r9
    2c18:	8f 90       	pop	r8
    2c1a:	7f 90       	pop	r7
    2c1c:	6f 90       	pop	r6
    2c1e:	5f 90       	pop	r5
    2c20:	4f 90       	pop	r4
    2c22:	3f 90       	pop	r3
    2c24:	2f 90       	pop	r2
    2c26:	08 95       	ret

00002c28 <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2c28:	83 e1       	ldi	r24, 0x13	; 19
    2c2a:	93 e0       	ldi	r25, 0x03	; 3
    2c2c:	6c e0       	ldi	r22, 0x0C	; 12
    2c2e:	76 e0       	ldi	r23, 0x06	; 6
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2c38:	85 e5       	ldi	r24, 0x55	; 85
    2c3a:	93 e0       	ldi	r25, 0x03	; 3
    2c3c:	6e e4       	ldi	r22, 0x4E	; 78
    2c3e:	76 e0       	ldi	r23, 0x06	; 6
    2c40:	42 e2       	ldi	r20, 0x22	; 34
    2c42:	50 e0       	ldi	r21, 0x00	; 0
    2c44:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2c48:	83 e3       	ldi	r24, 0x33	; 51
    2c4a:	93 e0       	ldi	r25, 0x03	; 3
    2c4c:	6c e2       	ldi	r22, 0x2C	; 44
    2c4e:	76 e0       	ldi	r23, 0x06	; 6
    2c50:	42 e2       	ldi	r20, 0x22	; 34
    2c52:	50 e0       	ldi	r21, 0x00	; 0
    2c54:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <__eeupd_block_m6450a>
	
	
}
    2c58:	08 95       	ret

00002c5a <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    2c5a:	82 e7       	ldi	r24, 0x72	; 114
    2c5c:	96 e0       	ldi	r25, 0x06	; 6
    2c5e:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__eerd_word_m6450a>
    2c62:	90 93 7a 03 	sts	0x037A, r25
    2c66:	80 93 79 03 	sts	0x0379, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    2c6a:	80 e7       	ldi	r24, 0x70	; 112
    2c6c:	96 e0       	ldi	r25, 0x06	; 6
    2c6e:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <__eerd_word_m6450a>
    2c72:	90 93 78 03 	sts	0x0378, r25
    2c76:	80 93 77 03 	sts	0x0377, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    2c7a:	85 e5       	ldi	r24, 0x55	; 85
    2c7c:	93 e0       	ldi	r25, 0x03	; 3
    2c7e:	6e e4       	ldi	r22, 0x4E	; 78
    2c80:	76 e0       	ldi	r23, 0x06	; 6
    2c82:	42 e2       	ldi	r20, 0x22	; 34
    2c84:	50 e0       	ldi	r21, 0x00	; 0
    2c86:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    2c8a:	83 e3       	ldi	r24, 0x33	; 51
    2c8c:	93 e0       	ldi	r25, 0x03	; 3
    2c8e:	6c e2       	ldi	r22, 0x2C	; 44
    2c90:	76 e0       	ldi	r23, 0x06	; 6
    2c92:	42 e2       	ldi	r20, 0x22	; 34
    2c94:	50 e0       	ldi	r21, 0x00	; 0
    2c96:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    2c9a:	83 e1       	ldi	r24, 0x13	; 19
    2c9c:	93 e0       	ldi	r25, 0x03	; 3
    2c9e:	6c e0       	ldi	r22, 0x0C	; 12
    2ca0:	76 e0       	ldi	r23, 0x06	; 6
    2ca2:	40 e2       	ldi	r20, 0x20	; 32
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    2caa:	08 95       	ret

00002cac <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    2cac:	98 2f       	mov	r25, r24
    2cae:	96 95       	lsr	r25
    2cb0:	96 95       	lsr	r25
    2cb2:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    2cb4:	29 2f       	mov	r18, r25
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	f9 01       	movw	r30, r18
    2cba:	31 97       	sbiw	r30, 0x01	; 1
    2cbc:	ee 0f       	add	r30, r30
    2cbe:	ff 1f       	adc	r31, r31
    2cc0:	e6 0f       	add	r30, r22
    2cc2:	f7 1f       	adc	r31, r23
    2cc4:	01 90       	ld	r0, Z+
    2cc6:	f0 81       	ld	r31, Z
    2cc8:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    2cca:	22 0f       	add	r18, r18
    2ccc:	33 1f       	adc	r19, r19
    2cce:	26 0f       	add	r18, r22
    2cd0:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2cd2:	d9 01       	movw	r26, r18
    2cd4:	4d 91       	ld	r20, X+
    2cd6:	5c 91       	ld	r21, X
    2cd8:	11 97       	sbiw	r26, 0x01	; 1
    2cda:	4e 1b       	sub	r20, r30
    2cdc:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2cde:	99 0f       	add	r25, r25
    2ce0:	99 0f       	add	r25, r25
    2ce2:	99 0f       	add	r25, r25
    2ce4:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	48 9f       	mul	r20, r24
    2cea:	90 01       	movw	r18, r0
    2cec:	49 9f       	mul	r20, r25
    2cee:	30 0d       	add	r19, r0
    2cf0:	58 9f       	mul	r21, r24
    2cf2:	30 0d       	add	r19, r0
    2cf4:	11 24       	eor	r1, r1
    2cf6:	36 95       	lsr	r19
    2cf8:	27 95       	ror	r18
    2cfa:	36 95       	lsr	r19
    2cfc:	27 95       	ror	r18
    2cfe:	36 95       	lsr	r19
    2d00:	27 95       	ror	r18
    2d02:	e2 0f       	add	r30, r18
    2d04:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2d06:	8e 2f       	mov	r24, r30
    2d08:	9f 2f       	mov	r25, r31
    2d0a:	08 95       	ret

00002d0c <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	a2 97       	sbiw	r28, 0x22	; 34
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2d20:	de 01       	movw	r26, r28
    2d22:	11 96       	adiw	r26, 0x01	; 1
    2d24:	ed e8       	ldi	r30, 0x8D	; 141
    2d26:	f2 e0       	ldi	r31, 0x02	; 2
    2d28:	82 e2       	ldi	r24, 0x22	; 34
    2d2a:	01 90       	ld	r0, Z+
    2d2c:	0d 92       	st	X+, r0
    2d2e:	81 50       	subi	r24, 0x01	; 1
    2d30:	e1 f7       	brne	.-8      	; 0x2d2a <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2d32:	a5 e5       	ldi	r26, 0x55	; 85
    2d34:	b3 e0       	ldi	r27, 0x03	; 3
    2d36:	fe 01       	movw	r30, r28
    2d38:	31 96       	adiw	r30, 0x01	; 1
    2d3a:	82 e2       	ldi	r24, 0x22	; 34
    2d3c:	01 90       	ld	r0, Z+
    2d3e:	0d 92       	st	X+, r0
    2d40:	81 50       	subi	r24, 0x01	; 1
    2d42:	e1 f7       	brne	.-8      	; 0x2d3c <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2d44:	a3 e3       	ldi	r26, 0x33	; 51
    2d46:	b3 e0       	ldi	r27, 0x03	; 3
    2d48:	fe 01       	movw	r30, r28
    2d4a:	31 96       	adiw	r30, 0x01	; 1
    2d4c:	82 e2       	ldi	r24, 0x22	; 34
    2d4e:	01 90       	ld	r0, Z+
    2d50:	0d 92       	st	X+, r0
    2d52:	81 50       	subi	r24, 0x01	; 1
    2d54:	e1 f7       	brne	.-8      	; 0x2d4e <set_one_volt_per_octave+0x42>
	
	
}
    2d56:	a2 96       	adiw	r28, 0x22	; 34
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	08 95       	ret

00002d68 <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    2d68:	ef e6       	ldi	r30, 0x6F	; 111
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	82 70       	andi	r24, 0x02	; 2
    2d70:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    2d72:	e1 e8       	ldi	r30, 0x81	; 129
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	87 7f       	andi	r24, 0xF7	; 247
    2d7a:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    2d7c:	8f e0       	ldi	r24, 0x0F	; 15
    2d7e:	6f e0       	ldi	r22, 0x0F	; 15
    2d80:	7e e5       	ldi	r23, 0x5E	; 94
    2d82:	0e 94 40 11 	call	0x2280	; 0x2280 <set_vco_init_cv>
    2d86:	90 93 7a 03 	sts	0x037A, r25
    2d8a:	80 93 79 03 	sts	0x0379, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    2d8e:	80 ef       	ldi	r24, 0xF0	; 240
    2d90:	6f e0       	ldi	r22, 0x0F	; 15
    2d92:	7e e5       	ldi	r23, 0x5E	; 94
    2d94:	0e 94 40 11 	call	0x2280	; 0x2280 <set_vco_init_cv>
    2d98:	90 93 78 03 	sts	0x0378, r25
    2d9c:	80 93 77 03 	sts	0x0377, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    2da0:	8f e0       	ldi	r24, 0x0F	; 15
    2da2:	0e 94 a4 12 	call	0x2548	; 0x2548 <tune_8ths>
			tune_8ths(VCO2);
    2da6:	80 ef       	ldi	r24, 0xF0	; 240
    2da8:	0e 94 a4 12 	call	0x2548	; 0x2548 <tune_8ths>
			tune_filter();
    2dac:	0e 94 46 14 	call	0x288c	; 0x288c <tune_filter>
			save_tuning_tables();
    2db0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <save_tuning_tables>
    2db4:	8f e4       	ldi	r24, 0x4F	; 79
    2db6:	93 ec       	ldi	r25, 0xC3	; 195
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <tune+0x50>
    2dbc:	00 c0       	rjmp	.+0      	; 0x2dbe <tune+0x56>
    2dbe:	00 00       	nop
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    2dc0:	08 95       	ret

00002dc2 <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2dc2:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2dc4:	98 2f       	mov	r25, r24
    2dc6:	9c 70       	andi	r25, 0x0C	; 12
    2dc8:	20 91 c5 02 	lds	r18, 0x02C5
    2dcc:	92 2b       	or	r25, r18
    2dce:	90 93 c5 02 	sts	0x02C5, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2dd2:	98 2f       	mov	r25, r24
    2dd4:	92 95       	swap	r25
    2dd6:	96 95       	lsr	r25
    2dd8:	97 70       	andi	r25, 0x07	; 7
    2dda:	90 ff       	sbrs	r25, 0
    2ddc:	16 c0       	rjmp	.+44     	; 0x2e0a <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2dde:	20 91 85 03 	lds	r18, 0x0385
    2de2:	30 91 86 03 	lds	r19, 0x0386
    2de6:	2f 5f       	subi	r18, 0xFF	; 255
    2de8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dea:	30 93 86 03 	sts	0x0386, r19
    2dee:	20 93 85 03 	sts	0x0385, r18
    2df2:	92 e0       	ldi	r25, 0x02	; 2
    2df4:	28 35       	cpi	r18, 0x58	; 88
    2df6:	39 07       	cpc	r19, r25
    2df8:	61 f4       	brne	.+24     	; 0x2e12 <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2dfa:	10 92 86 03 	sts	0x0386, r1
    2dfe:	10 92 85 03 	sts	0x0385, r1
			current_patch.mode = CAL;
    2e02:	95 e0       	ldi	r25, 0x05	; 5
    2e04:	90 93 0b 03 	sts	0x030B, r25
    2e08:	04 c0       	rjmp	.+8      	; 0x2e12 <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2e0a:	10 92 86 03 	sts	0x0386, r1
    2e0e:	10 92 85 03 	sts	0x0385, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2e12:	90 91 87 03 	lds	r25, 0x0387
    2e16:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2e18:	98 27       	eor	r25, r24
    2e1a:	90 93 87 03 	sts	0x0387, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2e1e:	89 23       	and	r24, r25
    2e20:	08 95       	ret

00002e22 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2e22:	ed ed       	ldi	r30, 0xDD	; 221
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	90 81       	ld	r25, Z
    2e28:	9f 7b       	andi	r25, 0xBF	; 191
    2e2a:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	21 70       	andi	r18, 0x01	; 1
    2e32:	30 70       	andi	r19, 0x00	; 0
    2e34:	22 0f       	add	r18, r18
    2e36:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2e38:	68 2f       	mov	r22, r24
    2e3a:	62 95       	swap	r22
    2e3c:	66 95       	lsr	r22
    2e3e:	67 70       	andi	r22, 0x07	; 7
    2e40:	67 95       	ror	r22
    2e42:	66 27       	eor	r22, r22
    2e44:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2e46:	26 2b       	or	r18, r22
    2e48:	98 2f       	mov	r25, r24
    2e4a:	96 95       	lsr	r25
    2e4c:	96 95       	lsr	r25
    2e4e:	91 70       	andi	r25, 0x01	; 1
    2e50:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2e52:	68 2f       	mov	r22, r24
    2e54:	66 1f       	adc	r22, r22
    2e56:	66 27       	eor	r22, r22
    2e58:	66 1f       	adc	r22, r22
    2e5a:	66 0f       	add	r22, r22
    2e5c:	66 0f       	add	r22, r22
    2e5e:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2e60:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2e62:	a8 2f       	mov	r26, r24
    2e64:	a6 95       	lsr	r26
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	a1 70       	andi	r26, 0x01	; 1
    2e6a:	b0 70       	andi	r27, 0x00	; 0
    2e6c:	bd 01       	movw	r22, r26
    2e6e:	66 0f       	add	r22, r22
    2e70:	77 1f       	adc	r23, r23
    2e72:	66 0f       	add	r22, r22
    2e74:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2e76:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2e78:	68 2f       	mov	r22, r24
    2e7a:	62 95       	swap	r22
    2e7c:	6f 70       	andi	r22, 0x0F	; 15
    2e7e:	70 e0       	ldi	r23, 0x00	; 0
    2e80:	61 70       	andi	r22, 0x01	; 1
    2e82:	70 70       	andi	r23, 0x00	; 0
    2e84:	ab 01       	movw	r20, r22
    2e86:	00 24       	eor	r0, r0
    2e88:	56 95       	lsr	r21
    2e8a:	47 95       	ror	r20
    2e8c:	07 94       	ror	r0
    2e8e:	56 95       	lsr	r21
    2e90:	47 95       	ror	r20
    2e92:	07 94       	ror	r0
    2e94:	54 2f       	mov	r21, r20
    2e96:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2e98:	62 2f       	mov	r22, r18
    2e9a:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2e9c:	48 2f       	mov	r20, r24
    2e9e:	42 95       	swap	r20
    2ea0:	46 95       	lsr	r20
    2ea2:	46 95       	lsr	r20
    2ea4:	43 70       	andi	r20, 0x03	; 3
    2ea6:	50 e0       	ldi	r21, 0x00	; 0
    2ea8:	41 70       	andi	r20, 0x01	; 1
    2eaa:	50 70       	andi	r21, 0x00	; 0
    2eac:	9a 01       	movw	r18, r20
    2eae:	22 0f       	add	r18, r18
    2eb0:	33 1f       	adc	r19, r19
    2eb2:	22 95       	swap	r18
    2eb4:	32 95       	swap	r19
    2eb6:	30 7f       	andi	r19, 0xF0	; 240
    2eb8:	32 27       	eor	r19, r18
    2eba:	20 7f       	andi	r18, 0xF0	; 240
    2ebc:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2ebe:	46 2f       	mov	r20, r22
    2ec0:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2ec2:	86 95       	lsr	r24
    2ec4:	86 95       	lsr	r24
    2ec6:	86 95       	lsr	r24
    2ec8:	28 2f       	mov	r18, r24
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	21 70       	andi	r18, 0x01	; 1
    2ece:	30 70       	andi	r19, 0x00	; 0
    2ed0:	c9 01       	movw	r24, r18
    2ed2:	82 95       	swap	r24
    2ed4:	92 95       	swap	r25
    2ed6:	90 7f       	andi	r25, 0xF0	; 240
    2ed8:	98 27       	eor	r25, r24
    2eda:	80 7f       	andi	r24, 0xF0	; 240
    2edc:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2ede:	84 2b       	or	r24, r20
    2ee0:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2ee2:	80 81       	ld	r24, Z
    2ee4:	80 64       	ori	r24, 0x40	; 64
    2ee6:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2ee8:	80 81       	ld	r24, Z
    2eea:	8f 7b       	andi	r24, 0xBF	; 191
    2eec:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2eee:	12 b8       	out	0x02, r1	; 2
	
	
    2ef0:	08 95       	ret

00002ef2 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2ef2:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2ef4:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2ef6:	74 83       	std	Z+4, r23	; 0x04
    2ef8:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2efa:	11 82       	std	Z+1, r1	; 0x01
    2efc:	10 82       	st	Z, r1
}
    2efe:	08 95       	ret

00002f00 <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2f00:	1f 93       	push	r17
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	ec 01       	movw	r28, r24
    2f08:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2f0a:	0e 94 ef 17 	call	0x2fde	; 0x2fde <store_and_clear_interrupt>
    2f0e:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2f10:	39 81       	ldd	r19, Y+1	; 0x01
    2f12:	83 2f       	mov	r24, r19
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	01 96       	adiw	r24, 0x01	; 1
    2f18:	6a 81       	ldd	r22, Y+2	; 0x02
    2f1a:	70 e0       	ldi	r23, 0x00	; 0
    2f1c:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__divmodhi4>
    2f20:	48 81       	ld	r20, Y
    2f22:	50 e0       	ldi	r21, 0x00	; 0
    2f24:	84 17       	cp	r24, r20
    2f26:	95 07       	cpc	r25, r21
    2f28:	29 f4       	brne	.+10     	; 0x2f34 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2f2a:	82 2f       	mov	r24, r18
    2f2c:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <restore_interrupt_setting>
      return false;
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	11 c0       	rjmp	.+34     	; 0x2f56 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2f34:	eb 81       	ldd	r30, Y+3	; 0x03
    2f36:	fc 81       	ldd	r31, Y+4	; 0x04
    2f38:	e3 0f       	add	r30, r19
    2f3a:	f1 1d       	adc	r31, r1
    2f3c:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	01 96       	adiw	r24, 0x01	; 1
    2f44:	6a 81       	ldd	r22, Y+2	; 0x02
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__divmodhi4>
    2f4c:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2f4e:	82 2f       	mov	r24, r18
    2f50:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <restore_interrupt_setting>
      return true;
    2f54:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	1f 91       	pop	r17
    2f5c:	08 95       	ret

00002f5e <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2f64:	0e 94 ef 17 	call	0x2fde	; 0x2fde <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2f68:	29 81       	ldd	r18, Y+1	; 0x01
    2f6a:	98 81       	ld	r25, Y
    2f6c:	29 17       	cp	r18, r25
    2f6e:	18 f0       	brcs	.+6      	; 0x2f76 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2f70:	c2 2f       	mov	r28, r18
    2f72:	c9 1b       	sub	r28, r25
    2f74:	03 c0       	rjmp	.+6      	; 0x2f7c <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2f76:	ca 81       	ldd	r28, Y+2	; 0x02
    2f78:	c2 0f       	add	r28, r18
    2f7a:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2f7c:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <restore_interrupt_setting>
   return len;
}
    2f80:	8c 2f       	mov	r24, r28
    2f82:	df 91       	pop	r29
    2f84:	cf 91       	pop	r28
    2f86:	08 95       	ret

00002f88 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2f88:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2f8a:	20 81       	ld	r18, Z
    2f8c:	86 2f       	mov	r24, r22
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	82 0f       	add	r24, r18
    2f92:	91 1d       	adc	r25, r1
    2f94:	62 81       	ldd	r22, Z+2	; 0x02
    2f96:	70 e0       	ldi	r23, 0x00	; 0
    2f98:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__divmodhi4>
    2f9c:	03 80       	ldd	r0, Z+3	; 0x03
    2f9e:	f4 81       	ldd	r31, Z+4	; 0x04
    2fa0:	e0 2d       	mov	r30, r0
    2fa2:	e8 0f       	add	r30, r24
    2fa4:	f9 1f       	adc	r31, r25
}
    2fa6:	80 81       	ld	r24, Z
    2fa8:	08 95       	ret

00002faa <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2faa:	1f 93       	push	r17
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	ec 01       	movw	r28, r24
    2fb2:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2fb4:	0e 94 ef 17 	call	0x2fde	; 0x2fde <store_and_clear_interrupt>
    2fb8:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2fba:	88 81       	ld	r24, Y
    2fbc:	21 2f       	mov	r18, r17
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	28 0f       	add	r18, r24
    2fc2:	31 1d       	adc	r19, r1
    2fc4:	6a 81       	ldd	r22, Y+2	; 0x02
    2fc6:	c9 01       	movw	r24, r18
    2fc8:	70 e0       	ldi	r23, 0x00	; 0
    2fca:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__divmodhi4>
    2fce:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2fd0:	84 2f       	mov	r24, r20
    2fd2:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <restore_interrupt_setting>
}
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	08 95       	ret

00002fde <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2fde:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2fe0:	f8 94       	cli
   return sreg;
}
    2fe2:	08 95       	ret

00002fe4 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2fe4:	8f bf       	out	0x3f, r24	; 63
}
    2fe6:	08 95       	ret

00002fe8 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2fe8:	88 1f       	adc	r24, r24
    2fea:	88 27       	eor	r24, r24
    2fec:	88 1f       	adc	r24, r24
    2fee:	08 95       	ret

00002ff0 <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2ff0:	91 e0       	ldi	r25, 0x01	; 1
    2ff2:	88 3f       	cpi	r24, 0xF8	; 248
    2ff4:	08 f4       	brcc	.+2      	; 0x2ff8 <midi_is_realtime+0x8>
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
}
    2ff8:	89 2f       	mov	r24, r25
    2ffa:	08 95       	ret

00002ffc <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2ffc:	28 2f       	mov	r18, r24
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	20 7f       	andi	r18, 0xF0	; 240
    3002:	30 70       	andi	r19, 0x00	; 0
    3004:	20 3c       	cpi	r18, 0xC0	; 192
    3006:	31 05       	cpc	r19, r1
    3008:	e9 f1       	breq	.+122    	; 0x3084 <midi_packet_length+0x88>
    300a:	21 3c       	cpi	r18, 0xC1	; 193
    300c:	31 05       	cpc	r19, r1
    300e:	8c f4       	brge	.+34     	; 0x3032 <midi_packet_length+0x36>
    3010:	20 39       	cpi	r18, 0x90	; 144
    3012:	31 05       	cpc	r19, r1
    3014:	e1 f0       	breq	.+56     	; 0x304e <midi_packet_length+0x52>
    3016:	21 39       	cpi	r18, 0x91	; 145
    3018:	31 05       	cpc	r19, r1
    301a:	24 f4       	brge	.+8      	; 0x3024 <midi_packet_length+0x28>
    301c:	20 38       	cpi	r18, 0x80	; 128
    301e:	31 05       	cpc	r19, r1
    3020:	79 f5       	brne	.+94     	; 0x3080 <midi_packet_length+0x84>
    3022:	15 c0       	rjmp	.+42     	; 0x304e <midi_packet_length+0x52>
    3024:	20 3a       	cpi	r18, 0xA0	; 160
    3026:	31 05       	cpc	r19, r1
    3028:	91 f0       	breq	.+36     	; 0x304e <midi_packet_length+0x52>
    302a:	20 3b       	cpi	r18, 0xB0	; 176
    302c:	31 05       	cpc	r19, r1
    302e:	41 f5       	brne	.+80     	; 0x3080 <midi_packet_length+0x84>
    3030:	0e c0       	rjmp	.+28     	; 0x304e <midi_packet_length+0x52>
    3032:	20 3e       	cpi	r18, 0xE0	; 224
    3034:	31 05       	cpc	r19, r1
    3036:	59 f0       	breq	.+22     	; 0x304e <midi_packet_length+0x52>
    3038:	21 3e       	cpi	r18, 0xE1	; 225
    303a:	31 05       	cpc	r19, r1
    303c:	24 f4       	brge	.+8      	; 0x3046 <midi_packet_length+0x4a>
    303e:	20 3d       	cpi	r18, 0xD0	; 208
    3040:	31 05       	cpc	r19, r1
    3042:	f1 f4       	brne	.+60     	; 0x3080 <midi_packet_length+0x84>
    3044:	1f c0       	rjmp	.+62     	; 0x3084 <midi_packet_length+0x88>
    3046:	20 3f       	cpi	r18, 0xF0	; 240
    3048:	31 05       	cpc	r19, r1
    304a:	d1 f4       	brne	.+52     	; 0x3080 <midi_packet_length+0x84>
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    304e:	83 e0       	ldi	r24, 0x03	; 3
    3050:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    3052:	86 3f       	cpi	r24, 0xF6	; 246
    3054:	79 f0       	breq	.+30     	; 0x3074 <midi_packet_length+0x78>
    3056:	87 3f       	cpi	r24, 0xF7	; 247
    3058:	38 f4       	brcc	.+14     	; 0x3068 <midi_packet_length+0x6c>
    305a:	82 3f       	cpi	r24, 0xF2	; 242
    305c:	a9 f0       	breq	.+42     	; 0x3088 <midi_packet_length+0x8c>
    305e:	83 3f       	cpi	r24, 0xF3	; 243
    3060:	59 f0       	breq	.+22     	; 0x3078 <midi_packet_length+0x7c>
    3062:	81 3f       	cpi	r24, 0xF1	; 241
    3064:	59 f4       	brne	.+22     	; 0x307c <midi_packet_length+0x80>
    3066:	08 c0       	rjmp	.+16     	; 0x3078 <midi_packet_length+0x7c>
    3068:	88 3f       	cpi	r24, 0xF8	; 248
    306a:	40 f0       	brcs	.+16     	; 0x307c <midi_packet_length+0x80>
    306c:	8d 3f       	cpi	r24, 0xFD	; 253
    306e:	10 f0       	brcs	.+4      	; 0x3074 <midi_packet_length+0x78>
    3070:	8e 3f       	cpi	r24, 0xFE	; 254
    3072:	20 f0       	brcs	.+8      	; 0x307c <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    3078:	82 e0       	ldi	r24, 0x02	; 2
    307a:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	08 95       	ret
         }
      default:
         return UNDEFINED;
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    3084:	82 e0       	ldi	r24, 0x02	; 2
    3086:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    3088:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    308a:	08 95       	ret

0000308c <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    308c:	0f 93       	push	r16
    308e:	34 2f       	mov	r19, r20
    3090:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    3092:	46 2f       	mov	r20, r22
    3094:	4f 70       	andi	r20, 0x0F	; 15
    3096:	40 6b       	ori	r20, 0xB0	; 176
    3098:	23 2f       	mov	r18, r19
    309a:	2f 77       	andi	r18, 0x7F	; 127
    309c:	0f 77       	andi	r16, 0x7F	; 127
    309e:	dc 01       	movw	r26, r24
    30a0:	ed 91       	ld	r30, X+
    30a2:	fc 91       	ld	r31, X
    30a4:	63 e0       	ldi	r22, 0x03	; 3
    30a6:	70 e0       	ldi	r23, 0x00	; 0
    30a8:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    30aa:	0f 91       	pop	r16
    30ac:	08 95       	ret

000030ae <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    30ae:	0f 93       	push	r16
    30b0:	34 2f       	mov	r19, r20
    30b2:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    30b4:	46 2f       	mov	r20, r22
    30b6:	4f 70       	andi	r20, 0x0F	; 15
    30b8:	40 69       	ori	r20, 0x90	; 144
    30ba:	23 2f       	mov	r18, r19
    30bc:	2f 77       	andi	r18, 0x7F	; 127
    30be:	0f 77       	andi	r16, 0x7F	; 127
    30c0:	dc 01       	movw	r26, r24
    30c2:	ed 91       	ld	r30, X+
    30c4:	fc 91       	ld	r31, X
    30c6:	63 e0       	ldi	r22, 0x03	; 3
    30c8:	70 e0       	ldi	r23, 0x00	; 0
    30ca:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    30cc:	0f 91       	pop	r16
    30ce:	08 95       	ret

000030d0 <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    30d0:	0f 93       	push	r16
    30d2:	34 2f       	mov	r19, r20
    30d4:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    30d6:	46 2f       	mov	r20, r22
    30d8:	4f 70       	andi	r20, 0x0F	; 15
    30da:	40 68       	ori	r20, 0x80	; 128
    30dc:	23 2f       	mov	r18, r19
    30de:	2f 77       	andi	r18, 0x7F	; 127
    30e0:	0f 77       	andi	r16, 0x7F	; 127
    30e2:	dc 01       	movw	r26, r24
    30e4:	ed 91       	ld	r30, X+
    30e6:	fc 91       	ld	r31, X
    30e8:	63 e0       	ldi	r22, 0x03	; 3
    30ea:	70 e0       	ldi	r23, 0x00	; 0
    30ec:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    30ee:	0f 91       	pop	r16
    30f0:	08 95       	ret

000030f2 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    30f2:	0f 93       	push	r16
    30f4:	34 2f       	mov	r19, r20
    30f6:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    30f8:	46 2f       	mov	r20, r22
    30fa:	4f 70       	andi	r20, 0x0F	; 15
    30fc:	40 6a       	ori	r20, 0xA0	; 160
    30fe:	23 2f       	mov	r18, r19
    3100:	2f 77       	andi	r18, 0x7F	; 127
    3102:	0f 77       	andi	r16, 0x7F	; 127
    3104:	dc 01       	movw	r26, r24
    3106:	ed 91       	ld	r30, X+
    3108:	fc 91       	ld	r31, X
    310a:	63 e0       	ldi	r22, 0x03	; 3
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    3110:	0f 91       	pop	r16
    3112:	08 95       	ret

00003114 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    3114:	0f 93       	push	r16
    3116:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    3118:	20 e2       	ldi	r18, 0x20	; 32
    311a:	40 30       	cpi	r20, 0x00	; 0
    311c:	52 07       	cpc	r21, r18
    311e:	44 f4       	brge	.+16     	; 0x3130 <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    3120:	a0 ee       	ldi	r26, 0xE0	; 224
    3122:	40 30       	cpi	r20, 0x00	; 0
    3124:	5a 07       	cpc	r21, r26
    3126:	3c f0       	brlt	.+14     	; 0x3136 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    3128:	8a 01       	movw	r16, r20
    312a:	00 50       	subi	r16, 0x00	; 0
    312c:	10 4e       	sbci	r17, 0xE0	; 224
    312e:	05 c0       	rjmp	.+10     	; 0x313a <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    3130:	0f ef       	ldi	r16, 0xFF	; 255
    3132:	1f e3       	ldi	r17, 0x3F	; 63
    3134:	02 c0       	rjmp	.+4      	; 0x313a <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    3136:	00 e0       	ldi	r16, 0x00	; 0
    3138:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    313a:	46 2f       	mov	r20, r22
    313c:	4f 70       	andi	r20, 0x0F	; 15
    313e:	40 6e       	ori	r20, 0xE0	; 224
    3140:	20 2f       	mov	r18, r16
    3142:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    3144:	00 0f       	add	r16, r16
    3146:	01 2f       	mov	r16, r17
    3148:	00 1f       	adc	r16, r16
    314a:	11 0b       	sbc	r17, r17
    314c:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    314e:	0f 77       	andi	r16, 0x7F	; 127
    3150:	dc 01       	movw	r26, r24
    3152:	ed 91       	ld	r30, X+
    3154:	fc 91       	ld	r31, X
    3156:	63 e0       	ldi	r22, 0x03	; 3
    3158:	70 e0       	ldi	r23, 0x00	; 0
    315a:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    315c:	1f 91       	pop	r17
    315e:	0f 91       	pop	r16
    3160:	08 95       	ret

00003162 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    3162:	0f 93       	push	r16
    3164:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    3166:	46 2f       	mov	r20, r22
    3168:	4f 70       	andi	r20, 0x0F	; 15
    316a:	40 6c       	ori	r20, 0xC0	; 192
    316c:	2f 77       	andi	r18, 0x7F	; 127
    316e:	dc 01       	movw	r26, r24
    3170:	ed 91       	ld	r30, X+
    3172:	fc 91       	ld	r31, X
    3174:	62 e0       	ldi	r22, 0x02	; 2
    3176:	70 e0       	ldi	r23, 0x00	; 0
    3178:	00 e0       	ldi	r16, 0x00	; 0
    317a:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    317c:	0f 91       	pop	r16
    317e:	08 95       	ret

00003180 <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    3180:	0f 93       	push	r16
    3182:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    3184:	46 2f       	mov	r20, r22
    3186:	4f 70       	andi	r20, 0x0F	; 15
    3188:	40 6d       	ori	r20, 0xD0	; 208
    318a:	2f 77       	andi	r18, 0x7F	; 127
    318c:	dc 01       	movw	r26, r24
    318e:	ed 91       	ld	r30, X+
    3190:	fc 91       	ld	r31, X
    3192:	62 e0       	ldi	r22, 0x02	; 2
    3194:	70 e0       	ldi	r23, 0x00	; 0
    3196:	00 e0       	ldi	r16, 0x00	; 0
    3198:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    319a:	0f 91       	pop	r16
    319c:	08 95       	ret

0000319e <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    319e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    31a0:	dc 01       	movw	r26, r24
    31a2:	ed 91       	ld	r30, X+
    31a4:	fc 91       	ld	r31, X
    31a6:	61 e0       	ldi	r22, 0x01	; 1
    31a8:	70 e0       	ldi	r23, 0x00	; 0
    31aa:	48 ef       	ldi	r20, 0xF8	; 248
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	00 e0       	ldi	r16, 0x00	; 0
    31b0:	09 95       	icall
}
    31b2:	0f 91       	pop	r16
    31b4:	08 95       	ret

000031b6 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    31b6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    31b8:	dc 01       	movw	r26, r24
    31ba:	ed 91       	ld	r30, X+
    31bc:	fc 91       	ld	r31, X
    31be:	61 e0       	ldi	r22, 0x01	; 1
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	49 ef       	ldi	r20, 0xF9	; 249
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	00 e0       	ldi	r16, 0x00	; 0
    31c8:	09 95       	icall
}
    31ca:	0f 91       	pop	r16
    31cc:	08 95       	ret

000031ce <midi_send_start>:

void midi_send_start(MidiDevice * device){
    31ce:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    31d0:	dc 01       	movw	r26, r24
    31d2:	ed 91       	ld	r30, X+
    31d4:	fc 91       	ld	r31, X
    31d6:	61 e0       	ldi	r22, 0x01	; 1
    31d8:	70 e0       	ldi	r23, 0x00	; 0
    31da:	4a ef       	ldi	r20, 0xFA	; 250
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	00 e0       	ldi	r16, 0x00	; 0
    31e0:	09 95       	icall
}
    31e2:	0f 91       	pop	r16
    31e4:	08 95       	ret

000031e6 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    31e6:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    31e8:	dc 01       	movw	r26, r24
    31ea:	ed 91       	ld	r30, X+
    31ec:	fc 91       	ld	r31, X
    31ee:	61 e0       	ldi	r22, 0x01	; 1
    31f0:	70 e0       	ldi	r23, 0x00	; 0
    31f2:	4b ef       	ldi	r20, 0xFB	; 251
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	00 e0       	ldi	r16, 0x00	; 0
    31f8:	09 95       	icall
}
    31fa:	0f 91       	pop	r16
    31fc:	08 95       	ret

000031fe <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    31fe:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    3200:	dc 01       	movw	r26, r24
    3202:	ed 91       	ld	r30, X+
    3204:	fc 91       	ld	r31, X
    3206:	61 e0       	ldi	r22, 0x01	; 1
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	4c ef       	ldi	r20, 0xFC	; 252
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	00 e0       	ldi	r16, 0x00	; 0
    3210:	09 95       	icall
}
    3212:	0f 91       	pop	r16
    3214:	08 95       	ret

00003216 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    3216:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    3218:	dc 01       	movw	r26, r24
    321a:	ed 91       	ld	r30, X+
    321c:	fc 91       	ld	r31, X
    321e:	61 e0       	ldi	r22, 0x01	; 1
    3220:	70 e0       	ldi	r23, 0x00	; 0
    3222:	4e ef       	ldi	r20, 0xFE	; 254
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	00 e0       	ldi	r16, 0x00	; 0
    3228:	09 95       	icall
}
    322a:	0f 91       	pop	r16
    322c:	08 95       	ret

0000322e <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    322e:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    3230:	dc 01       	movw	r26, r24
    3232:	ed 91       	ld	r30, X+
    3234:	fc 91       	ld	r31, X
    3236:	61 e0       	ldi	r22, 0x01	; 1
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	4f ef       	ldi	r20, 0xFF	; 255
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	00 e0       	ldi	r16, 0x00	; 0
    3240:	09 95       	icall
}
    3242:	0f 91       	pop	r16
    3244:	08 95       	ret

00003246 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    3246:	0f 93       	push	r16
   device->send_func(device, 2,
    3248:	26 2f       	mov	r18, r22
    324a:	2f 77       	andi	r18, 0x7F	; 127
    324c:	dc 01       	movw	r26, r24
    324e:	ed 91       	ld	r30, X+
    3250:	fc 91       	ld	r31, X
    3252:	62 e0       	ldi	r22, 0x02	; 2
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	41 ef       	ldi	r20, 0xF1	; 241
    3258:	00 e0       	ldi	r16, 0x00	; 0
    325a:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    325c:	0f 91       	pop	r16
    325e:	08 95       	ret

00003260 <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    3260:	0f 93       	push	r16
    3262:	1f 93       	push	r17
   device->send_func(device, 3,
    3264:	26 2f       	mov	r18, r22
    3266:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    3268:	8b 01       	movw	r16, r22
    326a:	00 0f       	add	r16, r16
    326c:	01 2f       	mov	r16, r17
    326e:	00 1f       	adc	r16, r16
    3270:	11 0b       	sbc	r17, r17
    3272:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    3274:	0f 77       	andi	r16, 0x7F	; 127
    3276:	dc 01       	movw	r26, r24
    3278:	ed 91       	ld	r30, X+
    327a:	fc 91       	ld	r31, X
    327c:	63 e0       	ldi	r22, 0x03	; 3
    327e:	70 e0       	ldi	r23, 0x00	; 0
    3280:	42 ef       	ldi	r20, 0xF2	; 242
    3282:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    3284:	1f 91       	pop	r17
    3286:	0f 91       	pop	r16
    3288:	08 95       	ret

0000328a <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    328a:	0f 93       	push	r16
   device->send_func(device, 2,
    328c:	26 2f       	mov	r18, r22
    328e:	2f 77       	andi	r18, 0x7F	; 127
    3290:	dc 01       	movw	r26, r24
    3292:	ed 91       	ld	r30, X+
    3294:	fc 91       	ld	r31, X
    3296:	62 e0       	ldi	r22, 0x02	; 2
    3298:	70 e0       	ldi	r23, 0x00	; 0
    329a:	43 ef       	ldi	r20, 0xF3	; 243
    329c:	00 e0       	ldi	r16, 0x00	; 0
    329e:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    32a0:	0f 91       	pop	r16
    32a2:	08 95       	ret

000032a4 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    32a4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    32a6:	dc 01       	movw	r26, r24
    32a8:	ed 91       	ld	r30, X+
    32aa:	fc 91       	ld	r31, X
    32ac:	61 e0       	ldi	r22, 0x01	; 1
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	46 ef       	ldi	r20, 0xF6	; 246
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	00 e0       	ldi	r16, 0x00	; 0
    32b6:	09 95       	icall
}
    32b8:	0f 91       	pop	r16
    32ba:	08 95       	ret

000032bc <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    32bc:	0f 93       	push	r16
    32be:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    32c0:	dc 01       	movw	r26, r24
    32c2:	ed 91       	ld	r30, X+
    32c4:	fc 91       	ld	r31, X
    32c6:	61 e0       	ldi	r22, 0x01	; 1
    32c8:	70 e0       	ldi	r23, 0x00	; 0
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	00 e0       	ldi	r16, 0x00	; 0
    32ce:	09 95       	icall
}
    32d0:	0f 91       	pop	r16
    32d2:	08 95       	ret

000032d4 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    32d4:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    32d6:	dc 01       	movw	r26, r24
    32d8:	ed 91       	ld	r30, X+
    32da:	fc 91       	ld	r31, X
    32dc:	09 95       	icall
}
    32de:	0f 91       	pop	r16
    32e0:	08 95       	ret

000032e2 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    32e2:	6f 92       	push	r6
    32e4:	7f 92       	push	r7
    32e6:	8f 92       	push	r8
    32e8:	9f 92       	push	r9
    32ea:	af 92       	push	r10
    32ec:	bf 92       	push	r11
    32ee:	cf 92       	push	r12
    32f0:	df 92       	push	r13
    32f2:	ef 92       	push	r14
    32f4:	ff 92       	push	r15
    32f6:	0f 93       	push	r16
    32f8:	1f 93       	push	r17
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <midi_send_array+0x1e>
    3300:	0f 92       	push	r0
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	4c 01       	movw	r8, r24
    3308:	6b 01       	movw	r12, r22
    330a:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    330c:	61 15       	cp	r22, r1
    330e:	71 05       	cpc	r23, r1
    3310:	41 f1       	breq	.+80     	; 0x3362 <midi_send_array+0x80>
    3312:	ee 24       	eor	r14, r14
    3314:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    3316:	0f 2e       	mov	r0, r31
    3318:	f3 e0       	ldi	r31, 0x03	; 3
    331a:	6f 2e       	mov	r6, r31
    331c:	77 24       	eor	r7, r7
    331e:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    3320:	19 82       	std	Y+1, r1	; 0x01
    3322:	1a 82       	std	Y+2, r1	; 0x02
    3324:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    3326:	86 01       	movw	r16, r12
    3328:	0e 19       	sub	r16, r14
    332a:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    332c:	04 30       	cpi	r16, 0x04	; 4
    332e:	11 05       	cpc	r17, r1
    3330:	08 f0       	brcs	.+2      	; 0x3334 <midi_send_array+0x52>
    3332:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    3334:	b5 01       	movw	r22, r10
    3336:	6e 0d       	add	r22, r14
    3338:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    333a:	ce 01       	movw	r24, r28
    333c:	01 96       	adiw	r24, 0x01	; 1
    333e:	40 2f       	mov	r20, r16
    3340:	51 2f       	mov	r21, r17
    3342:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    3346:	c4 01       	movw	r24, r8
    3348:	b8 01       	movw	r22, r16
    334a:	49 81       	ldd	r20, Y+1	; 0x01
    334c:	2a 81       	ldd	r18, Y+2	; 0x02
    334e:	0b 81       	ldd	r16, Y+3	; 0x03
    3350:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    3354:	83 e0       	ldi	r24, 0x03	; 3
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	e8 0e       	add	r14, r24
    335a:	f9 1e       	adc	r15, r25
    335c:	ec 14       	cp	r14, r12
    335e:	fd 04       	cpc	r15, r13
    3360:	f8 f2       	brcs	.-66     	; 0x3320 <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	df 91       	pop	r29
    336a:	cf 91       	pop	r28
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
    3370:	ff 90       	pop	r15
    3372:	ef 90       	pop	r14
    3374:	df 90       	pop	r13
    3376:	cf 90       	pop	r12
    3378:	bf 90       	pop	r11
    337a:	af 90       	pop	r10
    337c:	9f 90       	pop	r9
    337e:	8f 90       	pop	r8
    3380:	7f 90       	pop	r7
    3382:	6f 90       	pop	r6
    3384:	08 95       	ret

00003386 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    3386:	fc 01       	movw	r30, r24
    3388:	73 83       	std	Z+3, r23	; 0x03
    338a:	62 83       	std	Z+2, r22	; 0x02
}
    338c:	08 95       	ret

0000338e <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    338e:	fc 01       	movw	r30, r24
    3390:	75 83       	std	Z+5, r23	; 0x05
    3392:	64 83       	std	Z+4, r22	; 0x04
}
    3394:	08 95       	ret

00003396 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    3396:	fc 01       	movw	r30, r24
    3398:	77 83       	std	Z+7, r23	; 0x07
    339a:	66 83       	std	Z+6, r22	; 0x06
}
    339c:	08 95       	ret

0000339e <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    339e:	fc 01       	movw	r30, r24
    33a0:	71 87       	std	Z+9, r23	; 0x09
    33a2:	60 87       	std	Z+8, r22	; 0x08
}
    33a4:	08 95       	ret

000033a6 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    33a6:	fc 01       	movw	r30, r24
    33a8:	73 87       	std	Z+11, r23	; 0x0b
    33aa:	62 87       	std	Z+10, r22	; 0x0a
}
    33ac:	08 95       	ret

000033ae <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    33ae:	fc 01       	movw	r30, r24
    33b0:	75 87       	std	Z+13, r23	; 0x0d
    33b2:	64 87       	std	Z+12, r22	; 0x0c
}
    33b4:	08 95       	ret

000033b6 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    33b6:	fc 01       	movw	r30, r24
    33b8:	77 87       	std	Z+15, r23	; 0x0f
    33ba:	66 87       	std	Z+14, r22	; 0x0e
}
    33bc:	08 95       	ret

000033be <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    33be:	fc 01       	movw	r30, r24
    33c0:	71 8b       	std	Z+17, r23	; 0x11
    33c2:	60 8b       	std	Z+16, r22	; 0x10
}
    33c4:	08 95       	ret

000033c6 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    33c6:	fc 01       	movw	r30, r24
    33c8:	73 8b       	std	Z+19, r23	; 0x13
    33ca:	62 8b       	std	Z+18, r22	; 0x12
}
    33cc:	08 95       	ret

000033ce <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    33ce:	fc 01       	movw	r30, r24
    33d0:	75 8b       	std	Z+21, r23	; 0x15
    33d2:	64 8b       	std	Z+20, r22	; 0x14
}
    33d4:	08 95       	ret

000033d6 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    33d6:	fc 01       	movw	r30, r24
    33d8:	77 8b       	std	Z+23, r23	; 0x17
    33da:	66 8b       	std	Z+22, r22	; 0x16
}
    33dc:	08 95       	ret

000033de <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    33de:	fc 01       	movw	r30, r24
    33e0:	71 8f       	std	Z+25, r23	; 0x19
    33e2:	60 8f       	std	Z+24, r22	; 0x18
}
    33e4:	08 95       	ret

000033e6 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    33e6:	fc 01       	movw	r30, r24
    33e8:	73 8f       	std	Z+27, r23	; 0x1b
    33ea:	62 8f       	std	Z+26, r22	; 0x1a
}
    33ec:	08 95       	ret

000033ee <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    33ee:	fc 01       	movw	r30, r24
    33f0:	75 8f       	std	Z+29, r23	; 0x1d
    33f2:	64 8f       	std	Z+28, r22	; 0x1c
}
    33f4:	08 95       	ret

000033f6 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    33f6:	fc 01       	movw	r30, r24
    33f8:	77 8f       	std	Z+31, r23	; 0x1f
    33fa:	66 8f       	std	Z+30, r22	; 0x1e
}
    33fc:	08 95       	ret

000033fe <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    33fe:	cf 93       	push	r28
    3400:	df 93       	push	r29
    3402:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    3404:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    3406:	1f a2       	lds	r17, 0x9f
    3408:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    340a:	bc 01       	movw	r22, r24
    340c:	68 5d       	subi	r22, 0xD8	; 216
    340e:	7f 4f       	sbci	r23, 0xFF	; 255
    3410:	88 51       	subi	r24, 0x18	; 24
    3412:	9f 4f       	sbci	r25, 0xFF	; 255
    3414:	40 ec       	ldi	r20, 0xC0	; 192
    3416:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    341a:	1b 82       	std	Y+3, r1	; 0x03
    341c:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    341e:	1d 82       	std	Y+5, r1	; 0x05
    3420:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    3422:	1f 82       	std	Y+7, r1	; 0x07
    3424:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    3426:	19 86       	std	Y+9, r1	; 0x09
    3428:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    342a:	1b 86       	std	Y+11, r1	; 0x0b
    342c:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    342e:	1d 86       	std	Y+13, r1	; 0x0d
    3430:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    3432:	1f 86       	std	Y+15, r1	; 0x0f
    3434:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    3436:	19 8a       	std	Y+17, r1	; 0x11
    3438:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    343a:	1b 8a       	std	Y+19, r1	; 0x13
    343c:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    343e:	1d 8a       	std	Y+21, r1	; 0x15
    3440:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    3442:	1f 8a       	std	Y+23, r1	; 0x17
    3444:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    3446:	19 8e       	std	Y+25, r1	; 0x19
    3448:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    344a:	1b 8e       	std	Y+27, r1	; 0x1b
    344c:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    344e:	1d 8e       	std	Y+29, r1	; 0x1d
    3450:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    3452:	1f 8e       	std	Y+31, r1	; 0x1f
    3454:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    3456:	19 a2       	lds	r17, 0x99
    3458:	18 a2       	lds	r17, 0x98
}
    345a:	df 91       	pop	r29
    345c:	cf 91       	pop	r28
    345e:	08 95       	ret

00003460 <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    3460:	ef 92       	push	r14
    3462:	ff 92       	push	r15
    3464:	0f 93       	push	r16
    3466:	1f 93       	push	r17
    3468:	cf 93       	push	r28
    346a:	df 93       	push	r29
    346c:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    346e:	66 23       	and	r22, r22
    3470:	99 f0       	breq	.+38     	; 0x3498 <midi_device_input+0x38>
    3472:	04 2f       	mov	r16, r20
    3474:	15 2f       	mov	r17, r21
    3476:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    3478:	0f 2e       	mov	r0, r31
    347a:	f8 ee       	ldi	r31, 0xE8	; 232
    347c:	ef 2e       	mov	r14, r31
    347e:	ff 24       	eor	r15, r15
    3480:	f0 2d       	mov	r31, r0
    3482:	e8 0e       	add	r14, r24
    3484:	f9 1e       	adc	r15, r25
    3486:	f8 01       	movw	r30, r16
    3488:	61 91       	ld	r22, Z+
    348a:	8f 01       	movw	r16, r30
    348c:	c7 01       	movw	r24, r14
    348e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    3492:	cf 5f       	subi	r28, 0xFF	; 255
    3494:	cd 17       	cp	r28, r29
    3496:	b9 f7       	brne	.-18     	; 0x3486 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	1f 91       	pop	r17
    349e:	0f 91       	pop	r16
    34a0:	ff 90       	pop	r15
    34a2:	ef 90       	pop	r14
    34a4:	08 95       	ret

000034a6 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    34a6:	fc 01       	movw	r30, r24
    34a8:	71 83       	std	Z+1, r23	; 0x01
    34aa:	60 83       	st	Z, r22
}
    34ac:	08 95       	ret

000034ae <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    34ae:	fc 01       	movw	r30, r24
    34b0:	71 a3       	lds	r23, 0x51
    34b2:	60 a3       	lds	r22, 0x50
}
    34b4:	08 95       	ret

000034b6 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    34b6:	af 92       	push	r10
    34b8:	bf 92       	push	r11
    34ba:	cf 92       	push	r12
    34bc:	df 92       	push	r13
    34be:	ef 92       	push	r14
    34c0:	ff 92       	push	r15
    34c2:	0f 93       	push	r16
    34c4:	1f 93       	push	r17
    34c6:	cf 93       	push	r28
    34c8:	df 93       	push	r29
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <midi_input_callbacks+0x16>
    34cc:	0f 92       	push	r0
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	6c 01       	movw	r12, r24
    34d4:	5b 01       	movw	r10, r22
    34d6:	f4 2e       	mov	r15, r20
    34d8:	e2 2e       	mov	r14, r18
    34da:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    34dc:	dc 01       	movw	r26, r24
    34de:	95 96       	adiw	r26, 0x25	; 37
    34e0:	8c 91       	ld	r24, X
    34e2:	95 97       	sbiw	r26, 0x25	; 37
    34e4:	84 30       	cpi	r24, 0x04	; 4
    34e6:	e9 f4       	brne	.+58     	; 0x3522 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    34e8:	5a 96       	adiw	r26, 0x1a	; 26
    34ea:	ed 91       	ld	r30, X+
    34ec:	fc 91       	ld	r31, X
    34ee:	5b 97       	sbiw	r26, 0x1b	; 27
    34f0:	30 97       	sbiw	r30, 0x00	; 0
    34f2:	09 f4       	brne	.+2      	; 0x34f6 <midi_input_callbacks+0x40>
    34f4:	ee c0       	rjmp	.+476    	; 0x36d2 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    34f6:	cb 01       	movw	r24, r22
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	63 e0       	ldi	r22, 0x03	; 3
    34fc:	70 e0       	ldi	r23, 0x00	; 0
    34fe:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__udivmodhi4>
    3502:	cb 01       	movw	r24, r22
    3504:	88 0f       	add	r24, r24
    3506:	99 1f       	adc	r25, r25
    3508:	68 0f       	add	r22, r24
    350a:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    350c:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    350e:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    3510:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    3512:	4a 2d       	mov	r20, r10
    3514:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    3516:	c6 01       	movw	r24, r12
    3518:	9e 01       	movw	r18, r28
    351a:	2f 5f       	subi	r18, 0xFF	; 255
    351c:	3f 4f       	sbci	r19, 0xFF	; 255
    351e:	09 95       	icall
    3520:	c8 c0       	rjmp	.+400    	; 0x36b2 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    3522:	62 30       	cpi	r22, 0x02	; 2
    3524:	71 05       	cpc	r23, r1
    3526:	09 f4       	brne	.+2      	; 0x352a <midi_input_callbacks+0x74>
    3528:	5f c0       	rjmp	.+190    	; 0x35e8 <midi_input_callbacks+0x132>
    352a:	63 30       	cpi	r22, 0x03	; 3
    352c:	71 05       	cpc	r23, r1
    352e:	29 f0       	breq	.+10     	; 0x353a <midi_input_callbacks+0x84>
    3530:	61 30       	cpi	r22, 0x01	; 1
    3532:	71 05       	cpc	r23, r1
    3534:	09 f0       	breq	.+2      	; 0x3538 <midi_input_callbacks+0x82>
    3536:	b3 c0       	rjmp	.+358    	; 0x369e <midi_input_callbacks+0x1e8>
    3538:	99 c0       	rjmp	.+306    	; 0x366c <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    353a:	84 2f       	mov	r24, r20
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	80 7f       	andi	r24, 0xF0	; 240
    3540:	90 70       	andi	r25, 0x00	; 0
    3542:	80 3a       	cpi	r24, 0xA0	; 160
    3544:	91 05       	cpc	r25, r1
    3546:	29 f1       	breq	.+74     	; 0x3592 <midi_input_callbacks+0xdc>
    3548:	81 3a       	cpi	r24, 0xA1	; 161
    354a:	91 05       	cpc	r25, r1
    354c:	3c f4       	brge	.+14     	; 0x355c <midi_input_callbacks+0xa6>
    354e:	80 38       	cpi	r24, 0x80	; 128
    3550:	91 05       	cpc	r25, r1
    3552:	c9 f0       	breq	.+50     	; 0x3586 <midi_input_callbacks+0xd0>
    3554:	80 39       	cpi	r24, 0x90	; 144
    3556:	91 05       	cpc	r25, r1
    3558:	91 f5       	brne	.+100    	; 0x35be <midi_input_callbacks+0x108>
    355a:	0f c0       	rjmp	.+30     	; 0x357a <midi_input_callbacks+0xc4>
    355c:	80 3e       	cpi	r24, 0xE0	; 224
    355e:	91 05       	cpc	r25, r1
    3560:	f1 f0       	breq	.+60     	; 0x359e <midi_input_callbacks+0xe8>
    3562:	80 3f       	cpi	r24, 0xF0	; 240
    3564:	91 05       	cpc	r25, r1
    3566:	09 f1       	breq	.+66     	; 0x35aa <midi_input_callbacks+0xf4>
    3568:	80 3b       	cpi	r24, 0xB0	; 176
    356a:	91 05       	cpc	r25, r1
    356c:	41 f5       	brne	.+80     	; 0x35be <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    356e:	d6 01       	movw	r26, r12
    3570:	12 96       	adiw	r26, 0x02	; 2
    3572:	ed 91       	ld	r30, X+
    3574:	fc 91       	ld	r31, X
    3576:	13 97       	sbiw	r26, 0x03	; 3
              break;
    3578:	24 c0       	rjmp	.+72     	; 0x35c2 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    357a:	d6 01       	movw	r26, r12
    357c:	14 96       	adiw	r26, 0x04	; 4
    357e:	ed 91       	ld	r30, X+
    3580:	fc 91       	ld	r31, X
    3582:	15 97       	sbiw	r26, 0x05	; 5
              break;
    3584:	1e c0       	rjmp	.+60     	; 0x35c2 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    3586:	d6 01       	movw	r26, r12
    3588:	16 96       	adiw	r26, 0x06	; 6
    358a:	ed 91       	ld	r30, X+
    358c:	fc 91       	ld	r31, X
    358e:	17 97       	sbiw	r26, 0x07	; 7
              break;
    3590:	18 c0       	rjmp	.+48     	; 0x35c2 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    3592:	d6 01       	movw	r26, r12
    3594:	18 96       	adiw	r26, 0x08	; 8
    3596:	ed 91       	ld	r30, X+
    3598:	fc 91       	ld	r31, X
    359a:	19 97       	sbiw	r26, 0x09	; 9
              break;
    359c:	12 c0       	rjmp	.+36     	; 0x35c2 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    359e:	d6 01       	movw	r26, r12
    35a0:	1a 96       	adiw	r26, 0x0a	; 10
    35a2:	ed 91       	ld	r30, X+
    35a4:	fc 91       	ld	r31, X
    35a6:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    35a8:	0c c0       	rjmp	.+24     	; 0x35c2 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    35aa:	b2 ef       	ldi	r27, 0xF2	; 242
    35ac:	4b 17       	cp	r20, r27
    35ae:	09 f0       	breq	.+2      	; 0x35b2 <midi_input_callbacks+0xfc>
    35b0:	90 c0       	rjmp	.+288    	; 0x36d2 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    35b2:	d6 01       	movw	r26, r12
    35b4:	1c 96       	adiw	r26, 0x0c	; 12
    35b6:	ed 91       	ld	r30, X+
    35b8:	fc 91       	ld	r31, X
    35ba:	1d 97       	sbiw	r26, 0x0d	; 13
    35bc:	02 c0       	rjmp	.+4      	; 0x35c2 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    35be:	e0 e0       	ldi	r30, 0x00	; 0
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    35c2:	30 97       	sbiw	r30, 0x00	; 0
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <midi_input_callbacks+0x112>
    35c6:	85 c0       	rjmp	.+266    	; 0x36d2 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    35c8:	b2 ef       	ldi	r27, 0xF2	; 242
    35ca:	fb 16       	cp	r15, r27
    35cc:	31 f4       	brne	.+12     	; 0x35da <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    35ce:	c6 01       	movw	r24, r12
    35d0:	62 ef       	ldi	r22, 0xF2	; 242
    35d2:	4e 2d       	mov	r20, r14
    35d4:	21 2f       	mov	r18, r17
    35d6:	09 95       	icall
    35d8:	6c c0       	rjmp	.+216    	; 0x36b2 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    35da:	6f 2d       	mov	r22, r15
    35dc:	6f 70       	andi	r22, 0x0F	; 15
    35de:	c6 01       	movw	r24, r12
    35e0:	4e 2d       	mov	r20, r14
    35e2:	21 2f       	mov	r18, r17
    35e4:	09 95       	icall
    35e6:	65 c0       	rjmp	.+202    	; 0x36b2 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    35e8:	84 2f       	mov	r24, r20
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	80 7f       	andi	r24, 0xF0	; 240
    35ee:	90 70       	andi	r25, 0x00	; 0
    35f0:	80 3d       	cpi	r24, 0xD0	; 208
    35f2:	91 05       	cpc	r25, r1
    35f4:	61 f0       	breq	.+24     	; 0x360e <midi_input_callbacks+0x158>
    35f6:	80 3f       	cpi	r24, 0xF0	; 240
    35f8:	91 05       	cpc	r25, r1
    35fa:	79 f0       	breq	.+30     	; 0x361a <midi_input_callbacks+0x164>
    35fc:	80 3c       	cpi	r24, 0xC0	; 192
    35fe:	91 05       	cpc	r25, r1
    3600:	f9 f4       	brne	.+62     	; 0x3640 <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    3602:	d6 01       	movw	r26, r12
    3604:	1e 96       	adiw	r26, 0x0e	; 14
    3606:	ed 91       	ld	r30, X+
    3608:	fc 91       	ld	r31, X
    360a:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    360c:	1b c0       	rjmp	.+54     	; 0x3644 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    360e:	d6 01       	movw	r26, r12
    3610:	50 96       	adiw	r26, 0x10	; 16
    3612:	ed 91       	ld	r30, X+
    3614:	fc 91       	ld	r31, X
    3616:	51 97       	sbiw	r26, 0x11	; 17
              break;
    3618:	15 c0       	rjmp	.+42     	; 0x3644 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    361a:	b3 ef       	ldi	r27, 0xF3	; 243
    361c:	4b 17       	cp	r20, r27
    361e:	31 f4       	brne	.+12     	; 0x362c <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    3620:	d6 01       	movw	r26, r12
    3622:	52 96       	adiw	r26, 0x12	; 18
    3624:	ed 91       	ld	r30, X+
    3626:	fc 91       	ld	r31, X
    3628:	53 97       	sbiw	r26, 0x13	; 19
    362a:	0c c0       	rjmp	.+24     	; 0x3644 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    362c:	b1 ef       	ldi	r27, 0xF1	; 241
    362e:	4b 17       	cp	r20, r27
    3630:	09 f0       	breq	.+2      	; 0x3634 <midi_input_callbacks+0x17e>
    3632:	4f c0       	rjmp	.+158    	; 0x36d2 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    3634:	d6 01       	movw	r26, r12
    3636:	54 96       	adiw	r26, 0x14	; 20
    3638:	ed 91       	ld	r30, X+
    363a:	fc 91       	ld	r31, X
    363c:	55 97       	sbiw	r26, 0x15	; 21
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    3640:	e0 e0       	ldi	r30, 0x00	; 0
    3642:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    3644:	30 97       	sbiw	r30, 0x00	; 0
    3646:	09 f4       	brne	.+2      	; 0x364a <midi_input_callbacks+0x194>
    3648:	44 c0       	rjmp	.+136    	; 0x36d2 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    364a:	b3 ef       	ldi	r27, 0xF3	; 243
    364c:	fb 16       	cp	r15, r27
    364e:	19 f0       	breq	.+6      	; 0x3656 <midi_input_callbacks+0x1a0>
    3650:	81 ef       	ldi	r24, 0xF1	; 241
    3652:	f8 16       	cp	r15, r24
    3654:	29 f4       	brne	.+10     	; 0x3660 <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    3656:	c6 01       	movw	r24, r12
    3658:	6f 2d       	mov	r22, r15
    365a:	4e 2d       	mov	r20, r14
    365c:	09 95       	icall
    365e:	29 c0       	rjmp	.+82     	; 0x36b2 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    3660:	6f 2d       	mov	r22, r15
    3662:	6f 70       	andi	r22, 0x0F	; 15
    3664:	c6 01       	movw	r24, r12
    3666:	4e 2d       	mov	r20, r14
    3668:	09 95       	icall
    366a:	23 c0       	rjmp	.+70     	; 0x36b2 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    366c:	84 2f       	mov	r24, r20
    366e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <midi_is_realtime>
    3672:	88 23       	and	r24, r24
    3674:	31 f0       	breq	.+12     	; 0x3682 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    3676:	d6 01       	movw	r26, r12
    3678:	56 96       	adiw	r26, 0x16	; 22
    367a:	ed 91       	ld	r30, X+
    367c:	fc 91       	ld	r31, X
    367e:	57 97       	sbiw	r26, 0x17	; 23
    3680:	08 c0       	rjmp	.+16     	; 0x3692 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    3682:	b6 ef       	ldi	r27, 0xF6	; 246
    3684:	fb 16       	cp	r15, r27
    3686:	29 f5       	brne	.+74     	; 0x36d2 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    3688:	d6 01       	movw	r26, r12
    368a:	58 96       	adiw	r26, 0x18	; 24
    368c:	ed 91       	ld	r30, X+
    368e:	fc 91       	ld	r31, X
    3690:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    3692:	30 97       	sbiw	r30, 0x00	; 0
    3694:	f1 f0       	breq	.+60     	; 0x36d2 <midi_input_callbacks+0x21c>
            func(device, byte0);
    3696:	c6 01       	movw	r24, r12
    3698:	6f 2d       	mov	r22, r15
    369a:	09 95       	icall
    369c:	0a c0       	rjmp	.+20     	; 0x36b2 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    369e:	64 30       	cpi	r22, 0x04	; 4
    36a0:	71 05       	cpc	r23, r1
    36a2:	a8 f4       	brcc	.+42     	; 0x36ce <midi_input_callbacks+0x218>
    36a4:	16 c0       	rjmp	.+44     	; 0x36d2 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    36a6:	c6 01       	movw	r24, r12
    36a8:	b5 01       	movw	r22, r10
    36aa:	4f 2d       	mov	r20, r15
    36ac:	2e 2d       	mov	r18, r14
    36ae:	01 2f       	mov	r16, r17
    36b0:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    36b2:	d6 01       	movw	r26, r12
    36b4:	5e 96       	adiw	r26, 0x1e	; 30
    36b6:	ed 91       	ld	r30, X+
    36b8:	fc 91       	ld	r31, X
    36ba:	5f 97       	sbiw	r26, 0x1f	; 31
    36bc:	30 97       	sbiw	r30, 0x00	; 0
    36be:	89 f0       	breq	.+34     	; 0x36e2 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    36c0:	c6 01       	movw	r24, r12
    36c2:	b5 01       	movw	r22, r10
    36c4:	4f 2d       	mov	r20, r15
    36c6:	2e 2d       	mov	r18, r14
    36c8:	01 2f       	mov	r16, r17
    36ca:	09 95       	icall
    36cc:	0a c0       	rjmp	.+20     	; 0x36e2 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    36ce:	aa 24       	eor	r10, r10
    36d0:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    36d2:	d6 01       	movw	r26, r12
    36d4:	5c 96       	adiw	r26, 0x1c	; 28
    36d6:	ed 91       	ld	r30, X+
    36d8:	fc 91       	ld	r31, X
    36da:	5d 97       	sbiw	r26, 0x1d	; 29
    36dc:	30 97       	sbiw	r30, 0x00	; 0
    36de:	19 f7       	brne	.-58     	; 0x36a6 <midi_input_callbacks+0x1f0>
    36e0:	e8 cf       	rjmp	.-48     	; 0x36b2 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	0f 90       	pop	r0
    36e8:	df 91       	pop	r29
    36ea:	cf 91       	pop	r28
    36ec:	1f 91       	pop	r17
    36ee:	0f 91       	pop	r16
    36f0:	ff 90       	pop	r15
    36f2:	ef 90       	pop	r14
    36f4:	df 90       	pop	r13
    36f6:	cf 90       	pop	r12
    36f8:	bf 90       	pop	r11
    36fa:	af 90       	pop	r10
    36fc:	08 95       	ret

000036fe <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    36fe:	ef 92       	push	r14
    3700:	ff 92       	push	r15
    3702:	0f 93       	push	r16
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	7c 01       	movw	r14, r24
    370a:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    370c:	86 2f       	mov	r24, r22
    370e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <midi_is_realtime>
    3712:	88 23       	and	r24, r24
    3714:	91 f0       	breq	.+36     	; 0x373a <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    3716:	d7 01       	movw	r26, r14
    3718:	95 96       	adiw	r26, 0x25	; 37
    371a:	dc 91       	ld	r29, X
    371c:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	95 96       	adiw	r26, 0x25	; 37
    3722:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    3724:	c7 01       	movw	r24, r14
    3726:	61 e0       	ldi	r22, 0x01	; 1
    3728:	70 e0       	ldi	r23, 0x00	; 0
    372a:	4c 2f       	mov	r20, r28
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	00 e0       	ldi	r16, 0x00	; 0
    3730:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <midi_input_callbacks>
    device->input_state = state;
    3734:	f7 01       	movw	r30, r14
    3736:	d5 a3       	lds	r29, 0x55
    3738:	b7 c0       	rjmp	.+366    	; 0x38a8 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    373a:	8c 2f       	mov	r24, r28
    373c:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <midi_is_statusbyte>
    3740:	88 23       	and	r24, r24
    3742:	09 f4       	brne	.+2      	; 0x3746 <midi_process_byte+0x48>
    3744:	73 c0       	rjmp	.+230    	; 0x382c <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    3746:	d7 01       	movw	r26, r14
    3748:	95 96       	adiw	r26, 0x25	; 37
    374a:	8c 91       	ld	r24, X
    374c:	95 97       	sbiw	r26, 0x25	; 37
    374e:	84 30       	cpi	r24, 0x04	; 4
    3750:	49 f0       	breq	.+18     	; 0x3764 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    3752:	92 96       	adiw	r26, 0x22	; 34
    3754:	cc 93       	st	X, r28
    3756:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	97 96       	adiw	r26, 0x27	; 39
    375e:	9c 93       	st	X, r25
    3760:	8e 93       	st	-X, r24
    3762:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    3764:	8c 2f       	mov	r24, r28
    3766:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <midi_packet_length>
    376a:	81 30       	cpi	r24, 0x01	; 1
    376c:	41 f0       	breq	.+16     	; 0x377e <midi_process_byte+0x80>
    376e:	81 30       	cpi	r24, 0x01	; 1
    3770:	00 f1       	brcs	.+64     	; 0x37b2 <midi_process_byte+0xb4>
    3772:	82 30       	cpi	r24, 0x02	; 2
    3774:	a1 f0       	breq	.+40     	; 0x379e <midi_process_byte+0xa0>
    3776:	83 30       	cpi	r24, 0x03	; 3
    3778:	09 f0       	breq	.+2      	; 0x377c <midi_process_byte+0x7e>
    377a:	4f c0       	rjmp	.+158    	; 0x381a <midi_process_byte+0x11c>
    377c:	14 c0       	rjmp	.+40     	; 0x37a6 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	f7 01       	movw	r30, r14
    3782:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    3784:	c7 01       	movw	r24, r14
    3786:	61 e0       	ldi	r22, 0x01	; 1
    3788:	70 e0       	ldi	r23, 0x00	; 0
    378a:	4c 2f       	mov	r20, r28
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	00 e0       	ldi	r16, 0x00	; 0
    3790:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <midi_input_callbacks>
        device->input_state = IDLE;
    3794:	d7 01       	movw	r26, r14
    3796:	95 96       	adiw	r26, 0x25	; 37
    3798:	1c 92       	st	X, r1
    379a:	95 97       	sbiw	r26, 0x25	; 37
        break;
    379c:	85 c0       	rjmp	.+266    	; 0x38a8 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    379e:	82 e0       	ldi	r24, 0x02	; 2
    37a0:	f7 01       	movw	r30, r14
    37a2:	85 a3       	lds	r24, 0x55
        break;
    37a4:	81 c0       	rjmp	.+258    	; 0x38a8 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    37a6:	83 e0       	ldi	r24, 0x03	; 3
    37a8:	d7 01       	movw	r26, r14
    37aa:	95 96       	adiw	r26, 0x25	; 37
    37ac:	8c 93       	st	X, r24
    37ae:	95 97       	sbiw	r26, 0x25	; 37
        break;
    37b0:	7b c0       	rjmp	.+246    	; 0x38a8 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    37b2:	c0 3f       	cpi	r28, 0xF0	; 240
    37b4:	19 f0       	breq	.+6      	; 0x37bc <midi_process_byte+0xbe>
    37b6:	c7 3f       	cpi	r28, 0xF7	; 247
    37b8:	59 f5       	brne	.+86     	; 0x3810 <midi_process_byte+0x112>
    37ba:	0a c0       	rjmp	.+20     	; 0x37d0 <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    37bc:	84 e0       	ldi	r24, 0x04	; 4
    37be:	f7 01       	movw	r30, r14
    37c0:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    37c2:	80 ef       	ldi	r24, 0xF0	; 240
    37c4:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	97 a3       	lds	r25, 0x57
    37cc:	86 a3       	lds	r24, 0x56
            break;
    37ce:	6c c0       	rjmp	.+216    	; 0x38a8 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    37d0:	d7 01       	movw	r26, r14
    37d2:	96 96       	adiw	r26, 0x26	; 38
    37d4:	2d 91       	ld	r18, X+
    37d6:	3c 91       	ld	r19, X
    37d8:	97 97       	sbiw	r26, 0x27	; 39
    37da:	c9 01       	movw	r24, r18
    37dc:	63 e0       	ldi	r22, 0x03	; 3
    37de:	70 e0       	ldi	r23, 0x00	; 0
    37e0:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__udivmodhi4>
    37e4:	f7 01       	movw	r30, r14
    37e6:	e8 0f       	add	r30, r24
    37e8:	f9 1f       	adc	r31, r25
    37ea:	87 ef       	ldi	r24, 0xF7	; 247
    37ec:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    37ee:	b9 01       	movw	r22, r18
    37f0:	6f 5f       	subi	r22, 0xFF	; 255
    37f2:	7f 4f       	sbci	r23, 0xFF	; 255
    37f4:	f7 01       	movw	r30, r14
    37f6:	77 a3       	lds	r23, 0x57
    37f8:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    37fa:	c7 01       	movw	r24, r14
    37fc:	42 a1       	lds	r20, 0x42
    37fe:	23 a1       	lds	r18, 0x43
    3800:	04 a1       	lds	r16, 0x44
    3802:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3806:	d7 01       	movw	r26, r14
    3808:	95 96       	adiw	r26, 0x25	; 37
    380a:	1c 92       	st	X, r1
    380c:	95 97       	sbiw	r26, 0x25	; 37
            break;
    380e:	4c c0       	rjmp	.+152    	; 0x38a8 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    3810:	f7 01       	movw	r30, r14
    3812:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    3814:	17 a2       	lds	r17, 0x97
    3816:	16 a2       	lds	r17, 0x96
    3818:	47 c0       	rjmp	.+142    	; 0x38a8 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    381a:	d7 01       	movw	r26, r14
    381c:	95 96       	adiw	r26, 0x25	; 37
    381e:	1c 92       	st	X, r1
    3820:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    3822:	97 96       	adiw	r26, 0x27	; 39
    3824:	1c 92       	st	X, r1
    3826:	1e 92       	st	-X, r1
    3828:	96 97       	sbiw	r26, 0x26	; 38
        break;
    382a:	3e c0       	rjmp	.+124    	; 0x38a8 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    382c:	f7 01       	movw	r30, r14
    382e:	25 a1       	lds	r18, 0x45
    3830:	22 23       	and	r18, r18
    3832:	d1 f1       	breq	.+116    	; 0x38a8 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    3834:	06 a0       	lds	r16, 0x86
    3836:	f7 a1       	lds	r31, 0x47
    3838:	e0 2d       	mov	r30, r0
    383a:	cf 01       	movw	r24, r30
    383c:	63 e0       	ldi	r22, 0x03	; 3
    383e:	70 e0       	ldi	r23, 0x00	; 0
    3840:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__udivmodhi4>
    3844:	ac 01       	movw	r20, r24
    3846:	8e 0d       	add	r24, r14
    3848:	9f 1d       	adc	r25, r15
    384a:	dc 01       	movw	r26, r24
    384c:	92 96       	adiw	r26, 0x22	; 34
    384e:	cc 93       	st	X, r28
    3850:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    3852:	bf 01       	movw	r22, r30
    3854:	6f 5f       	subi	r22, 0xFF	; 255
    3856:	7f 4f       	sbci	r23, 0xFF	; 255
    3858:	f7 01       	movw	r30, r14
    385a:	77 a3       	lds	r23, 0x57
    385c:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    385e:	41 30       	cpi	r20, 0x01	; 1
    3860:	51 05       	cpc	r21, r1
    3862:	91 f0       	breq	.+36     	; 0x3888 <midi_process_byte+0x18a>
    3864:	42 30       	cpi	r20, 0x02	; 2
    3866:	51 05       	cpc	r21, r1
    3868:	f9 f4       	brne	.+62     	; 0x38a8 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    386a:	c7 01       	movw	r24, r14
    386c:	42 a1       	lds	r20, 0x42
    386e:	23 a1       	lds	r18, 0x43
    3870:	04 a1       	lds	r16, 0x44
    3872:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    3876:	f7 01       	movw	r30, r14
    3878:	85 a1       	lds	r24, 0x45
    387a:	84 30       	cpi	r24, 0x04	; 4
    387c:	a9 f0       	breq	.+42     	; 0x38a8 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	97 a3       	lds	r25, 0x57
    3884:	86 a3       	lds	r24, 0x56
    3886:	10 c0       	rjmp	.+32     	; 0x38a8 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    3888:	22 30       	cpi	r18, 0x02	; 2
    388a:	71 f4       	brne	.+28     	; 0x38a8 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    388c:	c7 01       	movw	r24, r14
    388e:	42 a1       	lds	r20, 0x42
    3890:	23 a1       	lds	r18, 0x43
    3892:	00 e0       	ldi	r16, 0x00	; 0
    3894:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    3898:	f7 01       	movw	r30, r14
    389a:	85 a1       	lds	r24, 0x45
    389c:	84 30       	cpi	r24, 0x04	; 4
    389e:	21 f0       	breq	.+8      	; 0x38a8 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	97 a3       	lds	r25, 0x57
    38a6:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	0f 91       	pop	r16
    38ae:	ff 90       	pop	r15
    38b0:	ef 90       	pop	r14
    38b2:	08 95       	ret

000038b4 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    38b4:	cf 92       	push	r12
    38b6:	df 92       	push	r13
    38b8:	ef 92       	push	r14
    38ba:	ff 92       	push	r15
    38bc:	0f 93       	push	r16
    38be:	1f 93       	push	r17
    38c0:	cf 93       	push	r28
    38c2:	df 93       	push	r29
    38c4:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    38c6:	dc 01       	movw	r26, r24
    38c8:	90 96       	adiw	r26, 0x20	; 32
    38ca:	ed 91       	ld	r30, X+
    38cc:	fc 91       	ld	r31, X
    38ce:	91 97       	sbiw	r26, 0x21	; 33
    38d0:	30 97       	sbiw	r30, 0x00	; 0
    38d2:	09 f0       	breq	.+2      	; 0x38d6 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    38d4:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    38d6:	0f 2e       	mov	r0, r31
    38d8:	f8 ee       	ldi	r31, 0xE8	; 232
    38da:	ef 2e       	mov	r14, r31
    38dc:	ff 24       	eor	r15, r15
    38de:	f0 2d       	mov	r31, r0
    38e0:	ec 0c       	add	r14, r12
    38e2:	fd 1c       	adc	r15, r13
    38e4:	c7 01       	movw	r24, r14
    38e6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    38ea:	c8 2f       	mov	r28, r24
    38ec:	d0 e0       	ldi	r29, 0x00	; 0
    38ee:	20 97       	sbiw	r28, 0x00	; 0
    38f0:	99 f0       	breq	.+38     	; 0x3918 <midi_device_process+0x64>
    38f2:	00 e0       	ldi	r16, 0x00	; 0
    38f4:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    38f6:	c7 01       	movw	r24, r14
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <bytequeue_get>
    38fe:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    3900:	c6 01       	movw	r24, r12
    3902:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3906:	c7 01       	movw	r24, r14
    3908:	61 e0       	ldi	r22, 0x01	; 1
    390a:	0e 94 d5 17 	call	0x2faa	; 0x2faa <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    390e:	0f 5f       	subi	r16, 0xFF	; 255
    3910:	1f 4f       	sbci	r17, 0xFF	; 255
    3912:	0c 17       	cp	r16, r28
    3914:	1d 07       	cpc	r17, r29
    3916:	78 f3       	brcs	.-34     	; 0x38f6 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
    391c:	1f 91       	pop	r17
    391e:	0f 91       	pop	r16
    3920:	ff 90       	pop	r15
    3922:	ef 90       	pop	r14
    3924:	df 90       	pop	r13
    3926:	cf 90       	pop	r12
    3928:	08 95       	ret

0000392a <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    392a:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    392c:	67 e0       	ldi	r22, 0x07	; 7
    392e:	70 e0       	ldi	r23, 0x00	; 0
    3930:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__udivmodhi4>
    3934:	48 2f       	mov	r20, r24
   if (remainder)
    3936:	88 23       	and	r24, r24
    3938:	81 f0       	breq	.+32     	; 0x395a <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    393a:	c9 01       	movw	r24, r18
    393c:	67 e0       	ldi	r22, 0x07	; 7
    393e:	70 e0       	ldi	r23, 0x00	; 0
    3940:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__udivmodhi4>
    3944:	cb 01       	movw	r24, r22
    3946:	88 0f       	add	r24, r24
    3948:	99 1f       	adc	r25, r25
    394a:	88 0f       	add	r24, r24
    394c:	99 1f       	adc	r25, r25
    394e:	88 0f       	add	r24, r24
    3950:	99 1f       	adc	r25, r25
    3952:	01 96       	adiw	r24, 0x01	; 1
    3954:	84 0f       	add	r24, r20
    3956:	91 1d       	adc	r25, r1
    3958:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    395a:	c9 01       	movw	r24, r18
    395c:	67 e0       	ldi	r22, 0x07	; 7
    395e:	70 e0       	ldi	r23, 0x00	; 0
    3960:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__udivmodhi4>
    3964:	cb 01       	movw	r24, r22
    3966:	88 0f       	add	r24, r24
    3968:	99 1f       	adc	r25, r25
    396a:	88 0f       	add	r24, r24
    396c:	99 1f       	adc	r25, r25
    396e:	88 0f       	add	r24, r24
    3970:	99 1f       	adc	r25, r25
}
    3972:	08 95       	ret

00003974 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    3974:	48 2f       	mov	r20, r24
    3976:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    3978:	a1 f0       	breq	.+40     	; 0x39a2 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    397a:	9c 01       	movw	r18, r24
    397c:	36 95       	lsr	r19
    397e:	27 95       	ror	r18
    3980:	36 95       	lsr	r19
    3982:	27 95       	ror	r18
    3984:	36 95       	lsr	r19
    3986:	27 95       	ror	r18
    3988:	c9 01       	movw	r24, r18
    398a:	88 0f       	add	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	88 0f       	add	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	88 0f       	add	r24, r24
    3994:	99 1f       	adc	r25, r25
    3996:	82 1b       	sub	r24, r18
    3998:	93 0b       	sbc	r25, r19
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	84 0f       	add	r24, r20
    399e:	91 1d       	adc	r25, r1
    39a0:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    39a2:	9c 01       	movw	r18, r24
    39a4:	36 95       	lsr	r19
    39a6:	27 95       	ror	r18
    39a8:	36 95       	lsr	r19
    39aa:	27 95       	ror	r18
    39ac:	36 95       	lsr	r19
    39ae:	27 95       	ror	r18
    39b0:	c9 01       	movw	r24, r18
    39b2:	88 0f       	add	r24, r24
    39b4:	99 1f       	adc	r25, r25
    39b6:	88 0f       	add	r24, r24
    39b8:	99 1f       	adc	r25, r25
    39ba:	88 0f       	add	r24, r24
    39bc:	99 1f       	adc	r25, r25
    39be:	82 1b       	sub	r24, r18
    39c0:	93 0b       	sbc	r25, r19
}
    39c2:	08 95       	ret

000039c4 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    39c4:	2f 92       	push	r2
    39c6:	3f 92       	push	r3
    39c8:	4f 92       	push	r4
    39ca:	5f 92       	push	r5
    39cc:	6f 92       	push	r6
    39ce:	7f 92       	push	r7
    39d0:	8f 92       	push	r8
    39d2:	9f 92       	push	r9
    39d4:	af 92       	push	r10
    39d6:	bf 92       	push	r11
    39d8:	cf 92       	push	r12
    39da:	df 92       	push	r13
    39dc:	ef 92       	push	r14
    39de:	ff 92       	push	r15
    39e0:	0f 93       	push	r16
    39e2:	1f 93       	push	r17
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	00 d0       	rcall	.+0      	; 0x39ea <sysex_encode+0x26>
    39ea:	00 d0       	rcall	.+0      	; 0x39ec <sysex_encode+0x28>
    39ec:	00 d0       	rcall	.+0      	; 0x39ee <sysex_encode+0x2a>
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
    39f2:	1c 01       	movw	r2, r24
    39f4:	7a 83       	std	Y+2, r23	; 0x02
    39f6:	69 83       	std	Y+1, r22	; 0x01
    39f8:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    39fa:	ca 01       	movw	r24, r20
    39fc:	67 e0       	ldi	r22, 0x07	; 7
    39fe:	70 e0       	ldi	r23, 0x00	; 0
    3a00:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__udivmodhi4>
    3a04:	2b 01       	movw	r4, r22
    3a06:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3a08:	61 15       	cp	r22, r1
    3a0a:	71 05       	cpc	r23, r1
    3a0c:	b1 f1       	breq	.+108    	; 0x3a7a <sysex_encode+0xb6>
    3a0e:	81 01       	movw	r16, r2
    3a10:	e9 80       	ldd	r14, Y+1	; 0x01
    3a12:	fa 80       	ldd	r15, Y+2	; 0x02
    3a14:	cc 24       	eor	r12, r12
    3a16:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3a18:	88 24       	eor	r8, r8
    3a1a:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3a1c:	1e 83       	std	Y+6, r17	; 0x06
    3a1e:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    3a20:	f8 01       	movw	r30, r16
    3a22:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3a24:	fc 82       	std	Y+4, r15	; 0x04
    3a26:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3a28:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3a2a:	ab 81       	ldd	r26, Y+3	; 0x03
    3a2c:	bc 81       	ldd	r27, Y+4	; 0x04
    3a2e:	2d 91       	ld	r18, X+
    3a30:	bc 83       	std	Y+4, r27	; 0x04
    3a32:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3a34:	4f 5f       	subi	r20, 0xFF	; 255
    3a36:	5f 4f       	sbci	r21, 0xFF	; 255
    3a38:	82 2f       	mov	r24, r18
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	80 78       	andi	r24, 0x80	; 128
    3a3e:	90 70       	andi	r25, 0x00	; 0
    3a40:	bc 01       	movw	r22, r24
    3a42:	04 2e       	mov	r0, r20
    3a44:	02 c0       	rjmp	.+4      	; 0x3a4a <sysex_encode+0x86>
    3a46:	75 95       	asr	r23
    3a48:	67 95       	ror	r22
    3a4a:	0a 94       	dec	r0
    3a4c:	e2 f7       	brpl	.-8      	; 0x3a46 <sysex_encode+0x82>
    3a4e:	ad 81       	ldd	r26, Y+5	; 0x05
    3a50:	be 81       	ldd	r27, Y+6	; 0x06
    3a52:	8c 91       	ld	r24, X
    3a54:	86 2b       	or	r24, r22
    3a56:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3a58:	2f 77       	andi	r18, 0x7F	; 127
    3a5a:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3a5c:	47 30       	cpi	r20, 0x07	; 7
    3a5e:	51 05       	cpc	r21, r1
    3a60:	21 f7       	brne	.-56     	; 0x3a2a <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3a62:	08 94       	sec
    3a64:	c1 1c       	adc	r12, r1
    3a66:	d1 1c       	adc	r13, r1
    3a68:	08 5f       	subi	r16, 0xF8	; 248
    3a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6c:	e7 e0       	ldi	r30, 0x07	; 7
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	ee 0e       	add	r14, r30
    3a72:	ff 1e       	adc	r15, r31
    3a74:	ca 14       	cp	r12, r10
    3a76:	db 04       	cpc	r13, r11
    3a78:	89 f6       	brne	.-94     	; 0x3a1c <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    3a7a:	c3 01       	movw	r24, r6
    3a7c:	67 e0       	ldi	r22, 0x07	; 7
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__udivmodhi4>
   if (remainder) {
    3a84:	88 23       	and	r24, r24
    3a86:	d9 f1       	breq	.+118    	; 0x3afe <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    3a88:	82 01       	movw	r16, r4
    3a8a:	00 0f       	add	r16, r16
    3a8c:	11 1f       	adc	r17, r17
    3a8e:	00 0f       	add	r16, r16
    3a90:	11 1f       	adc	r17, r17
    3a92:	00 0f       	add	r16, r16
    3a94:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    3a96:	78 01       	movw	r14, r16
    3a98:	e4 18       	sub	r14, r4
    3a9a:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    3a9c:	d1 01       	movw	r26, r2
    3a9e:	a0 0f       	add	r26, r16
    3aa0:	b1 1f       	adc	r27, r17
    3aa2:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    3aa4:	68 2f       	mov	r22, r24
    3aa6:	70 e0       	ldi	r23, 0x00	; 0
    3aa8:	61 15       	cp	r22, r1
    3aaa:	71 05       	cpc	r23, r1
    3aac:	19 f1       	breq	.+70     	; 0x3af4 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3aae:	e9 81       	ldd	r30, Y+1	; 0x01
    3ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ab2:	ee 0e       	add	r14, r30
    3ab4:	ff 1e       	adc	r15, r31
    3ab6:	c8 01       	movw	r24, r16
    3ab8:	01 96       	adiw	r24, 0x01	; 1
    3aba:	28 0e       	add	r2, r24
    3abc:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    3ac2:	f7 01       	movw	r30, r14
    3ac4:	41 91       	ld	r20, Z+
    3ac6:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3ac8:	2f 5f       	subi	r18, 0xFF	; 255
    3aca:	3f 4f       	sbci	r19, 0xFF	; 255
    3acc:	84 2f       	mov	r24, r20
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	80 78       	andi	r24, 0x80	; 128
    3ad2:	90 70       	andi	r25, 0x00	; 0
    3ad4:	02 2e       	mov	r0, r18
    3ad6:	02 c0       	rjmp	.+4      	; 0x3adc <sysex_encode+0x118>
    3ad8:	95 95       	asr	r25
    3ada:	87 95       	ror	r24
    3adc:	0a 94       	dec	r0
    3ade:	e2 f7       	brpl	.-8      	; 0x3ad8 <sysex_encode+0x114>
    3ae0:	9c 91       	ld	r25, X
    3ae2:	89 2b       	or	r24, r25
    3ae4:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3ae6:	4f 77       	andi	r20, 0x7F	; 127
    3ae8:	f1 01       	movw	r30, r2
    3aea:	41 93       	st	Z+, r20
    3aec:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    3aee:	26 17       	cp	r18, r22
    3af0:	37 07       	cpc	r19, r23
    3af2:	38 f3       	brcs	.-50     	; 0x3ac2 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3af4:	c8 01       	movw	r24, r16
    3af6:	01 96       	adiw	r24, 0x01	; 1
    3af8:	86 0f       	add	r24, r22
    3afa:	97 1f       	adc	r25, r23
    3afc:	07 c0       	rjmp	.+14     	; 0x3b0c <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    3afe:	c2 01       	movw	r24, r4
    3b00:	88 0f       	add	r24, r24
    3b02:	99 1f       	adc	r25, r25
    3b04:	88 0f       	add	r24, r24
    3b06:	99 1f       	adc	r25, r25
    3b08:	88 0f       	add	r24, r24
    3b0a:	99 1f       	adc	r25, r25
   }
}
    3b0c:	26 96       	adiw	r28, 0x06	; 6
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	cd bf       	out	0x3d, r28	; 61
    3b18:	df 91       	pop	r29
    3b1a:	cf 91       	pop	r28
    3b1c:	1f 91       	pop	r17
    3b1e:	0f 91       	pop	r16
    3b20:	ff 90       	pop	r15
    3b22:	ef 90       	pop	r14
    3b24:	df 90       	pop	r13
    3b26:	cf 90       	pop	r12
    3b28:	bf 90       	pop	r11
    3b2a:	af 90       	pop	r10
    3b2c:	9f 90       	pop	r9
    3b2e:	8f 90       	pop	r8
    3b30:	7f 90       	pop	r7
    3b32:	6f 90       	pop	r6
    3b34:	5f 90       	pop	r5
    3b36:	4f 90       	pop	r4
    3b38:	3f 90       	pop	r3
    3b3a:	2f 90       	pop	r2
    3b3c:	08 95       	ret

00003b3e <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3b3e:	6f 92       	push	r6
    3b40:	7f 92       	push	r7
    3b42:	8f 92       	push	r8
    3b44:	9f 92       	push	r9
    3b46:	af 92       	push	r10
    3b48:	bf 92       	push	r11
    3b4a:	cf 92       	push	r12
    3b4c:	df 92       	push	r13
    3b4e:	ef 92       	push	r14
    3b50:	ff 92       	push	r15
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	3c 01       	movw	r6, r24
    3b5c:	4b 01       	movw	r8, r22
    3b5e:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    3b60:	42 30       	cpi	r20, 0x02	; 2
    3b62:	51 05       	cpc	r21, r1
    3b64:	08 f4       	brcc	.+2      	; 0x3b68 <sysex_decode+0x2a>
    3b66:	6f c0       	rjmp	.+222    	; 0x3c46 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    3b68:	7a 01       	movw	r14, r20
    3b6a:	f6 94       	lsr	r15
    3b6c:	e7 94       	ror	r14
    3b6e:	f6 94       	lsr	r15
    3b70:	e7 94       	ror	r14
    3b72:	f6 94       	lsr	r15
    3b74:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3b76:	e1 14       	cp	r14, r1
    3b78:	f1 04       	cpc	r15, r1
    3b7a:	29 f1       	breq	.+74     	; 0x3bc6 <sysex_decode+0x88>
    3b7c:	eb 01       	movw	r28, r22
    3b7e:	b3 01       	movw	r22, r6
    3b80:	00 e0       	ldi	r16, 0x00	; 0
    3b82:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3b84:	cc 24       	eor	r12, r12
    3b86:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3b88:	de 01       	movw	r26, r28
    3b8a:	11 96       	adiw	r26, 0x01	; 1
    3b8c:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3b8e:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3b90:	2d 91       	ld	r18, X+
    3b92:	2f 77       	andi	r18, 0x7F	; 127
    3b94:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3b96:	4f 5f       	subi	r20, 0xFF	; 255
    3b98:	5f 4f       	sbci	r21, 0xFF	; 255
    3b9a:	88 81       	ld	r24, Y
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	04 2e       	mov	r0, r20
    3ba0:	02 c0       	rjmp	.+4      	; 0x3ba6 <sysex_decode+0x68>
    3ba2:	88 0f       	add	r24, r24
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	0a 94       	dec	r0
    3ba8:	e2 f7       	brpl	.-8      	; 0x3ba2 <sysex_decode+0x64>
    3baa:	80 78       	andi	r24, 0x80	; 128
    3bac:	28 2b       	or	r18, r24
    3bae:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    3bb0:	47 30       	cpi	r20, 0x07	; 7
    3bb2:	51 05       	cpc	r21, r1
    3bb4:	69 f7       	brne	.-38     	; 0x3b90 <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    3bb6:	0f 5f       	subi	r16, 0xFF	; 255
    3bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bba:	28 96       	adiw	r28, 0x08	; 8
    3bbc:	69 5f       	subi	r22, 0xF9	; 249
    3bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc0:	0e 15       	cp	r16, r14
    3bc2:	1f 05       	cpc	r17, r15
    3bc4:	09 f7       	brne	.-62     	; 0x3b88 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3bc6:	5a 2d       	mov	r21, r10
    3bc8:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3bca:	99 f1       	breq	.+102    	; 0x3c32 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    3bcc:	e7 01       	movw	r28, r14
    3bce:	cc 0f       	add	r28, r28
    3bd0:	dd 1f       	adc	r29, r29
    3bd2:	cc 0f       	add	r28, r28
    3bd4:	dd 1f       	adc	r29, r29
    3bd6:	cc 0f       	add	r28, r28
    3bd8:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3bda:	8e 01       	movw	r16, r28
    3bdc:	0e 19       	sub	r16, r14
    3bde:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    3be0:	65 2f       	mov	r22, r21
    3be2:	70 e0       	ldi	r23, 0x00	; 0
    3be4:	61 50       	subi	r22, 0x01	; 1
    3be6:	70 40       	sbci	r23, 0x00	; 0
    3be8:	f9 f0       	breq	.+62     	; 0x3c28 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3bea:	ce 01       	movw	r24, r28
    3bec:	01 96       	adiw	r24, 0x01	; 1
    3bee:	d4 01       	movw	r26, r8
    3bf0:	a8 0f       	add	r26, r24
    3bf2:	b9 1f       	adc	r27, r25
    3bf4:	f3 01       	movw	r30, r6
    3bf6:	e0 0f       	add	r30, r16
    3bf8:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3bfe:	c8 0d       	add	r28, r8
    3c00:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3c02:	4d 91       	ld	r20, X+
    3c04:	4f 77       	andi	r20, 0x7F	; 127
    3c06:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3c08:	2f 5f       	subi	r18, 0xFF	; 255
    3c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c0c:	88 81       	ld	r24, Y
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	02 2e       	mov	r0, r18
    3c12:	02 c0       	rjmp	.+4      	; 0x3c18 <sysex_decode+0xda>
    3c14:	88 0f       	add	r24, r24
    3c16:	99 1f       	adc	r25, r25
    3c18:	0a 94       	dec	r0
    3c1a:	e2 f7       	brpl	.-8      	; 0x3c14 <sysex_decode+0xd6>
    3c1c:	80 78       	andi	r24, 0x80	; 128
    3c1e:	48 2b       	or	r20, r24
    3c20:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3c22:	26 17       	cp	r18, r22
    3c24:	37 07       	cpc	r19, r23
    3c26:	68 f3       	brcs	.-38     	; 0x3c02 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3c28:	c8 01       	movw	r24, r16
    3c2a:	01 97       	sbiw	r24, 0x01	; 1
    3c2c:	85 0f       	add	r24, r21
    3c2e:	91 1d       	adc	r25, r1
    3c30:	0c c0       	rjmp	.+24     	; 0x3c4a <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3c32:	c7 01       	movw	r24, r14
    3c34:	88 0f       	add	r24, r24
    3c36:	99 1f       	adc	r25, r25
    3c38:	88 0f       	add	r24, r24
    3c3a:	99 1f       	adc	r25, r25
    3c3c:	88 0f       	add	r24, r24
    3c3e:	99 1f       	adc	r25, r25
    3c40:	8e 19       	sub	r24, r14
    3c42:	9f 09       	sbc	r25, r15
    3c44:	02 c0       	rjmp	.+4      	; 0x3c4a <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3c4a:	df 91       	pop	r29
    3c4c:	cf 91       	pop	r28
    3c4e:	1f 91       	pop	r17
    3c50:	0f 91       	pop	r16
    3c52:	ff 90       	pop	r15
    3c54:	ef 90       	pop	r14
    3c56:	df 90       	pop	r13
    3c58:	cf 90       	pop	r12
    3c5a:	bf 90       	pop	r11
    3c5c:	af 90       	pop	r10
    3c5e:	9f 90       	pop	r9
    3c60:	8f 90       	pop	r8
    3c62:	7f 90       	pop	r7
    3c64:	6f 90       	pop	r6
    3c66:	08 95       	ret

00003c68 <__mulsi3>:
    3c68:	62 9f       	mul	r22, r18
    3c6a:	d0 01       	movw	r26, r0
    3c6c:	73 9f       	mul	r23, r19
    3c6e:	f0 01       	movw	r30, r0
    3c70:	82 9f       	mul	r24, r18
    3c72:	e0 0d       	add	r30, r0
    3c74:	f1 1d       	adc	r31, r1
    3c76:	64 9f       	mul	r22, r20
    3c78:	e0 0d       	add	r30, r0
    3c7a:	f1 1d       	adc	r31, r1
    3c7c:	92 9f       	mul	r25, r18
    3c7e:	f0 0d       	add	r31, r0
    3c80:	83 9f       	mul	r24, r19
    3c82:	f0 0d       	add	r31, r0
    3c84:	74 9f       	mul	r23, r20
    3c86:	f0 0d       	add	r31, r0
    3c88:	65 9f       	mul	r22, r21
    3c8a:	f0 0d       	add	r31, r0
    3c8c:	99 27       	eor	r25, r25
    3c8e:	72 9f       	mul	r23, r18
    3c90:	b0 0d       	add	r27, r0
    3c92:	e1 1d       	adc	r30, r1
    3c94:	f9 1f       	adc	r31, r25
    3c96:	63 9f       	mul	r22, r19
    3c98:	b0 0d       	add	r27, r0
    3c9a:	e1 1d       	adc	r30, r1
    3c9c:	f9 1f       	adc	r31, r25
    3c9e:	bd 01       	movw	r22, r26
    3ca0:	cf 01       	movw	r24, r30
    3ca2:	11 24       	eor	r1, r1
    3ca4:	08 95       	ret

00003ca6 <__udivmodhi4>:
    3ca6:	aa 1b       	sub	r26, r26
    3ca8:	bb 1b       	sub	r27, r27
    3caa:	51 e1       	ldi	r21, 0x11	; 17
    3cac:	07 c0       	rjmp	.+14     	; 0x3cbc <__udivmodhi4_ep>

00003cae <__udivmodhi4_loop>:
    3cae:	aa 1f       	adc	r26, r26
    3cb0:	bb 1f       	adc	r27, r27
    3cb2:	a6 17       	cp	r26, r22
    3cb4:	b7 07       	cpc	r27, r23
    3cb6:	10 f0       	brcs	.+4      	; 0x3cbc <__udivmodhi4_ep>
    3cb8:	a6 1b       	sub	r26, r22
    3cba:	b7 0b       	sbc	r27, r23

00003cbc <__udivmodhi4_ep>:
    3cbc:	88 1f       	adc	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	5a 95       	dec	r21
    3cc2:	a9 f7       	brne	.-22     	; 0x3cae <__udivmodhi4_loop>
    3cc4:	80 95       	com	r24
    3cc6:	90 95       	com	r25
    3cc8:	bc 01       	movw	r22, r24
    3cca:	cd 01       	movw	r24, r26
    3ccc:	08 95       	ret

00003cce <__divmodhi4>:
    3cce:	97 fb       	bst	r25, 7
    3cd0:	09 2e       	mov	r0, r25
    3cd2:	07 26       	eor	r0, r23
    3cd4:	0a d0       	rcall	.+20     	; 0x3cea <__divmodhi4_neg1>
    3cd6:	77 fd       	sbrc	r23, 7
    3cd8:	04 d0       	rcall	.+8      	; 0x3ce2 <__divmodhi4_neg2>
    3cda:	e5 df       	rcall	.-54     	; 0x3ca6 <__udivmodhi4>
    3cdc:	06 d0       	rcall	.+12     	; 0x3cea <__divmodhi4_neg1>
    3cde:	00 20       	and	r0, r0
    3ce0:	1a f4       	brpl	.+6      	; 0x3ce8 <__divmodhi4_exit>

00003ce2 <__divmodhi4_neg2>:
    3ce2:	70 95       	com	r23
    3ce4:	61 95       	neg	r22
    3ce6:	7f 4f       	sbci	r23, 0xFF	; 255

00003ce8 <__divmodhi4_exit>:
    3ce8:	08 95       	ret

00003cea <__divmodhi4_neg1>:
    3cea:	f6 f7       	brtc	.-4      	; 0x3ce8 <__divmodhi4_exit>
    3cec:	90 95       	com	r25
    3cee:	81 95       	neg	r24
    3cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf2:	08 95       	ret

00003cf4 <do_random>:
    3cf4:	a0 e0       	ldi	r26, 0x00	; 0
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	e0 e8       	ldi	r30, 0x80	; 128
    3cfa:	fe e1       	ldi	r31, 0x1E	; 30
    3cfc:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <__prologue_saves__+0xc>
    3d00:	ec 01       	movw	r28, r24
    3d02:	88 81       	ld	r24, Y
    3d04:	99 81       	ldd	r25, Y+1	; 0x01
    3d06:	aa 81       	ldd	r26, Y+2	; 0x02
    3d08:	bb 81       	ldd	r27, Y+3	; 0x03
    3d0a:	00 97       	sbiw	r24, 0x00	; 0
    3d0c:	a1 05       	cpc	r26, r1
    3d0e:	b1 05       	cpc	r27, r1
    3d10:	21 f4       	brne	.+8      	; 0x3d1a <do_random+0x26>
    3d12:	84 e2       	ldi	r24, 0x24	; 36
    3d14:	99 ed       	ldi	r25, 0xD9	; 217
    3d16:	ab e5       	ldi	r26, 0x5B	; 91
    3d18:	b7 e0       	ldi	r27, 0x07	; 7
    3d1a:	bc 01       	movw	r22, r24
    3d1c:	cd 01       	movw	r24, r26
    3d1e:	2d e1       	ldi	r18, 0x1D	; 29
    3d20:	33 ef       	ldi	r19, 0xF3	; 243
    3d22:	41 e0       	ldi	r20, 0x01	; 1
    3d24:	50 e0       	ldi	r21, 0x00	; 0
    3d26:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <__divmodsi4>
    3d2a:	49 01       	movw	r8, r18
    3d2c:	5a 01       	movw	r10, r20
    3d2e:	27 ea       	ldi	r18, 0xA7	; 167
    3d30:	31 e4       	ldi	r19, 0x41	; 65
    3d32:	40 e0       	ldi	r20, 0x00	; 0
    3d34:	50 e0       	ldi	r21, 0x00	; 0
    3d36:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <__mulsi3>
    3d3a:	6b 01       	movw	r12, r22
    3d3c:	7c 01       	movw	r14, r24
    3d3e:	c5 01       	movw	r24, r10
    3d40:	b4 01       	movw	r22, r8
    3d42:	2c ee       	ldi	r18, 0xEC	; 236
    3d44:	34 ef       	ldi	r19, 0xF4	; 244
    3d46:	4f ef       	ldi	r20, 0xFF	; 255
    3d48:	5f ef       	ldi	r21, 0xFF	; 255
    3d4a:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <__mulsi3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	c8 0e       	add	r12, r24
    3d54:	d9 1e       	adc	r13, r25
    3d56:	ea 1e       	adc	r14, r26
    3d58:	fb 1e       	adc	r15, r27
    3d5a:	f7 fe       	sbrs	r15, 7
    3d5c:	08 c0       	rjmp	.+16     	; 0x3d6e <do_random+0x7a>
    3d5e:	8f ef       	ldi	r24, 0xFF	; 255
    3d60:	9f ef       	ldi	r25, 0xFF	; 255
    3d62:	af ef       	ldi	r26, 0xFF	; 255
    3d64:	bf e7       	ldi	r27, 0x7F	; 127
    3d66:	c8 0e       	add	r12, r24
    3d68:	d9 1e       	adc	r13, r25
    3d6a:	ea 1e       	adc	r14, r26
    3d6c:	fb 1e       	adc	r15, r27
    3d6e:	c8 82       	st	Y, r12
    3d70:	d9 82       	std	Y+1, r13	; 0x01
    3d72:	ea 82       	std	Y+2, r14	; 0x02
    3d74:	fb 82       	std	Y+3, r15	; 0x03
    3d76:	97 01       	movw	r18, r14
    3d78:	86 01       	movw	r16, r12
    3d7a:	3f 77       	andi	r19, 0x7F	; 127
    3d7c:	b8 01       	movw	r22, r16
    3d7e:	c9 01       	movw	r24, r18
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
    3d84:	ec e0       	ldi	r30, 0x0C	; 12
    3d86:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__epilogue_restores__+0xc>

00003d8a <random_r>:
    3d8a:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <do_random>
    3d8e:	08 95       	ret

00003d90 <random>:
    3d90:	80 eb       	ldi	r24, 0xB0	; 176
    3d92:	92 e0       	ldi	r25, 0x02	; 2
    3d94:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <do_random>
    3d98:	08 95       	ret

00003d9a <srandom>:
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	80 93 b0 02 	sts	0x02B0, r24
    3da2:	90 93 b1 02 	sts	0x02B1, r25
    3da6:	a0 93 b2 02 	sts	0x02B2, r26
    3daa:	b0 93 b3 02 	sts	0x02B3, r27
    3dae:	08 95       	ret

00003db0 <memcpy>:
    3db0:	fb 01       	movw	r30, r22
    3db2:	dc 01       	movw	r26, r24
    3db4:	02 c0       	rjmp	.+4      	; 0x3dba <memcpy+0xa>
    3db6:	01 90       	ld	r0, Z+
    3db8:	0d 92       	st	X+, r0
    3dba:	41 50       	subi	r20, 0x01	; 1
    3dbc:	50 40       	sbci	r21, 0x00	; 0
    3dbe:	d8 f7       	brcc	.-10     	; 0x3db6 <memcpy+0x6>
    3dc0:	08 95       	ret

00003dc2 <memmove>:
    3dc2:	68 17       	cp	r22, r24
    3dc4:	79 07       	cpc	r23, r25
    3dc6:	68 f4       	brcc	.+26     	; 0x3de2 <memmove+0x20>
    3dc8:	fb 01       	movw	r30, r22
    3dca:	dc 01       	movw	r26, r24
    3dcc:	e4 0f       	add	r30, r20
    3dce:	f5 1f       	adc	r31, r21
    3dd0:	a4 0f       	add	r26, r20
    3dd2:	b5 1f       	adc	r27, r21
    3dd4:	02 c0       	rjmp	.+4      	; 0x3dda <memmove+0x18>
    3dd6:	02 90       	ld	r0, -Z
    3dd8:	0e 92       	st	-X, r0
    3dda:	41 50       	subi	r20, 0x01	; 1
    3ddc:	50 40       	sbci	r21, 0x00	; 0
    3dde:	d8 f7       	brcc	.-10     	; 0x3dd6 <memmove+0x14>
    3de0:	08 95       	ret
    3de2:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <memcpy>

00003de6 <__eerd_block_m6450a>:
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22

00003dea <__eerd_blraw_m6450a>:
    3dea:	fc 01       	movw	r30, r24
    3dec:	f9 99       	sbic	0x1f, 1	; 31
    3dee:	fe cf       	rjmp	.-4      	; 0x3dec <__eerd_blraw_m6450a+0x2>
    3df0:	06 c0       	rjmp	.+12     	; 0x3dfe <__eerd_blraw_m6450a+0x14>
    3df2:	f2 bd       	out	0x22, r31	; 34
    3df4:	e1 bd       	out	0x21, r30	; 33
    3df6:	f8 9a       	sbi	0x1f, 0	; 31
    3df8:	31 96       	adiw	r30, 0x01	; 1
    3dfa:	00 b4       	in	r0, 0x20	; 32
    3dfc:	0d 92       	st	X+, r0
    3dfe:	41 50       	subi	r20, 0x01	; 1
    3e00:	50 40       	sbci	r21, 0x00	; 0
    3e02:	b8 f7       	brcc	.-18     	; 0x3df2 <__eerd_blraw_m6450a+0x8>
    3e04:	08 95       	ret

00003e06 <__eerd_word_m6450a>:
    3e06:	a8 e1       	ldi	r26, 0x18	; 24
    3e08:	b0 e0       	ldi	r27, 0x00	; 0
    3e0a:	42 e0       	ldi	r20, 0x02	; 2
    3e0c:	50 e0       	ldi	r21, 0x00	; 0
    3e0e:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__eerd_blraw_m6450a>

00003e12 <__eeupd_block_m6450a>:
    3e12:	dc 01       	movw	r26, r24
    3e14:	a4 0f       	add	r26, r20
    3e16:	b5 1f       	adc	r27, r21
    3e18:	41 50       	subi	r20, 0x01	; 1
    3e1a:	50 40       	sbci	r21, 0x00	; 0
    3e1c:	48 f0       	brcs	.+18     	; 0x3e30 <__eeupd_block_m6450a+0x1e>
    3e1e:	cb 01       	movw	r24, r22
    3e20:	84 0f       	add	r24, r20
    3e22:	95 1f       	adc	r25, r21
    3e24:	2e 91       	ld	r18, -X
    3e26:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <__eeupd_r18_m6450a>
    3e2a:	41 50       	subi	r20, 0x01	; 1
    3e2c:	50 40       	sbci	r21, 0x00	; 0
    3e2e:	d0 f7       	brcc	.-12     	; 0x3e24 <__eeupd_block_m6450a+0x12>
    3e30:	08 95       	ret

00003e32 <__eeupd_byte_m6450a>:
    3e32:	26 2f       	mov	r18, r22

00003e34 <__eeupd_r18_m6450a>:
    3e34:	f9 99       	sbic	0x1f, 1	; 31
    3e36:	fe cf       	rjmp	.-4      	; 0x3e34 <__eeupd_r18_m6450a>
    3e38:	92 bd       	out	0x22, r25	; 34
    3e3a:	81 bd       	out	0x21, r24	; 33
    3e3c:	f8 9a       	sbi	0x1f, 0	; 31
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	00 b4       	in	r0, 0x20	; 32
    3e42:	02 16       	cp	r0, r18
    3e44:	31 f0       	breq	.+12     	; 0x3e52 <__eeupd_r18_m6450a+0x1e>
    3e46:	20 bd       	out	0x20, r18	; 32
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	fa 9a       	sbi	0x1f, 2	; 31
    3e4e:	f9 9a       	sbi	0x1f, 1	; 31
    3e50:	0f be       	out	0x3f, r0	; 63
    3e52:	08 95       	ret

00003e54 <__eeupd_word_m6450a>:
    3e54:	01 96       	adiw	r24, 0x01	; 1
    3e56:	27 2f       	mov	r18, r23
    3e58:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <__eeupd_r18_m6450a>
    3e5c:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__eeupd_byte_m6450a>

00003e60 <__divmodsi4>:
    3e60:	97 fb       	bst	r25, 7
    3e62:	09 2e       	mov	r0, r25
    3e64:	05 26       	eor	r0, r21
    3e66:	0e d0       	rcall	.+28     	; 0x3e84 <__divmodsi4_neg1>
    3e68:	57 fd       	sbrc	r21, 7
    3e6a:	04 d0       	rcall	.+8      	; 0x3e74 <__divmodsi4_neg2>
    3e6c:	4b d0       	rcall	.+150    	; 0x3f04 <__udivmodsi4>
    3e6e:	0a d0       	rcall	.+20     	; 0x3e84 <__divmodsi4_neg1>
    3e70:	00 1c       	adc	r0, r0
    3e72:	38 f4       	brcc	.+14     	; 0x3e82 <__divmodsi4_exit>

00003e74 <__divmodsi4_neg2>:
    3e74:	50 95       	com	r21
    3e76:	40 95       	com	r20
    3e78:	30 95       	com	r19
    3e7a:	21 95       	neg	r18
    3e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e7e:	4f 4f       	sbci	r20, 0xFF	; 255
    3e80:	5f 4f       	sbci	r21, 0xFF	; 255

00003e82 <__divmodsi4_exit>:
    3e82:	08 95       	ret

00003e84 <__divmodsi4_neg1>:
    3e84:	f6 f7       	brtc	.-4      	; 0x3e82 <__divmodsi4_exit>
    3e86:	90 95       	com	r25
    3e88:	80 95       	com	r24
    3e8a:	70 95       	com	r23
    3e8c:	61 95       	neg	r22
    3e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e90:	8f 4f       	sbci	r24, 0xFF	; 255
    3e92:	9f 4f       	sbci	r25, 0xFF	; 255
    3e94:	08 95       	ret

00003e96 <__prologue_saves__>:
    3e96:	2f 92       	push	r2
    3e98:	3f 92       	push	r3
    3e9a:	4f 92       	push	r4
    3e9c:	5f 92       	push	r5
    3e9e:	6f 92       	push	r6
    3ea0:	7f 92       	push	r7
    3ea2:	8f 92       	push	r8
    3ea4:	9f 92       	push	r9
    3ea6:	af 92       	push	r10
    3ea8:	bf 92       	push	r11
    3eaa:	cf 92       	push	r12
    3eac:	df 92       	push	r13
    3eae:	ef 92       	push	r14
    3eb0:	ff 92       	push	r15
    3eb2:	0f 93       	push	r16
    3eb4:	1f 93       	push	r17
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29
    3eba:	cd b7       	in	r28, 0x3d	; 61
    3ebc:	de b7       	in	r29, 0x3e	; 62
    3ebe:	ca 1b       	sub	r28, r26
    3ec0:	db 0b       	sbc	r29, r27
    3ec2:	0f b6       	in	r0, 0x3f	; 63
    3ec4:	f8 94       	cli
    3ec6:	de bf       	out	0x3e, r29	; 62
    3ec8:	0f be       	out	0x3f, r0	; 63
    3eca:	cd bf       	out	0x3d, r28	; 61
    3ecc:	09 94       	ijmp

00003ece <__epilogue_restores__>:
    3ece:	2a 88       	ldd	r2, Y+18	; 0x12
    3ed0:	39 88       	ldd	r3, Y+17	; 0x11
    3ed2:	48 88       	ldd	r4, Y+16	; 0x10
    3ed4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ed6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ed8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3eda:	8c 84       	ldd	r8, Y+12	; 0x0c
    3edc:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ede:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ee0:	b9 84       	ldd	r11, Y+9	; 0x09
    3ee2:	c8 84       	ldd	r12, Y+8	; 0x08
    3ee4:	df 80       	ldd	r13, Y+7	; 0x07
    3ee6:	ee 80       	ldd	r14, Y+6	; 0x06
    3ee8:	fd 80       	ldd	r15, Y+5	; 0x05
    3eea:	0c 81       	ldd	r16, Y+4	; 0x04
    3eec:	1b 81       	ldd	r17, Y+3	; 0x03
    3eee:	aa 81       	ldd	r26, Y+2	; 0x02
    3ef0:	b9 81       	ldd	r27, Y+1	; 0x01
    3ef2:	ce 0f       	add	r28, r30
    3ef4:	d1 1d       	adc	r29, r1
    3ef6:	0f b6       	in	r0, 0x3f	; 63
    3ef8:	f8 94       	cli
    3efa:	de bf       	out	0x3e, r29	; 62
    3efc:	0f be       	out	0x3f, r0	; 63
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	ed 01       	movw	r28, r26
    3f02:	08 95       	ret

00003f04 <__udivmodsi4>:
    3f04:	a1 e2       	ldi	r26, 0x21	; 33
    3f06:	1a 2e       	mov	r1, r26
    3f08:	aa 1b       	sub	r26, r26
    3f0a:	bb 1b       	sub	r27, r27
    3f0c:	fd 01       	movw	r30, r26
    3f0e:	0d c0       	rjmp	.+26     	; 0x3f2a <__udivmodsi4_ep>

00003f10 <__udivmodsi4_loop>:
    3f10:	aa 1f       	adc	r26, r26
    3f12:	bb 1f       	adc	r27, r27
    3f14:	ee 1f       	adc	r30, r30
    3f16:	ff 1f       	adc	r31, r31
    3f18:	a2 17       	cp	r26, r18
    3f1a:	b3 07       	cpc	r27, r19
    3f1c:	e4 07       	cpc	r30, r20
    3f1e:	f5 07       	cpc	r31, r21
    3f20:	20 f0       	brcs	.+8      	; 0x3f2a <__udivmodsi4_ep>
    3f22:	a2 1b       	sub	r26, r18
    3f24:	b3 0b       	sbc	r27, r19
    3f26:	e4 0b       	sbc	r30, r20
    3f28:	f5 0b       	sbc	r31, r21

00003f2a <__udivmodsi4_ep>:
    3f2a:	66 1f       	adc	r22, r22
    3f2c:	77 1f       	adc	r23, r23
    3f2e:	88 1f       	adc	r24, r24
    3f30:	99 1f       	adc	r25, r25
    3f32:	1a 94       	dec	r1
    3f34:	69 f7       	brne	.-38     	; 0x3f10 <__udivmodsi4_loop>
    3f36:	60 95       	com	r22
    3f38:	70 95       	com	r23
    3f3a:	80 95       	com	r24
    3f3c:	90 95       	com	r25
    3f3e:	9b 01       	movw	r18, r22
    3f40:	ac 01       	movw	r20, r24
    3f42:	bd 01       	movw	r22, r26
    3f44:	cf 01       	movw	r24, r30
    3f46:	08 95       	ret

00003f48 <_exit>:
    3f48:	f8 94       	cli

00003f4a <__stop_program>:
    3f4a:	ff cf       	rjmp	.-2      	; 0x3f4a <__stop_program>
