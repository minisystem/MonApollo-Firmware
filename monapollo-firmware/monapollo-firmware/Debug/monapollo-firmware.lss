
monapollo-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  000039e6  00003a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039e6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cc  008002b0  008002b0  00003c4a  2**0
                  ALLOC
  3 .eeprom       00000674  00810000  00810000  00003c4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000bf4  00000000  00000000  000042c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033e  00000000  00000000  00004eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002e0  00000000  00000000  000051f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000062b7  00000000  00000000  000054d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016c5  00000000  00000000  0000b78f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001fce  00000000  00000000  0000ce54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cd8  00000000  00000000  0000ee24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018fd  00000000  00000000  0000fafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002c85  00000000  00000000  000113f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  0001407e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_9>
      28:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_10>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf ef       	ldi	r28, 0xFF	; 255
      6a:	d0 e1       	ldi	r29, 0x10	; 16
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e0       	ldi	r26, 0x00	; 0
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	e6 ee       	ldi	r30, 0xE6	; 230
      78:	f9 e3       	ldi	r31, 0x39	; 57
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	14 e0       	ldi	r17, 0x04	; 4
      88:	a0 eb       	ldi	r26, 0xB0	; 176
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ac 37       	cpi	r26, 0x7C	; 124
      92:	b1 07       	cpc	r27, r17
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 51 03 	call	0x6a2	; 0x6a2 <main>
      9a:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <setup_adc>:

void setup_adc(void)
{
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
	//ADCSRA |= (1<<ADPS2) | (1<<ADPS1); //set ADC clock to 312.5 KHz for 20 MHz clock
	ADCSRA |= (1<<ADPS2);// | (1<<ADPS0); //set ADC clock to 1.25 MHz for 20 MHz clock
      a2:	ea e7       	ldi	r30, 0x7A	; 122
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	84 60       	ori	r24, 0x04	; 4
      aa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
      ac:	ac e7       	ldi	r26, 0x7C	; 124
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	8c 91       	ld	r24, X
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
      b6:	ae e7       	ldi	r26, 0x7E	; 126
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	8c 91       	ld	r24, X
      bc:	81 60       	ori	r24, 0x01	; 1
      be:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
}
      c6:	08 95       	ret

000000c8 <read_pot>:

uint16_t read_pot(struct potentiometer *pot) {
      c8:	fc 01       	movw	r30, r24
	
	DATA_BUS = pot->channel;
      ca:	83 81       	ldd	r24, Z+3	; 0x03
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	82 b9       	out	0x02, r24	; 2
	POT_MUX &= ~(1<<pot->mux_addr);
      d0:	aa ed       	ldi	r26, 0xDA	; 218
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	4c 91       	ld	r20, X
      d6:	83 81       	ldd	r24, Z+3	; 0x03
      d8:	82 95       	swap	r24
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	87 70       	andi	r24, 0x07	; 7
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <read_pot+0x22>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <read_pot+0x1e>
      ee:	cb 01       	movw	r24, r22
      f0:	80 95       	com	r24
      f2:	84 23       	and	r24, r20
      f4:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	7d e0       	ldi	r23, 0x0D	; 13
      f8:	7a 95       	dec	r23
      fa:	f1 f7       	brne	.-4      	; 0xf8 <read_pot+0x30>
      fc:	00 00       	nop
	_delay_us(2); //ADC settling time. Previously used 10 us, testing 2 us now. Now testing 1 us. See how it sounds. Nope. Needs to 2 us minimum to prevent crosstalk between multiplexer channels
	ADCSRA |= (1<<ADSC); //start ADC conversion
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	8c 91       	ld	r24, X
     104:	80 64       	ori	r24, 0x40	; 64
     106:	8c 93       	st	X, r24
	while ((ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles of ADC clock - 10.4 us for 1.25Mhz clock) - need to figure out what to do with this time - would interrupt be more efficient?
     108:	8c 91       	ld	r24, X
     10a:	86 fd       	sbrc	r24, 6
     10c:	fd cf       	rjmp	.-6      	; 0x108 <read_pot+0x40>
	POT_MUX |= (1<<pot->mux_addr); //disable pot multiplexer
     10e:	aa ed       	ldi	r26, 0xDA	; 218
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	4c 91       	ld	r20, X
     114:	83 81       	ldd	r24, Z+3	; 0x03
     116:	82 95       	swap	r24
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	87 70       	andi	r24, 0x07	; 7
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <read_pot+0x60>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <read_pot+0x5c>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
	//note that ADSC reads HIGH as long as conversion is in progress, goes LOW when conversion is complete
			
			
	uint16_t adc_read = ADCL;
     132:	80 91 78 00 	lds	r24, 0x0078
     136:	90 e0       	ldi	r25, 0x00	; 0
	adc_read = adc_read | (ADCH <<8);
     138:	40 91 79 00 	lds	r20, 0x0079
     13c:	34 2f       	mov	r19, r20
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	82 2b       	or	r24, r18
     142:	93 2b       	or	r25, r19
			
	return adc_read;
     144:	08 95       	ret

00000146 <get_current_note>:

uint8_t get_current_note() { //this is a kludge. Either make current_note global or force inline this function? Ask Omar. BUT, this could be where interpolation is calculated!
	
	return current_note;
	
}
     146:	80 91 b0 02 	lds	r24, 0x02B0
     14a:	08 95       	ret

0000014c <new_note>:

void new_note(uint8_t note, uint8_t velocity) {
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	18 2f       	mov	r17, r24
     156:	06 2f       	mov	r16, r22
	
	
	//shift contents of note_pool right by one element
	memmove(note_pool + 1, note_pool, sizeof(note_pool) -sizeof(*note_pool)); //last argument: sizeof struct - sizeof one element of struct. See http://www.cplusplus.com/forum/beginner/1936/
     158:	8a eb       	ldi	r24, 0xBA	; 186
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	ec 01       	movw	r28, r24
     15e:	22 97       	sbiw	r28, 0x02	; 2
     160:	be 01       	movw	r22, r28
     162:	4e e0       	ldi	r20, 0x0E	; 14
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 a2 1c 	call	0x3944	; 0x3944 <memmove>
	
	//add new note to pool
	note_pool[0].note = note;
     16a:	18 83       	st	Y, r17
	note_pool[0].velocity = velocity;
     16c:	09 83       	std	Y+1, r16	; 0x01
	
	current_note = note; //set current note
     16e:	10 93 b0 02 	sts	0x02B0, r17
	
} 
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <remove_note>:
void remove_note(uint8_t note){
     17c:	cf 93       	push	r28
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
     17e:	c0 91 b8 01 	lds	r28, 0x01B8
	for (int i = 0; i <= 7; i++) { //search for note in note stack
		
		if (note_pool[i].note == note) {
     182:	c8 17       	cp	r28, r24
     184:	41 f0       	breq	.+16     	; 0x196 <remove_note+0x1a>
     186:	ea eb       	ldi	r30, 0xBA	; 186
     188:	f1 e0       	ldi	r31, 0x01	; 1
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
     18e:	90 81       	ld	r25, Z
     190:	98 17       	cp	r25, r24
     192:	59 f4       	brne	.+22     	; 0x1aa <remove_note+0x2e>
     194:	02 c0       	rjmp	.+4      	; 0x19a <remove_note+0x1e>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
		
		if (note_pool[i].note == note) {
			
			note_pool[i].note = EMPTY;
     19a:	fa 01       	movw	r30, r20
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e8 54       	subi	r30, 0x48	; 72
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	80 83       	st	Z, r24
			free_slot = i;
			break;
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <remove_note+0x3c>
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
	uint8_t temp_note = note_pool[0].note; //holder for current note
	for (int i = 0; i <= 7; i++) { //search for note in note stack
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	32 96       	adiw	r30, 0x02	; 2
     1b0:	48 30       	cpi	r20, 0x08	; 8
     1b2:	51 05       	cpc	r21, r1
     1b4:	61 f7       	brne	.-40     	; 0x18e <remove_note+0x12>
	current_note = note; //set current note
	
} 
void remove_note(uint8_t note){
	
	uint8_t free_slot = 0;
     1b6:	40 e0       	ldi	r20, 0x00	; 0
		
	}
	
	
	//now shift elements left	
	memmove(note_pool + free_slot, note_pool + free_slot + 1, sizeof(note_pool) - (sizeof(*note_pool)*(free_slot + 1)));
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	ca 01       	movw	r24, r20
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	bc 01       	movw	r22, r24
     1c2:	66 54       	subi	r22, 0x46	; 70
     1c4:	7e 4f       	sbci	r23, 0xFE	; 254
     1c6:	40 95       	com	r20
     1c8:	50 95       	com	r21
     1ca:	48 5f       	subi	r20, 0xF8	; 248
     1cc:	5f 4f       	sbci	r21, 0xFF	; 255
     1ce:	44 0f       	add	r20, r20
     1d0:	55 1f       	adc	r21, r21
     1d2:	88 54       	subi	r24, 0x48	; 72
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <memmove>
	note_pool[7].note = EMPTY;	
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	80 93 c6 01 	sts	0x01C6, r24
	
	//check to see if this is the last note released		
	//if it is, this might be a good place to ensure gate_buffer is empty
	if (note_pool[0].note == EMPTY) {
     1e0:	80 91 b8 01 	lds	r24, 0x01B8
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	19 f4       	brne	.+6      	; 0x1ee <remove_note+0x72>
		
		current_note = temp_note; //store last note released for maintaining pitch during envelope release stage
     1e8:	c0 93 b0 02 	sts	0x02B0, r28
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <remove_note+0x76>
		
	} else {		
		
		current_note = note_pool[0].note; //otherwise, the current note is the next one in the note stack
     1ee:	80 93 b0 02 	sts	0x02B0, r24

	}	
	
}
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <setup_system_clock>:
struct clock system_clock;

void setup_system_clock(void) {
	
	
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TIMER1_DIVIDE_1024;
     1f6:	8d e0       	ldi	r24, 0x0D	; 13
     1f8:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A);
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	80 93 6f 00 	sts	0x006F, r24
	
	
	
}
     202:	08 95       	ret

00000204 <update_clock_rate>:

void update_clock_rate(uint16_t rate) {
	
	OCR1A = rate;
     204:	90 93 89 00 	sts	0x0089, r25
     208:	80 93 88 00 	sts	0x0088, r24
	if (TCNT1 > rate) TCNT1 = rate - 1; //this prevents wrapping. setting TCNT1 = rate would cause immediate interrupt. Is that OK?
     20c:	20 91 84 00 	lds	r18, 0x0084
     210:	30 91 85 00 	lds	r19, 0x0085
     214:	82 17       	cp	r24, r18
     216:	93 07       	cpc	r25, r19
     218:	28 f4       	brcc	.+10     	; 0x224 <update_clock_rate+0x20>
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	90 93 85 00 	sts	0x0085, r25
     220:	80 93 84 00 	sts	0x0084, r24
     224:	08 95       	ret

00000226 <set_control_voltage>:
struct control_voltage sustain_2_cv		={SUSTAIN_2,	DAC_MUX_EN3};
struct control_voltage sustain_1_cv		={SUSTAIN_1,	DAC_MUX_EN3};
struct control_voltage release_2_cv		={RELEASE_2,	DAC_MUX_EN3};
struct control_voltage release_1_cv		={RELEASE_1,	DAC_MUX_EN3};		

void set_control_voltage (struct control_voltage * cv, uint16_t value) {
     226:	dc 01       	movw	r26, r24

	DAC_BUS_LOW = value & 0b00000011111111; //mask top 6 MSBs to set low byte
     228:	6b b9       	out	0x0b, r22	; 11
	
	DAC_BUS_HIGH = value >> 8; //shift away bottom LSBs to set high byte
     22a:	78 b9       	out	0x08, r23	; 8
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA
     22c:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);	
     22e:	a0 9a       	sbi	0x14, 0	; 20

	DATA_BUS = cv->channel; //set channel for DG408 multiplexer output
     230:	8c 91       	ld	r24, X
     232:	87 70       	andi	r24, 0x07	; 7
     234:	82 b9       	out	0x02, r24	; 2
     236:	66 e0       	ldi	r22, 0x06	; 6
     238:	6a 95       	dec	r22
     23a:	f1 f7       	brne	.-4      	; 0x238 <set_control_voltage+0x12>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <set_control_voltage+0x18>

	_delay_us(1); //AD5556 DAC has 0.5 us settling time. 1 us wasn't long enough for transitions from 10V to 0V
	DAC_MUX |= (1<<cv->mux_addr); //enable multiplexer
     23e:	ea ed       	ldi	r30, 0xDA	; 218
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	40 81       	ld	r20, Z
     244:	8c 91       	ld	r24, X
     246:	86 95       	lsr	r24
     248:	86 95       	lsr	r24
     24a:	86 95       	lsr	r24
     24c:	87 70       	andi	r24, 0x07	; 7
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	b9 01       	movw	r22, r18
     254:	02 c0       	rjmp	.+4      	; 0x25a <set_control_voltage+0x34>
     256:	66 0f       	add	r22, r22
     258:	77 1f       	adc	r23, r23
     25a:	8a 95       	dec	r24
     25c:	e2 f7       	brpl	.-8      	; 0x256 <set_control_voltage+0x30>
     25e:	cb 01       	movw	r24, r22
     260:	84 2b       	or	r24, r20
     262:	80 83       	st	Z, r24
     264:	76 e0       	ldi	r23, 0x06	; 6
     266:	7a 95       	dec	r23
     268:	f1 f7       	brne	.-4      	; 0x266 <set_control_voltage+0x40>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <set_control_voltage+0x46>
	_delay_us(1); //wait for S&H cap to charge - need to figure out how to do this more time efficiently
	DAC_MUX &= ~(1<<cv->mux_addr); //disable multiplexer
     26c:	80 81       	ld	r24, Z
     26e:	9c 91       	ld	r25, X
     270:	96 95       	lsr	r25
     272:	96 95       	lsr	r25
     274:	96 95       	lsr	r25
     276:	97 70       	andi	r25, 0x07	; 7
     278:	02 c0       	rjmp	.+4      	; 0x27e <set_control_voltage+0x58>
     27a:	22 0f       	add	r18, r18
     27c:	33 1f       	adc	r19, r19
     27e:	9a 95       	dec	r25
     280:	e2 f7       	brpl	.-8      	; 0x27a <set_control_voltage+0x54>
     282:	20 95       	com	r18
     284:	28 23       	and	r18, r24
     286:	20 83       	st	Z, r18
	
}	
     288:	08 95       	ret

0000028a <setup_dac>:

	
void setup_dac(void) //set up DAC
{
	DDRG |= (1<<DAC_WR) | (1<<DAC_RS); //set DAC control bits as outputs
     28a:	83 b3       	in	r24, 0x13	; 19
     28c:	83 60       	ori	r24, 0x03	; 3
     28e:	83 bb       	out	0x13, r24	; 19
	DDRD = 0xFF; //set DAC_BUS_LOW bits to outputs
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xFF;//set DAC_BUS_HIGH bits to outputs
     294:	97 b1       	in	r25, 0x07	; 7
     296:	87 b9       	out	0x07, r24	; 7
	DDRH |= (1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3); //set DAC_MUX_EN pins as outputs
     298:	e9 ed       	ldi	r30, 0xD9	; 217
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	8f 60       	ori	r24, 0x0F	; 15
     2a0:	80 83       	st	Z, r24
	
	DAC_MUX &= ~((1<<DAC_MUX_EN0) | (1<<DAC_MUX_EN1) | (1<<DAC_MUX_EN2) | (1<<DAC_MUX_EN3)); //disable DG408 VDAC multiplexers
     2a2:	ea ed       	ldi	r30, 0xDA	; 218
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	80 83       	st	Z, r24
	
	DAC_CTRL |= (1<<DAC_RS) | (1<<DAC_WR); //disable DAC
     2ac:	84 b3       	in	r24, 0x14	; 20
     2ae:	83 60       	ori	r24, 0x03	; 3
     2b0:	84 bb       	out	0x14, r24	; 20
	
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     2b2:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     2b4:	a1 9a       	sbi	0x14, 1	; 20
	
	DAC_CTRL &= ~(1<<DAC_WR); //write DATA - falling edge then rising edge to toggle DAC bits to output register
     2b6:	a0 98       	cbi	0x14, 0	; 20
	DAC_CTRL |= (1<<DAC_WR);
     2b8:	a0 9a       	sbi	0x14, 0	; 20
}
     2ba:	08 95       	ret

000002bc <display_dec>:
#include "synth.h"



void display_dec(uint16_t number, uint8_t place)
{
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	2e 97       	sbiw	r28, 0x0e	; 14
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t digit[] = {
     2d4:	28 e0       	ldi	r18, 0x08	; 8
     2d6:	29 83       	std	Y+1, r18	; 0x01
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	2a 83       	std	Y+2, r18	; 0x02
     2dc:	22 e0       	ldi	r18, 0x02	; 2
     2de:	2b 83       	std	Y+3, r18	; 0x03
     2e0:	24 e0       	ldi	r18, 0x04	; 4
     2e2:	2c 83       	std	Y+4, r18	; 0x04
		TENS,
		HUNDS,
		THOUS,
	};
	
	uint8_t dec[] = {
     2e4:	de 01       	movw	r26, r28
     2e6:	15 96       	adiw	r26, 0x05	; 5
     2e8:	e7 ee       	ldi	r30, 0xE7	; 231
     2ea:	f1 e0       	ldi	r31, 0x01	; 1
     2ec:	2a e0       	ldi	r18, 0x0A	; 10
     2ee:	01 90       	ld	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <display_dec+0x32>
		
		
	};
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
     2f6:	2f ef       	ldi	r18, 0xFF	; 255
     2f8:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     2fa:	ea ed       	ldi	r30, 0xDA	; 218
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	20 81       	ld	r18, Z
     300:	20 61       	ori	r18, 0x10	; 16
     302:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     304:	20 81       	ld	r18, Z
     306:	2f 7e       	andi	r18, 0xEF	; 239
     308:	20 83       	st	Z, r18
	
	//set anode bit
	DATA_BUS = digit[place];
     30a:	06 2f       	mov	r16, r22
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	de 01       	movw	r26, r28
     310:	a0 0f       	add	r26, r16
     312:	b1 1f       	adc	r27, r17
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	2c 91       	ld	r18, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	22 b9       	out	0x02, r18	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
     31c:	20 81       	ld	r18, Z
     31e:	20 62       	ori	r18, 0x20	; 32
     320:	20 83       	st	Z, r18
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
     322:	20 81       	ld	r18, Z
     324:	2f 7d       	andi	r18, 0xDF	; 223
     326:	20 83       	st	Z, r18
     328:	48 2f       	mov	r20, r24
     32a:	59 2f       	mov	r21, r25
     32c:	87 e2       	ldi	r24, 0x27	; 39
     32e:	40 31       	cpi	r20, 0x10	; 16
     330:	58 07       	cpc	r21, r24
     332:	10 f0       	brcs	.+4      	; 0x338 <display_dec+0x7c>
     334:	4f e0       	ldi	r20, 0x0F	; 15
     336:	57 e2       	ldi	r21, 0x27	; 39
	if (number > 9999) {
		number = 9999;
		}
	
	/* First division by 10 */
	q1 = (number >> 1) + (number >> 2);
     338:	ca 01       	movw	r24, r20
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	9a 01       	movw	r18, r20
     344:	36 95       	lsr	r19
     346:	27 95       	ror	r18
     348:	28 0f       	add	r18, r24
     34a:	39 1f       	adc	r19, r25
	q1 += q1 >> 4;
     34c:	c9 01       	movw	r24, r18
     34e:	92 95       	swap	r25
     350:	82 95       	swap	r24
     352:	8f 70       	andi	r24, 0x0F	; 15
     354:	89 27       	eor	r24, r25
     356:	9f 70       	andi	r25, 0x0F	; 15
     358:	89 27       	eor	r24, r25
     35a:	82 0f       	add	r24, r18
     35c:	93 1f       	adc	r25, r19
	q1 += q1 >> 8;
     35e:	29 2f       	mov	r18, r25
     360:	33 27       	eor	r19, r19
     362:	82 0f       	add	r24, r18
     364:	93 1f       	adc	r25, r19
	q2 = q1 >> 3;
     366:	96 95       	lsr	r25
     368:	87 95       	ror	r24
     36a:	96 95       	lsr	r25
     36c:	87 95       	ror	r24
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
	r = number - q2 * 10;
     372:	28 2f       	mov	r18, r24
     374:	22 0f       	add	r18, r18
     376:	32 2f       	mov	r19, r18
     378:	33 0f       	add	r19, r19
     37a:	33 0f       	add	r19, r19
     37c:	23 0f       	add	r18, r19
     37e:	e4 2f       	mov	r30, r20
     380:	e2 1b       	sub	r30, r18
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	ea 30       	cpi	r30, 0x0A	; 10
     388:	10 f4       	brcc	.+4      	; 0x38e <display_dec+0xd2>
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	68 0f       	add	r22, r24
     390:	79 1f       	adc	r23, r25
	ones_place = rem[r];

	/* second division by 10 */

	q2 = (qa >> 1) + (qa >> 2);
     392:	9b 01       	movw	r18, r22
     394:	36 95       	lsr	r19
     396:	27 95       	ror	r18
     398:	36 95       	lsr	r19
     39a:	27 95       	ror	r18
     39c:	ab 01       	movw	r20, r22
     39e:	56 95       	lsr	r21
     3a0:	47 95       	ror	r20
     3a2:	24 0f       	add	r18, r20
     3a4:	35 1f       	adc	r19, r21
	q2 += q2 >> 4;
     3a6:	c9 01       	movw	r24, r18
     3a8:	92 95       	swap	r25
     3aa:	82 95       	swap	r24
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	89 27       	eor	r24, r25
     3b0:	9f 70       	andi	r25, 0x0F	; 15
     3b2:	89 27       	eor	r24, r25
     3b4:	82 0f       	add	r24, r18
     3b6:	93 1f       	adc	r25, r19
	q2 += q2 >> 8;
     3b8:	29 2f       	mov	r18, r25
     3ba:	33 27       	eor	r19, r19
     3bc:	82 0f       	add	r24, r18
     3be:	93 1f       	adc	r25, r19
	q3 = q2 >> 3;
     3c0:	96 95       	lsr	r25
     3c2:	87 95       	ror	r24
     3c4:	96 95       	lsr	r25
     3c6:	87 95       	ror	r24
     3c8:	96 95       	lsr	r25
     3ca:	87 95       	ror	r24
	r = qa - q3 * 10;
     3cc:	98 2f       	mov	r25, r24
     3ce:	99 0f       	add	r25, r25
     3d0:	29 2f       	mov	r18, r25
     3d2:	22 0f       	add	r18, r18
     3d4:	22 0f       	add	r18, r18
     3d6:	92 0f       	add	r25, r18
     3d8:	69 1b       	sub	r22, r25
	qb = q3 + (r > 9);
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	6a 30       	cpi	r22, 0x0A	; 10
     3de:	08 f4       	brcc	.+2      	; 0x3e2 <display_dec+0x126>
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	89 0f       	add	r24, r25
	tens_place = rem[r];
     3e4:	41 ef       	ldi	r20, 0xF1	; 241
     3e6:	51 e0       	ldi	r21, 0x01	; 1
     3e8:	da 01       	movw	r26, r20
     3ea:	a6 0f       	add	r26, r22
     3ec:	b1 1d       	adc	r27, r1
     3ee:	3c 91       	ld	r19, X

	/* third division by 10 */

	q4 = (qb >> 1) + (qb >> 2);
     3f0:	28 2f       	mov	r18, r24
     3f2:	26 95       	lsr	r18
     3f4:	26 95       	lsr	r18
     3f6:	98 2f       	mov	r25, r24
     3f8:	96 95       	lsr	r25
     3fa:	92 0f       	add	r25, r18
	q4 += q4 >> 4;
     3fc:	29 2f       	mov	r18, r25
     3fe:	22 95       	swap	r18
     400:	2f 70       	andi	r18, 0x0F	; 15
     402:	92 0f       	add	r25, r18
	q4 = q4 >> 3;
     404:	96 95       	lsr	r25
     406:	96 95       	lsr	r25
     408:	96 95       	lsr	r25
	r = qb - q4 * 10;
     40a:	29 2f       	mov	r18, r25
     40c:	22 0f       	add	r18, r18
     40e:	62 2f       	mov	r22, r18
     410:	66 0f       	add	r22, r22
     412:	66 0f       	add	r22, r22
     414:	26 0f       	add	r18, r22
     416:	82 1b       	sub	r24, r18
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];
     418:	da 01       	movw	r26, r20
     41a:	a8 0f       	add	r26, r24
     41c:	b1 1d       	adc	r27, r1
     41e:	2c 91       	ld	r18, X
	q1 += q1 >> 8;
	q2 = q1 >> 3;
	r = number - q2 * 10;
	//r = number - (((q2 << 2) + q2) << 1);
	qa = q2 + (r > 9);
	ones_place = rem[r];
     420:	4e 0f       	add	r20, r30
     422:	51 1d       	adc	r21, r1
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
	hunds_place = rem[r];

	digit_index[0] = ones_place;
     424:	fa 01       	movw	r30, r20
     426:	40 81       	ld	r20, Z
     428:	40 93 b3 02 	sts	0x02B3, r20
	digit_index[1] = tens_place;
     42c:	30 93 b4 02 	sts	0x02B4, r19
	digit_index[2] = hunds_place;
     430:	20 93 b5 02 	sts	0x02B5, r18

	q4 = (qb >> 1) + (qb >> 2);
	q4 += q4 >> 4;
	q4 = q4 >> 3;
	r = qb - q4 * 10;
	thous_place = q4 + (r > 9);
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	8a 30       	cpi	r24, 0x0A	; 10
     438:	08 f4       	brcc	.+2      	; 0x43c <display_dec+0x180>
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	92 0f       	add	r25, r18
	hunds_place = rem[r];

	digit_index[0] = ones_place;
	digit_index[1] = tens_place;
	digit_index[2] = hunds_place;
	digit_index[3] = thous_place;
     43e:	90 93 b6 02 	sts	0x02B6, r25

	cathode_byte = dec[digit_index[place]];
     442:	f8 01       	movw	r30, r16
     444:	ed 54       	subi	r30, 0x4D	; 77
     446:	fd 4f       	sbci	r31, 0xFD	; 253
     448:	80 81       	ld	r24, Z
     44a:	fe 01       	movw	r30, r28
     44c:	e8 0f       	add	r30, r24
     44e:	f1 1d       	adc	r31, r1
     450:	85 81       	ldd	r24, Z+5	; 0x05
	
	if (current_patch.mode == EDIT) cathode_byte |= dp;
     452:	90 91 07 03 	lds	r25, 0x0307
     456:	92 30       	cpi	r25, 0x02	; 2
     458:	11 f4       	brne	.+4      	; 0x45e <display_dec+0x1a2>
     45a:	80 62       	ori	r24, 0x20	; 32
     45c:	03 c0       	rjmp	.+6      	; 0x464 <display_dec+0x1a8>
	if (current_patch.mode == MANUAL) cathode_byte = g; //Roland style dash for MANUAL mode. Could move this to the top as manual mode precludes the need to parse digit
     45e:	91 30       	cpi	r25, 0x01	; 1
     460:	09 f4       	brne	.+2      	; 0x464 <display_dec+0x1a8>
     462:	88 e0       	ldi	r24, 0x08	; 8
	
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
     464:	80 95       	com	r24
     466:	82 b9       	out	0x02, r24	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
     468:	ea ed       	ldi	r30, 0xDA	; 218
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	80 61       	ori	r24, 0x10	; 16
     470:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
     472:	80 81       	ld	r24, Z
     474:	8f 7e       	andi	r24, 0xEF	; 239
     476:	80 83       	st	Z, r24
	
	//DATA_BUS = 0; //clear DATA_BUS before return
}
     478:	2e 96       	adiw	r28, 0x0e	; 14
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <update_display>:

void update_display(uint16_t number, uint8_t type) {
     48e:	cf 93       	push	r28
	
	static uint8_t place = 0;
	

	
	if (type == DEC) {
     490:	66 23       	and	r22, r22
     492:	69 f4       	brne	.+26     	; 0x4ae <update_display+0x20>

		
			
		display_dec(number, place);
     494:	c0 91 b7 02 	lds	r28, 0x02B7
     498:	6c 2f       	mov	r22, r28
     49a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_dec>
		//increment digit display place
		if (place++ == 3) //post increment
     49e:	8c 2f       	mov	r24, r28
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	80 93 b7 02 	sts	0x02B7, r24
     4a6:	c3 30       	cpi	r28, 0x03	; 3
     4a8:	11 f4       	brne	.+4      	; 0x4ae <update_display+0x20>
		{
			place = 0;
     4aa:	10 92 b7 02 	sts	0x02B7, r1
		
		
	}
	
	
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <__vector_10>:
#include "hardware.h"
#include "tune.h"
#include "display.h"
#include "clock.h"

ISR (TIMER0_COMP_vect) { //timer 0 output compare interrupt for tuning
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	8f 93       	push	r24
     4be:	9f 93       	push	r25
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	
	OCR0A = period-1; //OCR0A counts n-1 periods - see comment in tune.c about setting OCR0A
     4c4:	80 91 7b 03 	lds	r24, 0x037B
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	87 bd       	out	0x27, r24	; 39
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp ARP_SYNC LED
	if (period_counter == 0) {
     4cc:	80 91 7c 03 	lds	r24, 0x037C
     4d0:	88 23       	and	r24, r24
     4d2:	a1 f4       	brne	.+40     	; 0x4fc <__vector_10+0x4a>
		count_finished = FALSE;
     4d4:	10 92 79 03 	sts	0x0379, r1
		no_overflow = TRUE;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 af 02 	sts	0x02AF, r24
		period_counter = 1; //set period counter to 1
     4de:	80 93 7c 03 	sts	0x037C, r24
		//set up 16 bit timer/counter1		
		TCCR1B |= timer1_clock; //clock /64 to run at 312.5 KHz or /8 to run at 2.5 MHz, dependent on note frequency being measured
     4e2:	e1 e8       	ldi	r30, 0x81	; 129
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	90 91 7a 03 	lds	r25, 0x037A
     4ec:	89 2b       	or	r24, r25
     4ee:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //enable timer1 overflow interrupt
     4f0:	ef e6       	ldi	r30, 0x6F	; 111
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	81 60       	ori	r24, 0x01	; 1
     4f8:	80 83       	st	Z, r24
     4fa:	11 c0       	rjmp	.+34     	; 0x51e <__vector_10+0x6c>
		
	} else {
		
		osc_count = TCNT1;		
     4fc:	e4 e8       	ldi	r30, 0x84	; 132
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	91 81       	ldd	r25, Z+1	; 0x01
     504:	90 93 78 03 	sts	0x0378, r25
     508:	80 93 77 03 	sts	0x0377, r24
		TCCR1B = 0; //turn off 16 bit timer/counter1
     50c:	10 92 81 00 	sts	0x0081, r1
		count_finished = TRUE;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	80 93 79 03 	sts	0x0379, r24
		period_counter = 0;
     516:	10 92 7c 03 	sts	0x037C, r1
		TCNT1 = 0; //reset timer/counter 1
     51a:	11 82       	std	Z+1, r1	; 0x01
     51c:	10 82       	st	Z, r1
	}
	
	
	
	
}
     51e:	ff 91       	pop	r31
     520:	ef 91       	pop	r30
     522:	9f 91       	pop	r25
     524:	8f 91       	pop	r24
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <__vector_9>:



ISR (TIMER1_OVF_vect) {
     530:	1f 92       	push	r1
     532:	0f 92       	push	r0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
	
	//during frequency counting, if timer1 overflow occurs set overflow flag
	no_overflow = FALSE;
     53a:	10 92 af 02 	sts	0x02AF, r1
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
	
}
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_7>:

ISR (TIMER1_COMPA_vect) { //output compare match for master clock
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
	//PORTB ^= (1<<ARP_SYNC_LED);
	
	if (system_clock.ppqn_counter == system_clock.divider >> 1) { //50% gate width
     556:	80 91 83 03 	lds	r24, 0x0383
     55a:	86 95       	lsr	r24
     55c:	90 91 84 03 	lds	r25, 0x0384
     560:	98 17       	cp	r25, r24
     562:	09 f4       	brne	.+2      	; 0x566 <__vector_7+0x1e>
		
		
		PORTB &= ~ (1<<ARP_SYNC_LED);
     564:	2f 98       	cbi	0x05, 7	; 5
	}		
	if (++system_clock.ppqn_counter == system_clock.divider) {
     566:	80 91 84 03 	lds	r24, 0x0384
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	80 93 84 03 	sts	0x0384, r24
     570:	90 91 83 03 	lds	r25, 0x0383
     574:	89 17       	cp	r24, r25
     576:	19 f4       	brne	.+6      	; 0x57e <__vector_7+0x36>
		//PORTB ^= (1<<ARP_SYNC_LED);
		system_clock.ppqn_counter = 0;
     578:	10 92 84 03 	sts	0x0384, r1
		PORTB |= (1<<ARP_SYNC_LED);
     57c:	2f 9a       	sbi	0x05, 7	; 5
		
	}
	
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <real_time_event>:
}

void real_time_event(MidiDevice * device, uint8_t real_time_byte) {
	//PORTB ^= (1<<ARP_SYNC_LED);
	//if (~(current_patch.byte_2 & (1<<LFO_KEY_SYNC) >> 1)) return; //if not in a sync mode, then retrun
	switch (real_time_byte) {
     58c:	68 3f       	cpi	r22, 0xF8	; 248
     58e:	19 f0       	breq	.+6      	; 0x596 <real_time_event+0xa>
     590:	6a 3f       	cpi	r22, 0xFA	; 250
     592:	c1 f4       	brne	.+48     	; 0x5c4 <real_time_event+0x38>
     594:	15 c0       	rjmp	.+42     	; 0x5c0 <real_time_event+0x34>
		
		case MIDI_CLOCK:
		
			if (++midi_clock.ppqn_counter == midi_clock.divider) {
     596:	80 91 8a 03 	lds	r24, 0x038A
     59a:	8f 5f       	subi	r24, 0xFF	; 255
     59c:	80 93 8a 03 	sts	0x038A, r24
     5a0:	90 91 89 03 	lds	r25, 0x0389
     5a4:	89 17       	cp	r24, r25
     5a6:	71 f4       	brne	.+28     	; 0x5c4 <real_time_event+0x38>
				PORTB |= (1<< LFO_RESET);
     5a8:	2c 9a       	sbi	0x05, 4	; 5
     5aa:	86 e0       	ldi	r24, 0x06	; 6
     5ac:	8a 95       	dec	r24
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <real_time_event+0x20>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <real_time_event+0x26>
				_delay_us(1); //what is minimum pulse width required for LFO reset?
				
				PORTB ^= (1<<ARP_SYNC_LED);
     5b2:	85 b1       	in	r24, 0x05	; 5
     5b4:	80 58       	subi	r24, 0x80	; 128
     5b6:	85 b9       	out	0x05, r24	; 5
				//register clock event - this will do something  - reset LFO or initiate LFO
				midi_clock.ppqn_counter = 0; //reset MIDI ppqn clock	
     5b8:	10 92 8a 03 	sts	0x038A, r1
				PORTB &= ~(1<< LFO_RESET); //turn off LFO reset pin
     5bc:	2c 98       	cbi	0x05, 4	; 5
     5be:	08 95       	ret
			
			break;
			
		case MIDI_START:
			
			midi_clock.ppqn_counter = 0;
     5c0:	10 92 8a 03 	sts	0x038A, r1
     5c4:	08 95       	ret

000005c6 <note_off_event>:
		PORTF |= (1<<GATE);
	}
	//PORTB &= ~(1<< LFO_RESET);
	
}
void note_off_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     5c6:	84 2f       	mov	r24, r20
	remove_note(note);
     5c8:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
	gate_buffer--;
     5cc:	80 91 b9 02 	lds	r24, 0x02B9
     5d0:	81 50       	subi	r24, 0x01	; 1
     5d2:	80 93 b9 02 	sts	0x02B9, r24
	if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     5d6:	88 23       	and	r24, r24
     5d8:	09 f4       	brne	.+2      	; 0x5dc <note_off_event+0x16>
     5da:	89 98       	cbi	0x11, 1	; 17
     5dc:	08 95       	ret

000005de <note_on_event>:
static uint8_t gate_buffer = 0;




void note_on_event(MidiDevice * device, uint8_t status, uint8_t note, uint8_t velocity) {
     5de:	84 2f       	mov	r24, r20
	
	if ((current_patch.byte_2 >> LFO_KEY_SYNC) & 1) {
     5e0:	90 91 ff 02 	lds	r25, 0x02FF
     5e4:	90 ff       	sbrs	r25, 0
     5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <note_on_event+0x16>
		
		PORTB |= (1<< LFO_RESET);
     5e8:	2c 9a       	sbi	0x05, 4	; 5
     5ea:	96 e0       	ldi	r25, 0x06	; 6
     5ec:	9a 95       	dec	r25
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <note_on_event+0xe>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <note_on_event+0x14>
		_delay_us(1); //what is minimum pulse width required for LFO reset?
		PORTB &= ~(1<< LFO_RESET);
     5f2:	2c 98       	cbi	0x05, 4	; 5
			
	}		
	//value_to_display = note;
	midi_note_number = note;
     5f4:	80 93 ba 02 	sts	0x02BA, r24
	if (velocity == 0) {
     5f8:	22 23       	and	r18, r18
     5fa:	59 f4       	brne	.+22     	; 0x612 <note_on_event+0x34>
		remove_note(note);
     5fc:	0e 94 be 00 	call	0x17c	; 0x17c <remove_note>
		gate_buffer--;
     600:	80 91 b9 02 	lds	r24, 0x02B9
     604:	81 50       	subi	r24, 0x01	; 1
     606:	80 93 b9 02 	sts	0x02B9, r24
		if (gate_buffer == 0) PORTF &= ~(1<<GATE);
     60a:	88 23       	and	r24, r24
     60c:	59 f4       	brne	.+22     	; 0x624 <note_on_event+0x46>
     60e:	89 98       	cbi	0x11, 1	; 17
     610:	08 95       	ret
				
	} else {
		new_note(note, velocity);
     612:	62 2f       	mov	r22, r18
     614:	0e 94 a6 00 	call	0x14c	; 0x14c <new_note>
		gate_buffer++; //increment gate_buffer
     618:	80 91 b9 02 	lds	r24, 0x02B9
     61c:	8f 5f       	subi	r24, 0xFF	; 255
     61e:	80 93 b9 02 	sts	0x02B9, r24
		//PORTF &= ~(1<<GATE); //turn gate off to re-trigger envelopes - this isn't nearly long enough
		//retriggering is a feature offered by Kenton Pro-Solo - maybe want it here, but need to decide how long to turn gate off
		//looking at gate of Pro-Solo on oscilloscope might give an idea of how long the Pro-Solo gate is released between retriggers  - checked: Pro-Solo gate-retrigger is 0.3ms
		//could implement this with timers. Will it really make a difference?
		PORTF |= (1<<GATE);
     622:	89 9a       	sbi	0x11, 1	; 17
     624:	08 95       	ret

00000626 <setup_midi_usart>:

void setup_midi_usart(void)
{
    uint16_t ubbr_value = 39; //20MHz/(16*31250 BAUD) - 1
    //write ubbr_value to H and L UBBR1 registers:
    UBRR0L = (unsigned char) ubbr_value;
     626:	87 e2       	ldi	r24, 0x27	; 39
     628:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (unsigned char) (ubbr_value >> 8);
     62c:	10 92 c5 00 	sts	0x00C5, r1
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);
     630:	88 e9       	ldi	r24, 0x98	; 152
     632:	80 93 c1 00 	sts	0x00C1, r24
	//UCSR0C |= (0<<UMSEL0)|(0<<UMSEL01)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(0<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);  	
}
     636:	08 95       	ret

00000638 <__vector_13>:



ISR (USART_RX_vect) { // USART receive interrupt
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	4f 93       	push	r20
     648:	5f 93       	push	r21
     64a:	6f 93       	push	r22
     64c:	7f 93       	push	r23
     64e:	8f 93       	push	r24
     650:	9f 93       	push	r25
     652:	af 93       	push	r26
     654:	bf 93       	push	r27
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	0f 92       	push	r0
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
	//PORTB ^= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED 
	uint8_t inByte = UDR0;
     664:	80 91 c6 00 	lds	r24, 0x00C6
     668:	89 83       	std	Y+1, r24	; 0x01
	midi_device_input(&midi_device, 1, &inByte); 
     66a:	8f e8       	ldi	r24, 0x8F	; 143
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	ae 01       	movw	r20, r28
     672:	4f 5f       	subi	r20, 0xFF	; 255
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	0e 94 4f 18 	call	0x309e	; 0x309e <midi_device_input>
	//calling a function in an interrupt is inefficient according to AVR C guidelines
	// so this function should maybe be inlined in main loop if inByte is made volatile	
	//***HOWEVER***, xnor-midi example code has this function being called from USART_RX_vect ISR  	
}
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	bf 91       	pop	r27
     686:	af 91       	pop	r26
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	7f 91       	pop	r23
     68e:	6f 91       	pop	r22
     690:	5f 91       	pop	r21
     692:	4f 91       	pop	r20
     694:	3f 91       	pop	r19
     696:	2f 91       	pop	r18
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <main>:


int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	MCUCR = (1<<JTD);
     6a2:	c0 e8       	ldi	r28, 0x80	; 128
     6a4:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1<<JTD);
     6a6:	c5 bf       	out	0x35, r28	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
     6a8:	27 9a       	sbi	0x04, 7	; 4
	
	DDRB |= (1<< LFO_RESET); //set LFO reset as output. This affects LFO rate and TRI balance - needed to trim both rate and balance.
     6aa:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= (1<< LFO_RESET);
	
	
	DDRF |= (1<<GATE); //set gate as output
     6ac:	81 9a       	sbi	0x10, 1	; 16
	//PORTF |= (1<<GATE); //turn gate on for testing
	
	DDRG |= (1<<TUNE_SELECT); //set tune select bit as output on PORTG
     6ae:	9a 9a       	sbi	0x13, 2	; 19
	PORTG &= ~(1<<TUNE_SELECT); //set tune select bit to 0 to select VCF/VCA output for oscillator tuning
     6b0:	a2 98       	cbi	0x14, 2	; 20
	//PORTG |= (1<<TUNE_SELECT);
	
	setup_spi(); 
     6b2:	0e 94 a2 06 	call	0xd44	; 0xd44 <setup_spi>
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
     6b6:	a9 ed       	ldi	r26, 0xD9	; 217
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	8c 91       	ld	r24, X
     6bc:	80 6c       	ori	r24, 0xC0	; 192
     6be:	8c 93       	st	X, r24
	POT_MUX |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
     6c0:	ea ed       	ldi	r30, 0xDA	; 218
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	80 6c       	ori	r24, 0xC0	; 192
     6c8:	80 83       	st	Z, r24
	//POT_MUX |= (1<<POTMUX_EN1);
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
     6ca:	81 b1       	in	r24, 0x01	; 1
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
     6d0:	92 b1       	in	r25, 0x02	; 2
     6d2:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
     6d4:	8c 91       	ld	r24, X
     6d6:	80 63       	ori	r24, 0x30	; 48
     6d8:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
     6da:	80 81       	ld	r24, Z
     6dc:	8f 7c       	andi	r24, 0xCF	; 207
     6de:	80 83       	st	Z, r24
	
	//set up switch port
	DDRF &= ~(1<<BMOD_SW); //set BMOD_SW pin as input
     6e0:	82 98       	cbi	0x10, 2	; 16
	
	//set up LFO DEMUX LATCH
	DDRJ |= (1<<LFO_SW_LATCH); //set LFO_SW_LATCH pin as output
     6e2:	ec ed       	ldi	r30, 0xDC	; 220
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	80 62       	ori	r24, 0x20	; 32
     6ea:	80 83       	st	Z, r24
	DATA_BUS = LFO_TRI_ADDR;
     6ec:	12 b8       	out	0x02, r1	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
     6ee:	ed ed       	ldi	r30, 0xDD	; 221
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	80 62       	ori	r24, 0x20	; 32
     6f6:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
     6f8:	80 81       	ld	r24, Z
     6fa:	8f 7d       	andi	r24, 0xDF	; 223
     6fc:	80 83       	st	Z, r24
	DATA_BUS = 0;
     6fe:	12 b8       	out	0x02, r1	; 2
	current_patch.byte_2 = (1<<LFO_TRI);
     700:	c0 93 ff 02 	sts	0x02FF, r28
	
	//setup ADC
    setup_adc();		
     704:	0e 94 51 00 	call	0xa2	; 0xa2 <setup_adc>
	//setup DAC
	setup_dac();
     708:	0e 94 45 01 	call	0x28a	; 0x28a <setup_dac>
	
	//setup MIDI
	//initialize MIDI device
	midi_device_init(&midi_device);
     70c:	cf e8       	ldi	r28, 0x8F	; 143
     70e:	d3 e0       	ldi	r29, 0x03	; 3
     710:	ce 01       	movw	r24, r28
     712:	0e 94 1e 18 	call	0x303c	; 0x303c <midi_device_init>
	//register callbacks
	midi_register_noteon_callback(&midi_device, note_on_event);
     716:	ce 01       	movw	r24, r28
     718:	6f ee       	ldi	r22, 0xEF	; 239
     71a:	72 e0       	ldi	r23, 0x02	; 2
     71c:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <midi_register_noteon_callback>
	midi_register_noteoff_callback(&midi_device, note_off_event);
     720:	ce 01       	movw	r24, r28
     722:	63 ee       	ldi	r22, 0xE3	; 227
     724:	72 e0       	ldi	r23, 0x02	; 2
     726:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <midi_register_noteoff_callback>
	midi_register_realtime_callback(&midi_device, real_time_event);
     72a:	ce 01       	movw	r24, r28
     72c:	66 ec       	ldi	r22, 0xC6	; 198
     72e:	72 e0       	ldi	r23, 0x02	; 2
     730:	0e 94 0a 18 	call	0x3014	; 0x3014 <midi_register_realtime_callback>
	//setup MIDI USART
	setup_midi_usart();
     734:	0e 94 13 03 	call	0x626	; 0x626 <setup_midi_usart>
	
	update_spi(); //initial update of SPI - will eventual be useful for picking up special power up switch holds
     738:	0e 94 c7 06 	call	0xd8e	; 0xd8e <update_spi>
	
	
	current_patch.number = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 03 03 	sts	0x0303, r24
		
	sei(); //enable global interrupts
     742:	78 94       	sei

	
	//eeprom_update_word((uint16_t*)109, test_word);
	//value_to_display = eeprom_read_word((uint16_t*)109);
	
	load_tuning_tables();
     744:	0e 94 4e 14 	call	0x289c	; 0x289c <load_tuning_tables>
	//value_to_display = vco1_init_cv;
	//set_one_volt_per_octave(); //overwrite tuning tables with 1V/octave data for calibration purposes
	//set initial switch states
	//switch_states.byte0 = (1<<VCO1_PULSE_SW) | (1<<VCO2_PULSE_SW);
	//current_patch.byte_4 = (1<<VCO1_32F) | (1<<VCO2_32F);
	load_patch(1);
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	0e 94 47 09 	call	0x128e	; 0x128e <load_patch>
	
	setup_system_clock();
     74e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setup_system_clock>
	//update_clock_speed(244);
	system_clock.divider = 24;
     752:	88 e1       	ldi	r24, 0x18	; 24
     754:	80 93 83 03 	sts	0x0383, r24

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     758:	8e 01       	movw	r16, r28
		if (switch_timer++ == 5)
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     75a:	0f 2e       	mov	r0, r31
     75c:	ff e7       	ldi	r31, 0x7F	; 127
     75e:	ef 2e       	mov	r14, r31
     760:	f3 e0       	ldi	r31, 0x03	; 3
     762:	ff 2e       	mov	r15, r31
     764:	f0 2d       	mov	r31, r0
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     766:	0f 2e       	mov	r0, r31
     768:	f7 e0       	ldi	r31, 0x07	; 7
     76a:	cf 2e       	mov	r12, r31
     76c:	f3 e0       	ldi	r31, 0x03	; 3
     76e:	df 2e       	mov	r13, r31
     770:	f0 2d       	mov	r31, r0
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
			if (switch_press) { 
				update_patch();
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     772:	bb 24       	eor	r11, r11
     774:	68 94       	set
     776:	b1 f8       	bld	r11, 1
		{
			switch_timer = 0;
			switch_press = 0; //reset global switch press flag
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     778:	d0 e8       	ldi	r29, 0x80	; 128

	while(1)
	{	
		
		
		midi_device_process(&midi_device); //this needs to be called 'frequently' in order for MIDI to work
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <midi_device_process>
		//value_to_display = vco1_init_cv;
		//PORTB |= (1<<ARP_SYNC_LED); //toggle arp VCO_SYNC_LATCH_BIT LED
		update_display(value_to_display, DEC); //maybe move this into switch_timer loop. Probably doesn't need to be updated this frequently
     780:	80 91 fd 01 	lds	r24, 0x01FD
     784:	90 91 fe 01 	lds	r25, 0x01FE
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
		//PORTB &= ~(1<<ARP_SYNC_LED);
		 	
		//scan_pots_and_update_control_voltages();
		scan_pots();
     78e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <scan_pots>
		update_control_voltages();
     792:	0e 94 83 04 	call	0x906	; 0x906 <update_control_voltages>
			
		//do SPI read/write every 5 loops. This is quite clumsy. Not sure yet how to better implement it
		if (switch_timer++ == 5)
     796:	80 91 b8 02 	lds	r24, 0x02B8
     79a:	98 2f       	mov	r25, r24
     79c:	9f 5f       	subi	r25, 0xFF	; 255
     79e:	90 93 b8 02 	sts	0x02B8, r25
     7a2:	85 30       	cpi	r24, 0x05	; 5
     7a4:	51 f7       	brne	.-44     	; 0x77a <main+0xd8>
		{
			switch_timer = 0;
     7a6:	10 92 b8 02 	sts	0x02B8, r1
			switch_press = 0; //reset global switch press flag
     7aa:	10 92 c1 02 	sts	0x02C1, r1
			//read switches directly connected to MCU	
			switch_states.byte2 ^= read_switch_port(); //toggle switch states
     7ae:	f7 01       	movw	r30, r14
     7b0:	c0 81       	ld	r28, Z
     7b2:	0e 94 00 15 	call	0x2a00	; 0x2a00 <read_switch_port>
     7b6:	8c 27       	eor	r24, r28
			switch_states.byte2 |= (current_patch.mode == MANUAL) << PROG_MANUAL_SW; //if MANUAL then don't toggle switch
     7b8:	f6 01       	movw	r30, r12
     7ba:	90 81       	ld	r25, Z
     7bc:	91 30       	cpi	r25, 0x01	; 1
     7be:	11 f4       	brne	.+4      	; 0x7c4 <main+0x122>
     7c0:	cd 2f       	mov	r28, r29
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <main+0x124>
     7c4:	c0 e0       	ldi	r28, 0x00	; 0
     7c6:	c8 2b       	or	r28, r24
     7c8:	f7 01       	movw	r30, r14
     7ca:	c0 83       	st	Z, r28
			//switch_states.byte2 |= (current_patch.mode == WRITE) << PROG_WRITE_SW; //if WRITE then don't toggle switch
			update_spi();
     7cc:	0e 94 c7 06 	call	0xd8e	; 0xd8e <update_spi>
			if (switch_press) { 
     7d0:	80 91 c1 02 	lds	r24, 0x02C1
     7d4:	88 23       	and	r24, r24
     7d6:	39 f0       	breq	.+14     	; 0x7e6 <main+0x144>
				update_patch();
     7d8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <update_patch>
				if (current_patch.mode == MEMORY) current_patch.mode = EDIT; //change mode to EDIT if non-program switch is detected
     7dc:	f6 01       	movw	r30, r12
     7de:	80 81       	ld	r24, Z
     7e0:	88 23       	and	r24, r24
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <main+0x144>
     7e4:	b0 82       	st	Z, r11
			}				
			update_patch_programmer();	
     7e6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <update_patch_programmer>
     7ea:	c7 cf       	rjmp	.-114    	; 0x77a <main+0xd8>

000007ec <scan_pots>:

uint8_t midi_note_number = 0; //store incoming MIDI note here for pitch lookup table

volatile uint16_t value_to_display = 79; //global to hold display value
	
void scan_pots(void) { //should probably move this to adc.c
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	c0 e0       	ldi	r28, 0x00	; 0
     800:	d1 e0       	ldi	r29, 0x01	; 1
     802:	02 ec       	ldi	r16, 0xC2	; 194
     804:	12 e0       	ldi	r17, 0x02	; 2
     806:	0f 2e       	mov	r0, r31
     808:	fc e3       	ldi	r31, 0x3C	; 60
     80a:	cf 2e       	mov	r12, r31
     80c:	dd 24       	eor	r13, r13
     80e:	f0 2d       	mov	r31, r0
     810:	cc 0e       	add	r12, r28
     812:	dd 1e       	adc	r13, r29
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     814:	0f 2e       	mov	r0, r31
     816:	f7 e0       	ldi	r31, 0x07	; 7
     818:	ef 2e       	mov	r14, r31
     81a:	f3 e0       	ldi	r31, 0x03	; 3
     81c:	ff 2e       	mov	r15, r31
     81e:	f0 2d       	mov	r31, r0
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
			*(patch_value + i) = pot_id[i]->value;
			pot_id[i]->locked = 0; //unlock pot
			current_patch.mode = EDIT;
     820:	bb 24       	eor	r11, r11
     822:	68 94       	set
     824:	b1 f8       	bld	r11, 1
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
		
		adc_value = read_pot(pot_id[i]);
     826:	88 81       	ld	r24, Y
     828:	99 81       	ldd	r25, Y+1	; 0x01
     82a:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     82e:	90 93 bc 02 	sts	0x02BC, r25
     832:	80 93 bb 02 	sts	0x02BB, r24
		adc_change = adc_value - pot_id[i]->value;
     836:	e8 81       	ld	r30, Y
     838:	f9 81       	ldd	r31, Y+1	; 0x01
     83a:	40 81       	ld	r20, Z
     83c:	21 81       	ldd	r18, Z+1	; 0x01
     83e:	52 2f       	mov	r21, r18
     840:	53 70       	andi	r21, 0x03	; 3
     842:	84 1b       	sub	r24, r20
     844:	95 0b       	sbc	r25, r21
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
     846:	95 95       	asr	r25
     848:	87 95       	ror	r24
     84a:	95 95       	asr	r25
     84c:	87 95       	ror	r24
     84e:	84 0f       	add	r24, r20
     850:	95 1f       	adc	r25, r21
     852:	80 83       	st	Z, r24
     854:	89 2f       	mov	r24, r25
     856:	83 70       	andi	r24, 0x03	; 3
     858:	2c 7f       	andi	r18, 0xFC	; 252
     85a:	28 2b       	or	r18, r24
     85c:	21 83       	std	Z+1, r18	; 0x01
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     85e:	e9 91       	ld	r30, Y+
     860:	f9 91       	ld	r31, Y+
     862:	92 81       	ldd	r25, Z+2	; 0x02
     864:	20 81       	ld	r18, Z
     866:	81 81       	ldd	r24, Z+1	; 0x01
     868:	38 2f       	mov	r19, r24
     86a:	33 70       	andi	r19, 0x03	; 3
		
		
		if ((current_patch.mode == MANUAL) || (pot_id[i]->locked == 0)) { //if in manual mode or pot is already unlocked
     86c:	d7 01       	movw	r26, r14
     86e:	8c 91       	ld	r24, X
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	19 f0       	breq	.+6      	; 0x87a <scan_pots+0x8e>
     874:	83 81       	ldd	r24, Z+3	; 0x03
     876:	88 23       	and	r24, r24
     878:	24 f0       	brlt	.+8      	; 0x882 <scan_pots+0x96>
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
     87a:	f8 01       	movw	r30, r16
     87c:	31 83       	std	Z+1, r19	; 0x01
     87e:	20 83       	st	Z, r18
     880:	14 c0       	rjmp	.+40     	; 0x8aa <scan_pots+0xbe>
		adc_value = read_pot(pot_id[i]);
		adc_change = adc_value - pot_id[i]->value;
		pot_id[i]->value = pot_id[i]->value + (adc_change >> 2);
		//what happens next depends on mode. if pot is locked, then the value of the pot is not written to the current patch unless it is different from the pot's locked value
		
		uint8_t delta_pot = pot_id[i]->locked_value - ((pot_id[i]->value >> 2)); //quick and dirty subtraction, where unsigned delta pot will overflow if value > locked value. see below
     882:	49 2f       	mov	r20, r25
     884:	43 50       	subi	r20, 0x03	; 3
     886:	c9 01       	movw	r24, r18
     888:	95 95       	asr	r25
     88a:	87 95       	ror	r24
     88c:	95 95       	asr	r25
     88e:	87 95       	ror	r24
			
			*(patch_value + i) = pot_id[i]->value; //this is a hacked way of indexing the patch structure. Depends on order of pots in pot array being the same as order of parameters in patch struct
			
		//} else if ((((pot_id[i]->value >> 2) != pot_id[i]->locked_value)) && (pot_id[i]->locked == 1)) { //need to figure out delta threshold here. 10 bit to 8 bit resolution should be enough???
			
		} else if (((delta_pot > 2) && (delta_pot < 253)) && (pot_id[i]->locked == 1)) { //set a threshold of +/- 3 for pot change  		  		  	
     890:	94 2f       	mov	r25, r20
     892:	98 1b       	sub	r25, r24
     894:	9a 3f       	cpi	r25, 0xFA	; 250
     896:	48 f4       	brcc	.+18     	; 0x8aa <scan_pots+0xbe>
			*(patch_value + i) = pot_id[i]->value;
     898:	d8 01       	movw	r26, r16
     89a:	11 96       	adiw	r26, 0x01	; 1
     89c:	3c 93       	st	X, r19
     89e:	2e 93       	st	-X, r18
			pot_id[i]->locked = 0; //unlock pot
     8a0:	83 81       	ldd	r24, Z+3	; 0x03
     8a2:	8f 77       	andi	r24, 0x7F	; 127
     8a4:	83 83       	std	Z+3, r24	; 0x03
			current_patch.mode = EDIT;
     8a6:	f7 01       	movw	r30, r14
     8a8:	b0 82       	st	Z, r11
     8aa:	0e 5f       	subi	r16, 0xFE	; 254
     8ac:	1f 4f       	sbci	r17, 0xFF	; 255

	int adc_change = 0;
	
	uint16_t *patch_value = &(current_patch.vco2_mix); //pointer to first element of current_patch struct
	//scan 30 parameter pots
	for (int i = 0; i <= 29; i++) {
     8ae:	cc 15       	cp	r28, r12
     8b0:	dd 05       	cpc	r29, r13
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <scan_pots+0xca>
     8b4:	b8 cf       	rjmp	.-144    	; 0x826 <scan_pots+0x3a>
		
	}
	
	
	//scan volume pot
	adc_value = read_pot(&volume_pot);
     8b6:	8c e7       	ldi	r24, 0x7C	; 124
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 64 00 	call	0xc8	; 0xc8 <read_pot>
     8be:	90 93 bc 02 	sts	0x02BC, r25
     8c2:	80 93 bb 02 	sts	0x02BB, r24
	adc_change = adc_value - volume_pot.value;
     8c6:	20 91 7c 01 	lds	r18, 0x017C
     8ca:	40 91 7d 01 	lds	r20, 0x017D
     8ce:	34 2f       	mov	r19, r20
     8d0:	33 70       	andi	r19, 0x03	; 3
     8d2:	82 1b       	sub	r24, r18
     8d4:	93 0b       	sbc	r25, r19
	volume_pot.value = volume_pot.value + (adc_change >> 2);
     8d6:	95 95       	asr	r25
     8d8:	87 95       	ror	r24
     8da:	95 95       	asr	r25
     8dc:	87 95       	ror	r24
     8de:	28 0f       	add	r18, r24
     8e0:	39 1f       	adc	r19, r25
     8e2:	20 93 7c 01 	sts	0x017C, r18
     8e6:	83 2f       	mov	r24, r19
     8e8:	83 70       	andi	r24, 0x03	; 3
     8ea:	4c 7f       	andi	r20, 0xFC	; 252
     8ec:	48 2b       	or	r20, r24
     8ee:	40 93 7d 01 	sts	0x017D, r20
	
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	08 95       	ret

00000906 <update_control_voltages>:

void update_control_voltages(void) { //keep everything updated in the current order of pots. Probably arbitrary, but try to minimize change from old CV update to new CV update
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
	
	set_control_voltage(&vco2_mix_cv, (current_patch.vco2_mix << 4));
     90a:	60 91 c2 02 	lds	r22, 0x02C2
     90e:	70 91 c3 02 	lds	r23, 0x02C3
     912:	62 95       	swap	r22
     914:	72 95       	swap	r23
     916:	70 7f       	andi	r23, 0xF0	; 240
     918:	76 27       	eor	r23, r22
     91a:	60 7f       	andi	r22, 0xF0	; 240
     91c:	76 27       	eor	r23, r22
     91e:	84 ee       	ldi	r24, 0xE4	; 228
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, (current_patch.vco1_mix << 4));
     926:	60 91 c4 02 	lds	r22, 0x02C4
     92a:	70 91 c5 02 	lds	r23, 0x02C5
     92e:	62 95       	swap	r22
     930:	72 95       	swap	r23
     932:	70 7f       	andi	r23, 0xF0	; 240
     934:	76 27       	eor	r23, r22
     936:	60 7f       	andi	r22, 0xF0	; 240
     938:	76 27       	eor	r23, r22
     93a:	83 ee       	ldi	r24, 0xE3	; 227
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, (current_patch.pitch_eg2 << 3)); //1/4 scale
     942:	60 91 c6 02 	lds	r22, 0x02C6
     946:	70 91 c7 02 	lds	r23, 0x02C7
     94a:	66 0f       	add	r22, r22
     94c:	77 1f       	adc	r23, r23
     94e:	66 0f       	add	r22, r22
     950:	77 1f       	adc	r23, r23
     952:	66 0f       	add	r22, r22
     954:	77 1f       	adc	r23, r23
     956:	82 ee       	ldi	r24, 0xE2	; 226
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, (current_patch.pitch_vco2 << 4));
     95e:	60 91 c8 02 	lds	r22, 0x02C8
     962:	70 91 c9 02 	lds	r23, 0x02C9
     966:	62 95       	swap	r22
     968:	72 95       	swap	r23
     96a:	70 7f       	andi	r23, 0xF0	; 240
     96c:	76 27       	eor	r23, r22
     96e:	60 7f       	andi	r22, 0xF0	; 240
     970:	76 27       	eor	r23, r22
     972:	82 eb       	ldi	r24, 0xB2	; 178
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_lfo_cv, (current_patch.pitch_lfo << 3)); // 1/4 scale
     97a:	60 91 ca 02 	lds	r22, 0x02CA
     97e:	70 91 cb 02 	lds	r23, 0x02CB
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	66 0f       	add	r22, r22
     988:	77 1f       	adc	r23, r23
     98a:	66 0f       	add	r22, r22
     98c:	77 1f       	adc	r23, r23
     98e:	81 ee       	ldi	r24, 0xE1	; 225
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, (current_patch.pwm_lfo) << 4);
     996:	60 91 cc 02 	lds	r22, 0x02CC
     99a:	70 91 cd 02 	lds	r23, 0x02CD
     99e:	62 95       	swap	r22
     9a0:	72 95       	swap	r23
     9a2:	70 7f       	andi	r23, 0xF0	; 240
     9a4:	76 27       	eor	r23, r22
     9a6:	60 7f       	andi	r22, 0xF0	; 240
     9a8:	76 27       	eor	r23, r22
     9aa:	80 ee       	ldi	r24, 0xE0	; 224
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_eg2_cv, (current_patch.pwm_eg2) << 4);
     9b2:	60 91 ce 02 	lds	r22, 0x02CE
     9b6:	70 91 cf 02 	lds	r23, 0x02CF
     9ba:	62 95       	swap	r22
     9bc:	72 95       	swap	r23
     9be:	70 7f       	andi	r23, 0xF0	; 240
     9c0:	76 27       	eor	r23, r22
     9c2:	60 7f       	andi	r22, 0xF0	; 240
     9c4:	76 27       	eor	r23, r22
     9c6:	8f ed       	ldi	r24, 0xDF	; 223
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_pw_cv, (current_patch.vco1_pw) << 4);
     9ce:	60 91 d0 02 	lds	r22, 0x02D0
     9d2:	70 91 d1 02 	lds	r23, 0x02D1
     9d6:	62 95       	swap	r22
     9d8:	72 95       	swap	r23
     9da:	70 7f       	andi	r23, 0xF0	; 240
     9dc:	76 27       	eor	r23, r22
     9de:	60 7f       	andi	r22, 0xF0	; 240
     9e0:	76 27       	eor	r23, r22
     9e2:	8e ed       	ldi	r24, 0xDE	; 222
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	int tune_offset = 512 - current_patch.tune; //master tune offset
     9ea:	80 91 d4 02 	lds	r24, 0x02D4
     9ee:	90 91 d5 02 	lds	r25, 0x02D5
     9f2:	c0 e0       	ldi	r28, 0x00	; 0
     9f4:	d2 e0       	ldi	r29, 0x02	; 2
     9f6:	c8 1b       	sub	r28, r24
     9f8:	d9 0b       	sbc	r29, r25
	
	int fine_offset = 512 - current_patch.fine; //fine tune offset
     9fa:	60 91 72 03 	lds	r22, 0x0372
     9fe:	70 91 73 03 	lds	r23, 0x0373
     a02:	60 50       	subi	r22, 0x00	; 0
     a04:	7e 4f       	sbci	r23, 0xFE	; 254
	
	set_control_voltage(&fine_cv, vco2_init_cv + tune_offset + fine_offset);
     a06:	80 91 d2 02 	lds	r24, 0x02D2
     a0a:	90 91 d3 02 	lds	r25, 0x02D3
     a0e:	68 1b       	sub	r22, r24
     a10:	79 0b       	sbc	r23, r25
     a12:	6c 0f       	add	r22, r28
     a14:	7d 1f       	adc	r23, r29
     a16:	8d ed       	ldi	r24, 0xDD	; 221
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&tune_cv, vco1_init_cv + tune_offset);
     a1e:	60 91 74 03 	lds	r22, 0x0374
     a22:	70 91 75 03 	lds	r23, 0x0375
     a26:	6c 0f       	add	r22, r28
     a28:	7d 1f       	adc	r23, r29
     a2a:	8c ed       	ldi	r24, 0xDC	; 220
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&lfo_rate_cv, (current_patch.lfo_rate) << 4);
     a32:	60 91 d6 02 	lds	r22, 0x02D6
     a36:	70 91 d7 02 	lds	r23, 0x02D7
     a3a:	62 95       	swap	r22
     a3c:	72 95       	swap	r23
     a3e:	70 7f       	andi	r23, 0xF0	; 240
     a40:	76 27       	eor	r23, r22
     a42:	60 7f       	andi	r22, 0xF0	; 240
     a44:	76 27       	eor	r23, r22
     a46:	8b ed       	ldi	r24, 0xDB	; 219
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&glide_cv, (current_patch.glide) << 4);
     a4e:	60 91 da 02 	lds	r22, 0x02DA
     a52:	70 91 db 02 	lds	r23, 0x02DB
     a56:	62 95       	swap	r22
     a58:	72 95       	swap	r23
     a5a:	70 7f       	andi	r23, 0xF0	; 240
     a5c:	76 27       	eor	r23, r22
     a5e:	60 7f       	andi	r22, 0xF0	; 240
     a60:	76 27       	eor	r23, r22
     a62:	8a ed       	ldi	r24, 0xDA	; 218
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&amp_lfo_cv, (current_patch.amp_lfo) << 4);
     a6a:	60 91 dc 02 	lds	r22, 0x02DC
     a6e:	70 91 dd 02 	lds	r23, 0x02DD
     a72:	62 95       	swap	r22
     a74:	72 95       	swap	r23
     a76:	70 7f       	andi	r23, 0xF0	; 240
     a78:	76 27       	eor	r23, r22
     a7a:	60 7f       	andi	r22, 0xF0	; 240
     a7c:	76 27       	eor	r23, r22
     a7e:	89 ed       	ldi	r24, 0xD9	; 217
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&volume_cv, (volume_pot.value << 4)); //volume level not a patch parameter
     a86:	60 91 7c 01 	lds	r22, 0x017C
     a8a:	80 91 7d 01 	lds	r24, 0x017D
     a8e:	78 2f       	mov	r23, r24
     a90:	73 70       	andi	r23, 0x03	; 3
     a92:	62 95       	swap	r22
     a94:	72 95       	swap	r23
     a96:	70 7f       	andi	r23, 0xF0	; 240
     a98:	76 27       	eor	r23, r22
     a9a:	60 7f       	andi	r22, 0xF0	; 240
     a9c:	76 27       	eor	r23, r22
     a9e:	88 ed       	ldi	r24, 0xD8	; 216
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_pw_cv, (current_patch.vco2_pw) << 4);	
     aa6:	60 91 de 02 	lds	r22, 0x02DE
     aaa:	70 91 df 02 	lds	r23, 0x02DF
     aae:	62 95       	swap	r22
     ab0:	72 95       	swap	r23
     ab2:	70 7f       	andi	r23, 0xF0	; 240
     ab4:	76 27       	eor	r23, r22
     ab6:	60 7f       	andi	r22, 0xF0	; 240
     ab8:	76 27       	eor	r23, r22
     aba:	87 ed       	ldi	r24, 0xD7	; 215
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&fil_eg2_cv, (current_patch.fil_eg2) << 4);
     ac2:	60 91 e0 02 	lds	r22, 0x02E0
     ac6:	70 91 e1 02 	lds	r23, 0x02E1
     aca:	62 95       	swap	r22
     acc:	72 95       	swap	r23
     ace:	70 7f       	andi	r23, 0xF0	; 240
     ad0:	76 27       	eor	r23, r22
     ad2:	60 7f       	andi	r22, 0xF0	; 240
     ad4:	76 27       	eor	r23, r22
     ad6:	86 ed       	ldi	r24, 0xD6	; 214
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, (current_patch.res) << 4);
     ade:	60 91 e2 02 	lds	r22, 0x02E2
     ae2:	70 91 e3 02 	lds	r23, 0x02E3
     ae6:	62 95       	swap	r22
     ae8:	72 95       	swap	r23
     aea:	70 7f       	andi	r23, 0xF0	; 240
     aec:	76 27       	eor	r23, r22
     aee:	60 7f       	andi	r22, 0xF0	; 240
     af0:	76 27       	eor	r23, r22
     af2:	85 ed       	ldi	r24, 0xD5	; 213
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	//this next bit should be separated out, but leave it here for now while testing decoupled adc/dac read/write
	uint8_t note = get_current_note(); //get current note from assigner
     afa:	0e 94 a3 00 	call	0x146	; 0x146 <get_current_note>
     afe:	c8 2f       	mov	r28, r24
	if (note < 8) note = 8; //init_cv gives VCO range from MIDI note 8 to MIDI note 127+. If you don't set notes <8 to 8 then you get array out of bounds problems. Should find a better way to handle this.
     b00:	88 30       	cpi	r24, 0x08	; 8
     b02:	08 f4       	brcc	.+2      	; 0xb06 <update_control_voltages+0x200>
     b04:	c8 e0       	ldi	r28, 0x08	; 8
	value_to_display = current_patch.number + 100*midi_clock.divider; //100*note;
     b06:	60 91 03 03 	lds	r22, 0x0303
     b0a:	40 91 89 03 	lds	r20, 0x0389
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	24 e6       	ldi	r18, 0x64	; 100
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	42 9f       	mul	r20, r18
     b16:	c0 01       	movw	r24, r0
     b18:	43 9f       	mul	r20, r19
     b1a:	90 0d       	add	r25, r0
     b1c:	52 9f       	mul	r21, r18
     b1e:	90 0d       	add	r25, r0
     b20:	11 24       	eor	r1, r1
     b22:	86 0f       	add	r24, r22
     b24:	91 1d       	adc	r25, r1
     b26:	90 93 fe 01 	sts	0x01FE, r25
     b2a:	80 93 fd 01 	sts	0x01FD, r24
		
	uint16_t interpolated_pitch_cv = 0; //holder for interpolated pitch values
	
	interpolated_pitch_cv = interpolate_pitch_cv(note-8, filter_pitch_table); //subtract 8 from note because filter pitch is calibrated so that 0V is E, 20.6 Hz
     b2e:	8c 2f       	mov	r24, r28
     b30:	88 50       	subi	r24, 0x08	; 8
     b32:	6e e0       	ldi	r22, 0x0E	; 14
     b34:	73 e0       	ldi	r23, 0x03	; 3
     b36:	0e 94 77 14 	call	0x28ee	; 0x28ee <interpolate_pitch_cv>
	//note that product of key_track and interpolated_pitch_cv needs to be cast as uint32t - otherwise product is evaluated incorrectly
	uint16_t divided_pitch_cv = ((uint32_t)current_patch.key_track*interpolated_pitch_cv) >> 10;
     b3a:	bc 01       	movw	r22, r24
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	20 91 e6 02 	lds	r18, 0x02E6
     b44:	30 91 e7 02 	lds	r19, 0x02E7
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsi3>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	07 2e       	mov	r0, r23
     b56:	7a e0       	ldi	r23, 0x0A	; 10
     b58:	b6 95       	lsr	r27
     b5a:	a7 95       	ror	r26
     b5c:	97 95       	ror	r25
     b5e:	87 95       	ror	r24
     b60:	7a 95       	dec	r23
     b62:	d1 f7       	brne	.-12     	; 0xb58 <update_control_voltages+0x252>
     b64:	70 2d       	mov	r23, r0
	uint16_t filter_cutoff_cv = divided_pitch_cv + (current_patch.cutoff << 4); //filter cutoff CV is the sum of filter cutoff pot and key track amount.
     b66:	60 91 e4 02 	lds	r22, 0x02E4
     b6a:	70 91 e5 02 	lds	r23, 0x02E5
     b6e:	62 95       	swap	r22
     b70:	72 95       	swap	r23
     b72:	70 7f       	andi	r23, 0xF0	; 240
     b74:	76 27       	eor	r23, r22
     b76:	60 7f       	andi	r22, 0xF0	; 240
     b78:	76 27       	eor	r23, r22
     b7a:	86 0f       	add	r24, r22
     b7c:	97 1f       	adc	r25, r23
	if (filter_cutoff_cv > MAX) filter_cutoff_cv = MAX; //make sure there is no overflow/wrap by capping max
	set_control_voltage(&cutoff_cv, filter_cutoff_cv);	
     b7e:	bc 01       	movw	r22, r24
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	60 30       	cpi	r22, 0x00	; 0
     b84:	78 07       	cpc	r23, r24
     b86:	10 f0       	brcs	.+4      	; 0xb8c <update_control_voltages+0x286>
     b88:	6f ef       	ldi	r22, 0xFF	; 255
     b8a:	7f e3       	ldi	r23, 0x3F	; 63
     b8c:	84 ed       	ldi	r24, 0xD4	; 212
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	set_control_voltage(&fil_vco2_cv, (current_patch.fil_vco2) << 4);
     b94:	60 91 e8 02 	lds	r22, 0x02E8
     b98:	70 91 e9 02 	lds	r23, 0x02E9
     b9c:	62 95       	swap	r22
     b9e:	72 95       	swap	r23
     ba0:	70 7f       	andi	r23, 0xF0	; 240
     ba2:	76 27       	eor	r23, r22
     ba4:	60 7f       	andi	r22, 0xF0	; 240
     ba6:	76 27       	eor	r23, r22
     ba8:	82 ed       	ldi	r24, 0xD2	; 210
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_lfo_cv, (current_patch.fil_lfo) << 4);
     bb0:	60 91 ea 02 	lds	r22, 0x02EA
     bb4:	70 91 eb 02 	lds	r23, 0x02EB
     bb8:	62 95       	swap	r22
     bba:	72 95       	swap	r23
     bbc:	70 7f       	andi	r23, 0xF0	; 240
     bbe:	76 27       	eor	r23, r22
     bc0:	60 7f       	andi	r22, 0xF0	; 240
     bc2:	76 27       	eor	r23, r22
     bc4:	81 ed       	ldi	r24, 0xD1	; 209
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&noise_mix_cv, (current_patch.noise_mix) << 4);
     bcc:	60 91 ec 02 	lds	r22, 0x02EC
     bd0:	70 91 ed 02 	lds	r23, 0x02ED
     bd4:	62 95       	swap	r22
     bd6:	72 95       	swap	r23
     bd8:	70 7f       	andi	r23, 0xF0	; 240
     bda:	76 27       	eor	r23, r22
     bdc:	60 7f       	andi	r22, 0xF0	; 240
     bde:	76 27       	eor	r23, r22
     be0:	80 ed       	ldi	r24, 0xD0	; 208
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&attack_2_cv, (current_patch.attack_2) << 4);
     be8:	60 91 ee 02 	lds	r22, 0x02EE
     bec:	70 91 ef 02 	lds	r23, 0x02EF
     bf0:	62 95       	swap	r22
     bf2:	72 95       	swap	r23
     bf4:	70 7f       	andi	r23, 0xF0	; 240
     bf6:	76 27       	eor	r23, r22
     bf8:	60 7f       	andi	r22, 0xF0	; 240
     bfa:	76 27       	eor	r23, r22
     bfc:	8f ec       	ldi	r24, 0xCF	; 207
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&attack_1_cv, (current_patch.attack_1) << 4);
     c04:	60 91 f0 02 	lds	r22, 0x02F0
     c08:	70 91 f1 02 	lds	r23, 0x02F1
     c0c:	62 95       	swap	r22
     c0e:	72 95       	swap	r23
     c10:	70 7f       	andi	r23, 0xF0	; 240
     c12:	76 27       	eor	r23, r22
     c14:	60 7f       	andi	r22, 0xF0	; 240
     c16:	76 27       	eor	r23, r22
     c18:	8e ec       	ldi	r24, 0xCE	; 206
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_2_cv, (current_patch.decay_2) << 4);
     c20:	60 91 f2 02 	lds	r22, 0x02F2
     c24:	70 91 f3 02 	lds	r23, 0x02F3
     c28:	62 95       	swap	r22
     c2a:	72 95       	swap	r23
     c2c:	70 7f       	andi	r23, 0xF0	; 240
     c2e:	76 27       	eor	r23, r22
     c30:	60 7f       	andi	r22, 0xF0	; 240
     c32:	76 27       	eor	r23, r22
     c34:	8d ec       	ldi	r24, 0xCD	; 205
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, (current_patch.decay_1) << 4);
     c3c:	60 91 f4 02 	lds	r22, 0x02F4
     c40:	70 91 f5 02 	lds	r23, 0x02F5
     c44:	62 95       	swap	r22
     c46:	72 95       	swap	r23
     c48:	70 7f       	andi	r23, 0xF0	; 240
     c4a:	76 27       	eor	r23, r22
     c4c:	60 7f       	andi	r22, 0xF0	; 240
     c4e:	76 27       	eor	r23, r22
     c50:	8c ec       	ldi	r24, 0xCC	; 204
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, (current_patch.sustain_1) << 4);
     c58:	60 91 f8 02 	lds	r22, 0x02F8
     c5c:	70 91 f9 02 	lds	r23, 0x02F9
     c60:	62 95       	swap	r22
     c62:	72 95       	swap	r23
     c64:	70 7f       	andi	r23, 0xF0	; 240
     c66:	76 27       	eor	r23, r22
     c68:	60 7f       	andi	r22, 0xF0	; 240
     c6a:	76 27       	eor	r23, r22
     c6c:	8a ec       	ldi	r24, 0xCA	; 202
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_2_cv, (current_patch.sustain_2) << 4);
     c74:	60 91 f6 02 	lds	r22, 0x02F6
     c78:	70 91 f7 02 	lds	r23, 0x02F7
     c7c:	62 95       	swap	r22
     c7e:	72 95       	swap	r23
     c80:	70 7f       	andi	r23, 0xF0	; 240
     c82:	76 27       	eor	r23, r22
     c84:	60 7f       	andi	r22, 0xF0	; 240
     c86:	76 27       	eor	r23, r22
     c88:	8b ec       	ldi	r24, 0xCB	; 203
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, (current_patch.release_1) << 4);
     c90:	60 91 fc 02 	lds	r22, 0x02FC
     c94:	70 91 fd 02 	lds	r23, 0x02FD
     c98:	62 95       	swap	r22
     c9a:	72 95       	swap	r23
     c9c:	70 7f       	andi	r23, 0xF0	; 240
     c9e:	76 27       	eor	r23, r22
     ca0:	60 7f       	andi	r22, 0xF0	; 240
     ca2:	76 27       	eor	r23, r22
     ca4:	88 ec       	ldi	r24, 0xC8	; 200
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_2_cv, (current_patch.release_2) << 4);
     cac:	60 91 fa 02 	lds	r22, 0x02FA
     cb0:	70 91 fb 02 	lds	r23, 0x02FB
     cb4:	62 95       	swap	r22
     cb6:	72 95       	swap	r23
     cb8:	70 7f       	andi	r23, 0xF0	; 240
     cba:	76 27       	eor	r23, r22
     cbc:	60 7f       	andi	r22, 0xF0	; 240
     cbe:	76 27       	eor	r23, r22
     cc0:	89 ec       	ldi	r24, 0xC9	; 201
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>

	//set VCO1 and VCO2 pitch control voltages. Remember, set_control_voltage() is expecting a pointer to a control_voltage struct
	//that contains the control_voltage multiplexer channel and the multiplexer address
	

	uint8_t vco1_note = transpose_note(note, VCO1); //transpose
     cc8:	8c 2f       	mov	r24, r28
     cca:	6f e0       	ldi	r22, 0x0F	; 15
     ccc:	0e 94 27 0c 	call	0x184e	; 0x184e <transpose_note>

	interpolated_pitch_cv = interpolate_pitch_cv(vco1_note, vco1_pitch_table);
     cd0:	60 e5       	ldi	r22, 0x50	; 80
     cd2:	73 e0       	ldi	r23, 0x03	; 3
     cd4:	0e 94 77 14 	call	0x28ee	; 0x28ee <interpolate_pitch_cv>
     cd8:	bc 01       	movw	r22, r24
	
	//value_to_display = interpolated_pitch_cv;
	
	set_control_voltage(&vco1_pitch_cv, interpolated_pitch_cv);
     cda:	86 ee       	ldi	r24, 0xE6	; 230
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	
	uint8_t vco2_note = transpose_note(note, VCO2);
     ce2:	8c 2f       	mov	r24, r28
     ce4:	60 ef       	ldi	r22, 0xF0	; 240
     ce6:	0e 94 27 0c 	call	0x184e	; 0x184e <transpose_note>
	
	interpolated_pitch_cv = interpolate_pitch_cv(vco2_note, vco2_pitch_table);
     cea:	6e e2       	ldi	r22, 0x2E	; 46
     cec:	73 e0       	ldi	r23, 0x03	; 3
     cee:	0e 94 77 14 	call	0x28ee	; 0x28ee <interpolate_pitch_cv>
     cf2:	bc 01       	movw	r22, r24
	
	set_control_voltage(&vco2_pitch_cv, interpolated_pitch_cv);
     cf4:	85 ee       	ldi	r24, 0xE5	; 229
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	DAC_CTRL &= ~(1<<DAC_RS); //reset DAC
     cfc:	a1 98       	cbi	0x14, 1	; 20
	DAC_CTRL |= (1<<DAC_RS);
     cfe:	a1 9a       	sbi	0x14, 1	; 20
	
	system_clock.rate = (1023 - arp_rate_pot.value) + 244;    
     d00:	20 91 88 01 	lds	r18, 0x0188
     d04:	80 91 89 01 	lds	r24, 0x0189
     d08:	38 2f       	mov	r19, r24
     d0a:	33 70       	andi	r19, 0x03	; 3
     d0c:	83 ef       	ldi	r24, 0xF3	; 243
     d0e:	94 e0       	ldi	r25, 0x04	; 4
     d10:	82 1b       	sub	r24, r18
     d12:	93 0b       	sbc	r25, r19
     d14:	90 93 86 03 	sts	0x0386, r25
     d18:	80 93 85 03 	sts	0x0385, r24
	
	if (system_clock.rate != system_clock.previous_rate) {
     d1c:	20 91 87 03 	lds	r18, 0x0387
     d20:	30 91 88 03 	lds	r19, 0x0388
     d24:	82 17       	cp	r24, r18
     d26:	93 07       	cpc	r25, r19
     d28:	11 f0       	breq	.+4      	; 0xd2e <update_control_voltages+0x428>
		
		update_clock_rate(system_clock.rate);
     d2a:	0e 94 02 01 	call	0x204	; 0x204 <update_clock_rate>
	
	}
	
	system_clock.previous_rate = system_clock.rate;
     d2e:	80 91 85 03 	lds	r24, 0x0385
     d32:	90 91 86 03 	lds	r25, 0x0386
     d36:	90 93 88 03 	sts	0x0388, r25
     d3a:	80 93 87 03 	sts	0x0387, r24
	
}			
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <setup_spi>:
void setup_spi(void) {
	
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
		//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
		//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
		DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
     d44:	84 b1       	in	r24, 0x04	; 4
     d46:	87 62       	ori	r24, 0x27	; 39
     d48:	84 b9       	out	0x04, r24	; 4
		
		//SET SPI_EN and LED_LATCH and VCO_SW_LATCH and EG2_POL pins as outputs
		DDRJ |= (SPI_EN | LED_LATCH | (1<<VCO_SW_LATCH) | (1<<EG2_POL));
     d4a:	ec ed       	ldi	r30, 0xDC	; 220
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8c 65       	ori	r24, 0x5C	; 92
     d52:	80 83       	st	Z, r24
		
		//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
		SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
     d54:	85 b1       	in	r24, 0x05	; 5
     d56:	89 7d       	andi	r24, 0xD9	; 217
     d58:	85 b9       	out	0x05, r24	; 5
		
		//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
		SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
     d5a:	ed ed       	ldi	r30, 0xDD	; 221
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	83 7f       	andi	r24, 0xF3	; 243
     d62:	80 83       	st	Z, r24
		
		//SET UP SPI
		SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
     d64:	80 e5       	ldi	r24, 0x50	; 80
     d66:	8c bd       	out	0x2c, r24	; 44
		
		//Pull LED_LATCH LOW
		SPI_LATCH_PORT &= ~LED_LATCH;
     d68:	80 81       	ld	r24, Z
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	80 83       	st	Z, r24
		
		
		//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
		SPI_LATCH_PORT &= ~LED_LATCH;
     d6e:	80 81       	ld	r24, Z
     d70:	87 7f       	andi	r24, 0xF7	; 247
     d72:	80 83       	st	Z, r24
		SPI_LATCH_PORT |= LED_LATCH;
     d74:	80 81       	ld	r24, Z
     d76:	88 60       	ori	r24, 0x08	; 8
     d78:	80 83       	st	Z, r24
		
		//set EG2 POL
		EG2_POL_PORT &= ~(1 << EG2_POL); //0 for normal, 1 for inverted
     d7a:	80 81       	ld	r24, Z
     d7c:	8f 7e       	andi	r24, 0xEF	; 239
     d7e:	80 83       	st	Z, r24
	
}
     d80:	08 95       	ret

00000d82 <spi_shift_byte>:

uint8_t spi_shift_byte(uint8_t byte) { //shifts out byte for LED data and simultaneously reads switch data
	
	SPDR = byte;
     d82:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     d84:	0d b4       	in	r0, 0x2d	; 45
     d86:	07 fe       	sbrs	r0, 7
     d88:	fd cf       	rjmp	.-6      	; 0xd84 <spi_shift_byte+0x2>
	return SPDR;
     d8a:	8e b5       	in	r24, 0x2e	; 46
	
}
     d8c:	08 95       	ret

00000d8e <update_spi>:

void update_spi(void) {
	
			SPI_PORT |= SPI_SW_LATCH;
     d8e:	2d 9a       	sbi	0x05, 5	; 5
			
			//SHIFT 5th BYTE				
			//Read SPDR for switch data shifted in from 74XX165 U14 and write LED data to LED latch 5
			spi_sw_byte0_current_state = spi_shift_byte(current_patch.byte_5);
     d90:	80 91 02 03 	lds	r24, 0x0302
     d94:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			switch_press |= spi_sw_byte0_current_state; //set switch press global flag
     d98:	90 91 c1 02 	lds	r25, 0x02C1
     d9c:	98 2b       	or	r25, r24
     d9e:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte0_current_state ^= spi_sw_byte0_previous_state;
     da2:	20 91 bf 02 	lds	r18, 0x02BF
     da6:	98 2f       	mov	r25, r24
     da8:	92 27       	eor	r25, r18
			spi_sw_byte0_previous_state ^= spi_sw_byte0_current_state;
     daa:	89 2f       	mov	r24, r25
     dac:	82 27       	eor	r24, r18
     dae:	80 93 bf 02 	sts	0x02BF, r24
			spi_sw_byte0_current_state &= spi_sw_byte0_previous_state;
     db2:	89 23       	and	r24, r25
     db4:	80 93 c0 02 	sts	0x02C0, r24
			
			//toggle switch state		
			switch_states.byte0 ^= spi_sw_byte0_current_state; //Omar's solution.
     db8:	90 91 7d 03 	lds	r25, 0x037D
     dbc:	89 27       	eor	r24, r25
     dbe:	80 93 7d 03 	sts	0x037D, r24
			//Now read SPDR for switch data shifted in from 74XX165 (U9)
			//uint8_t spi_data = (1<<VCO2_32F | 1<<VCO1_32F); //turn on 32' octave LEDs as default 
			
			uint8_t spi_data = current_patch.byte_4;
					
			spi_sw_byte1_current_state = spi_shift_byte(spi_data);
     dc2:	80 91 01 03 	lds	r24, 0x0301
     dc6:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			switch_press |= spi_sw_byte1_current_state;
     dca:	90 91 c1 02 	lds	r25, 0x02C1
     dce:	98 2b       	or	r25, r24
     dd0:	90 93 c1 02 	sts	0x02C1, r25
			spi_sw_byte1_current_state ^= spi_sw_byte1_previous_state;
     dd4:	20 91 bd 02 	lds	r18, 0x02BD
     dd8:	98 2f       	mov	r25, r24
     dda:	92 27       	eor	r25, r18
			spi_sw_byte1_previous_state ^= spi_sw_byte1_current_state;
     ddc:	89 2f       	mov	r24, r25
     dde:	82 27       	eor	r24, r18
     de0:	80 93 bd 02 	sts	0x02BD, r24
			spi_sw_byte1_current_state &= spi_sw_byte1_previous_state;
     de4:	89 23       	and	r24, r25
     de6:	80 93 be 02 	sts	0x02BE, r24
			
			//toggle switch state
			switch_states.byte1 ^= spi_sw_byte1_current_state; //Omar's solution.			
     dea:	90 91 7e 03 	lds	r25, 0x037E
     dee:	89 27       	eor	r24, r25
     df0:	80 93 7e 03 	sts	0x037E, r24
							
			//SHIFT 3th BYTE
			spi_shift_byte(current_patch.byte_3);
     df4:	80 91 00 03 	lds	r24, 0x0300
     df8:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
     dfc:	80 91 ff 02 	lds	r24, 0x02FF
     e00:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     e04:	90 91 7e 03 	lds	r25, 0x037E
     e08:	96 95       	lsr	r25
     e0a:	96 95       	lsr	r25
     e0c:	96 95       	lsr	r25
     e0e:	94 70       	andi	r25, 0x04	; 4
     e10:	80 91 07 03 	lds	r24, 0x0307
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	11 f4       	brne	.+4      	; 0xe1c <update_spi+0x8e>
     e18:	20 e8       	ldi	r18, 0x80	; 128
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <update_spi+0x90>
     e1c:	20 e0       	ldi	r18, 0x00	; 0
						//((switch_states.byte2 >> PROG_WRITE_SW) & 1) << PROG_WRITE | 
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
     e1e:	80 91 7f 03 	lds	r24, 0x037F
     e22:	88 1f       	adc	r24, r24
     e24:	88 27       	eor	r24, r24
     e26:	88 1f       	adc	r24, r24
     e28:	82 95       	swap	r24
     e2a:	88 0f       	add	r24, r24
     e2c:	88 0f       	add	r24, r24
     e2e:	80 7c       	andi	r24, 0xC0	; 192

			//SHIFT 2th BYTE
			spi_shift_byte(current_patch.byte_2);
			
			//SHIFT 1st BYTE	//eventually need to parse this elsewhere		
			spi_data =	((switch_states.byte1 >> ARP_MODE_SW) & 1) << ARP_MODE | 
     e30:	89 2b       	or	r24, r25
     e32:	90 91 fe 02 	lds	r25, 0x02FE
     e36:	89 2b       	or	r24, r25
						((current_patch.mode == WRITE) << PROG_WRITE) | //hack to light PROG WRITE LED only when in WRITE mode
						//((switch_states.byte2 >> EG2_INV_SW) &1 ) << EG2_INV |
						((switch_states.byte2 >> PROG_MANUAL_SW &1) << PROG_MANUAL) |
						((current_patch.byte_1)); 			
			//Wait for SPI shift to complete
			spi_shift_byte(spi_data);
     e38:	82 2b       	or	r24, r18
     e3a:	0e 94 c1 06 	call	0xd82	; 0xd82 <spi_shift_byte>
			
			//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
			
			SPI_LATCH_PORT &= ~LED_LATCH;
     e3e:	ed ed       	ldi	r30, 0xDD	; 221
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	87 7f       	andi	r24, 0xF7	; 247
     e46:	80 83       	st	Z, r24
			SPI_LATCH_PORT |= LED_LATCH;
     e48:	80 81       	ld	r24, Z
     e4a:	88 60       	ori	r24, 0x08	; 8
     e4c:	80 83       	st	Z, r24
			
			//clear SPI_SW_LATCH
			SPI_PORT &= ~SPI_SW_LATCH;
     e4e:	2d 98       	cbi	0x05, 5	; 5
			
			

	
     e50:	08 95       	ret

00000e52 <lock_pots>:
		LFO_PULSE_ADDR,
		LFO_RNDM_ADDR
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values
     e52:	a0 e0       	ldi	r26, 0x00	; 0
     e54:	b1 e0       	ldi	r27, 0x01	; 1
     e56:	9d 01       	movw	r18, r26
     e58:	24 5c       	subi	r18, 0xC4	; 196
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255

for (int i = 0; i <= 29; i++) {
	
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
     e5c:	ed 91       	ld	r30, X+
     e5e:	fc 91       	ld	r31, X
     e60:	11 97       	sbiw	r26, 0x01	; 1
     e62:	80 81       	ld	r24, Z
     e64:	41 81       	ldd	r20, Z+1	; 0x01
     e66:	94 2f       	mov	r25, r20
     e68:	93 70       	andi	r25, 0x03	; 3
     e6a:	95 95       	asr	r25
     e6c:	87 95       	ror	r24
     e6e:	95 95       	asr	r25
     e70:	87 95       	ror	r24
     e72:	82 83       	std	Z+2, r24	; 0x02
	pot_id[i]->locked = 1;
     e74:	ed 91       	ld	r30, X+
     e76:	fd 91       	ld	r31, X+
     e78:	83 81       	ldd	r24, Z+3	; 0x03
     e7a:	80 68       	ori	r24, 0x80	; 128
     e7c:	83 83       	std	Z+3, r24	; 0x03
	};
	

void lock_pots(void) { //run this every time new patch is loaded to lock pots and store locked values

for (int i = 0; i <= 29; i++) {
     e7e:	a2 17       	cp	r26, r18
     e80:	b3 07       	cpc	r27, r19
     e82:	61 f7       	brne	.-40     	; 0xe5c <lock_pots+0xa>
	pot_id[i]->locked_value = (pot_id[i]->value) >> 2;
	pot_id[i]->locked = 1;
	
}

}
     e84:	08 95       	ret

00000e86 <unlock_pots>:

void unlock_pots(void) {
     e86:	e0 e0       	ldi	r30, 0x00	; 0
     e88:	f1 e0       	ldi	r31, 0x01	; 1
     e8a:	cf 01       	movw	r24, r30
     e8c:	cc 96       	adiw	r24, 0x3c	; 60
	
	for (int i = 0; i <= 29; i++) {
		
		pot_id[i]->locked = 0;
     e8e:	a1 91       	ld	r26, Z+
     e90:	b1 91       	ld	r27, Z+
     e92:	13 96       	adiw	r26, 0x03	; 3
     e94:	2c 91       	ld	r18, X
     e96:	13 97       	sbiw	r26, 0x03	; 3
     e98:	2f 77       	andi	r18, 0x7F	; 127
     e9a:	13 96       	adiw	r26, 0x03	; 3
     e9c:	2c 93       	st	X, r18
     e9e:	13 97       	sbiw	r26, 0x03	; 3

}

void unlock_pots(void) {
	
	for (int i = 0; i <= 29; i++) {
     ea0:	e8 17       	cp	r30, r24
     ea2:	f9 07       	cpc	r31, r25
     ea4:	a1 f7       	brne	.-24     	; 0xe8e <unlock_pots+0x8>
		
		pot_id[i]->locked = 0;
		
	}
	
}			
     ea6:	08 95       	ret

00000ea8 <save_patch>:
	
	
void save_patch(uint8_t patch_number) {
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	ab 97       	sbiw	r28, 0x2b	; 43
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	18 2f       	mov	r17, r24
	
	struct eeprom_patch patch_to_save;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	
	patch_to_save.vco2_pw = current_patch.vco2_pw;
     ec0:	ee ed       	ldi	r30, 0xDE	; 222
     ec2:	f2 e0       	ldi	r31, 0x02	; 2
     ec4:	20 91 de 02 	lds	r18, 0x02DE
     ec8:	82 2f       	mov	r24, r18
     eca:	82 95       	swap	r24
     ecc:	80 7f       	andi	r24, 0xF0	; 240
     ece:	22 95       	swap	r18
     ed0:	2f 70       	andi	r18, 0x0F	; 15
     ed2:	90 91 df 02 	lds	r25, 0x02DF
     ed6:	93 70       	andi	r25, 0x03	; 3
     ed8:	92 95       	swap	r25
     eda:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.vco1_mix = current_patch.vco1_mix;
     edc:	df 01       	movw	r26, r30
     ede:	5a 97       	sbiw	r26, 0x1a	; 26
     ee0:	3c 91       	ld	r19, X
     ee2:	53 2f       	mov	r21, r19
     ee4:	55 0f       	add	r21, r21
     ee6:	55 0f       	add	r21, r21
     ee8:	4a 81       	ldd	r20, Y+2	; 0x02
     eea:	43 70       	andi	r20, 0x03	; 3
     eec:	45 2b       	or	r20, r21
     eee:	4a 83       	std	Y+2, r20	; 0x02
     ef0:	63 2f       	mov	r22, r19
     ef2:	62 95       	swap	r22
     ef4:	66 95       	lsr	r22
     ef6:	66 95       	lsr	r22
     ef8:	63 70       	andi	r22, 0x03	; 3
     efa:	11 96       	adiw	r26, 0x01	; 1
     efc:	4c 91       	ld	r20, X
     efe:	43 70       	andi	r20, 0x03	; 3
     f00:	44 0f       	add	r20, r20
     f02:	44 0f       	add	r20, r20
	patch_to_save.pitch_eg2 = current_patch.pitch_eg2;
     f04:	df 01       	movw	r26, r30
     f06:	58 97       	sbiw	r26, 0x18	; 24
     f08:	3c 91       	ld	r19, X
     f0a:	53 2f       	mov	r21, r19
     f0c:	52 95       	swap	r21
     f0e:	50 7f       	andi	r21, 0xF0	; 240
     f10:	46 2b       	or	r20, r22
     f12:	45 2b       	or	r20, r21
     f14:	4b 83       	std	Y+3, r20	; 0x03
     f16:	63 2f       	mov	r22, r19
     f18:	62 95       	swap	r22
     f1a:	6f 70       	andi	r22, 0x0F	; 15
     f1c:	11 96       	adiw	r26, 0x01	; 1
     f1e:	4c 91       	ld	r20, X
     f20:	43 70       	andi	r20, 0x03	; 3
     f22:	42 95       	swap	r20
     f24:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.pitch_vco2 = current_patch.pitch_vco2;
     f26:	df 01       	movw	r26, r30
     f28:	56 97       	sbiw	r26, 0x16	; 22
     f2a:	3c 91       	ld	r19, X
     f2c:	53 2f       	mov	r21, r19
     f2e:	52 95       	swap	r21
     f30:	55 0f       	add	r21, r21
     f32:	55 0f       	add	r21, r21
     f34:	50 7c       	andi	r21, 0xC0	; 192
     f36:	46 2b       	or	r20, r22
     f38:	45 2b       	or	r20, r21
     f3a:	4c 83       	std	Y+4, r20	; 0x04
     f3c:	11 96       	adiw	r26, 0x01	; 1
     f3e:	4c 91       	ld	r20, X
     f40:	42 95       	swap	r20
     f42:	44 0f       	add	r20, r20
     f44:	44 0f       	add	r20, r20
     f46:	40 7c       	andi	r20, 0xC0	; 192
     f48:	36 95       	lsr	r19
     f4a:	36 95       	lsr	r19
     f4c:	34 2b       	or	r19, r20
     f4e:	3d 83       	std	Y+5, r19	; 0x05
	patch_to_save.pitch_lfo = current_patch.pitch_lfo;
     f50:	df 01       	movw	r26, r30
     f52:	54 97       	sbiw	r26, 0x14	; 20
     f54:	3c 91       	ld	r19, X
     f56:	3e 83       	std	Y+6, r19	; 0x06
     f58:	11 96       	adiw	r26, 0x01	; 1
     f5a:	4c 91       	ld	r20, X
	patch_to_save.pwm_lfo = current_patch.pwm_lfo;
     f5c:	df 01       	movw	r26, r30
     f5e:	52 97       	sbiw	r26, 0x12	; 18
     f60:	3c 91       	ld	r19, X
     f62:	53 2f       	mov	r21, r19
     f64:	55 0f       	add	r21, r21
     f66:	55 0f       	add	r21, r21
     f68:	43 70       	andi	r20, 0x03	; 3
     f6a:	45 2b       	or	r20, r21
     f6c:	4f 83       	std	Y+7, r20	; 0x07
     f6e:	63 2f       	mov	r22, r19
     f70:	62 95       	swap	r22
     f72:	66 95       	lsr	r22
     f74:	66 95       	lsr	r22
     f76:	63 70       	andi	r22, 0x03	; 3
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	4c 91       	ld	r20, X
     f7c:	43 70       	andi	r20, 0x03	; 3
     f7e:	44 0f       	add	r20, r20
     f80:	44 0f       	add	r20, r20
	patch_to_save.pwm_eg2 = current_patch.pwm_eg2;
     f82:	df 01       	movw	r26, r30
     f84:	50 97       	sbiw	r26, 0x10	; 16
     f86:	3c 91       	ld	r19, X
     f88:	53 2f       	mov	r21, r19
     f8a:	52 95       	swap	r21
     f8c:	50 7f       	andi	r21, 0xF0	; 240
     f8e:	46 2b       	or	r20, r22
     f90:	45 2b       	or	r20, r21
     f92:	48 87       	std	Y+8, r20	; 0x08
     f94:	63 2f       	mov	r22, r19
     f96:	62 95       	swap	r22
     f98:	6f 70       	andi	r22, 0x0F	; 15
     f9a:	11 96       	adiw	r26, 0x01	; 1
     f9c:	4c 91       	ld	r20, X
     f9e:	43 70       	andi	r20, 0x03	; 3
     fa0:	42 95       	swap	r20
     fa2:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.vco1_pw = current_patch.vco1_pw;
     fa4:	df 01       	movw	r26, r30
     fa6:	1e 97       	sbiw	r26, 0x0e	; 14
     fa8:	3c 91       	ld	r19, X
     faa:	53 2f       	mov	r21, r19
     fac:	52 95       	swap	r21
     fae:	55 0f       	add	r21, r21
     fb0:	55 0f       	add	r21, r21
     fb2:	50 7c       	andi	r21, 0xC0	; 192
     fb4:	46 2b       	or	r20, r22
     fb6:	45 2b       	or	r20, r21
     fb8:	49 87       	std	Y+9, r20	; 0x09
     fba:	11 96       	adiw	r26, 0x01	; 1
     fbc:	4c 91       	ld	r20, X
     fbe:	42 95       	swap	r20
     fc0:	44 0f       	add	r20, r20
     fc2:	44 0f       	add	r20, r20
     fc4:	40 7c       	andi	r20, 0xC0	; 192
     fc6:	36 95       	lsr	r19
     fc8:	36 95       	lsr	r19
     fca:	34 2b       	or	r19, r20
     fcc:	3a 87       	std	Y+10, r19	; 0x0a
	patch_to_save.fine = current_patch.fine;
     fce:	df 01       	movw	r26, r30
     fd0:	1c 97       	sbiw	r26, 0x0c	; 12
     fd2:	3c 91       	ld	r19, X
     fd4:	3b 87       	std	Y+11, r19	; 0x0b
     fd6:	11 96       	adiw	r26, 0x01	; 1
     fd8:	4c 91       	ld	r20, X
	patch_to_save.tune = current_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
     fda:	df 01       	movw	r26, r30
     fdc:	1a 97       	sbiw	r26, 0x0a	; 10
     fde:	3c 91       	ld	r19, X
     fe0:	53 2f       	mov	r21, r19
     fe2:	55 0f       	add	r21, r21
     fe4:	55 0f       	add	r21, r21
     fe6:	43 70       	andi	r20, 0x03	; 3
     fe8:	45 2b       	or	r20, r21
     fea:	4c 87       	std	Y+12, r20	; 0x0c
     fec:	63 2f       	mov	r22, r19
     fee:	62 95       	swap	r22
     ff0:	66 95       	lsr	r22
     ff2:	66 95       	lsr	r22
     ff4:	63 70       	andi	r22, 0x03	; 3
     ff6:	11 96       	adiw	r26, 0x01	; 1
     ff8:	4c 91       	ld	r20, X
     ffa:	43 70       	andi	r20, 0x03	; 3
     ffc:	44 0f       	add	r20, r20
     ffe:	44 0f       	add	r20, r20
	patch_to_save.lfo_rate = current_patch.lfo_rate;
    1000:	df 01       	movw	r26, r30
    1002:	18 97       	sbiw	r26, 0x08	; 8
    1004:	3c 91       	ld	r19, X
    1006:	53 2f       	mov	r21, r19
    1008:	52 95       	swap	r21
    100a:	50 7f       	andi	r21, 0xF0	; 240
    100c:	46 2b       	or	r20, r22
    100e:	45 2b       	or	r20, r21
    1010:	4d 87       	std	Y+13, r20	; 0x0d
    1012:	63 2f       	mov	r22, r19
    1014:	62 95       	swap	r22
    1016:	6f 70       	andi	r22, 0x0F	; 15
    1018:	11 96       	adiw	r26, 0x01	; 1
    101a:	4c 91       	ld	r20, X
    101c:	43 70       	andi	r20, 0x03	; 3
    101e:	42 95       	swap	r20
    1020:	40 7f       	andi	r20, 0xF0	; 240
	patch_to_save.arp_rate = current_patch.arp_rate;
    1022:	df 01       	movw	r26, r30
    1024:	16 97       	sbiw	r26, 0x06	; 6
    1026:	3c 91       	ld	r19, X
    1028:	53 2f       	mov	r21, r19
    102a:	52 95       	swap	r21
    102c:	55 0f       	add	r21, r21
    102e:	55 0f       	add	r21, r21
    1030:	50 7c       	andi	r21, 0xC0	; 192
    1032:	46 2b       	or	r20, r22
    1034:	45 2b       	or	r20, r21
    1036:	4e 87       	std	Y+14, r20	; 0x0e
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	4c 91       	ld	r20, X
    103c:	42 95       	swap	r20
    103e:	44 0f       	add	r20, r20
    1040:	44 0f       	add	r20, r20
    1042:	40 7c       	andi	r20, 0xC0	; 192
    1044:	36 95       	lsr	r19
    1046:	36 95       	lsr	r19
    1048:	34 2b       	or	r19, r20
    104a:	3f 87       	std	Y+15, r19	; 0x0f
	patch_to_save.glide	= current_patch.glide;
    104c:	df 01       	movw	r26, r30
    104e:	14 97       	sbiw	r26, 0x04	; 4
    1050:	3c 91       	ld	r19, X
    1052:	38 8b       	std	Y+16, r19	; 0x10
    1054:	11 96       	adiw	r26, 0x01	; 1
    1056:	4c 91       	ld	r20, X
	patch_to_save.amp_lfo = current_patch.amp_lfo;
    1058:	df 01       	movw	r26, r30
    105a:	12 97       	sbiw	r26, 0x02	; 2
    105c:	3c 91       	ld	r19, X
    105e:	53 2f       	mov	r21, r19
    1060:	55 0f       	add	r21, r21
    1062:	55 0f       	add	r21, r21
    1064:	43 70       	andi	r20, 0x03	; 3
    1066:	45 2b       	or	r20, r21
    1068:	49 8b       	std	Y+17, r20	; 0x11
    106a:	32 95       	swap	r19
    106c:	36 95       	lsr	r19
    106e:	36 95       	lsr	r19
    1070:	33 70       	andi	r19, 0x03	; 3
    1072:	11 96       	adiw	r26, 0x01	; 1
    1074:	4c 91       	ld	r20, X
    1076:	43 70       	andi	r20, 0x03	; 3
    1078:	44 0f       	add	r20, r20
    107a:	44 0f       	add	r20, r20
    107c:	83 2b       	or	r24, r19
    107e:	84 2b       	or	r24, r20
    1080:	8a 8b       	std	Y+18, r24	; 0x12
	patch_to_save.vco2_pw = current_patch.vco2_pw;
	
	patch_to_save.fil_eg2 = current_patch.fil_eg2;
    1082:	80 91 e0 02 	lds	r24, 0x02E0
    1086:	38 2f       	mov	r19, r24
    1088:	32 95       	swap	r19
    108a:	33 0f       	add	r19, r19
    108c:	33 0f       	add	r19, r19
    108e:	30 7c       	andi	r19, 0xC0	; 192
    1090:	92 2b       	or	r25, r18
    1092:	93 2b       	or	r25, r19
    1094:	9b 8b       	std	Y+19, r25	; 0x13
    1096:	93 81       	ldd	r25, Z+3	; 0x03
    1098:	92 95       	swap	r25
    109a:	99 0f       	add	r25, r25
    109c:	99 0f       	add	r25, r25
    109e:	90 7c       	andi	r25, 0xC0	; 192
    10a0:	86 95       	lsr	r24
    10a2:	86 95       	lsr	r24
    10a4:	89 2b       	or	r24, r25
    10a6:	8c 8b       	std	Y+20, r24	; 0x14
	patch_to_save.res = current_patch.res;
    10a8:	80 91 e2 02 	lds	r24, 0x02E2
    10ac:	8d 8b       	std	Y+21, r24	; 0x15
    10ae:	95 81       	ldd	r25, Z+5	; 0x05
	patch_to_save.cutoff = current_patch.cutoff;
    10b0:	80 91 e4 02 	lds	r24, 0x02E4
    10b4:	28 2f       	mov	r18, r24
    10b6:	22 0f       	add	r18, r18
    10b8:	22 0f       	add	r18, r18
    10ba:	93 70       	andi	r25, 0x03	; 3
    10bc:	92 2b       	or	r25, r18
    10be:	9e 8b       	std	Y+22, r25	; 0x16
    10c0:	38 2f       	mov	r19, r24
    10c2:	32 95       	swap	r19
    10c4:	36 95       	lsr	r19
    10c6:	36 95       	lsr	r19
    10c8:	33 70       	andi	r19, 0x03	; 3
    10ca:	97 81       	ldd	r25, Z+7	; 0x07
    10cc:	93 70       	andi	r25, 0x03	; 3
    10ce:	99 0f       	add	r25, r25
    10d0:	99 0f       	add	r25, r25
	patch_to_save.key_track = current_patch.key_track;
    10d2:	80 91 e6 02 	lds	r24, 0x02E6
    10d6:	28 2f       	mov	r18, r24
    10d8:	22 95       	swap	r18
    10da:	20 7f       	andi	r18, 0xF0	; 240
    10dc:	93 2b       	or	r25, r19
    10de:	92 2b       	or	r25, r18
    10e0:	9f 8b       	std	Y+23, r25	; 0x17
    10e2:	38 2f       	mov	r19, r24
    10e4:	32 95       	swap	r19
    10e6:	3f 70       	andi	r19, 0x0F	; 15
    10e8:	91 85       	ldd	r25, Z+9	; 0x09
    10ea:	93 70       	andi	r25, 0x03	; 3
    10ec:	92 95       	swap	r25
    10ee:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.fil_vco2 = current_patch.fil_vco2;
    10f0:	80 91 e8 02 	lds	r24, 0x02E8
    10f4:	28 2f       	mov	r18, r24
    10f6:	22 95       	swap	r18
    10f8:	22 0f       	add	r18, r18
    10fa:	22 0f       	add	r18, r18
    10fc:	20 7c       	andi	r18, 0xC0	; 192
    10fe:	93 2b       	or	r25, r19
    1100:	92 2b       	or	r25, r18
    1102:	98 8f       	std	Y+24, r25	; 0x18
    1104:	93 85       	ldd	r25, Z+11	; 0x0b
    1106:	92 95       	swap	r25
    1108:	99 0f       	add	r25, r25
    110a:	99 0f       	add	r25, r25
    110c:	90 7c       	andi	r25, 0xC0	; 192
    110e:	86 95       	lsr	r24
    1110:	86 95       	lsr	r24
    1112:	89 2b       	or	r24, r25
    1114:	89 8f       	std	Y+25, r24	; 0x19
	patch_to_save.fil_lfo = current_patch.fil_lfo;
    1116:	80 91 ea 02 	lds	r24, 0x02EA
    111a:	8a 8f       	std	Y+26, r24	; 0x1a
    111c:	95 85       	ldd	r25, Z+13	; 0x0d
	patch_to_save.noise_mix = current_patch.noise_mix;
    111e:	80 91 ec 02 	lds	r24, 0x02EC
    1122:	28 2f       	mov	r18, r24
    1124:	22 0f       	add	r18, r18
    1126:	22 0f       	add	r18, r18
    1128:	93 70       	andi	r25, 0x03	; 3
    112a:	92 2b       	or	r25, r18
    112c:	9b 8f       	std	Y+27, r25	; 0x1b
    112e:	38 2f       	mov	r19, r24
    1130:	32 95       	swap	r19
    1132:	36 95       	lsr	r19
    1134:	36 95       	lsr	r19
    1136:	33 70       	andi	r19, 0x03	; 3
    1138:	97 85       	ldd	r25, Z+15	; 0x0f
    113a:	93 70       	andi	r25, 0x03	; 3
    113c:	99 0f       	add	r25, r25
    113e:	99 0f       	add	r25, r25
	patch_to_save.attack_2 = current_patch.attack_2;
    1140:	80 91 ee 02 	lds	r24, 0x02EE
    1144:	28 2f       	mov	r18, r24
    1146:	22 95       	swap	r18
    1148:	20 7f       	andi	r18, 0xF0	; 240
    114a:	93 2b       	or	r25, r19
    114c:	92 2b       	or	r25, r18
    114e:	9c 8f       	std	Y+28, r25	; 0x1c
    1150:	38 2f       	mov	r19, r24
    1152:	32 95       	swap	r19
    1154:	3f 70       	andi	r19, 0x0F	; 15
    1156:	91 89       	ldd	r25, Z+17	; 0x11
    1158:	93 70       	andi	r25, 0x03	; 3
    115a:	92 95       	swap	r25
    115c:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.attack_1 = current_patch.attack_1;
    115e:	80 91 f0 02 	lds	r24, 0x02F0
    1162:	28 2f       	mov	r18, r24
    1164:	22 95       	swap	r18
    1166:	22 0f       	add	r18, r18
    1168:	22 0f       	add	r18, r18
    116a:	20 7c       	andi	r18, 0xC0	; 192
    116c:	93 2b       	or	r25, r19
    116e:	92 2b       	or	r25, r18
    1170:	9d 8f       	std	Y+29, r25	; 0x1d
    1172:	93 89       	ldd	r25, Z+19	; 0x13
    1174:	92 95       	swap	r25
    1176:	99 0f       	add	r25, r25
    1178:	99 0f       	add	r25, r25
    117a:	90 7c       	andi	r25, 0xC0	; 192
    117c:	86 95       	lsr	r24
    117e:	86 95       	lsr	r24
    1180:	89 2b       	or	r24, r25
    1182:	8e 8f       	std	Y+30, r24	; 0x1e
	patch_to_save.decay_2 = current_patch.decay_2;
    1184:	80 91 f2 02 	lds	r24, 0x02F2
    1188:	8f 8f       	std	Y+31, r24	; 0x1f
    118a:	95 89       	ldd	r25, Z+21	; 0x15
	patch_to_save.decay_1 = current_patch.decay_1;
    118c:	80 91 f4 02 	lds	r24, 0x02F4
    1190:	28 2f       	mov	r18, r24
    1192:	22 0f       	add	r18, r18
    1194:	22 0f       	add	r18, r18
    1196:	93 70       	andi	r25, 0x03	; 3
    1198:	92 2b       	or	r25, r18
    119a:	98 a3       	lds	r25, 0x58
    119c:	38 2f       	mov	r19, r24
    119e:	32 95       	swap	r19
    11a0:	36 95       	lsr	r19
    11a2:	36 95       	lsr	r19
    11a4:	33 70       	andi	r19, 0x03	; 3
    11a6:	97 89       	ldd	r25, Z+23	; 0x17
    11a8:	93 70       	andi	r25, 0x03	; 3
    11aa:	99 0f       	add	r25, r25
    11ac:	99 0f       	add	r25, r25
	patch_to_save.sustain_2 = current_patch.sustain_2;
    11ae:	80 91 f6 02 	lds	r24, 0x02F6
    11b2:	28 2f       	mov	r18, r24
    11b4:	22 95       	swap	r18
    11b6:	20 7f       	andi	r18, 0xF0	; 240
    11b8:	93 2b       	or	r25, r19
    11ba:	92 2b       	or	r25, r18
    11bc:	99 a3       	lds	r25, 0x59
    11be:	38 2f       	mov	r19, r24
    11c0:	32 95       	swap	r19
    11c2:	3f 70       	andi	r19, 0x0F	; 15
    11c4:	91 8d       	ldd	r25, Z+25	; 0x19
    11c6:	93 70       	andi	r25, 0x03	; 3
    11c8:	92 95       	swap	r25
    11ca:	90 7f       	andi	r25, 0xF0	; 240
	patch_to_save.sustain_1 = current_patch.sustain_1;
    11cc:	80 91 f8 02 	lds	r24, 0x02F8
    11d0:	28 2f       	mov	r18, r24
    11d2:	22 95       	swap	r18
    11d4:	22 0f       	add	r18, r18
    11d6:	22 0f       	add	r18, r18
    11d8:	20 7c       	andi	r18, 0xC0	; 192
    11da:	93 2b       	or	r25, r19
    11dc:	92 2b       	or	r25, r18
    11de:	9a a3       	lds	r25, 0x5a
    11e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    11e2:	92 95       	swap	r25
    11e4:	99 0f       	add	r25, r25
    11e6:	99 0f       	add	r25, r25
    11e8:	90 7c       	andi	r25, 0xC0	; 192
    11ea:	86 95       	lsr	r24
    11ec:	86 95       	lsr	r24
    11ee:	89 2b       	or	r24, r25
    11f0:	8b a3       	lds	r24, 0x5b
	patch_to_save.release_2 = current_patch.release_2;
    11f2:	80 91 fa 02 	lds	r24, 0x02FA
    11f6:	8c a3       	lds	r24, 0x5c
    11f8:	95 8d       	ldd	r25, Z+29	; 0x1d
	patch_to_save.release_1 = current_patch.release_1;
    11fa:	80 91 fc 02 	lds	r24, 0x02FC
    11fe:	28 2f       	mov	r18, r24
    1200:	22 0f       	add	r18, r18
    1202:	22 0f       	add	r18, r18
    1204:	93 70       	andi	r25, 0x03	; 3
    1206:	92 2b       	or	r25, r18
    1208:	9d a3       	lds	r25, 0x5d
    120a:	82 95       	swap	r24
    120c:	86 95       	lsr	r24
    120e:	86 95       	lsr	r24
    1210:	83 70       	andi	r24, 0x03	; 3
    1212:	2e a1       	lds	r18, 0x4e
    1214:	20 7f       	andi	r18, 0xF0	; 240
    1216:	97 8d       	ldd	r25, Z+31	; 0x1f
    1218:	93 70       	andi	r25, 0x03	; 3
    121a:	99 0f       	add	r25, r25
    121c:	99 0f       	add	r25, r25
    121e:	82 2b       	or	r24, r18
    1220:	89 2b       	or	r24, r25
    1222:	8e a3       	lds	r24, 0x5e
	
		
	patch_to_save.byte_1 = current_patch.byte_1;
    1224:	80 91 fe 02 	lds	r24, 0x02FE
    1228:	8f a3       	lds	r24, 0x5f
	patch_to_save.byte_2 = current_patch.byte_2;
    122a:	80 91 ff 02 	lds	r24, 0x02FF
    122e:	88 a7       	lds	r24, 0x78
	patch_to_save.byte_3 = current_patch.byte_3;
    1230:	80 91 00 03 	lds	r24, 0x0300
    1234:	89 a7       	lds	r24, 0x79
	patch_to_save.byte_4 = current_patch.byte_4;
    1236:	80 91 01 03 	lds	r24, 0x0301
    123a:	8a a7       	lds	r24, 0x7a
	patch_to_save.byte_5 = current_patch.byte_5;
    123c:	80 91 02 03 	lds	r24, 0x0302
    1240:	8b a7       	lds	r24, 0x7b
	
	
	lock_pots();
    1242:	0e 94 29 07 	call	0xe52	; 0xe52 <lock_pots>
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<< PROG_MANUAL_SW);
    1246:	80 91 7f 03 	lds	r24, 0x037F
    124a:	8f 77       	andi	r24, 0x7F	; 127
    124c:	80 93 7f 03 	sts	0x037F, r24
	current_patch.mode = MEMORY;
    1250:	10 92 07 03 	sts	0x0307, r1
	
	eeprom_update_block((const void*)&patch_to_save, (void*)&patch_memory[patch_number], sizeof(patch_to_save));
    1254:	21 2f       	mov	r18, r17
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	8b e2       	ldi	r24, 0x2B	; 43
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	28 9f       	mul	r18, r24
    125e:	b0 01       	movw	r22, r0
    1260:	29 9f       	mul	r18, r25
    1262:	70 0d       	add	r23, r0
    1264:	38 9f       	mul	r19, r24
    1266:	70 0d       	add	r23, r0
    1268:	11 24       	eor	r1, r1
    126a:	60 50       	subi	r22, 0x00	; 0
    126c:	70 40       	sbci	r23, 0x00	; 0
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	4b e2       	ldi	r20, 0x2B	; 43
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__eeupd_block_m6450a>
}	
    127a:	ab 96       	adiw	r28, 0x2b	; 43
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	08 95       	ret

0000128e <load_patch>:
	
void load_patch(uint8_t patch_number) {
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	c3 54       	subi	r28, 0x43	; 67
    129a:	d0 40       	sbci	r29, 0x00	; 0
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
	
	struct eeprom_patch loaded_patch;
	//because of bit fields in eeprom patch struct, a temporary eeprom patch needs to be filled with current_patch values and then saved to memory.
	eeprom_read_block((void*)&loaded_patch, (const void*)&patch_memory[patch_number], sizeof(loaded_patch));
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	2b e2       	ldi	r18, 0x2B	; 43
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	82 9f       	mul	r24, r18
    12ae:	b0 01       	movw	r22, r0
    12b0:	83 9f       	mul	r24, r19
    12b2:	70 0d       	add	r23, r0
    12b4:	92 9f       	mul	r25, r18
    12b6:	70 0d       	add	r23, r0
    12b8:	11 24       	eor	r1, r1
    12ba:	60 50       	subi	r22, 0x00	; 0
    12bc:	70 40       	sbci	r23, 0x00	; 0
    12be:	ce 01       	movw	r24, r28
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	4b e2       	ldi	r20, 0x2B	; 43
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__eerd_block_m6450a>
	
	
	
	current_patch.vco2_pw = loaded_patch.vco2_pw;
    12ca:	ee ed       	ldi	r30, 0xDE	; 222
    12cc:	f2 e0       	ldi	r31, 0x02	; 2
    12ce:	8a 89       	ldd	r24, Y+18	; 0x12
    12d0:	28 2f       	mov	r18, r24
    12d2:	22 95       	swap	r18
    12d4:	2f 70       	andi	r18, 0x0F	; 15
    12d6:	9b 89       	ldd	r25, Y+19	; 0x13
    12d8:	39 2f       	mov	r19, r25
    12da:	32 95       	swap	r19
    12dc:	30 7f       	andi	r19, 0xF0	; 240
    12de:	32 2b       	or	r19, r18
    12e0:	29 2f       	mov	r18, r25
    12e2:	22 95       	swap	r18
    12e4:	2f 70       	andi	r18, 0x0F	; 15
    12e6:	23 70       	andi	r18, 0x03	; 3
    12e8:	30 93 de 02 	sts	0x02DE, r19
    12ec:	20 93 df 02 	sts	0x02DF, r18
	current_patch.vco1_mix = loaded_patch.vco1_mix;
    12f0:	df 01       	movw	r26, r30
    12f2:	5a 97       	sbiw	r26, 0x1a	; 26
    12f4:	4a 81       	ldd	r20, Y+2	; 0x02
    12f6:	46 95       	lsr	r20
    12f8:	46 95       	lsr	r20
    12fa:	2b 81       	ldd	r18, Y+3	; 0x03
    12fc:	32 2f       	mov	r19, r18
    12fe:	32 95       	swap	r19
    1300:	33 0f       	add	r19, r19
    1302:	33 0f       	add	r19, r19
    1304:	30 7c       	andi	r19, 0xC0	; 192
    1306:	43 2b       	or	r20, r19
    1308:	32 2f       	mov	r19, r18
    130a:	36 95       	lsr	r19
    130c:	36 95       	lsr	r19
    130e:	33 70       	andi	r19, 0x03	; 3
    1310:	4c 93       	st	X, r20
    1312:	11 96       	adiw	r26, 0x01	; 1
    1314:	3c 93       	st	X, r19
	current_patch.pitch_eg2 = loaded_patch.pitch_eg2;
    1316:	df 01       	movw	r26, r30
    1318:	58 97       	sbiw	r26, 0x18	; 24
    131a:	32 2f       	mov	r19, r18
    131c:	32 95       	swap	r19
    131e:	3f 70       	andi	r19, 0x0F	; 15
    1320:	2c 81       	ldd	r18, Y+4	; 0x04
    1322:	42 2f       	mov	r20, r18
    1324:	42 95       	swap	r20
    1326:	40 7f       	andi	r20, 0xF0	; 240
    1328:	43 2b       	or	r20, r19
    132a:	32 2f       	mov	r19, r18
    132c:	32 95       	swap	r19
    132e:	3f 70       	andi	r19, 0x0F	; 15
    1330:	33 70       	andi	r19, 0x03	; 3
    1332:	4c 93       	st	X, r20
    1334:	11 96       	adiw	r26, 0x01	; 1
    1336:	3c 93       	st	X, r19
	current_patch.pitch_vco2 = loaded_patch.pitch_vco2;
    1338:	df 01       	movw	r26, r30
    133a:	56 97       	sbiw	r26, 0x16	; 22
    133c:	22 95       	swap	r18
    133e:	26 95       	lsr	r18
    1340:	26 95       	lsr	r18
    1342:	23 70       	andi	r18, 0x03	; 3
    1344:	3d 81       	ldd	r19, Y+5	; 0x05
    1346:	43 2f       	mov	r20, r19
    1348:	44 0f       	add	r20, r20
    134a:	44 0f       	add	r20, r20
    134c:	24 2b       	or	r18, r20
    134e:	32 95       	swap	r19
    1350:	36 95       	lsr	r19
    1352:	36 95       	lsr	r19
    1354:	33 70       	andi	r19, 0x03	; 3
    1356:	2c 93       	st	X, r18
    1358:	11 96       	adiw	r26, 0x01	; 1
    135a:	3c 93       	st	X, r19
	current_patch.pitch_lfo = loaded_patch.pitch_lfo;
    135c:	df 01       	movw	r26, r30
    135e:	54 97       	sbiw	r26, 0x14	; 20
    1360:	4e 81       	ldd	r20, Y+6	; 0x06
    1362:	2f 81       	ldd	r18, Y+7	; 0x07
    1364:	32 2f       	mov	r19, r18
    1366:	33 70       	andi	r19, 0x03	; 3
    1368:	4c 93       	st	X, r20
    136a:	11 96       	adiw	r26, 0x01	; 1
    136c:	3c 93       	st	X, r19
	current_patch.pwm_lfo = loaded_patch.pwm_lfo;
    136e:	df 01       	movw	r26, r30
    1370:	52 97       	sbiw	r26, 0x12	; 18
    1372:	32 2f       	mov	r19, r18
    1374:	36 95       	lsr	r19
    1376:	36 95       	lsr	r19
    1378:	28 85       	ldd	r18, Y+8	; 0x08
    137a:	42 2f       	mov	r20, r18
    137c:	42 95       	swap	r20
    137e:	44 0f       	add	r20, r20
    1380:	44 0f       	add	r20, r20
    1382:	40 7c       	andi	r20, 0xC0	; 192
    1384:	43 2b       	or	r20, r19
    1386:	32 2f       	mov	r19, r18
    1388:	36 95       	lsr	r19
    138a:	36 95       	lsr	r19
    138c:	33 70       	andi	r19, 0x03	; 3
    138e:	4c 93       	st	X, r20
    1390:	11 96       	adiw	r26, 0x01	; 1
    1392:	3c 93       	st	X, r19
	current_patch.pwm_eg2 = loaded_patch.pwm_eg2;
    1394:	df 01       	movw	r26, r30
    1396:	50 97       	sbiw	r26, 0x10	; 16
    1398:	32 2f       	mov	r19, r18
    139a:	32 95       	swap	r19
    139c:	3f 70       	andi	r19, 0x0F	; 15
    139e:	29 85       	ldd	r18, Y+9	; 0x09
    13a0:	42 2f       	mov	r20, r18
    13a2:	42 95       	swap	r20
    13a4:	40 7f       	andi	r20, 0xF0	; 240
    13a6:	43 2b       	or	r20, r19
    13a8:	32 2f       	mov	r19, r18
    13aa:	32 95       	swap	r19
    13ac:	3f 70       	andi	r19, 0x0F	; 15
    13ae:	33 70       	andi	r19, 0x03	; 3
    13b0:	4c 93       	st	X, r20
    13b2:	11 96       	adiw	r26, 0x01	; 1
    13b4:	3c 93       	st	X, r19
	current_patch.vco1_pw = loaded_patch.vco1_pw;
    13b6:	df 01       	movw	r26, r30
    13b8:	1e 97       	sbiw	r26, 0x0e	; 14
    13ba:	22 95       	swap	r18
    13bc:	26 95       	lsr	r18
    13be:	26 95       	lsr	r18
    13c0:	23 70       	andi	r18, 0x03	; 3
    13c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    13c4:	43 2f       	mov	r20, r19
    13c6:	44 0f       	add	r20, r20
    13c8:	44 0f       	add	r20, r20
    13ca:	24 2b       	or	r18, r20
    13cc:	32 95       	swap	r19
    13ce:	36 95       	lsr	r19
    13d0:	36 95       	lsr	r19
    13d2:	33 70       	andi	r19, 0x03	; 3
    13d4:	2c 93       	st	X, r18
    13d6:	11 96       	adiw	r26, 0x01	; 1
    13d8:	3c 93       	st	X, r19
	current_patch.fine = loaded_patch.fine;
    13da:	df 01       	movw	r26, r30
    13dc:	1c 97       	sbiw	r26, 0x0c	; 12
    13de:	4b 85       	ldd	r20, Y+11	; 0x0b
    13e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    13e2:	32 2f       	mov	r19, r18
    13e4:	33 70       	andi	r19, 0x03	; 3
    13e6:	4c 93       	st	X, r20
    13e8:	11 96       	adiw	r26, 0x01	; 1
    13ea:	3c 93       	st	X, r19
	current_patch.tune = loaded_patch.tune; //probably shouldn't save master tune value. Like volume, it is a parameter that doesn't apply to a patch.
    13ec:	df 01       	movw	r26, r30
    13ee:	1a 97       	sbiw	r26, 0x0a	; 10
    13f0:	32 2f       	mov	r19, r18
    13f2:	36 95       	lsr	r19
    13f4:	36 95       	lsr	r19
    13f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    13f8:	42 2f       	mov	r20, r18
    13fa:	42 95       	swap	r20
    13fc:	44 0f       	add	r20, r20
    13fe:	44 0f       	add	r20, r20
    1400:	40 7c       	andi	r20, 0xC0	; 192
    1402:	43 2b       	or	r20, r19
    1404:	32 2f       	mov	r19, r18
    1406:	36 95       	lsr	r19
    1408:	36 95       	lsr	r19
    140a:	33 70       	andi	r19, 0x03	; 3
    140c:	4c 93       	st	X, r20
    140e:	11 96       	adiw	r26, 0x01	; 1
    1410:	3c 93       	st	X, r19
	current_patch.lfo_rate = loaded_patch.lfo_rate;
    1412:	df 01       	movw	r26, r30
    1414:	18 97       	sbiw	r26, 0x08	; 8
    1416:	32 2f       	mov	r19, r18
    1418:	32 95       	swap	r19
    141a:	3f 70       	andi	r19, 0x0F	; 15
    141c:	2e 85       	ldd	r18, Y+14	; 0x0e
    141e:	42 2f       	mov	r20, r18
    1420:	42 95       	swap	r20
    1422:	40 7f       	andi	r20, 0xF0	; 240
    1424:	43 2b       	or	r20, r19
    1426:	32 2f       	mov	r19, r18
    1428:	32 95       	swap	r19
    142a:	3f 70       	andi	r19, 0x0F	; 15
    142c:	33 70       	andi	r19, 0x03	; 3
    142e:	4c 93       	st	X, r20
    1430:	11 96       	adiw	r26, 0x01	; 1
    1432:	3c 93       	st	X, r19
	current_patch.arp_rate = loaded_patch.arp_rate;
    1434:	df 01       	movw	r26, r30
    1436:	16 97       	sbiw	r26, 0x06	; 6
    1438:	22 95       	swap	r18
    143a:	26 95       	lsr	r18
    143c:	26 95       	lsr	r18
    143e:	23 70       	andi	r18, 0x03	; 3
    1440:	3f 85       	ldd	r19, Y+15	; 0x0f
    1442:	43 2f       	mov	r20, r19
    1444:	44 0f       	add	r20, r20
    1446:	44 0f       	add	r20, r20
    1448:	24 2b       	or	r18, r20
    144a:	32 95       	swap	r19
    144c:	36 95       	lsr	r19
    144e:	36 95       	lsr	r19
    1450:	33 70       	andi	r19, 0x03	; 3
    1452:	2c 93       	st	X, r18
    1454:	11 96       	adiw	r26, 0x01	; 1
    1456:	3c 93       	st	X, r19
	current_patch.glide	= loaded_patch.glide;
    1458:	df 01       	movw	r26, r30
    145a:	14 97       	sbiw	r26, 0x04	; 4
    145c:	48 89       	ldd	r20, Y+16	; 0x10
    145e:	29 89       	ldd	r18, Y+17	; 0x11
    1460:	32 2f       	mov	r19, r18
    1462:	33 70       	andi	r19, 0x03	; 3
    1464:	4c 93       	st	X, r20
    1466:	11 96       	adiw	r26, 0x01	; 1
    1468:	3c 93       	st	X, r19
	current_patch.amp_lfo = loaded_patch.amp_lfo;
    146a:	df 01       	movw	r26, r30
    146c:	12 97       	sbiw	r26, 0x02	; 2
    146e:	26 95       	lsr	r18
    1470:	26 95       	lsr	r18
    1472:	38 2f       	mov	r19, r24
    1474:	32 95       	swap	r19
    1476:	33 0f       	add	r19, r19
    1478:	33 0f       	add	r19, r19
    147a:	30 7c       	andi	r19, 0xC0	; 192
    147c:	23 2b       	or	r18, r19
    147e:	86 95       	lsr	r24
    1480:	86 95       	lsr	r24
    1482:	83 70       	andi	r24, 0x03	; 3
    1484:	2c 93       	st	X, r18
    1486:	11 96       	adiw	r26, 0x01	; 1
    1488:	8c 93       	st	X, r24
	current_patch.vco2_pw = loaded_patch.vco2_pw;
	
	current_patch.fil_eg2 = loaded_patch.fil_eg2;
    148a:	92 95       	swap	r25
    148c:	96 95       	lsr	r25
    148e:	96 95       	lsr	r25
    1490:	93 70       	andi	r25, 0x03	; 3
    1492:	8c 89       	ldd	r24, Y+20	; 0x14
    1494:	28 2f       	mov	r18, r24
    1496:	22 0f       	add	r18, r18
    1498:	22 0f       	add	r18, r18
    149a:	92 2b       	or	r25, r18
    149c:	82 95       	swap	r24
    149e:	86 95       	lsr	r24
    14a0:	86 95       	lsr	r24
    14a2:	83 70       	andi	r24, 0x03	; 3
    14a4:	90 93 e0 02 	sts	0x02E0, r25
    14a8:	83 83       	std	Z+3, r24	; 0x03
	current_patch.res = loaded_patch.res;
    14aa:	2d 89       	ldd	r18, Y+21	; 0x15
    14ac:	8e 89       	ldd	r24, Y+22	; 0x16
    14ae:	98 2f       	mov	r25, r24
    14b0:	93 70       	andi	r25, 0x03	; 3
    14b2:	20 93 e2 02 	sts	0x02E2, r18
    14b6:	95 83       	std	Z+5, r25	; 0x05
	current_patch.cutoff = loaded_patch.cutoff;
    14b8:	98 2f       	mov	r25, r24
    14ba:	96 95       	lsr	r25
    14bc:	96 95       	lsr	r25
    14be:	8f 89       	ldd	r24, Y+23	; 0x17
    14c0:	28 2f       	mov	r18, r24
    14c2:	22 95       	swap	r18
    14c4:	22 0f       	add	r18, r18
    14c6:	22 0f       	add	r18, r18
    14c8:	20 7c       	andi	r18, 0xC0	; 192
    14ca:	29 2b       	or	r18, r25
    14cc:	98 2f       	mov	r25, r24
    14ce:	96 95       	lsr	r25
    14d0:	96 95       	lsr	r25
    14d2:	93 70       	andi	r25, 0x03	; 3
    14d4:	20 93 e4 02 	sts	0x02E4, r18
    14d8:	97 83       	std	Z+7, r25	; 0x07
	current_patch.key_track = loaded_patch.key_track;
    14da:	98 2f       	mov	r25, r24
    14dc:	92 95       	swap	r25
    14de:	9f 70       	andi	r25, 0x0F	; 15
    14e0:	88 8d       	ldd	r24, Y+24	; 0x18
    14e2:	28 2f       	mov	r18, r24
    14e4:	22 95       	swap	r18
    14e6:	20 7f       	andi	r18, 0xF0	; 240
    14e8:	29 2b       	or	r18, r25
    14ea:	98 2f       	mov	r25, r24
    14ec:	92 95       	swap	r25
    14ee:	9f 70       	andi	r25, 0x0F	; 15
    14f0:	93 70       	andi	r25, 0x03	; 3
    14f2:	20 93 e6 02 	sts	0x02E6, r18
    14f6:	91 87       	std	Z+9, r25	; 0x09
	current_patch.fil_vco2 = loaded_patch.fil_vco2;
    14f8:	82 95       	swap	r24
    14fa:	86 95       	lsr	r24
    14fc:	86 95       	lsr	r24
    14fe:	83 70       	andi	r24, 0x03	; 3
    1500:	99 8d       	ldd	r25, Y+25	; 0x19
    1502:	29 2f       	mov	r18, r25
    1504:	22 0f       	add	r18, r18
    1506:	22 0f       	add	r18, r18
    1508:	82 2b       	or	r24, r18
    150a:	92 95       	swap	r25
    150c:	96 95       	lsr	r25
    150e:	96 95       	lsr	r25
    1510:	93 70       	andi	r25, 0x03	; 3
    1512:	80 93 e8 02 	sts	0x02E8, r24
    1516:	93 87       	std	Z+11, r25	; 0x0b
	current_patch.fil_lfo = loaded_patch.fil_lfo;
    1518:	2a 8d       	ldd	r18, Y+26	; 0x1a
    151a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    151c:	98 2f       	mov	r25, r24
    151e:	93 70       	andi	r25, 0x03	; 3
    1520:	20 93 ea 02 	sts	0x02EA, r18
    1524:	95 87       	std	Z+13, r25	; 0x0d
	current_patch.noise_mix = loaded_patch.noise_mix;
    1526:	98 2f       	mov	r25, r24
    1528:	96 95       	lsr	r25
    152a:	96 95       	lsr	r25
    152c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    152e:	28 2f       	mov	r18, r24
    1530:	22 95       	swap	r18
    1532:	22 0f       	add	r18, r18
    1534:	22 0f       	add	r18, r18
    1536:	20 7c       	andi	r18, 0xC0	; 192
    1538:	29 2b       	or	r18, r25
    153a:	98 2f       	mov	r25, r24
    153c:	96 95       	lsr	r25
    153e:	96 95       	lsr	r25
    1540:	93 70       	andi	r25, 0x03	; 3
    1542:	20 93 ec 02 	sts	0x02EC, r18
    1546:	97 87       	std	Z+15, r25	; 0x0f
	current_patch.attack_2 = loaded_patch.attack_2;
    1548:	98 2f       	mov	r25, r24
    154a:	92 95       	swap	r25
    154c:	9f 70       	andi	r25, 0x0F	; 15
    154e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1550:	28 2f       	mov	r18, r24
    1552:	22 95       	swap	r18
    1554:	20 7f       	andi	r18, 0xF0	; 240
    1556:	29 2b       	or	r18, r25
    1558:	98 2f       	mov	r25, r24
    155a:	92 95       	swap	r25
    155c:	9f 70       	andi	r25, 0x0F	; 15
    155e:	93 70       	andi	r25, 0x03	; 3
    1560:	20 93 ee 02 	sts	0x02EE, r18
    1564:	91 8b       	std	Z+17, r25	; 0x11
	current_patch.attack_1 = loaded_patch.attack_1;
    1566:	82 95       	swap	r24
    1568:	86 95       	lsr	r24
    156a:	86 95       	lsr	r24
    156c:	83 70       	andi	r24, 0x03	; 3
    156e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1570:	29 2f       	mov	r18, r25
    1572:	22 0f       	add	r18, r18
    1574:	22 0f       	add	r18, r18
    1576:	82 2b       	or	r24, r18
    1578:	92 95       	swap	r25
    157a:	96 95       	lsr	r25
    157c:	96 95       	lsr	r25
    157e:	93 70       	andi	r25, 0x03	; 3
    1580:	80 93 f0 02 	sts	0x02F0, r24
    1584:	93 8b       	std	Z+19, r25	; 0x13
	current_patch.decay_2 = loaded_patch.decay_2;
    1586:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1588:	88 a1       	lds	r24, 0x48
    158a:	98 2f       	mov	r25, r24
    158c:	93 70       	andi	r25, 0x03	; 3
    158e:	20 93 f2 02 	sts	0x02F2, r18
    1592:	95 8b       	std	Z+21, r25	; 0x15
	current_patch.decay_1 = loaded_patch.decay_1;
    1594:	98 2f       	mov	r25, r24
    1596:	96 95       	lsr	r25
    1598:	96 95       	lsr	r25
    159a:	89 a1       	lds	r24, 0x49
    159c:	28 2f       	mov	r18, r24
    159e:	22 95       	swap	r18
    15a0:	22 0f       	add	r18, r18
    15a2:	22 0f       	add	r18, r18
    15a4:	20 7c       	andi	r18, 0xC0	; 192
    15a6:	29 2b       	or	r18, r25
    15a8:	98 2f       	mov	r25, r24
    15aa:	96 95       	lsr	r25
    15ac:	96 95       	lsr	r25
    15ae:	93 70       	andi	r25, 0x03	; 3
    15b0:	20 93 f4 02 	sts	0x02F4, r18
    15b4:	97 8b       	std	Z+23, r25	; 0x17
	current_patch.sustain_2 = loaded_patch.sustain_2;
    15b6:	98 2f       	mov	r25, r24
    15b8:	92 95       	swap	r25
    15ba:	9f 70       	andi	r25, 0x0F	; 15
    15bc:	8a a1       	lds	r24, 0x4a
    15be:	28 2f       	mov	r18, r24
    15c0:	22 95       	swap	r18
    15c2:	20 7f       	andi	r18, 0xF0	; 240
    15c4:	29 2b       	or	r18, r25
    15c6:	98 2f       	mov	r25, r24
    15c8:	92 95       	swap	r25
    15ca:	9f 70       	andi	r25, 0x0F	; 15
    15cc:	93 70       	andi	r25, 0x03	; 3
    15ce:	20 93 f6 02 	sts	0x02F6, r18
    15d2:	91 8f       	std	Z+25, r25	; 0x19
	current_patch.sustain_1 = loaded_patch.sustain_1;
    15d4:	82 95       	swap	r24
    15d6:	86 95       	lsr	r24
    15d8:	86 95       	lsr	r24
    15da:	83 70       	andi	r24, 0x03	; 3
    15dc:	9b a1       	lds	r25, 0x4b
    15de:	29 2f       	mov	r18, r25
    15e0:	22 0f       	add	r18, r18
    15e2:	22 0f       	add	r18, r18
    15e4:	82 2b       	or	r24, r18
    15e6:	92 95       	swap	r25
    15e8:	96 95       	lsr	r25
    15ea:	96 95       	lsr	r25
    15ec:	93 70       	andi	r25, 0x03	; 3
    15ee:	80 93 f8 02 	sts	0x02F8, r24
    15f2:	93 8f       	std	Z+27, r25	; 0x1b
	current_patch.release_2 = loaded_patch.release_2;
    15f4:	2c a1       	lds	r18, 0x4c
    15f6:	8d a1       	lds	r24, 0x4d
    15f8:	98 2f       	mov	r25, r24
    15fa:	93 70       	andi	r25, 0x03	; 3
    15fc:	20 93 fa 02 	sts	0x02FA, r18
    1600:	95 8f       	std	Z+29, r25	; 0x1d
	current_patch.release_1 = loaded_patch.release_1;
    1602:	98 2f       	mov	r25, r24
    1604:	96 95       	lsr	r25
    1606:	96 95       	lsr	r25
    1608:	8e a1       	lds	r24, 0x4e
    160a:	28 2f       	mov	r18, r24
    160c:	22 95       	swap	r18
    160e:	22 0f       	add	r18, r18
    1610:	22 0f       	add	r18, r18
    1612:	20 7c       	andi	r18, 0xC0	; 192
    1614:	29 2b       	or	r18, r25
    1616:	86 95       	lsr	r24
    1618:	86 95       	lsr	r24
    161a:	98 2f       	mov	r25, r24
    161c:	93 70       	andi	r25, 0x03	; 3
    161e:	20 93 fc 02 	sts	0x02FC, r18
    1622:	97 8f       	std	Z+31, r25	; 0x1f
	
	
	current_patch.byte_1 = loaded_patch.byte_1;
    1624:	7f a1       	lds	r23, 0x4f
    1626:	70 93 fe 02 	sts	0x02FE, r23
	current_patch.byte_2 = loaded_patch.byte_2;
    162a:	68 a5       	lds	r22, 0x68
    162c:	60 93 ff 02 	sts	0x02FF, r22
	current_patch.byte_3 = loaded_patch.byte_3;
    1630:	89 a5       	lds	r24, 0x69
    1632:	80 93 00 03 	sts	0x0300, r24
	current_patch.byte_4 = loaded_patch.byte_4;
    1636:	9a a5       	lds	r25, 0x6a
    1638:	90 93 01 03 	sts	0x0301, r25
	current_patch.byte_5 = loaded_patch.byte_5;
    163c:	1b a5       	lds	r17, 0x6b
    163e:	10 93 02 03 	sts	0x0302, r17
	
	//using De Bruijn sequence to determine which bit is set. For alphabet size k = 2 (binary - 0 and 1) and n = 3. 2^3 = 8. The minimum number of bits required to represent the 5 octave positions
	uint8_t vco1_lookup[] = {7, 2, 5, 0, 6, 4, 3, 1}; // *modified* De Bruijn lookup table for octave number, see: http://stackoverflow.com/questions/14429661/determine-which-single-bit-in-the-byte-is-set
    1642:	de 01       	movw	r26, r28
    1644:	9c 96       	adiw	r26, 0x2c	; 44
    1646:	ef ef       	ldi	r30, 0xFF	; 255
    1648:	f1 e0       	ldi	r31, 0x01	; 1
    164a:	28 e0       	ldi	r18, 0x08	; 8
    164c:	01 90       	ld	r0, Z+
    164e:	0d 92       	st	X+, r0
    1650:	21 50       	subi	r18, 0x01	; 1
    1652:	e1 f7       	brne	.-8      	; 0x164c <load_patch+0x3be>
	//lookup table modified from standard 8 bit De Bruijn sequence to handle non sequential order of octave LEDs in byte_4
	uint8_t vco1_bitfield = current_patch.byte_4 & 0b00011111; //clear top 3 bits, which are used for VCO2 octave lookup - probably don't need to clear these bits
    1654:	e9 2f       	mov	r30, r25
    1656:	ef 71       	andi	r30, 0x1F	; 31
	uint8_t bit_index = ((vco1_bitfield*0x1D) >> 4) & 0x7;	//0x1D 0b11101 is the De Bruijn sequence for 8 bits 
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	9f 01       	movw	r18, r30
    165c:	22 0f       	add	r18, r18
    165e:	33 1f       	adc	r19, r19
    1660:	22 0f       	add	r18, r18
    1662:	33 1f       	adc	r19, r19
    1664:	a9 01       	movw	r20, r18
    1666:	44 0f       	add	r20, r20
    1668:	55 1f       	adc	r21, r21
    166a:	44 0f       	add	r20, r20
    166c:	55 1f       	adc	r21, r21
    166e:	44 0f       	add	r20, r20
    1670:	55 1f       	adc	r21, r21
    1672:	42 1b       	sub	r20, r18
    1674:	53 0b       	sbc	r21, r19
    1676:	4e 0f       	add	r20, r30
    1678:	5f 1f       	adc	r21, r31
    167a:	55 95       	asr	r21
    167c:	47 95       	ror	r20
    167e:	55 95       	asr	r21
    1680:	47 95       	ror	r20
    1682:	55 95       	asr	r21
    1684:	47 95       	ror	r20
    1686:	55 95       	asr	r21
    1688:	47 95       	ror	r20
    168a:	47 70       	andi	r20, 0x07	; 7
	octave_index.vco1 = vco1_lookup[bit_index];	
    168c:	fe 01       	movw	r30, r28
    168e:	e4 0f       	add	r30, r20
    1690:	f1 1d       	adc	r31, r1
    1692:	24 a5       	lds	r18, 0x64
    1694:	20 93 08 03 	sts	0x0308, r18
	
	uint8_t vco2_lookup[] = {7, 4, 5, 3, 6, 2, 1, 0}; 
    1698:	de 01       	movw	r26, r28
    169a:	d4 96       	adiw	r26, 0x34	; 52
    169c:	e7 e0       	ldi	r30, 0x07	; 7
    169e:	f2 e0       	ldi	r31, 0x02	; 2
    16a0:	28 e0       	ldi	r18, 0x08	; 8
    16a2:	01 90       	ld	r0, Z+
    16a4:	0d 92       	st	X+, r0
    16a6:	21 50       	subi	r18, 0x01	; 1
    16a8:	e1 f7       	brne	.-8      	; 0x16a2 <load_patch+0x414>
																																				 //bit order 4   3    2    1   0
	uint8_t vco2_bitfield = ((current_patch.byte_4 & 0b11100000) >> 3) | (current_patch.byte_3 & 0b00000011); //combine  all VCO2 octave bits into one byte: 8', 16', 32', 4', 2'
    16aa:	29 2f       	mov	r18, r25
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	20 7e       	andi	r18, 0xE0	; 224
    16b0:	30 70       	andi	r19, 0x00	; 0
    16b2:	35 95       	asr	r19
    16b4:	27 95       	ror	r18
    16b6:	35 95       	asr	r19
    16b8:	27 95       	ror	r18
    16ba:	35 95       	asr	r19
    16bc:	27 95       	ror	r18
    16be:	83 70       	andi	r24, 0x03	; 3
    16c0:	28 2b       	or	r18, r24
	bit_index = ((vco2_bitfield*0x1D) >> 4) & 0x7;																								     //index 2   1    0    3   4
    16c2:	42 2f       	mov	r20, r18
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	ca 01       	movw	r24, r20
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	9c 01       	movw	r18, r24
    16d2:	22 0f       	add	r18, r18
    16d4:	33 1f       	adc	r19, r19
    16d6:	22 0f       	add	r18, r18
    16d8:	33 1f       	adc	r19, r19
    16da:	22 0f       	add	r18, r18
    16dc:	33 1f       	adc	r19, r19
    16de:	28 1b       	sub	r18, r24
    16e0:	39 0b       	sbc	r19, r25
    16e2:	42 0f       	add	r20, r18
    16e4:	53 1f       	adc	r21, r19
    16e6:	ca 01       	movw	r24, r20
    16e8:	95 95       	asr	r25
    16ea:	87 95       	ror	r24
    16ec:	95 95       	asr	r25
    16ee:	87 95       	ror	r24
    16f0:	95 95       	asr	r25
    16f2:	87 95       	ror	r24
    16f4:	95 95       	asr	r25
    16f6:	87 95       	ror	r24
    16f8:	87 70       	andi	r24, 0x07	; 7
	octave_index.vco2 = vco2_lookup[bit_index];
    16fa:	fe 01       	movw	r30, r28
    16fc:	e8 0f       	add	r30, r24
    16fe:	f1 1d       	adc	r31, r1
    1700:	84 a9       	sts	0x44, r24
    1702:	80 93 09 03 	sts	0x0309, r24
	
	uint8_t lfo_lookup[] = {0, 0, 2, 2, 1, 3, 3, 1}; //bits 7, 5, 4, 6 are irrelevant here. Complier seems to be reformatting this table???
    1706:	de 01       	movw	r26, r28
    1708:	dc 96       	adiw	r26, 0x3c	; 60
    170a:	ef e0       	ldi	r30, 0x0F	; 15
    170c:	f2 e0       	ldi	r31, 0x02	; 2
    170e:	88 e0       	ldi	r24, 0x08	; 8
    1710:	01 90       	ld	r0, Z+
    1712:	0d 92       	st	X+, r0
    1714:	81 50       	subi	r24, 0x01	; 1
    1716:	e1 f7       	brne	.-8      	; 0x1710 <load_patch+0x482>
	uint8_t lfo_bitfield = current_patch.byte_2 & 0b11110000; //shave off 4 LSBs. Really could use 4 bit De Bruijn sequence here
    1718:	60 7f       	andi	r22, 0xF0	; 240
	bit_index = ((lfo_bitfield*0x1D) >> 4) & 0x7;
    171a:	46 2f       	mov	r20, r22
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	ca 01       	movw	r24, r20
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	9c 01       	movw	r18, r24
    172a:	22 0f       	add	r18, r18
    172c:	33 1f       	adc	r19, r19
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	22 0f       	add	r18, r18
    1734:	33 1f       	adc	r19, r19
    1736:	28 1b       	sub	r18, r24
    1738:	39 0b       	sbc	r19, r25
    173a:	42 0f       	add	r20, r18
    173c:	53 1f       	adc	r21, r19
    173e:	ca 01       	movw	r24, r20
    1740:	95 95       	asr	r25
    1742:	87 95       	ror	r24
    1744:	95 95       	asr	r25
    1746:	87 95       	ror	r24
    1748:	95 95       	asr	r25
    174a:	87 95       	ror	r24
    174c:	95 95       	asr	r25
    174e:	87 95       	ror	r24
    1750:	87 70       	andi	r24, 0x07	; 7
	lfo_shape_index = lfo_lookup[bit_index];
    1752:	fe 01       	movw	r30, r28
    1754:	e8 0f       	add	r30, r24
    1756:	f1 1d       	adc	r31, r1
    1758:	84 ad       	sts	0x64, r24
    175a:	80 93 0a 03 	sts	0x030A, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    175e:	21 2f       	mov	r18, r17
    1760:	26 95       	lsr	r18
    1762:	27 95       	ror	r18
    1764:	22 27       	eor	r18, r18
    1766:	27 95       	ror	r18
    1768:	81 2f       	mov	r24, r17
    176a:	81 70       	andi	r24, 0x01	; 1
    176c:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
    176e:	81 2f       	mov	r24, r17
    1770:	86 95       	lsr	r24
    1772:	86 95       	lsr	r24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	81 70       	andi	r24, 0x01	; 1
    1778:	90 70       	andi	r25, 0x00	; 0
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1782:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
    1784:	81 2f       	mov	r24, r17
    1786:	86 95       	lsr	r24
    1788:	86 95       	lsr	r24
    178a:	86 95       	lsr	r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	81 70       	andi	r24, 0x01	; 1
    1790:	90 70       	andi	r25, 0x00	; 0
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    1796:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
    1798:	81 2f       	mov	r24, r17
    179a:	82 95       	swap	r24
    179c:	8f 70       	andi	r24, 0x0F	; 15
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	81 70       	andi	r24, 0x01	; 1
    17a2:	90 70       	andi	r25, 0x00	; 0
    17a4:	82 95       	swap	r24
    17a6:	92 95       	swap	r25
    17a8:	90 7f       	andi	r25, 0xF0	; 240
    17aa:	98 27       	eor	r25, r24
    17ac:	80 7f       	andi	r24, 0xF0	; 240
    17ae:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17b0:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
    17b2:	81 2f       	mov	r24, r17
    17b4:	82 95       	swap	r24
    17b6:	86 95       	lsr	r24
    17b8:	87 70       	andi	r24, 0x07	; 7
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	81 70       	andi	r24, 0x01	; 1
    17be:	90 70       	andi	r25, 0x00	; 0
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	82 95       	swap	r24
    17c6:	92 95       	swap	r25
    17c8:	90 7f       	andi	r25, 0xF0	; 240
    17ca:	98 27       	eor	r25, r24
    17cc:	80 7f       	andi	r24, 0xF0	; 240
    17ce:	98 27       	eor	r25, r24
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17d0:	28 2b       	or	r18, r24
							((current_patch.byte_5 >> VCO1_SAW) & 1) << VCO1_SAW_SW |
							((current_patch.byte_5 >> VCO1_TRI) & 1) << VCO1_TRI_SW |
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
    17d2:	81 2f       	mov	r24, r17
    17d4:	82 95       	swap	r24
    17d6:	86 95       	lsr	r24
    17d8:	86 95       	lsr	r24
    17da:	83 70       	andi	r24, 0x03	; 3
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	90 70       	andi	r25, 0x00	; 0
    17e2:	00 24       	eor	r0, r0
    17e4:	96 95       	lsr	r25
    17e6:	87 95       	ror	r24
    17e8:	07 94       	ror	r0
    17ea:	96 95       	lsr	r25
    17ec:	87 95       	ror	r24
    17ee:	07 94       	ror	r0
    17f0:	98 2f       	mov	r25, r24
    17f2:	80 2d       	mov	r24, r0
	//lfo_shape_index = 0; //reset lfo bytes
	//current_patch.byte_2 = (1<<LFO_TRI);
	
	//set toggle switch bits according to patch data
	//probably need to handle previous switch states here, which are in spi.c
	switch_states.byte0 =	((current_patch.byte_5 >> VCO_SYNC) & 1) << VCO_SYNC_SW |
    17f4:	82 2b       	or	r24, r18
    17f6:	80 93 7d 03 	sts	0x037D, r24
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
							((current_patch.byte_1 >> EG2_INV) & 1) << EG2_INV_SW;	
    17fa:	87 2f       	mov	r24, r23
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	81 70       	andi	r24, 0x01	; 1
    1800:	90 70       	andi	r25, 0x00	; 0
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
							((current_patch.byte_5 >> VCO1_PULSE) & 1) << VCO1_PULSE_SW |
							((current_patch.byte_5 >> VCO2_SAW) & 1) << VCO2_SAW_SW |
							((current_patch.byte_5 >> VCO2_TRI) & 1) << VCO2_TRI_SW |
							((current_patch.byte_5 >> VCO2_PULSE) & 1) << VCO2_PULSE_SW;
							
	switch_states.byte2 &= 0b11110011; //preserve PROG switches states, clear BMOD and EG2 states
    180e:	90 91 7f 03 	lds	r25, 0x037F
    1812:	93 7f       	andi	r25, 0xF3	; 243
	
	switch_states.byte2 |=	((current_patch.byte_5 >> BMOD) & 1) << BMOD_SW |
    1814:	89 2b       	or	r24, r25
    1816:	11 1f       	adc	r17, r17
    1818:	11 27       	eor	r17, r17
    181a:	11 1f       	adc	r17, r17
    181c:	11 0f       	add	r17, r17
    181e:	11 0f       	add	r17, r17
    1820:	81 2b       	or	r24, r17
    1822:	80 93 7f 03 	sts	0x037F, r24
													
	//spi_sw_byte0_current_state = spi_sw_byte0_previous_state = switch_states.byte0;
	//
	//spi_sw_byte1_current_state = spi_sw_byte1_previous_state = switch_states.byte1;						
			
	lock_pots();
    1826:	0e 94 29 07 	call	0xe52	; 0xe52 <lock_pots>
	
	//if (current_patch.mode == MANUAL) switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //if in MANUAL mode, turn off MANUAL LED
	switch_states.byte2 &= ~(1<<PROG_MANUAL_SW);
    182a:	80 91 7f 03 	lds	r24, 0x037F
    182e:	8f 77       	andi	r24, 0x7F	; 127
    1830:	80 93 7f 03 	sts	0x037F, r24
	
	current_patch.mode = MEMORY;
    1834:	10 92 07 03 	sts	0x0307, r1
	
}
    1838:	cd 5b       	subi	r28, 0xBD	; 189
    183a:	df 4f       	sbci	r29, 0xFF	; 255
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	08 95       	ret

0000184e <transpose_note>:

uint8_t transpose_note (uint8_t note, uint8_t vco) {
	
	uint8_t n = 0;
	
	n = octave_index.vco1;
    184e:	90 91 08 03 	lds	r25, 0x0308
	if (vco == VCO2) n = octave_index.vco2;
    1852:	60 3f       	cpi	r22, 0xF0	; 240
    1854:	11 f4       	brne	.+4      	; 0x185a <transpose_note+0xc>
    1856:	90 91 09 03 	lds	r25, 0x0309

	note = (n*12) + note; //calculate MIDI note after octave addition
    185a:	29 2f       	mov	r18, r25
    185c:	22 0f       	add	r18, r18
    185e:	92 0f       	add	r25, r18
    1860:	99 0f       	add	r25, r25
    1862:	99 0f       	add	r25, r25
    1864:	89 0f       	add	r24, r25
			
		note = 136;
			
	}
		
	return note;	
    1866:	89 38       	cpi	r24, 0x89	; 137
    1868:	08 f0       	brcs	.+2      	; 0x186c <transpose_note+0x1e>
    186a:	88 e8       	ldi	r24, 0x88	; 136
	
}
    186c:	08 95       	ret

0000186e <update_octave_range>:

void update_octave_range(void) {
	
	if ((switch_states.byte0 >> VCO1_OCTAVE_UP_SW) & 1) {
    186e:	80 91 7d 03 	lds	r24, 0x037D
    1872:	98 2f       	mov	r25, r24
    1874:	96 95       	lsr	r25
    1876:	96 95       	lsr	r25
    1878:	96 95       	lsr	r25
    187a:	90 ff       	sbrs	r25, 0
    187c:	0e c0       	rjmp	.+28     	; 0x189a <update_octave_range+0x2c>
		
		if (++octave_index.vco1 == 5) octave_index.vco1 = 4;
    187e:	90 91 08 03 	lds	r25, 0x0308
    1882:	9f 5f       	subi	r25, 0xFF	; 255
    1884:	90 93 08 03 	sts	0x0308, r25
    1888:	95 30       	cpi	r25, 0x05	; 5
    188a:	19 f4       	brne	.+6      	; 0x1892 <update_octave_range+0x24>
    188c:	94 e0       	ldi	r25, 0x04	; 4
    188e:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte0 ^= (1<<VCO1_OCTAVE_UP_SW); //toggle switch state bit
    1892:	98 e0       	ldi	r25, 0x08	; 8
    1894:	89 27       	eor	r24, r25
    1896:	80 93 7d 03 	sts	0x037D, r24
		
	}
	
	if ((switch_states.byte1 >> VCO1_OCTAVE_DOWN_SW) & 1) { //this didn't work initially because VCO1_OCTAVE_DOWN_SW pull down resistor wasn't installed on PCB!!!
    189a:	80 91 7e 03 	lds	r24, 0x037E
    189e:	98 2f       	mov	r25, r24
    18a0:	96 95       	lsr	r25
    18a2:	96 95       	lsr	r25
    18a4:	96 95       	lsr	r25
    18a6:	90 ff       	sbrs	r25, 0
    18a8:	0b c0       	rjmp	.+22     	; 0x18c0 <update_octave_range+0x52>
	
		if (octave_index.vco1 == 0) {} else {octave_index.vco1--;}
    18aa:	90 91 08 03 	lds	r25, 0x0308
    18ae:	99 23       	and	r25, r25
    18b0:	19 f0       	breq	.+6      	; 0x18b8 <update_octave_range+0x4a>
    18b2:	91 50       	subi	r25, 0x01	; 1
    18b4:	90 93 08 03 	sts	0x0308, r25
		switch_states.byte1 ^= (1<<VCO1_OCTAVE_DOWN_SW);
    18b8:	98 e0       	ldi	r25, 0x08	; 8
    18ba:	89 27       	eor	r24, r25
    18bc:	80 93 7e 03 	sts	0x037E, r24

	}
	
	current_patch.byte_4 = 0; //clear the whole damn byte as all bits are set below
	current_patch.byte_4 |= (1<<vco1_octave[octave_index.vco1]); //set octave	
    18c0:	80 91 08 03 	lds	r24, 0x0308
    18c4:	e1 e2       	ldi	r30, 0x21	; 33
    18c6:	f2 e0       	ldi	r31, 0x02	; 2
    18c8:	e8 0f       	add	r30, r24
    18ca:	f1 1d       	adc	r31, r1
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	00 80       	ld	r0, Z
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <update_octave_range+0x6a>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <update_octave_range+0x66>
    18dc:	58 2f       	mov	r21, r24
    18de:	80 93 01 03 	sts	0x0301, r24
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_UP_SW) & 1) {
    18e2:	90 91 7e 03 	lds	r25, 0x037E
    18e6:	29 2f       	mov	r18, r25
    18e8:	26 95       	lsr	r18
    18ea:	26 95       	lsr	r18
    18ec:	20 ff       	sbrs	r18, 0
    18ee:	0e c0       	rjmp	.+28     	; 0x190c <update_octave_range+0x9e>
		
		if (++octave_index.vco2 == 5) octave_index.vco2 = 4;
    18f0:	80 91 09 03 	lds	r24, 0x0309
    18f4:	8f 5f       	subi	r24, 0xFF	; 255
    18f6:	80 93 09 03 	sts	0x0309, r24
    18fa:	85 30       	cpi	r24, 0x05	; 5
    18fc:	19 f4       	brne	.+6      	; 0x1904 <update_octave_range+0x96>
    18fe:	84 e0       	ldi	r24, 0x04	; 4
    1900:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_UP_SW); //toggle switch state bit		
    1904:	84 e0       	ldi	r24, 0x04	; 4
    1906:	98 27       	eor	r25, r24
    1908:	90 93 7e 03 	sts	0x037E, r25
	}	
	
	if ((switch_states.byte1 >> VCO2_OCTAVE_DOWN_SW) & 1) {
    190c:	90 91 7e 03 	lds	r25, 0x037E
    1910:	29 2f       	mov	r18, r25
    1912:	26 95       	lsr	r18
    1914:	20 ff       	sbrs	r18, 0
    1916:	0b c0       	rjmp	.+22     	; 0x192e <update_octave_range+0xc0>
		
		if (octave_index.vco2 == 0) {} else {octave_index.vco2--;}
    1918:	80 91 09 03 	lds	r24, 0x0309
    191c:	88 23       	and	r24, r24
    191e:	19 f0       	breq	.+6      	; 0x1926 <update_octave_range+0xb8>
    1920:	81 50       	subi	r24, 0x01	; 1
    1922:	80 93 09 03 	sts	0x0309, r24
		switch_states.byte1 ^= (1<<VCO2_OCTAVE_DOWN_SW);
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	98 27       	eor	r25, r24
    192a:	90 93 7e 03 	sts	0x037E, r25
		
	}
			
	current_patch.byte_3 &= 0b11111100; //clear bottom 2 bits for patch byte_3, which are for VCO2 2' and 4'
    192e:	40 91 00 03 	lds	r20, 0x0300
    1932:	4c 7f       	andi	r20, 0xFC	; 252
    1934:	40 93 00 03 	sts	0x0300, r20
	
	if (octave_index.vco2 > 2) { //VCO2 2' and 4' LEDs are on LED latch 3
    1938:	90 91 09 03 	lds	r25, 0x0309
    193c:	93 30       	cpi	r25, 0x03	; 3
    193e:	88 f0       	brcs	.+34     	; 0x1962 <update_octave_range+0xf4>

						
		current_patch.byte_3 |= (1<<vco2_octave[octave_index.vco2]);	
    1940:	ec e1       	ldi	r30, 0x1C	; 28
    1942:	f2 e0       	ldi	r31, 0x02	; 2
    1944:	e9 0f       	add	r30, r25
    1946:	f1 1d       	adc	r31, r1
    1948:	21 e0       	ldi	r18, 0x01	; 1
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	c9 01       	movw	r24, r18
    194e:	00 80       	ld	r0, Z
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <update_octave_range+0xe8>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <update_octave_range+0xe4>
    195a:	84 2b       	or	r24, r20
    195c:	80 93 00 03 	sts	0x0300, r24
    1960:	08 95       	ret
				
	} else { //VCO2 8', 16' and 32' are on LED latch 4
		
		current_patch.byte_4 |= (1<<vco2_octave[octave_index.vco2]); //set octave
    1962:	ec e1       	ldi	r30, 0x1C	; 28
    1964:	f2 e0       	ldi	r31, 0x02	; 2
    1966:	e9 0f       	add	r30, r25
    1968:	f1 1d       	adc	r31, r1
    196a:	21 e0       	ldi	r18, 0x01	; 1
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	c9 01       	movw	r24, r18
    1970:	00 80       	ld	r0, Z
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <update_octave_range+0x10a>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <update_octave_range+0x106>
    197c:	85 2b       	or	r24, r21
    197e:	80 93 01 03 	sts	0x0301, r24
    1982:	08 95       	ret

00001984 <update_lfo_shape>:
	
}	
	
void update_lfo_shape(void) {

	if ((switch_states.byte1 >> LFO_SHAPE_SW) & 1) {
    1984:	80 91 7e 03 	lds	r24, 0x037E
    1988:	88 23       	and	r24, r24
    198a:	64 f4       	brge	.+24     	; 0x19a4 <update_lfo_shape+0x20>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
    198c:	80 58       	subi	r24, 0x80	; 128
    198e:	80 93 7e 03 	sts	0x037E, r24
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
    1992:	80 91 0a 03 	lds	r24, 0x030A
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	80 93 0a 03 	sts	0x030A, r24
    199c:	85 30       	cpi	r24, 0x05	; 5
    199e:	11 f4       	brne	.+4      	; 0x19a4 <update_lfo_shape+0x20>
    19a0:	10 92 0a 03 	sts	0x030A, r1
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    19a4:	e0 91 0a 03 	lds	r30, 0x030A
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	ee 0f       	add	r30, r30
    19ac:	ff 1f       	adc	r31, r31
    19ae:	ea 5d       	subi	r30, 0xDA	; 218
    19b0:	fd 4f       	sbci	r31, 0xFD	; 253
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	01 80       	ldd	r0, Z+1	; 0x01
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <update_lfo_shape+0x3a>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	0a 94       	dec	r0
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <update_lfo_shape+0x36>
	
		switch_states.byte1 ^= (1<<LFO_SHAPE_SW); //toggle switch state
		if (++lfo_shape_index == 5) lfo_shape_index = 0;
	}
	
	current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    19c2:	90 91 ff 02 	lds	r25, 0x02FF
    19c6:	9f 70       	andi	r25, 0x0F	; 15
	current_patch.byte_2 |= 1 << lfo[lfo_shape_index].led_addr;
    19c8:	89 2b       	or	r24, r25
    19ca:	80 93 ff 02 	sts	0x02FF, r24
	DATA_BUS = lfo[lfo_shape_index].waveform_addr;
    19ce:	80 81       	ld	r24, Z
    19d0:	82 b9       	out	0x02, r24	; 2
	LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    19d2:	ed ed       	ldi	r30, 0xDD	; 221
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	80 62       	ori	r24, 0x20	; 32
    19da:	80 83       	st	Z, r24
	LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    19dc:	80 81       	ld	r24, Z
    19de:	8f 7d       	andi	r24, 0xDF	; 223
    19e0:	80 83       	st	Z, r24
	
}		
    19e2:	08 95       	ret

000019e4 <update_lfo_sync>:
	
void update_lfo_sync(void) {
	
	static uint8_t lfo_sync_mode = 0;
	
	if ((switch_states.byte1 >> LFO_SYNC_SW) & 1) {
    19e4:	80 91 7e 03 	lds	r24, 0x037E
    19e8:	80 ff       	sbrs	r24, 0
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <update_lfo_sync+0x26>
			
		switch_states.byte1 ^= (1<<LFO_SYNC_SW); //toggle switch state
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	89 27       	eor	r24, r25
    19f0:	80 93 7e 03 	sts	0x037E, r24
		if (++lfo_sync_mode == 5) lfo_sync_mode = 0;
    19f4:	80 91 0b 03 	lds	r24, 0x030B
    19f8:	8f 5f       	subi	r24, 0xFF	; 255
    19fa:	80 93 0b 03 	sts	0x030B, r24
    19fe:	85 30       	cpi	r24, 0x05	; 5
    1a00:	11 f4       	brne	.+4      	; 0x1a06 <update_lfo_sync+0x22>
    1a02:	10 92 0b 03 	sts	0x030B, r1
		midi_clock.ppqn_counter = 0; //reset counter
    1a06:	10 92 8a 03 	sts	0x038A, r1
	}
	
	current_patch.byte_2 &= 0b11110000; //clear bottom 4 bits
    1a0a:	60 91 ff 02 	lds	r22, 0x02FF
    1a0e:	60 7f       	andi	r22, 0xF0	; 240
    1a10:	60 93 ff 02 	sts	0x02FF, r22
	if (lfo_sync_mode) current_patch.byte_2 |= (1<<(lfo_sync_mode -1)); //this allows an off state when lfo_sync_mode = 0;
    1a14:	20 91 0b 03 	lds	r18, 0x030B
    1a18:	22 23       	and	r18, r18
    1a1a:	71 f0       	breq	.+28     	; 0x1a38 <update_lfo_sync+0x54>
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	21 50       	subi	r18, 0x01	; 1
    1a20:	30 40       	sbci	r19, 0x00	; 0
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	ca 01       	movw	r24, r20
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <update_lfo_sync+0x4a>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	2a 95       	dec	r18
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <update_lfo_sync+0x46>
    1a32:	86 2b       	or	r24, r22
    1a34:	80 93 ff 02 	sts	0x02FF, r24
	
	//now parse out clock divide from patch byte_2
	switch (current_patch.byte_2 & 0b00001111) {
    1a38:	80 91 ff 02 	lds	r24, 0x02FF
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	8f 70       	andi	r24, 0x0F	; 15
    1a40:	90 70       	andi	r25, 0x00	; 0
    1a42:	82 30       	cpi	r24, 0x02	; 2
    1a44:	91 05       	cpc	r25, r1
    1a46:	89 f0       	breq	.+34     	; 0x1a6a <update_lfo_sync+0x86>
    1a48:	83 30       	cpi	r24, 0x03	; 3
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	24 f4       	brge	.+8      	; 0x1a56 <update_lfo_sync+0x72>
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	91 05       	cpc	r25, r1
    1a52:	b9 f4       	brne	.+46     	; 0x1a82 <update_lfo_sync+0x9e>
    1a54:	07 c0       	rjmp	.+14     	; 0x1a64 <update_lfo_sync+0x80>
    1a56:	84 30       	cpi	r24, 0x04	; 4
    1a58:	91 05       	cpc	r25, r1
    1a5a:	59 f0       	breq	.+22     	; 0x1a72 <update_lfo_sync+0x8e>
    1a5c:	88 30       	cpi	r24, 0x08	; 8
    1a5e:	91 05       	cpc	r25, r1
    1a60:	81 f4       	brne	.+32     	; 0x1a82 <update_lfo_sync+0x9e>
    1a62:	0b c0       	rjmp	.+22     	; 0x1a7a <update_lfo_sync+0x96>
		
		case 0b0001:
			midi_clock.divider = 0; //key sync mode - need to turn midi sync off here. How?
    1a64:	10 92 89 03 	sts	0x0389, r1
			
			break;
    1a68:	08 95       	ret
			
		case 0b0010: //turn these case conditions into constants. #define 0b0010 DIV_24
			midi_clock.divider = 24; //1:4
    1a6a:	88 e1       	ldi	r24, 0x18	; 24
    1a6c:	80 93 89 03 	sts	0x0389, r24
			break;
    1a70:	08 95       	ret
			
		case 0b0100:
			midi_clock.divider = 12; //1:8
    1a72:	8c e0       	ldi	r24, 0x0C	; 12
    1a74:	80 93 89 03 	sts	0x0389, r24
			break;
    1a78:	08 95       	ret
			
		case 0b1000:
			midi_clock.divider = 6; //1:16	 		
    1a7a:	86 e0       	ldi	r24, 0x06	; 6
    1a7c:	80 93 89 03 	sts	0x0389, r24
			break;
    1a80:	08 95       	ret
		
		default:
			midi_clock.divider = 0; //need to turn midi sync off here. How?
    1a82:	10 92 89 03 	sts	0x0389, r1
    1a86:	08 95       	ret

00001a88 <update_arp_sync>:

void update_arp_sync(void) {
	
	static uint8_t arp_sync_mode = 0;
	
	if ((switch_states.byte1 >> ARP_SYNC_SW) & 1) {
    1a88:	80 91 7e 03 	lds	r24, 0x037E
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	92 95       	swap	r25
    1a90:	96 95       	lsr	r25
    1a92:	96 95       	lsr	r25
    1a94:	93 70       	andi	r25, 0x03	; 3
    1a96:	90 ff       	sbrs	r25, 0
    1a98:	0f c0       	rjmp	.+30     	; 0x1ab8 <update_arp_sync+0x30>
		
		switch_states.byte1 ^= (1<<ARP_SYNC_SW); //toggle switch state
    1a9a:	90 e4       	ldi	r25, 0x40	; 64
    1a9c:	89 27       	eor	r24, r25
    1a9e:	80 93 7e 03 	sts	0x037E, r24
		if (++arp_sync_mode == 5) arp_sync_mode = 0;
    1aa2:	80 91 0c 03 	lds	r24, 0x030C
    1aa6:	8f 5f       	subi	r24, 0xFF	; 255
    1aa8:	80 93 0c 03 	sts	0x030C, r24
    1aac:	85 30       	cpi	r24, 0x05	; 5
    1aae:	11 f4       	brne	.+4      	; 0x1ab4 <update_arp_sync+0x2c>
    1ab0:	10 92 0c 03 	sts	0x030C, r1
		system_clock.ppqn_counter = 0; //reset counter
    1ab4:	10 92 84 03 	sts	0x0384, r1
	}
	
	current_patch.byte_3 &= 0b11000011; //clear middle 4 bits
    1ab8:	60 91 00 03 	lds	r22, 0x0300
    1abc:	63 7c       	andi	r22, 0xC3	; 195
    1abe:	60 93 00 03 	sts	0x0300, r22
	if (arp_sync_mode) current_patch.byte_3 |= 1<<(arp_sync_mode + 1); //this allows an off state when arp_sync_mode = 0. Is that what's really needed?
    1ac2:	20 91 0c 03 	lds	r18, 0x030C
    1ac6:	22 23       	and	r18, r18
    1ac8:	71 f0       	breq	.+28     	; 0x1ae6 <update_arp_sync+0x5e>
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	2f 5f       	subi	r18, 0xFF	; 255
    1ace:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	ca 01       	movw	r24, r20
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <update_arp_sync+0x54>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	2a 95       	dec	r18
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <update_arp_sync+0x50>
    1ae0:	86 2b       	or	r24, r22
    1ae2:	80 93 00 03 	sts	0x0300, r24
	
	switch (current_patch.byte_3 & 0b00111100) {
    1ae6:	80 91 00 03 	lds	r24, 0x0300
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	8c 73       	andi	r24, 0x3C	; 60
    1aee:	90 70       	andi	r25, 0x00	; 0
    1af0:	88 30       	cpi	r24, 0x08	; 8
    1af2:	91 05       	cpc	r25, r1
    1af4:	91 f0       	breq	.+36     	; 0x1b1a <update_arp_sync+0x92>
    1af6:	89 30       	cpi	r24, 0x09	; 9
    1af8:	91 05       	cpc	r25, r1
    1afa:	24 f4       	brge	.+8      	; 0x1b04 <update_arp_sync+0x7c>
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	91 05       	cpc	r25, r1
    1b00:	c1 f4       	brne	.+48     	; 0x1b32 <update_arp_sync+0xaa>
    1b02:	07 c0       	rjmp	.+14     	; 0x1b12 <update_arp_sync+0x8a>
    1b04:	80 31       	cpi	r24, 0x10	; 16
    1b06:	91 05       	cpc	r25, r1
    1b08:	61 f0       	breq	.+24     	; 0x1b22 <update_arp_sync+0x9a>
    1b0a:	80 32       	cpi	r24, 0x20	; 32
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	89 f4       	brne	.+34     	; 0x1b32 <update_arp_sync+0xaa>
    1b10:	0c c0       	rjmp	.+24     	; 0x1b2a <update_arp_sync+0xa2>
			
		case 0b00000100:
			system_clock.divider = 48; //1:2
    1b12:	80 e3       	ldi	r24, 0x30	; 48
    1b14:	80 93 83 03 	sts	0x0383, r24
			break;
    1b18:	08 95       	ret
			
		case 0b00001000:
			system_clock.divider = 24; //1:4
    1b1a:	88 e1       	ldi	r24, 0x18	; 24
    1b1c:	80 93 83 03 	sts	0x0383, r24
			break;
    1b20:	08 95       	ret
			
		case 0b00010000:		
			system_clock.divider = 12; //1:8
    1b22:	8c e0       	ldi	r24, 0x0C	; 12
    1b24:	80 93 83 03 	sts	0x0383, r24
			break;
    1b28:	08 95       	ret
			
		case 0b00100000:
			system_clock.divider = 6; //1:16	
    1b2a:	86 e0       	ldi	r24, 0x06	; 6
    1b2c:	80 93 83 03 	sts	0x0383, r24
			break;
    1b30:	08 95       	ret
			
		default:
			system_clock.divider = 2; //should be 1 but this never turns arp_sync_led off - need to fix this	
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	80 93 83 03 	sts	0x0383, r24
    1b38:	08 95       	ret

00001b3a <update_arp_range>:

void update_arp_range(void) {
	
	static uint8_t arp_range = 0;
	
	if ((switch_states.byte1 == (1<<ARP_RANGE_SW)) & 1) {
    1b3a:	80 91 7e 03 	lds	r24, 0x037E
    1b3e:	80 31       	cpi	r24, 0x10	; 16
    1b40:	59 f4       	brne	.+22     	; 0x1b58 <update_arp_range+0x1e>
		
		switch_states.byte1 ^= (1<<ARP_RANGE_SW); //toggle switch bit
    1b42:	10 92 7e 03 	sts	0x037E, r1
		
		if (++arp_range == 4) arp_range = 0;
    1b46:	80 91 0d 03 	lds	r24, 0x030D
    1b4a:	8f 5f       	subi	r24, 0xFF	; 255
    1b4c:	80 93 0d 03 	sts	0x030D, r24
    1b50:	84 30       	cpi	r24, 0x04	; 4
    1b52:	11 f4       	brne	.+4      	; 0x1b58 <update_arp_range+0x1e>
    1b54:	10 92 0d 03 	sts	0x030D, r1
						
	}
	
	//arp range LEDs 3 and 2 are in byte_3, bits 7 and 6, respectively. arp range LED 1 is bit 1 of byte_1
	
	current_patch.byte_1 &= ~(1<<ARP_RANGE_1); //clear arp range 1 LED
    1b58:	20 91 fe 02 	lds	r18, 0x02FE
    1b5c:	2d 7f       	andi	r18, 0xFD	; 253
    1b5e:	20 93 fe 02 	sts	0x02FE, r18
	current_patch.byte_3 &= 0b00111111; //clear bits 6 and7, arp range 3 and 2
    1b62:	90 91 00 03 	lds	r25, 0x0300
    1b66:	9f 73       	andi	r25, 0x3F	; 63
    1b68:	90 93 00 03 	sts	0x0300, r25
	
	switch (arp_range) { //this just updates LEDs. no struct to handle arp range yet
    1b6c:	80 91 0d 03 	lds	r24, 0x030D
    1b70:	82 30       	cpi	r24, 0x02	; 2
    1b72:	41 f0       	breq	.+16     	; 0x1b84 <update_arp_range+0x4a>
    1b74:	83 30       	cpi	r24, 0x03	; 3
    1b76:	51 f0       	breq	.+20     	; 0x1b8c <update_arp_range+0x52>
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	59 f4       	brne	.+22     	; 0x1b92 <update_arp_range+0x58>
			
			break;
			
		case 1:
		
			current_patch.byte_1 |= (1<<ARP_RANGE_1); //set range 1 LED. LED was in the wrong way!
    1b7c:	22 60       	ori	r18, 0x02	; 2
    1b7e:	20 93 fe 02 	sts	0x02FE, r18
			break;
    1b82:	08 95       	ret
			
		case 2:
		
			current_patch.byte_3 |= (1<<ARP_RANGE_2);		
    1b84:	90 64       	ori	r25, 0x40	; 64
    1b86:	90 93 00 03 	sts	0x0300, r25
			break;
    1b8a:	08 95       	ret
			
			
		case 3: 
			
			current_patch.byte_3 |= (1<<ARP_RANGE_3);
    1b8c:	90 68       	ori	r25, 0x80	; 128
    1b8e:	90 93 00 03 	sts	0x0300, r25
    1b92:	08 95       	ret

00001b94 <update_arp_mode>:

	



}
    1b94:	08 95       	ret

00001b96 <update_patch>:
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1b96:	90 91 7d 03 	lds	r25, 0x037D
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
							((switch_states.byte2 >> BMOD_SW) & 1) << BMOD;
    1b9a:	80 91 7f 03 	lds	r24, 0x037F
    1b9e:	86 95       	lsr	r24
    1ba0:	86 95       	lsr	r24
    1ba2:	68 2f       	mov	r22, r24
    1ba4:	67 95       	ror	r22
    1ba6:	66 27       	eor	r22, r22
    1ba8:	67 95       	ror	r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1baa:	29 2f       	mov	r18, r25
    1bac:	21 70       	andi	r18, 0x01	; 1
    1bae:	26 2b       	or	r18, r22
    1bb0:	69 2f       	mov	r22, r25
    1bb2:	66 1f       	adc	r22, r22
    1bb4:	66 27       	eor	r22, r22
    1bb6:	66 1f       	adc	r22, r22
    1bb8:	66 0f       	add	r22, r22
    1bba:	62 2b       	or	r22, r18
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
    1bbc:	29 2f       	mov	r18, r25
    1bbe:	26 95       	lsr	r18
    1bc0:	26 95       	lsr	r18
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	21 70       	andi	r18, 0x01	; 1
    1bc6:	30 70       	andi	r19, 0x00	; 0
    1bc8:	d9 01       	movw	r26, r18
    1bca:	aa 0f       	add	r26, r26
    1bcc:	bb 1f       	adc	r27, r27
    1bce:	aa 0f       	add	r26, r26
    1bd0:	bb 1f       	adc	r27, r27
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1bd2:	6a 2b       	or	r22, r26
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
    1bd4:	a9 2f       	mov	r26, r25
    1bd6:	a6 95       	lsr	r26
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	a1 70       	andi	r26, 0x01	; 1
    1bdc:	b0 70       	andi	r27, 0x00	; 0
    1bde:	fd 01       	movw	r30, r26
    1be0:	ee 0f       	add	r30, r30
    1be2:	ff 1f       	adc	r31, r31
    1be4:	ee 0f       	add	r30, r30
    1be6:	ff 1f       	adc	r31, r31
    1be8:	ee 0f       	add	r30, r30
    1bea:	ff 1f       	adc	r31, r31
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1bec:	a6 2f       	mov	r26, r22
    1bee:	ae 2b       	or	r26, r30
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
    1bf0:	e9 2f       	mov	r30, r25
    1bf2:	e2 95       	swap	r30
    1bf4:	ef 70       	andi	r30, 0x0F	; 15
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	e1 70       	andi	r30, 0x01	; 1
    1bfa:	f0 70       	andi	r31, 0x00	; 0
    1bfc:	bf 01       	movw	r22, r30
    1bfe:	62 95       	swap	r22
    1c00:	72 95       	swap	r23
    1c02:	70 7f       	andi	r23, 0xF0	; 240
    1c04:	76 27       	eor	r23, r22
    1c06:	60 7f       	andi	r22, 0xF0	; 240
    1c08:	76 27       	eor	r23, r22
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1c0a:	ea 2f       	mov	r30, r26
    1c0c:	e6 2b       	or	r30, r22
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
    1c0e:	69 2f       	mov	r22, r25
    1c10:	62 95       	swap	r22
    1c12:	66 95       	lsr	r22
    1c14:	67 70       	andi	r22, 0x07	; 7
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	61 70       	andi	r22, 0x01	; 1
    1c1a:	70 70       	andi	r23, 0x00	; 0
    1c1c:	ab 01       	movw	r20, r22
    1c1e:	44 0f       	add	r20, r20
    1c20:	55 1f       	adc	r21, r21
    1c22:	42 95       	swap	r20
    1c24:	52 95       	swap	r21
    1c26:	50 7f       	andi	r21, 0xF0	; 240
    1c28:	54 27       	eor	r21, r20
    1c2a:	40 7f       	andi	r20, 0xF0	; 240
    1c2c:	54 27       	eor	r21, r20
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1c2e:	6e 2f       	mov	r22, r30
    1c30:	64 2b       	or	r22, r20
							((switch_states.byte0 >> VCO1_SAW_SW) & 1) << VCO1_SAW |
							((switch_states.byte0 >> VCO1_TRI_SW) & 1) << VCO1_TRI |
							((switch_states.byte0 >> VCO1_PULSE_SW) & 1) << VCO1_PULSE |
							((switch_states.byte0 >> VCO2_SAW_SW) & 1) << VCO2_SAW |
							((switch_states.byte0 >> VCO2_TRI_SW) & 1) << VCO2_TRI |
							((switch_states.byte0 >> VCO2_PULSE_SW) & 1) << VCO2_PULSE |
    1c32:	49 2f       	mov	r20, r25
    1c34:	42 95       	swap	r20
    1c36:	46 95       	lsr	r20
    1c38:	46 95       	lsr	r20
    1c3a:	43 70       	andi	r20, 0x03	; 3
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	41 70       	andi	r20, 0x01	; 1
    1c40:	50 70       	andi	r21, 0x00	; 0
    1c42:	9a 01       	movw	r18, r20
    1c44:	00 24       	eor	r0, r0
    1c46:	36 95       	lsr	r19
    1c48:	27 95       	ror	r18
    1c4a:	07 94       	ror	r0
    1c4c:	36 95       	lsr	r19
    1c4e:	27 95       	ror	r18
    1c50:	07 94       	ror	r0
    1c52:	32 2f       	mov	r19, r18
    1c54:	20 2d       	mov	r18, r0
			
	
void update_patch(void) {
	
	//parse LED data for LED latch 5
	current_patch.byte_5 =	((switch_states.byte0 >> VCO_SYNC_SW) & 1) << VCO_SYNC |					
    1c56:	26 2b       	or	r18, r22
    1c58:	20 93 02 03 	sts	0x0302, r18
			
	//update analog switch latch:
	//need to incorporate BMOD_LATCH_BIT switch state into data byte sent to analog switch latch
	//3rd switch bit is VCO1_OCTAVE_UP_SW state, which isn't used by analog switch latch
	uint8_t analog_sw_byte = switch_states.byte0;
	uint8_t BMOD_SW_ON = (switch_states.byte2 >> BMOD_SW) & 1;
    1c5c:	81 70       	andi	r24, 0x01	; 1
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
    1c5e:	81 95       	neg	r24
    1c60:	89 27       	eor	r24, r25
    1c62:	88 70       	andi	r24, 0x08	; 8
	update_analog_switch_latch(analog_sw_byte);
    1c64:	89 27       	eor	r24, r25
    1c66:	0e 94 30 15 	call	0x2a60	; 0x2a60 <update_analog_switch_latch>
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1c6a:	ed ed       	ldi	r30, 0xDD	; 221
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	20 81       	ld	r18, Z
	analog_sw_byte ^= (-BMOD_SW_ON ^ analog_sw_byte) & (1<<3);//set third bit dependent on BMOD switch state
	update_analog_switch_latch(analog_sw_byte);
					
	//set EG2 INV bit. This changes the nth bit to x from: http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
	//need to make sure this doesn't interfere with anything else on this port
	uint8_t EG2_INV_ON = (switch_states.byte2 >> EG2_INV_SW) & 1;	
    1c70:	90 91 7f 03 	lds	r25, 0x037F
    1c74:	96 95       	lsr	r25
    1c76:	96 95       	lsr	r25
    1c78:	96 95       	lsr	r25
    1c7a:	91 70       	andi	r25, 0x01	; 1
	EG2_POL_PORT ^= (-EG2_INV_ON ^ EG2_POL_PORT) & (1<<EG2_POL);
    1c7c:	91 95       	neg	r25
    1c7e:	80 81       	ld	r24, Z
    1c80:	89 27       	eor	r24, r25
    1c82:	80 71       	andi	r24, 0x10	; 16
    1c84:	82 27       	eor	r24, r18
    1c86:	80 83       	st	Z, r24
	current_patch.byte_1 ^= (-EG2_INV_ON ^ current_patch.byte_1) & (1 << EG2_INV); //don't forget to set it in patch or it won't be saved!
    1c88:	ee ef       	ldi	r30, 0xFE	; 254
    1c8a:	f2 e0       	ldi	r31, 0x02	; 2
    1c8c:	80 81       	ld	r24, Z
    1c8e:	98 27       	eor	r25, r24
    1c90:	91 70       	andi	r25, 0x01	; 1
    1c92:	89 27       	eor	r24, r25
    1c94:	80 83       	st	Z, r24
	
	//parse octave switch data
	update_octave_range();
    1c96:	0e 94 37 0c 	call	0x186e	; 0x186e <update_octave_range>
	
	//parse LFO data
	update_lfo_shape();
    1c9a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <update_lfo_shape>
	
	//parse LFO sync data
	update_lfo_sync();
    1c9e:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <update_lfo_sync>

	//update arp settings
	update_arp_sync();
    1ca2:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <update_arp_sync>
	update_arp_range();
    1ca6:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <update_arp_range>
	//update_patch_programmer();		
				

		
	
}
    1caa:	08 95       	ret

00001cac <update_patch_programmer>:





void update_patch_programmer(void) { //maybe best to use a switch/case statement here instead of a series of if/elses?
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
	
	if (current_patch.mode == CAL) //temporary tune button hack by pressing and holding PROG DOWN switch
    1cb0:	90 91 07 03 	lds	r25, 0x0307
    1cb4:	95 30       	cpi	r25, 0x05	; 5
    1cb6:	01 f5       	brne	.+64     	; 0x1cf8 <update_patch_programmer+0x4c>
	{
		
		
		//TURN OFF LFO OUTPUT
		DATA_BUS = 0b00000111; //turn off LFO waveform
    1cb8:	87 e0       	ldi	r24, 0x07	; 7
    1cba:	82 b9       	out	0x02, r24	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1cbc:	cd ed       	ldi	r28, 0xDD	; 221
    1cbe:	d0 e0       	ldi	r29, 0x00	; 0
    1cc0:	88 81       	ld	r24, Y
    1cc2:	80 62       	ori	r24, 0x20	; 32
    1cc4:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1cc6:	88 81       	ld	r24, Y
    1cc8:	8f 7d       	andi	r24, 0xDF	; 223
    1cca:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1ccc:	12 b8       	out	0x02, r1	; 2
		
		tune();
    1cce:	0e 94 d5 14 	call	0x29aa	; 0x29aa <tune>
		
		DATA_BUS = LFO_TRI_ADDR;
    1cd2:	12 b8       	out	0x02, r1	; 2
		LFO_LATCH_PORT |= (1<<LFO_SW_LATCH);
    1cd4:	88 81       	ld	r24, Y
    1cd6:	80 62       	ori	r24, 0x20	; 32
    1cd8:	88 83       	st	Y, r24
		LFO_LATCH_PORT &= ~(1<<LFO_SW_LATCH);
    1cda:	88 81       	ld	r24, Y
    1cdc:	8f 7d       	andi	r24, 0xDF	; 223
    1cde:	88 83       	st	Y, r24
		DATA_BUS = 0;
    1ce0:	12 b8       	out	0x02, r1	; 2
		current_patch.byte_2 &= 0b00001111; //clear top 4 bits
    1ce2:	80 91 ff 02 	lds	r24, 0x02FF
    1ce6:	8f 70       	andi	r24, 0x0F	; 15
		current_patch.byte_2 |= (1<<LFO_TRI);
    1ce8:	80 68       	ori	r24, 0x80	; 128
    1cea:	80 93 ff 02 	sts	0x02FF, r24
		
		setup_system_clock(); //restore system clock settings
    1cee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setup_system_clock>

		current_patch.mode = MEMORY;
    1cf2:	10 92 07 03 	sts	0x0307, r1
		
		return;
    1cf6:	63 c0       	rjmp	.+198    	; 0x1dbe <update_patch_programmer+0x112>
		
	}
	

	
	if ((switch_states.byte2>> PROG_UP_SW) & 1) {
    1cf8:	80 91 7f 03 	lds	r24, 0x037F
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	22 95       	swap	r18
    1d00:	26 95       	lsr	r18
    1d02:	26 95       	lsr	r18
    1d04:	23 70       	andi	r18, 0x03	; 3
    1d06:	20 ff       	sbrs	r18, 0
    1d08:	15 c0       	rjmp	.+42     	; 0x1d34 <update_patch_programmer+0x88>
		
		switch_states.byte2 ^= (1<<PROG_UP_SW); //toggle switch state bit
    1d0a:	20 e4       	ldi	r18, 0x40	; 64
    1d0c:	82 27       	eor	r24, r18
    1d0e:	80 93 7f 03 	sts	0x037F, r24
		
		if (++current_patch.number == NUM_PATCHES + 1) {			
    1d12:	80 91 03 03 	lds	r24, 0x0303
    1d16:	8f 5f       	subi	r24, 0xFF	; 255
    1d18:	80 93 03 03 	sts	0x0303, r24
    1d1c:	85 32       	cpi	r24, 0x25	; 37
    1d1e:	21 f4       	brne	.+8      	; 0x1d28 <update_patch_programmer+0x7c>
			
			current_patch.number = NUM_PATCHES; //max patch number
    1d20:	84 e2       	ldi	r24, 0x24	; 36
    1d22:	80 93 03 03 	sts	0x0303, r24
    1d26:	06 c0       	rjmp	.+12     	; 0x1d34 <update_patch_programmer+0x88>
		
					
		} else if (current_patch.mode != WRITE) { //load next patch if not in WRITE mode
    1d28:	93 30       	cpi	r25, 0x03	; 3
    1d2a:	21 f0       	breq	.+8      	; 0x1d34 <update_patch_programmer+0x88>
			
			load_patch(current_patch.number);
    1d2c:	0e 94 47 09 	call	0x128e	; 0x128e <load_patch>
			update_patch();
    1d30:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <update_patch>
			
		}		
		
	}
	
	if ((switch_states.byte2 >> PROG_DOWN_SW) & 1) {
    1d34:	80 91 7f 03 	lds	r24, 0x037F
    1d38:	98 2f       	mov	r25, r24
    1d3a:	92 95       	swap	r25
    1d3c:	96 95       	lsr	r25
    1d3e:	97 70       	andi	r25, 0x07	; 7
    1d40:	90 ff       	sbrs	r25, 0
    1d42:	15 c0       	rjmp	.+42     	; 0x1d6e <update_patch_programmer+0xc2>
	
		switch_states.byte2 ^= (1<<PROG_DOWN_SW); //toggle switch state bit
    1d44:	90 e2       	ldi	r25, 0x20	; 32
    1d46:	89 27       	eor	r24, r25
    1d48:	80 93 7f 03 	sts	0x037F, r24

		if (current_patch.number == 1) {} else {current_patch.number--;}
    1d4c:	80 91 03 03 	lds	r24, 0x0303
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	19 f0       	breq	.+6      	; 0x1d5a <update_patch_programmer+0xae>
    1d54:	81 50       	subi	r24, 0x01	; 1
    1d56:	80 93 03 03 	sts	0x0303, r24
		
		if (current_patch.mode != WRITE) {
    1d5a:	80 91 07 03 	lds	r24, 0x0307
    1d5e:	83 30       	cpi	r24, 0x03	; 3
    1d60:	31 f0       	breq	.+12     	; 0x1d6e <update_patch_programmer+0xc2>
			
			load_patch(current_patch.number); 
    1d62:	80 91 03 03 	lds	r24, 0x0303
    1d66:	0e 94 47 09 	call	0x128e	; 0x128e <load_patch>
			update_patch();
    1d6a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <update_patch>
		}			
	}
	
	
	if ((switch_states.byte2 >> PROG_WRITE_SW) & 1) {
    1d6e:	80 91 7f 03 	lds	r24, 0x037F
    1d72:	98 2f       	mov	r25, r24
    1d74:	92 95       	swap	r25
    1d76:	9f 70       	andi	r25, 0x0F	; 15
    1d78:	90 ff       	sbrs	r25, 0
    1d7a:	15 c0       	rjmp	.+42     	; 0x1da6 <update_patch_programmer+0xfa>
		
		switch_states.byte2 ^= (1<<PROG_WRITE_SW);
    1d7c:	90 e1       	ldi	r25, 0x10	; 16
    1d7e:	89 27       	eor	r24, r25
    1d80:	80 93 7f 03 	sts	0x037F, r24
		if (current_patch.mode != WRITE) {
    1d84:	90 91 07 03 	lds	r25, 0x0307
    1d88:	93 30       	cpi	r25, 0x03	; 3
    1d8a:	49 f0       	breq	.+18     	; 0x1d9e <update_patch_programmer+0xf2>
			switch_states.byte2 &= ~(1<< PROG_MANUAL_SW); //turn off manual mode
    1d8c:	8f 77       	andi	r24, 0x7F	; 127
    1d8e:	80 93 7f 03 	sts	0x037F, r24
			current_patch.mode = WRITE;
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	80 93 07 03 	sts	0x0307, r24
			lock_pots();
    1d98:	0e 94 29 07 	call	0xe52	; 0xe52 <lock_pots>
    1d9c:	04 c0       	rjmp	.+8      	; 0x1da6 <update_patch_programmer+0xfa>
			
			
		} else {
			
			save_patch(current_patch.number); //write the patch
    1d9e:	80 91 03 03 	lds	r24, 0x0303
    1da2:	0e 94 54 07 	call	0xea8	; 0xea8 <save_patch>
		//save_patch(current_patch.number);
		
		
	}
	
	if (((switch_states.byte2 >> PROG_MANUAL_SW) & 1)) {
    1da6:	80 91 7f 03 	lds	r24, 0x037F
    1daa:	88 23       	and	r24, r24
    1dac:	44 f4       	brge	.+16     	; 0x1dbe <update_patch_programmer+0x112>
			
		switch_states.byte2 |= (1<< PROG_MANUAL_SW);
    1dae:	80 68       	ori	r24, 0x80	; 128
    1db0:	80 93 7f 03 	sts	0x037F, r24
		current_patch.mode = MANUAL;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	80 93 07 03 	sts	0x0307, r24
		unlock_pots();
    1dba:	0e 94 43 07 	call	0xe86	; 0xe86 <unlock_pots>
	}
	//value_to_display = current_patch.number;	
	//value_to_display = vco1_init_cv>>1;
	
	
}	
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	08 95       	ret

00001dc4 <initialize_voice_for_tuning>:
	

void initialize_voice_for_tuning(void) { //this function sets all CVs required for oscillator tuning
	

	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    1dc4:	88 ed       	ldi	r24, 0xD8	; 216
    1dc6:	91 e0       	ldi	r25, 0x01	; 1
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	70 e0       	ldi	r23, 0x00	; 0
    1dcc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    1dd0:	81 ee       	ldi	r24, 0xE1	; 225
    1dd2:	91 e0       	ldi	r25, 0x01	; 1
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	70 e0       	ldi	r23, 0x00	; 0
    1dd8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    1ddc:	82 ee       	ldi	r24, 0xE2	; 226
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    1de8:	82 eb       	ldi	r24, 0xB2	; 178
    1dea:	92 e0       	ldi	r25, 0x02	; 2
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    1df4:	8a ed       	ldi	r24, 0xDA	; 218
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    1e00:	8f ed       	ldi	r24, 0xDF	; 223
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    1e0c:	80 ee       	ldi	r24, 0xE0	; 224
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	60 e0       	ldi	r22, 0x00	; 0
    1e12:	70 e0       	ldi	r23, 0x00	; 0
    1e14:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    1e18:	81 ed       	ldi	r24, 0xD1	; 209
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    1e24:	86 ed       	ldi	r24, 0xD6	; 214
    1e26:	91 e0       	ldi	r25, 0x01	; 1
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    1e30:	82 ed       	ldi	r24, 0xD2	; 210
    1e32:	91 e0       	ldi	r25, 0x01	; 1
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    1e3c:	83 ed       	ldi	r24, 0xD3	; 211
    1e3e:	91 e0       	ldi	r25, 0x01	; 1
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	70 e0       	ldi	r23, 0x00	; 0
    1e44:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//open filter with no resonance
	set_control_voltage(&cutoff_cv, MAX);
    1e48:	84 ed       	ldi	r24, 0xD4	; 212
    1e4a:	91 e0       	ldi	r25, 0x01	; 1
    1e4c:	6f ef       	ldi	r22, 0xFF	; 255
    1e4e:	7f e3       	ldi	r23, 0x3F	; 63
    1e50:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, MIN);
    1e54:	85 ed       	ldi	r24, 0xD5	; 213
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	70 e0       	ldi	r23, 0x00	; 0
    1e5c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    1e60:	89 ed       	ldi	r24, 0xD9	; 217
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	60 e0       	ldi	r22, 0x00	; 0
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    1e6c:	8e ec       	ldi	r24, 0xCE	; 206
    1e6e:	91 e0       	ldi	r25, 0x01	; 1
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    1e78:	8c ec       	ldi	r24, 0xCC	; 204
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	70 e0       	ldi	r23, 0x00	; 0
    1e80:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    1e84:	8a ec       	ldi	r24, 0xCA	; 202
    1e86:	91 e0       	ldi	r25, 0x01	; 1
    1e88:	6f ef       	ldi	r22, 0xFF	; 255
    1e8a:	7f e3       	ldi	r23, 0x3F	; 63
    1e8c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    1e90:	88 ec       	ldi	r24, 0xC8	; 200
    1e92:	91 e0       	ldi	r25, 0x01	; 1
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off noise
	set_control_voltage(&noise_mix_cv, MIN);
    1e9c:	80 ed       	ldi	r24, 0xD0	; 208
    1e9e:	91 e0       	ldi	r25, 0x01	; 1
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    1ea8:	83 ee       	ldi	r24, 0xE3	; 227
    1eaa:	91 e0       	ldi	r25, 0x01	; 1
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    1eb4:	84 ee       	ldi	r24, 0xE4	; 228
    1eb6:	91 e0       	ldi	r25, 0x01	; 1
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
}	
    1ec0:	08 95       	ret

00001ec2 <set_vco_init_cv>:
	
uint16_t set_vco_init_cv(uint8_t vco, uint16_t base_reference) { 
    1ec2:	2f 92       	push	r2
    1ec4:	3f 92       	push	r3
    1ec6:	4f 92       	push	r4
    1ec8:	5f 92       	push	r5
    1eca:	6f 92       	push	r6
    1ecc:	7f 92       	push	r7
    1ece:	8f 92       	push	r8
    1ed0:	9f 92       	push	r9
    1ed2:	af 92       	push	r10
    1ed4:	bf 92       	push	r11
    1ed6:	cf 92       	push	r12
    1ed8:	df 92       	push	r13
    1eda:	ef 92       	push	r14
    1edc:	ff 92       	push	r15
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	2c 97       	sbiw	r28, 0x0c	; 12
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	08 2f       	mov	r16, r24
    1ef8:	78 87       	std	Y+8, r23	; 0x08
    1efa:	6f 83       	std	Y+7, r22	; 0x07

	uint16_t init_cv = 0;
	timer1_clock |= (1<<CS11) | (1<<CS10);
    1efc:	80 91 7a 03 	lds	r24, 0x037A
    1f00:	83 60       	ori	r24, 0x03	; 3
    1f02:	80 93 7a 03 	sts	0x037A, r24
	 
	//TO DO: disable UART so MIDI data doesn't interrupt tuning
	
	//setup control voltages	
	initialize_voice_for_tuning();
    1f06:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <initialize_voice_for_tuning>
	struct control_voltage *vco_init_cv;
	struct control_voltage *vco_mix_cv;
	struct control_voltage *vco_pw_cv;
	struct control_voltage *vco_pitch_cv;

	count_finished = FALSE;
    1f0a:	10 92 79 03 	sts	0x0379, r1
	
	if (vco == VCO1) { //turn on VCO1 pulse
    1f0e:	0f 30       	cpi	r16, 0x0F	; 15
    1f10:	e1 f4       	brne	.+56     	; 0x1f4a <set_vco_init_cv+0x88>
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    1f12:	0f 2e       	mov	r0, r31
    1f14:	f6 ee       	ldi	r31, 0xE6	; 230
    1f16:	4f 2e       	mov	r4, r31
    1f18:	f1 e0       	ldi	r31, 0x01	; 1
    1f1a:	5f 2e       	mov	r5, r31
    1f1c:	f0 2d       	mov	r31, r0
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
    1f1e:	0f 2e       	mov	r0, r31
    1f20:	fe ed       	ldi	r31, 0xDE	; 222
    1f22:	2f 2e       	mov	r2, r31
    1f24:	f1 e0       	ldi	r31, 0x01	; 1
    1f26:	3f 2e       	mov	r3, r31
    1f28:	f0 2d       	mov	r31, r0
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
		vco_mix_cv = &vco1_mix_cv;
    1f2a:	23 ee       	ldi	r18, 0xE3	; 227
    1f2c:	31 e0       	ldi	r19, 0x01	; 1
    1f2e:	3a 83       	std	Y+2, r19	; 0x02
    1f30:	29 83       	std	Y+1, r18	; 0x01
	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
		vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    1f32:	0f 2e       	mov	r0, r31
    1f34:	fc ed       	ldi	r31, 0xDC	; 220
    1f36:	8f 2e       	mov	r8, r31
    1f38:	f1 e0       	ldi	r31, 0x01	; 1
    1f3a:	9f 2e       	mov	r9, r31
    1f3c:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco1_mix_cv;
		vco_pw_cv = &vco1_pw_cv;
		vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
    1f3e:	82 e7       	ldi	r24, 0x72	; 114
    1f40:	96 e0       	ldi	r25, 0x06	; 6
    1f42:	9a 87       	std	Y+10, r25	; 0x0a
    1f44:	89 87       	std	Y+9, r24	; 0x09

	count_finished = FALSE;
	
	if (vco == VCO1) { //turn on VCO1 pulse
		//turn on VCO1 pulse, all others off
		switch_byte = (1<<VCO1_SAW_LATCH_BIT);
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	1b c0       	rjmp	.+54     	; 0x1f80 <set_vco_init_cv+0xbe>
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    1f4a:	0f 2e       	mov	r0, r31
    1f4c:	f5 ee       	ldi	r31, 0xE5	; 229
    1f4e:	4f 2e       	mov	r4, r31
    1f50:	f1 e0       	ldi	r31, 0x01	; 1
    1f52:	5f 2e       	mov	r5, r31
    1f54:	f0 2d       	mov	r31, r0
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
    1f56:	0f 2e       	mov	r0, r31
    1f58:	f7 ed       	ldi	r31, 0xD7	; 215
    1f5a:	2f 2e       	mov	r2, r31
    1f5c:	f1 e0       	ldi	r31, 0x01	; 1
    1f5e:	3f 2e       	mov	r3, r31
    1f60:	f0 2d       	mov	r31, r0
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
		vco_mix_cv = &vco2_mix_cv;
    1f62:	e4 ee       	ldi	r30, 0xE4	; 228
    1f64:	f1 e0       	ldi	r31, 0x01	; 1
    1f66:	fa 83       	std	Y+2, r31	; 0x02
    1f68:	e9 83       	std	Y+1, r30	; 0x01
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
		vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    1f6a:	0f 2e       	mov	r0, r31
    1f6c:	fd ed       	ldi	r31, 0xDD	; 221
    1f6e:	8f 2e       	mov	r8, r31
    1f70:	f1 e0       	ldi	r31, 0x01	; 1
    1f72:	9f 2e       	mov	r9, r31
    1f74:	f0 2d       	mov	r31, r0
		vco_mix_cv = &vco2_mix_cv;
		vco_pw_cv = &vco2_pw_cv;
		vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
    1f76:	20 e7       	ldi	r18, 0x70	; 112
    1f78:	36 e0       	ldi	r19, 0x06	; 6
    1f7a:	3a 87       	std	Y+10, r19	; 0x0a
    1f7c:	29 87       	std	Y+9, r18	; 0x09
		reference_count = base_reference;//38222; //make this an argument passed to function
		eeprom_addr = &vco1_init_cv_eeprom;
		
	} else { //turn on VCO2 pulse	
		//turn on VCO2 pulse, all others off
		switch_byte = (1<<VCO2_SAW_LATCH_BIT);
    1f7e:	80 e4       	ldi	r24, 0x40	; 64
		reference_count = base_reference;
		eeprom_addr = &vco2_init_cv_eeprom;
	}
	
	//latch switch data
	DATA_BUS = switch_byte;
    1f80:	82 b9       	out	0x02, r24	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    1f82:	ed ed       	ldi	r30, 0xDD	; 221
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	80 64       	ori	r24, 0x40	; 64
    1f8a:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8f 7b       	andi	r24, 0xBF	; 191
    1f90:	80 83       	st	Z, r24
	DATA_BUS = 0;
    1f92:	12 b8       	out	0x02, r1	; 2

	PORTF |= (1<<GATE); //turn gate on
    1f94:	89 9a       	sbi	0x11, 1	; 17
	
	//set up timer/counter0 to be clocked by T0 input
	
	TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    1f96:	84 b5       	in	r24, 0x24	; 36
    1f98:	8f 60       	ori	r24, 0x0F	; 15
    1f9a:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	87 bd       	out	0x27, r24	; 39
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
    1fa0:	ee e6       	ldi	r30, 0x6E	; 110
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	90 81       	ld	r25, Z
    1fa6:	92 60       	ori	r25, 0x02	; 2
    1fa8:	90 83       	st	Z, r25
	period = 1; //only counting 1 period 
    1faa:	80 93 7b 03 	sts	0x037B, r24
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    1fae:	8d e0       	ldi	r24, 0x0D	; 13
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
			
			update_display(vco + 1, DEC);
    1fb6:	80 2f       	mov	r24, r16
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	8c 01       	movw	r16, r24
    1fbc:	0f 5f       	subi	r16, 0xFF	; 255
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
		
			set_control_voltage(vco_init_cv, init_cv);
			set_control_voltage(vco_pw_cv, MAX);
			set_control_voltage(&volume_cv, MIN);
    1fc0:	0f 2e       	mov	r0, r31
    1fc2:	f8 ed       	ldi	r31, 0xD8	; 216
    1fc4:	ef 2e       	mov	r14, r31
    1fc6:	f1 e0       	ldi	r31, 0x01	; 1
    1fc8:	ff 2e       	mov	r15, r31
    1fca:	f0 2d       	mov	r31, r0
			set_control_voltage(&cutoff_cv, MAX);
    1fcc:	0f 2e       	mov	r0, r31
    1fce:	f4 ed       	ldi	r31, 0xD4	; 212
    1fd0:	cf 2e       	mov	r12, r31
    1fd2:	f1 e0       	ldi	r31, 0x01	; 1
    1fd4:	df 2e       	mov	r13, r31
    1fd6:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_1_cv, MAX);
    1fd8:	0f 2e       	mov	r0, r31
    1fda:	fa ec       	ldi	r31, 0xCA	; 202
    1fdc:	af 2e       	mov	r10, r31
    1fde:	f1 e0       	ldi	r31, 0x01	; 1
    1fe0:	bf 2e       	mov	r11, r31
    1fe2:	f0 2d       	mov	r31, r0
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    1fe4:	0f 2e       	mov	r0, r31
    1fe6:	fb ec       	ldi	r31, 0xCB	; 203
    1fe8:	6f 2e       	mov	r6, r31
    1fea:	f1 e0       	ldi	r31, 0x01	; 1
    1fec:	7f 2e       	mov	r7, r31
    1fee:	f0 2d       	mov	r31, r0
    1ff0:	e0 e0       	ldi	r30, 0x00	; 0
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	fc 87       	std	Y+12, r31	; 0x0c
    1ff6:	eb 87       	std	Y+11, r30	; 0x0b
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
	
		init_cv |= (1<<dac_bit);
    1ff8:	21 e0       	ldi	r18, 0x01	; 1
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	0b 80       	ldd	r0, Y+3	; 0x03
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <set_vco_init_cv+0x142>
    2000:	22 0f       	add	r18, r18
    2002:	33 1f       	adc	r19, r19
    2004:	0a 94       	dec	r0
    2006:	e2 f7       	brpl	.-8      	; 0x2000 <set_vco_init_cv+0x13e>
    2008:	3e 83       	std	Y+6, r19	; 0x06
    200a:	2d 83       	std	Y+5, r18	; 0x05
    200c:	8b 85       	ldd	r24, Y+11	; 0x0b
    200e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2010:	82 2b       	or	r24, r18
    2012:	93 2b       	or	r25, r19
    2014:	9c 87       	std	Y+12, r25	; 0x0c
    2016:	8b 87       	std	Y+11, r24	; 0x0b
		
		set_control_voltage(vco_init_cv, init_cv);
    2018:	c4 01       	movw	r24, r8
    201a:	6b 85       	ldd	r22, Y+11	; 0x0b
    201c:	7c 85       	ldd	r23, Y+12	; 0x0c
    201e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
		
		count_finished = FALSE;
    2022:	10 92 79 03 	sts	0x0379, r1
		period_counter = 0;
    2026:	10 92 7c 03 	sts	0x037C, r1
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
    202a:	8f e0       	ldi	r24, 0x0F	; 15
    202c:	e8 e1       	ldi	r30, 0x18	; 24
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	a8 95       	wdr
    2036:	e0 93 60 00 	sts	0x0060, r30
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	80 93 60 00 	sts	0x0060, r24
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    2040:	80 91 79 03 	lds	r24, 0x0379
    2044:	88 23       	and	r24, r24
    2046:	89 f5       	brne	.+98     	; 0x20aa <set_vco_init_cv+0x1e8>
			
			update_display(vco + 1, DEC);
    2048:	c8 01       	movw	r24, r16
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
		
			set_control_voltage(vco_init_cv, init_cv);
    2050:	c4 01       	movw	r24, r8
    2052:	6b 85       	ldd	r22, Y+11	; 0x0b
    2054:	7c 85       	ldd	r23, Y+12	; 0x0c
    2056:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_pw_cv, MAX);
    205a:	c1 01       	movw	r24, r2
    205c:	6f ef       	ldi	r22, 0xFF	; 255
    205e:	7f e3       	ldi	r23, 0x3F	; 63
    2060:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&volume_cv, MIN);
    2064:	c7 01       	movw	r24, r14
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&cutoff_cv, MAX);
    206e:	c6 01       	movw	r24, r12
    2070:	6f ef       	ldi	r22, 0xFF	; 255
    2072:	7f e3       	ldi	r23, 0x3F	; 63
    2074:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&sustain_1_cv, MAX);
    2078:	c5 01       	movw	r24, r10
    207a:	6f ef       	ldi	r22, 0xFF	; 255
    207c:	7f e3       	ldi	r23, 0x3F	; 63
    207e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(&sustain_2_cv, MAX); //can't remember is EG1 for VCA or EG2????
    2082:	c3 01       	movw	r24, r6
    2084:	6f ef       	ldi	r22, 0xFF	; 255
    2086:	7f e3       	ldi	r23, 0x3F	; 63
    2088:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_mix_cv, MAX);
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	6f ef       	ldi	r22, 0xFF	; 255
    2092:	7f e3       	ldi	r23, 0x3F	; 63
    2094:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			set_control_voltage(vco_pitch_cv, 0);	
    2098:	c2 01       	movw	r24, r4
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		period_counter = 0;
		//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
		//enable watchdog timer
		//WDTCR |= (1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE)| (1<<WDCE);
		wdt_enable(WDTO_2S);
		while (count_finished == FALSE) { //need to have a watchdog timer here to escape while loop if it takes too long
    20a2:	80 91 79 03 	lds	r24, 0x0379
    20a6:	88 23       	and	r24, r24
    20a8:	79 f2       	breq	.-98     	; 0x2048 <set_vco_init_cv+0x186>
			
		}
		//turn off watchdog timer
		//WDTCR |= (1<<WDCE) | (1<<WDE);
		//WDTCR = 0x00;
		wdt_disable();
    20aa:	88 e1       	ldi	r24, 0x18	; 24
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	80 93 60 00 	sts	0x0060, r24
    20b4:	10 92 60 00 	sts	0x0060, r1
    20b8:	0f be       	out	0x3f, r0	; 63
		//remember that as INIT_CV goes up, pitch goes down, so looking for osc_count >= reference_count instead of <= as is the case for normal oscillator tuning
		//similarily, OR no_overflow == FALSE *not* AND no_overflow == FALSE to clear bits that make initial pitch too low
		if ((osc_count > reference_count)  || (no_overflow == FALSE)) init_cv &= ~(1 << dac_bit);
    20ba:	80 91 77 03 	lds	r24, 0x0377
    20be:	90 91 78 03 	lds	r25, 0x0378
    20c2:	ef 81       	ldd	r30, Y+7	; 0x07
    20c4:	f8 85       	ldd	r31, Y+8	; 0x08
    20c6:	e8 17       	cp	r30, r24
    20c8:	f9 07       	cpc	r31, r25
    20ca:	20 f0       	brcs	.+8      	; 0x20d4 <set_vco_init_cv+0x212>
    20cc:	80 91 af 02 	lds	r24, 0x02AF
    20d0:	88 23       	and	r24, r24
    20d2:	51 f4       	brne	.+20     	; 0x20e8 <set_vco_init_cv+0x226>
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	9e 81       	ldd	r25, Y+6	; 0x06
    20d8:	80 95       	com	r24
    20da:	90 95       	com	r25
    20dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    20de:	3c 85       	ldd	r19, Y+12	; 0x0c
    20e0:	28 23       	and	r18, r24
    20e2:	39 23       	and	r19, r25
    20e4:	3c 87       	std	Y+12, r19	; 0x0c
    20e6:	2b 87       	std	Y+11, r18	; 0x0b
		no_overflow = TRUE;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	80 93 af 02 	sts	0x02AF, r24
	OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1)
	//set OCR0A to 1 here means first ISR interrupt will occur after 2 periods, it is then set to 0 to count only single periods
	//for reasons I don't understand yet, starting with OCR0A set to 0 results in a multi-second delay before first compare match ISR is called ***ACTUALLY, THIS MAY BE RELATED TO LEAVING Timer0 RUNNING. COULD TRY TO SET OCR0A TO 0 NOW and SEE IF IT WORKS
	TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt	
	period = 1; //only counting 1 period 
	for (int dac_bit = 13; dac_bit >= 0; dac_bit--) {
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	9c 83       	std	Y+4, r25	; 0x04
    20f6:	8b 83       	std	Y+3, r24	; 0x03
    20f8:	ef ef       	ldi	r30, 0xFF	; 255
    20fa:	8f 3f       	cpi	r24, 0xFF	; 255
    20fc:	9e 07       	cpc	r25, r30
    20fe:	09 f0       	breq	.+2      	; 0x2102 <set_vco_init_cv+0x240>
    2100:	7b cf       	rjmp	.-266    	; 0x1ff8 <set_vco_init_cv+0x136>
    2102:	2b 85       	ldd	r18, Y+11	; 0x0b
    2104:	3c 85       	ldd	r19, Y+12	; 0x0c
    2106:	3e 83       	std	Y+6, r19	; 0x06
    2108:	2d 83       	std	Y+5, r18	; 0x05
		no_overflow = TRUE;
		
	}		
	
	//none of these help with clicking when returning from this function and starting to read pots	
	set_control_voltage(&release_1_cv, MIN); //this will hopefully reduce popping after returning from initializing pitch CV
    210a:	88 ec       	ldi	r24, 0xC8	; 200
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_2_cv, MIN);
    2116:	89 ec       	ldi	r24, 0xC9	; 201
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	60 e0       	ldi	r22, 0x00	; 0
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&cutoff_cv, MIN);
    2122:	84 ed       	ldi	r24, 0xD4	; 212
    2124:	91 e0       	ldi	r25, 0x01	; 1
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&volume_cv, MIN);
    212e:	88 ed       	ldi	r24, 0xD8	; 216
    2130:	91 e0       	ldi	r25, 0x01	; 1
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	PORTF &= ~(1<<GATE); //turn gate off
    213a:	89 98       	cbi	0x11, 1	; 17
	
	TIMSK0 &= ~(1<<OCIE0A); //turn off compare match A interrupt
    213c:	ee e6       	ldi	r30, 0x6E	; 110
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	8d 7f       	andi	r24, 0xFD	; 253
    2144:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0 period timer
    2146:	14 bc       	out	0x24, r1	; 36
	//} else {
		//
		//eeprom_update_word(&vco2_init_cv_eeprom, init_cv);
	//}				
		
	eeprom_update_word(eeprom_addr, init_cv);
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	6d 81       	ldd	r22, Y+5	; 0x05
    214e:	7e 81       	ldd	r23, Y+6	; 0x06
    2150:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__eeupd_word_m6450a>
	//value_to_display = eeprom_read_word(&vco1_init_cv_eeprom);	

	
	return init_cv;
	
}
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	2c 96       	adiw	r28, 0x0c	; 12
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	1f 91       	pop	r17
    216a:	0f 91       	pop	r16
    216c:	ff 90       	pop	r15
    216e:	ef 90       	pop	r14
    2170:	df 90       	pop	r13
    2172:	cf 90       	pop	r12
    2174:	bf 90       	pop	r11
    2176:	af 90       	pop	r10
    2178:	9f 90       	pop	r9
    217a:	8f 90       	pop	r8
    217c:	7f 90       	pop	r7
    217e:	6f 90       	pop	r6
    2180:	5f 90       	pop	r5
    2182:	4f 90       	pop	r4
    2184:	3f 90       	pop	r3
    2186:	2f 90       	pop	r2
    2188:	08 95       	ret

0000218a <tune_8ths>:



void tune_8ths(uint8_t vco) {
    218a:	2f 92       	push	r2
    218c:	3f 92       	push	r3
    218e:	4f 92       	push	r4
    2190:	5f 92       	push	r5
    2192:	6f 92       	push	r6
    2194:	7f 92       	push	r7
    2196:	8f 92       	push	r8
    2198:	9f 92       	push	r9
    219a:	af 92       	push	r10
    219c:	bf 92       	push	r11
    219e:	cf 92       	push	r12
    21a0:	df 92       	push	r13
    21a2:	ef 92       	push	r14
    21a4:	ff 92       	push	r15
    21a6:	0f 93       	push	r16
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	c0 54       	subi	r28, 0x40	; 64
    21b4:	d0 40       	sbci	r29, 0x00	; 0
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	08 2f       	mov	r16, r24
		uint8_t period;
		uint16_t count;
	
		};

	struct pitch_reference reference[16] = 
    21c2:	de 01       	movw	r26, r28
    21c4:	11 96       	adiw	r26, 0x01	; 1
    21c6:	e0 e3       	ldi	r30, 0x30	; 48
    21c8:	f2 e0       	ldi	r31, 0x02	; 2
    21ca:	80 e3       	ldi	r24, 0x30	; 48
    21cc:	01 90       	ld	r0, Z+
    21ce:	0d 92       	st	X+, r0
    21d0:	81 50       	subi	r24, 0x01	; 1
    21d2:	e1 f7       	brne	.-8      	; 0x21cc <tune_8ths+0x42>
	
		//to do:
		//disable UART so MIDI data doesn't interrupt tuning
	
		//setup control voltages	
		initialize_voice_for_tuning();
    21d4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <initialize_voice_for_tuning>
		struct control_voltage *vco_init_cv;
		struct control_voltage *vco_mix_cv;
		struct control_voltage *vco_pw_cv;
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning
    21d8:	0f 30       	cpi	r16, 0x0F	; 15
    21da:	11 f5       	brne	.+68     	; 0x2220 <tune_8ths+0x96>
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
    21dc:	40 90 74 03 	lds	r4, 0x0374
    21e0:	50 90 75 03 	lds	r5, 0x0375
			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
    21e4:	0f 2e       	mov	r0, r31
    21e6:	f6 ee       	ldi	r31, 0xE6	; 230
    21e8:	8f 2e       	mov	r8, r31
    21ea:	f1 e0       	ldi	r31, 0x01	; 1
    21ec:	9f 2e       	mov	r9, r31
    21ee:	f0 2d       	mov	r31, r0

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
    21f0:	0f 2e       	mov	r0, r31
    21f2:	fe ed       	ldi	r31, 0xDE	; 222
    21f4:	2f 2e       	mov	r2, r31
    21f6:	f1 e0       	ldi	r31, 0x01	; 1
    21f8:	3f 2e       	mov	r3, r31
    21fa:	f0 2d       	mov	r31, r0
		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
    21fc:	23 ee       	ldi	r18, 0xE3	; 227
    21fe:	31 e0       	ldi	r19, 0x01	; 1
    2200:	3a ab       	sts	0x5a, r19
    2202:	29 ab       	sts	0x59, r18

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
    2204:	0f 2e       	mov	r0, r31
    2206:	fc ed       	ldi	r31, 0xDC	; 220
    2208:	6f 2e       	mov	r6, r31
    220a:	f1 e0       	ldi	r31, 0x01	; 1
    220c:	7f 2e       	mov	r7, r31
    220e:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
			init_cv = vco1_init_cv;
			vco_pitch_table = vco1_pitch_table;
    2210:	00 e5       	ldi	r16, 0x50	; 80
    2212:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
			vco_init_cv = &tune_cv; //VCO1 init CV currently mapped to tune_cv - need to rename tune_cv to vco1_init_cv
			vco_mix_cv = &vco1_mix_cv;
			vco_pw_cv = &vco1_pw_cv;
			vco_pitch_cv = &vco1_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 1; //allows second digit to display VCO being tuned
    2214:	cc 24       	eor	r12, r12
    2216:	c3 94       	inc	r12
		struct control_voltage *vco_pitch_cv;	

		if (vco == VCO1) { //set up parameters for VCO1 tuning

			//turn on VCO1 SAW, all others off
			switch_byte = (1<<VCO1_PULSE_LATCH_BIT);
    2218:	ee 24       	eor	r14, r14
    221a:	68 94       	set
    221c:	e1 f8       	bld	r14, 1
    221e:	22 c0       	rjmp	.+68     	; 0x2264 <tune_8ths+0xda>
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
    2220:	40 90 72 03 	lds	r4, 0x0372
    2224:	50 90 73 03 	lds	r5, 0x0373
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
    2228:	0f 2e       	mov	r0, r31
    222a:	f5 ee       	ldi	r31, 0xE5	; 229
    222c:	8f 2e       	mov	r8, r31
    222e:	f1 e0       	ldi	r31, 0x01	; 1
    2230:	9f 2e       	mov	r9, r31
    2232:	f0 2d       	mov	r31, r0
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
    2234:	0f 2e       	mov	r0, r31
    2236:	f7 ed       	ldi	r31, 0xD7	; 215
    2238:	2f 2e       	mov	r2, r31
    223a:	f1 e0       	ldi	r31, 0x01	; 1
    223c:	3f 2e       	mov	r3, r31
    223e:	f0 2d       	mov	r31, r0
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
    2240:	44 ee       	ldi	r20, 0xE4	; 228
    2242:	51 e0       	ldi	r21, 0x01	; 1
    2244:	5a ab       	sts	0x5a, r21
    2246:	49 ab       	sts	0x59, r20
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
    2248:	0f 2e       	mov	r0, r31
    224a:	fd ed       	ldi	r31, 0xDD	; 221
    224c:	6f 2e       	mov	r6, r31
    224e:	f1 e0       	ldi	r31, 0x01	; 1
    2250:	7f 2e       	mov	r7, r31
    2252:	f0 2d       	mov	r31, r0
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
			init_cv = vco2_init_cv;
			vco_pitch_table = vco2_pitch_table;
    2254:	0e e2       	ldi	r16, 0x2E	; 46
    2256:	13 e0       	ldi	r17, 0x03	; 3
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
			vco_init_cv = &fine_cv;	//VCO2 initi CV currently mapped to fine_cv - need to rename fine_cv to vco2_init_cv
			vco_mix_cv = &vco2_mix_cv;
			vco_pw_cv = &vco2_pw_cv;
			vco_pitch_cv = &vco2_pitch_cv; //need to keep this 0V during initial pitch setting
			vco_number = 2; //allows second digit to display VCO being tuned
    2258:	cc 24       	eor	r12, r12
    225a:	68 94       	set
    225c:	c1 f8       	bld	r12, 1
		
		
		} else { //set up parameters for VCO2 tuning
		
			//turn on VCO2 SAW, all others off
			switch_byte = (1<<VCO2_PULSE_LATCH_BIT);
    225e:	ee 24       	eor	r14, r14
    2260:	68 94       	set
    2262:	e5 f8       	bld	r14, 5
		}
	


		//set VCO init offset CV
		set_control_voltage(vco_init_cv, init_cv);
    2264:	c3 01       	movw	r24, r6
    2266:	b2 01       	movw	r22, r4
    2268:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
		
	
		//latch switch data
		DATA_BUS = switch_byte;
    226c:	e2 b8       	out	0x02, r14	; 2
		VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    226e:	ed ed       	ldi	r30, 0xDD	; 221
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	80 64       	ori	r24, 0x40	; 64
    2276:	80 83       	st	Z, r24
		//_delay_us(1); //why is this delay here????
		VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2278:	80 81       	ld	r24, Z
    227a:	8f 7b       	andi	r24, 0xBF	; 191
    227c:	80 83       	st	Z, r24
		DATA_BUS = 0;
    227e:	12 b8       	out	0x02, r1	; 2

		PORTF |= (1<<GATE); //turn gate on
    2280:	89 9a       	sbi	0x11, 1	; 17
			
		period = 1; //need to initialize to minimum period number here
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	80 93 7b 03 	sts	0x037B, r24
		
		compare_match_counter = 0;	
    2288:	10 92 76 03 	sts	0x0376, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    228c:	8c 2d       	mov	r24, r12
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	24 e6       	ldi	r18, 0x64	; 100
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	82 9f       	mul	r24, r18
    2296:	d0 01       	movw	r26, r0
    2298:	83 9f       	mul	r24, r19
    229a:	b0 0d       	add	r27, r0
    229c:	92 9f       	mul	r25, r18
    229e:	b0 0d       	add	r27, r0
    22a0:	11 24       	eor	r1, r1
    22a2:	bc ab       	sts	0x5c, r27
    22a4:	ab ab       	sts	0x5b, r26
    22a6:	fe 01       	movw	r30, r28
    22a8:	31 96       	adiw	r30, 0x01	; 1
    22aa:	fc af       	sts	0x7c, r31
    22ac:	eb af       	sts	0x7b, r30
	
}



void tune_8ths(uint8_t vco) {
    22ae:	98 01       	movw	r18, r16
    22b0:	2e 5f       	subi	r18, 0xFE	; 254
    22b2:	3f 4f       	sbci	r19, 0xFF	; 255
    22b4:	21 96       	adiw	r28, 0x01	; 1
    22b6:	3f af       	sts	0x7f, r19
    22b8:	2e af       	sts	0x7e, r18
    22ba:	21 97       	sbiw	r28, 0x01	; 1
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    22bc:	1e ae       	sts	0xbe, r17
    22be:	1d ae       	sts	0xbd, r17
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    22c0:	0f 2e       	mov	r0, r31
    22c2:	f8 ed       	ldi	r31, 0xD8	; 216
    22c4:	ef 2e       	mov	r14, r31
    22c6:	f1 e0       	ldi	r31, 0x01	; 1
    22c8:	ff 2e       	mov	r15, r31
    22ca:	f0 2d       	mov	r31, r0
					set_control_voltage(&cutoff_cv, MAX);
    22cc:	0f 2e       	mov	r0, r31
    22ce:	f4 ed       	ldi	r31, 0xD4	; 212
    22d0:	cf 2e       	mov	r12, r31
    22d2:	f1 e0       	ldi	r31, 0x01	; 1
    22d4:	df 2e       	mov	r13, r31
    22d6:	f0 2d       	mov	r31, r0
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    22d8:	0f 2e       	mov	r0, r31
    22da:	fa ec       	ldi	r31, 0xCA	; 202
    22dc:	af 2e       	mov	r10, r31
    22de:	f1 e0       	ldi	r31, 0x01	; 1
    22e0:	bf 2e       	mov	r11, r31
    22e2:	f0 2d       	mov	r31, r0
	
}



void tune_8ths(uint8_t vco) {
    22e4:	eb ad       	sts	0x6b, r30
    22e6:	fc ad       	sts	0x6c, r31
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
			{
			period = reference[note_number].period;
    22e8:	80 81       	ld	r24, Z
    22ea:	80 93 7b 03 	sts	0x037B, r24
			//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
			TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    22ee:	84 b5       	in	r24, 0x24	; 36
    22f0:	8f 60       	ori	r24, 0x0F	; 15
    22f2:	84 bd       	out	0x24, r24	; 36
			OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	87 bd       	out	0x27, r24	; 39
			//TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
			TCNT0 = 0; //make sure timer/counter0 is actually 0. 
    22f8:	16 bc       	out	0x26, r1	; 38
			
			if (note_number <= 2) {
    22fa:	4d ad       	sts	0x6d, r20
    22fc:	5e ad       	sts	0x6e, r21
    22fe:	43 30       	cpi	r20, 0x03	; 3
    2300:	51 05       	cpc	r21, r1
    2302:	24 f4       	brge	.+8      	; 0x230c <tune_8ths+0x182>
	
				//set timer/counter1 to /64 0.3125 MHz
				timer1_clock = (1<<CS11) | (1<<CS10);
    2304:	83 e0       	ldi	r24, 0x03	; 3
    2306:	80 93 7a 03 	sts	0x037A, r24
    230a:	03 c0       	rjmp	.+6      	; 0x2312 <tune_8ths+0x188>
	
			} else {
	
				//set timer/counter1 to /8 2.5 MHz
				timer1_clock = (1<<CS11);
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	80 93 7a 03 	sts	0x037A, r24
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
    2312:	81 81       	ldd	r24, Z+1	; 0x01
    2314:	92 81       	ldd	r25, Z+2	; 0x02
    2316:	9a af       	sts	0x7a, r25
    2318:	89 af       	sts	0x79, r24
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    231a:	ad e0       	ldi	r26, 0x0D	; 13
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	be ab       	sts	0x5e, r27
    2320:	ad ab       	sts	0x5d, r26
				timer1_clock = (1<<CS11);
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
    2322:	00 e0       	ldi	r16, 0x00	; 0
    2324:	10 e0       	ldi	r17, 0x00	; 0
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
				
				osc_pitch_cv |= (1<<dac_bit);
    2326:	e1 e0       	ldi	r30, 0x01	; 1
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	0d a8       	sts	0x8d, r16
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <tune_8ths+0x1a8>
    232e:	ee 0f       	add	r30, r30
    2330:	ff 1f       	adc	r31, r31
    2332:	0a 94       	dec	r0
    2334:	e2 f7       	brpl	.-8      	; 0x232e <tune_8ths+0x1a4>
    2336:	f8 af       	sts	0x78, r31
    2338:	ef ab       	sts	0x5f, r30
    233a:	0e 2b       	or	r16, r30
    233c:	1f 2b       	or	r17, r31
				TIMSK0 &= ~(1<<OCIE0A); //turn off output compare match A interrupt
    233e:	ae e6       	ldi	r26, 0x6E	; 110
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	8c 91       	ld	r24, X
    2344:	8d 7f       	andi	r24, 0xFD	; 253
    2346:	8c 93       	st	X, r24
				set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    2348:	c4 01       	movw	r24, r8
    234a:	b8 01       	movw	r22, r16
    234c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2350:	e3 ef       	ldi	r30, 0xF3	; 243
    2352:	f1 e0       	ldi	r31, 0x01	; 1
    2354:	31 97       	sbiw	r30, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <tune_8ths+0x1ca>
    2358:	00 c0       	rjmp	.+0      	; 0x235a <tune_8ths+0x1d0>
    235a:	00 00       	nop
				_delay_ms(2); //add delay here to allow pitch to slew to its final value
				TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    235c:	ae e6       	ldi	r26, 0x6E	; 110
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	8c 91       	ld	r24, X
    2362:	82 60       	ori	r24, 0x02	; 2
    2364:	8c 93       	st	X, r24
				//TCNT0 = 0;
				
				count_finished = FALSE;
    2366:	10 92 79 03 	sts	0x0379, r1
				period_counter = 0;
    236a:	10 92 7c 03 	sts	0x037C, r1
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
    236e:	e8 e1       	ldi	r30, 0x18	; 24
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	2f e0       	ldi	r18, 0x0F	; 15
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	a8 95       	wdr
    237a:	e0 93 60 00 	sts	0x0060, r30
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	20 93 60 00 	sts	0x0060, r18
				while (count_finished == FALSE) {
    2384:	80 91 79 03 	lds	r24, 0x0379
    2388:	88 23       	and	r24, r24
    238a:	81 f5       	brne	.+96     	; 0x23ec <tune_8ths+0x262>
					//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
					update_display(vco_number*100 + period, DEC);//
    238c:	80 91 7b 03 	lds	r24, 0x037B
    2390:	4b a9       	sts	0x4b, r20
    2392:	5c a9       	sts	0x4c, r21
    2394:	48 0f       	add	r20, r24
    2396:	51 1d       	adc	r21, r1
    2398:	ca 01       	movw	r24, r20
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
					//update_display(value_to_display, DEC);	
					//need to have a watchdog timer here to escape while loop if it takes too long
				
					//not sure what's really necessary here - definitely pitch and init_cv, but what else?
					set_control_voltage(vco_init_cv, init_cv);
    23a0:	c3 01       	movw	r24, r6
    23a2:	b2 01       	movw	r22, r4
    23a4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(vco_pitch_cv, osc_pitch_cv);
    23a8:	c4 01       	movw	r24, r8
    23aa:	b8 01       	movw	r22, r16
    23ac:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&pitch_lfo_cv, MIN);
					//set_control_voltage(vco_pw_cv, MAX); //not necessary as SAW is being used to clock comparator
					set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    23b0:	c7 01       	movw	r24, r14
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(&cutoff_cv, MAX);
    23ba:	c6 01       	movw	r24, r12
    23bc:	6f ef       	ldi	r22, 0xFF	; 255
    23be:	7f e3       	ldi	r23, 0x3F	; 63
    23c0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&res_cv, MIN);
					set_control_voltage(&sustain_1_cv, MAX);
    23c4:	c5 01       	movw	r24, r10
    23c6:	6f ef       	ldi	r22, 0xFF	; 255
    23c8:	7f e3       	ldi	r23, 0x3F	; 63
    23ca:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					//set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
					set_control_voltage(vco_pw_cv, 8192);
    23ce:	c1 01       	movw	r24, r2
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	70 e2       	ldi	r23, 0x20	; 32
    23d4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
					set_control_voltage(vco_mix_cv, MAX);
    23d8:	89 a9       	sts	0x49, r24
    23da:	9a a9       	sts	0x4a, r25
    23dc:	6f ef       	ldi	r22, 0xFF	; 255
    23de:	7f e3       	ldi	r23, 0x3F	; 63
    23e0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				count_finished = FALSE;
				period_counter = 0;
			
				//enable watchdog timer
				wdt_enable(WDTO_2S);
				while (count_finished == FALSE) {
    23e4:	80 91 79 03 	lds	r24, 0x0379
    23e8:	88 23       	and	r24, r24
    23ea:	81 f2       	breq	.-96     	; 0x238c <tune_8ths+0x202>

			
			
				}							
				//turn off watchdog timer
				wdt_disable();
    23ec:	58 e1       	ldi	r21, 0x18	; 24
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	50 93 60 00 	sts	0x0060, r21
    23f6:	10 92 60 00 	sts	0x0060, r1
    23fa:	0f be       	out	0x3f, r0	; 63
				//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
				if ((osc_count <= reference_count) && (no_overflow == TRUE)) osc_pitch_cv &= ~(1<<dac_bit);
    23fc:	80 91 77 03 	lds	r24, 0x0377
    2400:	90 91 78 03 	lds	r25, 0x0378
    2404:	a9 ad       	sts	0x69, r26
    2406:	ba ad       	sts	0x6a, r27
    2408:	a8 17       	cp	r26, r24
    240a:	b9 07       	cpc	r27, r25
    240c:	50 f0       	brcs	.+20     	; 0x2422 <tune_8ths+0x298>
    240e:	80 91 af 02 	lds	r24, 0x02AF
    2412:	81 30       	cpi	r24, 0x01	; 1
    2414:	31 f4       	brne	.+12     	; 0x2422 <tune_8ths+0x298>
    2416:	8f a9       	sts	0x4f, r24
    2418:	98 ad       	sts	0x68, r25
    241a:	80 95       	com	r24
    241c:	90 95       	com	r25
    241e:	08 23       	and	r16, r24
    2420:	19 23       	and	r17, r25
				
				if (osc_count == reference_count && no_overflow == TRUE) {
    2422:	80 91 77 03 	lds	r24, 0x0377
    2426:	90 91 78 03 	lds	r25, 0x0378
    242a:	e9 ad       	sts	0x69, r30
    242c:	fa ad       	sts	0x6a, r31
    242e:	8e 17       	cp	r24, r30
    2430:	9f 07       	cpc	r25, r31
    2432:	21 f4       	brne	.+8      	; 0x243c <tune_8ths+0x2b2>
    2434:	80 91 af 02 	lds	r24, 0x02AF
    2438:	81 30       	cpi	r24, 0x01	; 1
    243a:	71 f0       	breq	.+28     	; 0x2458 <tune_8ths+0x2ce>
					break;	//if you hit the reference count then get out of here		
				}				
				no_overflow = TRUE;
    243c:	f1 e0       	ldi	r31, 0x01	; 1
    243e:	f0 93 af 02 	sts	0x02AF, r31
	
			}
			//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
			uint16_t reference_count = reference[note_number].count;
			uint16_t osc_pitch_cv = 0;
			for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    2442:	2d a9       	sts	0x4d, r18
    2444:	3e a9       	sts	0x4e, r19
    2446:	21 50       	subi	r18, 0x01	; 1
    2448:	30 40       	sbci	r19, 0x00	; 0
    244a:	3e ab       	sts	0x5e, r19
    244c:	2d ab       	sts	0x5d, r18
    244e:	4f ef       	ldi	r20, 0xFF	; 255
    2450:	2f 3f       	cpi	r18, 0xFF	; 255
    2452:	34 07       	cpc	r19, r20
    2454:	09 f0       	breq	.+2      	; 0x2458 <tune_8ths+0x2ce>
    2456:	67 cf       	rjmp	.-306    	; 0x2326 <tune_8ths+0x19c>
			
			
			}
		
			//vco_pitch_table[octave*12 + note_number] = osc_pitch_cv; //store the note control voltage in the pitch table
			*(vco_pitch_table + (note_number+1)) = osc_pitch_cv;		
    2458:	21 96       	adiw	r28, 0x01	; 1
    245a:	ae ad       	sts	0x6e, r26
    245c:	bf ad       	sts	0x6f, r27
    245e:	21 97       	sbiw	r28, 0x01	; 1
    2460:	0d 93       	st	X+, r16
    2462:	1d 93       	st	X+, r17
    2464:	21 96       	adiw	r28, 0x01	; 1
    2466:	bf af       	sts	0x7f, r27
    2468:	ae af       	sts	0x7e, r26
    246a:	21 97       	sbiw	r28, 0x01	; 1
			
			//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
			TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    246c:	ee e6       	ldi	r30, 0x6E	; 110
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	8d 7f       	andi	r24, 0xFD	; 253
    2474:	80 83       	st	Z, r24
			TCCR0A = 0; //turn off timer0
    2476:	14 bc       	out	0x24, r1	; 36
		PORTF |= (1<<GATE); //turn gate on
			
		period = 1; //need to initialize to minimum period number here
		
		compare_match_counter = 0;	
		for (int note_number = 0; note_number <= 15; note_number++) 
    2478:	2d ad       	sts	0x6d, r18
    247a:	3e ad       	sts	0x6e, r19
    247c:	2f 5f       	subi	r18, 0xFF	; 255
    247e:	3f 4f       	sbci	r19, 0xFF	; 255
    2480:	3e af       	sts	0x7e, r19
    2482:	2d af       	sts	0x7d, r18
    2484:	4b ad       	sts	0x6b, r20
    2486:	5c ad       	sts	0x6c, r21
    2488:	4d 5f       	subi	r20, 0xFD	; 253
    248a:	5f 4f       	sbci	r21, 0xFF	; 255
    248c:	5c af       	sts	0x7c, r21
    248e:	4b af       	sts	0x7b, r20
    2490:	20 31       	cpi	r18, 0x10	; 16
    2492:	31 05       	cpc	r19, r1
    2494:	09 f0       	breq	.+2      	; 0x2498 <tune_8ths+0x30e>
    2496:	26 cf       	rjmp	.-436    	; 0x22e4 <tune_8ths+0x15a>
		}
	
		
		//eeprom_update_block((const void*)vco_pitch_table, (void*)vco_pitch_table_eeprom, sizeof(vco_pitch_table));
		//vco_pitch_table[0] = 0;
		PORTF &= ~(1<<GATE); //turn gate off
    2498:	89 98       	cbi	0x11, 1	; 17
		
		
	
	
	}
    249a:	c0 5c       	subi	r28, 0xC0	; 192
    249c:	df 4f       	sbci	r29, 0xFF	; 255
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	1f 91       	pop	r17
    24ae:	0f 91       	pop	r16
    24b0:	ff 90       	pop	r15
    24b2:	ef 90       	pop	r14
    24b4:	df 90       	pop	r13
    24b6:	cf 90       	pop	r12
    24b8:	bf 90       	pop	r11
    24ba:	af 90       	pop	r10
    24bc:	9f 90       	pop	r9
    24be:	8f 90       	pop	r8
    24c0:	7f 90       	pop	r7
    24c2:	6f 90       	pop	r6
    24c4:	5f 90       	pop	r5
    24c6:	4f 90       	pop	r4
    24c8:	3f 90       	pop	r3
    24ca:	2f 90       	pop	r2
    24cc:	08 95       	ret

000024ce <tune_filter>:
	
void tune_filter(void) {
    24ce:	2f 92       	push	r2
    24d0:	3f 92       	push	r3
    24d2:	4f 92       	push	r4
    24d4:	5f 92       	push	r5
    24d6:	6f 92       	push	r6
    24d8:	7f 92       	push	r7
    24da:	8f 92       	push	r8
    24dc:	9f 92       	push	r9
    24de:	af 92       	push	r10
    24e0:	bf 92       	push	r11
    24e2:	cf 92       	push	r12
    24e4:	df 92       	push	r13
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	0f 93       	push	r16
    24ec:	1f 93       	push	r17
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	e9 97       	sbiw	r28, 0x39	; 57
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
		uint8_t period;
		uint16_t count;
		
	};

	struct pitch_reference reference[15] =
    2502:	de 01       	movw	r26, r28
    2504:	11 96       	adiw	r26, 0x01	; 1
    2506:	e0 e6       	ldi	r30, 0x60	; 96
    2508:	f2 e0       	ldi	r31, 0x02	; 2
    250a:	8d e2       	ldi	r24, 0x2D	; 45
    250c:	01 90       	ld	r0, Z+
    250e:	0d 92       	st	X+, r0
    2510:	81 50       	subi	r24, 0x01	; 1
    2512:	e1 f7       	brne	.-8      	; 0x250c <tune_filter+0x3e>
		
	};

	
	//initialize CVs for filter tuning
	set_control_voltage(&volume_cv, MIN); //turn volume all the way down
    2514:	88 ed       	ldi	r24, 0xD8	; 216
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	60 e0       	ldi	r22, 0x00	; 0
    251a:	70 e0       	ldi	r23, 0x00	; 0
    251c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pitch modulation
	set_control_voltage(&pitch_lfo_cv, MIN);
    2520:	81 ee       	ldi	r24, 0xE1	; 225
    2522:	91 e0       	ldi	r25, 0x01	; 1
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	70 e0       	ldi	r23, 0x00	; 0
    2528:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_eg2_cv, MIN);
    252c:	82 ee       	ldi	r24, 0xE2	; 226
    252e:	91 e0       	ldi	r25, 0x01	; 1
    2530:	60 e0       	ldi	r22, 0x00	; 0
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pitch_vco2_cv, MIN);
    2538:	82 eb       	ldi	r24, 0xB2	; 178
    253a:	92 e0       	ldi	r25, 0x02	; 2
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off glide
	set_control_voltage(&glide_cv, MIN);
    2544:	8a ed       	ldi	r24, 0xDA	; 218
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all pulse width modulation
	set_control_voltage(&pwm_eg2_cv, MIN);
    2550:	8f ed       	ldi	r24, 0xDF	; 223
    2552:	91 e0       	ldi	r25, 0x01	; 1
    2554:	60 e0       	ldi	r22, 0x00	; 0
    2556:	70 e0       	ldi	r23, 0x00	; 0
    2558:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&pwm_lfo_cv, MIN);
    255c:	80 ee       	ldi	r24, 0xE0	; 224
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off all filter modulation
	set_control_voltage(&fil_lfo_cv, MIN);
    2568:	81 ed       	ldi	r24, 0xD1	; 209
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_eg2_cv, MIN);
    2574:	86 ed       	ldi	r24, 0xD6	; 214
    2576:	91 e0       	ldi	r25, 0x01	; 1
    2578:	60 e0       	ldi	r22, 0x00	; 0
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&fil_vco2_cv, MIN);
    2580:	82 ed       	ldi	r24, 0xD2	; 210
    2582:	91 e0       	ldi	r25, 0x01	; 1
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&key_track_cv, MIN);
    258c:	83 ed       	ldi	r24, 0xD3	; 211
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//open filter with max resonance
	set_control_voltage(&cutoff_cv, MAX); //need to start with MAX to get filter oscillating
    2598:	84 ed       	ldi	r24, 0xD4	; 212
    259a:	91 e0       	ldi	r25, 0x01	; 1
    259c:	6f ef       	ldi	r22, 0xFF	; 255
    259e:	7f e3       	ldi	r23, 0x3F	; 63
    25a0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&res_cv, MAX);
    25a4:	85 ed       	ldi	r24, 0xD5	; 213
    25a6:	91 e0       	ldi	r25, 0x01	; 1
    25a8:	6f ef       	ldi	r22, 0xFF	; 255
    25aa:	7f e3       	ldi	r23, 0x3F	; 63
    25ac:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off VCA LFO modulation
	set_control_voltage(&amp_lfo_cv, MIN);
    25b0:	89 ed       	ldi	r24, 0xD9	; 217
    25b2:	91 e0       	ldi	r25, 0x01	; 1
    25b4:	60 e0       	ldi	r22, 0x00	; 0
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//initialize VCA envelope
	set_control_voltage(&attack_1_cv, MIN);
    25bc:	8e ec       	ldi	r24, 0xCE	; 206
    25be:	91 e0       	ldi	r25, 0x01	; 1
    25c0:	60 e0       	ldi	r22, 0x00	; 0
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&decay_1_cv, MIN);
    25c8:	8c ec       	ldi	r24, 0xCC	; 204
    25ca:	91 e0       	ldi	r25, 0x01	; 1
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&sustain_1_cv, MAX);
    25d4:	8a ec       	ldi	r24, 0xCA	; 202
    25d6:	91 e0       	ldi	r25, 0x01	; 1
    25d8:	6f ef       	ldi	r22, 0xFF	; 255
    25da:	7f e3       	ldi	r23, 0x3F	; 63
    25dc:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&release_1_cv, MIN);
    25e0:	88 ec       	ldi	r24, 0xC8	; 200
    25e2:	91 e0       	ldi	r25, 0x01	; 1
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	70 e0       	ldi	r23, 0x00	; 0
    25e8:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	//turn off noise, VCO1 and VCO2
	set_control_voltage(&noise_mix_cv, MIN);
    25ec:	80 ed       	ldi	r24, 0xD0	; 208
    25ee:	91 e0       	ldi	r25, 0x01	; 1
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	70 e0       	ldi	r23, 0x00	; 0
    25f4:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco1_mix_cv, MIN);
    25f8:	83 ee       	ldi	r24, 0xE3	; 227
    25fa:	91 e0       	ldi	r25, 0x01	; 1
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
	set_control_voltage(&vco2_mix_cv, MIN);
    2604:	84 ee       	ldi	r24, 0xE4	; 228
    2606:	91 e0       	ldi	r25, 0x01	; 1
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>


	//latch switch data
	DATA_BUS = 0; //turn off all VCO waveforms
    2610:	12 b8       	out	0x02, r1	; 2
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2612:	ed ed       	ldi	r30, 0xDD	; 221
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	80 64       	ori	r24, 0x40	; 64
    261a:	80 83       	st	Z, r24
	//_delay_us(1); //why is this delay here????
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    261c:	80 81       	ld	r24, Z
    261e:	8f 7b       	andi	r24, 0xBF	; 191
    2620:	80 83       	st	Z, r24
	//DATA_BUS = 0;


	period = 1; //need to initialize to minimum period number here
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	80 93 7b 03 	sts	0x037B, r24
	PORTF |= (1<<GATE); //turn gate on
    2628:	89 9a       	sbi	0x11, 1	; 17
    262a:	9e 01       	movw	r18, r28
    262c:	2f 5f       	subi	r18, 0xFF	; 255
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	3d ab       	sts	0x5d, r19
    2632:	2c ab       	sts	0x5c, r18
    2634:	80 e1       	ldi	r24, 0x10	; 16
    2636:	93 e0       	ldi	r25, 0x03	; 3
    2638:	99 af       	sts	0x79, r25
    263a:	88 af       	sts	0x78, r24
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    263c:	1f aa       	sts	0x9f, r17
    263e:	1e aa       	sts	0x9e, r17
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);

			set_control_voltage(&cutoff_cv, pitch_cv);
    2640:	0f 2e       	mov	r0, r31
    2642:	f4 ed       	ldi	r31, 0xD4	; 212
    2644:	af 2e       	mov	r10, r31
    2646:	f1 e0       	ldi	r31, 0x01	; 1
    2648:	bf 2e       	mov	r11, r31
    264a:	f0 2d       	mov	r31, r0
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    264c:	0f 2e       	mov	r0, r31
    264e:	f8 ed       	ldi	r31, 0xD8	; 216
    2650:	6f 2e       	mov	r6, r31
    2652:	f1 e0       	ldi	r31, 0x01	; 1
    2654:	7f 2e       	mov	r7, r31
    2656:	f0 2d       	mov	r31, r0
				set_control_voltage(&res_cv, MAX);
    2658:	0f 2e       	mov	r0, r31
    265a:	f5 ed       	ldi	r31, 0xD5	; 213
    265c:	4f 2e       	mov	r4, r31
    265e:	f1 e0       	ldi	r31, 0x01	; 1
    2660:	5f 2e       	mov	r5, r31
    2662:	f0 2d       	mov	r31, r0
				set_control_voltage(&sustain_1_cv, MAX);
    2664:	0f 2e       	mov	r0, r31
    2666:	fa ec       	ldi	r31, 0xCA	; 202
    2668:	2f 2e       	mov	r2, r31
    266a:	f1 e0       	ldi	r31, 0x01	; 1
    266c:	3f 2e       	mov	r3, r31
    266e:	f0 2d       	mov	r31, r0
		
	
	
	}
	
void tune_filter(void) {
    2670:	ac a9       	sts	0x4c, r26
    2672:	bd a9       	sts	0x4d, r27
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
	{
		period = reference[note_number].period;
    2674:	8c 91       	ld	r24, X
    2676:	80 93 7b 03 	sts	0x037B, r24
		//period timer needs to be initialized here and turned off after each note's SAR to prevent glitching caused by leaving timer0 running
		TCCR0A |= (1<<CS02) | (1<<CS01) | (1<<CS00) | (1<<WGM01); //clocked by external T0 pin, rising edge + clear timer on compare match
    267a:	84 b5       	in	r24, 0x24	; 36
    267c:	8f 60       	ori	r24, 0x0F	; 15
    267e:	84 bd       	out	0x24, r24	; 36
		OCR0A = 1; //output compare register - set to number of periods to be counted. OCR0A needs to be set to (periods_to_be_counted - 1) ***COULD PROBABLY CHANGE THIS TO 0 NOW*** - NOPE. NEEDS TO BE 1!!!
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	87 bd       	out	0x27, r24	; 39
		TIMSK0 |= (1<<OCIE0A); //enable output compare match A interrupt
    2684:	ee e6       	ldi	r30, 0x6E	; 110
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	82 60       	ori	r24, 0x02	; 2
    268c:	80 83       	st	Z, r24
		TCNT0 = 0; //make sure timer/counter0 is actually 0.
    268e:	16 bc       	out	0x26, r1	; 38
		
		if (note_number <= 1) {
    2690:	ee a9       	sts	0x4e, r30
    2692:	ff a9       	sts	0x4f, r31
    2694:	e2 30       	cpi	r30, 0x02	; 2
    2696:	f1 05       	cpc	r31, r1
    2698:	24 f4       	brge	.+8      	; 0x26a2 <tune_filter+0x1d4>
			
			//set timer/counter1 to /64 0.3125 MHz
			timer1_clock = (1<<CS11) | (1<<CS10);
    269a:	83 e0       	ldi	r24, 0x03	; 3
    269c:	80 93 7a 03 	sts	0x037A, r24
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <tune_filter+0x1da>
			
		} else {
			
			//set timer/counter1 to /8 2.5 MHz
			timer1_clock = (1<<CS11);
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	80 93 7a 03 	sts	0x037A, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
    26a8:	11 96       	adiw	r26, 0x01	; 1
    26aa:	2d 91       	ld	r18, X+
    26ac:	3c 91       	ld	r19, X
    26ae:	12 97       	sbiw	r26, 0x02	; 2
    26b0:	3b ab       	sts	0x5b, r19
    26b2:	2a ab       	sts	0x5a, r18
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    26b4:	8d e0       	ldi	r24, 0x0D	; 13
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9f a7       	lds	r25, 0x7f
    26ba:	8e a7       	lds	r24, 0x7e
			timer1_clock = (1<<CS11);
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
    26bc:	ee 24       	eor	r14, r14
    26be:	ff 24       	eor	r15, r15
				set_control_voltage(&cutoff_cv, pitch_cv);
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    26c0:	0f 2e       	mov	r0, r31
    26c2:	f1 ed       	ldi	r31, 0xD1	; 209
    26c4:	cf 2e       	mov	r12, r31
    26c6:	f1 e0       	ldi	r31, 0x01	; 1
    26c8:	df 2e       	mov	r13, r31
    26ca:	f0 2d       	mov	r31, r0
				set_control_voltage(&fil_eg2_cv, MIN);
    26cc:	0f 2e       	mov	r0, r31
    26ce:	f6 ed       	ldi	r31, 0xD6	; 214
    26d0:	8f 2e       	mov	r8, r31
    26d2:	f1 e0       	ldi	r31, 0x01	; 1
    26d4:	9f 2e       	mov	r9, r31
    26d6:	f0 2d       	mov	r31, r0
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
		
			pitch_cv |= (1<<dac_bit);
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	fc 01       	movw	r30, r24
    26de:	0e a4       	lds	r16, 0xae
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <tune_filter+0x218>
    26e2:	ee 0f       	add	r30, r30
    26e4:	ff 1f       	adc	r31, r31
    26e6:	0a 94       	dec	r0
    26e8:	e2 f7       	brpl	.-8      	; 0x26e2 <tune_filter+0x214>
    26ea:	f9 ab       	sts	0x59, r31
    26ec:	e8 ab       	sts	0x58, r30
    26ee:	ee 2a       	or	r14, r30
    26f0:	ff 2a       	or	r15, r31

			set_control_voltage(&cutoff_cv, pitch_cv);
    26f2:	c5 01       	movw	r24, r10
    26f4:	b7 01       	movw	r22, r14
    26f6:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			count_finished = FALSE;
    26fa:	10 92 79 03 	sts	0x0379, r1
			period_counter = 0;
    26fe:	10 92 7c 03 	sts	0x037C, r1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
    2702:	8f e0       	ldi	r24, 0x0F	; 15
    2704:	28 e1       	ldi	r18, 0x18	; 24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	a8 95       	wdr
    270e:	20 93 60 00 	sts	0x0060, r18
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	80 93 60 00 	sts	0x0060, r24
			while (count_finished == FALSE) {
    2718:	80 91 79 03 	lds	r24, 0x0379
    271c:	88 23       	and	r24, r24
    271e:	b1 f5       	brne	.+108    	; 0x278c <tune_filter+0x2be>
				set_control_voltage(&res_cv, MAX);
				set_control_voltage(&sustain_1_cv, MAX);
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
    2720:	02 ed       	ldi	r16, 0xD2	; 210
    2722:	11 e0       	ldi	r17, 0x01	; 1
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
				//update_display(vco_number + period + (compare_match_counter>>4)*100, DEC);
				update_display(300 + period, DEC);//
    2724:	80 91 7b 03 	lds	r24, 0x037B
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	84 5d       	subi	r24, 0xD4	; 212
    272c:	9e 4f       	sbci	r25, 0xFE	; 254
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	0e 94 47 02 	call	0x48e	; 0x48e <update_display>
				//value_to_display = TCNT0;
				//update_display(value_to_display, DEC);
				
		
				set_control_voltage(&cutoff_cv, pitch_cv);
    2734:	c5 01       	movw	r24, r10
    2736:	b7 01       	movw	r22, r14
    2738:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&volume_cv, MIN);//only necessary for first 2 octaves that use lower frequency reference clock
    273c:	c3 01       	movw	r24, r6
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	70 e0       	ldi	r23, 0x00	; 0
    2742:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&res_cv, MAX);
    2746:	c2 01       	movw	r24, r4
    2748:	6f ef       	ldi	r22, 0xFF	; 255
    274a:	7f e3       	ldi	r23, 0x3F	; 63
    274c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&sustain_1_cv, MAX);
    2750:	c1 01       	movw	r24, r2
    2752:	6f ef       	ldi	r22, 0xFF	; 255
    2754:	7f e3       	ldi	r23, 0x3F	; 63
    2756:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&attack_1_cv, MIN); //keep attack at minimum
    275a:	8e ec       	ldi	r24, 0xCE	; 206
    275c:	91 e0       	ldi	r25, 0x01	; 1
    275e:	60 e0       	ldi	r22, 0x00	; 0
    2760:	70 e0       	ldi	r23, 0x00	; 0
    2762:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_lfo_cv, MIN);	//keep all filter modulation at a minimum
    2766:	c6 01       	movw	r24, r12
    2768:	60 e0       	ldi	r22, 0x00	; 0
    276a:	70 e0       	ldi	r23, 0x00	; 0
    276c:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_eg2_cv, MIN);
    2770:	c4 01       	movw	r24, r8
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
				set_control_voltage(&fil_vco2_cv, MIN);
    277a:	c8 01       	movw	r24, r16
    277c:	60 e0       	ldi	r22, 0x00	; 0
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	0e 94 13 01 	call	0x226	; 0x226 <set_control_voltage>
			count_finished = FALSE;
			period_counter = 0;
		
			//enable watchdog timer
			wdt_enable(WDTO_2S);
			while (count_finished == FALSE) {
    2784:	80 91 79 03 	lds	r24, 0x0379
    2788:	88 23       	and	r24, r24
    278a:	61 f2       	breq	.-104    	; 0x2724 <tune_filter+0x256>
				set_control_voltage(&fil_eg2_cv, MIN);
				set_control_voltage(&fil_vco2_cv, MIN);
						
			}
			//turn off watchdog timer
			wdt_disable();
    278c:	88 e1       	ldi	r24, 0x18	; 24
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	80 93 60 00 	sts	0x0060, r24
    2796:	10 92 60 00 	sts	0x0060, r1
    279a:	0f be       	out	0x3f, r0	; 63
			//Omar changed this from <= to < which makes sense. <= was an error because if it's equal you don't want to clear the bit
			if ((osc_count <= reference_count) && (no_overflow == TRUE))pitch_cv &= ~(1<<dac_bit);
    279c:	80 91 77 03 	lds	r24, 0x0377
    27a0:	90 91 78 03 	lds	r25, 0x0378
    27a4:	2a a9       	sts	0x4a, r18
    27a6:	3b a9       	sts	0x4b, r19
    27a8:	28 17       	cp	r18, r24
    27aa:	39 07       	cpc	r19, r25
    27ac:	50 f0       	brcs	.+20     	; 0x27c2 <tune_filter+0x2f4>
    27ae:	80 91 af 02 	lds	r24, 0x02AF
    27b2:	81 30       	cpi	r24, 0x01	; 1
    27b4:	31 f4       	brne	.+12     	; 0x27c2 <tune_filter+0x2f4>
    27b6:	88 a9       	sts	0x48, r24
    27b8:	99 a9       	sts	0x49, r25
    27ba:	80 95       	com	r24
    27bc:	90 95       	com	r25
    27be:	e8 22       	and	r14, r24
    27c0:	f9 22       	and	r15, r25
		
			if (osc_count == reference_count && no_overflow == TRUE) {
    27c2:	80 91 77 03 	lds	r24, 0x0377
    27c6:	90 91 78 03 	lds	r25, 0x0378
    27ca:	ea a9       	sts	0x4a, r30
    27cc:	fb a9       	sts	0x4b, r31
    27ce:	8e 17       	cp	r24, r30
    27d0:	9f 07       	cpc	r25, r31
    27d2:	21 f4       	brne	.+8      	; 0x27dc <tune_filter+0x30e>
    27d4:	80 91 af 02 	lds	r24, 0x02AF
    27d8:	81 30       	cpi	r24, 0x01	; 1
    27da:	71 f0       	breq	.+28     	; 0x27f8 <tune_filter+0x32a>
				break;	//if you hit the reference count then get out of here
			}
			no_overflow = TRUE;
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	80 93 af 02 	sts	0x02AF, r24
			
		}
		//the following should be moved to its own function as it is duplicated in the init_cv function. Something like tune_note(*cv, period, reference_count), where *cv points to CV that needs to be calculated`
		uint16_t reference_count = reference[note_number].count;
		uint16_t pitch_cv = 0;
		for (int dac_bit = 13; dac_bit >= 0; dac_bit--) { //now do successive approximation
    27e2:	2e a5       	lds	r18, 0x6e
    27e4:	3f a5       	lds	r19, 0x6f
    27e6:	21 50       	subi	r18, 0x01	; 1
    27e8:	30 40       	sbci	r19, 0x00	; 0
    27ea:	3f a7       	lds	r19, 0x7f
    27ec:	2e a7       	lds	r18, 0x7e
    27ee:	8f ef       	ldi	r24, 0xFF	; 255
    27f0:	2f 3f       	cpi	r18, 0xFF	; 255
    27f2:	38 07       	cpc	r19, r24
    27f4:	09 f0       	breq	.+2      	; 0x27f8 <tune_filter+0x32a>
    27f6:	70 cf       	rjmp	.-288    	; 0x26d8 <tune_filter+0x20a>
		
		
	}
	
	
	filter_pitch_table[note_number+1] = pitch_cv + 32; //32 is an offset that is trying to fix a bug somewhere else. This fix seems to work, but why 2^5 shift is required doesn't make sense to me yet. Need to look into this further
    27f8:	ee a9       	sts	0x4e, r30
    27fa:	ff a9       	sts	0x4f, r31
    27fc:	31 96       	adiw	r30, 0x01	; 1
    27fe:	ff ab       	sts	0x5f, r31
    2800:	ee ab       	sts	0x5e, r30
    2802:	c7 01       	movw	r24, r14
    2804:	80 96       	adiw	r24, 0x20	; 32
    2806:	e8 ad       	sts	0x68, r30
    2808:	f9 ad       	sts	0x69, r31
    280a:	81 93       	st	Z+, r24
    280c:	91 93       	st	Z+, r25
    280e:	f9 af       	sts	0x79, r31
    2810:	e8 af       	sts	0x78, r30
	
	//need to turn timer off here. This seems to have stopped periodic glitching of first note of first VCO tuned.
	TIMSK0 &= ~(1<<OCIE0A); //turn off timer0 compare match A interrupt
    2812:	ee e6       	ldi	r30, 0x6E	; 110
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	8d 7f       	andi	r24, 0xFD	; 253
    281a:	80 83       	st	Z, r24
	TCCR0A = 0; //turn off timer0
    281c:	14 bc       	out	0x24, r1	; 36
    281e:	2c a9       	sts	0x4c, r18
    2820:	3d a9       	sts	0x4d, r19
    2822:	2d 5f       	subi	r18, 0xFD	; 253
    2824:	3f 4f       	sbci	r19, 0xFF	; 255
    2826:	3d ab       	sts	0x5d, r19
    2828:	2c ab       	sts	0x5c, r18
	period = 1; //need to initialize to minimum period number here
	PORTF |= (1<<GATE); //turn gate on
	
	
	
	for (int note_number = 0; note_number <= 14; note_number++)
    282a:	8e a9       	sts	0x4e, r24
    282c:	9f a9       	sts	0x4f, r25
    282e:	8f 30       	cpi	r24, 0x0F	; 15
    2830:	91 05       	cpc	r25, r1
    2832:	09 f0       	breq	.+2      	; 0x2836 <tune_filter+0x368>
    2834:	1d cf       	rjmp	.-454    	; 0x2670 <tune_filter+0x1a2>
}


//eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));

PORTF &= ~(1<<GATE); //turn gate off
    2836:	89 98       	cbi	0x11, 1	; 17
	
	
}	
    2838:	e9 96       	adiw	r28, 0x39	; 57
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	ff 90       	pop	r15
    284e:	ef 90       	pop	r14
    2850:	df 90       	pop	r13
    2852:	cf 90       	pop	r12
    2854:	bf 90       	pop	r11
    2856:	af 90       	pop	r10
    2858:	9f 90       	pop	r9
    285a:	8f 90       	pop	r8
    285c:	7f 90       	pop	r7
    285e:	6f 90       	pop	r6
    2860:	5f 90       	pop	r5
    2862:	4f 90       	pop	r4
    2864:	3f 90       	pop	r3
    2866:	2f 90       	pop	r2
    2868:	08 95       	ret

0000286a <save_tuning_tables>:


void save_tuning_tables(void) { //write tuning tables to memory
	
	eeprom_update_block((const void*)filter_pitch_table, (void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    286a:	8e e0       	ldi	r24, 0x0E	; 14
    286c:	93 e0       	ldi	r25, 0x03	; 3
    286e:	6c e0       	ldi	r22, 0x0C	; 12
    2870:	76 e0       	ldi	r23, 0x06	; 6
    2872:	40 e2       	ldi	r20, 0x20	; 32
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco1_pitch_table, (void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    287a:	80 e5       	ldi	r24, 0x50	; 80
    287c:	93 e0       	ldi	r25, 0x03	; 3
    287e:	6e e4       	ldi	r22, 0x4E	; 78
    2880:	76 e0       	ldi	r23, 0x06	; 6
    2882:	42 e2       	ldi	r20, 0x22	; 34
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__eeupd_block_m6450a>
	eeprom_update_block((const void*)vco2_pitch_table, (void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    288a:	8e e2       	ldi	r24, 0x2E	; 46
    288c:	93 e0       	ldi	r25, 0x03	; 3
    288e:	6c e2       	ldi	r22, 0x2C	; 44
    2890:	76 e0       	ldi	r23, 0x06	; 6
    2892:	42 e2       	ldi	r20, 0x22	; 34
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__eeupd_block_m6450a>
	
	
}
    289a:	08 95       	ret

0000289c <load_tuning_tables>:

void load_tuning_tables(void) { //retrieve tuning tables from memory
	
	
	vco1_init_cv = eeprom_read_word(&vco1_init_cv_eeprom);
    289c:	82 e7       	ldi	r24, 0x72	; 114
    289e:	96 e0       	ldi	r25, 0x06	; 6
    28a0:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__eerd_word_m6450a>
    28a4:	90 93 75 03 	sts	0x0375, r25
    28a8:	80 93 74 03 	sts	0x0374, r24
	vco2_init_cv = eeprom_read_word(&vco2_init_cv_eeprom);
    28ac:	80 e7       	ldi	r24, 0x70	; 112
    28ae:	96 e0       	ldi	r25, 0x06	; 6
    28b0:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__eerd_word_m6450a>
    28b4:	90 93 73 03 	sts	0x0373, r25
    28b8:	80 93 72 03 	sts	0x0372, r24
	//uint16_t eeprom_addr = 0;
	//vco1_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	//eeprom_addr += sizeof(vco2_init_cv);
	//vco2_init_cv = eeprom_read_word((uint16_t*)eeprom_addr);
	eeprom_read_block((void*)vco1_pitch_table, (const void*)vco1_pitch_table_eeprom, sizeof(vco1_pitch_table));
    28bc:	80 e5       	ldi	r24, 0x50	; 80
    28be:	93 e0       	ldi	r25, 0x03	; 3
    28c0:	6e e4       	ldi	r22, 0x4E	; 78
    28c2:	76 e0       	ldi	r23, 0x06	; 6
    28c4:	42 e2       	ldi	r20, 0x22	; 34
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__eerd_block_m6450a>
	eeprom_read_block((void*)vco2_pitch_table, (const void*)vco2_pitch_table_eeprom, sizeof(vco2_pitch_table));
    28cc:	8e e2       	ldi	r24, 0x2E	; 46
    28ce:	93 e0       	ldi	r25, 0x03	; 3
    28d0:	6c e2       	ldi	r22, 0x2C	; 44
    28d2:	76 e0       	ldi	r23, 0x06	; 6
    28d4:	42 e2       	ldi	r20, 0x22	; 34
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__eerd_block_m6450a>
	eeprom_read_block((void*)filter_pitch_table, (const void*)filter_pitch_table_eeprom, sizeof(filter_pitch_table));
    28dc:	8e e0       	ldi	r24, 0x0E	; 14
    28de:	93 e0       	ldi	r25, 0x03	; 3
    28e0:	6c e0       	ldi	r22, 0x0C	; 12
    28e2:	76 e0       	ldi	r23, 0x06	; 6
    28e4:	40 e2       	ldi	r20, 0x20	; 32
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__eerd_block_m6450a>
	
	//value_to_display = vco1_init_cv_eeprom;
	
}			
    28ec:	08 95       	ret

000028ee <interpolate_pitch_cv>:
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
    28ee:	98 2f       	mov	r25, r24
    28f0:	96 95       	lsr	r25
    28f2:	96 95       	lsr	r25
    28f4:	96 95       	lsr	r25
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
		
	uint16_t y0 = pitch_table[pitch_index -1];
    28f6:	29 2f       	mov	r18, r25
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	f9 01       	movw	r30, r18
    28fc:	31 97       	sbiw	r30, 0x01	; 1
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 1f       	adc	r31, r31
    2902:	e6 0f       	add	r30, r22
    2904:	f7 1f       	adc	r31, r23
    2906:	01 90       	ld	r0, Z+
    2908:	f0 81       	ld	r31, Z
    290a:	e0 2d       	mov	r30, r0
	uint16_t y1 = pitch_table[pitch_index];
    290c:	22 0f       	add	r18, r18
    290e:	33 1f       	adc	r19, r19
    2910:	26 0f       	add	r18, r22
    2912:	37 1f       	adc	r19, r23
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2914:	d9 01       	movw	r26, r18
    2916:	4d 91       	ld	r20, X+
    2918:	5c 91       	ld	r21, X
    291a:	11 97       	sbiw	r26, 0x01	; 1
    291c:	4e 1b       	sub	r20, r30
    291e:	5f 0b       	sbc	r21, r31
}			
	
uint16_t interpolate_pitch_cv(uint8_t note, uint16_t *pitch_table) {
	
	uint8_t pitch_index = note>>3;
	uint8_t delta_note = note - pitch_index*8; //will range from 0 to 7
    2920:	99 0f       	add	r25, r25
    2922:	99 0f       	add	r25, r25
    2924:	99 0f       	add	r25, r25
    2926:	89 1b       	sub	r24, r25
		
	uint16_t y0 = pitch_table[pitch_index -1];
	uint16_t y1 = pitch_table[pitch_index];
	
	uint16_t interpolated_pitch_cv = y0 + (((y1 - y0)*delta_note)>>3); //mind order of operations here: + is evaluated before >>	also, might be possible to optimize this with 16MUL8SHIFT8 from Anushri ASM util
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	48 9f       	mul	r20, r24
    292c:	90 01       	movw	r18, r0
    292e:	49 9f       	mul	r20, r25
    2930:	30 0d       	add	r19, r0
    2932:	58 9f       	mul	r21, r24
    2934:	30 0d       	add	r19, r0
    2936:	11 24       	eor	r1, r1
    2938:	36 95       	lsr	r19
    293a:	27 95       	ror	r18
    293c:	36 95       	lsr	r19
    293e:	27 95       	ror	r18
    2940:	36 95       	lsr	r19
    2942:	27 95       	ror	r18
    2944:	e2 0f       	add	r30, r18
    2946:	f3 1f       	adc	r31, r19
	
	
	
	return interpolated_pitch_cv;
	
}
    2948:	8e 2f       	mov	r24, r30
    294a:	9f 2f       	mov	r25, r31
    294c:	08 95       	ret

0000294e <set_one_volt_per_octave>:

void set_one_volt_per_octave(void) { //does this get stored in RAM? Should it go in progmem instead?
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	a2 97       	sbiw	r28, 0x22	; 34
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t vpo_pitch_table[17] = {
    2962:	de 01       	movw	r26, r28
    2964:	11 96       	adiw	r26, 0x01	; 1
    2966:	ed e8       	ldi	r30, 0x8D	; 141
    2968:	f2 e0       	ldi	r31, 0x02	; 2
    296a:	82 e2       	ldi	r24, 0x22	; 34
    296c:	01 90       	ld	r0, Z+
    296e:	0d 92       	st	X+, r0
    2970:	81 50       	subi	r24, 0x01	; 1
    2972:	e1 f7       	brne	.-8      	; 0x296c <set_one_volt_per_octave+0x1e>
		16384
		
	};
	
	
	memcpy((void*)vco1_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2974:	a0 e5       	ldi	r26, 0x50	; 80
    2976:	b3 e0       	ldi	r27, 0x03	; 3
    2978:	fe 01       	movw	r30, r28
    297a:	31 96       	adiw	r30, 0x01	; 1
    297c:	82 e2       	ldi	r24, 0x22	; 34
    297e:	01 90       	ld	r0, Z+
    2980:	0d 92       	st	X+, r0
    2982:	81 50       	subi	r24, 0x01	; 1
    2984:	e1 f7       	brne	.-8      	; 0x297e <set_one_volt_per_octave+0x30>
	memcpy((void*)vco2_pitch_table, (const void*)vpo_pitch_table, (size_t)sizeof(vpo_pitch_table));
    2986:	ae e2       	ldi	r26, 0x2E	; 46
    2988:	b3 e0       	ldi	r27, 0x03	; 3
    298a:	fe 01       	movw	r30, r28
    298c:	31 96       	adiw	r30, 0x01	; 1
    298e:	82 e2       	ldi	r24, 0x22	; 34
    2990:	01 90       	ld	r0, Z+
    2992:	0d 92       	st	X+, r0
    2994:	81 50       	subi	r24, 0x01	; 1
    2996:	e1 f7       	brne	.-8      	; 0x2990 <set_one_volt_per_octave+0x42>
	
	
}
    2998:	a2 96       	adiw	r28, 0x22	; 34
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	08 95       	ret

000029aa <tune>:
void tune(void) {
	

			
			//turn off Timer1 output compare match now, it is used by the system clock
			TIMSK1 &= (1<<OCIE1A);
    29aa:	ef e6       	ldi	r30, 0x6F	; 111
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	82 70       	andi	r24, 0x02	; 2
    29b2:	80 83       	st	Z, r24
			//get rid of CTC here for Timer1 too
			TCCR1B &= ~(1<<WGM12); //turn off CTC
    29b4:	e1 e8       	ldi	r30, 0x81	; 129
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	87 7f       	andi	r24, 0xF7	; 247
    29bc:	80 83       	st	Z, r24
			
			vco1_init_cv = set_vco_init_cv(VCO1, 24079);
    29be:	8f e0       	ldi	r24, 0x0F	; 15
    29c0:	6f e0       	ldi	r22, 0x0F	; 15
    29c2:	7e e5       	ldi	r23, 0x5E	; 94
    29c4:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <set_vco_init_cv>
    29c8:	90 93 75 03 	sts	0x0375, r25
    29cc:	80 93 74 03 	sts	0x0374, r24
			vco2_init_cv = set_vco_init_cv(VCO2, 24079);
    29d0:	80 ef       	ldi	r24, 0xF0	; 240
    29d2:	6f e0       	ldi	r22, 0x0F	; 15
    29d4:	7e e5       	ldi	r23, 0x5E	; 94
    29d6:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <set_vco_init_cv>
    29da:	90 93 73 03 	sts	0x0373, r25
    29de:	80 93 72 03 	sts	0x0372, r24
			//vco1_init_cv = vco2_init_cv;
			tune_8ths(VCO1);
    29e2:	8f e0       	ldi	r24, 0x0F	; 15
    29e4:	0e 94 c5 10 	call	0x218a	; 0x218a <tune_8ths>
			tune_8ths(VCO2);
    29e8:	80 ef       	ldi	r24, 0xF0	; 240
    29ea:	0e 94 c5 10 	call	0x218a	; 0x218a <tune_8ths>
			tune_filter();
    29ee:	0e 94 67 12 	call	0x24ce	; 0x24ce <tune_filter>
    29f2:	8f e4       	ldi	r24, 0x4F	; 79
    29f4:	93 ec       	ldi	r25, 0xC3	; 195
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <tune+0x4c>
    29fa:	00 c0       	rjmp	.+0      	; 0x29fc <tune+0x52>
    29fc:	00 00       	nop
			//save_tuning_tables();
			_delay_ms(200);	//give some time for release to decay to avoid pops
			
			//need to restore Timer1 settings. This currently happens after the function is called, but should really be included here
	
    29fe:	08 95       	ret

00002a00 <read_switch_port>:
uint8_t read_switch_port(void) {
	
	static uint8_t previous_port_state = 0;
	static uint16_t prog_hold_counter = 0;
	
	uint8_t current_port_state = SWITCH_PORT; //read switch state byte
    2a00:	8f b1       	in	r24, 0x0f	; 15
	switch_press |= current_port_state & 0b00001100; //mask for four PROG buttons 
    2a02:	98 2f       	mov	r25, r24
    2a04:	9c 70       	andi	r25, 0x0C	; 12
    2a06:	20 91 c1 02 	lds	r18, 0x02C1
    2a0a:	92 2b       	or	r25, r18
    2a0c:	90 93 c1 02 	sts	0x02C1, r25
	
	if ((current_port_state >> PROG_DOWN_SW) & 1) { //press and hold handler for PROG DOWN switch. Should have a general framework for handling switch presses and holds
    2a10:	98 2f       	mov	r25, r24
    2a12:	92 95       	swap	r25
    2a14:	96 95       	lsr	r25
    2a16:	97 70       	andi	r25, 0x07	; 7
    2a18:	90 ff       	sbrs	r25, 0
    2a1a:	16 c0       	rjmp	.+44     	; 0x2a48 <read_switch_port+0x48>
		
		if (++prog_hold_counter == 600) { //problem here is that the hold time is dependent on main loop execution speed. Could maybe somehow link this to Timer1, which is running at constant /1024
    2a1c:	20 91 80 03 	lds	r18, 0x0380
    2a20:	30 91 81 03 	lds	r19, 0x0381
    2a24:	2f 5f       	subi	r18, 0xFF	; 255
    2a26:	3f 4f       	sbci	r19, 0xFF	; 255
    2a28:	30 93 81 03 	sts	0x0381, r19
    2a2c:	20 93 80 03 	sts	0x0380, r18
    2a30:	92 e0       	ldi	r25, 0x02	; 2
    2a32:	28 35       	cpi	r18, 0x58	; 88
    2a34:	39 07       	cpc	r19, r25
    2a36:	61 f4       	brne	.+24     	; 0x2a50 <read_switch_port+0x50>
			
			prog_hold_counter = 0; //shouldn't need this as prog_hold_counter will overflow to 0 on next press
    2a38:	10 92 81 03 	sts	0x0381, r1
    2a3c:	10 92 80 03 	sts	0x0380, r1
			current_patch.mode = CAL;
    2a40:	95 e0       	ldi	r25, 0x05	; 5
    2a42:	90 93 07 03 	sts	0x0307, r25
    2a46:	04 c0       	rjmp	.+8      	; 0x2a50 <read_switch_port+0x50>
			
		}
		
	} else { prog_hold_counter = 0;} //reset counter to 0
    2a48:	10 92 81 03 	sts	0x0381, r1
    2a4c:	10 92 80 03 	sts	0x0380, r1
		
	//this toggle code works, but I haven't figured out how it works
	//source: http://forum.allaboutcircuits.com/threads/help-with-programming-uc-toggle-led-using-one-switch.51602/	
	current_port_state ^= previous_port_state;
    2a50:	90 91 82 03 	lds	r25, 0x0382
    2a54:	89 27       	eor	r24, r25
	previous_port_state ^= current_port_state;
    2a56:	98 27       	eor	r25, r24
    2a58:	90 93 82 03 	sts	0x0382, r25
	current_port_state &= previous_port_state;
	
	return current_port_state;
	
}
    2a5c:	89 23       	and	r24, r25
    2a5e:	08 95       	ret

00002a60 <update_analog_switch_latch>:

void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2a60:	ed ed       	ldi	r30, 0xDD	; 221
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	90 81       	ld	r25, Z
    2a66:	9f 7b       	andi	r25, 0xBF	; 191
    2a68:	90 83       	st	Z, r25
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	21 70       	andi	r18, 0x01	; 1
    2a70:	30 70       	andi	r19, 0x00	; 0
    2a72:	22 0f       	add	r18, r18
    2a74:	33 1f       	adc	r19, r19
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
    2a76:	68 2f       	mov	r22, r24
    2a78:	62 95       	swap	r22
    2a7a:	66 95       	lsr	r22
    2a7c:	67 70       	andi	r22, 0x07	; 7
    2a7e:	67 95       	ror	r22
    2a80:	66 27       	eor	r22, r22
    2a82:	67 95       	ror	r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2a84:	26 2b       	or	r18, r22
    2a86:	98 2f       	mov	r25, r24
    2a88:	96 95       	lsr	r25
    2a8a:	96 95       	lsr	r25
    2a8c:	91 70       	andi	r25, 0x01	; 1
    2a8e:	29 2b       	or	r18, r25
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
    2a90:	68 2f       	mov	r22, r24
    2a92:	66 1f       	adc	r22, r22
    2a94:	66 27       	eor	r22, r22
    2a96:	66 1f       	adc	r22, r22
    2a98:	66 0f       	add	r22, r22
    2a9a:	66 0f       	add	r22, r22
    2a9c:	66 0f       	add	r22, r22
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2a9e:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
    2aa0:	a8 2f       	mov	r26, r24
    2aa2:	a6 95       	lsr	r26
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	a1 70       	andi	r26, 0x01	; 1
    2aa8:	b0 70       	andi	r27, 0x00	; 0
    2aaa:	bd 01       	movw	r22, r26
    2aac:	66 0f       	add	r22, r22
    2aae:	77 1f       	adc	r23, r23
    2ab0:	66 0f       	add	r22, r22
    2ab2:	77 1f       	adc	r23, r23
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2ab4:	26 2b       	or	r18, r22
	((switch_state_byte >> VCO_SYNC_SW) & 1) << VCO_SYNC_LATCH_BIT |
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
    2ab6:	68 2f       	mov	r22, r24
    2ab8:	62 95       	swap	r22
    2aba:	6f 70       	andi	r22, 0x0F	; 15
    2abc:	70 e0       	ldi	r23, 0x00	; 0
    2abe:	61 70       	andi	r22, 0x01	; 1
    2ac0:	70 70       	andi	r23, 0x00	; 0
    2ac2:	ab 01       	movw	r20, r22
    2ac4:	00 24       	eor	r0, r0
    2ac6:	56 95       	lsr	r21
    2ac8:	47 95       	ror	r20
    2aca:	07 94       	ror	r0
    2acc:	56 95       	lsr	r21
    2ace:	47 95       	ror	r20
    2ad0:	07 94       	ror	r0
    2ad2:	54 2f       	mov	r21, r20
    2ad4:	40 2d       	mov	r20, r0
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2ad6:	62 2f       	mov	r22, r18
    2ad8:	64 2b       	or	r22, r20
	((switch_state_byte >> VCO1_SAW_SW) & 1) << VCO1_SAW_LATCH_BIT |
	((switch_state_byte >> VCO1_TRI_SW) & 1) << VCO1_TRI_LATCH_BIT |
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
    2ada:	48 2f       	mov	r20, r24
    2adc:	42 95       	swap	r20
    2ade:	46 95       	lsr	r20
    2ae0:	46 95       	lsr	r20
    2ae2:	43 70       	andi	r20, 0x03	; 3
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	41 70       	andi	r20, 0x01	; 1
    2ae8:	50 70       	andi	r21, 0x00	; 0
    2aea:	9a 01       	movw	r18, r20
    2aec:	22 0f       	add	r18, r18
    2aee:	33 1f       	adc	r19, r19
    2af0:	22 95       	swap	r18
    2af2:	32 95       	swap	r19
    2af4:	30 7f       	andi	r19, 0xF0	; 240
    2af6:	32 27       	eor	r19, r18
    2af8:	20 7f       	andi	r18, 0xF0	; 240
    2afa:	32 27       	eor	r19, r18
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2afc:	46 2f       	mov	r20, r22
    2afe:	42 2b       	or	r20, r18
	((switch_state_byte >> VCO1_PULSE_SW) & 1) << VCO1_PULSE_LATCH_BIT |
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
    2b00:	86 95       	lsr	r24
    2b02:	86 95       	lsr	r24
    2b04:	86 95       	lsr	r24
    2b06:	28 2f       	mov	r18, r24
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	21 70       	andi	r18, 0x01	; 1
    2b0c:	30 70       	andi	r19, 0x00	; 0
    2b0e:	c9 01       	movw	r24, r18
    2b10:	82 95       	swap	r24
    2b12:	92 95       	swap	r25
    2b14:	90 7f       	andi	r25, 0xF0	; 240
    2b16:	98 27       	eor	r25, r24
    2b18:	80 7f       	andi	r24, 0xF0	; 240
    2b1a:	98 27       	eor	r25, r24
void update_analog_switch_latch(uint8_t switch_state_byte) {
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
	//enable output on VCO analog switch latch:
	//switch latch: 7: B TRI 6: B SAW 5: B PULSE 4: B MOD 3: VCO_SYNC_LATCH_BIT 2: A TRI 1: A PULSE 0: A SAW
	DATA_BUS = //I wonder if some kind of bitmask could be implemented here to do a single cycle manipulation rather than a bit-by-bit change
    2b1c:	84 2b       	or	r24, r20
    2b1e:	82 b9       	out	0x02, r24	; 2
	((switch_state_byte >> VCO2_SAW_SW) & 1) << VCO2_SAW_LATCH_BIT |
	((switch_state_byte >> VCO2_TRI_SW) & 1) << VCO2_TRI_LATCH_BIT |
	((switch_state_byte >> VCO2_PULSE_SW) & 1) << VCO2_PULSE_LATCH_BIT |
	//BMOD_SW_ON << BMOD_LATCH_BIT;
	((switch_state_byte >> 3) & 1) << BMOD_LATCH_BIT;
	VCO_SW_LATCH_PORT |= (1<<VCO_SW_LATCH);
    2b20:	80 81       	ld	r24, Z
    2b22:	80 64       	ori	r24, 0x40	; 64
    2b24:	80 83       	st	Z, r24
	
	VCO_SW_LATCH_PORT &= ~(1<<VCO_SW_LATCH);
    2b26:	80 81       	ld	r24, Z
    2b28:	8f 7b       	andi	r24, 0xBF	; 191
    2b2a:	80 83       	st	Z, r24
	DATA_BUS = 0;
    2b2c:	12 b8       	out	0x02, r1	; 2
	
	
    2b2e:	08 95       	ret

00002b30 <bytequeue_init>:
//along with avr-bytequeue.  If not, see <http://www.gnu.org/licenses/>.

#include "bytequeue.h"
#include "interrupt_setting.h"

void bytequeue_init(byteQueue_t * queue, uint8_t * dataArray, byteQueueIndex_t arrayLen){
    2b30:	fc 01       	movw	r30, r24
   queue->length = arrayLen;
    2b32:	42 83       	std	Z+2, r20	; 0x02
   queue->data = dataArray;
    2b34:	74 83       	std	Z+4, r23	; 0x04
    2b36:	63 83       	std	Z+3, r22	; 0x03
   queue->start = queue->end = 0;
    2b38:	11 82       	std	Z+1, r1	; 0x01
    2b3a:	10 82       	st	Z, r1
}
    2b3c:	08 95       	ret

00002b3e <bytequeue_enqueue>:

bool bytequeue_enqueue(byteQueue_t * queue, uint8_t item){
    2b3e:	1f 93       	push	r17
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	ec 01       	movw	r28, r24
    2b46:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2b48:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <store_and_clear_interrupt>
    2b4c:	28 2f       	mov	r18, r24
   //full
   if(((queue->end + 1) % queue->length) == queue->start){
    2b4e:	39 81       	ldd	r19, Y+1	; 0x01
    2b50:	83 2f       	mov	r24, r19
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	01 96       	adiw	r24, 0x01	; 1
    2b56:	6a 81       	ldd	r22, Y+2	; 0x02
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    2b5a:	0e 94 86 1c 	call	0x390c	; 0x390c <__divmodhi4>
    2b5e:	48 81       	ld	r20, Y
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	84 17       	cp	r24, r20
    2b64:	95 07       	cpc	r25, r21
    2b66:	29 f4       	brne	.+10     	; 0x2b72 <bytequeue_enqueue+0x34>
      restore_interrupt_setting(setting);
    2b68:	82 2f       	mov	r24, r18
    2b6a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <restore_interrupt_setting>
      return false;
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	11 c0       	rjmp	.+34     	; 0x2b94 <bytequeue_enqueue+0x56>
   } else {
      queue->data[queue->end] = item;
    2b72:	eb 81       	ldd	r30, Y+3	; 0x03
    2b74:	fc 81       	ldd	r31, Y+4	; 0x04
    2b76:	e3 0f       	add	r30, r19
    2b78:	f1 1d       	adc	r31, r1
    2b7a:	10 83       	st	Z, r17
      queue->end = (queue->end + 1) % queue->length;
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	6a 81       	ldd	r22, Y+2	; 0x02
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	0e 94 86 1c 	call	0x390c	; 0x390c <__divmodhi4>
    2b8a:	89 83       	std	Y+1, r24	; 0x01
      restore_interrupt_setting(setting);
    2b8c:	82 2f       	mov	r24, r18
    2b8e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <restore_interrupt_setting>
      return true;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	1f 91       	pop	r17
    2b9a:	08 95       	ret

00002b9c <bytequeue_length>:

byteQueueIndex_t bytequeue_length(byteQueue_t * queue){
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	ec 01       	movw	r28, r24
   byteQueueIndex_t len;
   interrupt_setting_t setting = store_and_clear_interrupt();
    2ba2:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <store_and_clear_interrupt>
   if(queue->end >= queue->start)
    2ba6:	29 81       	ldd	r18, Y+1	; 0x01
    2ba8:	98 81       	ld	r25, Y
    2baa:	29 17       	cp	r18, r25
    2bac:	18 f0       	brcs	.+6      	; 0x2bb4 <bytequeue_length+0x18>
      len = queue->end - queue->start;
    2bae:	c2 2f       	mov	r28, r18
    2bb0:	c9 1b       	sub	r28, r25
    2bb2:	03 c0       	rjmp	.+6      	; 0x2bba <bytequeue_length+0x1e>
   else
      len = (queue->length - queue->start) + queue->end;
    2bb4:	ca 81       	ldd	r28, Y+2	; 0x02
    2bb6:	c2 0f       	add	r28, r18
    2bb8:	c9 1b       	sub	r28, r25
   restore_interrupt_setting(setting);
    2bba:	0e 94 11 16 	call	0x2c22	; 0x2c22 <restore_interrupt_setting>
   return len;
}
    2bbe:	8c 2f       	mov	r24, r28
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	08 95       	ret

00002bc6 <bytequeue_get>:

//we don't need to avoid interrupts if there is only one reader
uint8_t bytequeue_get(byteQueue_t * queue, byteQueueIndex_t index){
    2bc6:	fc 01       	movw	r30, r24
   return queue->data[(queue->start + index) % queue->length];
    2bc8:	20 81       	ld	r18, Z
    2bca:	86 2f       	mov	r24, r22
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	82 0f       	add	r24, r18
    2bd0:	91 1d       	adc	r25, r1
    2bd2:	62 81       	ldd	r22, Z+2	; 0x02
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	0e 94 86 1c 	call	0x390c	; 0x390c <__divmodhi4>
    2bda:	03 80       	ldd	r0, Z+3	; 0x03
    2bdc:	f4 81       	ldd	r31, Z+4	; 0x04
    2bde:	e0 2d       	mov	r30, r0
    2be0:	e8 0f       	add	r30, r24
    2be2:	f9 1f       	adc	r31, r25
}
    2be4:	80 81       	ld	r24, Z
    2be6:	08 95       	ret

00002be8 <bytequeue_remove>:

//we just update the start index to remove elements
void bytequeue_remove(byteQueue_t * queue, byteQueueIndex_t numToRemove){
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	ec 01       	movw	r28, r24
    2bf0:	16 2f       	mov	r17, r22
   interrupt_setting_t setting = store_and_clear_interrupt();
    2bf2:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <store_and_clear_interrupt>
    2bf6:	48 2f       	mov	r20, r24
   queue->start = (queue->start + numToRemove) % queue->length;
    2bf8:	88 81       	ld	r24, Y
    2bfa:	21 2f       	mov	r18, r17
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	28 0f       	add	r18, r24
    2c00:	31 1d       	adc	r19, r1
    2c02:	6a 81       	ldd	r22, Y+2	; 0x02
    2c04:	c9 01       	movw	r24, r18
    2c06:	70 e0       	ldi	r23, 0x00	; 0
    2c08:	0e 94 86 1c 	call	0x390c	; 0x390c <__divmodhi4>
    2c0c:	88 83       	st	Y, r24
   restore_interrupt_setting(setting);
    2c0e:	84 2f       	mov	r24, r20
    2c10:	0e 94 11 16 	call	0x2c22	; 0x2c22 <restore_interrupt_setting>
}
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	1f 91       	pop	r17
    2c1a:	08 95       	ret

00002c1c <store_and_clear_interrupt>:

#include "interrupt_setting.h"
#include <avr/interrupt.h>

interrupt_setting_t store_and_clear_interrupt(void) {
   uint8_t sreg = SREG;
    2c1c:	8f b7       	in	r24, 0x3f	; 63
   cli();
    2c1e:	f8 94       	cli
   return sreg;
}
    2c20:	08 95       	ret

00002c22 <restore_interrupt_setting>:

void restore_interrupt_setting(interrupt_setting_t setting) {
   SREG = setting;
    2c22:	8f bf       	out	0x3f, r24	; 63
}
    2c24:	08 95       	ret

00002c26 <midi_is_statusbyte>:
#define NULL 0
#endif

bool midi_is_statusbyte(uint8_t theByte){
   return (bool)(theByte & MIDI_STATUSMASK);
}
    2c26:	88 1f       	adc	r24, r24
    2c28:	88 27       	eor	r24, r24
    2c2a:	88 1f       	adc	r24, r24
    2c2c:	08 95       	ret

00002c2e <midi_is_realtime>:

bool midi_is_realtime(uint8_t theByte){
   return (theByte >= MIDI_CLOCK);
    2c2e:	91 e0       	ldi	r25, 0x01	; 1
    2c30:	88 3f       	cpi	r24, 0xF8	; 248
    2c32:	08 f4       	brcc	.+2      	; 0x2c36 <midi_is_realtime+0x8>
    2c34:	90 e0       	ldi	r25, 0x00	; 0
}
    2c36:	89 2f       	mov	r24, r25
    2c38:	08 95       	ret

00002c3a <midi_packet_length>:

midi_packet_length_t midi_packet_length(uint8_t status){
   switch(status & 0xF0){
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	20 7f       	andi	r18, 0xF0	; 240
    2c40:	30 70       	andi	r19, 0x00	; 0
    2c42:	20 3c       	cpi	r18, 0xC0	; 192
    2c44:	31 05       	cpc	r19, r1
    2c46:	e9 f1       	breq	.+122    	; 0x2cc2 <midi_packet_length+0x88>
    2c48:	21 3c       	cpi	r18, 0xC1	; 193
    2c4a:	31 05       	cpc	r19, r1
    2c4c:	8c f4       	brge	.+34     	; 0x2c70 <midi_packet_length+0x36>
    2c4e:	20 39       	cpi	r18, 0x90	; 144
    2c50:	31 05       	cpc	r19, r1
    2c52:	e1 f0       	breq	.+56     	; 0x2c8c <midi_packet_length+0x52>
    2c54:	21 39       	cpi	r18, 0x91	; 145
    2c56:	31 05       	cpc	r19, r1
    2c58:	24 f4       	brge	.+8      	; 0x2c62 <midi_packet_length+0x28>
    2c5a:	20 38       	cpi	r18, 0x80	; 128
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	79 f5       	brne	.+94     	; 0x2cbe <midi_packet_length+0x84>
    2c60:	15 c0       	rjmp	.+42     	; 0x2c8c <midi_packet_length+0x52>
    2c62:	20 3a       	cpi	r18, 0xA0	; 160
    2c64:	31 05       	cpc	r19, r1
    2c66:	91 f0       	breq	.+36     	; 0x2c8c <midi_packet_length+0x52>
    2c68:	20 3b       	cpi	r18, 0xB0	; 176
    2c6a:	31 05       	cpc	r19, r1
    2c6c:	41 f5       	brne	.+80     	; 0x2cbe <midi_packet_length+0x84>
    2c6e:	0e c0       	rjmp	.+28     	; 0x2c8c <midi_packet_length+0x52>
    2c70:	20 3e       	cpi	r18, 0xE0	; 224
    2c72:	31 05       	cpc	r19, r1
    2c74:	59 f0       	breq	.+22     	; 0x2c8c <midi_packet_length+0x52>
    2c76:	21 3e       	cpi	r18, 0xE1	; 225
    2c78:	31 05       	cpc	r19, r1
    2c7a:	24 f4       	brge	.+8      	; 0x2c84 <midi_packet_length+0x4a>
    2c7c:	20 3d       	cpi	r18, 0xD0	; 208
    2c7e:	31 05       	cpc	r19, r1
    2c80:	f1 f4       	brne	.+60     	; 0x2cbe <midi_packet_length+0x84>
    2c82:	1f c0       	rjmp	.+62     	; 0x2cc2 <midi_packet_length+0x88>
    2c84:	20 3f       	cpi	r18, 0xF0	; 240
    2c86:	31 05       	cpc	r19, r1
    2c88:	d1 f4       	brne	.+52     	; 0x2cbe <midi_packet_length+0x84>
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <midi_packet_length+0x56>
      case MIDI_CC:
      case MIDI_NOTEON:
      case MIDI_NOTEOFF:
      case MIDI_AFTERTOUCH:
      case MIDI_PITCHBEND:
         return THREE3;
    2c8c:	83 e0       	ldi	r24, 0x03	; 3
    2c8e:	08 95       	ret
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
      case 0xF0:
         switch(status) {
    2c90:	86 3f       	cpi	r24, 0xF6	; 246
    2c92:	79 f0       	breq	.+30     	; 0x2cb2 <midi_packet_length+0x78>
    2c94:	87 3f       	cpi	r24, 0xF7	; 247
    2c96:	38 f4       	brcc	.+14     	; 0x2ca6 <midi_packet_length+0x6c>
    2c98:	82 3f       	cpi	r24, 0xF2	; 242
    2c9a:	a9 f0       	breq	.+42     	; 0x2cc6 <midi_packet_length+0x8c>
    2c9c:	83 3f       	cpi	r24, 0xF3	; 243
    2c9e:	59 f0       	breq	.+22     	; 0x2cb6 <midi_packet_length+0x7c>
    2ca0:	81 3f       	cpi	r24, 0xF1	; 241
    2ca2:	59 f4       	brne	.+22     	; 0x2cba <midi_packet_length+0x80>
    2ca4:	08 c0       	rjmp	.+16     	; 0x2cb6 <midi_packet_length+0x7c>
    2ca6:	88 3f       	cpi	r24, 0xF8	; 248
    2ca8:	40 f0       	brcs	.+16     	; 0x2cba <midi_packet_length+0x80>
    2caa:	8d 3f       	cpi	r24, 0xFD	; 253
    2cac:	10 f0       	brcs	.+4      	; 0x2cb2 <midi_packet_length+0x78>
    2cae:	8e 3f       	cpi	r24, 0xFE	; 254
    2cb0:	20 f0       	brcs	.+8      	; 0x2cba <midi_packet_length+0x80>
            case MIDI_CONTINUE:
            case MIDI_STOP:
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	08 95       	ret
            case MIDI_SONGPOSITION:
               return THREE3;
            case MIDI_TC_QUARTERFRAME:
            case MIDI_SONGSELECT:
               return TWO2;
    2cb6:	82 e0       	ldi	r24, 0x02	; 2
    2cb8:	08 95       	ret
            case SYSEX_END:
            case SYSEX_BEGIN:
            default:
               return UNDEFINED;
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	08 95       	ret
         }
      default:
         return UNDEFINED;
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	08 95       	ret
      case MIDI_PITCHBEND:
         return THREE3;
      case MIDI_PROGCHANGE:
      case MIDI_CHANPRESSURE:
      case MIDI_SONGSELECT:
         return TWO2;
    2cc2:	82 e0       	ldi	r24, 0x02	; 2
    2cc4:	08 95       	ret
            case MIDI_ACTIVESENSE:
            case MIDI_RESET:
            case MIDI_TUNEREQUEST:
               return ONE1;
            case MIDI_SONGPOSITION:
               return THREE3;
    2cc6:	83 e0       	ldi	r24, 0x03	; 3
               return UNDEFINED;
         }
      default:
         return UNDEFINED;
   }
}
    2cc8:	08 95       	ret

00002cca <midi_send_cc>:

void midi_send_cc(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t val){
    2cca:	0f 93       	push	r16
    2ccc:	34 2f       	mov	r19, r20
    2cce:	02 2f       	mov	r16, r18
   //CC Status: 0xB0 to 0xBF where the low nibble is the MIDI channel.
   //CC Data: Controller Num, Controller Val
   device->send_func(device, 3,
    2cd0:	46 2f       	mov	r20, r22
    2cd2:	4f 70       	andi	r20, 0x0F	; 15
    2cd4:	40 6b       	ori	r20, 0xB0	; 176
    2cd6:	23 2f       	mov	r18, r19
    2cd8:	2f 77       	andi	r18, 0x7F	; 127
    2cda:	0f 77       	andi	r16, 0x7F	; 127
    2cdc:	dc 01       	movw	r26, r24
    2cde:	ed 91       	ld	r30, X+
    2ce0:	fc 91       	ld	r31, X
    2ce2:	63 e0       	ldi	r22, 0x03	; 3
    2ce4:	70 e0       	ldi	r23, 0x00	; 0
    2ce6:	09 95       	icall
         MIDI_CC | (chan & MIDI_CHANMASK),
         num & 0x7F,
         val & 0x7F);
}
    2ce8:	0f 91       	pop	r16
    2cea:	08 95       	ret

00002cec <midi_send_noteon>:

void midi_send_noteon(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2cec:	0f 93       	push	r16
    2cee:	34 2f       	mov	r19, r20
    2cf0:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2cf2:	46 2f       	mov	r20, r22
    2cf4:	4f 70       	andi	r20, 0x0F	; 15
    2cf6:	40 69       	ori	r20, 0x90	; 144
    2cf8:	23 2f       	mov	r18, r19
    2cfa:	2f 77       	andi	r18, 0x7F	; 127
    2cfc:	0f 77       	andi	r16, 0x7F	; 127
    2cfe:	dc 01       	movw	r26, r24
    2d00:	ed 91       	ld	r30, X+
    2d02:	fc 91       	ld	r31, X
    2d04:	63 e0       	ldi	r22, 0x03	; 3
    2d06:	70 e0       	ldi	r23, 0x00	; 0
    2d08:	09 95       	icall
         MIDI_NOTEON | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2d0a:	0f 91       	pop	r16
    2d0c:	08 95       	ret

00002d0e <midi_send_noteoff>:

void midi_send_noteoff(MidiDevice * device, uint8_t chan, uint8_t num, uint8_t vel){
    2d0e:	0f 93       	push	r16
    2d10:	34 2f       	mov	r19, r20
    2d12:	02 2f       	mov	r16, r18
   //Note Data: Note Num, Note Velocity
   device->send_func(device, 3,
    2d14:	46 2f       	mov	r20, r22
    2d16:	4f 70       	andi	r20, 0x0F	; 15
    2d18:	40 68       	ori	r20, 0x80	; 128
    2d1a:	23 2f       	mov	r18, r19
    2d1c:	2f 77       	andi	r18, 0x7F	; 127
    2d1e:	0f 77       	andi	r16, 0x7F	; 127
    2d20:	dc 01       	movw	r26, r24
    2d22:	ed 91       	ld	r30, X+
    2d24:	fc 91       	ld	r31, X
    2d26:	63 e0       	ldi	r22, 0x03	; 3
    2d28:	70 e0       	ldi	r23, 0x00	; 0
    2d2a:	09 95       	icall
         MIDI_NOTEOFF | (chan & MIDI_CHANMASK),
         num & 0x7F,
         vel & 0x7F);
}
    2d2c:	0f 91       	pop	r16
    2d2e:	08 95       	ret

00002d30 <midi_send_aftertouch>:

void midi_send_aftertouch(MidiDevice * device, uint8_t chan, uint8_t note_num, uint8_t amt){
    2d30:	0f 93       	push	r16
    2d32:	34 2f       	mov	r19, r20
    2d34:	02 2f       	mov	r16, r18
   device->send_func(device, 3,
    2d36:	46 2f       	mov	r20, r22
    2d38:	4f 70       	andi	r20, 0x0F	; 15
    2d3a:	40 6a       	ori	r20, 0xA0	; 160
    2d3c:	23 2f       	mov	r18, r19
    2d3e:	2f 77       	andi	r18, 0x7F	; 127
    2d40:	0f 77       	andi	r16, 0x7F	; 127
    2d42:	dc 01       	movw	r26, r24
    2d44:	ed 91       	ld	r30, X+
    2d46:	fc 91       	ld	r31, X
    2d48:	63 e0       	ldi	r22, 0x03	; 3
    2d4a:	70 e0       	ldi	r23, 0x00	; 0
    2d4c:	09 95       	icall
         MIDI_AFTERTOUCH | (chan & MIDI_CHANMASK),
         note_num & 0x7F,
         amt & 0x7F);
}
    2d4e:	0f 91       	pop	r16
    2d50:	08 95       	ret

00002d52 <midi_send_pitchbend>:

//XXX does this work right?
//amt in range -0x2000, 0x1fff
//uAmt should be in range..
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
    2d52:	0f 93       	push	r16
    2d54:	1f 93       	push	r17
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
    2d56:	20 e2       	ldi	r18, 0x20	; 32
    2d58:	40 30       	cpi	r20, 0x00	; 0
    2d5a:	52 07       	cpc	r21, r18
    2d5c:	44 f4       	brge	.+16     	; 0x2d6e <midi_send_pitchbend+0x1c>
      uAmt = 0x3FFF;
   } else if(amt < -0x2000){
    2d5e:	a0 ee       	ldi	r26, 0xE0	; 224
    2d60:	40 30       	cpi	r20, 0x00	; 0
    2d62:	5a 07       	cpc	r21, r26
    2d64:	3c f0       	brlt	.+14     	; 0x2d74 <midi_send_pitchbend+0x22>
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
    2d66:	8a 01       	movw	r16, r20
    2d68:	00 50       	subi	r16, 0x00	; 0
    2d6a:	10 4e       	sbci	r17, 0xE0	; 224
    2d6c:	05 c0       	rjmp	.+10     	; 0x2d78 <midi_send_pitchbend+0x26>
//0x0000 to 0x3FFF
void midi_send_pitchbend(MidiDevice * device, uint8_t chan, int16_t amt){
   uint16_t uAmt;
   //check range
   if(amt > 0x1fff){
      uAmt = 0x3FFF;
    2d6e:	0f ef       	ldi	r16, 0xFF	; 255
    2d70:	1f e3       	ldi	r17, 0x3F	; 63
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <midi_send_pitchbend+0x26>
   } else if(amt < -0x2000){
      uAmt = 0;
    2d74:	00 e0       	ldi	r16, 0x00	; 0
    2d76:	10 e0       	ldi	r17, 0x00	; 0
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2d78:	46 2f       	mov	r20, r22
    2d7a:	4f 70       	andi	r20, 0x0F	; 15
    2d7c:	40 6e       	ori	r20, 0xE0	; 224
    2d7e:	20 2f       	mov	r18, r16
    2d80:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
    2d82:	00 0f       	add	r16, r16
    2d84:	01 2f       	mov	r16, r17
    2d86:	00 1f       	adc	r16, r16
    2d88:	11 0b       	sbc	r17, r17
    2d8a:	11 95       	neg	r17
   } else if(amt < -0x2000){
      uAmt = 0;
   } else {
      uAmt = amt + 0x2000;
   }
   device->send_func(device, 3,
    2d8c:	0f 77       	andi	r16, 0x7F	; 127
    2d8e:	dc 01       	movw	r26, r24
    2d90:	ed 91       	ld	r30, X+
    2d92:	fc 91       	ld	r31, X
    2d94:	63 e0       	ldi	r22, 0x03	; 3
    2d96:	70 e0       	ldi	r23, 0x00	; 0
    2d98:	09 95       	icall
         MIDI_PITCHBEND | (chan & MIDI_CHANMASK),
         uAmt & 0x7F,
         (uAmt >> 7) & 0x7F);
}
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	08 95       	ret

00002da0 <midi_send_programchange>:

void midi_send_programchange(MidiDevice * device, uint8_t chan, uint8_t num){
    2da0:	0f 93       	push	r16
    2da2:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2da4:	46 2f       	mov	r20, r22
    2da6:	4f 70       	andi	r20, 0x0F	; 15
    2da8:	40 6c       	ori	r20, 0xC0	; 192
    2daa:	2f 77       	andi	r18, 0x7F	; 127
    2dac:	dc 01       	movw	r26, r24
    2dae:	ed 91       	ld	r30, X+
    2db0:	fc 91       	ld	r31, X
    2db2:	62 e0       	ldi	r22, 0x02	; 2
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	00 e0       	ldi	r16, 0x00	; 0
    2db8:	09 95       	icall
         MIDI_PROGCHANGE | (chan & MIDI_CHANMASK),
         num & 0x7F,
         0);
}
    2dba:	0f 91       	pop	r16
    2dbc:	08 95       	ret

00002dbe <midi_send_channelpressure>:

void midi_send_channelpressure(MidiDevice * device, uint8_t chan, uint8_t amt){
    2dbe:	0f 93       	push	r16
    2dc0:	24 2f       	mov	r18, r20
   device->send_func(device, 2,
    2dc2:	46 2f       	mov	r20, r22
    2dc4:	4f 70       	andi	r20, 0x0F	; 15
    2dc6:	40 6d       	ori	r20, 0xD0	; 208
    2dc8:	2f 77       	andi	r18, 0x7F	; 127
    2dca:	dc 01       	movw	r26, r24
    2dcc:	ed 91       	ld	r30, X+
    2dce:	fc 91       	ld	r31, X
    2dd0:	62 e0       	ldi	r22, 0x02	; 2
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	00 e0       	ldi	r16, 0x00	; 0
    2dd6:	09 95       	icall
         MIDI_CHANPRESSURE | (chan & MIDI_CHANMASK),
         amt & 0x7F,
         0);
}
    2dd8:	0f 91       	pop	r16
    2dda:	08 95       	ret

00002ddc <midi_send_clock>:

void midi_send_clock(MidiDevice * device){
    2ddc:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CLOCK, 0, 0);
    2dde:	dc 01       	movw	r26, r24
    2de0:	ed 91       	ld	r30, X+
    2de2:	fc 91       	ld	r31, X
    2de4:	61 e0       	ldi	r22, 0x01	; 1
    2de6:	70 e0       	ldi	r23, 0x00	; 0
    2de8:	48 ef       	ldi	r20, 0xF8	; 248
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	00 e0       	ldi	r16, 0x00	; 0
    2dee:	09 95       	icall
}
    2df0:	0f 91       	pop	r16
    2df2:	08 95       	ret

00002df4 <midi_send_tick>:

void midi_send_tick(MidiDevice * device){
    2df4:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TICK, 0, 0);
    2df6:	dc 01       	movw	r26, r24
    2df8:	ed 91       	ld	r30, X+
    2dfa:	fc 91       	ld	r31, X
    2dfc:	61 e0       	ldi	r22, 0x01	; 1
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	49 ef       	ldi	r20, 0xF9	; 249
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	00 e0       	ldi	r16, 0x00	; 0
    2e06:	09 95       	icall
}
    2e08:	0f 91       	pop	r16
    2e0a:	08 95       	ret

00002e0c <midi_send_start>:

void midi_send_start(MidiDevice * device){
    2e0c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_START, 0, 0);
    2e0e:	dc 01       	movw	r26, r24
    2e10:	ed 91       	ld	r30, X+
    2e12:	fc 91       	ld	r31, X
    2e14:	61 e0       	ldi	r22, 0x01	; 1
    2e16:	70 e0       	ldi	r23, 0x00	; 0
    2e18:	4a ef       	ldi	r20, 0xFA	; 250
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	00 e0       	ldi	r16, 0x00	; 0
    2e1e:	09 95       	icall
}
    2e20:	0f 91       	pop	r16
    2e22:	08 95       	ret

00002e24 <midi_send_continue>:

void midi_send_continue(MidiDevice * device){
    2e24:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_CONTINUE, 0, 0);
    2e26:	dc 01       	movw	r26, r24
    2e28:	ed 91       	ld	r30, X+
    2e2a:	fc 91       	ld	r31, X
    2e2c:	61 e0       	ldi	r22, 0x01	; 1
    2e2e:	70 e0       	ldi	r23, 0x00	; 0
    2e30:	4b ef       	ldi	r20, 0xFB	; 251
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	00 e0       	ldi	r16, 0x00	; 0
    2e36:	09 95       	icall
}
    2e38:	0f 91       	pop	r16
    2e3a:	08 95       	ret

00002e3c <midi_send_stop>:

void midi_send_stop(MidiDevice * device){
    2e3c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_STOP, 0, 0);
    2e3e:	dc 01       	movw	r26, r24
    2e40:	ed 91       	ld	r30, X+
    2e42:	fc 91       	ld	r31, X
    2e44:	61 e0       	ldi	r22, 0x01	; 1
    2e46:	70 e0       	ldi	r23, 0x00	; 0
    2e48:	4c ef       	ldi	r20, 0xFC	; 252
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	00 e0       	ldi	r16, 0x00	; 0
    2e4e:	09 95       	icall
}
    2e50:	0f 91       	pop	r16
    2e52:	08 95       	ret

00002e54 <midi_send_activesense>:

void midi_send_activesense(MidiDevice * device){
    2e54:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_ACTIVESENSE, 0, 0);
    2e56:	dc 01       	movw	r26, r24
    2e58:	ed 91       	ld	r30, X+
    2e5a:	fc 91       	ld	r31, X
    2e5c:	61 e0       	ldi	r22, 0x01	; 1
    2e5e:	70 e0       	ldi	r23, 0x00	; 0
    2e60:	4e ef       	ldi	r20, 0xFE	; 254
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	00 e0       	ldi	r16, 0x00	; 0
    2e66:	09 95       	icall
}
    2e68:	0f 91       	pop	r16
    2e6a:	08 95       	ret

00002e6c <midi_send_reset>:

void midi_send_reset(MidiDevice * device){
    2e6c:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_RESET, 0, 0);
    2e6e:	dc 01       	movw	r26, r24
    2e70:	ed 91       	ld	r30, X+
    2e72:	fc 91       	ld	r31, X
    2e74:	61 e0       	ldi	r22, 0x01	; 1
    2e76:	70 e0       	ldi	r23, 0x00	; 0
    2e78:	4f ef       	ldi	r20, 0xFF	; 255
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	00 e0       	ldi	r16, 0x00	; 0
    2e7e:	09 95       	icall
}
    2e80:	0f 91       	pop	r16
    2e82:	08 95       	ret

00002e84 <midi_send_tcquarterframe>:

void midi_send_tcquarterframe(MidiDevice * device, uint8_t time){
    2e84:	0f 93       	push	r16
   device->send_func(device, 2,
    2e86:	26 2f       	mov	r18, r22
    2e88:	2f 77       	andi	r18, 0x7F	; 127
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	ed 91       	ld	r30, X+
    2e8e:	fc 91       	ld	r31, X
    2e90:	62 e0       	ldi	r22, 0x02	; 2
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	41 ef       	ldi	r20, 0xF1	; 241
    2e96:	00 e0       	ldi	r16, 0x00	; 0
    2e98:	09 95       	icall
         MIDI_TC_QUARTERFRAME,
         time & 0x7F,
         0);
}
    2e9a:	0f 91       	pop	r16
    2e9c:	08 95       	ret

00002e9e <midi_send_songposition>:

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
    2e9e:	0f 93       	push	r16
    2ea0:	1f 93       	push	r17
   device->send_func(device, 3,
    2ea2:	26 2f       	mov	r18, r22
    2ea4:	2f 77       	andi	r18, 0x7F	; 127
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
    2ea6:	8b 01       	movw	r16, r22
    2ea8:	00 0f       	add	r16, r16
    2eaa:	01 2f       	mov	r16, r17
    2eac:	00 1f       	adc	r16, r16
    2eae:	11 0b       	sbc	r17, r17
    2eb0:	11 95       	neg	r17
         0);
}

//XXX is this right?
void midi_send_songposition(MidiDevice * device, uint16_t pos){
   device->send_func(device, 3,
    2eb2:	0f 77       	andi	r16, 0x7F	; 127
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	ed 91       	ld	r30, X+
    2eb8:	fc 91       	ld	r31, X
    2eba:	63 e0       	ldi	r22, 0x03	; 3
    2ebc:	70 e0       	ldi	r23, 0x00	; 0
    2ebe:	42 ef       	ldi	r20, 0xF2	; 242
    2ec0:	09 95       	icall
         MIDI_SONGPOSITION,
         pos & 0x7F,
         (pos >> 7) & 0x7F);
}
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	08 95       	ret

00002ec8 <midi_send_songselect>:

void midi_send_songselect(MidiDevice * device, uint8_t song){
    2ec8:	0f 93       	push	r16
   device->send_func(device, 2,
    2eca:	26 2f       	mov	r18, r22
    2ecc:	2f 77       	andi	r18, 0x7F	; 127
    2ece:	dc 01       	movw	r26, r24
    2ed0:	ed 91       	ld	r30, X+
    2ed2:	fc 91       	ld	r31, X
    2ed4:	62 e0       	ldi	r22, 0x02	; 2
    2ed6:	70 e0       	ldi	r23, 0x00	; 0
    2ed8:	43 ef       	ldi	r20, 0xF3	; 243
    2eda:	00 e0       	ldi	r16, 0x00	; 0
    2edc:	09 95       	icall
         MIDI_SONGSELECT,
         song & 0x7F,
         0);
}
    2ede:	0f 91       	pop	r16
    2ee0:	08 95       	ret

00002ee2 <midi_send_tunerequest>:

void midi_send_tunerequest(MidiDevice * device){
    2ee2:	0f 93       	push	r16
   device->send_func(device, 1, MIDI_TUNEREQUEST, 0, 0);
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	ed 91       	ld	r30, X+
    2ee8:	fc 91       	ld	r31, X
    2eea:	61 e0       	ldi	r22, 0x01	; 1
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	46 ef       	ldi	r20, 0xF6	; 246
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	00 e0       	ldi	r16, 0x00	; 0
    2ef4:	09 95       	icall
}
    2ef6:	0f 91       	pop	r16
    2ef8:	08 95       	ret

00002efa <midi_send_byte>:

void midi_send_byte(MidiDevice * device, uint8_t b){
    2efa:	0f 93       	push	r16
    2efc:	46 2f       	mov	r20, r22
   device->send_func(device, 1, b, 0, 0);
    2efe:	dc 01       	movw	r26, r24
    2f00:	ed 91       	ld	r30, X+
    2f02:	fc 91       	ld	r31, X
    2f04:	61 e0       	ldi	r22, 0x01	; 1
    2f06:	70 e0       	ldi	r23, 0x00	; 0
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	00 e0       	ldi	r16, 0x00	; 0
    2f0c:	09 95       	icall
}
    2f0e:	0f 91       	pop	r16
    2f10:	08 95       	ret

00002f12 <midi_send_data>:

void midi_send_data(MidiDevice * device, uint16_t count, uint8_t byte0, uint8_t byte1, uint8_t byte2){
    2f12:	0f 93       	push	r16
   //ensure that the count passed along is always 3 or lower
   if (count > 3) {
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
    2f14:	dc 01       	movw	r26, r24
    2f16:	ed 91       	ld	r30, X+
    2f18:	fc 91       	ld	r31, X
    2f1a:	09 95       	icall
}
    2f1c:	0f 91       	pop	r16
    2f1e:	08 95       	ret

00002f20 <midi_send_array>:

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2f20:	6f 92       	push	r6
    2f22:	7f 92       	push	r7
    2f24:	8f 92       	push	r8
    2f26:	9f 92       	push	r9
    2f28:	af 92       	push	r10
    2f2a:	bf 92       	push	r11
    2f2c:	cf 92       	push	r12
    2f2e:	df 92       	push	r13
    2f30:	ef 92       	push	r14
    2f32:	ff 92       	push	r15
    2f34:	0f 93       	push	r16
    2f36:	1f 93       	push	r17
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	00 d0       	rcall	.+0      	; 0x2f3e <midi_send_array+0x1e>
    2f3e:	0f 92       	push	r0
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	4c 01       	movw	r8, r24
    2f46:	6b 01       	movw	r12, r22
    2f48:	5a 01       	movw	r10, r20
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2f4a:	61 15       	cp	r22, r1
    2f4c:	71 05       	cpc	r23, r1
    2f4e:	41 f1       	breq	.+80     	; 0x2fa0 <midi_send_array+0x80>
    2f50:	ee 24       	eor	r14, r14
    2f52:	ff 24       	eor	r15, r15
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    2f54:	0f 2e       	mov	r0, r31
    2f56:	f3 e0       	ldi	r31, 0x03	; 3
    2f58:	6f 2e       	mov	r6, r31
    2f5a:	77 24       	eor	r7, r7
    2f5c:	f0 2d       	mov	r31, r0
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    2f5e:	19 82       	std	Y+1, r1	; 0x01
    2f60:	1a 82       	std	Y+2, r1	; 0x02
    2f62:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t to_send = count - i;
    2f64:	86 01       	movw	r16, r12
    2f66:	0e 19       	sub	r16, r14
    2f68:	1f 09       	sbc	r17, r15
    to_send = (to_send > 3) ? 3 : to_send;
    2f6a:	04 30       	cpi	r16, 0x04	; 4
    2f6c:	11 05       	cpc	r17, r1
    2f6e:	08 f0       	brcs	.+2      	; 0x2f72 <midi_send_array+0x52>
    2f70:	83 01       	movw	r16, r6
      //TODO how to do this correctly?
   }
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
    2f72:	b5 01       	movw	r22, r10
    2f74:	6e 0d       	add	r22, r14
    2f76:	7f 1d       	adc	r23, r15
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    uint8_t b[3] = { 0, 0, 0 };
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    2f78:	ce 01       	movw	r24, r28
    2f7a:	01 96       	adiw	r24, 0x01	; 1
    2f7c:	40 2f       	mov	r20, r16
    2f7e:	51 2f       	mov	r21, r17
    2f80:	0e 94 99 1c 	call	0x3932	; 0x3932 <memcpy>
    midi_send_data(device, to_send, b[0], b[1], b[2]);
    2f84:	c4 01       	movw	r24, r8
    2f86:	b8 01       	movw	r22, r16
    2f88:	49 81       	ldd	r20, Y+1	; 0x01
    2f8a:	2a 81       	ldd	r18, Y+2	; 0x02
    2f8c:	0b 81       	ldd	r16, Y+3	; 0x03
    2f8e:	0e 94 89 17 	call	0x2f12	; 0x2f12 <midi_send_data>
   device->send_func(device, count, byte0, byte1, byte2);
}

void midi_send_array(MidiDevice * device, uint16_t count, uint8_t * array) {
  uint16_t i;
  for (i = 0; i < count; i += 3) {
    2f92:	83 e0       	ldi	r24, 0x03	; 3
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	e8 0e       	add	r14, r24
    2f98:	f9 1e       	adc	r15, r25
    2f9a:	ec 14       	cp	r14, r12
    2f9c:	fd 04       	cpc	r15, r13
    2f9e:	f8 f2       	brcs	.-66     	; 0x2f5e <midi_send_array+0x3e>
    uint16_t to_send = count - i;
    to_send = (to_send > 3) ? 3 : to_send;
    memcpy(b, array + i, to_send);
    midi_send_data(device, to_send, b[0], b[1], b[2]);
  }
}
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	1f 91       	pop	r17
    2fac:	0f 91       	pop	r16
    2fae:	ff 90       	pop	r15
    2fb0:	ef 90       	pop	r14
    2fb2:	df 90       	pop	r13
    2fb4:	cf 90       	pop	r12
    2fb6:	bf 90       	pop	r11
    2fb8:	af 90       	pop	r10
    2fba:	9f 90       	pop	r9
    2fbc:	8f 90       	pop	r8
    2fbe:	7f 90       	pop	r7
    2fc0:	6f 90       	pop	r6
    2fc2:	08 95       	ret

00002fc4 <midi_register_cc_callback>:


void midi_register_cc_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_cc_callback = func;
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	73 83       	std	Z+3, r23	; 0x03
    2fc8:	62 83       	std	Z+2, r22	; 0x02
}
    2fca:	08 95       	ret

00002fcc <midi_register_noteon_callback>:

void midi_register_noteon_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteon_callback = func;
    2fcc:	fc 01       	movw	r30, r24
    2fce:	75 83       	std	Z+5, r23	; 0x05
    2fd0:	64 83       	std	Z+4, r22	; 0x04
}
    2fd2:	08 95       	ret

00002fd4 <midi_register_noteoff_callback>:

void midi_register_noteoff_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_noteoff_callback = func;
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	77 83       	std	Z+7, r23	; 0x07
    2fd8:	66 83       	std	Z+6, r22	; 0x06
}
    2fda:	08 95       	ret

00002fdc <midi_register_aftertouch_callback>:

void midi_register_aftertouch_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_aftertouch_callback = func;
    2fdc:	fc 01       	movw	r30, r24
    2fde:	71 87       	std	Z+9, r23	; 0x09
    2fe0:	60 87       	std	Z+8, r22	; 0x08
}
    2fe2:	08 95       	ret

00002fe4 <midi_register_pitchbend_callback>:

void midi_register_pitchbend_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_pitchbend_callback = func;
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	73 87       	std	Z+11, r23	; 0x0b
    2fe8:	62 87       	std	Z+10, r22	; 0x0a
}
    2fea:	08 95       	ret

00002fec <midi_register_songposition_callback>:

void midi_register_songposition_callback(MidiDevice * device, midi_three_byte_func_t func){
   device->input_songposition_callback = func;
    2fec:	fc 01       	movw	r30, r24
    2fee:	75 87       	std	Z+13, r23	; 0x0d
    2ff0:	64 87       	std	Z+12, r22	; 0x0c
}
    2ff2:	08 95       	ret

00002ff4 <midi_register_progchange_callback>:

void midi_register_progchange_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_progchange_callback = func;
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	77 87       	std	Z+15, r23	; 0x0f
    2ff8:	66 87       	std	Z+14, r22	; 0x0e
}
    2ffa:	08 95       	ret

00002ffc <midi_register_chanpressure_callback>:

void midi_register_chanpressure_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_chanpressure_callback = func;
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	71 8b       	std	Z+17, r23	; 0x11
    3000:	60 8b       	std	Z+16, r22	; 0x10
}
    3002:	08 95       	ret

00003004 <midi_register_songselect_callback>:

void midi_register_songselect_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_songselect_callback = func;
    3004:	fc 01       	movw	r30, r24
    3006:	73 8b       	std	Z+19, r23	; 0x13
    3008:	62 8b       	std	Z+18, r22	; 0x12
}
    300a:	08 95       	ret

0000300c <midi_register_tc_quarterframe_callback>:

void midi_register_tc_quarterframe_callback(MidiDevice * device, midi_two_byte_func_t func) {
   device->input_tc_quarterframe_callback = func;
    300c:	fc 01       	movw	r30, r24
    300e:	75 8b       	std	Z+21, r23	; 0x15
    3010:	64 8b       	std	Z+20, r22	; 0x14
}
    3012:	08 95       	ret

00003014 <midi_register_realtime_callback>:

void midi_register_realtime_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_realtime_callback = func;
    3014:	fc 01       	movw	r30, r24
    3016:	77 8b       	std	Z+23, r23	; 0x17
    3018:	66 8b       	std	Z+22, r22	; 0x16
}
    301a:	08 95       	ret

0000301c <midi_register_tunerequest_callback>:

void midi_register_tunerequest_callback(MidiDevice * device, midi_one_byte_func_t func){
   device->input_tunerequest_callback = func;
    301c:	fc 01       	movw	r30, r24
    301e:	71 8f       	std	Z+25, r23	; 0x19
    3020:	60 8f       	std	Z+24, r22	; 0x18
}
    3022:	08 95       	ret

00003024 <midi_register_sysex_callback>:

void midi_register_sysex_callback(MidiDevice * device, midi_sysex_func_t func) {
   device->input_sysex_callback = func;
    3024:	fc 01       	movw	r30, r24
    3026:	73 8f       	std	Z+27, r23	; 0x1b
    3028:	62 8f       	std	Z+26, r22	; 0x1a
}
    302a:	08 95       	ret

0000302c <midi_register_fallthrough_callback>:

void midi_register_fallthrough_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_fallthrough_callback = func;
    302c:	fc 01       	movw	r30, r24
    302e:	75 8f       	std	Z+29, r23	; 0x1d
    3030:	64 8f       	std	Z+28, r22	; 0x1c
}
    3032:	08 95       	ret

00003034 <midi_register_catchall_callback>:

void midi_register_catchall_callback(MidiDevice * device, midi_var_byte_func_t func){
   device->input_catchall_callback = func;
    3034:	fc 01       	movw	r30, r24
    3036:	77 8f       	std	Z+31, r23	; 0x1f
    3038:	66 8f       	std	Z+30, r22	; 0x1e
}
    303a:	08 95       	ret

0000303c <midi_device_init>:

//forward declarations, internally used to call the callbacks
void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
void midi_process_byte(MidiDevice * device, uint8_t input);

void midi_device_init(MidiDevice * device){
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	ec 01       	movw	r28, r24
  device->input_state = IDLE;
    3042:	1d a2       	lds	r17, 0x9d
  device->input_count = 0;
    3044:	1f a2       	lds	r17, 0x9f
    3046:	1e a2       	lds	r17, 0x9e
  bytequeue_init(&device->input_queue, device->input_queue_data, MIDI_INPUT_QUEUE_LENGTH);
    3048:	bc 01       	movw	r22, r24
    304a:	68 5d       	subi	r22, 0xD8	; 216
    304c:	7f 4f       	sbci	r23, 0xFF	; 255
    304e:	88 51       	subi	r24, 0x18	; 24
    3050:	9f 4f       	sbci	r25, 0xFF	; 255
    3052:	40 ec       	ldi	r20, 0xC0	; 192
    3054:	0e 94 98 15 	call	0x2b30	; 0x2b30 <bytequeue_init>

  //three byte funcs
  device->input_cc_callback = NULL;
    3058:	1b 82       	std	Y+3, r1	; 0x03
    305a:	1a 82       	std	Y+2, r1	; 0x02
  device->input_noteon_callback = NULL;
    305c:	1d 82       	std	Y+5, r1	; 0x05
    305e:	1c 82       	std	Y+4, r1	; 0x04
  device->input_noteoff_callback = NULL;
    3060:	1f 82       	std	Y+7, r1	; 0x07
    3062:	1e 82       	std	Y+6, r1	; 0x06
  device->input_aftertouch_callback = NULL;
    3064:	19 86       	std	Y+9, r1	; 0x09
    3066:	18 86       	std	Y+8, r1	; 0x08
  device->input_pitchbend_callback = NULL;
    3068:	1b 86       	std	Y+11, r1	; 0x0b
    306a:	1a 86       	std	Y+10, r1	; 0x0a
  device->input_songposition_callback = NULL;
    306c:	1d 86       	std	Y+13, r1	; 0x0d
    306e:	1c 86       	std	Y+12, r1	; 0x0c

  //two byte funcs
  device->input_progchange_callback = NULL;
    3070:	1f 86       	std	Y+15, r1	; 0x0f
    3072:	1e 86       	std	Y+14, r1	; 0x0e
  device->input_chanpressure_callback = NULL;
    3074:	19 8a       	std	Y+17, r1	; 0x11
    3076:	18 8a       	std	Y+16, r1	; 0x10
  device->input_songselect_callback = NULL;
    3078:	1b 8a       	std	Y+19, r1	; 0x13
    307a:	1a 8a       	std	Y+18, r1	; 0x12
  device->input_tc_quarterframe_callback = NULL;
    307c:	1d 8a       	std	Y+21, r1	; 0x15
    307e:	1c 8a       	std	Y+20, r1	; 0x14

  //one byte funcs
  device->input_realtime_callback = NULL;
    3080:	1f 8a       	std	Y+23, r1	; 0x17
    3082:	1e 8a       	std	Y+22, r1	; 0x16
  device->input_tunerequest_callback = NULL;
    3084:	19 8e       	std	Y+25, r1	; 0x19
    3086:	18 8e       	std	Y+24, r1	; 0x18

  //var byte functions
  device->input_sysex_callback = NULL;
    3088:	1b 8e       	std	Y+27, r1	; 0x1b
    308a:	1a 8e       	std	Y+26, r1	; 0x1a
  device->input_fallthrough_callback = NULL;
    308c:	1d 8e       	std	Y+29, r1	; 0x1d
    308e:	1c 8e       	std	Y+28, r1	; 0x1c
  device->input_catchall_callback = NULL;
    3090:	1f 8e       	std	Y+31, r1	; 0x1f
    3092:	1e 8e       	std	Y+30, r1	; 0x1e

  device->pre_input_process_callback = NULL;
    3094:	19 a2       	lds	r17, 0x99
    3096:	18 a2       	lds	r17, 0x98
}
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	08 95       	ret

0000309e <midi_device_input>:

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
    309e:	ef 92       	push	r14
    30a0:	ff 92       	push	r15
    30a2:	0f 93       	push	r16
    30a4:	1f 93       	push	r17
    30a6:	cf 93       	push	r28
    30a8:	df 93       	push	r29
    30aa:	d6 2f       	mov	r29, r22
  uint8_t i;
  for (i = 0; i < cnt; i++)
    30ac:	66 23       	and	r22, r22
    30ae:	99 f0       	breq	.+38     	; 0x30d6 <midi_device_input+0x38>
    30b0:	04 2f       	mov	r16, r20
    30b2:	15 2f       	mov	r17, r21
    30b4:	c0 e0       	ldi	r28, 0x00	; 0
    bytequeue_enqueue(&device->input_queue, input[i]);
    30b6:	0f 2e       	mov	r0, r31
    30b8:	f8 ee       	ldi	r31, 0xE8	; 232
    30ba:	ef 2e       	mov	r14, r31
    30bc:	ff 24       	eor	r15, r15
    30be:	f0 2d       	mov	r31, r0
    30c0:	e8 0e       	add	r14, r24
    30c2:	f9 1e       	adc	r15, r25
    30c4:	f8 01       	movw	r30, r16
    30c6:	61 91       	ld	r22, Z+
    30c8:	8f 01       	movw	r16, r30
    30ca:	c7 01       	movw	r24, r14
    30cc:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <bytequeue_enqueue>
  device->pre_input_process_callback = NULL;
}

void midi_device_input(MidiDevice * device, uint8_t cnt, uint8_t * input) {
  uint8_t i;
  for (i = 0; i < cnt; i++)
    30d0:	cf 5f       	subi	r28, 0xFF	; 255
    30d2:	cd 17       	cp	r28, r29
    30d4:	b9 f7       	brne	.-18     	; 0x30c4 <midi_device_input+0x26>
    bytequeue_enqueue(&device->input_queue, input[i]);
}
    30d6:	df 91       	pop	r29
    30d8:	cf 91       	pop	r28
    30da:	1f 91       	pop	r17
    30dc:	0f 91       	pop	r16
    30de:	ff 90       	pop	r15
    30e0:	ef 90       	pop	r14
    30e2:	08 95       	ret

000030e4 <midi_device_set_send_func>:

void midi_device_set_send_func(MidiDevice * device, midi_var_byte_func_t send_func){
  device->send_func = send_func;
    30e4:	fc 01       	movw	r30, r24
    30e6:	71 83       	std	Z+1, r23	; 0x01
    30e8:	60 83       	st	Z, r22
}
    30ea:	08 95       	ret

000030ec <midi_device_set_pre_input_process_func>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
    30ec:	fc 01       	movw	r30, r24
    30ee:	71 a3       	lds	r23, 0x51
    30f0:	60 a3       	lds	r22, 0x50
}
    30f2:	08 95       	ret

000030f4 <midi_input_callbacks>:
      }
    }
  }
}

void midi_input_callbacks(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2) {
    30f4:	af 92       	push	r10
    30f6:	bf 92       	push	r11
    30f8:	cf 92       	push	r12
    30fa:	df 92       	push	r13
    30fc:	ef 92       	push	r14
    30fe:	ff 92       	push	r15
    3100:	0f 93       	push	r16
    3102:	1f 93       	push	r17
    3104:	cf 93       	push	r28
    3106:	df 93       	push	r29
    3108:	00 d0       	rcall	.+0      	; 0x310a <midi_input_callbacks+0x16>
    310a:	0f 92       	push	r0
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	6c 01       	movw	r12, r24
    3112:	5b 01       	movw	r10, r22
    3114:	f4 2e       	mov	r15, r20
    3116:	e2 2e       	mov	r14, r18
    3118:	10 2f       	mov	r17, r16
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    311a:	dc 01       	movw	r26, r24
    311c:	95 96       	adiw	r26, 0x25	; 37
    311e:	8c 91       	ld	r24, X
    3120:	95 97       	sbiw	r26, 0x25	; 37
    3122:	84 30       	cpi	r24, 0x04	; 4
    3124:	e9 f4       	brne	.+58     	; 0x3160 <midi_input_callbacks+0x6c>
    if (device->input_sysex_callback) {
    3126:	5a 96       	adiw	r26, 0x1a	; 26
    3128:	ed 91       	ld	r30, X+
    312a:	fc 91       	ld	r31, X
    312c:	5b 97       	sbiw	r26, 0x1b	; 27
    312e:	30 97       	sbiw	r30, 0x00	; 0
    3130:	09 f4       	brne	.+2      	; 0x3134 <midi_input_callbacks+0x40>
    3132:	ee c0       	rjmp	.+476    	; 0x3310 <midi_input_callbacks+0x21c>
      const uint16_t start = ((cnt - 1) / 3) * 3;
    3134:	cb 01       	movw	r24, r22
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	63 e0       	ldi	r22, 0x03	; 3
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__udivmodhi4>
    3140:	cb 01       	movw	r24, r22
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	68 0f       	add	r22, r24
    3148:	79 1f       	adc	r23, r25
      const uint8_t length = (cnt - start);
      uint8_t data[3];
      data[0] = byte0;
    314a:	49 83       	std	Y+1, r20	; 0x01
      data[1] = byte1;
    314c:	2a 83       	std	Y+2, r18	; 0x02
      data[2] = byte2;
    314e:	0b 83       	std	Y+3, r16	; 0x03
  //did we end up calling a callback?
  bool called = false;
  if (device->input_state == SYSEX_MESSAGE) {
    if (device->input_sysex_callback) {
      const uint16_t start = ((cnt - 1) / 3) * 3;
      const uint8_t length = (cnt - start);
    3150:	4a 2d       	mov	r20, r10
    3152:	46 1b       	sub	r20, r22
      uint8_t data[3];
      data[0] = byte0;
      data[1] = byte1;
      data[2] = byte2;
      device->input_sysex_callback(device, start, length, data);
    3154:	c6 01       	movw	r24, r12
    3156:	9e 01       	movw	r18, r28
    3158:	2f 5f       	subi	r18, 0xFF	; 255
    315a:	3f 4f       	sbci	r19, 0xFF	; 255
    315c:	09 95       	icall
    315e:	c8 c0       	rjmp	.+400    	; 0x32f0 <midi_input_callbacks+0x1fc>
      called = true;
    }
  } else {
    switch (cnt) {
    3160:	62 30       	cpi	r22, 0x02	; 2
    3162:	71 05       	cpc	r23, r1
    3164:	09 f4       	brne	.+2      	; 0x3168 <midi_input_callbacks+0x74>
    3166:	5f c0       	rjmp	.+190    	; 0x3226 <midi_input_callbacks+0x132>
    3168:	63 30       	cpi	r22, 0x03	; 3
    316a:	71 05       	cpc	r23, r1
    316c:	29 f0       	breq	.+10     	; 0x3178 <midi_input_callbacks+0x84>
    316e:	61 30       	cpi	r22, 0x01	; 1
    3170:	71 05       	cpc	r23, r1
    3172:	09 f0       	breq	.+2      	; 0x3176 <midi_input_callbacks+0x82>
    3174:	b3 c0       	rjmp	.+358    	; 0x32dc <midi_input_callbacks+0x1e8>
    3176:	99 c0       	rjmp	.+306    	; 0x32aa <midi_input_callbacks+0x1b6>
      case 3:
        {
          midi_three_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3178:	84 2f       	mov	r24, r20
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	80 7f       	andi	r24, 0xF0	; 240
    317e:	90 70       	andi	r25, 0x00	; 0
    3180:	80 3a       	cpi	r24, 0xA0	; 160
    3182:	91 05       	cpc	r25, r1
    3184:	29 f1       	breq	.+74     	; 0x31d0 <midi_input_callbacks+0xdc>
    3186:	81 3a       	cpi	r24, 0xA1	; 161
    3188:	91 05       	cpc	r25, r1
    318a:	3c f4       	brge	.+14     	; 0x319a <midi_input_callbacks+0xa6>
    318c:	80 38       	cpi	r24, 0x80	; 128
    318e:	91 05       	cpc	r25, r1
    3190:	c9 f0       	breq	.+50     	; 0x31c4 <midi_input_callbacks+0xd0>
    3192:	80 39       	cpi	r24, 0x90	; 144
    3194:	91 05       	cpc	r25, r1
    3196:	91 f5       	brne	.+100    	; 0x31fc <midi_input_callbacks+0x108>
    3198:	0f c0       	rjmp	.+30     	; 0x31b8 <midi_input_callbacks+0xc4>
    319a:	80 3e       	cpi	r24, 0xE0	; 224
    319c:	91 05       	cpc	r25, r1
    319e:	f1 f0       	breq	.+60     	; 0x31dc <midi_input_callbacks+0xe8>
    31a0:	80 3f       	cpi	r24, 0xF0	; 240
    31a2:	91 05       	cpc	r25, r1
    31a4:	09 f1       	breq	.+66     	; 0x31e8 <midi_input_callbacks+0xf4>
    31a6:	80 3b       	cpi	r24, 0xB0	; 176
    31a8:	91 05       	cpc	r25, r1
    31aa:	41 f5       	brne	.+80     	; 0x31fc <midi_input_callbacks+0x108>
            case MIDI_CC:
              func = device->input_cc_callback;
    31ac:	d6 01       	movw	r26, r12
    31ae:	12 96       	adiw	r26, 0x02	; 2
    31b0:	ed 91       	ld	r30, X+
    31b2:	fc 91       	ld	r31, X
    31b4:	13 97       	sbiw	r26, 0x03	; 3
              break;
    31b6:	24 c0       	rjmp	.+72     	; 0x3200 <midi_input_callbacks+0x10c>
            case MIDI_NOTEON:
              func = device->input_noteon_callback;
    31b8:	d6 01       	movw	r26, r12
    31ba:	14 96       	adiw	r26, 0x04	; 4
    31bc:	ed 91       	ld	r30, X+
    31be:	fc 91       	ld	r31, X
    31c0:	15 97       	sbiw	r26, 0x05	; 5
              break;
    31c2:	1e c0       	rjmp	.+60     	; 0x3200 <midi_input_callbacks+0x10c>
            case MIDI_NOTEOFF:
              func = device->input_noteoff_callback;
    31c4:	d6 01       	movw	r26, r12
    31c6:	16 96       	adiw	r26, 0x06	; 6
    31c8:	ed 91       	ld	r30, X+
    31ca:	fc 91       	ld	r31, X
    31cc:	17 97       	sbiw	r26, 0x07	; 7
              break;
    31ce:	18 c0       	rjmp	.+48     	; 0x3200 <midi_input_callbacks+0x10c>
            case MIDI_AFTERTOUCH:
              func = device->input_aftertouch_callback;
    31d0:	d6 01       	movw	r26, r12
    31d2:	18 96       	adiw	r26, 0x08	; 8
    31d4:	ed 91       	ld	r30, X+
    31d6:	fc 91       	ld	r31, X
    31d8:	19 97       	sbiw	r26, 0x09	; 9
              break;
    31da:	12 c0       	rjmp	.+36     	; 0x3200 <midi_input_callbacks+0x10c>
            case MIDI_PITCHBEND:
              func = device->input_pitchbend_callback;
    31dc:	d6 01       	movw	r26, r12
    31de:	1a 96       	adiw	r26, 0x0a	; 10
    31e0:	ed 91       	ld	r30, X+
    31e2:	fc 91       	ld	r31, X
    31e4:	1b 97       	sbiw	r26, 0x0b	; 11
              break;
    31e6:	0c c0       	rjmp	.+24     	; 0x3200 <midi_input_callbacks+0x10c>
            case 0xF0:
              if (byte0 == MIDI_SONGPOSITION)
    31e8:	b2 ef       	ldi	r27, 0xF2	; 242
    31ea:	4b 17       	cp	r20, r27
    31ec:	09 f0       	breq	.+2      	; 0x31f0 <midi_input_callbacks+0xfc>
    31ee:	90 c0       	rjmp	.+288    	; 0x3310 <midi_input_callbacks+0x21c>
                func = device->input_songposition_callback;
    31f0:	d6 01       	movw	r26, r12
    31f2:	1c 96       	adiw	r26, 0x0c	; 12
    31f4:	ed 91       	ld	r30, X+
    31f6:	fc 91       	ld	r31, X
    31f8:	1d 97       	sbiw	r26, 0x0d	; 13
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <midi_input_callbacks+0x10c>
    }
  } else {
    switch (cnt) {
      case 3:
        {
          midi_three_byte_func_t func = NULL;
    31fc:	e0 e0       	ldi	r30, 0x00	; 0
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_songposition_callback;
              break;
            default:
              break;
          }
          if(func) {
    3200:	30 97       	sbiw	r30, 0x00	; 0
    3202:	09 f4       	brne	.+2      	; 0x3206 <midi_input_callbacks+0x112>
    3204:	85 c0       	rjmp	.+266    	; 0x3310 <midi_input_callbacks+0x21c>
            //mask off the channel for non song position functions
            if (byte0 == MIDI_SONGPOSITION)
    3206:	b2 ef       	ldi	r27, 0xF2	; 242
    3208:	fb 16       	cp	r15, r27
    320a:	31 f4       	brne	.+12     	; 0x3218 <midi_input_callbacks+0x124>
              func(device, byte0, byte1, byte2);
    320c:	c6 01       	movw	r24, r12
    320e:	62 ef       	ldi	r22, 0xF2	; 242
    3210:	4e 2d       	mov	r20, r14
    3212:	21 2f       	mov	r18, r17
    3214:	09 95       	icall
    3216:	6c c0       	rjmp	.+216    	; 0x32f0 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1, byte2);
    3218:	6f 2d       	mov	r22, r15
    321a:	6f 70       	andi	r22, 0x0F	; 15
    321c:	c6 01       	movw	r24, r12
    321e:	4e 2d       	mov	r20, r14
    3220:	21 2f       	mov	r18, r17
    3222:	09 95       	icall
    3224:	65 c0       	rjmp	.+202    	; 0x32f0 <midi_input_callbacks+0x1fc>
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
          switch (byte0 & 0xF0) {
    3226:	84 2f       	mov	r24, r20
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	80 7f       	andi	r24, 0xF0	; 240
    322c:	90 70       	andi	r25, 0x00	; 0
    322e:	80 3d       	cpi	r24, 0xD0	; 208
    3230:	91 05       	cpc	r25, r1
    3232:	61 f0       	breq	.+24     	; 0x324c <midi_input_callbacks+0x158>
    3234:	80 3f       	cpi	r24, 0xF0	; 240
    3236:	91 05       	cpc	r25, r1
    3238:	79 f0       	breq	.+30     	; 0x3258 <midi_input_callbacks+0x164>
    323a:	80 3c       	cpi	r24, 0xC0	; 192
    323c:	91 05       	cpc	r25, r1
    323e:	f9 f4       	brne	.+62     	; 0x327e <midi_input_callbacks+0x18a>
            case MIDI_PROGCHANGE:
              func = device->input_progchange_callback;
    3240:	d6 01       	movw	r26, r12
    3242:	1e 96       	adiw	r26, 0x0e	; 14
    3244:	ed 91       	ld	r30, X+
    3246:	fc 91       	ld	r31, X
    3248:	1f 97       	sbiw	r26, 0x0f	; 15
              break;
    324a:	1b c0       	rjmp	.+54     	; 0x3282 <midi_input_callbacks+0x18e>
            case MIDI_CHANPRESSURE:
              func = device->input_chanpressure_callback;
    324c:	d6 01       	movw	r26, r12
    324e:	50 96       	adiw	r26, 0x10	; 16
    3250:	ed 91       	ld	r30, X+
    3252:	fc 91       	ld	r31, X
    3254:	51 97       	sbiw	r26, 0x11	; 17
              break;
    3256:	15 c0       	rjmp	.+42     	; 0x3282 <midi_input_callbacks+0x18e>
            case 0xF0:
              if (byte0 == MIDI_SONGSELECT)
    3258:	b3 ef       	ldi	r27, 0xF3	; 243
    325a:	4b 17       	cp	r20, r27
    325c:	31 f4       	brne	.+12     	; 0x326a <midi_input_callbacks+0x176>
                func = device->input_songselect_callback;
    325e:	d6 01       	movw	r26, r12
    3260:	52 96       	adiw	r26, 0x12	; 18
    3262:	ed 91       	ld	r30, X+
    3264:	fc 91       	ld	r31, X
    3266:	53 97       	sbiw	r26, 0x13	; 19
    3268:	0c c0       	rjmp	.+24     	; 0x3282 <midi_input_callbacks+0x18e>
              else if (byte0 == MIDI_TC_QUARTERFRAME)
    326a:	b1 ef       	ldi	r27, 0xF1	; 241
    326c:	4b 17       	cp	r20, r27
    326e:	09 f0       	breq	.+2      	; 0x3272 <midi_input_callbacks+0x17e>
    3270:	4f c0       	rjmp	.+158    	; 0x3310 <midi_input_callbacks+0x21c>
                func = device->input_tc_quarterframe_callback;
    3272:	d6 01       	movw	r26, r12
    3274:	54 96       	adiw	r26, 0x14	; 20
    3276:	ed 91       	ld	r30, X+
    3278:	fc 91       	ld	r31, X
    327a:	55 97       	sbiw	r26, 0x15	; 21
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <midi_input_callbacks+0x18e>
          }
        }
        break;
      case 2:
        {
          midi_two_byte_func_t func = NULL;
    327e:	e0 e0       	ldi	r30, 0x00	; 0
    3280:	f0 e0       	ldi	r31, 0x00	; 0
                func = device->input_tc_quarterframe_callback;
              break;
            default:
              break;
          }
          if(func) {
    3282:	30 97       	sbiw	r30, 0x00	; 0
    3284:	09 f4       	brne	.+2      	; 0x3288 <midi_input_callbacks+0x194>
    3286:	44 c0       	rjmp	.+136    	; 0x3310 <midi_input_callbacks+0x21c>
            //mask off the channel
            if (byte0 == MIDI_SONGSELECT || byte0 == MIDI_TC_QUARTERFRAME)
    3288:	b3 ef       	ldi	r27, 0xF3	; 243
    328a:	fb 16       	cp	r15, r27
    328c:	19 f0       	breq	.+6      	; 0x3294 <midi_input_callbacks+0x1a0>
    328e:	81 ef       	ldi	r24, 0xF1	; 241
    3290:	f8 16       	cp	r15, r24
    3292:	29 f4       	brne	.+10     	; 0x329e <midi_input_callbacks+0x1aa>
              func(device, byte0, byte1);
    3294:	c6 01       	movw	r24, r12
    3296:	6f 2d       	mov	r22, r15
    3298:	4e 2d       	mov	r20, r14
    329a:	09 95       	icall
    329c:	29 c0       	rjmp	.+82     	; 0x32f0 <midi_input_callbacks+0x1fc>
            else
              func(device, byte0 & 0x0F, byte1);
    329e:	6f 2d       	mov	r22, r15
    32a0:	6f 70       	andi	r22, 0x0F	; 15
    32a2:	c6 01       	movw	r24, r12
    32a4:	4e 2d       	mov	r20, r14
    32a6:	09 95       	icall
    32a8:	23 c0       	rjmp	.+70     	; 0x32f0 <midi_input_callbacks+0x1fc>
        }
        break;
      case 1:
        {
          midi_one_byte_func_t func = NULL;
          if (midi_is_realtime(byte0))
    32aa:	84 2f       	mov	r24, r20
    32ac:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <midi_is_realtime>
    32b0:	88 23       	and	r24, r24
    32b2:	31 f0       	breq	.+12     	; 0x32c0 <midi_input_callbacks+0x1cc>
            func = device->input_realtime_callback;
    32b4:	d6 01       	movw	r26, r12
    32b6:	56 96       	adiw	r26, 0x16	; 22
    32b8:	ed 91       	ld	r30, X+
    32ba:	fc 91       	ld	r31, X
    32bc:	57 97       	sbiw	r26, 0x17	; 23
    32be:	08 c0       	rjmp	.+16     	; 0x32d0 <midi_input_callbacks+0x1dc>
          else if (byte0 == MIDI_TUNEREQUEST)
    32c0:	b6 ef       	ldi	r27, 0xF6	; 246
    32c2:	fb 16       	cp	r15, r27
    32c4:	29 f5       	brne	.+74     	; 0x3310 <midi_input_callbacks+0x21c>
            func = device->input_tunerequest_callback;
    32c6:	d6 01       	movw	r26, r12
    32c8:	58 96       	adiw	r26, 0x18	; 24
    32ca:	ed 91       	ld	r30, X+
    32cc:	fc 91       	ld	r31, X
    32ce:	59 97       	sbiw	r26, 0x19	; 25
          if (func) {
    32d0:	30 97       	sbiw	r30, 0x00	; 0
    32d2:	f1 f0       	breq	.+60     	; 0x3310 <midi_input_callbacks+0x21c>
            func(device, byte0);
    32d4:	c6 01       	movw	r24, r12
    32d6:	6f 2d       	mov	r22, r15
    32d8:	09 95       	icall
    32da:	0a c0       	rjmp	.+20     	; 0x32f0 <midi_input_callbacks+0x1fc>
          }
        }
        break;
      default:
        //just in case
        if (cnt > 3)
    32dc:	64 30       	cpi	r22, 0x04	; 4
    32de:	71 05       	cpc	r23, r1
    32e0:	a8 f4       	brcc	.+42     	; 0x330c <midi_input_callbacks+0x218>
    32e2:	16 c0       	rjmp	.+44     	; 0x3310 <midi_input_callbacks+0x21c>
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
    32e4:	c6 01       	movw	r24, r12
    32e6:	b5 01       	movw	r22, r10
    32e8:	4f 2d       	mov	r20, r15
    32ea:	2e 2d       	mov	r18, r14
    32ec:	01 2f       	mov	r16, r17
    32ee:	09 95       	icall
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    32f0:	d6 01       	movw	r26, r12
    32f2:	5e 96       	adiw	r26, 0x1e	; 30
    32f4:	ed 91       	ld	r30, X+
    32f6:	fc 91       	ld	r31, X
    32f8:	5f 97       	sbiw	r26, 0x1f	; 31
    32fa:	30 97       	sbiw	r30, 0x00	; 0
    32fc:	89 f0       	breq	.+34     	; 0x3320 <midi_input_callbacks+0x22c>
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
    32fe:	c6 01       	movw	r24, r12
    3300:	b5 01       	movw	r22, r10
    3302:	4f 2d       	mov	r20, r15
    3304:	2e 2d       	mov	r18, r14
    3306:	01 2f       	mov	r16, r17
    3308:	09 95       	icall
    330a:	0a c0       	rjmp	.+20     	; 0x3320 <midi_input_callbacks+0x22c>
        }
        break;
      default:
        //just in case
        if (cnt > 3)
          cnt = 0;
    330c:	aa 24       	eor	r10, r10
    330e:	bb 24       	eor	r11, r11
    }
  }

  //if there is fallthrough default callback and we haven't called a more specific one, 
  //call the fallthrough
  if (!called && device->input_fallthrough_callback)
    3310:	d6 01       	movw	r26, r12
    3312:	5c 96       	adiw	r26, 0x1c	; 28
    3314:	ed 91       	ld	r30, X+
    3316:	fc 91       	ld	r31, X
    3318:	5d 97       	sbiw	r26, 0x1d	; 29
    331a:	30 97       	sbiw	r30, 0x00	; 0
    331c:	19 f7       	brne	.-58     	; 0x32e4 <midi_input_callbacks+0x1f0>
    331e:	e8 cf       	rjmp	.-48     	; 0x32f0 <midi_input_callbacks+0x1fc>
    device->input_fallthrough_callback(device, cnt, byte0, byte1, byte2);
  //always call the catch all if it exists
  if (device->input_catchall_callback)
    device->input_catchall_callback(device, cnt, byte0, byte1, byte2);
}
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	0f 90       	pop	r0
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	1f 91       	pop	r17
    332c:	0f 91       	pop	r16
    332e:	ff 90       	pop	r15
    3330:	ef 90       	pop	r14
    3332:	df 90       	pop	r13
    3334:	cf 90       	pop	r12
    3336:	bf 90       	pop	r11
    3338:	af 90       	pop	r10
    333a:	08 95       	ret

0000333c <midi_process_byte>:
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}

void midi_process_byte(MidiDevice * device, uint8_t input) {
    333c:	ef 92       	push	r14
    333e:	ff 92       	push	r15
    3340:	0f 93       	push	r16
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	7c 01       	movw	r14, r24
    3348:	c6 2f       	mov	r28, r22
  if (midi_is_realtime(input)) {
    334a:	86 2f       	mov	r24, r22
    334c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <midi_is_realtime>
    3350:	88 23       	and	r24, r24
    3352:	91 f0       	breq	.+36     	; 0x3378 <midi_process_byte+0x3c>
    //call callback, store and restore state
    input_state_t state = device->input_state;
    3354:	d7 01       	movw	r26, r14
    3356:	95 96       	adiw	r26, 0x25	; 37
    3358:	dc 91       	ld	r29, X
    335a:	95 97       	sbiw	r26, 0x25	; 37
    device->input_state = ONE_BYTE_MESSAGE;
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	95 96       	adiw	r26, 0x25	; 37
    3360:	8c 93       	st	X, r24
    midi_input_callbacks(device, 1, input, 0, 0);
    3362:	c7 01       	movw	r24, r14
    3364:	61 e0       	ldi	r22, 0x01	; 1
    3366:	70 e0       	ldi	r23, 0x00	; 0
    3368:	4c 2f       	mov	r20, r28
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	00 e0       	ldi	r16, 0x00	; 0
    336e:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <midi_input_callbacks>
    device->input_state = state;
    3372:	f7 01       	movw	r30, r14
    3374:	d5 a3       	lds	r29, 0x55
    3376:	b7 c0       	rjmp	.+366    	; 0x34e6 <midi_process_byte+0x1aa>
  } else if (midi_is_statusbyte(input)) {
    3378:	8c 2f       	mov	r24, r28
    337a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <midi_is_statusbyte>
    337e:	88 23       	and	r24, r24
    3380:	09 f4       	brne	.+2      	; 0x3384 <midi_process_byte+0x48>
    3382:	73 c0       	rjmp	.+230    	; 0x346a <midi_process_byte+0x12e>
    //store the byte
    if (device->input_state != SYSEX_MESSAGE) {
    3384:	d7 01       	movw	r26, r14
    3386:	95 96       	adiw	r26, 0x25	; 37
    3388:	8c 91       	ld	r24, X
    338a:	95 97       	sbiw	r26, 0x25	; 37
    338c:	84 30       	cpi	r24, 0x04	; 4
    338e:	49 f0       	breq	.+18     	; 0x33a2 <midi_process_byte+0x66>
      device->input_buffer[0] = input;
    3390:	92 96       	adiw	r26, 0x22	; 34
    3392:	cc 93       	st	X, r28
    3394:	92 97       	sbiw	r26, 0x22	; 34
      device->input_count = 1;
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	97 96       	adiw	r26, 0x27	; 39
    339c:	9c 93       	st	X, r25
    339e:	8e 93       	st	-X, r24
    33a0:	96 97       	sbiw	r26, 0x26	; 38
    }
    switch (midi_packet_length(input)) {
    33a2:	8c 2f       	mov	r24, r28
    33a4:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <midi_packet_length>
    33a8:	81 30       	cpi	r24, 0x01	; 1
    33aa:	41 f0       	breq	.+16     	; 0x33bc <midi_process_byte+0x80>
    33ac:	81 30       	cpi	r24, 0x01	; 1
    33ae:	00 f1       	brcs	.+64     	; 0x33f0 <midi_process_byte+0xb4>
    33b0:	82 30       	cpi	r24, 0x02	; 2
    33b2:	a1 f0       	breq	.+40     	; 0x33dc <midi_process_byte+0xa0>
    33b4:	83 30       	cpi	r24, 0x03	; 3
    33b6:	09 f0       	breq	.+2      	; 0x33ba <midi_process_byte+0x7e>
    33b8:	4f c0       	rjmp	.+158    	; 0x3458 <midi_process_byte+0x11c>
    33ba:	14 c0       	rjmp	.+40     	; 0x33e4 <midi_process_byte+0xa8>
      case ONE1:
        device->input_state = ONE_BYTE_MESSAGE;;
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	f7 01       	movw	r30, r14
    33c0:	85 a3       	lds	r24, 0x55
        midi_input_callbacks(device, 1, input, 0, 0);
    33c2:	c7 01       	movw	r24, r14
    33c4:	61 e0       	ldi	r22, 0x01	; 1
    33c6:	70 e0       	ldi	r23, 0x00	; 0
    33c8:	4c 2f       	mov	r20, r28
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	00 e0       	ldi	r16, 0x00	; 0
    33ce:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <midi_input_callbacks>
        device->input_state = IDLE;
    33d2:	d7 01       	movw	r26, r14
    33d4:	95 96       	adiw	r26, 0x25	; 37
    33d6:	1c 92       	st	X, r1
    33d8:	95 97       	sbiw	r26, 0x25	; 37
        break;
    33da:	85 c0       	rjmp	.+266    	; 0x34e6 <midi_process_byte+0x1aa>
      case TWO2:
        device->input_state = TWO_BYTE_MESSAGE;
    33dc:	82 e0       	ldi	r24, 0x02	; 2
    33de:	f7 01       	movw	r30, r14
    33e0:	85 a3       	lds	r24, 0x55
        break;
    33e2:	81 c0       	rjmp	.+258    	; 0x34e6 <midi_process_byte+0x1aa>
      case THREE3:
        device->input_state = THREE_BYTE_MESSAGE;
    33e4:	83 e0       	ldi	r24, 0x03	; 3
    33e6:	d7 01       	movw	r26, r14
    33e8:	95 96       	adiw	r26, 0x25	; 37
    33ea:	8c 93       	st	X, r24
    33ec:	95 97       	sbiw	r26, 0x25	; 37
        break;
    33ee:	7b c0       	rjmp	.+246    	; 0x34e6 <midi_process_byte+0x1aa>
      case UNDEFINED:
        switch(input) {
    33f0:	c0 3f       	cpi	r28, 0xF0	; 240
    33f2:	19 f0       	breq	.+6      	; 0x33fa <midi_process_byte+0xbe>
    33f4:	c7 3f       	cpi	r28, 0xF7	; 247
    33f6:	59 f5       	brne	.+86     	; 0x344e <midi_process_byte+0x112>
    33f8:	0a c0       	rjmp	.+20     	; 0x340e <midi_process_byte+0xd2>
          case SYSEX_BEGIN:
            device->input_state = SYSEX_MESSAGE;
    33fa:	84 e0       	ldi	r24, 0x04	; 4
    33fc:	f7 01       	movw	r30, r14
    33fe:	85 a3       	lds	r24, 0x55
            device->input_buffer[0] = input;
    3400:	80 ef       	ldi	r24, 0xF0	; 240
    3402:	82 a3       	lds	r24, 0x52
            device->input_count = 1;
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	97 a3       	lds	r25, 0x57
    340a:	86 a3       	lds	r24, 0x56
            break;
    340c:	6c c0       	rjmp	.+216    	; 0x34e6 <midi_process_byte+0x1aa>
          case SYSEX_END:
            //send what is left in the input buffer, set idle
            device->input_buffer[device->input_count % 3] = input;
    340e:	d7 01       	movw	r26, r14
    3410:	96 96       	adiw	r26, 0x26	; 38
    3412:	2d 91       	ld	r18, X+
    3414:	3c 91       	ld	r19, X
    3416:	97 97       	sbiw	r26, 0x27	; 39
    3418:	c9 01       	movw	r24, r18
    341a:	63 e0       	ldi	r22, 0x03	; 3
    341c:	70 e0       	ldi	r23, 0x00	; 0
    341e:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__udivmodhi4>
    3422:	f7 01       	movw	r30, r14
    3424:	e8 0f       	add	r30, r24
    3426:	f9 1f       	adc	r31, r25
    3428:	87 ef       	ldi	r24, 0xF7	; 247
    342a:	82 a3       	lds	r24, 0x52
            device->input_count += 1;
    342c:	b9 01       	movw	r22, r18
    342e:	6f 5f       	subi	r22, 0xFF	; 255
    3430:	7f 4f       	sbci	r23, 0xFF	; 255
    3432:	f7 01       	movw	r30, r14
    3434:	77 a3       	lds	r23, 0x57
    3436:	66 a3       	lds	r22, 0x56
            //call the callback
            midi_input_callbacks(device, device->input_count, 
    3438:	c7 01       	movw	r24, r14
    343a:	42 a1       	lds	r20, 0x42
    343c:	23 a1       	lds	r18, 0x43
    343e:	04 a1       	lds	r16, 0x44
    3440:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
            device->input_state = IDLE;
    3444:	d7 01       	movw	r26, r14
    3446:	95 96       	adiw	r26, 0x25	; 37
    3448:	1c 92       	st	X, r1
    344a:	95 97       	sbiw	r26, 0x25	; 37
            break;
    344c:	4c c0       	rjmp	.+152    	; 0x34e6 <midi_process_byte+0x1aa>
          default:
            device->input_state = IDLE;
    344e:	f7 01       	movw	r30, r14
    3450:	15 a2       	lds	r17, 0x95
            device->input_count = 0;
    3452:	17 a2       	lds	r17, 0x97
    3454:	16 a2       	lds	r17, 0x96
    3456:	47 c0       	rjmp	.+142    	; 0x34e6 <midi_process_byte+0x1aa>
        }

        break;
      default:
        device->input_state = IDLE;
    3458:	d7 01       	movw	r26, r14
    345a:	95 96       	adiw	r26, 0x25	; 37
    345c:	1c 92       	st	X, r1
    345e:	95 97       	sbiw	r26, 0x25	; 37
        device->input_count = 0;
    3460:	97 96       	adiw	r26, 0x27	; 39
    3462:	1c 92       	st	X, r1
    3464:	1e 92       	st	-X, r1
    3466:	96 97       	sbiw	r26, 0x26	; 38
        break;
    3468:	3e c0       	rjmp	.+124    	; 0x34e6 <midi_process_byte+0x1aa>
    }
  } else {
    if (device->input_state != IDLE) {
    346a:	f7 01       	movw	r30, r14
    346c:	25 a1       	lds	r18, 0x45
    346e:	22 23       	and	r18, r18
    3470:	d1 f1       	breq	.+116    	; 0x34e6 <midi_process_byte+0x1aa>
      //store the byte
      device->input_buffer[device->input_count % 3] = input;
    3472:	06 a0       	lds	r16, 0x86
    3474:	f7 a1       	lds	r31, 0x47
    3476:	e0 2d       	mov	r30, r0
    3478:	cf 01       	movw	r24, r30
    347a:	63 e0       	ldi	r22, 0x03	; 3
    347c:	70 e0       	ldi	r23, 0x00	; 0
    347e:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__udivmodhi4>
    3482:	ac 01       	movw	r20, r24
    3484:	8e 0d       	add	r24, r14
    3486:	9f 1d       	adc	r25, r15
    3488:	dc 01       	movw	r26, r24
    348a:	92 96       	adiw	r26, 0x22	; 34
    348c:	cc 93       	st	X, r28
    348e:	92 97       	sbiw	r26, 0x22	; 34
      //increment count
      uint16_t prev = device->input_count;
      device->input_count += 1;
    3490:	bf 01       	movw	r22, r30
    3492:	6f 5f       	subi	r22, 0xFF	; 255
    3494:	7f 4f       	sbci	r23, 0xFF	; 255
    3496:	f7 01       	movw	r30, r14
    3498:	77 a3       	lds	r23, 0x57
    349a:	66 a3       	lds	r22, 0x56

      switch(prev % 3) {
    349c:	41 30       	cpi	r20, 0x01	; 1
    349e:	51 05       	cpc	r21, r1
    34a0:	91 f0       	breq	.+36     	; 0x34c6 <midi_process_byte+0x18a>
    34a2:	42 30       	cpi	r20, 0x02	; 2
    34a4:	51 05       	cpc	r21, r1
    34a6:	f9 f4       	brne	.+62     	; 0x34e6 <midi_process_byte+0x1aa>
        case 2:
          //call callback
          midi_input_callbacks(device, device->input_count,
    34a8:	c7 01       	movw	r24, r14
    34aa:	42 a1       	lds	r20, 0x42
    34ac:	23 a1       	lds	r18, 0x43
    34ae:	04 a1       	lds	r16, 0x44
    34b0:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <midi_input_callbacks>
              device->input_buffer[0], device->input_buffer[1], device->input_buffer[2]);
          if (device->input_state != SYSEX_MESSAGE) {
    34b4:	f7 01       	movw	r30, r14
    34b6:	85 a1       	lds	r24, 0x45
    34b8:	84 30       	cpi	r24, 0x04	; 4
    34ba:	a9 f0       	breq	.+42     	; 0x34e6 <midi_process_byte+0x1aa>
            //set to 1, keeping status byte, allowing for running status
            device->input_count = 1;
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	97 a3       	lds	r25, 0x57
    34c2:	86 a3       	lds	r24, 0x56
    34c4:	10 c0       	rjmp	.+32     	; 0x34e6 <midi_process_byte+0x1aa>
          }
          break;
        case 1:
          if (device->input_state == TWO_BYTE_MESSAGE) {
    34c6:	22 30       	cpi	r18, 0x02	; 2
    34c8:	71 f4       	brne	.+28     	; 0x34e6 <midi_process_byte+0x1aa>
            //call callback
            midi_input_callbacks(device, device->input_count,
    34ca:	c7 01       	movw	r24, r14
    34cc:	42 a1       	lds	r20, 0x42
    34ce:	23 a1       	lds	r18, 0x43
    34d0:	00 e0       	ldi	r16, 0x00	; 0
    34d2:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <midi_input_callbacks>
                device->input_buffer[0], device->input_buffer[1], 0);
            if (device->input_state != SYSEX_MESSAGE) {
    34d6:	f7 01       	movw	r30, r14
    34d8:	85 a1       	lds	r24, 0x45
    34da:	84 30       	cpi	r24, 0x04	; 4
    34dc:	21 f0       	breq	.+8      	; 0x34e6 <midi_process_byte+0x1aa>
              //set to 1, keeping status byte, allowing for running status
              device->input_count = 1;
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	97 a3       	lds	r25, 0x57
    34e4:	86 a3       	lds	r24, 0x56
          //one byte messages are dealt with directly
          break;
      }
    }
  }
}
    34e6:	df 91       	pop	r29
    34e8:	cf 91       	pop	r28
    34ea:	0f 91       	pop	r16
    34ec:	ff 90       	pop	r15
    34ee:	ef 90       	pop	r14
    34f0:	08 95       	ret

000034f2 <midi_device_process>:

void midi_device_set_pre_input_process_func(MidiDevice * device, midi_no_byte_func_t pre_process_func){
  device->pre_input_process_callback = pre_process_func;
}

void midi_device_process(MidiDevice * device) {
    34f2:	cf 92       	push	r12
    34f4:	df 92       	push	r13
    34f6:	ef 92       	push	r14
    34f8:	ff 92       	push	r15
    34fa:	0f 93       	push	r16
    34fc:	1f 93       	push	r17
    34fe:	cf 93       	push	r28
    3500:	df 93       	push	r29
    3502:	6c 01       	movw	r12, r24
  //call the pre_input_process_callback if there is one
  if(device->pre_input_process_callback)
    3504:	dc 01       	movw	r26, r24
    3506:	90 96       	adiw	r26, 0x20	; 32
    3508:	ed 91       	ld	r30, X+
    350a:	fc 91       	ld	r31, X
    350c:	91 97       	sbiw	r26, 0x21	; 33
    350e:	30 97       	sbiw	r30, 0x00	; 0
    3510:	09 f0       	breq	.+2      	; 0x3514 <midi_device_process+0x22>
    device->pre_input_process_callback(device);
    3512:	09 95       	icall

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
    3514:	0f 2e       	mov	r0, r31
    3516:	f8 ee       	ldi	r31, 0xE8	; 232
    3518:	ef 2e       	mov	r14, r31
    351a:	ff 24       	eor	r15, r15
    351c:	f0 2d       	mov	r31, r0
    351e:	ec 0c       	add	r14, r12
    3520:	fd 1c       	adc	r15, r13
    3522:	c7 01       	movw	r24, r14
    3524:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <bytequeue_length>
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    3528:	c8 2f       	mov	r28, r24
    352a:	d0 e0       	ldi	r29, 0x00	; 0
    352c:	20 97       	sbiw	r28, 0x00	; 0
    352e:	99 f0       	breq	.+38     	; 0x3556 <midi_device_process+0x64>
    3530:	00 e0       	ldi	r16, 0x00	; 0
    3532:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    3534:	c7 01       	movw	r24, r14
    3536:	60 e0       	ldi	r22, 0x00	; 0
    3538:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <bytequeue_get>
    353c:	68 2f       	mov	r22, r24
    midi_process_byte(device, val);
    353e:	c6 01       	movw	r24, r12
    3540:	0e 94 9e 19 	call	0x333c	; 0x333c <midi_process_byte>
    bytequeue_remove(&device->input_queue, 1);
    3544:	c7 01       	movw	r24, r14
    3546:	61 e0       	ldi	r22, 0x01	; 1
    3548:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <bytequeue_remove>

  //pull stuff off the queue and process
  byteQueueIndex_t len = bytequeue_length(&device->input_queue);
  uint16_t i;
  //TODO limit number of bytes processed?
  for(i = 0; i < len; i++) {
    354c:	0f 5f       	subi	r16, 0xFF	; 255
    354e:	1f 4f       	sbci	r17, 0xFF	; 255
    3550:	0c 17       	cp	r16, r28
    3552:	1d 07       	cpc	r17, r29
    3554:	78 f3       	brcs	.-34     	; 0x3534 <midi_device_process+0x42>
    uint8_t val = bytequeue_get(&device->input_queue, 0);
    midi_process_byte(device, val);
    bytequeue_remove(&device->input_queue, 1);
  }
}
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	1f 91       	pop	r17
    355c:	0f 91       	pop	r16
    355e:	ff 90       	pop	r15
    3560:	ef 90       	pop	r14
    3562:	df 90       	pop	r13
    3564:	cf 90       	pop	r12
    3566:	08 95       	ret

00003568 <sysex_encoded_length>:
//You should have received a copy of the GNU General Public License
//along with avr-midi.  If not, see <http://www.gnu.org/licenses/>.

#include "sysex_tools.h"

uint16_t sysex_encoded_length(uint16_t decoded_length){
    3568:	9c 01       	movw	r18, r24
   uint8_t remainder = decoded_length % 7;
    356a:	67 e0       	ldi	r22, 0x07	; 7
    356c:	70 e0       	ldi	r23, 0x00	; 0
    356e:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__udivmodhi4>
    3572:	48 2f       	mov	r20, r24
   if (remainder)
    3574:	88 23       	and	r24, r24
    3576:	81 f0       	breq	.+32     	; 0x3598 <sysex_encoded_length+0x30>
      return (decoded_length / 7) * 8 + remainder + 1;
    3578:	c9 01       	movw	r24, r18
    357a:	67 e0       	ldi	r22, 0x07	; 7
    357c:	70 e0       	ldi	r23, 0x00	; 0
    357e:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__udivmodhi4>
    3582:	cb 01       	movw	r24, r22
    3584:	88 0f       	add	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	88 0f       	add	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	88 0f       	add	r24, r24
    358e:	99 1f       	adc	r25, r25
    3590:	01 96       	adiw	r24, 0x01	; 1
    3592:	84 0f       	add	r24, r20
    3594:	91 1d       	adc	r25, r1
    3596:	08 95       	ret
   else
      return (decoded_length / 7) * 8;
    3598:	c9 01       	movw	r24, r18
    359a:	67 e0       	ldi	r22, 0x07	; 7
    359c:	70 e0       	ldi	r23, 0x00	; 0
    359e:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__udivmodhi4>
    35a2:	cb 01       	movw	r24, r22
    35a4:	88 0f       	add	r24, r24
    35a6:	99 1f       	adc	r25, r25
    35a8:	88 0f       	add	r24, r24
    35aa:	99 1f       	adc	r25, r25
    35ac:	88 0f       	add	r24, r24
    35ae:	99 1f       	adc	r25, r25
}
    35b0:	08 95       	ret

000035b2 <sysex_decoded_length>:

uint16_t sysex_decoded_length(uint16_t encoded_length){
   uint8_t remainder = encoded_length % 8;
    35b2:	48 2f       	mov	r20, r24
    35b4:	47 70       	andi	r20, 0x07	; 7
   if (remainder)
    35b6:	a1 f0       	breq	.+40     	; 0x35e0 <sysex_decoded_length+0x2e>
      return (encoded_length / 8) * 7 + remainder - 1;
    35b8:	9c 01       	movw	r18, r24
    35ba:	36 95       	lsr	r19
    35bc:	27 95       	ror	r18
    35be:	36 95       	lsr	r19
    35c0:	27 95       	ror	r18
    35c2:	36 95       	lsr	r19
    35c4:	27 95       	ror	r18
    35c6:	c9 01       	movw	r24, r18
    35c8:	88 0f       	add	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	82 1b       	sub	r24, r18
    35d6:	93 0b       	sbc	r25, r19
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	84 0f       	add	r24, r20
    35dc:	91 1d       	adc	r25, r1
    35de:	08 95       	ret
   else
      return (encoded_length / 8) * 7;
    35e0:	9c 01       	movw	r18, r24
    35e2:	36 95       	lsr	r19
    35e4:	27 95       	ror	r18
    35e6:	36 95       	lsr	r19
    35e8:	27 95       	ror	r18
    35ea:	36 95       	lsr	r19
    35ec:	27 95       	ror	r18
    35ee:	c9 01       	movw	r24, r18
    35f0:	88 0f       	add	r24, r24
    35f2:	99 1f       	adc	r25, r25
    35f4:	88 0f       	add	r24, r24
    35f6:	99 1f       	adc	r25, r25
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	82 1b       	sub	r24, r18
    35fe:	93 0b       	sbc	r25, r19
}
    3600:	08 95       	ret

00003602 <sysex_encode>:

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3602:	2f 92       	push	r2
    3604:	3f 92       	push	r3
    3606:	4f 92       	push	r4
    3608:	5f 92       	push	r5
    360a:	6f 92       	push	r6
    360c:	7f 92       	push	r7
    360e:	8f 92       	push	r8
    3610:	9f 92       	push	r9
    3612:	af 92       	push	r10
    3614:	bf 92       	push	r11
    3616:	cf 92       	push	r12
    3618:	df 92       	push	r13
    361a:	ef 92       	push	r14
    361c:	ff 92       	push	r15
    361e:	0f 93       	push	r16
    3620:	1f 93       	push	r17
    3622:	cf 93       	push	r28
    3624:	df 93       	push	r29
    3626:	00 d0       	rcall	.+0      	; 0x3628 <sysex_encode+0x26>
    3628:	00 d0       	rcall	.+0      	; 0x362a <sysex_encode+0x28>
    362a:	00 d0       	rcall	.+0      	; 0x362c <sysex_encode+0x2a>
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	1c 01       	movw	r2, r24
    3632:	7a 83       	std	Y+2, r23	; 0x02
    3634:	69 83       	std	Y+1, r22	; 0x01
    3636:	3a 01       	movw	r6, r20
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
    3638:	ca 01       	movw	r24, r20
    363a:	67 e0       	ldi	r22, 0x07	; 7
    363c:	70 e0       	ldi	r23, 0x00	; 0
    363e:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__udivmodhi4>
    3642:	2b 01       	movw	r4, r22
    3644:	5b 01       	movw	r10, r22
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    3646:	61 15       	cp	r22, r1
    3648:	71 05       	cpc	r23, r1
    364a:	b1 f1       	breq	.+108    	; 0x36b8 <sysex_encode+0xb6>
    364c:	81 01       	movw	r16, r2
    364e:	e9 80       	ldd	r14, Y+1	; 0x01
    3650:	fa 80       	ldd	r15, Y+2	; 0x02
    3652:	cc 24       	eor	r12, r12
    3654:	dd 24       	eor	r13, r13
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3656:	88 24       	eor	r8, r8
    3658:	99 24       	eor	r9, r9
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    365a:	1e 83       	std	Y+6, r17	; 0x06
    365c:	0d 83       	std	Y+5, r16	; 0x05

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
    365e:	f8 01       	movw	r30, r16
    3660:	11 92       	st	Z+, r1
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    3662:	fc 82       	std	Y+4, r15	; 0x04
    3664:	eb 82       	std	Y+3, r14	; 0x03
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    3666:	a4 01       	movw	r20, r8
         uint8_t current = source[input_start_idx + j];
    3668:	ab 81       	ldd	r26, Y+3	; 0x03
    366a:	bc 81       	ldd	r27, Y+4	; 0x04
    366c:	2d 91       	ld	r18, X+
    366e:	bc 83       	std	Y+4, r27	; 0x04
    3670:	ab 83       	std	Y+3, r26	; 0x03
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3672:	4f 5f       	subi	r20, 0xFF	; 255
    3674:	5f 4f       	sbci	r21, 0xFF	; 255
    3676:	82 2f       	mov	r24, r18
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	80 78       	andi	r24, 0x80	; 128
    367c:	90 70       	andi	r25, 0x00	; 0
    367e:	bc 01       	movw	r22, r24
    3680:	04 2e       	mov	r0, r20
    3682:	02 c0       	rjmp	.+4      	; 0x3688 <sysex_encode+0x86>
    3684:	75 95       	asr	r23
    3686:	67 95       	ror	r22
    3688:	0a 94       	dec	r0
    368a:	e2 f7       	brpl	.-8      	; 0x3684 <sysex_encode+0x82>
    368c:	ad 81       	ldd	r26, Y+5	; 0x05
    368e:	be 81       	ldd	r27, Y+6	; 0x06
    3690:	8c 91       	ld	r24, X
    3692:	86 2b       	or	r24, r22
    3694:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3696:	2f 77       	andi	r18, 0x7F	; 127
    3698:	21 93       	st	Z+, r18
   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t input_start_idx = i * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < 7; j++){
    369a:	47 30       	cpi	r20, 0x07	; 7
    369c:	51 05       	cpc	r21, r1
    369e:	21 f7       	brne	.-56     	; 0x3668 <sysex_encode+0x66>
uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
   uint16_t encoded_full = length / 7; //number of full 8 byte sections from 7 bytes of input
   uint16_t i,j;

   //fill out the fully encoded sections
   for(i = 0; i < encoded_full; i++) {
    36a0:	08 94       	sec
    36a2:	c1 1c       	adc	r12, r1
    36a4:	d1 1c       	adc	r13, r1
    36a6:	08 5f       	subi	r16, 0xF8	; 248
    36a8:	1f 4f       	sbci	r17, 0xFF	; 255
    36aa:	e7 e0       	ldi	r30, 0x07	; 7
    36ac:	f0 e0       	ldi	r31, 0x00	; 0
    36ae:	ee 0e       	add	r14, r30
    36b0:	ff 1e       	adc	r15, r31
    36b2:	ca 14       	cp	r12, r10
    36b4:	db 04       	cpc	r13, r11
    36b6:	89 f6       	brne	.-94     	; 0x365a <sysex_encode+0x58>
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
   }

   //fill out the rest if there is any more
   uint8_t remainder = length % 7;
    36b8:	c3 01       	movw	r24, r6
    36ba:	67 e0       	ldi	r22, 0x07	; 7
    36bc:	70 e0       	ldi	r23, 0x00	; 0
    36be:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__udivmodhi4>
   if (remainder) {
    36c2:	88 23       	and	r24, r24
    36c4:	d9 f1       	breq	.+118    	; 0x373c <sysex_encode+0x13a>
      uint16_t encoded_msb_idx = encoded_full * 8;
    36c6:	82 01       	movw	r16, r4
    36c8:	00 0f       	add	r16, r16
    36ca:	11 1f       	adc	r17, r17
    36cc:	00 0f       	add	r16, r16
    36ce:	11 1f       	adc	r17, r17
    36d0:	00 0f       	add	r16, r16
    36d2:	11 1f       	adc	r17, r17
      uint16_t input_start_idx = encoded_full * 7;
    36d4:	78 01       	movw	r14, r16
    36d6:	e4 18       	sub	r14, r4
    36d8:	f5 08       	sbc	r15, r5
      encoded[encoded_msb_idx] = 0;
    36da:	d1 01       	movw	r26, r2
    36dc:	a0 0f       	add	r26, r16
    36de:	b1 1f       	adc	r27, r17
    36e0:	1c 92       	st	X, r1
      for(j = 0; j < remainder; j++){
    36e2:	68 2f       	mov	r22, r24
    36e4:	70 e0       	ldi	r23, 0x00	; 0
    36e6:	61 15       	cp	r22, r1
    36e8:	71 05       	cpc	r23, r1
    36ea:	19 f1       	breq	.+70     	; 0x3732 <sysex_encode+0x130>
      return (encoded_length / 8) * 7 + remainder - 1;
   else
      return (encoded_length / 8) * 7;
}

uint16_t sysex_encode(uint8_t *encoded, const uint8_t *source, const uint16_t length){
    36ec:	e9 81       	ldd	r30, Y+1	; 0x01
    36ee:	fa 81       	ldd	r31, Y+2	; 0x02
    36f0:	ee 0e       	add	r14, r30
    36f2:	ff 1e       	adc	r15, r31
    36f4:	c8 01       	movw	r24, r16
    36f6:	01 96       	adiw	r24, 0x01	; 1
    36f8:	28 0e       	add	r2, r24
    36fa:	39 1e       	adc	r3, r25
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
         uint8_t current = source[input_start_idx + j];
    3700:	f7 01       	movw	r30, r14
    3702:	41 91       	ld	r20, Z+
    3704:	7f 01       	movw	r14, r30
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
    3706:	2f 5f       	subi	r18, 0xFF	; 255
    3708:	3f 4f       	sbci	r19, 0xFF	; 255
    370a:	84 2f       	mov	r24, r20
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	80 78       	andi	r24, 0x80	; 128
    3710:	90 70       	andi	r25, 0x00	; 0
    3712:	02 2e       	mov	r0, r18
    3714:	02 c0       	rjmp	.+4      	; 0x371a <sysex_encode+0x118>
    3716:	95 95       	asr	r25
    3718:	87 95       	ror	r24
    371a:	0a 94       	dec	r0
    371c:	e2 f7       	brpl	.-8      	; 0x3716 <sysex_encode+0x114>
    371e:	9c 91       	ld	r25, X
    3720:	89 2b       	or	r24, r25
    3722:	8c 93       	st	X, r24
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
    3724:	4f 77       	andi	r20, 0x7F	; 127
    3726:	f1 01       	movw	r30, r2
    3728:	41 93       	st	Z+, r20
    372a:	1f 01       	movw	r2, r30
   uint8_t remainder = length % 7;
   if (remainder) {
      uint16_t encoded_msb_idx = encoded_full * 8;
      uint16_t input_start_idx = encoded_full * 7;
      encoded[encoded_msb_idx] = 0;
      for(j = 0; j < remainder; j++){
    372c:	26 17       	cp	r18, r22
    372e:	37 07       	cpc	r19, r23
    3730:	38 f3       	brcs	.-50     	; 0x3700 <sysex_encode+0xfe>
         uint8_t current = source[input_start_idx + j];
         encoded[encoded_msb_idx] |= (0x80 & current) >> (1 + j);
         encoded[encoded_msb_idx + 1 + j] = 0x7F & current;
      }
      return encoded_msb_idx + remainder + 1;
    3732:	c8 01       	movw	r24, r16
    3734:	01 96       	adiw	r24, 0x01	; 1
    3736:	86 0f       	add	r24, r22
    3738:	97 1f       	adc	r25, r23
    373a:	07 c0       	rjmp	.+14     	; 0x374a <sysex_encode+0x148>
   } else {
      return encoded_full * 8;
    373c:	c2 01       	movw	r24, r4
    373e:	88 0f       	add	r24, r24
    3740:	99 1f       	adc	r25, r25
    3742:	88 0f       	add	r24, r24
    3744:	99 1f       	adc	r25, r25
    3746:	88 0f       	add	r24, r24
    3748:	99 1f       	adc	r25, r25
   }
}
    374a:	26 96       	adiw	r28, 0x06	; 6
    374c:	0f b6       	in	r0, 0x3f	; 63
    374e:	f8 94       	cli
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	0f be       	out	0x3f, r0	; 63
    3754:	cd bf       	out	0x3d, r28	; 61
    3756:	df 91       	pop	r29
    3758:	cf 91       	pop	r28
    375a:	1f 91       	pop	r17
    375c:	0f 91       	pop	r16
    375e:	ff 90       	pop	r15
    3760:	ef 90       	pop	r14
    3762:	df 90       	pop	r13
    3764:	cf 90       	pop	r12
    3766:	bf 90       	pop	r11
    3768:	af 90       	pop	r10
    376a:	9f 90       	pop	r9
    376c:	8f 90       	pop	r8
    376e:	7f 90       	pop	r7
    3770:	6f 90       	pop	r6
    3772:	5f 90       	pop	r5
    3774:	4f 90       	pop	r4
    3776:	3f 90       	pop	r3
    3778:	2f 90       	pop	r2
    377a:	08 95       	ret

0000377c <sysex_decode>:

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    377c:	6f 92       	push	r6
    377e:	7f 92       	push	r7
    3780:	8f 92       	push	r8
    3782:	9f 92       	push	r9
    3784:	af 92       	push	r10
    3786:	bf 92       	push	r11
    3788:	cf 92       	push	r12
    378a:	df 92       	push	r13
    378c:	ef 92       	push	r14
    378e:	ff 92       	push	r15
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	3c 01       	movw	r6, r24
    379a:	4b 01       	movw	r8, r22
    379c:	5a 01       	movw	r10, r20
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
    379e:	42 30       	cpi	r20, 0x02	; 2
    37a0:	51 05       	cpc	r21, r1
    37a2:	08 f4       	brcc	.+2      	; 0x37a6 <sysex_decode+0x2a>
    37a4:	6f c0       	rjmp	.+222    	; 0x3884 <sysex_decode+0x108>
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
    37a6:	7a 01       	movw	r14, r20
    37a8:	f6 94       	lsr	r15
    37aa:	e7 94       	ror	r14
    37ac:	f6 94       	lsr	r15
    37ae:	e7 94       	ror	r14
    37b0:	f6 94       	lsr	r15
    37b2:	e7 94       	ror	r14

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    37b4:	e1 14       	cp	r14, r1
    37b6:	f1 04       	cpc	r15, r1
    37b8:	29 f1       	breq	.+74     	; 0x3804 <sysex_decode+0x88>
    37ba:	eb 01       	movw	r28, r22
    37bc:	b3 01       	movw	r22, r6
    37be:	00 e0       	ldi	r16, 0x00	; 0
    37c0:	10 e0       	ldi	r17, 0x00	; 0
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    37c2:	cc 24       	eor	r12, r12
    37c4:	dd 24       	eor	r13, r13
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    37c6:	de 01       	movw	r26, r28
    37c8:	11 96       	adiw	r26, 0x01	; 1
    37ca:	fb 01       	movw	r30, r22

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    37cc:	a6 01       	movw	r20, r12
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    37ce:	2d 91       	ld	r18, X+
    37d0:	2f 77       	andi	r18, 0x7F	; 127
    37d2:	20 83       	st	Z, r18
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    37d4:	4f 5f       	subi	r20, 0xFF	; 255
    37d6:	5f 4f       	sbci	r21, 0xFF	; 255
    37d8:	88 81       	ld	r24, Y
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	04 2e       	mov	r0, r20
    37de:	02 c0       	rjmp	.+4      	; 0x37e4 <sysex_decode+0x68>
    37e0:	88 0f       	add	r24, r24
    37e2:	99 1f       	adc	r25, r25
    37e4:	0a 94       	dec	r0
    37e6:	e2 f7       	brpl	.-8      	; 0x37e0 <sysex_decode+0x64>
    37e8:	80 78       	andi	r24, 0x80	; 128
    37ea:	28 2b       	or	r18, r24
    37ec:	21 93       	st	Z+, r18

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
      uint16_t encoded_msb_idx = i * 8;
      uint16_t output_start_index = i * 7;
      for(j = 0; j < 7; j++){
    37ee:	47 30       	cpi	r20, 0x07	; 7
    37f0:	51 05       	cpc	r21, r1
    37f2:	69 f7       	brne	.-38     	; 0x37ce <sysex_decode+0x52>

   if (length < 2)
      return 0;

   //fill out the fully encoded sections
   for(i = 0; i < decoded_full; i++) {
    37f4:	0f 5f       	subi	r16, 0xFF	; 255
    37f6:	1f 4f       	sbci	r17, 0xFF	; 255
    37f8:	28 96       	adiw	r28, 0x08	; 8
    37fa:	69 5f       	subi	r22, 0xF9	; 249
    37fc:	7f 4f       	sbci	r23, 0xFF	; 255
    37fe:	0e 15       	cp	r16, r14
    3800:	1f 05       	cpc	r17, r15
    3802:	09 f7       	brne	.-62     	; 0x37c6 <sysex_decode+0x4a>
      for(j = 0; j < 7; j++){
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
   }
   uint8_t remainder = length % 8;
    3804:	5a 2d       	mov	r21, r10
    3806:	57 70       	andi	r21, 0x07	; 7
   if (remainder) {
    3808:	99 f1       	breq	.+102    	; 0x3870 <sysex_decode+0xf4>
      uint16_t encoded_msb_idx = decoded_full * 8;
    380a:	e7 01       	movw	r28, r14
    380c:	cc 0f       	add	r28, r28
    380e:	dd 1f       	adc	r29, r29
    3810:	cc 0f       	add	r28, r28
    3812:	dd 1f       	adc	r29, r29
    3814:	cc 0f       	add	r28, r28
    3816:	dd 1f       	adc	r29, r29
      uint16_t output_start_index = decoded_full * 7;
    3818:	8e 01       	movw	r16, r28
    381a:	0e 19       	sub	r16, r14
    381c:	1f 09       	sbc	r17, r15
      for(j = 0; j < (remainder - 1); j++) {
    381e:	65 2f       	mov	r22, r21
    3820:	70 e0       	ldi	r23, 0x00	; 0
    3822:	61 50       	subi	r22, 0x01	; 1
    3824:	70 40       	sbci	r23, 0x00	; 0
    3826:	f9 f0       	breq	.+62     	; 0x3866 <sysex_decode+0xea>
   } else {
      return encoded_full * 8;
   }
}

uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
    3828:	ce 01       	movw	r24, r28
    382a:	01 96       	adiw	r24, 0x01	; 1
    382c:	d4 01       	movw	r26, r8
    382e:	a8 0f       	add	r26, r24
    3830:	b9 1f       	adc	r27, r25
    3832:	f3 01       	movw	r30, r6
    3834:	e0 0f       	add	r30, r16
    3836:	f1 1f       	adc	r31, r17
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    383c:	c8 0d       	add	r28, r8
    383e:	d9 1d       	adc	r29, r9
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
    3840:	4d 91       	ld	r20, X+
    3842:	4f 77       	andi	r20, 0x7F	; 127
    3844:	40 83       	st	Z, r20
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
    3846:	2f 5f       	subi	r18, 0xFF	; 255
    3848:	3f 4f       	sbci	r19, 0xFF	; 255
    384a:	88 81       	ld	r24, Y
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	02 2e       	mov	r0, r18
    3850:	02 c0       	rjmp	.+4      	; 0x3856 <sysex_decode+0xda>
    3852:	88 0f       	add	r24, r24
    3854:	99 1f       	adc	r25, r25
    3856:	0a 94       	dec	r0
    3858:	e2 f7       	brpl	.-8      	; 0x3852 <sysex_decode+0xd6>
    385a:	80 78       	andi	r24, 0x80	; 128
    385c:	48 2b       	or	r20, r24
    385e:	41 93       	st	Z+, r20
   }
   uint8_t remainder = length % 8;
   if (remainder) {
      uint16_t encoded_msb_idx = decoded_full * 8;
      uint16_t output_start_index = decoded_full * 7;
      for(j = 0; j < (remainder - 1); j++) {
    3860:	26 17       	cp	r18, r22
    3862:	37 07       	cpc	r19, r23
    3864:	68 f3       	brcs	.-38     	; 0x3840 <sysex_decode+0xc4>
         decoded[output_start_index + j] = 0x7F & source[encoded_msb_idx + j + 1];
         decoded[output_start_index + j] |= (0x80 & (source[encoded_msb_idx] << (1 + j)));
      }
      return decoded_full * 7 + remainder - 1;
    3866:	c8 01       	movw	r24, r16
    3868:	01 97       	sbiw	r24, 0x01	; 1
    386a:	85 0f       	add	r24, r21
    386c:	91 1d       	adc	r25, r1
    386e:	0c c0       	rjmp	.+24     	; 0x3888 <sysex_decode+0x10c>
   } else {
      return decoded_full * 7;
    3870:	c7 01       	movw	r24, r14
    3872:	88 0f       	add	r24, r24
    3874:	99 1f       	adc	r25, r25
    3876:	88 0f       	add	r24, r24
    3878:	99 1f       	adc	r25, r25
    387a:	88 0f       	add	r24, r24
    387c:	99 1f       	adc	r25, r25
    387e:	8e 19       	sub	r24, r14
    3880:	9f 09       	sbc	r25, r15
    3882:	02 c0       	rjmp	.+4      	; 0x3888 <sysex_decode+0x10c>
uint16_t sysex_decode(uint8_t *decoded, const uint8_t *source, const uint16_t length){
   uint16_t decoded_full = length / 8;
   uint16_t i,j;

   if (length < 2)
      return 0;
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
      }
      return decoded_full * 7 + remainder - 1;
   } else {
      return decoded_full * 7;
   }
}
    3888:	df 91       	pop	r29
    388a:	cf 91       	pop	r28
    388c:	1f 91       	pop	r17
    388e:	0f 91       	pop	r16
    3890:	ff 90       	pop	r15
    3892:	ef 90       	pop	r14
    3894:	df 90       	pop	r13
    3896:	cf 90       	pop	r12
    3898:	bf 90       	pop	r11
    389a:	af 90       	pop	r10
    389c:	9f 90       	pop	r9
    389e:	8f 90       	pop	r8
    38a0:	7f 90       	pop	r7
    38a2:	6f 90       	pop	r6
    38a4:	08 95       	ret

000038a6 <__mulsi3>:
    38a6:	62 9f       	mul	r22, r18
    38a8:	d0 01       	movw	r26, r0
    38aa:	73 9f       	mul	r23, r19
    38ac:	f0 01       	movw	r30, r0
    38ae:	82 9f       	mul	r24, r18
    38b0:	e0 0d       	add	r30, r0
    38b2:	f1 1d       	adc	r31, r1
    38b4:	64 9f       	mul	r22, r20
    38b6:	e0 0d       	add	r30, r0
    38b8:	f1 1d       	adc	r31, r1
    38ba:	92 9f       	mul	r25, r18
    38bc:	f0 0d       	add	r31, r0
    38be:	83 9f       	mul	r24, r19
    38c0:	f0 0d       	add	r31, r0
    38c2:	74 9f       	mul	r23, r20
    38c4:	f0 0d       	add	r31, r0
    38c6:	65 9f       	mul	r22, r21
    38c8:	f0 0d       	add	r31, r0
    38ca:	99 27       	eor	r25, r25
    38cc:	72 9f       	mul	r23, r18
    38ce:	b0 0d       	add	r27, r0
    38d0:	e1 1d       	adc	r30, r1
    38d2:	f9 1f       	adc	r31, r25
    38d4:	63 9f       	mul	r22, r19
    38d6:	b0 0d       	add	r27, r0
    38d8:	e1 1d       	adc	r30, r1
    38da:	f9 1f       	adc	r31, r25
    38dc:	bd 01       	movw	r22, r26
    38de:	cf 01       	movw	r24, r30
    38e0:	11 24       	eor	r1, r1
    38e2:	08 95       	ret

000038e4 <__udivmodhi4>:
    38e4:	aa 1b       	sub	r26, r26
    38e6:	bb 1b       	sub	r27, r27
    38e8:	51 e1       	ldi	r21, 0x11	; 17
    38ea:	07 c0       	rjmp	.+14     	; 0x38fa <__udivmodhi4_ep>

000038ec <__udivmodhi4_loop>:
    38ec:	aa 1f       	adc	r26, r26
    38ee:	bb 1f       	adc	r27, r27
    38f0:	a6 17       	cp	r26, r22
    38f2:	b7 07       	cpc	r27, r23
    38f4:	10 f0       	brcs	.+4      	; 0x38fa <__udivmodhi4_ep>
    38f6:	a6 1b       	sub	r26, r22
    38f8:	b7 0b       	sbc	r27, r23

000038fa <__udivmodhi4_ep>:
    38fa:	88 1f       	adc	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	5a 95       	dec	r21
    3900:	a9 f7       	brne	.-22     	; 0x38ec <__udivmodhi4_loop>
    3902:	80 95       	com	r24
    3904:	90 95       	com	r25
    3906:	bc 01       	movw	r22, r24
    3908:	cd 01       	movw	r24, r26
    390a:	08 95       	ret

0000390c <__divmodhi4>:
    390c:	97 fb       	bst	r25, 7
    390e:	09 2e       	mov	r0, r25
    3910:	07 26       	eor	r0, r23
    3912:	0a d0       	rcall	.+20     	; 0x3928 <__divmodhi4_neg1>
    3914:	77 fd       	sbrc	r23, 7
    3916:	04 d0       	rcall	.+8      	; 0x3920 <__divmodhi4_neg2>
    3918:	e5 df       	rcall	.-54     	; 0x38e4 <__udivmodhi4>
    391a:	06 d0       	rcall	.+12     	; 0x3928 <__divmodhi4_neg1>
    391c:	00 20       	and	r0, r0
    391e:	1a f4       	brpl	.+6      	; 0x3926 <__divmodhi4_exit>

00003920 <__divmodhi4_neg2>:
    3920:	70 95       	com	r23
    3922:	61 95       	neg	r22
    3924:	7f 4f       	sbci	r23, 0xFF	; 255

00003926 <__divmodhi4_exit>:
    3926:	08 95       	ret

00003928 <__divmodhi4_neg1>:
    3928:	f6 f7       	brtc	.-4      	; 0x3926 <__divmodhi4_exit>
    392a:	90 95       	com	r25
    392c:	81 95       	neg	r24
    392e:	9f 4f       	sbci	r25, 0xFF	; 255
    3930:	08 95       	ret

00003932 <memcpy>:
    3932:	fb 01       	movw	r30, r22
    3934:	dc 01       	movw	r26, r24
    3936:	02 c0       	rjmp	.+4      	; 0x393c <memcpy+0xa>
    3938:	01 90       	ld	r0, Z+
    393a:	0d 92       	st	X+, r0
    393c:	41 50       	subi	r20, 0x01	; 1
    393e:	50 40       	sbci	r21, 0x00	; 0
    3940:	d8 f7       	brcc	.-10     	; 0x3938 <memcpy+0x6>
    3942:	08 95       	ret

00003944 <memmove>:
    3944:	68 17       	cp	r22, r24
    3946:	79 07       	cpc	r23, r25
    3948:	68 f4       	brcc	.+26     	; 0x3964 <memmove+0x20>
    394a:	fb 01       	movw	r30, r22
    394c:	dc 01       	movw	r26, r24
    394e:	e4 0f       	add	r30, r20
    3950:	f5 1f       	adc	r31, r21
    3952:	a4 0f       	add	r26, r20
    3954:	b5 1f       	adc	r27, r21
    3956:	02 c0       	rjmp	.+4      	; 0x395c <memmove+0x18>
    3958:	02 90       	ld	r0, -Z
    395a:	0e 92       	st	-X, r0
    395c:	41 50       	subi	r20, 0x01	; 1
    395e:	50 40       	sbci	r21, 0x00	; 0
    3960:	d8 f7       	brcc	.-10     	; 0x3958 <memmove+0x14>
    3962:	08 95       	ret
    3964:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <memcpy>

00003968 <__eerd_block_m6450a>:
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22

0000396c <__eerd_blraw_m6450a>:
    396c:	fc 01       	movw	r30, r24
    396e:	f9 99       	sbic	0x1f, 1	; 31
    3970:	fe cf       	rjmp	.-4      	; 0x396e <__eerd_blraw_m6450a+0x2>
    3972:	06 c0       	rjmp	.+12     	; 0x3980 <__eerd_blraw_m6450a+0x14>
    3974:	f2 bd       	out	0x22, r31	; 34
    3976:	e1 bd       	out	0x21, r30	; 33
    3978:	f8 9a       	sbi	0x1f, 0	; 31
    397a:	31 96       	adiw	r30, 0x01	; 1
    397c:	00 b4       	in	r0, 0x20	; 32
    397e:	0d 92       	st	X+, r0
    3980:	41 50       	subi	r20, 0x01	; 1
    3982:	50 40       	sbci	r21, 0x00	; 0
    3984:	b8 f7       	brcc	.-18     	; 0x3974 <__eerd_blraw_m6450a+0x8>
    3986:	08 95       	ret

00003988 <__eerd_word_m6450a>:
    3988:	a8 e1       	ldi	r26, 0x18	; 24
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	42 e0       	ldi	r20, 0x02	; 2
    398e:	50 e0       	ldi	r21, 0x00	; 0
    3990:	0c 94 b6 1c 	jmp	0x396c	; 0x396c <__eerd_blraw_m6450a>

00003994 <__eeupd_block_m6450a>:
    3994:	dc 01       	movw	r26, r24
    3996:	a4 0f       	add	r26, r20
    3998:	b5 1f       	adc	r27, r21
    399a:	41 50       	subi	r20, 0x01	; 1
    399c:	50 40       	sbci	r21, 0x00	; 0
    399e:	48 f0       	brcs	.+18     	; 0x39b2 <__eeupd_block_m6450a+0x1e>
    39a0:	cb 01       	movw	r24, r22
    39a2:	84 0f       	add	r24, r20
    39a4:	95 1f       	adc	r25, r21
    39a6:	2e 91       	ld	r18, -X
    39a8:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <__eeupd_r18_m6450a>
    39ac:	41 50       	subi	r20, 0x01	; 1
    39ae:	50 40       	sbci	r21, 0x00	; 0
    39b0:	d0 f7       	brcc	.-12     	; 0x39a6 <__eeupd_block_m6450a+0x12>
    39b2:	08 95       	ret

000039b4 <__eeupd_byte_m6450a>:
    39b4:	26 2f       	mov	r18, r22

000039b6 <__eeupd_r18_m6450a>:
    39b6:	f9 99       	sbic	0x1f, 1	; 31
    39b8:	fe cf       	rjmp	.-4      	; 0x39b6 <__eeupd_r18_m6450a>
    39ba:	92 bd       	out	0x22, r25	; 34
    39bc:	81 bd       	out	0x21, r24	; 33
    39be:	f8 9a       	sbi	0x1f, 0	; 31
    39c0:	01 97       	sbiw	r24, 0x01	; 1
    39c2:	00 b4       	in	r0, 0x20	; 32
    39c4:	02 16       	cp	r0, r18
    39c6:	31 f0       	breq	.+12     	; 0x39d4 <__eeupd_r18_m6450a+0x1e>
    39c8:	20 bd       	out	0x20, r18	; 32
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	f8 94       	cli
    39ce:	fa 9a       	sbi	0x1f, 2	; 31
    39d0:	f9 9a       	sbi	0x1f, 1	; 31
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	08 95       	ret

000039d6 <__eeupd_word_m6450a>:
    39d6:	01 96       	adiw	r24, 0x01	; 1
    39d8:	27 2f       	mov	r18, r23
    39da:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <__eeupd_r18_m6450a>
    39de:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__eeupd_byte_m6450a>

000039e2 <_exit>:
    39e2:	f8 94       	cli

000039e4 <__stop_program>:
    39e4:	ff cf       	rjmp	.-2      	; 0x39e4 <__stop_program>
