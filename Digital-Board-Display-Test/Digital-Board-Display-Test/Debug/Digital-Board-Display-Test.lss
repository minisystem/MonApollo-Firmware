
Digital-Board-Display-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000322  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010e  0080010e  000003c4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000b18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004fb  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000127  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038a  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000151  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b2  00000000  00000000  00001751  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_5>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d0 e1       	ldi	r29, 0x10	; 16
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	e2 e2       	ldi	r30, 0x22	; 34
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ae 30       	cpi	r26, 0x0E	; 14
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	ae e0       	ldi	r26, 0x0E	; 14
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a2 31       	cpi	r26, 0x12	; 18
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 41 01 	call	0x282	; 0x282 <main>
  9a:	0c 94 8f 01 	jmp	0x31e	; 0x31e <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <_Z11display_DECjh>:
volatile uint8_t ISW4_SW_ON = 0;  //flag for ISW4 switch

volatile uint8_t place = 0; //digit place for LED display

void display_DEC(uint16_t number, uint8_t digit)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	2a 97       	sbiw	r28, 0x0a	; 10
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
		SEVEN,
		EIGHT,
		NINE,
		
		
	};
  b6:	de 01       	movw	r26, r28
  b8:	11 96       	adiw	r26, 0x01	; 1
  ba:	e0 e0       	ldi	r30, 0x00	; 0
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	3a e0       	ldi	r19, 0x0A	; 10
  c0:	01 90       	ld	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	31 50       	subi	r19, 0x01	; 1
  c6:	e1 f7       	brne	.-8      	; 0xc0 <_Z11display_DECjh+0x1e>
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
  c8:	3f ef       	ldi	r19, 0xFF	; 255
  ca:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
  cc:	ea ed       	ldi	r30, 0xDA	; 218
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	30 81       	ld	r19, Z
  d2:	30 61       	ori	r19, 0x10	; 16
  d4:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
  d6:	30 81       	ld	r19, Z
  d8:	3f 7e       	andi	r19, 0xEF	; 239
  da:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
  dc:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
  de:	30 81       	ld	r19, Z
  e0:	30 62       	ori	r19, 0x20	; 32
  e2:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
  e4:	30 81       	ld	r19, Z
  e6:	3f 7d       	andi	r19, 0xDF	; 223
  e8:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
  ea:	62 30       	cpi	r22, 0x02	; 2
  ec:	f9 f0       	breq	.+62     	; 0x12c <_Z11display_DECjh+0x8a>
  ee:	63 30       	cpi	r22, 0x03	; 3
  f0:	18 f4       	brcc	.+6      	; 0xf8 <_Z11display_DECjh+0x56>
  f2:	61 30       	cpi	r22, 0x01	; 1
  f4:	a1 f5       	brne	.+104    	; 0x15e <_Z11display_DECjh+0xbc>
  f6:	0d c0       	rjmp	.+26     	; 0x112 <_Z11display_DECjh+0x70>
  f8:	64 30       	cpi	r22, 0x04	; 4
  fa:	29 f1       	breq	.+74     	; 0x146 <_Z11display_DECjh+0xa4>
  fc:	68 30       	cpi	r22, 0x08	; 8
  fe:	79 f5       	brne	.+94     	; 0x15e <_Z11display_DECjh+0xbc>
		
		case ONES:
		cathode_byte = DEC[(number % 10)]; //print first decimal digit
 100:	6a e0       	ldi	r22, 0x0A	; 10
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__udivmodhi4>
 108:	fe 01       	movw	r30, r28
 10a:	e8 0f       	add	r30, r24
 10c:	f9 1f       	adc	r31, r25
 10e:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 110:	26 c0       	rjmp	.+76     	; 0x15e <_Z11display_DECjh+0xbc>
		
		case TENS:
		cathode_byte = DEC[((number % 100) / 10)]; //print second decimal digit
 112:	64 e6       	ldi	r22, 0x64	; 100
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__udivmodhi4>
 11a:	6a e0       	ldi	r22, 0x0A	; 10
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__udivmodhi4>
 122:	fe 01       	movw	r30, r28
 124:	e6 0f       	add	r30, r22
 126:	f7 1f       	adc	r31, r23
 128:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 12a:	19 c0       	rjmp	.+50     	; 0x15e <_Z11display_DECjh+0xbc>
		
		case HUNDS:
		cathode_byte = DEC[((number % 1000) / 100)]; //print third decimal digit
 12c:	68 ee       	ldi	r22, 0xE8	; 232
 12e:	73 e0       	ldi	r23, 0x03	; 3
 130:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__udivmodhi4>
 134:	64 e6       	ldi	r22, 0x64	; 100
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__udivmodhi4>
 13c:	fe 01       	movw	r30, r28
 13e:	e6 0f       	add	r30, r22
 140:	f7 1f       	adc	r31, r23
 142:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 144:	0c c0       	rjmp	.+24     	; 0x15e <_Z11display_DECjh+0xbc>
		
		case THOUS:
		cathode_byte = DEC[((number % 10000) / 1000)]; //print fourth decimal digit
 146:	60 e1       	ldi	r22, 0x10	; 16
 148:	77 e2       	ldi	r23, 0x27	; 39
 14a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__udivmodhi4>
 14e:	68 ee       	ldi	r22, 0xE8	; 232
 150:	73 e0       	ldi	r23, 0x03	; 3
 152:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__udivmodhi4>
 156:	fe 01       	movw	r30, r28
 158:	e6 0f       	add	r30, r22
 15a:	f7 1f       	adc	r31, r23
 15c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~cathode_byte; //set bits for cathode (current sinks, active LOW)
 15e:	20 95       	com	r18
 160:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 162:	ea ed       	ldi	r30, 0xDA	; 218
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 16c:	80 81       	ld	r24, Z
 16e:	8f 7e       	andi	r24, 0xEF	; 239
 170:	80 83       	st	Z, r24

}
 172:	2a 96       	adiw	r28, 0x0a	; 10
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	cd bf       	out	0x3d, r28	; 61
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <__vector_5>:
	TENS,
	HUNDS,
	THOUS,
};
//main scanning interrupt handler
ISR (TIMER2_OVF_vect) {
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	
	//toggle ARP_SYNC LED
	PINB = (1<<ARP_SYNC_LED);
 1a6:	80 e8       	ldi	r24, 0x80	; 128
 1a8:	83 b9       	out	0x03, r24	; 3
	SPI_PORT |= SPI_SW_LATCH;
 1aa:	2d 9a       	sbi	0x05, 5	; 5
		
	//SHIFT 5th BYTE
	SPDR =  ISW4_SW_ON << 1 | ISW8_LED; //ISW8_LED is MSB on 74XX595 U16
 1ac:	80 91 0f 01 	lds	r24, 0x010F
 1b0:	88 0f       	add	r24, r24
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 1b6:	0d b4       	in	r0, 0x2d	; 45
 1b8:	07 fe       	sbrs	r0, 7
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <__vector_5+0x32>
		
	//Now read SPDR for switch data shifted in from 74XX165 U14
	if (SPDR >> 7 & 1) //check if ISW4_SW bit is set (MSB on U14)
 1bc:	0e b4       	in	r0, 0x2e	; 46
 1be:	07 fe       	sbrs	r0, 7
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <__vector_5+0x46>
	{
		ISW4_SW_ON = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 0f 01 	sts	0x010F, r24
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <__vector_5+0x4a>
	}
	else
	{
		ISW4_SW_ON = 0;
 1ca:	10 92 0f 01 	sts	0x010F, r1
	}
	//SHIFT 4th BYTE
	SPDR = 0; //no LEDs connected in current test set up
 1ce:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 1d0:	0d b4       	in	r0, 0x2d	; 45
 1d2:	07 fe       	sbrs	r0, 7
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <__vector_5+0x4c>
	//Now read SPDR for switch data shifted in from 74XX165 (U9)
	//check if ISW12_SW bit is set
	if (SPDR >> 5 & 1)
 1d6:	0e b4       	in	r0, 0x2e	; 46
 1d8:	05 fe       	sbrs	r0, 5
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <__vector_5+0x60>
	{
		ISW12_SW_ON = 1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 11 01 	sts	0x0111, r24
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__vector_5+0x64>
	}
	else
	{
		ISW12_SW_ON = 0;
 1e4:	10 92 11 01 	sts	0x0111, r1
	}
	//check if ISW13_SW bit is set
	if (SPDR >> 6 & 1)
 1e8:	0e b4       	in	r0, 0x2e	; 46
 1ea:	06 fe       	sbrs	r0, 6
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <__vector_5+0x72>
	{
		ISW13_SW_ON = 1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 10 01 	sts	0x0110, r24
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <__vector_5+0x76>
	}
	else
	{
		ISW13_SW_ON = 0;
 1f6:	10 92 10 01 	sts	0x0110, r1
	}
		
	//SHIFT 3th BYTE
	SPDR = 0;
 1fa:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 1fc:	0d b4       	in	r0, 0x2d	; 45
 1fe:	07 fe       	sbrs	r0, 7
 200:	fd cf       	rjmp	.-6      	; 0x1fc <__vector_5+0x78>

	//SHIFT 2th BYTE
	SPDR = 0;
 202:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 204:	0d b4       	in	r0, 0x2d	; 45
 206:	07 fe       	sbrs	r0, 7
 208:	fd cf       	rjmp	.-6      	; 0x204 <__vector_5+0x80>
		
	//SHIFT 1st BYTE
	//SPDR = (ISW12_SW_ON << 2) | ISW11_LED; //TURN ON ISW12 (if ISW12_SW is ON) and ISW11 LEDs, both on 74XX595 U8, first shift register in chain
	SPDR = (ISW12_SW_ON <<2) | (ISW13_SW_ON << 7); //turn on ISW12 if ISW12_SW is ON, turn ISW11 (MSB of first shift register chain) if ISW13_SW is ON
 20a:	80 91 11 01 	lds	r24, 0x0111
 20e:	90 91 10 01 	lds	r25, 0x0110
 212:	97 95       	ror	r25
 214:	99 27       	eor	r25, r25
 216:	97 95       	ror	r25
 218:	88 0f       	add	r24, r24
 21a:	88 0f       	add	r24, r24
 21c:	89 2b       	or	r24, r25
 21e:	8e bd       	out	0x2e, r24	; 46
	//Wait for SPI shift to complete
	while (!(SPSR & (1<<SPIF)));
 220:	0d b4       	in	r0, 0x2d	; 45
 222:	07 fe       	sbrs	r0, 7
 224:	fd cf       	rjmp	.-6      	; 0x220 <__vector_5+0x9c>
		
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
	SPI_LATCH_PORT &= ~LED_LATCH;
 226:	ed ed       	ldi	r30, 0xDD	; 221
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	87 7f       	andi	r24, 0xF7	; 247
 22e:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 230:	80 81       	ld	r24, Z
 232:	88 60       	ori	r24, 0x08	; 8
 234:	80 83       	st	Z, r24
		
	//clear SPI_SW_LATCH
	SPI_PORT &= ~SPI_SW_LATCH;
 236:	2d 98       	cbi	0x05, 5	; 5
		
	//update 7-segment LED display 
	display_DEC(4242,digit[place]);
 238:	e0 91 0e 01 	lds	r30, 0x010E
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	e6 5f       	subi	r30, 0xF6	; 246
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	60 81       	ld	r22, Z
 244:	82 e9       	ldi	r24, 0x92	; 146
 246:	90 e1       	ldi	r25, 0x10	; 16
 248:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z11display_DECjh>
		
	//increment digit display place
	if (place++ == 3) //post increment
 24c:	80 91 0e 01 	lds	r24, 0x010E
 250:	98 2f       	mov	r25, r24
 252:	9f 5f       	subi	r25, 0xFF	; 255
 254:	90 93 0e 01 	sts	0x010E, r25
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	11 f4       	brne	.+4      	; 0x260 <__vector_5+0xdc>
	{
		place = 0;
 25c:	10 92 0e 01 	sts	0x010E, r1
	}
}	
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <main>:

int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	//not used yet, but PORTC will be used for DAC bits
	MCUCR = (1<<JTD);
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
 286:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
 288:	27 9a       	sbi	0x04, 7	; 4
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
	//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
	//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
	DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
 28a:	84 b1       	in	r24, 0x04	; 4
 28c:	87 62       	ori	r24, 0x27	; 39
 28e:	84 b9       	out	0x04, r24	; 4
	
	//SET SPI_EN and LED_LATCH pins as outputs
	DDRJ |= (SPI_EN | LED_LATCH);
 290:	ec ed       	ldi	r30, 0xDC	; 220
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	8c 60       	ori	r24, 0x0C	; 12
 298:	80 83       	st	Z, r24
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
	SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	89 7d       	andi	r24, 0xD9	; 217
 29e:	85 b9       	out	0x05, r24	; 5
	
	//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
	SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
 2a0:	ed ed       	ldi	r30, 0xDD	; 221
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	83 7f       	andi	r24, 0xF3	; 243
 2a8:	80 83       	st	Z, r24
	
	//SET UP SPI
	SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
 2aa:	80 e5       	ldi	r24, 0x50	; 80
 2ac:	8c bd       	out	0x2c, r24	; 44
	
	//Pull LED_LATCH LOW
	SPI_LATCH_PORT &= ~LED_LATCH;
 2ae:	80 81       	ld	r24, Z
 2b0:	87 7f       	andi	r24, 0xF7	; 247
 2b2:	80 83       	st	Z, r24
	////Wait for SPI shift to complete
	//while (!(SPSR & (1<<SPIF)));
	
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
	
	SPI_LATCH_PORT &= ~LED_LATCH;
 2b4:	80 81       	ld	r24, Z
 2b6:	87 7f       	andi	r24, 0xF7	; 247
 2b8:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 2ba:	80 81       	ld	r24, Z
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	80 83       	st	Z, r24
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
 2c0:	81 b1       	in	r24, 0x01	; 1
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
 2c6:	92 b1       	in	r25, 0x02	; 2
 2c8:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
 2ca:	e9 ed       	ldi	r30, 0xD9	; 217
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	80 63       	ori	r24, 0x30	; 48
 2d2:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
 2d4:	ea ed       	ldi	r30, 0xDA	; 218
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	8f 7c       	andi	r24, 0xCF	; 207
 2dc:	80 83       	st	Z, r24
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
 2de:	e0 eb       	ldi	r30, 0xB0	; 176
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	86 60       	ori	r24, 0x06	; 6
 2e6:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
 2e8:	e0 e7       	ldi	r30, 0x70	; 112
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	80 83       	st	Z, r24
	sei(); //enable global interrupts
 2f2:	78 94       	sei
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <main+0x72>

000002f6 <__udivmodhi4>:
 2f6:	aa 1b       	sub	r26, r26
 2f8:	bb 1b       	sub	r27, r27
 2fa:	51 e1       	ldi	r21, 0x11	; 17
 2fc:	07 c0       	rjmp	.+14     	; 0x30c <__udivmodhi4_ep>

000002fe <__udivmodhi4_loop>:
 2fe:	aa 1f       	adc	r26, r26
 300:	bb 1f       	adc	r27, r27
 302:	a6 17       	cp	r26, r22
 304:	b7 07       	cpc	r27, r23
 306:	10 f0       	brcs	.+4      	; 0x30c <__udivmodhi4_ep>
 308:	a6 1b       	sub	r26, r22
 30a:	b7 0b       	sbc	r27, r23

0000030c <__udivmodhi4_ep>:
 30c:	88 1f       	adc	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	5a 95       	dec	r21
 312:	a9 f7       	brne	.-22     	; 0x2fe <__udivmodhi4_loop>
 314:	80 95       	com	r24
 316:	90 95       	com	r25
 318:	bc 01       	movw	r22, r24
 31a:	cd 01       	movw	r24, r26
 31c:	08 95       	ret

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
