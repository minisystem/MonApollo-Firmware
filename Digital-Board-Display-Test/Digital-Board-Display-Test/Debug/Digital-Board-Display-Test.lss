
Digital-Board-Display-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000047c  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010e  0080010e  0000051e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000c78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000055b  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000014e  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c1  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000189  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001da  00000000  00000000  000019b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_5>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d0 e1       	ldi	r29, 0x10	; 16
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	ec e7       	ldi	r30, 0x7C	; 124
  78:	f4 e0       	ldi	r31, 0x04	; 4
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ae 30       	cpi	r26, 0x0E	; 14
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	ae e0       	ldi	r26, 0x0E	; 14
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a6 31       	cpi	r26, 0x16	; 22
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 e5 01 	call	0x3ca	; 0x3ca <main>
  9a:	0c 94 3c 02 	jmp	0x478	; 0x478 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <_Z11display_DECjh>:

volatile uint16_t adc_previous = 0;
volatile uint16_t adc_value = 0;

void display_DEC(uint16_t number, uint8_t digit)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	2a 97       	sbiw	r28, 0x0a	; 10
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
		SEVEN,
		EIGHT,
		NINE,
		
		
	};
  b6:	de 01       	movw	r26, r28
  b8:	11 96       	adiw	r26, 0x01	; 1
  ba:	e0 e0       	ldi	r30, 0x00	; 0
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	3a e0       	ldi	r19, 0x0A	; 10
  c0:	01 90       	ld	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	31 50       	subi	r19, 0x01	; 1
  c6:	e1 f7       	brne	.-8      	; 0xc0 <_Z11display_DECjh+0x1e>
	
	//clear cathode bits
	DATA_BUS = 0xFF; //set bits for cathode (current sinks, active LOW)
  c8:	3f ef       	ldi	r19, 0xFF	; 255
  ca:	32 b9       	out	0x02, r19	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
  cc:	ea ed       	ldi	r30, 0xDA	; 218
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	30 81       	ld	r19, Z
  d2:	30 61       	ori	r19, 0x10	; 16
  d4:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
  d6:	30 81       	ld	r19, Z
  d8:	3f 7e       	andi	r19, 0xEF	; 239
  da:	30 83       	st	Z, r19
	
	//set anode bit
	DATA_BUS = digit;
  dc:	62 b9       	out	0x02, r22	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
  de:	30 81       	ld	r19, Z
  e0:	30 62       	ori	r19, 0x20	; 32
  e2:	30 83       	st	Z, r19
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
  e4:	30 81       	ld	r19, Z
  e6:	3f 7d       	andi	r19, 0xDF	; 223
  e8:	30 83       	st	Z, r19

	
	//determine cathode byte based on digit to display
	uint8_t cathode_byte;
	
	switch(digit) {
  ea:	62 30       	cpi	r22, 0x02	; 2
  ec:	f9 f0       	breq	.+62     	; 0x12c <_Z11display_DECjh+0x8a>
  ee:	63 30       	cpi	r22, 0x03	; 3
  f0:	18 f4       	brcc	.+6      	; 0xf8 <_Z11display_DECjh+0x56>
  f2:	61 30       	cpi	r22, 0x01	; 1
  f4:	a1 f5       	brne	.+104    	; 0x15e <_Z11display_DECjh+0xbc>
  f6:	0d c0       	rjmp	.+26     	; 0x112 <_Z11display_DECjh+0x70>
  f8:	64 30       	cpi	r22, 0x04	; 4
  fa:	29 f1       	breq	.+74     	; 0x146 <_Z11display_DECjh+0xa4>
  fc:	68 30       	cpi	r22, 0x08	; 8
  fe:	79 f5       	brne	.+94     	; 0x15e <_Z11display_DECjh+0xbc>
		
		case ONES:
		cathode_byte = DEC[(number % 10)]; //print first decimal digit
 100:	6a e0       	ldi	r22, 0x0A	; 10
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	0e 94 28 02 	call	0x450	; 0x450 <__udivmodhi4>
 108:	fe 01       	movw	r30, r28
 10a:	e8 0f       	add	r30, r24
 10c:	f9 1f       	adc	r31, r25
 10e:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 110:	26 c0       	rjmp	.+76     	; 0x15e <_Z11display_DECjh+0xbc>
		
		case TENS:
		cathode_byte = DEC[((number % 100) / 10)]; //print second decimal digit
 112:	64 e6       	ldi	r22, 0x64	; 100
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	0e 94 28 02 	call	0x450	; 0x450 <__udivmodhi4>
 11a:	6a e0       	ldi	r22, 0x0A	; 10
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	0e 94 28 02 	call	0x450	; 0x450 <__udivmodhi4>
 122:	fe 01       	movw	r30, r28
 124:	e6 0f       	add	r30, r22
 126:	f7 1f       	adc	r31, r23
 128:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 12a:	19 c0       	rjmp	.+50     	; 0x15e <_Z11display_DECjh+0xbc>
		
		case HUNDS:
		cathode_byte = DEC[((number % 1000) / 100)]; //print third decimal digit
 12c:	68 ee       	ldi	r22, 0xE8	; 232
 12e:	73 e0       	ldi	r23, 0x03	; 3
 130:	0e 94 28 02 	call	0x450	; 0x450 <__udivmodhi4>
 134:	64 e6       	ldi	r22, 0x64	; 100
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 28 02 	call	0x450	; 0x450 <__udivmodhi4>
 13c:	fe 01       	movw	r30, r28
 13e:	e6 0f       	add	r30, r22
 140:	f7 1f       	adc	r31, r23
 142:	21 81       	ldd	r18, Z+1	; 0x01
		break;
 144:	0c c0       	rjmp	.+24     	; 0x15e <_Z11display_DECjh+0xbc>
		
		case THOUS:
		cathode_byte = DEC[((number % 10000) / 1000)]; //print fourth decimal digit
 146:	60 e1       	ldi	r22, 0x10	; 16
 148:	77 e2       	ldi	r23, 0x27	; 39
 14a:	0e 94 28 02 	call	0x450	; 0x450 <__udivmodhi4>
 14e:	68 ee       	ldi	r22, 0xE8	; 232
 150:	73 e0       	ldi	r23, 0x03	; 3
 152:	0e 94 28 02 	call	0x450	; 0x450 <__udivmodhi4>
 156:	fe 01       	movw	r30, r28
 158:	e6 0f       	add	r30, r22
 15a:	f7 1f       	adc	r31, r23
 15c:	21 81       	ldd	r18, Z+1	; 0x01
		break;
		
	}
	
	//set cathode byte
	DATA_BUS = ~(cathode_byte); //set bits for cathode (current sinks, active LOW)
 15e:	20 95       	com	r18
 160:	22 b9       	out	0x02, r18	; 2
	//latch data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 162:	ea ed       	ldi	r30, 0xDA	; 218
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);
 16c:	80 81       	ld	r24, Z
 16e:	8f 7e       	andi	r24, 0xEF	; 239
 170:	80 83       	st	Z, r24

}
 172:	2a 96       	adiw	r28, 0x0a	; 10
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	cd bf       	out	0x3d, r28	; 61
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <_Z8setupADCv>:
	THOUS,
};

void setupADC(void)
{
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //set ADC clock to 156.25 KHz for 20 MHz clock
 184:	ea e7       	ldi	r30, 0x7A	; 122
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	87 60       	ori	r24, 0x07	; 7
 18c:	80 83       	st	Z, r24
	
	ADMUX |= (1<<REFS0); //set ADC reference to AVCC (+5V)
 18e:	ac e7       	ldi	r26, 0x7C	; 124
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	8c 91       	ld	r24, X
 194:	80 64       	ori	r24, 0x40	; 64
 196:	8c 93       	st	X, r24
	//MUX2:0 is 000 by default in ADMUX
	//ADMUX &= ~(1<<MUX0); //set ADC multiplexer to read ADC0 (PF0 on PORTF, pin 97)
	
	//ADCSRA |= (1<<ADATE); //set ADC in free running mode
	
	DIDR0 |= 0x01; //disable digital input buffer for ADC0
 198:	ae e7       	ldi	r26, 0x7E	; 126
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	8c 91       	ld	r24, X
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN); //enable ADC
 1a2:	80 81       	ld	r24, Z
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC); //start ADC
 1a8:	80 81       	ld	r24, Z
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	80 83       	st	Z, r24
	//adc_value = ADCL;
	//adc_value = adc_value | (ADCH <<8);
	//adc_previous = adc_value;
	//PORTH |= (1<<POTMUX_EN0); //set POTMUX_EN0
	
}
 1ae:	08 95       	ret

000001b0 <__vector_5>:

ISR (TIMER2_OVF_vect) { //main scanning interrupt handler
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	
	if (place == 0) { //if place is 0, start a new ADC conversion
 1d2:	80 91 12 01 	lds	r24, 0x0112
 1d6:	88 23       	and	r24, r24
 1d8:	09 f0       	breq	.+2      	; 0x1dc <__vector_5+0x2c>
 1da:	87 c0       	rjmp	.+270    	; 0x2ea <__vector_5+0x13a>
		//select POTMUX input
		if (ISW4_SW_ON) {
 1dc:	80 91 13 01 	lds	r24, 0x0113
 1e0:	88 23       	and	r24, r24
 1e2:	91 f1       	breq	.+100    	; 0x248 <__vector_5+0x98>
			DATA_BUS = 0b00000111; //select Y7 (VR2 POT)
 1e4:	87 e0       	ldi	r24, 0x07	; 7
 1e6:	82 b9       	out	0x02, r24	; 2
			PORTH &= ~(1<<POTMUX_EN0); //clear POTMUX_EN0 to select input Y7
 1e8:	ea ed       	ldi	r30, 0xDA	; 218
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8f 7b       	andi	r24, 0xBF	; 191
 1f0:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC); //start ADC conversion
 1f2:	ea e7       	ldi	r30, 0x7A	; 122
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 64       	ori	r24, 0x40	; 64
 1fa:	80 83       	st	Z, r24
			while (!(ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles)
 1fc:	80 81       	ld	r24, Z
 1fe:	86 ff       	sbrs	r24, 6
 200:	fd cf       	rjmp	.-6      	; 0x1fc <__vector_5+0x4c>
			adc_previous = adc_value;
 202:	80 91 0e 01 	lds	r24, 0x010E
 206:	90 91 0f 01 	lds	r25, 0x010F
 20a:	90 93 11 01 	sts	0x0111, r25
 20e:	80 93 10 01 	sts	0x0110, r24
			adc_value = ADCL;
 212:	80 91 78 00 	lds	r24, 0x0078
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 0f 01 	sts	0x010F, r25
 21c:	80 93 0e 01 	sts	0x010E, r24
			adc_value = adc_value | (ADCH <<8);				 		
 220:	40 91 79 00 	lds	r20, 0x0079
 224:	20 91 0e 01 	lds	r18, 0x010E
 228:	30 91 0f 01 	lds	r19, 0x010F
 22c:	94 2f       	mov	r25, r20
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	82 2b       	or	r24, r18
 232:	93 2b       	or	r25, r19
 234:	90 93 0f 01 	sts	0x010F, r25
 238:	80 93 0e 01 	sts	0x010E, r24
			PORTH |= (1<<POTMUX_EN0); //set POTMUX_EN0
 23c:	ea ed       	ldi	r30, 0xDA	; 218
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	80 64       	ori	r24, 0x40	; 64
 244:	80 83       	st	Z, r24
 246:	31 c0       	rjmp	.+98     	; 0x2aa <__vector_5+0xfa>
		} else {
			DATA_BUS = 0b00001001; //select Y9 (VR27 POT)
 248:	89 e0       	ldi	r24, 0x09	; 9
 24a:	82 b9       	out	0x02, r24	; 2
			PORTH &= ~(1<<POTMUX_EN1); //clear POTMUX_EN1 to select input Y9
 24c:	ea ed       	ldi	r30, 0xDA	; 218
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	8f 77       	andi	r24, 0x7F	; 127
 254:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC); //start ADC conversion
 256:	ea e7       	ldi	r30, 0x7A	; 122
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	80 83       	st	Z, r24
			while (!(ADCSRA & (1<<ADSC))); //wait for ADC conversion to complete (13 cycles)
 260:	80 81       	ld	r24, Z
 262:	86 ff       	sbrs	r24, 6
 264:	fd cf       	rjmp	.-6      	; 0x260 <__vector_5+0xb0>
			adc_previous = adc_value;
 266:	80 91 0e 01 	lds	r24, 0x010E
 26a:	90 91 0f 01 	lds	r25, 0x010F
 26e:	90 93 11 01 	sts	0x0111, r25
 272:	80 93 10 01 	sts	0x0110, r24
			adc_value = ADCL;
 276:	80 91 78 00 	lds	r24, 0x0078
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 0f 01 	sts	0x010F, r25
 280:	80 93 0e 01 	sts	0x010E, r24
			adc_value = adc_value | (ADCH <<8);
 284:	40 91 79 00 	lds	r20, 0x0079
 288:	20 91 0e 01 	lds	r18, 0x010E
 28c:	30 91 0f 01 	lds	r19, 0x010F
 290:	94 2f       	mov	r25, r20
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	82 2b       	or	r24, r18
 296:	93 2b       	or	r25, r19
 298:	90 93 0f 01 	sts	0x010F, r25
 29c:	80 93 0e 01 	sts	0x010E, r24
			PORTH |= (1<<POTMUX_EN1); //set POTMUX_EN1						
 2a0:	ea ed       	ldi	r30, 0xDA	; 218
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	80 68       	ori	r24, 0x80	; 128
 2a8:	80 83       	st	Z, r24
		}		
		int deflection = adc_value - adc_previous;
 2aa:	80 91 0e 01 	lds	r24, 0x010E
 2ae:	90 91 0f 01 	lds	r25, 0x010F
 2b2:	20 91 10 01 	lds	r18, 0x0110
 2b6:	30 91 11 01 	lds	r19, 0x0111
 2ba:	82 1b       	sub	r24, r18
 2bc:	93 0b       	sbc	r25, r19
		if (deflection < 0 ) deflection = adc_previous - adc_value;
 2be:	52 f4       	brpl	.+20     	; 0x2d4 <__vector_5+0x124>
 2c0:	80 91 10 01 	lds	r24, 0x0110
 2c4:	90 91 11 01 	lds	r25, 0x0111
 2c8:	20 91 0e 01 	lds	r18, 0x010E
 2cc:	30 91 0f 01 	lds	r19, 0x010F
 2d0:	82 1b       	sub	r24, r18
 2d2:	93 0b       	sbc	r25, r19
		if (deflection <= 1) adc_value = adc_previous;
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	91 05       	cpc	r25, r1
 2d8:	44 f4       	brge	.+16     	; 0x2ea <__vector_5+0x13a>
 2da:	80 91 10 01 	lds	r24, 0x0110
 2de:	90 91 11 01 	lds	r25, 0x0111
 2e2:	90 93 0f 01 	sts	0x010F, r25
 2e6:	80 93 0e 01 	sts	0x010E, r24
	}				
	//toggle ARP_SYNC LED
	PINB = (1<<ARP_SYNC_LED);
 2ea:	80 e8       	ldi	r24, 0x80	; 128
 2ec:	83 b9       	out	0x03, r24	; 3
	SPI_PORT |= SPI_SW_LATCH;
 2ee:	2d 9a       	sbi	0x05, 5	; 5
		
	//SHIFT 5th BYTE
	SPDR =  ISW4_SW_ON << 1 | ISW8_LED; //ISW8_LED is MSB on 74XX595 U16
 2f0:	80 91 13 01 	lds	r24, 0x0113
 2f4:	88 0f       	add	r24, r24
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 2fa:	0d b4       	in	r0, 0x2d	; 45
 2fc:	07 fe       	sbrs	r0, 7
 2fe:	fd cf       	rjmp	.-6      	; 0x2fa <__vector_5+0x14a>
		
	//Now read SPDR for switch data shifted in from 74XX165 U14
	if (SPDR >> 7 & 1) //check if ISW4_SW bit is set (MSB on U14)
 300:	0e b4       	in	r0, 0x2e	; 46
 302:	07 fe       	sbrs	r0, 7
 304:	04 c0       	rjmp	.+8      	; 0x30e <__vector_5+0x15e>
	{
		ISW4_SW_ON = 1;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 13 01 	sts	0x0113, r24
 30c:	02 c0       	rjmp	.+4      	; 0x312 <__vector_5+0x162>
	}
	else
	{
		ISW4_SW_ON = 0;
 30e:	10 92 13 01 	sts	0x0113, r1
	}
	//SHIFT 4th BYTE
	SPDR = 0; //no LEDs connected in current test set up
 312:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 314:	0d b4       	in	r0, 0x2d	; 45
 316:	07 fe       	sbrs	r0, 7
 318:	fd cf       	rjmp	.-6      	; 0x314 <__vector_5+0x164>
	//Now read SPDR for switch data shifted in from 74XX165 (U9)
	//check if ISW12_SW bit is set
	if (SPDR >> 5 & 1)
 31a:	0e b4       	in	r0, 0x2e	; 46
 31c:	05 fe       	sbrs	r0, 5
 31e:	04 c0       	rjmp	.+8      	; 0x328 <__vector_5+0x178>
	{
		ISW12_SW_ON = 1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 15 01 	sts	0x0115, r24
 326:	02 c0       	rjmp	.+4      	; 0x32c <__vector_5+0x17c>
	}
	else
	{
		ISW12_SW_ON = 0;
 328:	10 92 15 01 	sts	0x0115, r1
	}
	//check if ISW13_SW bit is set
	if (SPDR >> 6 & 1)
 32c:	0e b4       	in	r0, 0x2e	; 46
 32e:	06 fe       	sbrs	r0, 6
 330:	04 c0       	rjmp	.+8      	; 0x33a <__vector_5+0x18a>
	{
		ISW13_SW_ON = 1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	80 93 14 01 	sts	0x0114, r24
 338:	02 c0       	rjmp	.+4      	; 0x33e <__vector_5+0x18e>
	}
	else
	{
		ISW13_SW_ON = 0;
 33a:	10 92 14 01 	sts	0x0114, r1
	}
		
	//SHIFT 3th BYTE
	SPDR = 0;
 33e:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 340:	0d b4       	in	r0, 0x2d	; 45
 342:	07 fe       	sbrs	r0, 7
 344:	fd cf       	rjmp	.-6      	; 0x340 <__vector_5+0x190>

	//SHIFT 2th BYTE
	SPDR = 0;
 346:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 348:	0d b4       	in	r0, 0x2d	; 45
 34a:	07 fe       	sbrs	r0, 7
 34c:	fd cf       	rjmp	.-6      	; 0x348 <__vector_5+0x198>
		
	//SHIFT 1st BYTE
	//SPDR = (ISW12_SW_ON << 2) | ISW11_LED; //TURN ON ISW12 (if ISW12_SW is ON) and ISW11 LEDs, both on 74XX595 U8, first shift register in chain
	SPDR = (ISW12_SW_ON <<2) | (ISW13_SW_ON << 7); //turn on ISW12 if ISW12_SW is ON, turn ISW11 (MSB of first shift register chain) if ISW13_SW is ON
 34e:	80 91 15 01 	lds	r24, 0x0115
 352:	90 91 14 01 	lds	r25, 0x0114
 356:	97 95       	ror	r25
 358:	99 27       	eor	r25, r25
 35a:	97 95       	ror	r25
 35c:	88 0f       	add	r24, r24
 35e:	88 0f       	add	r24, r24
 360:	89 2b       	or	r24, r25
 362:	8e bd       	out	0x2e, r24	; 46
	//Wait for SPI shift to complete
	while (!(SPSR & (1<<SPIF)));
 364:	0d b4       	in	r0, 0x2d	; 45
 366:	07 fe       	sbrs	r0, 7
 368:	fd cf       	rjmp	.-6      	; 0x364 <__vector_5+0x1b4>
		
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
	SPI_LATCH_PORT &= ~LED_LATCH;
 36a:	ed ed       	ldi	r30, 0xDD	; 221
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	87 7f       	andi	r24, 0xF7	; 247
 372:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 374:	80 81       	ld	r24, Z
 376:	88 60       	ori	r24, 0x08	; 8
 378:	80 83       	st	Z, r24
		
	//clear SPI_SW_LATCH
	SPI_PORT &= ~SPI_SW_LATCH;
 37a:	2d 98       	cbi	0x05, 5	; 5
		
	//update 7-segment LED display 
	display_DEC(adc_value, digit[place]);
 37c:	80 91 0e 01 	lds	r24, 0x010E
 380:	90 91 0f 01 	lds	r25, 0x010F
 384:	e0 91 12 01 	lds	r30, 0x0112
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	e6 5f       	subi	r30, 0xF6	; 246
 38c:	fe 4f       	sbci	r31, 0xFE	; 254
 38e:	60 81       	ld	r22, Z
 390:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z11display_DECjh>
	
	//increment digit display place
	if (place++ == 3) //post increment
 394:	80 91 12 01 	lds	r24, 0x0112
 398:	98 2f       	mov	r25, r24
 39a:	9f 5f       	subi	r25, 0xFF	; 255
 39c:	90 93 12 01 	sts	0x0112, r25
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <__vector_5+0x1f8>
	{
		place = 0;
 3a4:	10 92 12 01 	sts	0x0112, r1
	}
	

	
}	
 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	bf 91       	pop	r27
 3ae:	af 91       	pop	r26
 3b0:	9f 91       	pop	r25
 3b2:	8f 91       	pop	r24
 3b4:	7f 91       	pop	r23
 3b6:	6f 91       	pop	r22
 3b8:	5f 91       	pop	r21
 3ba:	4f 91       	pop	r20
 3bc:	3f 91       	pop	r19
 3be:	2f 91       	pop	r18
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <main>:

int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	//not used yet, but PORTC will be used for DAC bits
	MCUCR = (1<<JTD);
 3ca:	80 e8       	ldi	r24, 0x80	; 128
 3cc:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
 3ce:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
 3d0:	27 9a       	sbi	0x04, 7	; 4
	
	DDRF |= (1<<GATE); //set gate as output
 3d2:	81 9a       	sbi	0x10, 1	; 16
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
	//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
	//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
	DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
 3d4:	84 b1       	in	r24, 0x04	; 4
 3d6:	87 62       	ori	r24, 0x27	; 39
 3d8:	84 b9       	out	0x04, r24	; 4
	
	//SET SPI_EN and LED_LATCH pins as outputs
	DDRJ |= (SPI_EN | LED_LATCH);
 3da:	ec ed       	ldi	r30, 0xDC	; 220
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	8c 60       	ori	r24, 0x0C	; 12
 3e2:	80 83       	st	Z, r24
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
	SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	89 7d       	andi	r24, 0xD9	; 217
 3e8:	85 b9       	out	0x05, r24	; 5
	
	//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
	SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
 3ea:	ed ed       	ldi	r30, 0xDD	; 221
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	83 7f       	andi	r24, 0xF3	; 243
 3f2:	80 83       	st	Z, r24
	
	//SET UP SPI
	SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
 3f4:	80 e5       	ldi	r24, 0x50	; 80
 3f6:	8c bd       	out	0x2c, r24	; 44
	
	//Pull LED_LATCH LOW
	SPI_LATCH_PORT &= ~LED_LATCH;
 3f8:	80 81       	ld	r24, Z
 3fa:	87 7f       	andi	r24, 0xF7	; 247
 3fc:	80 83       	st	Z, r24
	////Wait for SPI shift to complete
	//while (!(SPSR & (1<<SPIF)));
	
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
	
	SPI_LATCH_PORT &= ~LED_LATCH;
 3fe:	80 81       	ld	r24, Z
 400:	87 7f       	andi	r24, 0xF7	; 247
 402:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 404:	80 81       	ld	r24, Z
 406:	88 60       	ori	r24, 0x08	; 8
 408:	80 83       	st	Z, r24
	
	
	DDRH |= (1<<POTMUX_EN0) | (1<<POTMUX_EN1); //set POTMUX_EN pins as outputs
 40a:	a9 ed       	ldi	r26, 0xD9	; 217
 40c:	b0 e0       	ldi	r27, 0x00	; 0
 40e:	8c 91       	ld	r24, X
 410:	80 6c       	ori	r24, 0xC0	; 192
 412:	8c 93       	st	X, r24
	PORTH |= (1<<POTMUX_EN0) | (1<POTMUX_EN1); //set POTMUX_EN pins HIGH (active LOW)
 414:	ea ed       	ldi	r30, 0xDA	; 218
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	81 64       	ori	r24, 0x41	; 65
 41c:	80 83       	st	Z, r24
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
 41e:	81 b1       	in	r24, 0x01	; 1
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
 424:	92 b1       	in	r25, 0x02	; 2
 426:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
 428:	8c 91       	ld	r24, X
 42a:	80 63       	ori	r24, 0x30	; 48
 42c:	8c 93       	st	X, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
 42e:	80 81       	ld	r24, Z
 430:	8f 7c       	andi	r24, 0xCF	; 207
 432:	80 83       	st	Z, r24
	

	//setup ADC, free running for now. Not sure if this is the way it should be done. Look into benefits of one-shot ADC
    setupADC();	
 434:	0e 94 c2 00 	call	0x184	; 0x184 <_Z8setupADCv>
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
 438:	e0 eb       	ldi	r30, 0xB0	; 176
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	86 60       	ori	r24, 0x06	; 6
 440:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
 442:	e0 e7       	ldi	r30, 0x70	; 112
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	80 83       	st	Z, r24
	sei(); //enable global interrupts
 44c:	78 94       	sei
 44e:	ff cf       	rjmp	.-2      	; 0x44e <main+0x84>

00000450 <__udivmodhi4>:
 450:	aa 1b       	sub	r26, r26
 452:	bb 1b       	sub	r27, r27
 454:	51 e1       	ldi	r21, 0x11	; 17
 456:	07 c0       	rjmp	.+14     	; 0x466 <__udivmodhi4_ep>

00000458 <__udivmodhi4_loop>:
 458:	aa 1f       	adc	r26, r26
 45a:	bb 1f       	adc	r27, r27
 45c:	a6 17       	cp	r26, r22
 45e:	b7 07       	cpc	r27, r23
 460:	10 f0       	brcs	.+4      	; 0x466 <__udivmodhi4_ep>
 462:	a6 1b       	sub	r26, r22
 464:	b7 0b       	sbc	r27, r23

00000466 <__udivmodhi4_ep>:
 466:	88 1f       	adc	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	5a 95       	dec	r21
 46c:	a9 f7       	brne	.-22     	; 0x458 <__udivmodhi4_loop>
 46e:	80 95       	com	r24
 470:	90 95       	com	r25
 472:	bc 01       	movw	r22, r24
 474:	cd 01       	movw	r24, r26
 476:	08 95       	ret

00000478 <_exit>:
 478:	f8 94       	cli

0000047a <__stop_program>:
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
