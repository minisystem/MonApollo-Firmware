
Digital-Board-Display-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001f4  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000288  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000009e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000367  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b3  00000000  00000000  00000dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d9  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010a  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  000012b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_5>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf ef       	ldi	r28, 0xFF	; 255
  6a:	d0 e1       	ldi	r29, 0x10	; 16
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b1 e0       	ldi	r27, 0x01	; 1
  76:	e4 ef       	ldi	r30, 0xF4	; 244
  78:	f1 e0       	ldi	r31, 0x01	; 1
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a0 30       	cpi	r26, 0x00	; 0
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a3 30       	cpi	r26, 0x03	; 3
  92:	b1 07       	cpc	r27, r17
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  9a:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <__vector_5>:
volatile uint8_t ISW12_SW_ON = 0; //flag for ISW12 switch
volatile uint8_t ISW13_SW_ON = 0; //flag for ISW13 switch
volatile uint8_t ISW4_SW_ON = 0;  //flag for ISW4 switch

//main scanning interrupt handler
ISR (TIMER2_OVF_vect) {
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	
	//toggle ARP_SYNC LED
	PINB = (1<<ARP_SYNC_LED);
  b4:	80 e8       	ldi	r24, 0x80	; 128
  b6:	83 b9       	out	0x03, r24	; 3
	SPI_PORT |= SPI_SW_LATCH;
  b8:	2d 9a       	sbi	0x05, 5	; 5
		
	//SHIFT 5th BYTE
	SPDR =  ISW4_SW_ON << 1 | ISW8_LED; //ISW8_LED is MSB on 74XX595 U16
  ba:	80 91 00 01 	lds	r24, 0x0100
  be:	88 0f       	add	r24, r24
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
  c4:	0d b4       	in	r0, 0x2d	; 45
  c6:	07 fe       	sbrs	r0, 7
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <__vector_5+0x22>
		
	//Now read SPDR for switch data shifted in from 74XX165 U14
	if (SPDR >> 7 & 1) //check if ISW4_SW bit is set (MSB on U14)
  ca:	0e b4       	in	r0, 0x2e	; 46
  cc:	07 fe       	sbrs	r0, 7
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__vector_5+0x36>
	{
		ISW4_SW_ON = 1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 00 01 	sts	0x0100, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__vector_5+0x3a>
	}
	else
	{
		ISW4_SW_ON = 0;
  d8:	10 92 00 01 	sts	0x0100, r1
	}
	//SHIFT 4th BYTE
	SPDR = 0; //no LEDs connected in current test set up
  dc:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
  de:	0d b4       	in	r0, 0x2d	; 45
  e0:	07 fe       	sbrs	r0, 7
  e2:	fd cf       	rjmp	.-6      	; 0xde <__vector_5+0x3c>
	//Now read SPDR for switch data shifted in from 74XX165 (U9)
	//check if ISW12_SW bit is set
	if (SPDR >> 5 & 1)
  e4:	0e b4       	in	r0, 0x2e	; 46
  e6:	05 fe       	sbrs	r0, 5
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <__vector_5+0x50>
	{
		ISW12_SW_ON = 1;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 02 01 	sts	0x0102, r24
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <__vector_5+0x54>
	}
	else
	{
		ISW12_SW_ON = 0;
  f2:	10 92 02 01 	sts	0x0102, r1
	}
	//check if ISW13_SW bit is set
	if (SPDR >> 6 & 1)
  f6:	0e b4       	in	r0, 0x2e	; 46
  f8:	06 fe       	sbrs	r0, 6
  fa:	04 c0       	rjmp	.+8      	; 0x104 <__vector_5+0x62>
	{
		ISW13_SW_ON = 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 01 01 	sts	0x0101, r24
 102:	02 c0       	rjmp	.+4      	; 0x108 <__vector_5+0x66>
	}
	else
	{
		ISW13_SW_ON = 0;
 104:	10 92 01 01 	sts	0x0101, r1
	}
		
	//SHIFT 3th BYTE
	SPDR = 0;
 108:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 10a:	0d b4       	in	r0, 0x2d	; 45
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <__vector_5+0x68>

	//SHIFT 2th BYTE
	SPDR = 0;
 110:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 112:	0d b4       	in	r0, 0x2d	; 45
 114:	07 fe       	sbrs	r0, 7
 116:	fd cf       	rjmp	.-6      	; 0x112 <__vector_5+0x70>
		
	//SHIFT 1st BYTE
	//SPDR = (ISW12_SW_ON << 2) | ISW11_LED; //TURN ON ISW12 (if ISW12_SW is ON) and ISW11 LEDs, both on 74XX595 U8, first shift register in chain
	SPDR = (ISW12_SW_ON <<2) | (ISW13_SW_ON << 7); //turn on ISW12 if ISW12_SW is ON, turn ISW11 (MSB of first shift register chain) if ISW13_SW is ON
 118:	80 91 02 01 	lds	r24, 0x0102
 11c:	90 91 01 01 	lds	r25, 0x0101
 120:	97 95       	ror	r25
 122:	99 27       	eor	r25, r25
 124:	97 95       	ror	r25
 126:	88 0f       	add	r24, r24
 128:	88 0f       	add	r24, r24
 12a:	89 2b       	or	r24, r25
 12c:	8e bd       	out	0x2e, r24	; 46
	//Wait for SPI shift to complete
	while (!(SPSR & (1<<SPIF)));
 12e:	0d b4       	in	r0, 0x2d	; 45
 130:	07 fe       	sbrs	r0, 7
 132:	fd cf       	rjmp	.-6      	; 0x12e <__vector_5+0x8c>
		
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
		
	SPI_LATCH_PORT &= ~LED_LATCH;
 134:	ed ed       	ldi	r30, 0xDD	; 221
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	87 7f       	andi	r24, 0xF7	; 247
 13c:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 13e:	80 81       	ld	r24, Z
 140:	88 60       	ori	r24, 0x08	; 8
 142:	80 83       	st	Z, r24
		
	//clear SPI_SW_LATCH
	SPI_PORT &= ~SPI_SW_LATCH;
 144:	2d 98       	cbi	0x05, 5	; 5
		
	//LIGHT SOME SEGMENTS OF 7-SEG LED DISPLAY
	DATA_BUS = 0b1111; //set bits for anode
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	82 b9       	out	0x02, r24	; 2
	//latch data to anode lines
	DISPLAY_PORT |= (1<<DISP_ANODE_LATCH);
 14a:	ea ed       	ldi	r30, 0xDA	; 218
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	80 62       	ori	r24, 0x20	; 32
 152:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH);
 154:	80 81       	ld	r24, Z
 156:	8f 7d       	andi	r24, 0xDF	; 223
 158:	80 83       	st	Z, r24
		
	DATA_BUS = 0b00000001; //set bits for cathode (current sinks, active LOW)
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	82 b9       	out	0x02, r24	; 2
	//toggle data to cathode lines
	DISPLAY_PORT |= (1<<DISP_CATHODE_LATCH);
 15e:	80 81       	ld	r24, Z
 160:	80 61       	ori	r24, 0x10	; 16
 162:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_CATHODE_LATCH);	
 164:	80 81       	ld	r24, Z
 166:	8f 7e       	andi	r24, 0xEF	; 239
 168:	80 83       	st	Z, r24
}	
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <main>:
int main(void)
{
	//turn off JTAG so all outputs of PORTC can be used
	//not used yet, but PORTC will be used for DAC bits
	MCUCR = (1<<JTD);
 17c:	80 e8       	ldi	r24, 0x80	; 128
 17e:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<JTD);
 180:	85 bf       	out	0x35, r24	; 53
		
	//SET PORTB PIN 7 (PB7) as OUTPUT
	DDRB |= (1<<ARP_SYNC_LED);
 182:	27 9a       	sbi	0x04, 7	; 4
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH pins as outputs
	//also set Slave Select (PB0) as output just to ensure it doesn't interfere with SPI communication (currently floating)
	//ACTUALLY, Slave Select ***MUST*** be set as output. Leaving it floating without setting its data direction bit breaks SPI!
	DDRB |= (SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH |(1<<PB0));
 184:	84 b1       	in	r24, 0x04	; 4
 186:	87 62       	ori	r24, 0x27	; 39
 188:	84 b9       	out	0x04, r24	; 4
	
	//SET SPI_EN and LED_LATCH pins as outputs
	DDRJ |= (SPI_EN | LED_LATCH);
 18a:	ec ed       	ldi	r30, 0xDC	; 220
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8c 60       	ori	r24, 0x0C	; 12
 192:	80 83       	st	Z, r24
	
	//SET SPI_DATA_OUT and SPI_CLK and SPI_SW_LATCH outputs LOW
	SPI_PORT &= ~(SPI_DATA_OUT | SPI_CLK | SPI_SW_LATCH);
 194:	85 b1       	in	r24, 0x05	; 5
 196:	89 7d       	andi	r24, 0xD9	; 217
 198:	85 b9       	out	0x05, r24	; 5
	
	//SET SPI_EN LOW (active) and LED_LATCH LOW (active)
	SPI_LATCH_PORT &= ~(SPI_EN | LED_LATCH);
 19a:	ed ed       	ldi	r30, 0xDD	; 221
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	83 7f       	andi	r24, 0xF3	; 243
 1a2:	80 83       	st	Z, r24
	
	//SET UP SPI
	SPCR = (1<<SPE) | (1<<MSTR); //Start SPI as MASTER
 1a4:	80 e5       	ldi	r24, 0x50	; 80
 1a6:	8c bd       	out	0x2c, r24	; 44
	
	//Pull LED_LATCH LOW
	SPI_LATCH_PORT &= ~LED_LATCH;
 1a8:	80 81       	ld	r24, Z
 1aa:	87 7f       	andi	r24, 0xF7	; 247
 1ac:	80 83       	st	Z, r24
	////Wait for SPI shift to complete
	//while (!(SPSR & (1<<SPIF)));
	
	//Toggle LED_LATCH to shift data to 74HC595 shift register outputs
	
	SPI_LATCH_PORT &= ~LED_LATCH;
 1ae:	80 81       	ld	r24, Z
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	80 83       	st	Z, r24
	SPI_LATCH_PORT |= LED_LATCH;
 1b4:	80 81       	ld	r24, Z
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	80 83       	st	Z, r24
	
	//set up LED display
	DDRA |= 0b11111111; //set all lines or DATA_BUS to outputs
 1ba:	81 b1       	in	r24, 0x01	; 1
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	81 b9       	out	0x01, r24	; 1
	DATA_BUS |= 0b11111111; //set all DATA_BUS lines to HIGH (cathodes OFF)
 1c0:	92 b1       	in	r25, 0x02	; 2
 1c2:	82 b9       	out	0x02, r24	; 2
	DDRH |= (1<<DISP_CATHODE_LATCH) | (1<<DISP_ANODE_LATCH); //set display latches to outputs
 1c4:	e9 ed       	ldi	r30, 0xD9	; 217
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 63       	ori	r24, 0x30	; 48
 1cc:	80 83       	st	Z, r24
	DISPLAY_PORT &= ~(1<<DISP_ANODE_LATCH | 1<< DISP_CATHODE_LATCH); //set DISP latches to LOW (inactive)
 1ce:	ea ed       	ldi	r30, 0xDA	; 218
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	8f 7c       	andi	r24, 0xCF	; 207
 1d6:	80 83       	st	Z, r24
	
	//set up main timer interrupt
	//this generates the main scanning interrupt
	TCCR2A |= (1<<CS22) | (1<<CS21); //Timer2 20MHz/256 prescaler
 1d8:	e0 eb       	ldi	r30, 0xB0	; 176
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2); //enable Timer2 overflow interrupt over flows approx. every 3ms	
 1e2:	e0 e7       	ldi	r30, 0x70	; 112
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	80 83       	st	Z, r24
	sei(); //enable global interrupts
 1ec:	78 94       	sei
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <main+0x72>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
